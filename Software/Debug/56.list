
56.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012194  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08012434  08012434  00013434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012578  08012578  00013578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012580  08012580  00013580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012584  08012584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000158  24000000  08012588  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000071e4  24000158  080126e0  00014158  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400733c  080126e0  0001433c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00014158  2**0
                  CONTENTS, READONLY
 10 .debug_info   00036c52  00000000  00000000  00014186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000062de  00000000  00000000  0004add8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002918  00000000  00000000  000510b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fe9  00000000  00000000  000539d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00009069  00000000  00000000  000559b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00033dca  00000000  00000000  0005ea22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019762a  00000000  00000000  000927ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00229e16  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b4dc  00000000  00000000  00229e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  00235338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801241c 	.word	0x0801241c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	0801241c 	.word	0x0801241c

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005d6:	4b52      	ldr	r3, [pc, #328]	@ (8000720 <main+0x150>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d11b      	bne.n	800061a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e2:	f3bf 8f4f 	dsb	sy
}
 80005e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e8:	f3bf 8f6f 	isb	sy
}
 80005ec:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005ee:	4b4c      	ldr	r3, [pc, #304]	@ (8000720 <main+0x150>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fc:	f3bf 8f6f 	isb	sy
}
 8000600:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000602:	4b47      	ldr	r3, [pc, #284]	@ (8000720 <main+0x150>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a46      	ldr	r2, [pc, #280]	@ (8000720 <main+0x150>)
 8000608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800060c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800060e:	f3bf 8f4f 	dsb	sy
}
 8000612:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000614:	f3bf 8f6f 	isb	sy
}
 8000618:	e000      	b.n	800061c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800061a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800061c:	4b40      	ldr	r3, [pc, #256]	@ (8000720 <main+0x150>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000624:	2b00      	cmp	r3, #0
 8000626:	d138      	bne.n	800069a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000628:	4b3d      	ldr	r3, [pc, #244]	@ (8000720 <main+0x150>)
 800062a:	2200      	movs	r2, #0
 800062c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000630:	f3bf 8f4f 	dsb	sy
}
 8000634:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000636:	4b3a      	ldr	r3, [pc, #232]	@ (8000720 <main+0x150>)
 8000638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800063c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	0b5b      	lsrs	r3, r3, #13
 8000642:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000646:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	08db      	lsrs	r3, r3, #3
 800064c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000650:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	015a      	lsls	r2, r3, #5
 8000656:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800065a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000660:	492f      	ldr	r1, [pc, #188]	@ (8000720 <main+0x150>)
 8000662:	4313      	orrs	r3, r2
 8000664:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	1e5a      	subs	r2, r3, #1
 800066c:	607a      	str	r2, [r7, #4]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1ef      	bne.n	8000652 <main+0x82>
    } while(sets-- != 0U);
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	60ba      	str	r2, [r7, #8]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1e5      	bne.n	8000648 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800067c:	f3bf 8f4f 	dsb	sy
}
 8000680:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000682:	4b27      	ldr	r3, [pc, #156]	@ (8000720 <main+0x150>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a26      	ldr	r2, [pc, #152]	@ (8000720 <main+0x150>)
 8000688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800068c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800068e:	f3bf 8f4f 	dsb	sy
}
 8000692:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000694:	f3bf 8f6f 	isb	sy
}
 8000698:	e000      	b.n	800069c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800069a:	bf00      	nop
  /* Enable the CPU Cache */
  SCB_EnableICache();
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 800069c:	f001 feb8 	bl	8002410 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f85a 	bl	8000758 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 fb18 	bl	8000cd8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006a8:	f000 f8ca 	bl	8000840 <MX_ADC1_Init>
  MX_HRTIM_Init();
 80006ac:	f000 f944 	bl	8000938 <MX_HRTIM_Init>
  MX_LPTIM1_Init();
 80006b0:	f000 f9cc 	bl	8000a4c <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 80006b4:	f000 f9f6 	bl	8000aa4 <MX_LPTIM2_Init>
  MX_LPTIM3_Init();
 80006b8:	f000 fa20 	bl	8000afc <MX_LPTIM3_Init>
  MX_LPTIM4_Init();
 80006bc:	f000 fa48 	bl	8000b50 <MX_LPTIM4_Init>
  MX_LPTIM5_Init();
 80006c0:	f000 fa6c 	bl	8000b9c <MX_LPTIM5_Init>
  MX_TIM2_Init();
 80006c4:	f000 fa90 	bl	8000be8 <MX_TIM2_Init>
  MX_UART4_Init();
 80006c8:	f000 fadc 	bl	8000c84 <MX_UART4_Init>
  HAL_UART_Init(&huart4);
 80006cc:	4815      	ldr	r0, [pc, #84]	@ (8000724 <main+0x154>)
 80006ce:	f009 fc0d 	bl	8009eec <HAL_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006d2:	f00e f88d 	bl	800e7f0 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d6:	4a14      	ldr	r2, [pc, #80]	@ (8000728 <main+0x158>)
 80006d8:	2100      	movs	r1, #0
 80006da:	4814      	ldr	r0, [pc, #80]	@ (800072c <main+0x15c>)
 80006dc:	f00e f8d2 	bl	800e884 <osThreadNew>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a13      	ldr	r2, [pc, #76]	@ (8000730 <main+0x160>)
 80006e4:	6013      	str	r3, [r2, #0]
  Task_BlinkHandle = osThreadNew(StartTask02, NULL, &Task_Blink_attributes);
 80006e6:	4a13      	ldr	r2, [pc, #76]	@ (8000734 <main+0x164>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	4813      	ldr	r0, [pc, #76]	@ (8000738 <main+0x168>)
 80006ec:	f00e f8ca 	bl	800e884 <osThreadNew>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a12      	ldr	r2, [pc, #72]	@ (800073c <main+0x16c>)
 80006f4:	6013      	str	r3, [r2, #0]
  Task_ButtonHandle = osThreadNew(StartTask03, NULL, &Task_Button_attributes);
 80006f6:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <main+0x170>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4812      	ldr	r0, [pc, #72]	@ (8000744 <main+0x174>)
 80006fc:	f00e f8c2 	bl	800e884 <osThreadNew>
 8000700:	4603      	mov	r3, r0
 8000702:	4a11      	ldr	r2, [pc, #68]	@ (8000748 <main+0x178>)
 8000704:	6013      	str	r3, [r2, #0]
  bq_testHandle = osThreadNew(bq_test_task, NULL, &bq_test_attributes);
 8000706:	4a11      	ldr	r2, [pc, #68]	@ (800074c <main+0x17c>)
 8000708:	2100      	movs	r1, #0
 800070a:	4811      	ldr	r0, [pc, #68]	@ (8000750 <main+0x180>)
 800070c:	f00e f8ba 	bl	800e884 <osThreadNew>
 8000710:	4603      	mov	r3, r0
 8000712:	4a10      	ldr	r2, [pc, #64]	@ (8000754 <main+0x184>)
 8000714:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000716:	f00e f88f 	bl	800e838 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071a:	bf00      	nop
 800071c:	e7fd      	b.n	800071a <main+0x14a>
 800071e:	bf00      	nop
 8000720:	e000ed00 	.word	0xe000ed00
 8000724:	24000834 	.word	0x24000834
 8000728:	080124c0 	.word	0x080124c0
 800072c:	08000e45 	.word	0x08000e45
 8000730:	240008c8 	.word	0x240008c8
 8000734:	080124e4 	.word	0x080124e4
 8000738:	08000e7d 	.word	0x08000e7d
 800073c:	240008cc 	.word	0x240008cc
 8000740:	08012508 	.word	0x08012508
 8000744:	08000ec5 	.word	0x08000ec5
 8000748:	240008d0 	.word	0x240008d0
 800074c:	0801252c 	.word	0x0801252c
 8000750:	08000f2d 	.word	0x08000f2d
 8000754:	240008d4 	.word	0x240008d4

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b09c      	sub	sp, #112	@ 0x70
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000762:	224c      	movs	r2, #76	@ 0x4c
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f011 fd70 	bl	801224c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2220      	movs	r2, #32
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f011 fd6a 	bl	801224c <memset>

  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000778:	2002      	movs	r0, #2
 800077a:	f005 f97b 	bl	8005a74 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	4b2c      	ldr	r3, [pc, #176]	@ (8000834 <SystemClock_Config+0xdc>)
 8000784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000786:	4a2b      	ldr	r2, [pc, #172]	@ (8000834 <SystemClock_Config+0xdc>)
 8000788:	f023 0301 	bic.w	r3, r3, #1
 800078c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800078e:	4b29      	ldr	r3, [pc, #164]	@ (8000834 <SystemClock_Config+0xdc>)
 8000790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <SystemClock_Config+0xe0>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007a0:	4a25      	ldr	r2, [pc, #148]	@ (8000838 <SystemClock_Config+0xe0>)
 80007a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b23      	ldr	r3, [pc, #140]	@ (8000838 <SystemClock_Config+0xe0>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	683b      	ldr	r3, [r7, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007b4:	bf00      	nop
 80007b6:	4b20      	ldr	r3, [pc, #128]	@ (8000838 <SystemClock_Config+0xe0>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007c2:	d1f8      	bne.n	80007b6 <SystemClock_Config+0x5e>

  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80007c4:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <SystemClock_Config+0xe4>)
 80007c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007c8:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <SystemClock_Config+0xe4>)
 80007ca:	f023 0303 	bic.w	r3, r3, #3
 80007ce:	6293      	str	r3, [r2, #40]	@ 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80007d0:	2322      	movs	r3, #34	@ 0x22
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	2340      	movs	r3, #64	@ 0x40
 80007da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e8:	4618      	mov	r0, r3
 80007ea:	f005 f98d 	bl	8005b08 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xa0>
    Error_Handler();
 80007f4:	f000 fc50 	bl	8001098 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	233f      	movs	r3, #63	@ 0x3f
 80007fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800080c:	2340      	movs	r3, #64	@ 0x40
 800080e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000814:	2340      	movs	r3, #64	@ 0x40
 8000816:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2101      	movs	r1, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f005 fdcd 	bl	80063bc <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xd4>
    Error_Handler();
 8000828:	f000 fc36 	bl	8001098 <Error_Handler>
}
 800082c:	bf00      	nop
 800082e:	3770      	adds	r7, #112	@ 0x70
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	58000400 	.word	0x58000400
 8000838:	58024800 	.word	0x58024800
 800083c:	58024400 	.word	0x58024400

08000840 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	@ 0x28
 8000844:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000852:	463b      	mov	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	619a      	str	r2, [r3, #24]

  hadc1.Instance = ADC1;
 8000864:	4b31      	ldr	r3, [pc, #196]	@ (800092c <MX_ADC1_Init+0xec>)
 8000866:	4a32      	ldr	r2, [pc, #200]	@ (8000930 <MX_ADC1_Init+0xf0>)
 8000868:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800086a:	4b30      	ldr	r3, [pc, #192]	@ (800092c <MX_ADC1_Init+0xec>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000870:	4b2e      	ldr	r3, [pc, #184]	@ (800092c <MX_ADC1_Init+0xec>)
 8000872:	2204      	movs	r2, #4
 8000874:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000876:	4b2d      	ldr	r3, [pc, #180]	@ (800092c <MX_ADC1_Init+0xec>)
 8000878:	2200      	movs	r2, #0
 800087a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800087c:	4b2b      	ldr	r3, [pc, #172]	@ (800092c <MX_ADC1_Init+0xec>)
 800087e:	2200      	movs	r2, #0
 8000880:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000882:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <MX_ADC1_Init+0xec>)
 8000884:	2201      	movs	r2, #1
 8000886:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000888:	4b28      	ldr	r3, [pc, #160]	@ (800092c <MX_ADC1_Init+0xec>)
 800088a:	2200      	movs	r2, #0
 800088c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800088e:	4b27      	ldr	r3, [pc, #156]	@ (800092c <MX_ADC1_Init+0xec>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000894:	4b25      	ldr	r3, [pc, #148]	@ (800092c <MX_ADC1_Init+0xec>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800089a:	4b24      	ldr	r3, [pc, #144]	@ (800092c <MX_ADC1_Init+0xec>)
 800089c:	2200      	movs	r2, #0
 800089e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a0:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_ADC1_Init+0xec>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008a6:	4b21      	ldr	r3, [pc, #132]	@ (800092c <MX_ADC1_Init+0xec>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_ADC1_Init+0xec>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	@ (800092c <MX_ADC1_Init+0xec>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_ADC1_Init+0xec>)
 80008bc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <MX_ADC1_Init+0xec>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c8:	4818      	ldr	r0, [pc, #96]	@ (800092c <MX_ADC1_Init+0xec>)
 80008ca:	f001 ffb9 	bl	8002840 <HAL_ADC_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_ADC1_Init+0x98>
    Error_Handler();
 80008d4:	f000 fbe0 	bl	8001098 <Error_Handler>

  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4812      	ldr	r0, [pc, #72]	@ (800092c <MX_ADC1_Init+0xec>)
 80008e4:	f002 fddc 	bl	80034a0 <HAL_ADCEx_MultiModeConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0xb2>
    Error_Handler();
 80008ee:	f000 fbd3 	bl	8001098 <Error_Handler>

  sConfig.Channel = ADC_CHANNEL_4;
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <MX_ADC1_Init+0xf4>)
 80008f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f6:	2306      	movs	r3, #6
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008fe:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000902:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000904:	2304      	movs	r3, #4
 8000906:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_ADC1_Init+0xec>)
 8000916:	f002 f935 	bl	8002b84 <HAL_ADC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0xe4>
    Error_Handler();
 8000920:	f000 fbba 	bl	8001098 <Error_Handler>
}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	@ 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	24000590 	.word	0x24000590
 8000930:	40022000 	.word	0x40022000
 8000934:	10c00010 	.word	0x10c00010

08000938 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09a      	sub	sp, #104	@ 0x68
 800093c:	af00      	add	r7, sp, #0
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800093e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2254      	movs	r2, #84	@ 0x54
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f011 fc7a 	bl	801224c <memset>

  hhrtim.Instance = HRTIM1;
 8000958:	4b3a      	ldr	r3, [pc, #232]	@ (8000a44 <MX_HRTIM_Init+0x10c>)
 800095a:	4a3b      	ldr	r2, [pc, #236]	@ (8000a48 <MX_HRTIM_Init+0x110>)
 800095c:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800095e:	4b39      	ldr	r3, [pc, #228]	@ (8000a44 <MX_HRTIM_Init+0x10c>)
 8000960:	2200      	movs	r2, #0
 8000962:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000964:	4b37      	ldr	r3, [pc, #220]	@ (8000a44 <MX_HRTIM_Init+0x10c>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 800096a:	4836      	ldr	r0, [pc, #216]	@ (8000a44 <MX_HRTIM_Init+0x10c>)
 800096c:	f003 f952 	bl	8003c14 <HAL_HRTIM_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_HRTIM_Init+0x42>
    Error_Handler();
 8000976:	f000 fb8f 	bl	8001098 <Error_Handler>

  pTimeBaseCfg.Period = 0xFFFD;
 800097a:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 800097e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000980:	2300      	movs	r3, #0
 8000982:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000984:	2305      	movs	r3, #5
 8000986:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000988:	2308      	movs	r3, #8
 800098a:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 800098c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000990:	461a      	mov	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	482b      	ldr	r0, [pc, #172]	@ (8000a44 <MX_HRTIM_Init+0x10c>)
 8000996:	f003 fa0d 	bl	8003db4 <HAL_HRTIM_TimeBaseConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_HRTIM_Init+0x6c>
    Error_Handler();
 80009a0:	f000 fb7a 	bl	8001098 <Error_Handler>

  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	607b      	str	r3, [r7, #4]
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
  pTimerCfg.DMASrcAddress = 0x0000;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  pTimerCfg.DMADstAddress = 0x0000;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMASize = 0x1;
 80009b4:	2301      	movs	r3, #1
 80009b6:	617b      	str	r3, [r7, #20]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80009d0:	2300      	movs	r3, #0
 80009d2:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80009d4:	2300      	movs	r3, #0
 80009d6:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80009d8:	2300      	movs	r3, #0
 80009da:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80009dc:	2300      	movs	r3, #0
 80009de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80009e4:	2300      	movs	r3, #0
 80009e6:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80009e8:	2300      	movs	r3, #0
 80009ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80009f4:	2300      	movs	r3, #0
 80009f6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	461a      	mov	r2, r3
 80009fc:	2100      	movs	r1, #0
 80009fe:	4811      	ldr	r0, [pc, #68]	@ (8000a44 <MX_HRTIM_Init+0x10c>)
 8000a00:	f003 fa00 	bl	8003e04 <HAL_HRTIM_WaveformTimerConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_HRTIM_Init+0xd6>
    Error_Handler();
 8000a0a:	f000 fb45 	bl	8001098 <Error_Handler>
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	461a      	mov	r2, r3
 8000a12:	2101      	movs	r1, #1
 8000a14:	480b      	ldr	r0, [pc, #44]	@ (8000a44 <MX_HRTIM_Init+0x10c>)
 8000a16:	f003 f9f5 	bl	8003e04 <HAL_HRTIM_WaveformTimerConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_HRTIM_Init+0xec>
    Error_Handler();
 8000a20:	f000 fb3a 	bl	8001098 <Error_Handler>
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000a24:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <MX_HRTIM_Init+0x10c>)
 8000a2e:	f003 f9c1 	bl	8003db4 <HAL_HRTIM_TimeBaseConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_HRTIM_Init+0x104>
    Error_Handler();
 8000a38:	f000 fb2e 	bl	8001098 <Error_Handler>
}
 8000a3c:	bf00      	nop
 8000a3e:	3768      	adds	r7, #104	@ 0x68
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	240005f4 	.word	0x240005f4
 8000a48:	40017400 	.word	0x40017400

08000a4c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  hlptim1.Instance = LPTIM1;
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <MX_LPTIM1_Init+0x50>)
 8000a52:	4a13      	ldr	r2, [pc, #76]	@ (8000aa0 <MX_LPTIM1_Init+0x54>)
 8000a54:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_LPTIM1_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_LPTIM1_Init+0x50>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_LPTIM1_Init+0x50>)
 8000a64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a68:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <MX_LPTIM1_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <MX_LPTIM1_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_LPTIM1_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	@ (8000a9c <MX_LPTIM1_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_LPTIM1_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <MX_LPTIM1_Init+0x50>)
 8000a8a:	f003 fca5 	bl	80043d8 <HAL_LPTIM_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_LPTIM1_Init+0x4c>
    Error_Handler();
 8000a94:	f000 fb00 	bl	8001098 <Error_Handler>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	240006d0 	.word	0x240006d0
 8000aa0:	40002400 	.word	0x40002400

08000aa4 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  hlptim2.Instance = LPTIM2;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <MX_LPTIM2_Init+0x50>)
 8000aaa:	4a13      	ldr	r2, [pc, #76]	@ (8000af8 <MX_LPTIM2_Init+0x54>)
 8000aac:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <MX_LPTIM2_Init+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <MX_LPTIM2_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <MX_LPTIM2_Init+0x50>)
 8000abc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ac0:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <MX_LPTIM2_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <MX_LPTIM2_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <MX_LPTIM2_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	@ (8000af4 <MX_LPTIM2_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <MX_LPTIM2_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	@ (8000af4 <MX_LPTIM2_Init+0x50>)
 8000ae2:	f003 fc79 	bl	80043d8 <HAL_LPTIM_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_LPTIM2_Init+0x4c>
    Error_Handler();
 8000aec:	f000 fad4 	bl	8001098 <Error_Handler>
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	24000708 	.word	0x24000708
 8000af8:	58002400 	.word	0x58002400

08000afc <MX_LPTIM3_Init>:
  * @brief LPTIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM3_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  hlptim3.Instance = LPTIM3;
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_LPTIM3_Init+0x4c>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	@ (8000b4c <MX_LPTIM3_Init+0x50>)
 8000b04:	601a      	str	r2, [r3, #0]
  hlptim3.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <MX_LPTIM3_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
  hlptim3.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_LPTIM3_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  hlptim3.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <MX_LPTIM3_Init+0x4c>)
 8000b14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b18:	615a      	str	r2, [r3, #20]
  hlptim3.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <MX_LPTIM3_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  hlptim3.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_LPTIM3_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim3.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <MX_LPTIM3_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim3.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_LPTIM3_Init+0x4c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_LPTIM_Init(&hlptim3) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_LPTIM3_Init+0x4c>)
 8000b34:	f003 fc50 	bl	80043d8 <HAL_LPTIM_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_LPTIM3_Init+0x46>
    Error_Handler();
 8000b3e:	f000 faab 	bl	8001098 <Error_Handler>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	24000740 	.word	0x24000740
 8000b4c:	58002800 	.word	0x58002800

08000b50 <MX_LPTIM4_Init>:
  * @brief LPTIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM4_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  hlptim4.Instance = LPTIM4;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <MX_LPTIM4_Init+0x44>)
 8000b56:	4a10      	ldr	r2, [pc, #64]	@ (8000b98 <MX_LPTIM4_Init+0x48>)
 8000b58:	601a      	str	r2, [r3, #0]
  hlptim4.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <MX_LPTIM4_Init+0x44>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
  hlptim4.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <MX_LPTIM4_Init+0x44>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hlptim4.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <MX_LPTIM4_Init+0x44>)
 8000b68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b6c:	615a      	str	r2, [r3, #20]
  hlptim4.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <MX_LPTIM4_Init+0x44>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  hlptim4.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000b74:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <MX_LPTIM4_Init+0x44>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim4.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <MX_LPTIM4_Init+0x44>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_LPTIM_Init(&hlptim4) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <MX_LPTIM4_Init+0x44>)
 8000b82:	f003 fc29 	bl	80043d8 <HAL_LPTIM_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_LPTIM4_Init+0x40>
    Error_Handler();
 8000b8c:	f000 fa84 	bl	8001098 <Error_Handler>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	24000778 	.word	0x24000778
 8000b98:	58002c00 	.word	0x58002c00

08000b9c <MX_LPTIM5_Init>:
  * @brief LPTIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM5_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  hlptim5.Instance = LPTIM5;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <MX_LPTIM5_Init+0x44>)
 8000ba2:	4a10      	ldr	r2, [pc, #64]	@ (8000be4 <MX_LPTIM5_Init+0x48>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hlptim5.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <MX_LPTIM5_Init+0x44>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  hlptim5.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <MX_LPTIM5_Init+0x44>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hlptim5.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <MX_LPTIM5_Init+0x44>)
 8000bb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bb8:	615a      	str	r2, [r3, #20]
  hlptim5.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <MX_LPTIM5_Init+0x44>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  hlptim5.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <MX_LPTIM5_Init+0x44>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim5.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <MX_LPTIM5_Init+0x44>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_LPTIM_Init(&hlptim5) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <MX_LPTIM5_Init+0x44>)
 8000bce:	f003 fc03 	bl	80043d8 <HAL_LPTIM_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_LPTIM5_Init+0x40>
    Error_Handler();
 8000bd8:	f000 fa5e 	bl	8001098 <Error_Handler>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	240007b0 	.word	0x240007b0
 8000be4:	58003000 	.word	0x58003000

08000be8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000c06:	4b1e      	ldr	r3, [pc, #120]	@ (8000c80 <MX_TIM2_Init+0x98>)
 8000c08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c80 <MX_TIM2_Init+0x98>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <MX_TIM2_Init+0x98>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <MX_TIM2_Init+0x98>)
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c22:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <MX_TIM2_Init+0x98>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c28:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <MX_TIM2_Init+0x98>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c2e:	4814      	ldr	r0, [pc, #80]	@ (8000c80 <MX_TIM2_Init+0x98>)
 8000c30:	f008 fc74 	bl	800951c <HAL_TIM_Base_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM2_Init+0x56>
    Error_Handler();
 8000c3a:	f000 fa2d 	bl	8001098 <Error_Handler>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480d      	ldr	r0, [pc, #52]	@ (8000c80 <MX_TIM2_Init+0x98>)
 8000c4c:	f008 fe3e 	bl	80098cc <HAL_TIM_ConfigClockSource>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM2_Init+0x72>
    Error_Handler();
 8000c56:	f000 fa1f 	bl	8001098 <Error_Handler>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <MX_TIM2_Init+0x98>)
 8000c68:	f009 f894 	bl	8009d94 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM2_Init+0x8e>
    Error_Handler();
 8000c72:	f000 fa11 	bl	8001098 <Error_Handler>
}
 8000c76:	bf00      	nop
 8000c78:	3720      	adds	r7, #32
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	240007e8 	.word	0x240007e8

08000c84 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	    huart4.Instance = UART4;
 8000c88:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <MX_UART4_Init+0x48>)
 8000c8a:	4a11      	ldr	r2, [pc, #68]	@ (8000cd0 <MX_UART4_Init+0x4c>)
 8000c8c:	601a      	str	r2, [r3, #0]
	    huart4.Init.BaudRate = BQ79614_DEFAULT_BAUDRATE;
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <MX_UART4_Init+0x48>)
 8000c90:	4a10      	ldr	r2, [pc, #64]	@ (8000cd4 <MX_UART4_Init+0x50>)
 8000c92:	605a      	str	r2, [r3, #4]
	    huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c94:	4b0d      	ldr	r3, [pc, #52]	@ (8000ccc <MX_UART4_Init+0x48>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
	    huart4.Init.StopBits = UART_STOPBITS_1;
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_UART4_Init+0x48>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
	    huart4.Init.Parity = UART_PARITY_NONE;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <MX_UART4_Init+0x48>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
	    huart4.Init.Mode = UART_MODE_TX_RX;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <MX_UART4_Init+0x48>)
 8000ca8:	220c      	movs	r2, #12
 8000caa:	615a      	str	r2, [r3, #20]
	    huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <MX_UART4_Init+0x48>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
	    huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <MX_UART4_Init+0x48>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	61da      	str	r2, [r3, #28]
	    if (HAL_UART_Init(&huart4) != HAL_OK) {
 8000cb8:	4804      	ldr	r0, [pc, #16]	@ (8000ccc <MX_UART4_Init+0x48>)
 8000cba:	f009 f917 	bl	8009eec <HAL_UART_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_UART4_Init+0x44>
	        Error_Handler();
 8000cc4:	f000 f9e8 	bl	8001098 <Error_Handler>
	    }
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	24000834 	.word	0x24000834
 8000cd0:	40004c00 	.word	0x40004c00
 8000cd4:	000f4240 	.word	0x000f4240

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	@ 0x28
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cee:	4b50      	ldr	r3, [pc, #320]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf4:	4a4e      	ldr	r2, [pc, #312]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000cf6:	f043 0310 	orr.w	r3, r3, #16
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d04:	f003 0310 	and.w	r3, r3, #16
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	4b48      	ldr	r3, [pc, #288]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d12:	4a47      	ldr	r2, [pc, #284]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1c:	4b44      	ldr	r3, [pc, #272]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	4b41      	ldr	r3, [pc, #260]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d30:	4a3f      	ldr	r2, [pc, #252]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d48:	4b39      	ldr	r3, [pc, #228]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	4a38      	ldr	r2, [pc, #224]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d58:	4b35      	ldr	r3, [pc, #212]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	213c      	movs	r1, #60	@ 0x3c
 8000d6a:	4832      	ldr	r0, [pc, #200]	@ (8000e34 <MX_GPIO_Init+0x15c>)
 8000d6c:	f002 ff1e 	bl	8003bac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2160      	movs	r1, #96	@ 0x60
 8000d74:	4830      	ldr	r0, [pc, #192]	@ (8000e38 <MX_GPIO_Init+0x160>)
 8000d76:	f002 ff19 	bl	8003bac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8000d80:	482e      	ldr	r0, [pc, #184]	@ (8000e3c <MX_GPIO_Init+0x164>)
 8000d82:	f002 ff13 	bl	8003bac <HAL_GPIO_WritePin>

  /* Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d86:	233c      	movs	r3, #60	@ 0x3c
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4825      	ldr	r0, [pc, #148]	@ (8000e34 <MX_GPIO_Init+0x15c>)
 8000d9e:	f002 fd3d 	bl	800381c <HAL_GPIO_Init>

  /* Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000da2:	2304      	movs	r3, #4
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4820      	ldr	r0, [pc, #128]	@ (8000e38 <MX_GPIO_Init+0x160>)
 8000db6:	f002 fd31 	bl	800381c <HAL_GPIO_Init>

  /* Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000dba:	2360      	movs	r3, #96	@ 0x60
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4819      	ldr	r0, [pc, #100]	@ (8000e38 <MX_GPIO_Init+0x160>)
 8000dd2:	f002 fd23 	bl	800381c <HAL_GPIO_Init>

  /* Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000dd6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4812      	ldr	r0, [pc, #72]	@ (8000e34 <MX_GPIO_Init+0x15c>)
 8000dec:	f002 fd16 	bl	800381c <HAL_GPIO_Init>

  /* Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000df0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	480e      	ldr	r0, [pc, #56]	@ (8000e40 <MX_GPIO_Init+0x168>)
 8000e06:	f002 fd09 	bl	800381c <HAL_GPIO_Init>

  /* Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000e0a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	@ (8000e3c <MX_GPIO_Init+0x164>)
 8000e24:	f002 fcfa 	bl	800381c <HAL_GPIO_Init>
}
 8000e28:	bf00      	nop
 8000e2a:	3728      	adds	r7, #40	@ 0x28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	58024400 	.word	0x58024400
 8000e34:	58021000 	.word	0x58021000
 8000e38:	58020000 	.word	0x58020000
 8000e3c:	58020800 	.word	0x58020800
 8000e40:	58020400 	.word	0x58020400

08000e44 <StartDefaultTask>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartDefaultTask(void *argument)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  MX_USB_DEVICE_Init();
 8000e4c:	f010 fce4 	bl	8011818 <MX_USB_DEVICE_Init>
  for(;;)
  {
    if (!block_led)
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <StartDefaultTask+0x30>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d107      	bne.n	8000e68 <StartDefaultTask+0x24>
    {
      HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8000e58:	2110      	movs	r1, #16
 8000e5a:	4807      	ldr	r0, [pc, #28]	@ (8000e78 <StartDefaultTask+0x34>)
 8000e5c:	f002 febf 	bl	8003bde <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8000e60:	2120      	movs	r1, #32
 8000e62:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <StartDefaultTask+0x34>)
 8000e64:	f002 febb 	bl	8003bde <HAL_GPIO_TogglePin>
    }
    osDelay(500);
 8000e68:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e6c:	f00d fd9c 	bl	800e9a8 <osDelay>
    if (!block_led)
 8000e70:	e7ee      	b.n	8000e50 <StartDefaultTask+0xc>
 8000e72:	bf00      	nop
 8000e74:	240008d8 	.word	0x240008d8
 8000e78:	58021000 	.word	0x58021000

08000e7c <StartTask02>:
* @brief Function implementing the Task_Blink thread.
* @param argument: Not used
* @retval None
*/
void StartTask02(void *argument)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  int error = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8000e84:	2104      	movs	r1, #4
 8000e86:	480d      	ldr	r0, [pc, #52]	@ (8000ebc <StartTask02+0x40>)
 8000e88:	f002 fe78 	bl	8003b7c <HAL_GPIO_ReadPin>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	60fb      	str	r3, [r7, #12]
    if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8000e90:	2104      	movs	r1, #4
 8000e92:	480a      	ldr	r0, [pc, #40]	@ (8000ebc <StartTask02+0x40>)
 8000e94:	f002 fe72 	bl	8003b7c <HAL_GPIO_ReadPin>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d105      	bne.n	8000eaa <StartTask02+0x2e>
    {

     // HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
     // HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	4807      	ldr	r0, [pc, #28]	@ (8000ec0 <StartTask02+0x44>)
 8000ea4:	f002 fe82 	bl	8003bac <HAL_GPIO_WritePin>
 8000ea8:	e004      	b.n	8000eb4 <StartTask02+0x38>
    }
    else
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2104      	movs	r1, #4
 8000eae:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <StartTask02+0x44>)
 8000eb0:	f002 fe7c 	bl	8003bac <HAL_GPIO_WritePin>
    osDelay(100);
 8000eb4:	2064      	movs	r0, #100	@ 0x64
 8000eb6:	f00d fd77 	bl	800e9a8 <osDelay>
  {
 8000eba:	e7e3      	b.n	8000e84 <StartTask02+0x8>
 8000ebc:	58020000 	.word	0x58020000
 8000ec0:	58021000 	.word	0x58021000

08000ec4 <StartTask03>:
* @brief Function implementing the Task_Button thread.
* @param argument: Not used
* @retval None
*/
void StartTask03(void *argument)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))
 8000ecc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ed0:	4813      	ldr	r0, [pc, #76]	@ (8000f20 <StartTask03+0x5c>)
 8000ed2:	f002 fe53 	bl	8003b7c <HAL_GPIO_ReadPin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d11d      	bne.n	8000f18 <StartTask03+0x54>
    {
      block_led = 1;
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <StartTask03+0x60>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2108      	movs	r1, #8
 8000ee6:	4810      	ldr	r0, [pc, #64]	@ (8000f28 <StartTask03+0x64>)
 8000ee8:	f002 fe60 	bl	8003bac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, 1);
 8000eec:	2201      	movs	r2, #1
 8000eee:	2104      	movs	r1, #4
 8000ef0:	480d      	ldr	r0, [pc, #52]	@ (8000f28 <StartTask03+0x64>)
 8000ef2:	f002 fe5b 	bl	8003bac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 1);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2110      	movs	r1, #16
 8000efa:	480b      	ldr	r0, [pc, #44]	@ (8000f28 <StartTask03+0x64>)
 8000efc:	f002 fe56 	bl	8003bac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 1);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2120      	movs	r1, #32
 8000f04:	4808      	ldr	r0, [pc, #32]	@ (8000f28 <StartTask03+0x64>)
 8000f06:	f002 fe51 	bl	8003bac <HAL_GPIO_WritePin>
      osDelay(500);
 8000f0a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f0e:	f00d fd4b 	bl	800e9a8 <osDelay>
      block_led = 0;
 8000f12:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <StartTask03+0x60>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
    }
    osDelay(1);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f00d fd45 	bl	800e9a8 <osDelay>
    if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))
 8000f1e:	e7d5      	b.n	8000ecc <StartTask03+0x8>
 8000f20:	58020400 	.word	0x58020400
 8000f24:	240008d8 	.word	0x240008d8
 8000f28:	58021000 	.word	0x58021000

08000f2c <bq_test_task>:
* @brief Function implementing the bq_test thread.
* @param  argument: Not used
* @retval None
*/
void bq_test_task(void *pvParameters)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	 if (BQ79614_Init(&bq79614, &huart4) != HAL_OK) {
 8000f34:	494b      	ldr	r1, [pc, #300]	@ (8001064 <bq_test_task+0x138>)
 8000f36:	484c      	ldr	r0, [pc, #304]	@ (8001068 <bq_test_task+0x13c>)
 8000f38:	f000 fc8d 	bl	8001856 <BQ79614_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <bq_test_task+0x1a>
	        while (1);
 8000f42:	bf00      	nop
 8000f44:	e7fd      	b.n	8000f42 <bq_test_task+0x16>
	    }
	    if (BQ79614_InitUART(&bq79614) != HAL_OK) {
 8000f46:	4848      	ldr	r0, [pc, #288]	@ (8001068 <bq_test_task+0x13c>)
 8000f48:	f000 fccc 	bl	80018e4 <BQ79614_InitUART>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <bq_test_task+0x2a>
	        while (1);
 8000f52:	bf00      	nop
 8000f54:	e7fd      	b.n	8000f52 <bq_test_task+0x26>
	    }
	    if (BQ79614_InitStack(&bq79614) != HAL_OK) {
 8000f56:	4844      	ldr	r0, [pc, #272]	@ (8001068 <bq_test_task+0x13c>)
 8000f58:	f000 fcf0 	bl	800193c <BQ79614_InitStack>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <bq_test_task+0x3a>
	        while (1);
 8000f62:	bf00      	nop
 8000f64:	e7fd      	b.n	8000f62 <bq_test_task+0x36>
	    }
	    if (BQ79614_InitVoltageMeasurement(&bq79614) != HAL_OK) {
 8000f66:	4840      	ldr	r0, [pc, #256]	@ (8001068 <bq_test_task+0x13c>)
 8000f68:	f000 fd0f 	bl	800198a <BQ79614_InitVoltageMeasurement>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <bq_test_task+0x4a>
	        while (1);
 8000f72:	bf00      	nop
 8000f74:	e7fd      	b.n	8000f72 <bq_test_task+0x46>
	    }
	    if (BQ79614_InitOVUV(&bq79614, 3050, 4300) != HAL_OK) {
 8000f76:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 8000f7a:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8000f7e:	483a      	ldr	r0, [pc, #232]	@ (8001068 <bq_test_task+0x13c>)
 8000f80:	f000 fd28 	bl	80019d4 <BQ79614_InitOVUV>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <bq_test_task+0x62>
	        while (1);
 8000f8a:	bf00      	nop
 8000f8c:	e7fd      	b.n	8000f8a <bq_test_task+0x5e>
	    }
	    if (BQ79614_InitTemperatureMeasurements(&bq79614) != HAL_OK) {
 8000f8e:	4836      	ldr	r0, [pc, #216]	@ (8001068 <bq_test_task+0x13c>)
 8000f90:	f000 fd98 	bl	8001ac4 <BQ79614_InitTemperatureMeasurements>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <bq_test_task+0x72>
	        while (1);
 8000f9a:	bf00      	nop
 8000f9c:	e7fd      	b.n	8000f9a <bq_test_task+0x6e>
	    }
	    if (BQ79614_InitOTUT(&bq79614, 70, 30) != HAL_OK) {
 8000f9e:	221e      	movs	r2, #30
 8000fa0:	2146      	movs	r1, #70	@ 0x46
 8000fa2:	4831      	ldr	r0, [pc, #196]	@ (8001068 <bq_test_task+0x13c>)
 8000fa4:	f000 fe18 	bl	8001bd8 <BQ79614_InitOTUT>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <bq_test_task+0x86>
	        while (1);
 8000fae:	bf00      	nop
 8000fb0:	e7fd      	b.n	8000fae <bq_test_task+0x82>
	    }
	    if (BQ79614_StartMeasurements(&bq79614) != HAL_OK) {
 8000fb2:	482d      	ldr	r0, [pc, #180]	@ (8001068 <bq_test_task+0x13c>)
 8000fb4:	f000 fe79 	bl	8001caa <BQ79614_StartMeasurements>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <bq_test_task+0x96>
	        while (1);
 8000fbe:	bf00      	nop
 8000fc0:	e7fd      	b.n	8000fbe <bq_test_task+0x92>
	    }

	    while (1) {
	        BQ79614_UpdateData(&bq79614);
 8000fc2:	4829      	ldr	r0, [pc, #164]	@ (8001068 <bq_test_task+0x13c>)
 8000fc4:	f000 ff04 	bl	8001dd0 <BQ79614_UpdateData>
	        BQ79614_UpdateStatus(&bq79614);
 8000fc8:	4827      	ldr	r0, [pc, #156]	@ (8001068 <bq_test_task+0x13c>)
 8000fca:	f000 fe92 	bl	8001cf2 <BQ79614_UpdateStatus>

	        for (size_t ic = 0; ic < BQ79614_STACK_SIZE; ic++) {
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	e03f      	b.n	8001054 <bq_test_task+0x128>
	            for (size_t cell = 0; cell < BQ79614_CELL_COUNT; cell++) {
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	e019      	b.n	800100e <bq_test_task+0xe2>
	                cell_voltages[ic][cell] = bq79614.stack_device_data[ic].voltages[cell];
 8000fda:	4923      	ldr	r1, [pc, #140]	@ (8001068 <bq_test_task+0x13c>)
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	2216      	movs	r2, #22
 8000fe0:	fb03 f202 	mul.w	r2, r3, r2
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	33ae      	adds	r3, #174	@ 0xae
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	3304      	adds	r3, #4
 8000ff0:	6819      	ldr	r1, [r3, #0]
 8000ff2:	481e      	ldr	r0, [pc, #120]	@ (800106c <bq_test_task+0x140>)
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	1a9b      	subs	r3, r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4403      	add	r3, r0
 8001006:	6019      	str	r1, [r3, #0]
	            for (size_t cell = 0; cell < BQ79614_CELL_COUNT; cell++) {
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	3301      	adds	r3, #1
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	2b0d      	cmp	r3, #13
 8001012:	d9e2      	bls.n	8000fda <bq_test_task+0xae>
	            }
	            for (size_t temp = 0; temp < BQ79614_TEMP_COUNT; temp++) {
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e016      	b.n	8001048 <bq_test_task+0x11c>
	                temperatures[ic][temp] = bq79614.stack_device_data[ic].temperatures[temp];
 800101a:	4913      	ldr	r1, [pc, #76]	@ (8001068 <bq_test_task+0x13c>)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	2216      	movs	r2, #22
 8001020:	fb03 f202 	mul.w	r2, r3, r2
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	33bc      	adds	r3, #188	@ 0xbc
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	3304      	adds	r3, #4
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	480f      	ldr	r0, [pc, #60]	@ (8001070 <bq_test_task+0x144>)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	00d9      	lsls	r1, r3, #3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	440b      	add	r3, r1
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4403      	add	r3, r0
 8001040:	601a      	str	r2, [r3, #0]
	            for (size_t temp = 0; temp < BQ79614_TEMP_COUNT; temp++) {
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b07      	cmp	r3, #7
 800104c:	d9e5      	bls.n	800101a <bq_test_task+0xee>
	        for (size_t ic = 0; ic < BQ79614_STACK_SIZE; ic++) {
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d9bc      	bls.n	8000fd4 <bq_test_task+0xa8>
	            }
	        }

	        vTaskDelay(pdMS_TO_TICKS(100));
 800105a:	2064      	movs	r0, #100	@ 0x64
 800105c:	f00e fdc4 	bl	800fbe8 <vTaskDelay>
	        BQ79614_UpdateData(&bq79614);
 8001060:	e7af      	b.n	8000fc2 <bq_test_task+0x96>
 8001062:	bf00      	nop
 8001064:	24000834 	.word	0x24000834
 8001068:	24000224 	.word	0x24000224
 800106c:	24000174 	.word	0x24000174
 8001070:	240001e4 	.word	0x240001e4

08001074 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001086:	f001 f9ff 	bl	8002488 <HAL_IncTick>
  }
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40010000 	.word	0x40010000

08001098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  //__disable_irq();
  //while (1)
  {
  }
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <HAL_MspInit+0x38>)
 80010b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010b4:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <HAL_MspInit+0x38>)
 80010b6:	f043 0302 	orr.w	r3, r3, #2
 80010ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010be:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <HAL_MspInit+0x38>)
 80010c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	210f      	movs	r1, #15
 80010d0:	f06f 0001 	mvn.w	r0, #1
 80010d4:	f002 fb7a 	bl	80037cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	58024400 	.word	0x58024400

080010e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0bc      	sub	sp, #240	@ 0xf0
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	22c0      	movs	r2, #192	@ 0xc0
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f011 f8a1 	bl	801224c <memset>
  if(hadc->Instance==ADC1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a3a      	ldr	r2, [pc, #232]	@ (80011f8 <HAL_ADC_MspInit+0x114>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d16d      	bne.n	80011f0 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001114:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001120:	2304      	movs	r3, #4
 8001122:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001124:	230a      	movs	r3, #10
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001128:	2302      	movs	r3, #2
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800112c:	2302      	movs	r3, #2
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001130:	2302      	movs	r3, #2
 8001132:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001134:	23c0      	movs	r3, #192	@ 0xc0
 8001136:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001138:	2320      	movs	r3, #32
 800113a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	4618      	mov	r0, r3
 800114c:	f005 fd04 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8001156:	f7ff ff9f 	bl	8001098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800115a:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <HAL_ADC_MspInit+0x118>)
 800115c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001160:	4a26      	ldr	r2, [pc, #152]	@ (80011fc <HAL_ADC_MspInit+0x118>)
 8001162:	f043 0320 	orr.w	r3, r3, #32
 8001166:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800116a:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <HAL_ADC_MspInit+0x118>)
 800116c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001170:	f003 0320 	and.w	r3, r3, #32
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001178:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <HAL_ADC_MspInit+0x118>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117e:	4a1f      	ldr	r2, [pc, #124]	@ (80011fc <HAL_ADC_MspInit+0x118>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001188:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <HAL_ADC_MspInit+0x118>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <HAL_ADC_MspInit+0x118>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119c:	4a17      	ldr	r2, [pc, #92]	@ (80011fc <HAL_ADC_MspInit+0x118>)
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_ADC_MspInit+0x118>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011b4:	2310      	movs	r3, #16
 80011b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ba:	2303      	movs	r3, #3
 80011bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <HAL_ADC_MspInit+0x11c>)
 80011ce:	f002 fb25 	bl	800381c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011d2:	2302      	movs	r3, #2
 80011d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d8:	2303      	movs	r3, #3
 80011da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	@ (8001204 <HAL_ADC_MspInit+0x120>)
 80011ec:	f002 fb16 	bl	800381c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80011f0:	bf00      	nop
 80011f2:	37f0      	adds	r7, #240	@ 0xf0
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40022000 	.word	0x40022000
 80011fc:	58024400 	.word	0x58024400
 8001200:	58020800 	.word	0x58020800
 8001204:	58020400 	.word	0x58020400

08001208 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0b4      	sub	sp, #208	@ 0xd0
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	22c0      	movs	r2, #192	@ 0xc0
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f011 f817 	bl	801224c <memset>
  if(hhrtim->Instance==HRTIM1)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a14      	ldr	r2, [pc, #80]	@ (8001274 <HAL_HRTIM_MspInit+0x6c>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d121      	bne.n	800126c <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8001228:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	4618      	mov	r0, r3
 8001240:	f005 fc8a 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 800124a:	f7ff ff25 	bl	8001098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <HAL_HRTIM_MspInit+0x70>)
 8001250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001254:	4a08      	ldr	r2, [pc, #32]	@ (8001278 <HAL_HRTIM_MspInit+0x70>)
 8001256:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800125a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_HRTIM_MspInit+0x70>)
 8001260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001264:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 800126c:	bf00      	nop
 800126e:	37d0      	adds	r7, #208	@ 0xd0
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40017400 	.word	0x40017400
 8001278:	58024400 	.word	0x58024400

0800127c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0b8      	sub	sp, #224	@ 0xe0
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001284:	f107 0320 	add.w	r3, r7, #32
 8001288:	22c0      	movs	r2, #192	@ 0xc0
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f010 ffdd 	bl	801224c <memset>
  if(hlptim->Instance==LPTIM1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a64      	ldr	r2, [pc, #400]	@ (8001428 <HAL_LPTIM_MspInit+0x1ac>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d122      	bne.n	80012e2 <HAL_LPTIM_MspInit+0x66>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800129c:	f04f 0220 	mov.w	r2, #32
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	4618      	mov	r0, r3
 80012b4:	f005 fc50 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_LPTIM_MspInit+0x46>
    {
      Error_Handler();
 80012be:	f7ff feeb 	bl	8001098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80012c2:	4b5a      	ldr	r3, [pc, #360]	@ (800142c <HAL_LPTIM_MspInit+0x1b0>)
 80012c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012c8:	4a58      	ldr	r2, [pc, #352]	@ (800142c <HAL_LPTIM_MspInit+0x1b0>)
 80012ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012d2:	4b56      	ldr	r3, [pc, #344]	@ (800142c <HAL_LPTIM_MspInit+0x1b0>)
 80012d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN LPTIM5_MspInit 1 */

  /* USER CODE END LPTIM5_MspInit 1 */
  }

}
 80012e0:	e09e      	b.n	8001420 <HAL_LPTIM_MspInit+0x1a4>
  else if(hlptim->Instance==LPTIM2)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a52      	ldr	r2, [pc, #328]	@ (8001430 <HAL_LPTIM_MspInit+0x1b4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d122      	bne.n	8001332 <HAL_LPTIM_MspInit+0xb6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80012ec:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	4618      	mov	r0, r3
 8001304:	f005 fc28 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_LPTIM_MspInit+0x96>
      Error_Handler();
 800130e:	f7ff fec3 	bl	8001098 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8001312:	4b46      	ldr	r3, [pc, #280]	@ (800142c <HAL_LPTIM_MspInit+0x1b0>)
 8001314:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001318:	4a44      	ldr	r2, [pc, #272]	@ (800142c <HAL_LPTIM_MspInit+0x1b0>)
 800131a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800131e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001322:	4b42      	ldr	r3, [pc, #264]	@ (800142c <HAL_LPTIM_MspInit+0x1b0>)
 8001324:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001328:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	69bb      	ldr	r3, [r7, #24]
}
 8001330:	e076      	b.n	8001420 <HAL_LPTIM_MspInit+0x1a4>
  else if(hlptim->Instance==LPTIM3)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a3f      	ldr	r2, [pc, #252]	@ (8001434 <HAL_LPTIM_MspInit+0x1b8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d122      	bne.n	8001382 <HAL_LPTIM_MspInit+0x106>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM3;
 800133c:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	4618      	mov	r0, r3
 8001354:	f005 fc00 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_LPTIM_MspInit+0xe6>
      Error_Handler();
 800135e:	f7ff fe9b 	bl	8001098 <Error_Handler>
    __HAL_RCC_LPTIM3_CLK_ENABLE();
 8001362:	4b32      	ldr	r3, [pc, #200]	@ (800142c <HAL_LPTIM_MspInit+0x1b0>)
 8001364:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001368:	4a30      	ldr	r2, [pc, #192]	@ (800142c <HAL_LPTIM_MspInit+0x1b0>)
 800136a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800136e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001372:	4b2e      	ldr	r3, [pc, #184]	@ (800142c <HAL_LPTIM_MspInit+0x1b0>)
 8001374:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	697b      	ldr	r3, [r7, #20]
}
 8001380:	e04e      	b.n	8001420 <HAL_LPTIM_MspInit+0x1a4>
  else if(hlptim->Instance==LPTIM4)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a2c      	ldr	r2, [pc, #176]	@ (8001438 <HAL_LPTIM_MspInit+0x1bc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d122      	bne.n	80013d2 <HAL_LPTIM_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM4;
 800138c:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	4618      	mov	r0, r3
 80013a4:	f005 fbd8 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_LPTIM_MspInit+0x136>
      Error_Handler();
 80013ae:	f7ff fe73 	bl	8001098 <Error_Handler>
    __HAL_RCC_LPTIM4_CLK_ENABLE();
 80013b2:	4b1e      	ldr	r3, [pc, #120]	@ (800142c <HAL_LPTIM_MspInit+0x1b0>)
 80013b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013b8:	4a1c      	ldr	r2, [pc, #112]	@ (800142c <HAL_LPTIM_MspInit+0x1b0>)
 80013ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013c2:	4b1a      	ldr	r3, [pc, #104]	@ (800142c <HAL_LPTIM_MspInit+0x1b0>)
 80013c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
}
 80013d0:	e026      	b.n	8001420 <HAL_LPTIM_MspInit+0x1a4>
  else if(hlptim->Instance==LPTIM5)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a19      	ldr	r2, [pc, #100]	@ (800143c <HAL_LPTIM_MspInit+0x1c0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d121      	bne.n	8001420 <HAL_LPTIM_MspInit+0x1a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM5;
 80013dc:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	4618      	mov	r0, r3
 80013f4:	f005 fbb0 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_LPTIM_MspInit+0x186>
      Error_Handler();
 80013fe:	f7ff fe4b 	bl	8001098 <Error_Handler>
    __HAL_RCC_LPTIM5_CLK_ENABLE();
 8001402:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <HAL_LPTIM_MspInit+0x1b0>)
 8001404:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001408:	4a08      	ldr	r2, [pc, #32]	@ (800142c <HAL_LPTIM_MspInit+0x1b0>)
 800140a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800140e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_LPTIM_MspInit+0x1b0>)
 8001414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001418:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	bf00      	nop
 8001422:	37e0      	adds	r7, #224	@ 0xe0
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40002400 	.word	0x40002400
 800142c:	58024400 	.word	0x58024400
 8001430:	58002400 	.word	0x58002400
 8001434:	58002800 	.word	0x58002800
 8001438:	58002c00 	.word	0x58002c00
 800143c:	58003000 	.word	0x58003000

08001440 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001450:	d10e      	bne.n	8001470 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001452:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <HAL_TIM_Base_MspInit+0x3c>)
 8001454:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001458:	4a08      	ldr	r2, [pc, #32]	@ (800147c <HAL_TIM_Base_MspInit+0x3c>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_TIM_Base_MspInit+0x3c>)
 8001464:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	58024400 	.word	0x58024400

08001480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b0ba      	sub	sp, #232	@ 0xe8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	22c0      	movs	r2, #192	@ 0xc0
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f010 fed3 	bl	801224c <memset>
  if(huart->Instance==UART4)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a26      	ldr	r2, [pc, #152]	@ (8001544 <HAL_UART_MspInit+0xc4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d145      	bne.n	800153c <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80014b0:	f04f 0202 	mov.w	r2, #2
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	4618      	mov	r0, r3
 80014c8:	f005 fb46 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80014d2:	f7ff fde1 	bl	8001098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <HAL_UART_MspInit+0xc8>)
 80014d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001548 <HAL_UART_MspInit+0xc8>)
 80014de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014e6:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <HAL_UART_MspInit+0xc8>)
 80014e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_UART_MspInit+0xc8>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fa:	4a13      	ldr	r2, [pc, #76]	@ (8001548 <HAL_UART_MspInit+0xc8>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001504:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <HAL_UART_MspInit+0xc8>)
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001512:	2303      	movs	r3, #3
 8001514:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800152a:	2308      	movs	r3, #8
 800152c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001534:	4619      	mov	r1, r3
 8001536:	4805      	ldr	r0, [pc, #20]	@ (800154c <HAL_UART_MspInit+0xcc>)
 8001538:	f002 f970 	bl	800381c <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 800153c:	bf00      	nop
 800153e:	37e8      	adds	r7, #232	@ 0xe8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40004c00 	.word	0x40004c00
 8001548:	58024400 	.word	0x58024400
 800154c:	58020000 	.word	0x58020000

08001550 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08e      	sub	sp, #56	@ 0x38
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	d842      	bhi.n	80015e4 <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800155e:	2200      	movs	r2, #0
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	2019      	movs	r0, #25
 8001564:	f002 f932 	bl	80037cc <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001568:	2019      	movs	r0, #25
 800156a:	f002 f949 	bl	8003800 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800156e:	4a23      	ldr	r2, [pc, #140]	@ (80015fc <HAL_InitTick+0xac>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001574:	4b22      	ldr	r3, [pc, #136]	@ (8001600 <HAL_InitTick+0xb0>)
 8001576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800157a:	4a21      	ldr	r2, [pc, #132]	@ (8001600 <HAL_InitTick+0xb0>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001584:	4b1e      	ldr	r3, [pc, #120]	@ (8001600 <HAL_InitTick+0xb0>)
 8001586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001592:	f107 020c 	add.w	r2, r7, #12
 8001596:	f107 0310 	add.w	r3, r7, #16
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f005 fa99 	bl	8006ad4 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80015a2:	f005 fa81 	bl	8006aa8 <HAL_RCC_GetPCLK2Freq>
 80015a6:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015aa:	4a16      	ldr	r2, [pc, #88]	@ (8001604 <HAL_InitTick+0xb4>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	0c9b      	lsrs	r3, r3, #18
 80015b2:	3b01      	subs	r3, #1
 80015b4:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015b6:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <HAL_InitTick+0xb8>)
 80015b8:	4a14      	ldr	r2, [pc, #80]	@ (800160c <HAL_InitTick+0xbc>)
 80015ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_InitTick+0xb8>)
 80015be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015c2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015c4:	4a10      	ldr	r2, [pc, #64]	@ (8001608 <HAL_InitTick+0xb8>)
 80015c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015c8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <HAL_InitTick+0xb8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <HAL_InitTick+0xb8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80015d6:	480c      	ldr	r0, [pc, #48]	@ (8001608 <HAL_InitTick+0xb8>)
 80015d8:	f007 ffa0 	bl	800951c <HAL_TIM_Base_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d107      	bne.n	80015f2 <HAL_InitTick+0xa2>
 80015e2:	e001      	b.n	80015e8 <HAL_InitTick+0x98>
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e005      	b.n	80015f4 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80015e8:	4807      	ldr	r0, [pc, #28]	@ (8001608 <HAL_InitTick+0xb8>)
 80015ea:	f007 ffef 	bl	80095cc <HAL_TIM_Base_Start_IT>
 80015ee:	4603      	mov	r3, r0
 80015f0:	e000      	b.n	80015f4 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3738      	adds	r7, #56	@ 0x38
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	24000008 	.word	0x24000008
 8001600:	58024400 	.word	0x58024400
 8001604:	431bde83 	.word	0x431bde83
 8001608:	240008dc 	.word	0x240008dc
 800160c:	40010000 	.word	0x40010000

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <NMI_Handler+0x4>

08001618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <MemManage_Handler+0x4>

08001628 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <BusFault_Handler+0x4>

08001630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <UsageFault_Handler+0x4>

08001638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <TIM1_UP_IRQHandler+0x10>)
 800164e:	f008 f835 	bl	80096bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	240008dc 	.word	0x240008dc

0800165c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <OTG_FS_IRQHandler+0x10>)
 8001662:	f003 f8aa 	bl	80047ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	24006af8 	.word	0x24006af8

08001670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001674:	4b37      	ldr	r3, [pc, #220]	@ (8001754 <SystemInit+0xe4>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800167a:	4a36      	ldr	r2, [pc, #216]	@ (8001754 <SystemInit+0xe4>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001684:	4b34      	ldr	r3, [pc, #208]	@ (8001758 <SystemInit+0xe8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	2b06      	cmp	r3, #6
 800168e:	d807      	bhi.n	80016a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001690:	4b31      	ldr	r3, [pc, #196]	@ (8001758 <SystemInit+0xe8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 030f 	bic.w	r3, r3, #15
 8001698:	4a2f      	ldr	r2, [pc, #188]	@ (8001758 <SystemInit+0xe8>)
 800169a:	f043 0307 	orr.w	r3, r3, #7
 800169e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016a0:	4b2e      	ldr	r3, [pc, #184]	@ (800175c <SystemInit+0xec>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a2d      	ldr	r2, [pc, #180]	@ (800175c <SystemInit+0xec>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016ac:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <SystemInit+0xec>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016b2:	4b2a      	ldr	r3, [pc, #168]	@ (800175c <SystemInit+0xec>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4929      	ldr	r1, [pc, #164]	@ (800175c <SystemInit+0xec>)
 80016b8:	4b29      	ldr	r3, [pc, #164]	@ (8001760 <SystemInit+0xf0>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016be:	4b26      	ldr	r3, [pc, #152]	@ (8001758 <SystemInit+0xe8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016ca:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <SystemInit+0xe8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 030f 	bic.w	r3, r3, #15
 80016d2:	4a21      	ldr	r2, [pc, #132]	@ (8001758 <SystemInit+0xe8>)
 80016d4:	f043 0307 	orr.w	r3, r3, #7
 80016d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016da:	4b20      	ldr	r3, [pc, #128]	@ (800175c <SystemInit+0xec>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016e0:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <SystemInit+0xec>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016e6:	4b1d      	ldr	r3, [pc, #116]	@ (800175c <SystemInit+0xec>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <SystemInit+0xec>)
 80016ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001764 <SystemInit+0xf4>)
 80016f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <SystemInit+0xec>)
 80016f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001768 <SystemInit+0xf8>)
 80016f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016f8:	4b18      	ldr	r3, [pc, #96]	@ (800175c <SystemInit+0xec>)
 80016fa:	4a1c      	ldr	r2, [pc, #112]	@ (800176c <SystemInit+0xfc>)
 80016fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016fe:	4b17      	ldr	r3, [pc, #92]	@ (800175c <SystemInit+0xec>)
 8001700:	2200      	movs	r2, #0
 8001702:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001704:	4b15      	ldr	r3, [pc, #84]	@ (800175c <SystemInit+0xec>)
 8001706:	4a19      	ldr	r2, [pc, #100]	@ (800176c <SystemInit+0xfc>)
 8001708:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <SystemInit+0xec>)
 800170c:	2200      	movs	r2, #0
 800170e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <SystemInit+0xec>)
 8001712:	4a16      	ldr	r2, [pc, #88]	@ (800176c <SystemInit+0xfc>)
 8001714:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001716:	4b11      	ldr	r3, [pc, #68]	@ (800175c <SystemInit+0xec>)
 8001718:	2200      	movs	r2, #0
 800171a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800171c:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <SystemInit+0xec>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0e      	ldr	r2, [pc, #56]	@ (800175c <SystemInit+0xec>)
 8001722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001726:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001728:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <SystemInit+0xec>)
 800172a:	2200      	movs	r2, #0
 800172c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800172e:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <SystemInit+0x100>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <SystemInit+0x104>)
 8001734:	4013      	ands	r3, r2
 8001736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800173a:	d202      	bcs.n	8001742 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800173c:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <SystemInit+0x108>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <SystemInit+0x10c>)
 8001744:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001748:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00
 8001758:	52002000 	.word	0x52002000
 800175c:	58024400 	.word	0x58024400
 8001760:	eaf6ed7f 	.word	0xeaf6ed7f
 8001764:	02020200 	.word	0x02020200
 8001768:	01ff0000 	.word	0x01ff0000
 800176c:	01010280 	.word	0x01010280
 8001770:	5c001000 	.word	0x5c001000
 8001774:	ffff0000 	.word	0xffff0000
 8001778:	51008108 	.word	0x51008108
 800177c:	52004000 	.word	0x52004000

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001784:	f7ff ff74 	bl	8001670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178a:	490d      	ldr	r1, [pc, #52]	@ (80017c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800178c:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a0:	4c0a      	ldr	r4, [pc, #40]	@ (80017cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ae:	f010 fdab 	bl	8012308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7fe ff0d 	bl	80005d0 <main>
  bx  lr
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017b8:	24060000 	.word	0x24060000
  ldr r0, =_sdata
 80017bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017c0:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 80017c4:	08012588 	.word	0x08012588
  ldr r2, =_sbss
 80017c8:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 80017cc:	2400733c 	.word	0x2400733c

080017d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC3_IRQHandler>

080017d2 <BQ79614_InitByteWrite>:
#include "bq79614.h"
#include "crc16ibm.h"
#include <string.h>

static uint8_t BQ79614_InitByteWrite(BQ79614_Device *dev, BQ79614_ReqType req_type, uint8_t data_size) {
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	70fb      	strb	r3, [r7, #3]
 80017de:	4613      	mov	r3, r2
 80017e0:	70bb      	strb	r3, [r7, #2]
    uint8_t cmd = (req_type == BQ79614_REQ_BROADCAST ? 0x80 : 0x00) |
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d102      	bne.n	80017ee <BQ79614_InitByteWrite+0x1c>
 80017e8:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80017ec:	e000      	b.n	80017f0 <BQ79614_InitByteWrite+0x1e>
 80017ee:	2200      	movs	r2, #0
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <BQ79614_InitByteWrite+0x28>
 80017f6:	2340      	movs	r3, #64	@ 0x40
 80017f8:	e000      	b.n	80017fc <BQ79614_InitByteWrite+0x2a>
 80017fa:	2300      	movs	r3, #0
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b25a      	sxtb	r2, r3
                  (req_type == BQ79614_REQ_STACK ? 0x40 : 0x00) |
                  (data_size - 1);
 8001800:	78bb      	ldrb	r3, [r7, #2]
 8001802:	3b01      	subs	r3, #1
 8001804:	b2db      	uxtb	r3, r3
 8001806:	b25b      	sxtb	r3, r3
                  (req_type == BQ79614_REQ_STACK ? 0x40 : 0x00) |
 8001808:	4313      	orrs	r3, r2
 800180a:	b25b      	sxtb	r3, r3
    uint8_t cmd = (req_type == BQ79614_REQ_BROADCAST ? 0x80 : 0x00) |
 800180c:	73fb      	strb	r3, [r7, #15]
    return cmd;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <BQ79614_InitByteRead>:

static uint8_t BQ79614_InitByteRead(BQ79614_Device *dev, BQ79614_ReqType req_type) {
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	70fb      	strb	r3, [r7, #3]
    uint8_t cmd = 0x20 |
                  (req_type == BQ79614_REQ_BROADCAST ? 0x80 : 0x00) |
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d102      	bne.n	8001834 <BQ79614_InitByteRead+0x18>
 800182e:	f06f 025f 	mvn.w	r2, #95	@ 0x5f
 8001832:	e000      	b.n	8001836 <BQ79614_InitByteRead+0x1a>
 8001834:	2220      	movs	r2, #32
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <BQ79614_InitByteRead+0x24>
 800183c:	2340      	movs	r3, #64	@ 0x40
 800183e:	e000      	b.n	8001842 <BQ79614_InitByteRead+0x26>
 8001840:	2300      	movs	r3, #0
 8001842:	4313      	orrs	r3, r2
 8001844:	b25b      	sxtb	r3, r3
    uint8_t cmd = 0x20 |
 8001846:	73fb      	strb	r3, [r7, #15]
                  (req_type == BQ79614_REQ_STACK ? 0x40 : 0x00);
    return cmd;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <BQ79614_Init>:

HAL_StatusTypeDef BQ79614_Init(BQ79614_Device *dev, UART_HandleTypeDef *huart) {
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
    dev->huart = huart;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	601a      	str	r2, [r3, #0]
    dev->read_size = 0;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
    memset(dev->out, 0, sizeof(dev->out));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	330c      	adds	r3, #12
 8001870:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f010 fce8 	bl	801224c <memset>
    memset(dev->in, 0, sizeof(dev->in));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001882:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f010 fcdf 	bl	801224c <memset>
    memset(dev->stack_device_status, 0, sizeof(dev->stack_device_status));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8001894:	22b0      	movs	r2, #176	@ 0xb0
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f010 fcd7 	bl	801224c <memset>
    memset(dev->stack_device_data, 0, sizeof(dev->stack_device_data));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80018a4:	22b0      	movs	r2, #176	@ 0xb0
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f010 fccf 	bl	801224c <memset>
    dev->semaphore = xSemaphoreCreateBinary();
 80018ae:	2203      	movs	r2, #3
 80018b0:	2100      	movs	r1, #0
 80018b2:	2001      	movs	r0, #1
 80018b4:	f00d fa63 	bl	800ed7e <xQueueGenericCreate>
 80018b8:	4602      	mov	r2, r0
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	605a      	str	r2, [r3, #4]
    if (dev->semaphore == NULL) return HAL_ERROR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <BQ79614_Init+0x74>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e007      	b.n	80018da <BQ79614_Init+0x84>
    xSemaphoreGive(dev->semaphore);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6858      	ldr	r0, [r3, #4]
 80018ce:	2300      	movs	r3, #0
 80018d0:	2200      	movs	r2, #0
 80018d2:	2100      	movs	r1, #0
 80018d4:	f00d fab2 	bl	800ee3c <xQueueGenericSend>
    return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <BQ79614_InitUART>:

HAL_StatusTypeDef BQ79614_InitUART(BQ79614_Device *dev) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef *huart = dev->huart;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
    huart->Init.BaudRate = BQ79614_DEFAULT_BAUDRATE;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4a10      	ldr	r2, [pc, #64]	@ (8001938 <BQ79614_InitUART+0x54>)
 80018f6:	605a      	str	r2, [r3, #4]
    huart->Init.WordLength = UART_WORDLENGTH_8B;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
    huart->Init.StopBits = UART_STOPBITS_1;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
    huart->Init.Parity = UART_PARITY_NONE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
    huart->Init.Mode = UART_MODE_TX_RX;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	220c      	movs	r2, #12
 800190e:	615a      	str	r2, [r3, #20]
    huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
    huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(huart) != HAL_OK) return HAL_ERROR;
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f008 fae5 	bl	8009eec <HAL_UART_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <BQ79614_InitUART+0x48>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <BQ79614_InitUART+0x4a>
    return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	000f4240 	.word	0x000f4240

0800193c <BQ79614_InitStack>:

HAL_StatusTypeDef BQ79614_InitStack(BQ79614_Device *dev) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af02      	add	r7, sp, #8
 8001942:	6078      	str	r0, [r7, #4]
    if (BQ79614_WakeUp(dev) != HAL_OK) return HAL_ERROR;
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 fb23 	bl	8001f90 <BQ79614_WakeUp>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <BQ79614_InitStack+0x18>
 8001950:	2301      	movs	r3, #1
 8001952:	e016      	b.n	8001982 <BQ79614_InitStack+0x46>
    BQ79614_Control1 ctrl = { .send_wake = 1 };
 8001954:	2300      	movs	r3, #0
 8001956:	733b      	strb	r3, [r7, #12]
 8001958:	7b3b      	ldrb	r3, [r7, #12]
 800195a:	f043 0320 	orr.w	r3, r3, #32
 800195e:	733b      	strb	r3, [r7, #12]
    uint8_t data = *(uint8_t*)&ctrl;
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	72fb      	strb	r3, [r7, #11]
    return BQ79614_Write(dev, BQ79614_REQ_BROADCAST, &data, 1, BQ79614_REG_CONTROL1, 0);
 8001968:	f107 020b 	add.w	r2, r7, #11
 800196c:	2300      	movs	r3, #0
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	f240 3309 	movw	r3, #777	@ 0x309
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2301      	movs	r3, #1
 8001978:	2102      	movs	r1, #2
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 fb40 	bl	8002000 <BQ79614_Write>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <BQ79614_InitVoltageMeasurement>:

HAL_StatusTypeDef BQ79614_InitVoltageMeasurement(BQ79614_Device *dev) {
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af02      	add	r7, sp, #8
 8001990:	6078      	str	r0, [r7, #4]
    BQ79614_AdcCtrl1 adc_ctrl = { .main_mode = BQ79614_SCAN_ROUND_ROBIN, .main_go = 1 };
 8001992:	2300      	movs	r3, #0
 8001994:	733b      	strb	r3, [r7, #12]
 8001996:	7b3b      	ldrb	r3, [r7, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	f362 0301 	bfi	r3, r2, #0, #2
 800199e:	733b      	strb	r3, [r7, #12]
 80019a0:	7b3b      	ldrb	r3, [r7, #12]
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	733b      	strb	r3, [r7, #12]
    uint8_t data = *(uint8_t*)&adc_ctrl;
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	72fb      	strb	r3, [r7, #11]
    return BQ79614_Write(dev, BQ79614_REQ_BROADCAST, &data, 1, BQ79614_REG_ADCCTRL1, 0);
 80019b0:	f107 020b 	add.w	r2, r7, #11
 80019b4:	2300      	movs	r3, #0
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	f240 330d 	movw	r3, #781	@ 0x30d
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2301      	movs	r3, #1
 80019c0:	2102      	movs	r1, #2
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 fb1c 	bl	8002000 <BQ79614_Write>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <BQ79614_InitOVUV>:

HAL_StatusTypeDef BQ79614_InitOVUV(BQ79614_Device *dev, uint32_t undervoltage, uint32_t overvoltage) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af02      	add	r7, sp, #8
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
    if (undervoltage < 1200 || undervoltage > 3100 || overvoltage < 4175 || overvoltage > 4475) return HAL_ERROR;
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80019e6:	d30e      	bcc.n	8001a06 <BQ79614_InitOVUV+0x32>
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f640 421c 	movw	r2, #3100	@ 0xc1c
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d809      	bhi.n	8001a06 <BQ79614_InitOVUV+0x32>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f241 024e 	movw	r2, #4174	@ 0x104e
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d904      	bls.n	8001a06 <BQ79614_InitOVUV+0x32>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f241 127b 	movw	r2, #4475	@ 0x117b
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <BQ79614_InitOVUV+0x36>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e051      	b.n	8001aae <BQ79614_InitOVUV+0xda>
    uint8_t uv_data = (uint8_t)((undervoltage - 1200) / 25);
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001a10:	4a29      	ldr	r2, [pc, #164]	@ (8001ab8 <BQ79614_InitOVUV+0xe4>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	08db      	lsrs	r3, r3, #3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	75bb      	strb	r3, [r7, #22]
    uint8_t ov_data = (uint8_t)((overvoltage - 4175) / 5);
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4b27      	ldr	r3, [pc, #156]	@ (8001abc <BQ79614_InitOVUV+0xe8>)
 8001a20:	4413      	add	r3, r2
 8001a22:	4a27      	ldr	r2, [pc, #156]	@ (8001ac0 <BQ79614_InitOVUV+0xec>)
 8001a24:	fba2 2303 	umull	r2, r3, r2, r3
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	757b      	strb	r3, [r7, #21]
    HAL_StatusTypeDef status = BQ79614_Write(dev, BQ79614_REQ_BROADCAST, &uv_data, 1, 0x0001, 0);
 8001a2e:	f107 0216 	add.w	r2, r7, #22
 8001a32:	2300      	movs	r3, #0
 8001a34:	9301      	str	r3, [sp, #4]
 8001a36:	2301      	movs	r3, #1
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	2102      	movs	r1, #2
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 fade 	bl	8002000 <BQ79614_Write>
 8001a44:	4603      	mov	r3, r0
 8001a46:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8001a48:	7dfb      	ldrb	r3, [r7, #23]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <BQ79614_InitOVUV+0x7e>
 8001a4e:	7dfb      	ldrb	r3, [r7, #23]
 8001a50:	e02d      	b.n	8001aae <BQ79614_InitOVUV+0xda>
    status = BQ79614_Write(dev, BQ79614_REQ_BROADCAST, &ov_data, 1, 0x0003, 0);
 8001a52:	f107 0215 	add.w	r2, r7, #21
 8001a56:	2300      	movs	r3, #0
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	2102      	movs	r1, #2
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 facc 	bl	8002000 <BQ79614_Write>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <BQ79614_InitOVUV+0xa2>
 8001a72:	7dfb      	ldrb	r3, [r7, #23]
 8001a74:	e01b      	b.n	8001aae <BQ79614_InitOVUV+0xda>
    BQ79614_OVUVCtrl ovuv_ctrl = { .ovuv_mode = BQ79614_SCAN_ROUND_ROBIN, .ovuv_go = 1 };
 8001a76:	2300      	movs	r3, #0
 8001a78:	753b      	strb	r3, [r7, #20]
 8001a7a:	7d3b      	ldrb	r3, [r7, #20]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f362 0301 	bfi	r3, r2, #0, #2
 8001a82:	753b      	strb	r3, [r7, #20]
 8001a84:	7d3b      	ldrb	r3, [r7, #20]
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	753b      	strb	r3, [r7, #20]
    uint8_t data = *(uint8_t*)&ovuv_ctrl;
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	74fb      	strb	r3, [r7, #19]
    return BQ79614_Write(dev, BQ79614_REQ_BROADCAST, &data, 1, BQ79614_REG_OVUVCTRL, 0);
 8001a94:	f107 0213 	add.w	r2, r7, #19
 8001a98:	2300      	movs	r3, #0
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	f44f 734b 	mov.w	r3, #812	@ 0x32c
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 faaa 	bl	8002000 <BQ79614_Write>
 8001aac:	4603      	mov	r3, r0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	51eb851f 	.word	0x51eb851f
 8001abc:	ffffefb1 	.word	0xffffefb1
 8001ac0:	cccccccd 	.word	0xcccccccd

08001ac4 <BQ79614_InitTemperatureMeasurements>:

HAL_StatusTypeDef BQ79614_InitTemperatureMeasurements(BQ79614_Device *dev) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	@ 0x28
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	6078      	str	r0, [r7, #4]
    BQ79614_GPIOConf1 conf1 = { .gpio1 = BQ79614_GPIO_ADC_OTUT, .gpio2 = BQ79614_GPIO_ADC_OTUT };
 8001acc:	2300      	movs	r3, #0
 8001ace:	773b      	strb	r3, [r7, #28]
 8001ad0:	7f3b      	ldrb	r3, [r7, #28]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f362 0302 	bfi	r3, r2, #0, #3
 8001ad8:	773b      	strb	r3, [r7, #28]
 8001ada:	7f3b      	ldrb	r3, [r7, #28]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f362 03c5 	bfi	r3, r2, #3, #3
 8001ae2:	773b      	strb	r3, [r7, #28]
    BQ79614_GPIOConf2 conf2 = { .gpio3 = BQ79614_GPIO_ADC_OTUT, .gpio4 = BQ79614_GPIO_ADC_OTUT };
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	763b      	strb	r3, [r7, #24]
 8001ae8:	7e3b      	ldrb	r3, [r7, #24]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f362 0302 	bfi	r3, r2, #0, #3
 8001af0:	763b      	strb	r3, [r7, #24]
 8001af2:	7e3b      	ldrb	r3, [r7, #24]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f362 03c5 	bfi	r3, r2, #3, #3
 8001afa:	763b      	strb	r3, [r7, #24]
    BQ79614_GPIOConf3 conf3 = { .gpio5 = BQ79614_GPIO_ADC_OTUT, .gpio6 = BQ79614_GPIO_ADC_OTUT };
 8001afc:	2300      	movs	r3, #0
 8001afe:	753b      	strb	r3, [r7, #20]
 8001b00:	7d3b      	ldrb	r3, [r7, #20]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f362 0302 	bfi	r3, r2, #0, #3
 8001b08:	753b      	strb	r3, [r7, #20]
 8001b0a:	7d3b      	ldrb	r3, [r7, #20]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f362 03c5 	bfi	r3, r2, #3, #3
 8001b12:	753b      	strb	r3, [r7, #20]
    BQ79614_GPIOConf4 conf4 = { .gpio7 = BQ79614_GPIO_ADC_OTUT, .gpio8 = BQ79614_GPIO_ADC_OTUT };
 8001b14:	2300      	movs	r3, #0
 8001b16:	743b      	strb	r3, [r7, #16]
 8001b18:	7c3b      	ldrb	r3, [r7, #16]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f362 0302 	bfi	r3, r2, #0, #3
 8001b20:	743b      	strb	r3, [r7, #16]
 8001b22:	7c3b      	ldrb	r3, [r7, #16]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f362 03c5 	bfi	r3, r2, #3, #3
 8001b2a:	743b      	strb	r3, [r7, #16]
    uint8_t data1 = *(uint8_t*)&conf1;
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	73fb      	strb	r3, [r7, #15]
    uint8_t data2 = *(uint8_t*)&conf2;
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	73bb      	strb	r3, [r7, #14]
    uint8_t data3 = *(uint8_t*)&conf3;
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	737b      	strb	r3, [r7, #13]
    uint8_t data4 = *(uint8_t*)&conf4;
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	733b      	strb	r3, [r7, #12]
    HAL_StatusTypeDef status = BQ79614_Write(dev, BQ79614_REQ_BROADCAST, &data1, 1, BQ79614_REG_GPIOCONF1, 0);
 8001b4c:	f107 020f 	add.w	r2, r7, #15
 8001b50:	2300      	movs	r3, #0
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	230e      	movs	r3, #14
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2301      	movs	r3, #1
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 fa4f 	bl	8002000 <BQ79614_Write>
 8001b62:	4603      	mov	r3, r0
 8001b64:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 8001b66:	7ffb      	ldrb	r3, [r7, #31]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <BQ79614_InitTemperatureMeasurements+0xac>
 8001b6c:	7ffb      	ldrb	r3, [r7, #31]
 8001b6e:	e02f      	b.n	8001bd0 <BQ79614_InitTemperatureMeasurements+0x10c>
    status = BQ79614_Write(dev, BQ79614_REQ_BROADCAST, &data2, 1, BQ79614_REG_GPIOCONF2, 0);
 8001b70:	f107 020e 	add.w	r2, r7, #14
 8001b74:	2300      	movs	r3, #0
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	230f      	movs	r3, #15
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	2102      	movs	r1, #2
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fa3d 	bl	8002000 <BQ79614_Write>
 8001b86:	4603      	mov	r3, r0
 8001b88:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 8001b8a:	7ffb      	ldrb	r3, [r7, #31]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <BQ79614_InitTemperatureMeasurements+0xd0>
 8001b90:	7ffb      	ldrb	r3, [r7, #31]
 8001b92:	e01d      	b.n	8001bd0 <BQ79614_InitTemperatureMeasurements+0x10c>
    status = BQ79614_Write(dev, BQ79614_REQ_BROADCAST, &data3, 1, BQ79614_REG_GPIOCONF3, 0);
 8001b94:	f107 020d 	add.w	r2, r7, #13
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fa2b 	bl	8002000 <BQ79614_Write>
 8001baa:	4603      	mov	r3, r0
 8001bac:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 8001bae:	7ffb      	ldrb	r3, [r7, #31]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <BQ79614_InitTemperatureMeasurements+0xf4>
 8001bb4:	7ffb      	ldrb	r3, [r7, #31]
 8001bb6:	e00b      	b.n	8001bd0 <BQ79614_InitTemperatureMeasurements+0x10c>
    return BQ79614_Write(dev, BQ79614_REQ_BROADCAST, &data4, 1, BQ79614_REG_GPIOCONF4, 0);
 8001bb8:	f107 020c 	add.w	r2, r7, #12
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	2311      	movs	r3, #17
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 fa19 	bl	8002000 <BQ79614_Write>
 8001bce:	4603      	mov	r3, r0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <BQ79614_InitOTUT>:

HAL_StatusTypeDef BQ79614_InitOTUT(BQ79614_Device *dev, uint8_t undertemperature, uint8_t overtemperature) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	70fb      	strb	r3, [r7, #3]
 8001be4:	4613      	mov	r3, r2
 8001be6:	70bb      	strb	r3, [r7, #2]
    if (undertemperature < 66 || undertemperature > 80 || (undertemperature % 2) != 0 || overtemperature < 10 || overtemperature > 39) return HAL_ERROR;
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	2b41      	cmp	r3, #65	@ 0x41
 8001bec:	d90e      	bls.n	8001c0c <BQ79614_InitOTUT+0x34>
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	2b50      	cmp	r3, #80	@ 0x50
 8001bf2:	d80b      	bhi.n	8001c0c <BQ79614_InitOTUT+0x34>
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d105      	bne.n	8001c0c <BQ79614_InitOTUT+0x34>
 8001c00:	78bb      	ldrb	r3, [r7, #2]
 8001c02:	2b09      	cmp	r3, #9
 8001c04:	d902      	bls.n	8001c0c <BQ79614_InitOTUT+0x34>
 8001c06:	78bb      	ldrb	r3, [r7, #2]
 8001c08:	2b27      	cmp	r3, #39	@ 0x27
 8001c0a:	d901      	bls.n	8001c10 <BQ79614_InitOTUT+0x38>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e048      	b.n	8001ca2 <BQ79614_InitOTUT+0xca>
    BQ79614_OTUTThresh thresh = { .ot_thr = overtemperature - 10, .ut_thr = (undertemperature - 66) / 2 };
 8001c10:	78bb      	ldrb	r3, [r7, #2]
 8001c12:	3b0a      	subs	r3, #10
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	7b3b      	ldrb	r3, [r7, #12]
 8001c1e:	f362 0304 	bfi	r3, r2, #0, #5
 8001c22:	733b      	strb	r3, [r7, #12]
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	3b42      	subs	r3, #66	@ 0x42
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da00      	bge.n	8001c2e <BQ79614_InitOTUT+0x56>
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	105b      	asrs	r3, r3, #1
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	7b3b      	ldrb	r3, [r7, #12]
 8001c38:	f362 1347 	bfi	r3, r2, #5, #3
 8001c3c:	733b      	strb	r3, [r7, #12]
    uint8_t data = *(uint8_t*)&thresh;
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef status = BQ79614_Write(dev, BQ79614_REQ_BROADCAST, &data, 1, BQ79614_REG_OTUTTHRESH, 0);
 8001c46:	f107 020b 	add.w	r2, r7, #11
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	230b      	movs	r3, #11
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2301      	movs	r3, #1
 8001c54:	2102      	movs	r1, #2
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f9d2 	bl	8002000 <BQ79614_Write>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <BQ79614_InitOTUT+0x92>
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	e01b      	b.n	8001ca2 <BQ79614_InitOTUT+0xca>
    BQ79614_OTUTCtrl otut_ctrl = { .otut_mode = BQ79614_SCAN_ROUND_ROBIN, .otut_go = 1 };
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	723b      	strb	r3, [r7, #8]
 8001c6e:	7a3b      	ldrb	r3, [r7, #8]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f362 0301 	bfi	r3, r2, #0, #2
 8001c76:	723b      	strb	r3, [r7, #8]
 8001c78:	7a3b      	ldrb	r3, [r7, #8]
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	723b      	strb	r3, [r7, #8]
    data = *(uint8_t*)&otut_ctrl;
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	72fb      	strb	r3, [r7, #11]
    return BQ79614_Write(dev, BQ79614_REQ_BROADCAST, &data, 1, BQ79614_REG_OTUTCTRL, 0);
 8001c88:	f107 020b 	add.w	r2, r7, #11
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	f240 332d 	movw	r3, #813	@ 0x32d
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	2301      	movs	r3, #1
 8001c98:	2102      	movs	r1, #2
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f9b0 	bl	8002000 <BQ79614_Write>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <BQ79614_StartMeasurements>:

HAL_StatusTypeDef BQ79614_StartMeasurements(BQ79614_Device *dev) {
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af02      	add	r7, sp, #8
 8001cb0:	6078      	str	r0, [r7, #4]
    BQ79614_AdcCtrl1 adc_ctrl = { .main_mode = BQ79614_SCAN_ROUND_ROBIN, .main_go = 1 };
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	733b      	strb	r3, [r7, #12]
 8001cb6:	7b3b      	ldrb	r3, [r7, #12]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f362 0301 	bfi	r3, r2, #0, #2
 8001cbe:	733b      	strb	r3, [r7, #12]
 8001cc0:	7b3b      	ldrb	r3, [r7, #12]
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	733b      	strb	r3, [r7, #12]
    uint8_t data = *(uint8_t*)&adc_ctrl;
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	72fb      	strb	r3, [r7, #11]
    return BQ79614_Write(dev, BQ79614_REQ_BROADCAST, &data, 1, BQ79614_REG_ADCCTRL1, 0);
 8001cd0:	f107 020b 	add.w	r2, r7, #11
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	f240 330d 	movw	r3, #781	@ 0x30d
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2301      	movs	r3, #1
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f98c 	bl	8002000 <BQ79614_Write>
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <BQ79614_UpdateStatus>:

HAL_StatusTypeDef BQ79614_UpdateStatus(BQ79614_Device *dev) {
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b08a      	sub	sp, #40	@ 0x28
 8001cf6:	af02      	add	r7, sp, #8
 8001cf8:	6078      	str	r0, [r7, #4]
    uint8_t data[2 * BQ79614_STACK_SIZE];
    HAL_StatusTypeDef status = BQ79614_Read(dev, BQ79614_REQ_STACK, data, 2, 0x0040, 0);
 8001cfa:	f107 020c 	add.w	r2, r7, #12
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	2340      	movs	r3, #64	@ 0x40
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2302      	movs	r3, #2
 8001d08:	2101      	movs	r1, #1
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f9f3 	bl	80020f6 <BQ79614_Read>
 8001d10:	4603      	mov	r3, r0
 8001d12:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK) return status;
 8001d14:	7cfb      	ldrb	r3, [r7, #19]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <BQ79614_UpdateStatus+0x2c>
 8001d1a:	7cfb      	ldrb	r3, [r7, #19]
 8001d1c:	e051      	b.n	8001dc2 <BQ79614_UpdateStatus+0xd0>
    for (size_t i = 0; i < BQ79614_STACK_SIZE; i++) {
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e04a      	b.n	8001dba <BQ79614_UpdateStatus+0xc8>
        uint16_t status = (data[i * 2] << 8) | data[i * 2 + 1];
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	3320      	adds	r3, #32
 8001d2a:	443b      	add	r3, r7
 8001d2c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	b21a      	sxth	r2, r3
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	3301      	adds	r3, #1
 8001d3a:	3320      	adds	r3, #32
 8001d3c:	443b      	add	r3, r7
 8001d3e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	823b      	strh	r3, [r7, #16]
        for (size_t j = 0; j < BQ79614_CELL_COUNT; j++) {
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	e013      	b.n	8001d78 <BQ79614_UpdateStatus+0x86>
            dev->stack_device_status[i].ovuv[j] = (status >> j) & 0x1;
 8001d50:	8a3a      	ldrh	r2, [r7, #16]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	fa42 f303 	asr.w	r3, r2, r3
 8001d58:	f003 0201 	and.w	r2, r3, #1
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	2016      	movs	r0, #22
 8001d62:	fb03 f000 	mul.w	r0, r3, r0
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	4403      	add	r3, r0
 8001d6a:	3382      	adds	r3, #130	@ 0x82
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	605a      	str	r2, [r3, #4]
        for (size_t j = 0; j < BQ79614_CELL_COUNT; j++) {
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	3301      	adds	r3, #1
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2b0d      	cmp	r3, #13
 8001d7c:	d9e8      	bls.n	8001d50 <BQ79614_UpdateStatus+0x5e>
        }
        for (size_t j = 0; j < BQ79614_TEMP_COUNT; j++) {
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e014      	b.n	8001dae <BQ79614_UpdateStatus+0xbc>
            dev->stack_device_status[i].otut[j] = (status >> (j + 16)) & 0x1;
 8001d84:	8a3a      	ldrh	r2, [r7, #16]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3310      	adds	r3, #16
 8001d8a:	fa42 f303 	asr.w	r3, r2, r3
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2016      	movs	r0, #22
 8001d98:	fb03 f000 	mul.w	r0, r3, r0
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	4403      	add	r3, r0
 8001da0:	3390      	adds	r3, #144	@ 0x90
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	605a      	str	r2, [r3, #4]
        for (size_t j = 0; j < BQ79614_TEMP_COUNT; j++) {
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b07      	cmp	r3, #7
 8001db2:	d9e7      	bls.n	8001d84 <BQ79614_UpdateStatus+0x92>
    for (size_t i = 0; i < BQ79614_STACK_SIZE; i++) {
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	3301      	adds	r3, #1
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d9b1      	bls.n	8001d24 <BQ79614_UpdateStatus+0x32>
        }
    }
    return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	0000      	movs	r0, r0
 8001dcc:	0000      	movs	r0, r0
	...

08001dd0 <BQ79614_UpdateData>:

HAL_StatusTypeDef BQ79614_UpdateData(BQ79614_Device *dev) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b0a0      	sub	sp, #128	@ 0x80
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	6078      	str	r0, [r7, #4]
    uint8_t volt_data[2 * BQ79614_CELL_COUNT * BQ79614_STACK_SIZE];
    HAL_StatusTypeDef status = BQ79614_Read(dev, BQ79614_REQ_STACK, volt_data, 2 * BQ79614_CELL_COUNT, BQ79614_REG_CELL1_VOLTAGE, 0);
 8001dd8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	2314      	movs	r3, #20
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	231c      	movs	r3, #28
 8001de6:	2101      	movs	r1, #1
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f984 	bl	80020f6 <BQ79614_Read>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (status != HAL_OK) return status;
 8001df4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <BQ79614_UpdateData+0x32>
 8001dfc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001e00:	e0b3      	b.n	8001f6a <BQ79614_UpdateData+0x19a>
    for (size_t i = 0; i < BQ79614_STACK_SIZE; i++) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e06:	e04a      	b.n	8001e9e <BQ79614_UpdateData+0xce>
        for (size_t j = 0; j < BQ79614_CELL_COUNT; j++) {
 8001e08:	2300      	movs	r3, #0
 8001e0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e0c:	e041      	b.n	8001e92 <BQ79614_UpdateData+0xc2>
            uint16_t raw = (volt_data[i * BQ79614_CELL_COUNT * 2 + j * 2] << 8) | volt_data[i * BQ79614_CELL_COUNT * 2 + j * 2 + 1];
 8001e0e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	461a      	mov	r2, r3
 8001e1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e1c:	4413      	add	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	3378      	adds	r3, #120	@ 0x78
 8001e22:	443b      	add	r3, r7
 8001e24:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	b219      	sxth	r1, r3
 8001e2c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	1a9b      	subs	r3, r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	461a      	mov	r2, r3
 8001e38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e3a:	4413      	add	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	3301      	adds	r3, #1
 8001e40:	3378      	adds	r3, #120	@ 0x78
 8001e42:	443b      	add	r3, r7
 8001e44:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
            dev->stack_device_data[i].voltages[j] = raw * BQ79614_V_LSB_ADC * 1000000.0;
 8001e52:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e5e:	ed9f 6b46 	vldr	d6, [pc, #280]	@ 8001f78 <BQ79614_UpdateData+0x1a8>
 8001e62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e66:	ed9f 6b46 	vldr	d6, [pc, #280]	@ 8001f80 <BQ79614_UpdateData+0x1b0>
 8001e6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e76:	2116      	movs	r1, #22
 8001e78:	fb03 f101 	mul.w	r1, r3, r1
 8001e7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e7e:	440b      	add	r3, r1
 8001e80:	33ae      	adds	r3, #174	@ 0xae
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	3304      	adds	r3, #4
 8001e88:	edc3 7a00 	vstr	s15, [r3]
        for (size_t j = 0; j < BQ79614_CELL_COUNT; j++) {
 8001e8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e8e:	3301      	adds	r3, #1
 8001e90:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e94:	2b0d      	cmp	r3, #13
 8001e96:	d9ba      	bls.n	8001e0e <BQ79614_UpdateData+0x3e>
    for (size_t i = 0; i < BQ79614_STACK_SIZE; i++) {
 8001e98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d9b1      	bls.n	8001e08 <BQ79614_UpdateData+0x38>
        }
    }
    uint8_t temp_data[2 * BQ79614_TEMP_COUNT * BQ79614_STACK_SIZE];
    status = BQ79614_Read(dev, BQ79614_REQ_STACK, temp_data, 2 * BQ79614_TEMP_COUNT, BQ79614_REG_GPIO1, 0);
 8001ea4:	f107 0208 	add.w	r2, r7, #8
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	2332      	movs	r3, #50	@ 0x32
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2310      	movs	r3, #16
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f91e 	bl	80020f6 <BQ79614_Read>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (status != HAL_OK) return status;
 8001ec0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <BQ79614_UpdateData+0xfe>
 8001ec8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001ecc:	e04d      	b.n	8001f6a <BQ79614_UpdateData+0x19a>
    for (size_t i = 0; i < BQ79614_STACK_SIZE; i++) {
 8001ece:	2300      	movs	r3, #0
 8001ed0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001ed2:	e046      	b.n	8001f62 <BQ79614_UpdateData+0x192>
        for (size_t j = 0; j < BQ79614_TEMP_COUNT; j++) {
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ed8:	e03d      	b.n	8001f56 <BQ79614_UpdateData+0x186>
            uint16_t raw = (temp_data[i * BQ79614_TEMP_COUNT * 2 + j * 2] << 8) | temp_data[i * BQ79614_TEMP_COUNT * 2 + j * 2 + 1];
 8001eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001edc:	00da      	lsls	r2, r3, #3
 8001ede:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ee0:	4413      	add	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	3378      	adds	r3, #120	@ 0x78
 8001ee6:	443b      	add	r3, r7
 8001ee8:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ef2:	00d9      	lsls	r1, r3, #3
 8001ef4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ef6:	440b      	add	r3, r1
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	3301      	adds	r3, #1
 8001efc:	3378      	adds	r3, #120	@ 0x78
 8001efe:	443b      	add	r3, r7
 8001f00:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	4313      	orrs	r3, r2
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
            dev->stack_device_data[i].temperatures[j] = raw * BQ79614_V_LSB_ADC * 1000000.0 / 1000.0; // Assuming temperature in mV, scaled to degC
 8001f0e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f1a:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8001f78 <BQ79614_UpdateData+0x1a8>
 8001f1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f22:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8001f80 <BQ79614_UpdateData+0x1b0>
 8001f26:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f2a:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8001f88 <BQ79614_UpdateData+0x1b8>
 8001f2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f3a:	2116      	movs	r1, #22
 8001f3c:	fb03 f101 	mul.w	r1, r3, r1
 8001f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f42:	440b      	add	r3, r1
 8001f44:	33bc      	adds	r3, #188	@ 0xbc
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	edc3 7a00 	vstr	s15, [r3]
        for (size_t j = 0; j < BQ79614_TEMP_COUNT; j++) {
 8001f50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f52:	3301      	adds	r3, #1
 8001f54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f58:	2b07      	cmp	r3, #7
 8001f5a:	d9be      	bls.n	8001eda <BQ79614_UpdateData+0x10a>
    for (size_t i = 0; i < BQ79614_STACK_SIZE; i++) {
 8001f5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f5e:	3301      	adds	r3, #1
 8001f60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001f62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d9b5      	bls.n	8001ed4 <BQ79614_UpdateData+0x104>
        }
    }
    return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3778      	adds	r7, #120	@ 0x78
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	f3af 8000 	nop.w
 8001f78:	39880bfe 	.word	0x39880bfe
 8001f7c:	3f28ffd6 	.word	0x3f28ffd6
 8001f80:	00000000 	.word	0x00000000
 8001f84:	412e8480 	.word	0x412e8480
 8001f88:	00000000 	.word	0x00000000
 8001f8c:	408f4000 	.word	0x408f4000

08001f90 <BQ79614_WakeUp>:

HAL_StatusTypeDef BQ79614_WakeUp(BQ79614_Device *dev) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef *huart = dev->huart;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
    huart->Init.BaudRate = BQ79614_BAUDRATE_WAKEUP;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f640 1203 	movw	r2, #2307	@ 0x903
 8001fa4:	605a      	str	r2, [r3, #4]
    if (HAL_UART_Init(huart) != HAL_OK) return HAL_ERROR;
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f007 ffa0 	bl	8009eec <HAL_UART_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <BQ79614_WakeUp+0x26>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e01e      	b.n	8001ff4 <BQ79614_WakeUp+0x64>
    uint8_t wake_data = 0x00;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	72fb      	strb	r3, [r7, #11]
    if (HAL_UART_Transmit(dev->huart, &wake_data, 1, 1000) != HAL_OK) return HAL_ERROR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	f107 010b 	add.w	r1, r7, #11
 8001fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f007 ffe0 	bl	8009f8c <HAL_UART_Transmit>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <BQ79614_WakeUp+0x46>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00e      	b.n	8001ff4 <BQ79614_WakeUp+0x64>
    vTaskDelay(pdMS_TO_TICKS(3));
 8001fd6:	2003      	movs	r0, #3
 8001fd8:	f00d fe06 	bl	800fbe8 <vTaskDelay>
    huart->Init.BaudRate = BQ79614_DEFAULT_BAUDRATE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4a07      	ldr	r2, [pc, #28]	@ (8001ffc <BQ79614_WakeUp+0x6c>)
 8001fe0:	605a      	str	r2, [r3, #4]
    if (HAL_UART_Init(huart) != HAL_OK) return HAL_ERROR;
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f007 ff82 	bl	8009eec <HAL_UART_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <BQ79614_WakeUp+0x62>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <BQ79614_WakeUp+0x64>
    return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	000f4240 	.word	0x000f4240

08002000 <BQ79614_Write>:

HAL_StatusTypeDef BQ79614_Write(BQ79614_Device *dev, BQ79614_ReqType req_type, uint8_t *data, size_t size, uint16_t reg_address, uint8_t address) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	460b      	mov	r3, r1
 800200e:	72fb      	strb	r3, [r7, #11]
    if (size > 8) return HAL_ERROR;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	2b08      	cmp	r3, #8
 8002014:	d901      	bls.n	800201a <BQ79614_Write+0x1a>
 8002016:	2301      	movs	r3, #1
 8002018:	e069      	b.n	80020ee <BQ79614_Write+0xee>
    if (xSemaphoreTake(dev->semaphore, pdMS_TO_TICKS(1000)) != pdTRUE) return HAL_BUSY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002022:	4618      	mov	r0, r3
 8002024:	f00d f98c 	bl	800f340 <xQueueSemaphoreTake>
 8002028:	4603      	mov	r3, r0
 800202a:	2b01      	cmp	r3, #1
 800202c:	d001      	beq.n	8002032 <BQ79614_Write+0x32>
 800202e:	2302      	movs	r3, #2
 8002030:	e05d      	b.n	80020ee <BQ79614_Write+0xee>
    dev->out[0] = BQ79614_InitByteWrite(dev, req_type, size);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	7afb      	ldrb	r3, [r7, #11]
 8002038:	4619      	mov	r1, r3
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f7ff fbc9 	bl	80017d2 <BQ79614_InitByteWrite>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	731a      	strb	r2, [r3, #12]
    dev->out[1] = address;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800204e:	735a      	strb	r2, [r3, #13]
    dev->out[2] = (reg_address >> 8) & 0xFF;
 8002050:	8c3b      	ldrh	r3, [r7, #32]
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	b29b      	uxth	r3, r3
 8002056:	b2da      	uxtb	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	739a      	strb	r2, [r3, #14]
    dev->out[3] = reg_address & 0xFF;
 800205c:	8c3b      	ldrh	r3, [r7, #32]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	73da      	strb	r2, [r3, #15]
    memcpy(&dev->out[4], data, size);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	3310      	adds	r3, #16
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4618      	mov	r0, r3
 800206e:	f010 f971 	bl	8012354 <memcpy>
    uint16_t crc = CRC16_Fast(dev->out, 4 + size);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f103 020c 	add.w	r2, r3, #12
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	3304      	adds	r3, #4
 800207c:	4619      	mov	r1, r3
 800207e:	4610      	mov	r0, r2
 8002080:	f000 f976 	bl	8002370 <CRC16_Fast>
 8002084:	4603      	mov	r3, r0
 8002086:	82fb      	strh	r3, [r7, #22]
    dev->out[4 + size] = (crc >> 8) & 0xFF;
 8002088:	8afb      	ldrh	r3, [r7, #22]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	b29a      	uxth	r2, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	3304      	adds	r3, #4
 8002092:	b2d1      	uxtb	r1, r2
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	460a      	mov	r2, r1
 800209a:	731a      	strb	r2, [r3, #12]
    dev->out[5 + size] = crc & 0xFF;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	3305      	adds	r3, #5
 80020a0:	8afa      	ldrh	r2, [r7, #22]
 80020a2:	b2d1      	uxtb	r1, r2
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	460a      	mov	r2, r1
 80020aa:	731a      	strb	r2, [r3, #12]
    if (HAL_UART_Transmit(dev->huart, dev->out, 6 + size, 1000) != HAL_OK) {
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f103 010c 	add.w	r1, r3, #12
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3306      	adds	r3, #6
 80020bc:	b29a      	uxth	r2, r3
 80020be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020c2:	f007 ff63 	bl	8009f8c <HAL_UART_Transmit>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <BQ79614_Write+0xde>
        xSemaphoreGive(dev->semaphore);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6858      	ldr	r0, [r3, #4]
 80020d0:	2300      	movs	r3, #0
 80020d2:	2200      	movs	r2, #0
 80020d4:	2100      	movs	r1, #0
 80020d6:	f00c feb1 	bl	800ee3c <xQueueGenericSend>
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e007      	b.n	80020ee <BQ79614_Write+0xee>
    }
    xSemaphoreGive(dev->semaphore);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6858      	ldr	r0, [r3, #4]
 80020e2:	2300      	movs	r3, #0
 80020e4:	2200      	movs	r2, #0
 80020e6:	2100      	movs	r1, #0
 80020e8:	f00c fea8 	bl	800ee3c <xQueueGenericSend>
    return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <BQ79614_Read>:

HAL_StatusTypeDef BQ79614_Read(BQ79614_Device *dev, BQ79614_ReqType req_type, uint8_t *data, size_t count, uint16_t reg_address, uint8_t address) {
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b08a      	sub	sp, #40	@ 0x28
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
 8002102:	460b      	mov	r3, r1
 8002104:	72fb      	strb	r3, [r7, #11]
    if (xSemaphoreTake(dev->semaphore, pdMS_TO_TICKS(1000)) != pdTRUE) return HAL_BUSY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800210e:	4618      	mov	r0, r3
 8002110:	f00d f916 	bl	800f340 <xQueueSemaphoreTake>
 8002114:	4603      	mov	r3, r0
 8002116:	2b01      	cmp	r3, #1
 8002118:	d001      	beq.n	800211e <BQ79614_Read+0x28>
 800211a:	2302      	movs	r3, #2
 800211c:	e0b7      	b.n	800228e <BQ79614_Read+0x198>
    size_t read_count = (req_type == BQ79614_REQ_SINGLE) ? 1 : BQ79614_STACK_SIZE;
 800211e:	7afb      	ldrb	r3, [r7, #11]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <BQ79614_Read+0x32>
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <BQ79614_Read+0x34>
 8002128:	2302      	movs	r3, #2
 800212a:	623b      	str	r3, [r7, #32]
    size_t total_bytes = count * read_count;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	6a3a      	ldr	r2, [r7, #32]
 8002130:	fb02 f303 	mul.w	r3, r2, r3
 8002134:	61fb      	str	r3, [r7, #28]
    dev->out[0] = BQ79614_InitByteRead(dev, req_type);
 8002136:	7afb      	ldrb	r3, [r7, #11]
 8002138:	4619      	mov	r1, r3
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f7ff fb6e 	bl	800181c <BQ79614_InitByteRead>
 8002140:	4603      	mov	r3, r0
 8002142:	461a      	mov	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	731a      	strb	r2, [r3, #12]
    dev->out[1] = address;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800214e:	735a      	strb	r2, [r3, #13]
    dev->out[2] = (reg_address >> 8) & 0xFF;
 8002150:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	b29b      	uxth	r3, r3
 8002156:	b2da      	uxtb	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	739a      	strb	r2, [r3, #14]
    dev->out[3] = reg_address & 0xFF;
 800215c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800215e:	b2da      	uxtb	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	73da      	strb	r2, [r3, #15]
    dev->out[4] = (count - 1) & 0xFF;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	3b01      	subs	r3, #1
 800216a:	b2da      	uxtb	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	741a      	strb	r2, [r3, #16]
    uint16_t crc = CRC16_Fast(dev->out, 5);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	330c      	adds	r3, #12
 8002174:	2105      	movs	r1, #5
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f8fa 	bl	8002370 <CRC16_Fast>
 800217c:	4603      	mov	r3, r0
 800217e:	837b      	strh	r3, [r7, #26]
    dev->out[5] = (crc >> 8) & 0xFF;
 8002180:	8b7b      	ldrh	r3, [r7, #26]
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	b29b      	uxth	r3, r3
 8002186:	b2da      	uxtb	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	745a      	strb	r2, [r3, #17]
    dev->out[6] = crc & 0xFF;
 800218c:	8b7b      	ldrh	r3, [r7, #26]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	749a      	strb	r2, [r3, #18]
    if (HAL_UART_Transmit(dev->huart, dev->out, 7, 1000) != HAL_OK) {
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f103 010c 	add.w	r1, r3, #12
 800219e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021a2:	2207      	movs	r2, #7
 80021a4:	f007 fef2 	bl	8009f8c <HAL_UART_Transmit>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <BQ79614_Read+0xca>
        xSemaphoreGive(dev->semaphore);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6858      	ldr	r0, [r3, #4]
 80021b2:	2300      	movs	r3, #0
 80021b4:	2200      	movs	r2, #0
 80021b6:	2100      	movs	r1, #0
 80021b8:	f00c fe40 	bl	800ee3c <xQueueGenericSend>
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e066      	b.n	800228e <BQ79614_Read+0x198>
    }
    dev->read_size = total_bytes + 2 * read_count; // Data + CRC per device
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	005a      	lsls	r2, r3, #1
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	441a      	add	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	609a      	str	r2, [r3, #8]
    if (HAL_UART_Receive(dev->huart, dev->in, dev->read_size, 1000) != HAL_OK) {
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f503 7186 	add.w	r1, r3, #268	@ 0x10c
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	b29a      	uxth	r2, r3
 80021dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021e0:	f007 ff62 	bl	800a0a8 <HAL_UART_Receive>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <BQ79614_Read+0x106>
        xSemaphoreGive(dev->semaphore);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6858      	ldr	r0, [r3, #4]
 80021ee:	2300      	movs	r3, #0
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	f00c fe22 	bl	800ee3c <xQueueGenericSend>
        return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e048      	b.n	800228e <BQ79614_Read+0x198>
    }
    for (size_t i = 0; i < read_count; i++) {
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002200:	e039      	b.n	8002276 <BQ79614_Read+0x180>
        uint8_t *chunk = &dev->in[i * (count + 2)];
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	3302      	adds	r3, #2
 8002206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002208:	fb02 f303 	mul.w	r3, r2, r3
 800220c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4413      	add	r3, r2
 8002214:	3304      	adds	r3, #4
 8002216:	617b      	str	r3, [r7, #20]
        uint16_t received_crc = (chunk[count] << 8) | chunk[count + 1];
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	4413      	add	r3, r2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	b21a      	sxth	r2, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	3301      	adds	r3, #1
 8002228:	6979      	ldr	r1, [r7, #20]
 800222a:	440b      	add	r3, r1
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	b21b      	sxth	r3, r3
 8002230:	4313      	orrs	r3, r2
 8002232:	b21b      	sxth	r3, r3
 8002234:	827b      	strh	r3, [r7, #18]
        if (CRC16_Fast(chunk, count) != received_crc) {
 8002236:	6839      	ldr	r1, [r7, #0]
 8002238:	6978      	ldr	r0, [r7, #20]
 800223a:	f000 f899 	bl	8002370 <CRC16_Fast>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	8a7b      	ldrh	r3, [r7, #18]
 8002244:	4293      	cmp	r3, r2
 8002246:	d008      	beq.n	800225a <BQ79614_Read+0x164>
            xSemaphoreGive(dev->semaphore);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6858      	ldr	r0, [r3, #4]
 800224c:	2300      	movs	r3, #0
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	f00c fdf3 	bl	800ee3c <xQueueGenericSend>
            return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e019      	b.n	800228e <BQ79614_Read+0x198>
        }
        memcpy(&data[i * count], chunk, count);
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	6979      	ldr	r1, [r7, #20]
 800226a:	4618      	mov	r0, r3
 800226c:	f010 f872 	bl	8012354 <memcpy>
    for (size_t i = 0; i < read_count; i++) {
 8002270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002272:	3301      	adds	r3, #1
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
 8002276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	429a      	cmp	r2, r3
 800227c:	d3c1      	bcc.n	8002202 <BQ79614_Read+0x10c>
    }
    xSemaphoreGive(dev->semaphore);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6858      	ldr	r0, [r3, #4]
 8002282:	2300      	movs	r3, #0
 8002284:	2200      	movs	r2, #0
 8002286:	2100      	movs	r1, #0
 8002288:	f00c fdd8 	bl	800ee3c <xQueueGenericSend>
    return HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	4618      	mov	r0, r3
 8002290:	3728      	adds	r7, #40	@ 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <CRC16_Init>:
#include "crc16ibm.h"
#include <string.h>

void CRC16_Init(CRC16 *crc) {
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	@ 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
    uint16_t remainder;
    for (size_t dividend = 0; dividend < 256; ++dividend) {
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
 80022a4:	e023      	b.n	80022ee <CRC16_Init+0x56>
        remainder = dividend << 8;
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	83fb      	strh	r3, [r7, #30]
        for (uint8_t bit = 8; bit > 0; --bit) {
 80022ae:	2308      	movs	r3, #8
 80022b0:	75fb      	strb	r3, [r7, #23]
 80022b2:	e011      	b.n	80022d8 <CRC16_Init+0x40>
            if (remainder & 0x8000) remainder = (remainder << 1) ^ 0x8005;
 80022b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	da07      	bge.n	80022cc <CRC16_Init+0x34>
 80022bc:	8bfb      	ldrh	r3, [r7, #30]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	b21a      	sxth	r2, r3
 80022c2:	4b2a      	ldr	r3, [pc, #168]	@ (800236c <CRC16_Init+0xd4>)
 80022c4:	4053      	eors	r3, r2
 80022c6:	b21b      	sxth	r3, r3
 80022c8:	83fb      	strh	r3, [r7, #30]
 80022ca:	e002      	b.n	80022d2 <CRC16_Init+0x3a>
            else remainder = (remainder << 1);
 80022cc:	8bfb      	ldrh	r3, [r7, #30]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	83fb      	strh	r3, [r7, #30]
        for (uint8_t bit = 8; bit > 0; --bit) {
 80022d2:	7dfb      	ldrb	r3, [r7, #23]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	75fb      	strb	r3, [r7, #23]
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1ea      	bne.n	80022b4 <CRC16_Init+0x1c>
        }
        crc->crc16lut[dividend] = remainder;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	8bf9      	ldrh	r1, [r7, #30]
 80022e4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (size_t dividend = 0; dividend < 256; ++dividend) {
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	3301      	adds	r3, #1
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	2bff      	cmp	r3, #255	@ 0xff
 80022f2:	d9d8      	bls.n	80022a6 <CRC16_Init+0xe>
    }
    for (size_t i = 0; i < 256; i++) {
 80022f4:	2300      	movs	r3, #0
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e02a      	b.n	8002350 <CRC16_Init+0xb8>
        uint8_t data = i;
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	73fb      	strb	r3, [r7, #15]
        uint8_t reflection = 0x00;
 80022fe:	2300      	movs	r3, #0
 8002300:	73bb      	strb	r3, [r7, #14]
        for (uint8_t bit = 0; bit < 8; bit++) {
 8002302:	2300      	movs	r3, #0
 8002304:	737b      	strb	r3, [r7, #13]
 8002306:	e016      	b.n	8002336 <CRC16_Init+0x9e>
            if (data & 0x01) reflection |= (1 << (7 - bit));
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <CRC16_Init+0x92>
 8002312:	7b7b      	ldrb	r3, [r7, #13]
 8002314:	f1c3 0307 	rsb	r3, r3, #7
 8002318:	2201      	movs	r2, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	b25a      	sxtb	r2, r3
 8002320:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002324:	4313      	orrs	r3, r2
 8002326:	b25b      	sxtb	r3, r3
 8002328:	73bb      	strb	r3, [r7, #14]
            data = (data >> 1);
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	085b      	lsrs	r3, r3, #1
 800232e:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++) {
 8002330:	7b7b      	ldrb	r3, [r7, #13]
 8002332:	3301      	adds	r3, #1
 8002334:	737b      	strb	r3, [r7, #13]
 8002336:	7b7b      	ldrb	r3, [r7, #13]
 8002338:	2b07      	cmp	r3, #7
 800233a:	d9e5      	bls.n	8002308 <CRC16_Init+0x70>
        }
        crc->crc16ref[i] = reflection;
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4413      	add	r3, r2
 8002342:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002346:	7bba      	ldrb	r2, [r7, #14]
 8002348:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < 256; i++) {
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	3301      	adds	r3, #1
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	2bff      	cmp	r3, #255	@ 0xff
 8002354:	d9d1      	bls.n	80022fa <CRC16_Init+0x62>
    }
    crc->is_init = 1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
}
 800235e:	bf00      	nop
 8002360:	3724      	adds	r7, #36	@ 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	ffff8005 	.word	0xffff8005

08002370 <CRC16_Fast>:

uint16_t CRC16_Fast(uint8_t *data, size_t size) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
    static CRC16 crc = { .is_init = 0 };
    if (!crc.is_init) CRC16_Init(&crc);
 800237a:	4b24      	ldr	r3, [pc, #144]	@ (800240c <CRC16_Fast+0x9c>)
 800237c:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <CRC16_Fast+0x1a>
 8002384:	4821      	ldr	r0, [pc, #132]	@ (800240c <CRC16_Fast+0x9c>)
 8002386:	f7ff ff87 	bl	8002298 <CRC16_Init>
    uint16_t crc_val = 0xFFFF;
 800238a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800238e:	82fb      	strh	r3, [r7, #22]
    for (size_t i = 0; i < size; ++i) {
 8002390:	2300      	movs	r3, #0
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	e01c      	b.n	80023d0 <CRC16_Fast+0x60>
        uint8_t tableIndex = (crc_val >> 8) ^ crc.crc16ref[data[i]];
 8002396:	8afb      	ldrh	r3, [r7, #22]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	b29b      	uxth	r3, r3
 800239c:	b2da      	uxtb	r2, r3
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	440b      	add	r3, r1
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	4619      	mov	r1, r3
 80023a8:	4b18      	ldr	r3, [pc, #96]	@ (800240c <CRC16_Fast+0x9c>)
 80023aa:	440b      	add	r3, r1
 80023ac:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80023b0:	4053      	eors	r3, r2
 80023b2:	73fb      	strb	r3, [r7, #15]
        crc_val = (crc_val << 8) ^ crc.crc16lut[tableIndex];
 80023b4:	8afb      	ldrh	r3, [r7, #22]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	b21a      	sxth	r2, r3
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	4913      	ldr	r1, [pc, #76]	@ (800240c <CRC16_Fast+0x9c>)
 80023be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80023c2:	b21b      	sxth	r3, r3
 80023c4:	4053      	eors	r3, r2
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	82fb      	strh	r3, [r7, #22]
    for (size_t i = 0; i < size; ++i) {
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	3301      	adds	r3, #1
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d3de      	bcc.n	8002396 <CRC16_Fast+0x26>
    }
    crc_val = crc.crc16ref[(crc_val >> 8)] << 8 | crc.crc16ref[(crc_val & 0xff)];
 80023d8:	8afb      	ldrh	r3, [r7, #22]
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	b29b      	uxth	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	4b0a      	ldr	r3, [pc, #40]	@ (800240c <CRC16_Fast+0x9c>)
 80023e2:	4413      	add	r3, r2
 80023e4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	8afb      	ldrh	r3, [r7, #22]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	4906      	ldr	r1, [pc, #24]	@ (800240c <CRC16_Fast+0x9c>)
 80023f2:	440b      	add	r3, r1
 80023f4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80023f8:	b21b      	sxth	r3, r3
 80023fa:	4313      	orrs	r3, r2
 80023fc:	b21b      	sxth	r3, r3
 80023fe:	82fb      	strh	r3, [r7, #22]
    return crc_val;
 8002400:	8afb      	ldrh	r3, [r7, #22]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	24000928 	.word	0x24000928

08002410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002416:	2003      	movs	r0, #3
 8002418:	f001 f9cd 	bl	80037b6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800241c:	f004 f984 	bl	8006728 <HAL_RCC_GetSysClockFreq>
 8002420:	4602      	mov	r2, r0
 8002422:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <HAL_Init+0x68>)
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	4913      	ldr	r1, [pc, #76]	@ (800247c <HAL_Init+0x6c>)
 800242e:	5ccb      	ldrb	r3, [r1, r3]
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
 8002438:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800243a:	4b0f      	ldr	r3, [pc, #60]	@ (8002478 <HAL_Init+0x68>)
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	4a0e      	ldr	r2, [pc, #56]	@ (800247c <HAL_Init+0x6c>)
 8002444:	5cd3      	ldrb	r3, [r2, r3]
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
 8002450:	4a0b      	ldr	r2, [pc, #44]	@ (8002480 <HAL_Init+0x70>)
 8002452:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002454:	4a0b      	ldr	r2, [pc, #44]	@ (8002484 <HAL_Init+0x74>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800245a:	200f      	movs	r0, #15
 800245c:	f7ff f878 	bl	8001550 <HAL_InitTick>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e002      	b.n	8002470 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800246a:	f7fe fe1d 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	58024400 	.word	0x58024400
 800247c:	08012550 	.word	0x08012550
 8002480:	24000004 	.word	0x24000004
 8002484:	24000000 	.word	0x24000000

08002488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800248c:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_IncTick+0x20>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_IncTick+0x24>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4413      	add	r3, r2
 8002498:	4a04      	ldr	r2, [pc, #16]	@ (80024ac <HAL_IncTick+0x24>)
 800249a:	6013      	str	r3, [r2, #0]
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	2400000c 	.word	0x2400000c
 80024ac:	24000c2c 	.word	0x24000c2c

080024b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return uwTick;
 80024b4:	4b03      	ldr	r3, [pc, #12]	@ (80024c4 <HAL_GetTick+0x14>)
 80024b6:	681b      	ldr	r3, [r3, #0]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	24000c2c 	.word	0x24000c2c

080024c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d0:	f7ff ffee 	bl	80024b0 <HAL_GetTick>
 80024d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e0:	d005      	beq.n	80024ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024e2:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <HAL_Delay+0x44>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4413      	add	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ee:	bf00      	nop
 80024f0:	f7ff ffde 	bl	80024b0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d8f7      	bhi.n	80024f0 <HAL_Delay+0x28>
  {
  }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2400000c 	.word	0x2400000c

08002510 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <HAL_GetREVID+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	0c1b      	lsrs	r3, r3, #16
}
 800251a:	4618      	mov	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	5c001000 	.word	0x5c001000

08002528 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	609a      	str	r2, [r3, #8]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3360      	adds	r3, #96	@ 0x60
 80025a2:	461a      	mov	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	430b      	orrs	r3, r1
 80025be:	431a      	orrs	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	fa01 f303 	lsl.w	r3, r1, r3
 80025f0:	431a      	orrs	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	611a      	str	r2, [r3, #16]
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002602:	b480      	push	{r7}
 8002604:	b087      	sub	sp, #28
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	3360      	adds	r3, #96	@ 0x60
 8002612:	461a      	mov	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	431a      	orrs	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	601a      	str	r2, [r3, #0]
  }
}
 800262c:	bf00      	nop
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3330      	adds	r3, #48	@ 0x30
 8002648:	461a      	mov	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	4413      	add	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	211f      	movs	r1, #31
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	401a      	ands	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	0e9b      	lsrs	r3, r3, #26
 8002670:	f003 011f 	and.w	r1, r3, #31
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	431a      	orrs	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002684:	bf00      	nop
 8002686:	371c      	adds	r7, #28
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3314      	adds	r3, #20
 80026a0:	461a      	mov	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	0e5b      	lsrs	r3, r3, #25
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	4413      	add	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	0d1b      	lsrs	r3, r3, #20
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	2107      	movs	r1, #7
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	401a      	ands	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	0d1b      	lsrs	r3, r3, #20
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	431a      	orrs	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002700:	43db      	mvns	r3, r3
 8002702:	401a      	ands	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0318 	and.w	r3, r3, #24
 800270a:	4908      	ldr	r1, [pc, #32]	@ (800272c <LL_ADC_SetChannelSingleDiff+0x44>)
 800270c:	40d9      	lsrs	r1, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	400b      	ands	r3, r1
 8002712:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002716:	431a      	orrs	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	000fffff 	.word	0x000fffff

08002730 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <LL_ADC_DisableDeepPowerDown+0x20>)
 800273e:	4013      	ands	r3, r2
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6093      	str	r3, [r2, #8]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	5fffffc0 	.word	0x5fffffc0

08002754 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002768:	d101      	bne.n	800276e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800278a:	4013      	ands	r3, r2
 800278c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	6fffffc0 	.word	0x6fffffc0

080027a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027b8:	d101      	bne.n	80027be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <LL_ADC_IsEnabled+0x18>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <LL_ADC_IsEnabled+0x1a>
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b04      	cmp	r3, #4
 8002804:	d101      	bne.n	800280a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b08      	cmp	r3, #8
 800282a:	d101      	bne.n	8002830 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b089      	sub	sp, #36	@ 0x24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800284c:	2300      	movs	r3, #0
 800284e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e18f      	b.n	8002b7a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7fe fc3b 	bl	80010e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff67 	bl	8002754 <LL_ADC_IsDeepPowerDownEnabled>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d004      	beq.n	8002896 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff4d 	bl	8002730 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff ff82 	bl	80027a4 <LL_ADC_IsInternalRegulatorEnabled>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d114      	bne.n	80028d0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff ff66 	bl	800277c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028b0:	4b87      	ldr	r3, [pc, #540]	@ (8002ad0 <HAL_ADC_Init+0x290>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	099b      	lsrs	r3, r3, #6
 80028b6:	4a87      	ldr	r2, [pc, #540]	@ (8002ad4 <HAL_ADC_Init+0x294>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	099b      	lsrs	r3, r3, #6
 80028be:	3301      	adds	r3, #1
 80028c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80028c2:	e002      	b.n	80028ca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f9      	bne.n	80028c4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff65 	bl	80027a4 <LL_ADC_IsInternalRegulatorEnabled>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10d      	bne.n	80028fc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e4:	f043 0210 	orr.w	r2, r3, #16
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f0:	f043 0201 	orr.w	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff76 	bl	80027f2 <LL_ADC_REG_IsConversionOngoing>
 8002906:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b00      	cmp	r3, #0
 8002912:	f040 8129 	bne.w	8002b68 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b00      	cmp	r3, #0
 800291a:	f040 8125 	bne.w	8002b68 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002922:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002926:	f043 0202 	orr.w	r2, r3, #2
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ff4a 	bl	80027cc <LL_ADC_IsEnabled>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d136      	bne.n	80029ac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a65      	ldr	r2, [pc, #404]	@ (8002ad8 <HAL_ADC_Init+0x298>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d004      	beq.n	8002952 <HAL_ADC_Init+0x112>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a63      	ldr	r2, [pc, #396]	@ (8002adc <HAL_ADC_Init+0x29c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10e      	bne.n	8002970 <HAL_ADC_Init+0x130>
 8002952:	4861      	ldr	r0, [pc, #388]	@ (8002ad8 <HAL_ADC_Init+0x298>)
 8002954:	f7ff ff3a 	bl	80027cc <LL_ADC_IsEnabled>
 8002958:	4604      	mov	r4, r0
 800295a:	4860      	ldr	r0, [pc, #384]	@ (8002adc <HAL_ADC_Init+0x29c>)
 800295c:	f7ff ff36 	bl	80027cc <LL_ADC_IsEnabled>
 8002960:	4603      	mov	r3, r0
 8002962:	4323      	orrs	r3, r4
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	e008      	b.n	8002982 <HAL_ADC_Init+0x142>
 8002970:	485b      	ldr	r0, [pc, #364]	@ (8002ae0 <HAL_ADC_Init+0x2a0>)
 8002972:	f7ff ff2b 	bl	80027cc <LL_ADC_IsEnabled>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d012      	beq.n	80029ac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a53      	ldr	r2, [pc, #332]	@ (8002ad8 <HAL_ADC_Init+0x298>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d004      	beq.n	800299a <HAL_ADC_Init+0x15a>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a51      	ldr	r2, [pc, #324]	@ (8002adc <HAL_ADC_Init+0x29c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_ADC_Init+0x15e>
 800299a:	4a52      	ldr	r2, [pc, #328]	@ (8002ae4 <HAL_ADC_Init+0x2a4>)
 800299c:	e000      	b.n	80029a0 <HAL_ADC_Init+0x160>
 800299e:	4a52      	ldr	r2, [pc, #328]	@ (8002ae8 <HAL_ADC_Init+0x2a8>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f7ff fdbe 	bl	8002528 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80029ac:	f7ff fdb0 	bl	8002510 <HAL_GetREVID>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d914      	bls.n	80029e4 <HAL_ADC_Init+0x1a4>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b10      	cmp	r3, #16
 80029c0:	d110      	bne.n	80029e4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7d5b      	ldrb	r3, [r3, #21]
 80029c6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029cc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80029d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7f1b      	ldrb	r3, [r3, #28]
 80029d8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80029da:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029dc:	f043 030c 	orr.w	r3, r3, #12
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	e00d      	b.n	8002a00 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	7d5b      	ldrb	r3, [r3, #21]
 80029e8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029ee:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80029f4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7f1b      	ldrb	r3, [r3, #28]
 80029fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	7f1b      	ldrb	r3, [r3, #28]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d106      	bne.n	8002a16 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	045b      	lsls	r3, r3, #17
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	4b2c      	ldr	r3, [pc, #176]	@ (8002aec <HAL_ADC_Init+0x2ac>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	69b9      	ldr	r1, [r7, #24]
 8002a42:	430b      	orrs	r3, r1
 8002a44:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fed1 	bl	80027f2 <LL_ADC_REG_IsConversionOngoing>
 8002a50:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fede 	bl	8002818 <LL_ADC_INJ_IsConversionOngoing>
 8002a5c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d15f      	bne.n	8002b24 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d15c      	bne.n	8002b24 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7d1b      	ldrb	r3, [r3, #20]
 8002a6e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002af0 <HAL_ADC_Init+0x2b0>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	69b9      	ldr	r1, [r7, #24]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d130      	bne.n	8002af8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	4b14      	ldr	r3, [pc, #80]	@ (8002af4 <HAL_ADC_Init+0x2b4>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002aaa:	3a01      	subs	r2, #1
 8002aac:	0411      	lsls	r1, r2, #16
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ab2:	4311      	orrs	r1, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002ab8:	4311      	orrs	r1, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	611a      	str	r2, [r3, #16]
 8002acc:	e01c      	b.n	8002b08 <HAL_ADC_Init+0x2c8>
 8002ace:	bf00      	nop
 8002ad0:	24000000 	.word	0x24000000
 8002ad4:	053e2d63 	.word	0x053e2d63
 8002ad8:	40022000 	.word	0x40022000
 8002adc:	40022100 	.word	0x40022100
 8002ae0:	58026000 	.word	0x58026000
 8002ae4:	40022300 	.word	0x40022300
 8002ae8:	58026300 	.word	0x58026300
 8002aec:	fff0c003 	.word	0xfff0c003
 8002af0:	ffffbffc 	.word	0xffffbffc
 8002af4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0201 	bic.w	r2, r2, #1
 8002b06:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fb8c 	bl	800323c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d10c      	bne.n	8002b46 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	f023 010f 	bic.w	r1, r3, #15
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	1e5a      	subs	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b44:	e007      	b.n	8002b56 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 020f 	bic.w	r2, r2, #15
 8002b54:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b66:	e007      	b.n	8002b78 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6c:	f043 0210 	orr.w	r2, r3, #16
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b78:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3724      	adds	r7, #36	@ 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd90      	pop	{r4, r7, pc}
 8002b82:	bf00      	nop

08002b84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b0a1      	sub	sp, #132	@ 0x84
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4a65      	ldr	r2, [pc, #404]	@ (8002d34 <HAL_ADC_ConfigChannel+0x1b0>)
 8002b9e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x2a>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e32e      	b.n	800320c <HAL_ADC_ConfigChannel+0x688>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fe19 	bl	80027f2 <LL_ADC_REG_IsConversionOngoing>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 8313 	bne.w	80031ee <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	db2c      	blt.n	8002c2a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d108      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x6a>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0e9b      	lsrs	r3, r3, #26
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	2201      	movs	r2, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	e016      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x98>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bfc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bfe:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002c06:	2320      	movs	r3, #32
 8002c08:	e003      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002c0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	2201      	movs	r2, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	69d1      	ldr	r1, [r2, #28]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	430b      	orrs	r3, r1
 8002c28:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6859      	ldr	r1, [r3, #4]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f7ff fcfe 	bl	8002638 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fdd6 	bl	80027f2 <LL_ADC_REG_IsConversionOngoing>
 8002c46:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fde3 	bl	8002818 <LL_ADC_INJ_IsConversionOngoing>
 8002c52:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 80b8 	bne.w	8002dcc <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f040 80b4 	bne.w	8002dcc <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6819      	ldr	r1, [r3, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	461a      	mov	r2, r3
 8002c72:	f7ff fd0d 	bl	8002690 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c76:	4b30      	ldr	r3, [pc, #192]	@ (8002d38 <HAL_ADC_ConfigChannel+0x1b4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002c7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c82:	d10b      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x118>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	e01d      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x154>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10b      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x13e>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	089b      	lsrs	r3, r3, #2
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	e00a      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x154>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d02c      	beq.n	8002d3c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6919      	ldr	r1, [r3, #16]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cf0:	f7ff fc4e 	bl	8002590 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	6919      	ldr	r1, [r3, #16]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	7e5b      	ldrb	r3, [r3, #25]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d102      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x186>
 8002d04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002d08:	e000      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x188>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f7ff fc78 	bl	8002602 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6919      	ldr	r1, [r3, #16]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	7e1b      	ldrb	r3, [r3, #24]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d102      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x1a4>
 8002d22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d26:	e000      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1a6>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f7ff fc50 	bl	80025d0 <LL_ADC_SetDataRightShift>
 8002d30:	e04c      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x248>
 8002d32:	bf00      	nop
 8002d34:	47ff0000 	.word	0x47ff0000
 8002d38:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	069b      	lsls	r3, r3, #26
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d107      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d5e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	069b      	lsls	r3, r3, #26
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d107      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d82:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	069b      	lsls	r3, r3, #26
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d107      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002da6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	069b      	lsls	r3, r3, #26
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d107      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002dca:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fcfb 	bl	80027cc <LL_ADC_IsEnabled>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f040 8211 	bne.w	8003200 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	6819      	ldr	r1, [r3, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	461a      	mov	r2, r3
 8002dec:	f7ff fc7c 	bl	80026e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4aa1      	ldr	r2, [pc, #644]	@ (800307c <HAL_ADC_ConfigChannel+0x4f8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	f040 812e 	bne.w	8003058 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10b      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x2a0>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	0e9b      	lsrs	r3, r3, #26
 8002e12:	3301      	adds	r3, #1
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	2b09      	cmp	r3, #9
 8002e1a:	bf94      	ite	ls
 8002e1c:	2301      	movls	r3, #1
 8002e1e:	2300      	movhi	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	e019      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x2d4>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002e36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002e3c:	2320      	movs	r3, #32
 8002e3e:	e003      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002e40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	3301      	adds	r3, #1
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	2b09      	cmp	r3, #9
 8002e50:	bf94      	ite	ls
 8002e52:	2301      	movls	r3, #1
 8002e54:	2300      	movhi	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d079      	beq.n	8002f50 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d107      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x2f4>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	0e9b      	lsrs	r3, r3, #26
 8002e6e:	3301      	adds	r3, #1
 8002e70:	069b      	lsls	r3, r3, #26
 8002e72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e76:	e015      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x320>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e80:	fa93 f3a3 	rbit	r3, r3
 8002e84:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e88:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002e90:	2320      	movs	r3, #32
 8002e92:	e003      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	069b      	lsls	r3, r3, #26
 8002ea0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d109      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x340>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0e9b      	lsrs	r3, r3, #26
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec2:	e017      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x370>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ed4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002edc:	2320      	movs	r3, #32
 8002ede:	e003      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2101      	movs	r1, #1
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	ea42 0103 	orr.w	r1, r2, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x396>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	0e9b      	lsrs	r3, r3, #26
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	051b      	lsls	r3, r3, #20
 8002f18:	e018      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x3c8>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f22:	fa93 f3a3 	rbit	r3, r3
 8002f26:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002f32:	2320      	movs	r3, #32
 8002f34:	e003      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f003 021f 	and.w	r2, r3, #31
 8002f44:	4613      	mov	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4413      	add	r3, r2
 8002f4a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	e07e      	b.n	800304e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d107      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x3e8>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	0e9b      	lsrs	r3, r3, #26
 8002f62:	3301      	adds	r3, #1
 8002f64:	069b      	lsls	r3, r3, #26
 8002f66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f6a:	e015      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x414>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002f84:	2320      	movs	r3, #32
 8002f86:	e003      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	069b      	lsls	r3, r3, #26
 8002f94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x434>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	0e9b      	lsrs	r3, r3, #26
 8002faa:	3301      	adds	r3, #1
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb6:	e017      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x464>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa93 f3a3 	rbit	r3, r3
 8002fc4:	61bb      	str	r3, [r7, #24]
  return result;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	e003      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f003 031f 	and.w	r3, r3, #31
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe8:	ea42 0103 	orr.w	r1, r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10d      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x490>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	0e9b      	lsrs	r3, r3, #26
 8002ffe:	3301      	adds	r3, #1
 8003000:	f003 021f 	and.w	r2, r3, #31
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	3b1e      	subs	r3, #30
 800300c:	051b      	lsls	r3, r3, #20
 800300e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003012:	e01b      	b.n	800304c <HAL_ADC_ConfigChannel+0x4c8>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	60fb      	str	r3, [r7, #12]
  return result;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800302c:	2320      	movs	r3, #32
 800302e:	e003      	b.n	8003038 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	3301      	adds	r3, #1
 800303a:	f003 021f 	and.w	r2, r3, #31
 800303e:	4613      	mov	r3, r2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	4413      	add	r3, r2
 8003044:	3b1e      	subs	r3, #30
 8003046:	051b      	lsls	r3, r3, #20
 8003048:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800304c:	430b      	orrs	r3, r1
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	6892      	ldr	r2, [r2, #8]
 8003052:	4619      	mov	r1, r3
 8003054:	f7ff fb1c 	bl	8002690 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f280 80cf 	bge.w	8003200 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a06      	ldr	r2, [pc, #24]	@ (8003080 <HAL_ADC_ConfigChannel+0x4fc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_ADC_ConfigChannel+0x4f2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a04      	ldr	r2, [pc, #16]	@ (8003084 <HAL_ADC_ConfigChannel+0x500>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d10a      	bne.n	800308c <HAL_ADC_ConfigChannel+0x508>
 8003076:	4b04      	ldr	r3, [pc, #16]	@ (8003088 <HAL_ADC_ConfigChannel+0x504>)
 8003078:	e009      	b.n	800308e <HAL_ADC_ConfigChannel+0x50a>
 800307a:	bf00      	nop
 800307c:	47ff0000 	.word	0x47ff0000
 8003080:	40022000 	.word	0x40022000
 8003084:	40022100 	.word	0x40022100
 8003088:	40022300 	.word	0x40022300
 800308c:	4b61      	ldr	r3, [pc, #388]	@ (8003214 <HAL_ADC_ConfigChannel+0x690>)
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fa70 	bl	8002574 <LL_ADC_GetCommonPathInternalCh>
 8003094:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a5f      	ldr	r2, [pc, #380]	@ (8003218 <HAL_ADC_ConfigChannel+0x694>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d004      	beq.n	80030aa <HAL_ADC_ConfigChannel+0x526>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a5d      	ldr	r2, [pc, #372]	@ (800321c <HAL_ADC_ConfigChannel+0x698>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d10e      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x544>
 80030aa:	485b      	ldr	r0, [pc, #364]	@ (8003218 <HAL_ADC_ConfigChannel+0x694>)
 80030ac:	f7ff fb8e 	bl	80027cc <LL_ADC_IsEnabled>
 80030b0:	4604      	mov	r4, r0
 80030b2:	485a      	ldr	r0, [pc, #360]	@ (800321c <HAL_ADC_ConfigChannel+0x698>)
 80030b4:	f7ff fb8a 	bl	80027cc <LL_ADC_IsEnabled>
 80030b8:	4603      	mov	r3, r0
 80030ba:	4323      	orrs	r3, r4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e008      	b.n	80030da <HAL_ADC_ConfigChannel+0x556>
 80030c8:	4855      	ldr	r0, [pc, #340]	@ (8003220 <HAL_ADC_ConfigChannel+0x69c>)
 80030ca:	f7ff fb7f 	bl	80027cc <LL_ADC_IsEnabled>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d07d      	beq.n	80031da <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a50      	ldr	r2, [pc, #320]	@ (8003224 <HAL_ADC_ConfigChannel+0x6a0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d130      	bne.n	800314a <HAL_ADC_ConfigChannel+0x5c6>
 80030e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d12b      	bne.n	800314a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a4a      	ldr	r2, [pc, #296]	@ (8003220 <HAL_ADC_ConfigChannel+0x69c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	f040 8081 	bne.w	8003200 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a45      	ldr	r2, [pc, #276]	@ (8003218 <HAL_ADC_ConfigChannel+0x694>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_ADC_ConfigChannel+0x58e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a43      	ldr	r2, [pc, #268]	@ (800321c <HAL_ADC_ConfigChannel+0x698>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x592>
 8003112:	4a45      	ldr	r2, [pc, #276]	@ (8003228 <HAL_ADC_ConfigChannel+0x6a4>)
 8003114:	e000      	b.n	8003118 <HAL_ADC_ConfigChannel+0x594>
 8003116:	4a3f      	ldr	r2, [pc, #252]	@ (8003214 <HAL_ADC_ConfigChannel+0x690>)
 8003118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800311a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800311e:	4619      	mov	r1, r3
 8003120:	4610      	mov	r0, r2
 8003122:	f7ff fa14 	bl	800254e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003126:	4b41      	ldr	r3, [pc, #260]	@ (800322c <HAL_ADC_ConfigChannel+0x6a8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	099b      	lsrs	r3, r3, #6
 800312c:	4a40      	ldr	r2, [pc, #256]	@ (8003230 <HAL_ADC_ConfigChannel+0x6ac>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	099b      	lsrs	r3, r3, #6
 8003134:	3301      	adds	r3, #1
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800313a:	e002      	b.n	8003142 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	3b01      	subs	r3, #1
 8003140:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f9      	bne.n	800313c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003148:	e05a      	b.n	8003200 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a39      	ldr	r2, [pc, #228]	@ (8003234 <HAL_ADC_ConfigChannel+0x6b0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d11e      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x60e>
 8003154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003156:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d119      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a2f      	ldr	r2, [pc, #188]	@ (8003220 <HAL_ADC_ConfigChannel+0x69c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d14b      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a2a      	ldr	r2, [pc, #168]	@ (8003218 <HAL_ADC_ConfigChannel+0x694>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d004      	beq.n	800317c <HAL_ADC_ConfigChannel+0x5f8>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a29      	ldr	r2, [pc, #164]	@ (800321c <HAL_ADC_ConfigChannel+0x698>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d101      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x5fc>
 800317c:	4a2a      	ldr	r2, [pc, #168]	@ (8003228 <HAL_ADC_ConfigChannel+0x6a4>)
 800317e:	e000      	b.n	8003182 <HAL_ADC_ConfigChannel+0x5fe>
 8003180:	4a24      	ldr	r2, [pc, #144]	@ (8003214 <HAL_ADC_ConfigChannel+0x690>)
 8003182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003184:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f7ff f9df 	bl	800254e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003190:	e036      	b.n	8003200 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a28      	ldr	r2, [pc, #160]	@ (8003238 <HAL_ADC_ConfigChannel+0x6b4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d131      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x67c>
 800319c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800319e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d12c      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003220 <HAL_ADC_ConfigChannel+0x69c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d127      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a18      	ldr	r2, [pc, #96]	@ (8003218 <HAL_ADC_ConfigChannel+0x694>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_ADC_ConfigChannel+0x640>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a17      	ldr	r2, [pc, #92]	@ (800321c <HAL_ADC_ConfigChannel+0x698>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d101      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x644>
 80031c4:	4a18      	ldr	r2, [pc, #96]	@ (8003228 <HAL_ADC_ConfigChannel+0x6a4>)
 80031c6:	e000      	b.n	80031ca <HAL_ADC_ConfigChannel+0x646>
 80031c8:	4a12      	ldr	r2, [pc, #72]	@ (8003214 <HAL_ADC_ConfigChannel+0x690>)
 80031ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f7ff f9bb 	bl	800254e <LL_ADC_SetCommonPathInternalCh>
 80031d8:	e012      	b.n	8003200 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031de:	f043 0220 	orr.w	r2, r3, #32
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80031ec:	e008      	b.n	8003200 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f2:	f043 0220 	orr.w	r2, r3, #32
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003208:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800320c:	4618      	mov	r0, r3
 800320e:	3784      	adds	r7, #132	@ 0x84
 8003210:	46bd      	mov	sp, r7
 8003212:	bd90      	pop	{r4, r7, pc}
 8003214:	58026300 	.word	0x58026300
 8003218:	40022000 	.word	0x40022000
 800321c:	40022100 	.word	0x40022100
 8003220:	58026000 	.word	0x58026000
 8003224:	cb840000 	.word	0xcb840000
 8003228:	40022300 	.word	0x40022300
 800322c:	24000000 	.word	0x24000000
 8003230:	053e2d63 	.word	0x053e2d63
 8003234:	c7520000 	.word	0xc7520000
 8003238:	cfb80000 	.word	0xcfb80000

0800323c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a7a      	ldr	r2, [pc, #488]	@ (8003434 <ADC_ConfigureBoostMode+0x1f8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d004      	beq.n	8003258 <ADC_ConfigureBoostMode+0x1c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a79      	ldr	r2, [pc, #484]	@ (8003438 <ADC_ConfigureBoostMode+0x1fc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d109      	bne.n	800326c <ADC_ConfigureBoostMode+0x30>
 8003258:	4b78      	ldr	r3, [pc, #480]	@ (800343c <ADC_ConfigureBoostMode+0x200>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e008      	b.n	800327e <ADC_ConfigureBoostMode+0x42>
 800326c:	4b74      	ldr	r3, [pc, #464]	@ (8003440 <ADC_ConfigureBoostMode+0x204>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003274:	2b00      	cmp	r3, #0
 8003276:	bf14      	ite	ne
 8003278:	2301      	movne	r3, #1
 800327a:	2300      	moveq	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01c      	beq.n	80032bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003282:	f003 fbcb 	bl	8006a1c <HAL_RCC_GetHCLKFreq>
 8003286:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003290:	d010      	beq.n	80032b4 <ADC_ConfigureBoostMode+0x78>
 8003292:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003296:	d873      	bhi.n	8003380 <ADC_ConfigureBoostMode+0x144>
 8003298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800329c:	d002      	beq.n	80032a4 <ADC_ConfigureBoostMode+0x68>
 800329e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032a2:	d16d      	bne.n	8003380 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	0c1b      	lsrs	r3, r3, #16
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	60fb      	str	r3, [r7, #12]
        break;
 80032b2:	e068      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	089b      	lsrs	r3, r3, #2
 80032b8:	60fb      	str	r3, [r7, #12]
        break;
 80032ba:	e064      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80032bc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80032c0:	f04f 0100 	mov.w	r1, #0
 80032c4:	f004 fe36 	bl	8007f34 <HAL_RCCEx_GetPeriphCLKFreq>
 80032c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80032d2:	d051      	beq.n	8003378 <ADC_ConfigureBoostMode+0x13c>
 80032d4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80032d8:	d854      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 80032da:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80032de:	d047      	beq.n	8003370 <ADC_ConfigureBoostMode+0x134>
 80032e0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80032e4:	d84e      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 80032e6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80032ea:	d03d      	beq.n	8003368 <ADC_ConfigureBoostMode+0x12c>
 80032ec:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80032f0:	d848      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 80032f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032f6:	d033      	beq.n	8003360 <ADC_ConfigureBoostMode+0x124>
 80032f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032fc:	d842      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 80032fe:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003302:	d029      	beq.n	8003358 <ADC_ConfigureBoostMode+0x11c>
 8003304:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003308:	d83c      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 800330a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800330e:	d01a      	beq.n	8003346 <ADC_ConfigureBoostMode+0x10a>
 8003310:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003314:	d836      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 8003316:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800331a:	d014      	beq.n	8003346 <ADC_ConfigureBoostMode+0x10a>
 800331c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003320:	d830      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 8003322:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003326:	d00e      	beq.n	8003346 <ADC_ConfigureBoostMode+0x10a>
 8003328:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800332c:	d82a      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 800332e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003332:	d008      	beq.n	8003346 <ADC_ConfigureBoostMode+0x10a>
 8003334:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003338:	d824      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x148>
 800333a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800333e:	d002      	beq.n	8003346 <ADC_ConfigureBoostMode+0x10a>
 8003340:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003344:	d11e      	bne.n	8003384 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	0c9b      	lsrs	r3, r3, #18
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	60fb      	str	r3, [r7, #12]
        break;
 8003356:	e016      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	60fb      	str	r3, [r7, #12]
        break;
 800335e:	e012      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	60fb      	str	r3, [r7, #12]
        break;
 8003366:	e00e      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	099b      	lsrs	r3, r3, #6
 800336c:	60fb      	str	r3, [r7, #12]
        break;
 800336e:	e00a      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	09db      	lsrs	r3, r3, #7
 8003374:	60fb      	str	r3, [r7, #12]
        break;
 8003376:	e006      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	0a1b      	lsrs	r3, r3, #8
 800337c:	60fb      	str	r3, [r7, #12]
        break;
 800337e:	e002      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003380:	bf00      	nop
 8003382:	e000      	b.n	8003386 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003384:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003386:	f7ff f8c3 	bl	8002510 <HAL_GetREVID>
 800338a:	4603      	mov	r3, r0
 800338c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003390:	4293      	cmp	r3, r2
 8003392:	d815      	bhi.n	80033c0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a2b      	ldr	r2, [pc, #172]	@ (8003444 <ADC_ConfigureBoostMode+0x208>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d908      	bls.n	80033ae <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80033ac:	e03e      	b.n	800342c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033bc:	609a      	str	r2, [r3, #8]
}
 80033be:	e035      	b.n	800342c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	085b      	lsrs	r3, r3, #1
 80033c4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003448 <ADC_ConfigureBoostMode+0x20c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d808      	bhi.n	80033e0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80033dc:	609a      	str	r2, [r3, #8]
}
 80033de:	e025      	b.n	800342c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4a1a      	ldr	r2, [pc, #104]	@ (800344c <ADC_ConfigureBoostMode+0x210>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d80a      	bhi.n	80033fe <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033fa:	609a      	str	r2, [r3, #8]
}
 80033fc:	e016      	b.n	800342c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a13      	ldr	r2, [pc, #76]	@ (8003450 <ADC_ConfigureBoostMode+0x214>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d80a      	bhi.n	800341c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003418:	609a      	str	r2, [r3, #8]
}
 800341a:	e007      	b.n	800342c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800342a:	609a      	str	r2, [r3, #8]
}
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40022000 	.word	0x40022000
 8003438:	40022100 	.word	0x40022100
 800343c:	40022300 	.word	0x40022300
 8003440:	58026300 	.word	0x58026300
 8003444:	01312d00 	.word	0x01312d00
 8003448:	005f5e10 	.word	0x005f5e10
 800344c:	00bebc20 	.word	0x00bebc20
 8003450:	017d7840 	.word	0x017d7840

08003454 <LL_ADC_IsEnabled>:
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <LL_ADC_IsEnabled+0x18>
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <LL_ADC_IsEnabled+0x1a>
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <LL_ADC_REG_IsConversionOngoing>:
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d101      	bne.n	8003492 <LL_ADC_REG_IsConversionOngoing+0x18>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b09f      	sub	sp, #124	@ 0x7c
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e0be      	b.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d102      	bne.n	80034de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80034d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	e001      	b.n	80034e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10b      	bne.n	8003500 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ec:	f043 0220 	orr.w	r2, r3, #32
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e09d      	b.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff ffb9 	bl	800347a <LL_ADC_REG_IsConversionOngoing>
 8003508:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff ffb3 	bl	800347a <LL_ADC_REG_IsConversionOngoing>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d17f      	bne.n	800361a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800351a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800351c:	2b00      	cmp	r3, #0
 800351e:	d17c      	bne.n	800361a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a47      	ldr	r2, [pc, #284]	@ (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a46      	ldr	r2, [pc, #280]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d101      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003534:	4b45      	ldr	r3, [pc, #276]	@ (800364c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003536:	e000      	b.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003538:	4b45      	ldr	r3, [pc, #276]	@ (8003650 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800353a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d039      	beq.n	80035b8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	431a      	orrs	r2, r3
 8003552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003554:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a3a      	ldr	r2, [pc, #232]	@ (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d004      	beq.n	800356a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a38      	ldr	r2, [pc, #224]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10e      	bne.n	8003588 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800356a:	4836      	ldr	r0, [pc, #216]	@ (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800356c:	f7ff ff72 	bl	8003454 <LL_ADC_IsEnabled>
 8003570:	4604      	mov	r4, r0
 8003572:	4835      	ldr	r0, [pc, #212]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003574:	f7ff ff6e 	bl	8003454 <LL_ADC_IsEnabled>
 8003578:	4603      	mov	r3, r0
 800357a:	4323      	orrs	r3, r4
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e008      	b.n	800359a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003588:	4832      	ldr	r0, [pc, #200]	@ (8003654 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800358a:	f7ff ff63 	bl	8003454 <LL_ADC_IsEnabled>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d047      	beq.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800359e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003658 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	6811      	ldr	r1, [r2, #0]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	6892      	ldr	r2, [r2, #8]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	431a      	orrs	r2, r3
 80035b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035b6:	e03a      	b.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80035b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d10e      	bne.n	80035f6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80035d8:	481a      	ldr	r0, [pc, #104]	@ (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035da:	f7ff ff3b 	bl	8003454 <LL_ADC_IsEnabled>
 80035de:	4604      	mov	r4, r0
 80035e0:	4819      	ldr	r0, [pc, #100]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035e2:	f7ff ff37 	bl	8003454 <LL_ADC_IsEnabled>
 80035e6:	4603      	mov	r3, r0
 80035e8:	4323      	orrs	r3, r4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf0c      	ite	eq
 80035ee:	2301      	moveq	r3, #1
 80035f0:	2300      	movne	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e008      	b.n	8003608 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80035f6:	4817      	ldr	r0, [pc, #92]	@ (8003654 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80035f8:	f7ff ff2c 	bl	8003454 <LL_ADC_IsEnabled>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d010      	beq.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800360c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	4b11      	ldr	r3, [pc, #68]	@ (8003658 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003612:	4013      	ands	r3, r2
 8003614:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003616:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003618:	e009      	b.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361e:	f043 0220 	orr.w	r2, r3, #32
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800362c:	e000      	b.n	8003630 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800362e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003638:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800363c:	4618      	mov	r0, r3
 800363e:	377c      	adds	r7, #124	@ 0x7c
 8003640:	46bd      	mov	sp, r7
 8003642:	bd90      	pop	{r4, r7, pc}
 8003644:	40022000 	.word	0x40022000
 8003648:	40022100 	.word	0x40022100
 800364c:	40022300 	.word	0x40022300
 8003650:	58026300 	.word	0x58026300
 8003654:	58026000 	.word	0x58026000
 8003658:	fffff0e0 	.word	0xfffff0e0

0800365c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <__NVIC_SetPriorityGrouping+0x40>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003678:	4013      	ands	r3, r2
 800367a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003684:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003686:	4313      	orrs	r3, r2
 8003688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800368a:	4a04      	ldr	r2, [pc, #16]	@ (800369c <__NVIC_SetPriorityGrouping+0x40>)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	60d3      	str	r3, [r2, #12]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000ed00 	.word	0xe000ed00
 80036a0:	05fa0000 	.word	0x05fa0000

080036a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a8:	4b04      	ldr	r3, [pc, #16]	@ (80036bc <__NVIC_GetPriorityGrouping+0x18>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	0a1b      	lsrs	r3, r3, #8
 80036ae:	f003 0307 	and.w	r3, r3, #7
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	db0b      	blt.n	80036ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	f003 021f 	and.w	r2, r3, #31
 80036d8:	4907      	ldr	r1, [pc, #28]	@ (80036f8 <__NVIC_EnableIRQ+0x38>)
 80036da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	2001      	movs	r0, #1
 80036e2:	fa00 f202 	lsl.w	r2, r0, r2
 80036e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	e000e100 	.word	0xe000e100

080036fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	6039      	str	r1, [r7, #0]
 8003706:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800370c:	2b00      	cmp	r3, #0
 800370e:	db0a      	blt.n	8003726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	b2da      	uxtb	r2, r3
 8003714:	490c      	ldr	r1, [pc, #48]	@ (8003748 <__NVIC_SetPriority+0x4c>)
 8003716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800371a:	0112      	lsls	r2, r2, #4
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	440b      	add	r3, r1
 8003720:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003724:	e00a      	b.n	800373c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	b2da      	uxtb	r2, r3
 800372a:	4908      	ldr	r1, [pc, #32]	@ (800374c <__NVIC_SetPriority+0x50>)
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	3b04      	subs	r3, #4
 8003734:	0112      	lsls	r2, r2, #4
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	440b      	add	r3, r1
 800373a:	761a      	strb	r2, [r3, #24]
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000e100 	.word	0xe000e100
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003750:	b480      	push	{r7}
 8003752:	b089      	sub	sp, #36	@ 0x24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f1c3 0307 	rsb	r3, r3, #7
 800376a:	2b04      	cmp	r3, #4
 800376c:	bf28      	it	cs
 800376e:	2304      	movcs	r3, #4
 8003770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	3304      	adds	r3, #4
 8003776:	2b06      	cmp	r3, #6
 8003778:	d902      	bls.n	8003780 <NVIC_EncodePriority+0x30>
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3b03      	subs	r3, #3
 800377e:	e000      	b.n	8003782 <NVIC_EncodePriority+0x32>
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003784:	f04f 32ff 	mov.w	r2, #4294967295
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43da      	mvns	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	401a      	ands	r2, r3
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003798:	f04f 31ff 	mov.w	r1, #4294967295
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	fa01 f303 	lsl.w	r3, r1, r3
 80037a2:	43d9      	mvns	r1, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a8:	4313      	orrs	r3, r2
         );
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3724      	adds	r7, #36	@ 0x24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff ff4c 	bl	800365c <__NVIC_SetPriorityGrouping>
}
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037da:	f7ff ff63 	bl	80036a4 <__NVIC_GetPriorityGrouping>
 80037de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	6978      	ldr	r0, [r7, #20]
 80037e6:	f7ff ffb3 	bl	8003750 <NVIC_EncodePriority>
 80037ea:	4602      	mov	r2, r0
 80037ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037f0:	4611      	mov	r1, r2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff ff82 	bl	80036fc <__NVIC_SetPriority>
}
 80037f8:	bf00      	nop
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800380a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff ff56 	bl	80036c0 <__NVIC_EnableIRQ>
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800381c:	b480      	push	{r7}
 800381e:	b089      	sub	sp, #36	@ 0x24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800382a:	4b89      	ldr	r3, [pc, #548]	@ (8003a50 <HAL_GPIO_Init+0x234>)
 800382c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800382e:	e194      	b.n	8003b5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	2101      	movs	r1, #1
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	fa01 f303 	lsl.w	r3, r1, r3
 800383c:	4013      	ands	r3, r2
 800383e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8186 	beq.w	8003b54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	2b01      	cmp	r3, #1
 8003852:	d005      	beq.n	8003860 <HAL_GPIO_Init+0x44>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d130      	bne.n	80038c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	2203      	movs	r2, #3
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003896:	2201      	movs	r2, #1
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	f003 0201 	and.w	r2, r3, #1
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d017      	beq.n	80038fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	2203      	movs	r2, #3
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d123      	bne.n	8003952 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	08da      	lsrs	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3208      	adds	r2, #8
 8003912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	220f      	movs	r2, #15
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43db      	mvns	r3, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4013      	ands	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	08da      	lsrs	r2, r3, #3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3208      	adds	r2, #8
 800394c:	69b9      	ldr	r1, [r7, #24]
 800394e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	2203      	movs	r2, #3
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 0203 	and.w	r2, r3, #3
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80e0 	beq.w	8003b54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003994:	4b2f      	ldr	r3, [pc, #188]	@ (8003a54 <HAL_GPIO_Init+0x238>)
 8003996:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800399a:	4a2e      	ldr	r2, [pc, #184]	@ (8003a54 <HAL_GPIO_Init+0x238>)
 800399c:	f043 0302 	orr.w	r3, r3, #2
 80039a0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80039a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a54 <HAL_GPIO_Init+0x238>)
 80039a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039b2:	4a29      	ldr	r2, [pc, #164]	@ (8003a58 <HAL_GPIO_Init+0x23c>)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	089b      	lsrs	r3, r3, #2
 80039b8:	3302      	adds	r3, #2
 80039ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	220f      	movs	r2, #15
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4013      	ands	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a20      	ldr	r2, [pc, #128]	@ (8003a5c <HAL_GPIO_Init+0x240>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d052      	beq.n	8003a84 <HAL_GPIO_Init+0x268>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a60 <HAL_GPIO_Init+0x244>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d031      	beq.n	8003a4a <HAL_GPIO_Init+0x22e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003a64 <HAL_GPIO_Init+0x248>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d02b      	beq.n	8003a46 <HAL_GPIO_Init+0x22a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a68 <HAL_GPIO_Init+0x24c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d025      	beq.n	8003a42 <HAL_GPIO_Init+0x226>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a6c <HAL_GPIO_Init+0x250>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01f      	beq.n	8003a3e <HAL_GPIO_Init+0x222>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a1b      	ldr	r2, [pc, #108]	@ (8003a70 <HAL_GPIO_Init+0x254>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d019      	beq.n	8003a3a <HAL_GPIO_Init+0x21e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a1a      	ldr	r2, [pc, #104]	@ (8003a74 <HAL_GPIO_Init+0x258>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <HAL_GPIO_Init+0x21a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a19      	ldr	r2, [pc, #100]	@ (8003a78 <HAL_GPIO_Init+0x25c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00d      	beq.n	8003a32 <HAL_GPIO_Init+0x216>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a18      	ldr	r2, [pc, #96]	@ (8003a7c <HAL_GPIO_Init+0x260>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d007      	beq.n	8003a2e <HAL_GPIO_Init+0x212>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a17      	ldr	r2, [pc, #92]	@ (8003a80 <HAL_GPIO_Init+0x264>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d101      	bne.n	8003a2a <HAL_GPIO_Init+0x20e>
 8003a26:	2309      	movs	r3, #9
 8003a28:	e02d      	b.n	8003a86 <HAL_GPIO_Init+0x26a>
 8003a2a:	230a      	movs	r3, #10
 8003a2c:	e02b      	b.n	8003a86 <HAL_GPIO_Init+0x26a>
 8003a2e:	2308      	movs	r3, #8
 8003a30:	e029      	b.n	8003a86 <HAL_GPIO_Init+0x26a>
 8003a32:	2307      	movs	r3, #7
 8003a34:	e027      	b.n	8003a86 <HAL_GPIO_Init+0x26a>
 8003a36:	2306      	movs	r3, #6
 8003a38:	e025      	b.n	8003a86 <HAL_GPIO_Init+0x26a>
 8003a3a:	2305      	movs	r3, #5
 8003a3c:	e023      	b.n	8003a86 <HAL_GPIO_Init+0x26a>
 8003a3e:	2304      	movs	r3, #4
 8003a40:	e021      	b.n	8003a86 <HAL_GPIO_Init+0x26a>
 8003a42:	2303      	movs	r3, #3
 8003a44:	e01f      	b.n	8003a86 <HAL_GPIO_Init+0x26a>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e01d      	b.n	8003a86 <HAL_GPIO_Init+0x26a>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e01b      	b.n	8003a86 <HAL_GPIO_Init+0x26a>
 8003a4e:	bf00      	nop
 8003a50:	58000080 	.word	0x58000080
 8003a54:	58024400 	.word	0x58024400
 8003a58:	58000400 	.word	0x58000400
 8003a5c:	58020000 	.word	0x58020000
 8003a60:	58020400 	.word	0x58020400
 8003a64:	58020800 	.word	0x58020800
 8003a68:	58020c00 	.word	0x58020c00
 8003a6c:	58021000 	.word	0x58021000
 8003a70:	58021400 	.word	0x58021400
 8003a74:	58021800 	.word	0x58021800
 8003a78:	58021c00 	.word	0x58021c00
 8003a7c:	58022000 	.word	0x58022000
 8003a80:	58022400 	.word	0x58022400
 8003a84:	2300      	movs	r3, #0
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	f002 0203 	and.w	r2, r2, #3
 8003a8c:	0092      	lsls	r2, r2, #2
 8003a8e:	4093      	lsls	r3, r2
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a96:	4938      	ldr	r1, [pc, #224]	@ (8003b78 <HAL_GPIO_Init+0x35c>)
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003aca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003af8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	3301      	adds	r3, #1
 8003b58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	fa22 f303 	lsr.w	r3, r2, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f47f ae63 	bne.w	8003830 <HAL_GPIO_Init+0x14>
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	bf00      	nop
 8003b6e:	3724      	adds	r7, #36	@ 0x24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	58000400 	.word	0x58000400

08003b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	887b      	ldrh	r3, [r7, #2]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
 8003b98:	e001      	b.n	8003b9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	807b      	strh	r3, [r7, #2]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bbc:	787b      	ldrb	r3, [r7, #1]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bc2:	887a      	ldrh	r2, [r7, #2]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003bc8:	e003      	b.n	8003bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003bca:	887b      	ldrh	r3, [r7, #2]
 8003bcc:	041a      	lsls	r2, r3, #16
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	619a      	str	r2, [r3, #24]
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b085      	sub	sp, #20
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	460b      	mov	r3, r1
 8003be8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bf0:	887a      	ldrh	r2, [r7, #2]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	041a      	lsls	r2, r3, #16
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	43d9      	mvns	r1, r3
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	400b      	ands	r3, r1
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	619a      	str	r2, [r3, #24]
}
 8003c06:	bf00      	nop
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e0bd      	b.n	8003da2 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d031      	beq.n	8003cce <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a4f      	ldr	r2, [pc, #316]	@ (8003dac <HAL_HRTIM_Init+0x198>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d10e      	bne.n	8003c92 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8003c74:	4b4e      	ldr	r3, [pc, #312]	@ (8003db0 <HAL_HRTIM_Init+0x19c>)
 8003c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c7a:	4a4d      	ldr	r2, [pc, #308]	@ (8003db0 <HAL_HRTIM_Init+0x19c>)
 8003c7c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c84:	4b4a      	ldr	r3, [pc, #296]	@ (8003db0 <HAL_HRTIM_Init+0x19c>)
 8003c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003ca0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003cb6:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fd fa9a 	bl	8001208 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d012      	beq.n	8003d06 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cee:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003d16:	2300      	movs	r3, #0
 8003d18:	75fb      	strb	r3, [r7, #23]
 8003d1a:	e03e      	b.n	8003d9a <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8003d1c:	7dfa      	ldrb	r2, [r7, #23]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	3318      	adds	r3, #24
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8003d30:	7dfa      	ldrb	r2, [r7, #23]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	331c      	adds	r3, #28
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8003d44:	7dfa      	ldrb	r2, [r7, #23]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	3320      	adds	r3, #32
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8003d58:	7dfa      	ldrb	r2, [r7, #23]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	3324      	adds	r3, #36	@ 0x24
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8003d6c:	7dfa      	ldrb	r2, [r7, #23]
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	3328      	adds	r3, #40	@ 0x28
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8003d80:	7dfa      	ldrb	r2, [r7, #23]
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	3330      	adds	r3, #48	@ 0x30
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
 8003d96:	3301      	adds	r3, #1
 8003d98:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	2b05      	cmp	r3, #5
 8003d9e:	d9bd      	bls.n	8003d1c <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40017400 	.word	0x40017400
 8003db0:	58024400 	.word	0x58024400

08003db4 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d101      	bne.n	8003dd0 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e015      	b.n	8003dfc <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b05      	cmp	r3, #5
 8003ddc:	d104      	bne.n	8003de8 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f881 	bl	8003ee8 <HRTIM_MasterBase_Config>
 8003de6:	e004      	b.n	8003df2 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f8aa 	bl	8003f46 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d101      	bne.n	8003e20 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e05f      	b.n	8003ee0 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e058      	b.n	8003ee0 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b05      	cmp	r3, #5
 8003e42:	d104      	bne.n	8003e4e <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f8bd 	bl	8003fc6 <HRTIM_MasterWaveform_Config>
 8003e4c:	e004      	b.n	8003e58 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f91e 	bl	8004094 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6819      	ldr	r1, [r3, #0]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4403      	add	r3, r0
 8003e6a:	3320      	adds	r3, #32
 8003e6c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6859      	ldr	r1, [r3, #4]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	4613      	mov	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4403      	add	r3, r0
 8003e80:	3324      	adds	r3, #36	@ 0x24
 8003e82:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6899      	ldr	r1, [r3, #8]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4403      	add	r3, r0
 8003e96:	3328      	adds	r3, #40	@ 0x28
 8003e98:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68d9      	ldr	r1, [r3, #12]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4403      	add	r3, r0
 8003eac:	332c      	adds	r3, #44	@ 0x2c
 8003eae:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6919      	ldr	r1, [r3, #16]
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	1a9b      	subs	r3, r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4403      	add	r3, r0
 8003ec2:	3330      	adds	r3, #48	@ 0x30
 8003ec4:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 fa23 	bl	8004314 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f023 0307 	bic.w	r3, r3, #7
 8003f00:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0318 	bic.w	r3, r3, #24
 8003f12:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	6852      	ldr	r2, [r2, #4]
 8003f38:	619a      	str	r2, [r3, #24]
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b087      	sub	sp, #28
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	01db      	lsls	r3, r3, #7
 8003f5c:	4413      	add	r3, r2
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f023 0307 	bic.w	r3, r3, #7
 8003f68:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0318 	bic.w	r3, r3, #24
 8003f7a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	01db      	lsls	r3, r3, #7
 8003f90:	4413      	add	r3, r2
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	01db      	lsls	r3, r3, #7
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3394      	adds	r3, #148	@ 0x94
 8003fa6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6819      	ldr	r1, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	01db      	lsls	r3, r3, #7
 8003fb4:	440b      	add	r3, r1
 8003fb6:	3398      	adds	r3, #152	@ 0x98
 8003fb8:	601a      	str	r2, [r3, #0]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8003fe0:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f023 0320 	bic.w	r3, r3, #32
 8003fe8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ffa:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800400c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800401e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004030:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004042:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004056:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004068:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	4313      	orrs	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004094:	b480      	push	{r7}
 8004096:	b08b      	sub	sp, #44	@ 0x2c
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	3301      	adds	r3, #1
 80040a8:	01db      	lsls	r3, r3, #7
 80040aa:	4413      	add	r3, r2
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	6811      	ldr	r1, [r2, #0]
 80040b2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	3301      	adds	r3, #1
 80040ba:	01db      	lsls	r3, r3, #7
 80040bc:	440b      	add	r3, r1
 80040be:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	3301      	adds	r3, #1
 80040c8:	01db      	lsls	r3, r3, #7
 80040ca:	4413      	add	r3, r2
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	01db      	lsls	r3, r3, #7
 80040d8:	4413      	add	r3, r2
 80040da:	33e8      	adds	r3, #232	@ 0xe8
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	01db      	lsls	r3, r3, #7
 80040e8:	4413      	add	r3, r2
 80040ea:	33e4      	adds	r3, #228	@ 0xe4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80040f8:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	f023 0320 	bic.w	r3, r3, #32
 8004100:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004108:	4313      	orrs	r3, r2
 800410a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004112:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800411a:	4313      	orrs	r3, r2
 800411c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004120:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004124:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800412c:	4313      	orrs	r3, r2
 800412e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004136:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800413e:	4313      	orrs	r3, r2
 8004140:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004150:	4313      	orrs	r3, r2
 8004152:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800415a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004162:	4313      	orrs	r3, r2
 8004164:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800416c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004176:	d103      	bne.n	8004180 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800417e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800418c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800418e:	4313      	orrs	r3, r2
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004198:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800419e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a0:	4313      	orrs	r3, r2
 80041a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80041a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a6:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 80041aa:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b2:	4313      	orrs	r3, r2
 80041b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f023 031f 	bic.w	r3, r3, #31
 80041bc:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c2:	f003 031f 	and.w	r3, r3, #31
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041d2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	4313      	orrs	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d108      	bne.n	80041f8 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041ec:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	6a3a      	ldr	r2, [r7, #32]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fc:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004200:	d004      	beq.n	800420c <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004206:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 800420a:	d103      	bne.n	8004214 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004210:	2b40      	cmp	r3, #64	@ 0x40
 8004212:	d108      	bne.n	8004226 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 800421a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004220:	6a3a      	ldr	r2, [r7, #32]
 8004222:	4313      	orrs	r3, r2
 8004224:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800422a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b04      	cmp	r3, #4
 8004230:	d843      	bhi.n	80042ba <HRTIM_TimingUnitWaveform_Config+0x226>
 8004232:	a201      	add	r2, pc, #4	@ (adr r2, 8004238 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800424d 	.word	0x0800424d
 800423c:	08004263 	.word	0x08004263
 8004240:	08004279 	.word	0x08004279
 8004244:	0800428f 	.word	0x0800428f
 8004248:	080042a5 	.word	0x080042a5
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004252:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	4313      	orrs	r3, r2
 800425e:	61fb      	str	r3, [r7, #28]
      break;
 8004260:	e02c      	b.n	80042bc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004268:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	4313      	orrs	r3, r2
 8004274:	61fb      	str	r3, [r7, #28]
      break;
 8004276:	e021      	b.n	80042bc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800427e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	4313      	orrs	r3, r2
 800428a:	61fb      	str	r3, [r7, #28]
      break;
 800428c:	e016      	b.n	80042bc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004294:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61fb      	str	r3, [r7, #28]
      break;
 80042a2:	e00b      	b.n	80042bc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80042aa:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	015b      	lsls	r3, r3, #5
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61fb      	str	r3, [r7, #28]
      break;
 80042b8:	e000      	b.n	80042bc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80042ba:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	3301      	adds	r3, #1
 80042c4:	01db      	lsls	r3, r3, #7
 80042c6:	4413      	add	r3, r2
 80042c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ca:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	01db      	lsls	r3, r3, #7
 80042d4:	4413      	add	r3, r2
 80042d6:	33e8      	adds	r3, #232	@ 0xe8
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	01db      	lsls	r3, r3, #7
 80042e4:	4413      	add	r3, r2
 80042e6:	33e4      	adds	r3, #228	@ 0xe4
 80042e8:	6a3a      	ldr	r2, [r7, #32]
 80042ea:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	01db      	lsls	r3, r3, #7
 80042f4:	4413      	add	r3, r2
 80042f6:	33d4      	adds	r3, #212	@ 0xd4
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69fa      	ldr	r2, [r7, #28]
 8004302:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004306:	bf00      	nop
 8004308:	372c      	adds	r7, #44	@ 0x2c
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop

08004314 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b05      	cmp	r3, #5
 8004322:	d851      	bhi.n	80043c8 <HRTIM_ForceRegistersUpdate+0xb4>
 8004324:	a201      	add	r2, pc, #4	@ (adr r2, 800432c <HRTIM_ForceRegistersUpdate+0x18>)
 8004326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432a:	bf00      	nop
 800432c:	0800435b 	.word	0x0800435b
 8004330:	08004371 	.word	0x08004371
 8004334:	08004387 	.word	0x08004387
 8004338:	0800439d 	.word	0x0800439d
 800433c:	080043b3 	.word	0x080043b3
 8004340:	08004345 	.word	0x08004345
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0201 	orr.w	r2, r2, #1
 8004354:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004358:	e037      	b.n	80043ca <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0202 	orr.w	r2, r2, #2
 800436a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800436e:	e02c      	b.n	80043ca <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0204 	orr.w	r2, r2, #4
 8004380:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004384:	e021      	b.n	80043ca <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0208 	orr.w	r2, r2, #8
 8004396:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800439a:	e016      	b.n	80043ca <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0210 	orr.w	r2, r2, #16
 80043ac:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80043b0:	e00b      	b.n	80043ca <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0220 	orr.w	r2, r2, #32
 80043c2:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80043c6:	e000      	b.n	80043ca <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80043c8:	bf00      	nop
  }
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop

080043d8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e097      	b.n	800451a <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7fc ff39 	bl	800127c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2202      	movs	r2, #2
 800440e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d004      	beq.n	800442c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004426:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800442a:	d103      	bne.n	8004434 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 031e 	bic.w	r3, r3, #30
 8004432:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4b38      	ldr	r3, [pc, #224]	@ (8004524 <HAL_LPTIM_Init+0x14c>)
 8004444:	4013      	ands	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4b37      	ldr	r3, [pc, #220]	@ (8004528 <HAL_LPTIM_Init+0x150>)
 800444c:	4013      	ands	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004458:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800445e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8004464:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 800446a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d107      	bne.n	800448a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004482:	4313      	orrs	r3, r2
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d004      	beq.n	800449c <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004496:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800449a:	d107      	bne.n	80044ac <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80044a4:	4313      	orrs	r3, r2
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00a      	beq.n	80044ce <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80044c0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80044c6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a14      	ldr	r2, [pc, #80]	@ (800452c <HAL_LPTIM_Init+0x154>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <HAL_LPTIM_Init+0x112>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a12      	ldr	r2, [pc, #72]	@ (8004530 <HAL_LPTIM_Init+0x158>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d108      	bne.n	80044fc <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80044fa:	e009      	b.n	8004510 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a0c      	ldr	r2, [pc, #48]	@ (8004534 <HAL_LPTIM_Init+0x15c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d104      	bne.n	8004510 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800450e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	ffff1f3f 	.word	0xffff1f3f
 8004528:	ff19f1fe 	.word	0xff19f1fe
 800452c:	40002400 	.word	0x40002400
 8004530:	58002400 	.word	0x58002400
 8004534:	58002800 	.word	0x58002800

08004538 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af02      	add	r7, sp, #8
 800453e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e0fe      	b.n	8004748 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f00d fb3c 	bl	8011bdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2203      	movs	r2, #3
 8004568:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f006 ff0e 	bl	800b392 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	7c1a      	ldrb	r2, [r3, #16]
 800457e:	f88d 2000 	strb.w	r2, [sp]
 8004582:	3304      	adds	r3, #4
 8004584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004586:	f006 fddf 	bl	800b148 <USB_CoreInit>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0d5      	b.n	8004748 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2100      	movs	r1, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	f006 ff06 	bl	800b3b4 <USB_SetCurrentMode>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2202      	movs	r2, #2
 80045b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e0c6      	b.n	8004748 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	e04a      	b.n	8004656 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045c0:	7bfa      	ldrb	r2, [r7, #15]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	3315      	adds	r3, #21
 80045d0:	2201      	movs	r2, #1
 80045d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045d4:	7bfa      	ldrb	r2, [r7, #15]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	3314      	adds	r3, #20
 80045e4:	7bfa      	ldrb	r2, [r7, #15]
 80045e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045e8:	7bfa      	ldrb	r2, [r7, #15]
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	b298      	uxth	r0, r3
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	332e      	adds	r3, #46	@ 0x2e
 80045fc:	4602      	mov	r2, r0
 80045fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004600:	7bfa      	ldrb	r2, [r7, #15]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	3318      	adds	r3, #24
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	331c      	adds	r3, #28
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004628:	7bfa      	ldrb	r2, [r7, #15]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	3320      	adds	r3, #32
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800463c:	7bfa      	ldrb	r2, [r7, #15]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	3324      	adds	r3, #36	@ 0x24
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	3301      	adds	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	791b      	ldrb	r3, [r3, #4]
 800465a:	7bfa      	ldrb	r2, [r7, #15]
 800465c:	429a      	cmp	r2, r3
 800465e:	d3af      	bcc.n	80045c0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004660:	2300      	movs	r3, #0
 8004662:	73fb      	strb	r3, [r7, #15]
 8004664:	e044      	b.n	80046f0 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004666:	7bfa      	ldrb	r2, [r7, #15]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004678:	2200      	movs	r2, #0
 800467a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800467c:	7bfa      	ldrb	r2, [r7, #15]
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800468e:	7bfa      	ldrb	r2, [r7, #15]
 8004690:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004692:	7bfa      	ldrb	r2, [r7, #15]
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	4613      	mov	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	440b      	add	r3, r1
 80046a0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046a8:	7bfa      	ldrb	r2, [r7, #15]
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	4613      	mov	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046be:	7bfa      	ldrb	r2, [r7, #15]
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	4613      	mov	r3, r2
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	440b      	add	r3, r1
 80046cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046d4:	7bfa      	ldrb	r2, [r7, #15]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	3301      	adds	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	791b      	ldrb	r3, [r3, #4]
 80046f4:	7bfa      	ldrb	r2, [r7, #15]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d3b5      	bcc.n	8004666 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	7c1a      	ldrb	r2, [r3, #16]
 8004702:	f88d 2000 	strb.w	r2, [sp]
 8004706:	3304      	adds	r3, #4
 8004708:	cb0e      	ldmia	r3, {r1, r2, r3}
 800470a:	f006 fe9f 	bl	800b44c <USB_DevInit>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e013      	b.n	8004748 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	7b1b      	ldrb	r3, [r3, #12]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d102      	bne.n	800473c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f001 f96c 	bl	8005a14 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4618      	mov	r0, r3
 8004742:	f007 fede 	bl	800c502 <USB_DevDisconnect>

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_PCD_Start+0x1c>
 8004768:	2302      	movs	r3, #2
 800476a:	e022      	b.n	80047b2 <HAL_PCD_Start+0x62>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d009      	beq.n	8004794 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004784:	2b01      	cmp	r3, #1
 8004786:	d105      	bne.n	8004794 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f006 fde9 	bl	800b370 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f007 fe8c 	bl	800c4c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80047ba:	b590      	push	{r4, r7, lr}
 80047bc:	b08d      	sub	sp, #52	@ 0x34
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f007 ff4a 	bl	800c66a <USB_GetMode>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f040 84b9 	bne.w	8005150 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f007 feae 	bl	800c544 <USB_ReadInterrupts>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 84af 	beq.w	800514e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	0a1b      	lsrs	r3, r3, #8
 80047fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f007 fe9b 	bl	800c544 <USB_ReadInterrupts>
 800480e:	4603      	mov	r3, r0
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b02      	cmp	r3, #2
 8004816:	d107      	bne.n	8004828 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f002 0202 	and.w	r2, r2, #2
 8004826:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f007 fe89 	bl	800c544 <USB_ReadInterrupts>
 8004832:	4603      	mov	r3, r0
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b10      	cmp	r3, #16
 800483a:	d161      	bne.n	8004900 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0210 	bic.w	r2, r2, #16
 800484a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f003 020f 	and.w	r2, r3, #15
 8004858:	4613      	mov	r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	4413      	add	r3, r2
 8004868:	3304      	adds	r3, #4
 800486a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	0c5b      	lsrs	r3, r3, #17
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	2b02      	cmp	r3, #2
 8004876:	d124      	bne.n	80048c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800487e:	4013      	ands	r3, r2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d035      	beq.n	80048f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	091b      	lsrs	r3, r3, #4
 800488c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800488e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004892:	b29b      	uxth	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	6a38      	ldr	r0, [r7, #32]
 8004898:	f007 fcc0 	bl	800c21c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048a8:	441a      	add	r2, r3
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048ba:	441a      	add	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	615a      	str	r2, [r3, #20]
 80048c0:	e016      	b.n	80048f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	0c5b      	lsrs	r3, r3, #17
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	2b06      	cmp	r3, #6
 80048cc:	d110      	bne.n	80048f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048d4:	2208      	movs	r2, #8
 80048d6:	4619      	mov	r1, r3
 80048d8:	6a38      	ldr	r0, [r7, #32]
 80048da:	f007 fc9f 	bl	800c21c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048ea:	441a      	add	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0210 	orr.w	r2, r2, #16
 80048fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f007 fe1d 	bl	800c544 <USB_ReadInterrupts>
 800490a:	4603      	mov	r3, r0
 800490c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004910:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004914:	f040 80a7 	bne.w	8004a66 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f007 fe22 	bl	800c56a <USB_ReadDevAllOutEpInterrupt>
 8004926:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004928:	e099      	b.n	8004a5e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800492a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 808e 	beq.w	8004a52 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f007 fe46 	bl	800c5d2 <USB_ReadDevOutEPInterrupt>
 8004946:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00c      	beq.n	800496c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800495e:	461a      	mov	r2, r3
 8004960:	2301      	movs	r3, #1
 8004962:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004964:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fece 	bl	8005708 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00c      	beq.n	8004990 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004982:	461a      	mov	r2, r3
 8004984:	2308      	movs	r3, #8
 8004986:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004988:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 ffa4 	bl	80058d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b00      	cmp	r3, #0
 8004998:	d008      	beq.n	80049ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a6:	461a      	mov	r2, r3
 80049a8:	2310      	movs	r3, #16
 80049aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d030      	beq.n	8004a18 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049be:	2b80      	cmp	r3, #128	@ 0x80
 80049c0:	d109      	bne.n	80049d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80049d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049d8:	4613      	mov	r3, r2
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	4413      	add	r3, r2
 80049e8:	3304      	adds	r3, #4
 80049ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	78db      	ldrb	r3, [r3, #3]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d108      	bne.n	8004a06 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2200      	movs	r2, #0
 80049f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	4619      	mov	r1, r3
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f00d fa11 	bl	8011e28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a12:	461a      	mov	r2, r3
 8004a14:	2302      	movs	r3, #2
 8004a16:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a2e:	461a      	mov	r2, r3
 8004a30:	2320      	movs	r3, #32
 8004a32:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d009      	beq.n	8004a52 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a50:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	3301      	adds	r3, #1
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5a:	085b      	lsrs	r3, r3, #1
 8004a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f47f af62 	bne.w	800492a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f007 fd6a 	bl	800c544 <USB_ReadInterrupts>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a7a:	f040 80db 	bne.w	8004c34 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f007 fd8b 	bl	800c59e <USB_ReadDevAllInEpInterrupt>
 8004a88:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004a8e:	e0cd      	b.n	8004c2c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 80c2 	beq.w	8004c20 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f007 fdb1 	bl	800c60e <USB_ReadDevInEPInterrupt>
 8004aac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d057      	beq.n	8004b68 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	2201      	movs	r2, #1
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	69f9      	ldr	r1, [r7, #28]
 8004ad4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ad8:	4013      	ands	r3, r2
 8004ada:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae8:	461a      	mov	r2, r3
 8004aea:	2301      	movs	r3, #1
 8004aec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	799b      	ldrb	r3, [r3, #6]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d132      	bne.n	8004b5c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004afa:	4613      	mov	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	440b      	add	r3, r1
 8004b04:	3320      	adds	r3, #32
 8004b06:	6819      	ldr	r1, [r3, #0]
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4403      	add	r3, r0
 8004b16:	331c      	adds	r3, #28
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4419      	add	r1, r3
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b20:	4613      	mov	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4403      	add	r3, r0
 8004b2a:	3320      	adds	r3, #32
 8004b2c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d113      	bne.n	8004b5c <HAL_PCD_IRQHandler+0x3a2>
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b38:	4613      	mov	r3, r2
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	3324      	adds	r3, #36	@ 0x24
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d108      	bne.n	8004b5c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b54:	461a      	mov	r2, r3
 8004b56:	2101      	movs	r1, #1
 8004b58:	f007 fdba 	bl	800c6d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f00d f8db 	bl	8011d1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d008      	beq.n	8004b84 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b7e:	461a      	mov	r2, r3
 8004b80:	2308      	movs	r3, #8
 8004b82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d008      	beq.n	8004ba0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d008      	beq.n	8004bbc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	2340      	movs	r3, #64	@ 0x40
 8004bba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d023      	beq.n	8004c0e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004bc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bc8:	6a38      	ldr	r0, [r7, #32]
 8004bca:	f006 fd9d 	bl	800b708 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	3310      	adds	r3, #16
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	3304      	adds	r3, #4
 8004be0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	78db      	ldrb	r3, [r3, #3]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d108      	bne.n	8004bfc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2200      	movs	r2, #0
 8004bee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f00d f928 	bl	8011e4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c08:	461a      	mov	r2, r3
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fce8 	bl	80055f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	3301      	adds	r3, #1
 8004c24:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c28:	085b      	lsrs	r3, r3, #1
 8004c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f47f af2e 	bne.w	8004a90 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f007 fc83 	bl	800c544 <USB_ReadInterrupts>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c48:	d122      	bne.n	8004c90 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c58:	f023 0301 	bic.w	r3, r3, #1
 8004c5c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d108      	bne.n	8004c7a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c70:	2100      	movs	r1, #0
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fef2 	bl	8005a5c <HAL_PCDEx_LPM_Callback>
 8004c78:	e002      	b.n	8004c80 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f00d f8c6 	bl	8011e0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695a      	ldr	r2, [r3, #20]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f007 fc55 	bl	800c544 <USB_ReadInterrupts>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca4:	d112      	bne.n	8004ccc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d102      	bne.n	8004cbc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f00d f882 	bl	8011dc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004cca:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f007 fc37 	bl	800c544 <USB_ReadInterrupts>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ce0:	d121      	bne.n	8004d26 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695a      	ldr	r2, [r3, #20]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004cf0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d111      	bne.n	8004d20 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0a:	089b      	lsrs	r3, r3, #2
 8004d0c:	f003 020f 	and.w	r2, r3, #15
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004d16:	2101      	movs	r1, #1
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fe9f 	bl	8005a5c <HAL_PCDEx_LPM_Callback>
 8004d1e:	e002      	b.n	8004d26 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f00d f84d 	bl	8011dc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f007 fc0a 	bl	800c544 <USB_ReadInterrupts>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d3a:	f040 80b7 	bne.w	8004eac <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2110      	movs	r1, #16
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f006 fcd5 	bl	800b708 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d5e:	2300      	movs	r3, #0
 8004d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d62:	e046      	b.n	8004df2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d70:	461a      	mov	r2, r3
 8004d72:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d76:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d88:	0151      	lsls	r1, r2, #5
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	440a      	add	r2, r1
 8004d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d96:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da4:	461a      	mov	r2, r3
 8004da6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004daa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dc6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004dca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ddc:	0151      	lsls	r1, r2, #5
 8004dde:	69fa      	ldr	r2, [r7, #28]
 8004de0:	440a      	add	r2, r1
 8004de2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004de6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004dea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dee:	3301      	adds	r3, #1
 8004df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	791b      	ldrb	r3, [r3, #4]
 8004df6:	461a      	mov	r2, r3
 8004df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d3b2      	bcc.n	8004d64 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e0c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004e10:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	7bdb      	ldrb	r3, [r3, #15]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d016      	beq.n	8004e48 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e2a:	f043 030b 	orr.w	r3, r3, #11
 8004e2e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3a:	69fa      	ldr	r2, [r7, #28]
 8004e3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e40:	f043 030b 	orr.w	r3, r3, #11
 8004e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e46:	e015      	b.n	8004e74 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e4e:	695a      	ldr	r2, [r3, #20]
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e56:	4619      	mov	r1, r3
 8004e58:	f242 032b 	movw	r3, #8235	@ 0x202b
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e6e:	f043 030b 	orr.w	r3, r3, #11
 8004e72:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69fa      	ldr	r2, [r7, #28]
 8004e7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e82:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004e86:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e96:	461a      	mov	r2, r3
 8004e98:	f007 fc1a 	bl	800c6d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695a      	ldr	r2, [r3, #20]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004eaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f007 fb47 	bl	800c544 <USB_ReadInterrupts>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec0:	d123      	bne.n	8004f0a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f007 fbde 	bl	800c688 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f006 fc92 	bl	800b7fa <USB_GetDevSpeed>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	461a      	mov	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681c      	ldr	r4, [r3, #0]
 8004ee2:	f001 fd9b 	bl	8006a1c <HAL_RCC_GetHCLKFreq>
 8004ee6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004eec:	461a      	mov	r2, r3
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f006 f99c 	bl	800b22c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f00c ff3a 	bl	8011d6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695a      	ldr	r2, [r3, #20]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004f08:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f007 fb18 	bl	800c544 <USB_ReadInterrupts>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d10a      	bne.n	8004f34 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f00c ff17 	bl	8011d52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695a      	ldr	r2, [r3, #20]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f002 0208 	and.w	r2, r2, #8
 8004f32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f007 fb03 	bl	800c544 <USB_ReadInterrupts>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f44:	2b80      	cmp	r3, #128	@ 0x80
 8004f46:	d123      	bne.n	8004f90 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f54:	2301      	movs	r3, #1
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f58:	e014      	b.n	8004f84 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f5e:	4613      	mov	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d105      	bne.n	8004f7e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	4619      	mov	r1, r3
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fb08 	bl	800558e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	3301      	adds	r3, #1
 8004f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	791b      	ldrb	r3, [r3, #4]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d3e4      	bcc.n	8004f5a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f007 fad5 	bl	800c544 <USB_ReadInterrupts>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fa4:	d13c      	bne.n	8005020 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004faa:	e02b      	b.n	8005004 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	3318      	adds	r3, #24
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d115      	bne.n	8004ffe <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004fd2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	da12      	bge.n	8004ffe <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fdc:	4613      	mov	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	3317      	adds	r3, #23
 8004fe8:	2201      	movs	r2, #1
 8004fea:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fac8 	bl	800558e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	3301      	adds	r3, #1
 8005002:	627b      	str	r3, [r7, #36]	@ 0x24
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	791b      	ldrb	r3, [r3, #4]
 8005008:	461a      	mov	r2, r3
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	4293      	cmp	r3, r2
 800500e:	d3cd      	bcc.n	8004fac <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695a      	ldr	r2, [r3, #20]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800501e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f007 fa8d 	bl	800c544 <USB_ReadInterrupts>
 800502a:	4603      	mov	r3, r0
 800502c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005030:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005034:	d156      	bne.n	80050e4 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005036:	2301      	movs	r3, #1
 8005038:	627b      	str	r3, [r7, #36]	@ 0x24
 800503a:	e045      	b.n	80050c8 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005050:	4613      	mov	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d12e      	bne.n	80050c2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005064:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005066:	2b00      	cmp	r3, #0
 8005068:	da2b      	bge.n	80050c2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005076:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800507a:	429a      	cmp	r2, r3
 800507c:	d121      	bne.n	80050c2 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005082:	4613      	mov	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005090:	2201      	movs	r2, #1
 8005092:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050be:	6053      	str	r3, [r2, #4]
            break;
 80050c0:	e008      	b.n	80050d4 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c4:	3301      	adds	r3, #1
 80050c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	791b      	ldrb	r3, [r3, #4]
 80050cc:	461a      	mov	r2, r3
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d3b3      	bcc.n	800503c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695a      	ldr	r2, [r3, #20]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80050e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f007 fa2b 	bl	800c544 <USB_ReadInterrupts>
 80050ee:	4603      	mov	r3, r0
 80050f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80050f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f8:	d10a      	bne.n	8005110 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f00c feb8 	bl	8011e70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	695a      	ldr	r2, [r3, #20]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800510e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f007 fa15 	bl	800c544 <USB_ReadInterrupts>
 800511a:	4603      	mov	r3, r0
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b04      	cmp	r3, #4
 8005122:	d115      	bne.n	8005150 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f00c fea8 	bl	8011e8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6859      	ldr	r1, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	430a      	orrs	r2, r1
 800514a:	605a      	str	r2, [r3, #4]
 800514c:	e000      	b.n	8005150 <HAL_PCD_IRQHandler+0x996>
      return;
 800514e:	bf00      	nop
    }
  }
}
 8005150:	3734      	adds	r7, #52	@ 0x34
 8005152:	46bd      	mov	sp, r7
 8005154:	bd90      	pop	{r4, r7, pc}

08005156 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_PCD_SetAddress+0x1a>
 800516c:	2302      	movs	r3, #2
 800516e:	e012      	b.n	8005196 <HAL_PCD_SetAddress+0x40>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	78fa      	ldrb	r2, [r7, #3]
 800517c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	78fa      	ldrb	r2, [r7, #3]
 8005184:	4611      	mov	r1, r2
 8005186:	4618      	mov	r0, r3
 8005188:	f007 f974 	bl	800c474 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	4608      	mov	r0, r1
 80051a8:	4611      	mov	r1, r2
 80051aa:	461a      	mov	r2, r3
 80051ac:	4603      	mov	r3, r0
 80051ae:	70fb      	strb	r3, [r7, #3]
 80051b0:	460b      	mov	r3, r1
 80051b2:	803b      	strh	r3, [r7, #0]
 80051b4:	4613      	mov	r3, r2
 80051b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	da0f      	bge.n	80051e4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	f003 020f 	and.w	r2, r3, #15
 80051ca:	4613      	mov	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	3310      	adds	r3, #16
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	4413      	add	r3, r2
 80051d8:	3304      	adds	r3, #4
 80051da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	705a      	strb	r2, [r3, #1]
 80051e2:	e00f      	b.n	8005204 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	f003 020f 	and.w	r2, r3, #15
 80051ea:	4613      	mov	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	4413      	add	r3, r2
 80051fa:	3304      	adds	r3, #4
 80051fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	b2da      	uxtb	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005210:	883a      	ldrh	r2, [r7, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	78ba      	ldrb	r2, [r7, #2]
 800521a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	785b      	ldrb	r3, [r3, #1]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d004      	beq.n	800522e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800522e:	78bb      	ldrb	r3, [r7, #2]
 8005230:	2b02      	cmp	r3, #2
 8005232:	d102      	bne.n	800523a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_PCD_EP_Open+0xaa>
 8005244:	2302      	movs	r3, #2
 8005246:	e00e      	b.n	8005266 <HAL_PCD_EP_Open+0xc8>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68f9      	ldr	r1, [r7, #12]
 8005256:	4618      	mov	r0, r3
 8005258:	f006 faf4 	bl	800b844 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005264:	7afb      	ldrb	r3, [r7, #11]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	460b      	mov	r3, r1
 8005278:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800527a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800527e:	2b00      	cmp	r3, #0
 8005280:	da0f      	bge.n	80052a2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005282:	78fb      	ldrb	r3, [r7, #3]
 8005284:	f003 020f 	and.w	r2, r3, #15
 8005288:	4613      	mov	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	3310      	adds	r3, #16
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	4413      	add	r3, r2
 8005296:	3304      	adds	r3, #4
 8005298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2201      	movs	r2, #1
 800529e:	705a      	strb	r2, [r3, #1]
 80052a0:	e00f      	b.n	80052c2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052a2:	78fb      	ldrb	r3, [r7, #3]
 80052a4:	f003 020f 	and.w	r2, r3, #15
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	4413      	add	r3, r2
 80052b8:	3304      	adds	r3, #4
 80052ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	f003 030f 	and.w	r3, r3, #15
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_PCD_EP_Close+0x6e>
 80052d8:	2302      	movs	r3, #2
 80052da:	e00e      	b.n	80052fa <HAL_PCD_EP_Close+0x8c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68f9      	ldr	r1, [r7, #12]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f006 fb32 	bl	800b954 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b086      	sub	sp, #24
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
 800530e:	460b      	mov	r3, r1
 8005310:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005312:	7afb      	ldrb	r3, [r7, #11]
 8005314:	f003 020f 	and.w	r2, r3, #15
 8005318:	4613      	mov	r3, r2
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4413      	add	r3, r2
 8005328:	3304      	adds	r3, #4
 800532a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2200      	movs	r2, #0
 800533c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2200      	movs	r2, #0
 8005342:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005344:	7afb      	ldrb	r3, [r7, #11]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	b2da      	uxtb	r2, r3
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	799b      	ldrb	r3, [r3, #6]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d102      	bne.n	800535e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	799b      	ldrb	r3, [r3, #6]
 8005366:	461a      	mov	r2, r3
 8005368:	6979      	ldr	r1, [r7, #20]
 800536a:	f006 fbcf 	bl	800bb0c <USB_EPStartXfer>

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	f003 020f 	and.w	r2, r3, #15
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	4613      	mov	r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800539a:	681b      	ldr	r3, [r3, #0]
}
 800539c:	4618      	mov	r0, r3
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	607a      	str	r2, [r7, #4]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	460b      	mov	r3, r1
 80053b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053b8:	7afb      	ldrb	r3, [r7, #11]
 80053ba:	f003 020f 	and.w	r2, r3, #15
 80053be:	4613      	mov	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	4413      	add	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	3310      	adds	r3, #16
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	3304      	adds	r3, #4
 80053ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2200      	movs	r2, #0
 80053e0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2201      	movs	r2, #1
 80053e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053e8:	7afb      	ldrb	r3, [r7, #11]
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	799b      	ldrb	r3, [r3, #6]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d102      	bne.n	8005402 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	799b      	ldrb	r3, [r3, #6]
 800540a:	461a      	mov	r2, r3
 800540c:	6979      	ldr	r1, [r7, #20]
 800540e:	f006 fb7d 	bl	800bb0c <USB_EPStartXfer>

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	7912      	ldrb	r2, [r2, #4]
 8005432:	4293      	cmp	r3, r2
 8005434:	d901      	bls.n	800543a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e04f      	b.n	80054da <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800543a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800543e:	2b00      	cmp	r3, #0
 8005440:	da0f      	bge.n	8005462 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005442:	78fb      	ldrb	r3, [r7, #3]
 8005444:	f003 020f 	and.w	r2, r3, #15
 8005448:	4613      	mov	r3, r2
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	3310      	adds	r3, #16
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	4413      	add	r3, r2
 8005456:	3304      	adds	r3, #4
 8005458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	705a      	strb	r2, [r3, #1]
 8005460:	e00d      	b.n	800547e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005462:	78fa      	ldrb	r2, [r7, #3]
 8005464:	4613      	mov	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	4413      	add	r3, r2
 8005474:	3304      	adds	r3, #4
 8005476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	b2da      	uxtb	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <HAL_PCD_EP_SetStall+0x82>
 800549a:	2302      	movs	r3, #2
 800549c:	e01d      	b.n	80054da <HAL_PCD_EP_SetStall+0xbe>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68f9      	ldr	r1, [r7, #12]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f006 ff0d 	bl	800c2cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d109      	bne.n	80054d0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6818      	ldr	r0, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	7999      	ldrb	r1, [r3, #6]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80054ca:	461a      	mov	r2, r3
 80054cc:	f007 f900 	bl	800c6d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	460b      	mov	r3, r1
 80054ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80054ee:	78fb      	ldrb	r3, [r7, #3]
 80054f0:	f003 030f 	and.w	r3, r3, #15
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	7912      	ldrb	r2, [r2, #4]
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d901      	bls.n	8005500 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e042      	b.n	8005586 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005504:	2b00      	cmp	r3, #0
 8005506:	da0f      	bge.n	8005528 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005508:	78fb      	ldrb	r3, [r7, #3]
 800550a:	f003 020f 	and.w	r2, r3, #15
 800550e:	4613      	mov	r3, r2
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	3310      	adds	r3, #16
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	4413      	add	r3, r2
 800551c:	3304      	adds	r3, #4
 800551e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	705a      	strb	r2, [r3, #1]
 8005526:	e00f      	b.n	8005548 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	f003 020f 	and.w	r2, r3, #15
 800552e:	4613      	mov	r3, r2
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	4413      	add	r3, r2
 800553e:	3304      	adds	r3, #4
 8005540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800554e:	78fb      	ldrb	r3, [r7, #3]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	b2da      	uxtb	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_PCD_EP_ClrStall+0x86>
 8005564:	2302      	movs	r3, #2
 8005566:	e00e      	b.n	8005586 <HAL_PCD_EP_ClrStall+0xa4>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68f9      	ldr	r1, [r7, #12]
 8005576:	4618      	mov	r0, r3
 8005578:	f006 ff16 	bl	800c3a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	460b      	mov	r3, r1
 8005598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800559a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	da0c      	bge.n	80055bc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055a2:	78fb      	ldrb	r3, [r7, #3]
 80055a4:	f003 020f 	and.w	r2, r3, #15
 80055a8:	4613      	mov	r3, r2
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	3310      	adds	r3, #16
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	4413      	add	r3, r2
 80055b6:	3304      	adds	r3, #4
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	e00c      	b.n	80055d6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	f003 020f 	and.w	r2, r3, #15
 80055c2:	4613      	mov	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	4413      	add	r3, r2
 80055d2:	3304      	adds	r3, #4
 80055d4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68f9      	ldr	r1, [r7, #12]
 80055dc:	4618      	mov	r0, r3
 80055de:	f006 fd35 	bl	800c04c <USB_EPStopXfer>
 80055e2:	4603      	mov	r3, r0
 80055e4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80055e6:	7afb      	ldrb	r3, [r7, #11]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	@ 0x28
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	4613      	mov	r3, r2
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	3310      	adds	r3, #16
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	4413      	add	r3, r2
 8005614:	3304      	adds	r3, #4
 8005616:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	695a      	ldr	r2, [r3, #20]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	429a      	cmp	r2, r3
 8005622:	d901      	bls.n	8005628 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e06b      	b.n	8005700 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	429a      	cmp	r2, r3
 800563c:	d902      	bls.n	8005644 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	3303      	adds	r3, #3
 8005648:	089b      	lsrs	r3, r3, #2
 800564a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800564c:	e02a      	b.n	80056a4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	691a      	ldr	r2, [r3, #16]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	429a      	cmp	r2, r3
 8005662:	d902      	bls.n	800566a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	3303      	adds	r3, #3
 800566e:	089b      	lsrs	r3, r3, #2
 8005670:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	68d9      	ldr	r1, [r3, #12]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	b2da      	uxtb	r2, r3
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	4603      	mov	r3, r0
 8005686:	6978      	ldr	r0, [r7, #20]
 8005688:	f006 fd8a 	bl	800c1a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	441a      	add	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	441a      	add	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d809      	bhi.n	80056ce <PCD_WriteEmptyTxFifo+0xde>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d203      	bcs.n	80056ce <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1bf      	bne.n	800564e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	691a      	ldr	r2, [r3, #16]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d811      	bhi.n	80056fe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	2201      	movs	r2, #1
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	43db      	mvns	r3, r3
 80056f4:	6939      	ldr	r1, [r7, #16]
 80056f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056fa:	4013      	ands	r3, r2
 80056fc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3720      	adds	r7, #32
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	333c      	adds	r3, #60	@ 0x3c
 8005720:	3304      	adds	r3, #4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	799b      	ldrb	r3, [r3, #6]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d17b      	bne.n	8005836 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d015      	beq.n	8005774 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	4a61      	ldr	r2, [pc, #388]	@ (80058d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	f240 80b9 	bls.w	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 80b3 	beq.w	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800576a:	461a      	mov	r2, r3
 800576c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005770:	6093      	str	r3, [r2, #8]
 8005772:	e0a7      	b.n	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f003 0320 	and.w	r3, r3, #32
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578a:	461a      	mov	r2, r3
 800578c:	2320      	movs	r3, #32
 800578e:	6093      	str	r3, [r2, #8]
 8005790:	e098      	b.n	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005798:	2b00      	cmp	r3, #0
 800579a:	f040 8093 	bne.w	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	4a4b      	ldr	r2, [pc, #300]	@ (80058d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d90f      	bls.n	80057c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057bc:	461a      	mov	r2, r3
 80057be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057c2:	6093      	str	r3, [r2, #8]
 80057c4:	e07e      	b.n	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	4613      	mov	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4413      	add	r3, r2
 80057d8:	3304      	adds	r3, #4
 80057da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a1a      	ldr	r2, [r3, #32]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	0159      	lsls	r1, r3, #5
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	440b      	add	r3, r1
 80057e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057f2:	1ad2      	subs	r2, r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d114      	bne.n	8005828 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d109      	bne.n	800581a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005810:	461a      	mov	r2, r3
 8005812:	2101      	movs	r1, #1
 8005814:	f006 ff5c 	bl	800c6d0 <USB_EP0_OutStart>
 8005818:	e006      	b.n	8005828 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	441a      	add	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	b2db      	uxtb	r3, r3
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f00c fa5a 	bl	8011ce8 <HAL_PCD_DataOutStageCallback>
 8005834:	e046      	b.n	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	4a26      	ldr	r2, [pc, #152]	@ (80058d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d124      	bne.n	8005888 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005854:	461a      	mov	r2, r3
 8005856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800585a:	6093      	str	r3, [r2, #8]
 800585c:	e032      	b.n	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b00      	cmp	r3, #0
 8005866:	d008      	beq.n	800587a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005874:	461a      	mov	r2, r3
 8005876:	2320      	movs	r3, #32
 8005878:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f00c fa31 	bl	8011ce8 <HAL_PCD_DataOutStageCallback>
 8005886:	e01d      	b.n	80058c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d114      	bne.n	80058b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	4613      	mov	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d108      	bne.n	80058b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80058b0:	461a      	mov	r2, r3
 80058b2:	2100      	movs	r1, #0
 80058b4:	f006 ff0c 	bl	800c6d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	4619      	mov	r1, r3
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f00c fa12 	bl	8011ce8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3720      	adds	r7, #32
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	4f54300a 	.word	0x4f54300a
 80058d4:	4f54310a 	.word	0x4f54310a

080058d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	333c      	adds	r3, #60	@ 0x3c
 80058f0:	3304      	adds	r3, #4
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4a15      	ldr	r2, [pc, #84]	@ (8005960 <PCD_EP_OutSetupPacket_int+0x88>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d90e      	bls.n	800592c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005914:	2b00      	cmp	r3, #0
 8005916:	d009      	beq.n	800592c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005924:	461a      	mov	r2, r3
 8005926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800592a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f00c f9c9 	bl	8011cc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a0a      	ldr	r2, [pc, #40]	@ (8005960 <PCD_EP_OutSetupPacket_int+0x88>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d90c      	bls.n	8005954 <PCD_EP_OutSetupPacket_int+0x7c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	799b      	ldrb	r3, [r3, #6]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d108      	bne.n	8005954 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800594c:	461a      	mov	r2, r3
 800594e:	2101      	movs	r1, #1
 8005950:	f006 febe 	bl	800c6d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	4f54300a 	.word	0x4f54300a

08005964 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	70fb      	strb	r3, [r7, #3]
 8005970:	4613      	mov	r3, r2
 8005972:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d107      	bne.n	8005992 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005982:	883b      	ldrh	r3, [r7, #0]
 8005984:	0419      	lsls	r1, r3, #16
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	430a      	orrs	r2, r1
 800598e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005990:	e028      	b.n	80059e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005998:	0c1b      	lsrs	r3, r3, #16
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	4413      	add	r3, r2
 800599e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059a0:	2300      	movs	r3, #0
 80059a2:	73fb      	strb	r3, [r7, #15]
 80059a4:	e00d      	b.n	80059c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
 80059ac:	3340      	adds	r3, #64	@ 0x40
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	0c1b      	lsrs	r3, r3, #16
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	4413      	add	r3, r2
 80059ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	3301      	adds	r3, #1
 80059c0:	73fb      	strb	r3, [r7, #15]
 80059c2:	7bfa      	ldrb	r2, [r7, #15]
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d3ec      	bcc.n	80059a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80059cc:	883b      	ldrh	r3, [r7, #0]
 80059ce:	0418      	lsls	r0, r3, #16
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6819      	ldr	r1, [r3, #0]
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	4302      	orrs	r2, r0
 80059dc:	3340      	adds	r3, #64	@ 0x40
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	460b      	mov	r3, r1
 80059fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	887a      	ldrh	r2, [r7, #2]
 8005a04:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a42:	4b05      	ldr	r3, [pc, #20]	@ (8005a58 <HAL_PCDEx_ActivateLPM+0x44>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	10000003 	.word	0x10000003

08005a5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005a7c:	4b19      	ldr	r3, [pc, #100]	@ (8005ae4 <HAL_PWREx_ConfigSupply+0x70>)
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d00a      	beq.n	8005a9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005a88:	4b16      	ldr	r3, [pc, #88]	@ (8005ae4 <HAL_PWREx_ConfigSupply+0x70>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d001      	beq.n	8005a9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e01f      	b.n	8005ada <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e01d      	b.n	8005ada <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005a9e:	4b11      	ldr	r3, [pc, #68]	@ (8005ae4 <HAL_PWREx_ConfigSupply+0x70>)
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f023 0207 	bic.w	r2, r3, #7
 8005aa6:	490f      	ldr	r1, [pc, #60]	@ (8005ae4 <HAL_PWREx_ConfigSupply+0x70>)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005aae:	f7fc fcff 	bl	80024b0 <HAL_GetTick>
 8005ab2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ab4:	e009      	b.n	8005aca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ab6:	f7fc fcfb 	bl	80024b0 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ac4:	d901      	bls.n	8005aca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e007      	b.n	8005ada <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005aca:	4b06      	ldr	r3, [pc, #24]	@ (8005ae4 <HAL_PWREx_ConfigSupply+0x70>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ad6:	d1ee      	bne.n	8005ab6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	58024800 	.word	0x58024800

08005ae8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005aec:	4b05      	ldr	r3, [pc, #20]	@ (8005b04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	4a04      	ldr	r2, [pc, #16]	@ (8005b04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005af2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005af6:	60d3      	str	r3, [r2, #12]
}
 8005af8:	bf00      	nop
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	58024800 	.word	0x58024800

08005b08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08c      	sub	sp, #48	@ 0x30
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d102      	bne.n	8005b1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f000 bc48 	b.w	80063ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 8088 	beq.w	8005c3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b2a:	4b99      	ldr	r3, [pc, #612]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b34:	4b96      	ldr	r3, [pc, #600]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b38:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3c:	2b10      	cmp	r3, #16
 8005b3e:	d007      	beq.n	8005b50 <HAL_RCC_OscConfig+0x48>
 8005b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b42:	2b18      	cmp	r3, #24
 8005b44:	d111      	bne.n	8005b6a <HAL_RCC_OscConfig+0x62>
 8005b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b48:	f003 0303 	and.w	r3, r3, #3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d10c      	bne.n	8005b6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b50:	4b8f      	ldr	r3, [pc, #572]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d06d      	beq.n	8005c38 <HAL_RCC_OscConfig+0x130>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d169      	bne.n	8005c38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f000 bc21 	b.w	80063ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b72:	d106      	bne.n	8005b82 <HAL_RCC_OscConfig+0x7a>
 8005b74:	4b86      	ldr	r3, [pc, #536]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a85      	ldr	r2, [pc, #532]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	e02e      	b.n	8005be0 <HAL_RCC_OscConfig+0xd8>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10c      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x9c>
 8005b8a:	4b81      	ldr	r3, [pc, #516]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a80      	ldr	r2, [pc, #512]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	4b7e      	ldr	r3, [pc, #504]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a7d      	ldr	r2, [pc, #500]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005b9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	e01d      	b.n	8005be0 <HAL_RCC_OscConfig+0xd8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bac:	d10c      	bne.n	8005bc8 <HAL_RCC_OscConfig+0xc0>
 8005bae:	4b78      	ldr	r3, [pc, #480]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a77      	ldr	r2, [pc, #476]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	4b75      	ldr	r3, [pc, #468]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a74      	ldr	r2, [pc, #464]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	e00b      	b.n	8005be0 <HAL_RCC_OscConfig+0xd8>
 8005bc8:	4b71      	ldr	r3, [pc, #452]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a70      	ldr	r2, [pc, #448]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	4b6e      	ldr	r3, [pc, #440]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a6d      	ldr	r2, [pc, #436]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d013      	beq.n	8005c10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be8:	f7fc fc62 	bl	80024b0 <HAL_GetTick>
 8005bec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bf0:	f7fc fc5e 	bl	80024b0 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b64      	cmp	r3, #100	@ 0x64
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e3d4      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c02:	4b63      	ldr	r3, [pc, #396]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0f0      	beq.n	8005bf0 <HAL_RCC_OscConfig+0xe8>
 8005c0e:	e014      	b.n	8005c3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c10:	f7fc fc4e 	bl	80024b0 <HAL_GetTick>
 8005c14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c18:	f7fc fc4a 	bl	80024b0 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b64      	cmp	r3, #100	@ 0x64
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e3c0      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c2a:	4b59      	ldr	r3, [pc, #356]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f0      	bne.n	8005c18 <HAL_RCC_OscConfig+0x110>
 8005c36:	e000      	b.n	8005c3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 80ca 	beq.w	8005ddc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c48:	4b51      	ldr	r3, [pc, #324]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c52:	4b4f      	ldr	r3, [pc, #316]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d007      	beq.n	8005c6e <HAL_RCC_OscConfig+0x166>
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	2b18      	cmp	r3, #24
 8005c62:	d156      	bne.n	8005d12 <HAL_RCC_OscConfig+0x20a>
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d151      	bne.n	8005d12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c6e:	4b48      	ldr	r3, [pc, #288]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0304 	and.w	r3, r3, #4
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d005      	beq.n	8005c86 <HAL_RCC_OscConfig+0x17e>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e392      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c86:	4b42      	ldr	r3, [pc, #264]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f023 0219 	bic.w	r2, r3, #25
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	493f      	ldr	r1, [pc, #252]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c98:	f7fc fc0a 	bl	80024b0 <HAL_GetTick>
 8005c9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca0:	f7fc fc06 	bl	80024b0 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e37c      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cb2:	4b37      	ldr	r3, [pc, #220]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cbe:	f7fc fc27 	bl	8002510 <HAL_GetREVID>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d817      	bhi.n	8005cfc <HAL_RCC_OscConfig+0x1f4>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	2b40      	cmp	r3, #64	@ 0x40
 8005cd2:	d108      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x1de>
 8005cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005cdc:	4a2c      	ldr	r2, [pc, #176]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ce2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ce4:	e07a      	b.n	8005ddc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	031b      	lsls	r3, r3, #12
 8005cf4:	4926      	ldr	r1, [pc, #152]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cfa:	e06f      	b.n	8005ddc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cfc:	4b24      	ldr	r3, [pc, #144]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	061b      	lsls	r3, r3, #24
 8005d0a:	4921      	ldr	r1, [pc, #132]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d10:	e064      	b.n	8005ddc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d047      	beq.n	8005daa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f023 0219 	bic.w	r2, r3, #25
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	491a      	ldr	r1, [pc, #104]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2c:	f7fc fbc0 	bl	80024b0 <HAL_GetTick>
 8005d30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d34:	f7fc fbbc 	bl	80024b0 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e332      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d46:	4b12      	ldr	r3, [pc, #72]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0f0      	beq.n	8005d34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d52:	f7fc fbdd 	bl	8002510 <HAL_GetREVID>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d819      	bhi.n	8005d94 <HAL_RCC_OscConfig+0x28c>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b40      	cmp	r3, #64	@ 0x40
 8005d66:	d108      	bne.n	8005d7a <HAL_RCC_OscConfig+0x272>
 8005d68:	4b09      	ldr	r3, [pc, #36]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005d70:	4a07      	ldr	r2, [pc, #28]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d76:	6053      	str	r3, [r2, #4]
 8005d78:	e030      	b.n	8005ddc <HAL_RCC_OscConfig+0x2d4>
 8005d7a:	4b05      	ldr	r3, [pc, #20]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	031b      	lsls	r3, r3, #12
 8005d88:	4901      	ldr	r1, [pc, #4]	@ (8005d90 <HAL_RCC_OscConfig+0x288>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	604b      	str	r3, [r1, #4]
 8005d8e:	e025      	b.n	8005ddc <HAL_RCC_OscConfig+0x2d4>
 8005d90:	58024400 	.word	0x58024400
 8005d94:	4b9a      	ldr	r3, [pc, #616]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	061b      	lsls	r3, r3, #24
 8005da2:	4997      	ldr	r1, [pc, #604]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	604b      	str	r3, [r1, #4]
 8005da8:	e018      	b.n	8005ddc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005daa:	4b95      	ldr	r3, [pc, #596]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a94      	ldr	r2, [pc, #592]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005db0:	f023 0301 	bic.w	r3, r3, #1
 8005db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db6:	f7fc fb7b 	bl	80024b0 <HAL_GetTick>
 8005dba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dbe:	f7fc fb77 	bl	80024b0 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e2ed      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005dd0:	4b8b      	ldr	r3, [pc, #556]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f0      	bne.n	8005dbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0310 	and.w	r3, r3, #16
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 80a9 	beq.w	8005f3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dea:	4b85      	ldr	r3, [pc, #532]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005df2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005df4:	4b82      	ldr	r3, [pc, #520]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d007      	beq.n	8005e10 <HAL_RCC_OscConfig+0x308>
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	2b18      	cmp	r3, #24
 8005e04:	d13a      	bne.n	8005e7c <HAL_RCC_OscConfig+0x374>
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f003 0303 	and.w	r3, r3, #3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d135      	bne.n	8005e7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e10:	4b7b      	ldr	r3, [pc, #492]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_RCC_OscConfig+0x320>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	2b80      	cmp	r3, #128	@ 0x80
 8005e22:	d001      	beq.n	8005e28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e2c1      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e28:	f7fc fb72 	bl	8002510 <HAL_GetREVID>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d817      	bhi.n	8005e66 <HAL_RCC_OscConfig+0x35e>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	2b20      	cmp	r3, #32
 8005e3c:	d108      	bne.n	8005e50 <HAL_RCC_OscConfig+0x348>
 8005e3e:	4b70      	ldr	r3, [pc, #448]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005e46:	4a6e      	ldr	r2, [pc, #440]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005e48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e4e:	e075      	b.n	8005f3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e50:	4b6b      	ldr	r3, [pc, #428]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	069b      	lsls	r3, r3, #26
 8005e5e:	4968      	ldr	r1, [pc, #416]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e64:	e06a      	b.n	8005f3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e66:	4b66      	ldr	r3, [pc, #408]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	061b      	lsls	r3, r3, #24
 8005e74:	4962      	ldr	r1, [pc, #392]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e7a:	e05f      	b.n	8005f3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d042      	beq.n	8005f0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e84:	4b5e      	ldr	r3, [pc, #376]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a5d      	ldr	r2, [pc, #372]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e90:	f7fc fb0e 	bl	80024b0 <HAL_GetTick>
 8005e94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e98:	f7fc fb0a 	bl	80024b0 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e280      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005eaa:	4b55      	ldr	r3, [pc, #340]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005eb6:	f7fc fb2b 	bl	8002510 <HAL_GetREVID>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d817      	bhi.n	8005ef4 <HAL_RCC_OscConfig+0x3ec>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	d108      	bne.n	8005ede <HAL_RCC_OscConfig+0x3d6>
 8005ecc:	4b4c      	ldr	r3, [pc, #304]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005ed6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005eda:	6053      	str	r3, [r2, #4]
 8005edc:	e02e      	b.n	8005f3c <HAL_RCC_OscConfig+0x434>
 8005ede:	4b48      	ldr	r3, [pc, #288]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	069b      	lsls	r3, r3, #26
 8005eec:	4944      	ldr	r1, [pc, #272]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	604b      	str	r3, [r1, #4]
 8005ef2:	e023      	b.n	8005f3c <HAL_RCC_OscConfig+0x434>
 8005ef4:	4b42      	ldr	r3, [pc, #264]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	061b      	lsls	r3, r3, #24
 8005f02:	493f      	ldr	r1, [pc, #252]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60cb      	str	r3, [r1, #12]
 8005f08:	e018      	b.n	8005f3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a3c      	ldr	r2, [pc, #240]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005f10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f16:	f7fc facb 	bl	80024b0 <HAL_GetTick>
 8005f1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f1c:	e008      	b.n	8005f30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f1e:	f7fc fac7 	bl	80024b0 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d901      	bls.n	8005f30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e23d      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f30:	4b33      	ldr	r3, [pc, #204]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1f0      	bne.n	8005f1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d036      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d019      	beq.n	8005f84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f50:	4b2b      	ldr	r3, [pc, #172]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f54:	4a2a      	ldr	r2, [pc, #168]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005f56:	f043 0301 	orr.w	r3, r3, #1
 8005f5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f5c:	f7fc faa8 	bl	80024b0 <HAL_GetTick>
 8005f60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f64:	f7fc faa4 	bl	80024b0 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e21a      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f76:	4b22      	ldr	r3, [pc, #136]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f0      	beq.n	8005f64 <HAL_RCC_OscConfig+0x45c>
 8005f82:	e018      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f84:	4b1e      	ldr	r3, [pc, #120]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f88:	4a1d      	ldr	r2, [pc, #116]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005f8a:	f023 0301 	bic.w	r3, r3, #1
 8005f8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f90:	f7fc fa8e 	bl	80024b0 <HAL_GetTick>
 8005f94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f98:	f7fc fa8a 	bl	80024b0 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e200      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005faa:	4b15      	ldr	r3, [pc, #84]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f0      	bne.n	8005f98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d039      	beq.n	8006036 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d01c      	beq.n	8006004 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fca:	4b0d      	ldr	r3, [pc, #52]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a0c      	ldr	r2, [pc, #48]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005fd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005fd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fd6:	f7fc fa6b 	bl	80024b0 <HAL_GetTick>
 8005fda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fde:	f7fc fa67 	bl	80024b0 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e1dd      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ff0:	4b03      	ldr	r3, [pc, #12]	@ (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0f0      	beq.n	8005fde <HAL_RCC_OscConfig+0x4d6>
 8005ffc:	e01b      	b.n	8006036 <HAL_RCC_OscConfig+0x52e>
 8005ffe:	bf00      	nop
 8006000:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006004:	4b9b      	ldr	r3, [pc, #620]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a9a      	ldr	r2, [pc, #616]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 800600a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800600e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006010:	f7fc fa4e 	bl	80024b0 <HAL_GetTick>
 8006014:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006016:	e008      	b.n	800602a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006018:	f7fc fa4a 	bl	80024b0 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e1c0      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800602a:	4b92      	ldr	r3, [pc, #584]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1f0      	bne.n	8006018 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0304 	and.w	r3, r3, #4
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 8081 	beq.w	8006146 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006044:	4b8c      	ldr	r3, [pc, #560]	@ (8006278 <HAL_RCC_OscConfig+0x770>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a8b      	ldr	r2, [pc, #556]	@ (8006278 <HAL_RCC_OscConfig+0x770>)
 800604a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800604e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006050:	f7fc fa2e 	bl	80024b0 <HAL_GetTick>
 8006054:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006058:	f7fc fa2a 	bl	80024b0 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b64      	cmp	r3, #100	@ 0x64
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e1a0      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800606a:	4b83      	ldr	r3, [pc, #524]	@ (8006278 <HAL_RCC_OscConfig+0x770>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0f0      	beq.n	8006058 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d106      	bne.n	800608c <HAL_RCC_OscConfig+0x584>
 800607e:	4b7d      	ldr	r3, [pc, #500]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006082:	4a7c      	ldr	r2, [pc, #496]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006084:	f043 0301 	orr.w	r3, r3, #1
 8006088:	6713      	str	r3, [r2, #112]	@ 0x70
 800608a:	e02d      	b.n	80060e8 <HAL_RCC_OscConfig+0x5e0>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10c      	bne.n	80060ae <HAL_RCC_OscConfig+0x5a6>
 8006094:	4b77      	ldr	r3, [pc, #476]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006098:	4a76      	ldr	r2, [pc, #472]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 800609a:	f023 0301 	bic.w	r3, r3, #1
 800609e:	6713      	str	r3, [r2, #112]	@ 0x70
 80060a0:	4b74      	ldr	r3, [pc, #464]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 80060a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a4:	4a73      	ldr	r2, [pc, #460]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 80060a6:	f023 0304 	bic.w	r3, r3, #4
 80060aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ac:	e01c      	b.n	80060e8 <HAL_RCC_OscConfig+0x5e0>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	2b05      	cmp	r3, #5
 80060b4:	d10c      	bne.n	80060d0 <HAL_RCC_OscConfig+0x5c8>
 80060b6:	4b6f      	ldr	r3, [pc, #444]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ba:	4a6e      	ldr	r2, [pc, #440]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 80060bc:	f043 0304 	orr.w	r3, r3, #4
 80060c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80060c2:	4b6c      	ldr	r3, [pc, #432]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c6:	4a6b      	ldr	r2, [pc, #428]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 80060c8:	f043 0301 	orr.w	r3, r3, #1
 80060cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ce:	e00b      	b.n	80060e8 <HAL_RCC_OscConfig+0x5e0>
 80060d0:	4b68      	ldr	r3, [pc, #416]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 80060d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d4:	4a67      	ldr	r2, [pc, #412]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 80060d6:	f023 0301 	bic.w	r3, r3, #1
 80060da:	6713      	str	r3, [r2, #112]	@ 0x70
 80060dc:	4b65      	ldr	r3, [pc, #404]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 80060de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e0:	4a64      	ldr	r2, [pc, #400]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 80060e2:	f023 0304 	bic.w	r3, r3, #4
 80060e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d015      	beq.n	800611c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f0:	f7fc f9de 	bl	80024b0 <HAL_GetTick>
 80060f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060f6:	e00a      	b.n	800610e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f8:	f7fc f9da 	bl	80024b0 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006106:	4293      	cmp	r3, r2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e14e      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800610e:	4b59      	ldr	r3, [pc, #356]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0ee      	beq.n	80060f8 <HAL_RCC_OscConfig+0x5f0>
 800611a:	e014      	b.n	8006146 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611c:	f7fc f9c8 	bl	80024b0 <HAL_GetTick>
 8006120:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006122:	e00a      	b.n	800613a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006124:	f7fc f9c4 	bl	80024b0 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006132:	4293      	cmp	r3, r2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e138      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800613a:	4b4e      	ldr	r3, [pc, #312]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 800613c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1ee      	bne.n	8006124 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 812d 	beq.w	80063aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006150:	4b48      	ldr	r3, [pc, #288]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006158:	2b18      	cmp	r3, #24
 800615a:	f000 80bd 	beq.w	80062d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006162:	2b02      	cmp	r3, #2
 8006164:	f040 809e 	bne.w	80062a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006168:	4b42      	ldr	r3, [pc, #264]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a41      	ldr	r2, [pc, #260]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 800616e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006174:	f7fc f99c 	bl	80024b0 <HAL_GetTick>
 8006178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800617c:	f7fc f998 	bl	80024b0 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e10e      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800618e:	4b39      	ldr	r3, [pc, #228]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1f0      	bne.n	800617c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800619a:	4b36      	ldr	r3, [pc, #216]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 800619c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800619e:	4b37      	ldr	r3, [pc, #220]	@ (800627c <HAL_RCC_OscConfig+0x774>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80061aa:	0112      	lsls	r2, r2, #4
 80061ac:	430a      	orrs	r2, r1
 80061ae:	4931      	ldr	r1, [pc, #196]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b8:	3b01      	subs	r3, #1
 80061ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c2:	3b01      	subs	r3, #1
 80061c4:	025b      	lsls	r3, r3, #9
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	431a      	orrs	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ce:	3b01      	subs	r3, #1
 80061d0:	041b      	lsls	r3, r3, #16
 80061d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061dc:	3b01      	subs	r3, #1
 80061de:	061b      	lsls	r3, r3, #24
 80061e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061e4:	4923      	ldr	r1, [pc, #140]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80061ea:	4b22      	ldr	r3, [pc, #136]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 80061ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ee:	4a21      	ldr	r2, [pc, #132]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 80061f0:	f023 0301 	bic.w	r3, r3, #1
 80061f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061f6:	4b1f      	ldr	r3, [pc, #124]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 80061f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061fa:	4b21      	ldr	r3, [pc, #132]	@ (8006280 <HAL_RCC_OscConfig+0x778>)
 80061fc:	4013      	ands	r3, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006202:	00d2      	lsls	r2, r2, #3
 8006204:	491b      	ldr	r1, [pc, #108]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006206:	4313      	orrs	r3, r2
 8006208:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800620a:	4b1a      	ldr	r3, [pc, #104]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 800620c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620e:	f023 020c 	bic.w	r2, r3, #12
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006216:	4917      	ldr	r1, [pc, #92]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006218:	4313      	orrs	r3, r2
 800621a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800621c:	4b15      	ldr	r3, [pc, #84]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 800621e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006220:	f023 0202 	bic.w	r2, r3, #2
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006228:	4912      	ldr	r1, [pc, #72]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 800622a:	4313      	orrs	r3, r2
 800622c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800622e:	4b11      	ldr	r3, [pc, #68]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006232:	4a10      	ldr	r2, [pc, #64]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006238:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800623a:	4b0e      	ldr	r3, [pc, #56]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 800623c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623e:	4a0d      	ldr	r2, [pc, #52]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006244:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006246:	4b0b      	ldr	r3, [pc, #44]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624a:	4a0a      	ldr	r2, [pc, #40]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 800624c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006250:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006252:	4b08      	ldr	r3, [pc, #32]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006256:	4a07      	ldr	r2, [pc, #28]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006258:	f043 0301 	orr.w	r3, r3, #1
 800625c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800625e:	4b05      	ldr	r3, [pc, #20]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a04      	ldr	r2, [pc, #16]	@ (8006274 <HAL_RCC_OscConfig+0x76c>)
 8006264:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626a:	f7fc f921 	bl	80024b0 <HAL_GetTick>
 800626e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006270:	e011      	b.n	8006296 <HAL_RCC_OscConfig+0x78e>
 8006272:	bf00      	nop
 8006274:	58024400 	.word	0x58024400
 8006278:	58024800 	.word	0x58024800
 800627c:	fffffc0c 	.word	0xfffffc0c
 8006280:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006284:	f7fc f914 	bl	80024b0 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e08a      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006296:	4b47      	ldr	r3, [pc, #284]	@ (80063b4 <HAL_RCC_OscConfig+0x8ac>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0f0      	beq.n	8006284 <HAL_RCC_OscConfig+0x77c>
 80062a2:	e082      	b.n	80063aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062a4:	4b43      	ldr	r3, [pc, #268]	@ (80063b4 <HAL_RCC_OscConfig+0x8ac>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a42      	ldr	r2, [pc, #264]	@ (80063b4 <HAL_RCC_OscConfig+0x8ac>)
 80062aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b0:	f7fc f8fe 	bl	80024b0 <HAL_GetTick>
 80062b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b8:	f7fc f8fa 	bl	80024b0 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e070      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062ca:	4b3a      	ldr	r3, [pc, #232]	@ (80063b4 <HAL_RCC_OscConfig+0x8ac>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1f0      	bne.n	80062b8 <HAL_RCC_OscConfig+0x7b0>
 80062d6:	e068      	b.n	80063aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80062d8:	4b36      	ldr	r3, [pc, #216]	@ (80063b4 <HAL_RCC_OscConfig+0x8ac>)
 80062da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80062de:	4b35      	ldr	r3, [pc, #212]	@ (80063b4 <HAL_RCC_OscConfig+0x8ac>)
 80062e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d031      	beq.n	8006350 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f003 0203 	and.w	r2, r3, #3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d12a      	bne.n	8006350 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	091b      	lsrs	r3, r3, #4
 80062fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006306:	429a      	cmp	r2, r3
 8006308:	d122      	bne.n	8006350 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006314:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006316:	429a      	cmp	r2, r3
 8006318:	d11a      	bne.n	8006350 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	0a5b      	lsrs	r3, r3, #9
 800631e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006326:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006328:	429a      	cmp	r2, r3
 800632a:	d111      	bne.n	8006350 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	0c1b      	lsrs	r3, r3, #16
 8006330:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006338:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800633a:	429a      	cmp	r2, r3
 800633c:	d108      	bne.n	8006350 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	0e1b      	lsrs	r3, r3, #24
 8006342:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800634a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800634c:	429a      	cmp	r2, r3
 800634e:	d001      	beq.n	8006354 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e02b      	b.n	80063ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006354:	4b17      	ldr	r3, [pc, #92]	@ (80063b4 <HAL_RCC_OscConfig+0x8ac>)
 8006356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006358:	08db      	lsrs	r3, r3, #3
 800635a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800635e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	429a      	cmp	r2, r3
 8006368:	d01f      	beq.n	80063aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800636a:	4b12      	ldr	r3, [pc, #72]	@ (80063b4 <HAL_RCC_OscConfig+0x8ac>)
 800636c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636e:	4a11      	ldr	r2, [pc, #68]	@ (80063b4 <HAL_RCC_OscConfig+0x8ac>)
 8006370:	f023 0301 	bic.w	r3, r3, #1
 8006374:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006376:	f7fc f89b 	bl	80024b0 <HAL_GetTick>
 800637a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800637c:	bf00      	nop
 800637e:	f7fc f897 	bl	80024b0 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	4293      	cmp	r3, r2
 8006388:	d0f9      	beq.n	800637e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800638a:	4b0a      	ldr	r3, [pc, #40]	@ (80063b4 <HAL_RCC_OscConfig+0x8ac>)
 800638c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800638e:	4b0a      	ldr	r3, [pc, #40]	@ (80063b8 <HAL_RCC_OscConfig+0x8b0>)
 8006390:	4013      	ands	r3, r2
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006396:	00d2      	lsls	r2, r2, #3
 8006398:	4906      	ldr	r1, [pc, #24]	@ (80063b4 <HAL_RCC_OscConfig+0x8ac>)
 800639a:	4313      	orrs	r3, r2
 800639c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800639e:	4b05      	ldr	r3, [pc, #20]	@ (80063b4 <HAL_RCC_OscConfig+0x8ac>)
 80063a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a2:	4a04      	ldr	r2, [pc, #16]	@ (80063b4 <HAL_RCC_OscConfig+0x8ac>)
 80063a4:	f043 0301 	orr.w	r3, r3, #1
 80063a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3730      	adds	r7, #48	@ 0x30
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	58024400 	.word	0x58024400
 80063b8:	ffff0007 	.word	0xffff0007

080063bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e19c      	b.n	800670a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063d0:	4b8a      	ldr	r3, [pc, #552]	@ (80065fc <HAL_RCC_ClockConfig+0x240>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d910      	bls.n	8006400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063de:	4b87      	ldr	r3, [pc, #540]	@ (80065fc <HAL_RCC_ClockConfig+0x240>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f023 020f 	bic.w	r2, r3, #15
 80063e6:	4985      	ldr	r1, [pc, #532]	@ (80065fc <HAL_RCC_ClockConfig+0x240>)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ee:	4b83      	ldr	r3, [pc, #524]	@ (80065fc <HAL_RCC_ClockConfig+0x240>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 030f 	and.w	r3, r3, #15
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d001      	beq.n	8006400 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e184      	b.n	800670a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	d010      	beq.n	800642e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	4b7b      	ldr	r3, [pc, #492]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006418:	429a      	cmp	r2, r3
 800641a:	d908      	bls.n	800642e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800641c:	4b78      	ldr	r3, [pc, #480]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	4975      	ldr	r1, [pc, #468]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800642a:	4313      	orrs	r3, r2
 800642c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d010      	beq.n	800645c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	695a      	ldr	r2, [r3, #20]
 800643e:	4b70      	ldr	r3, [pc, #448]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006446:	429a      	cmp	r2, r3
 8006448:	d908      	bls.n	800645c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800644a:	4b6d      	ldr	r3, [pc, #436]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	496a      	ldr	r1, [pc, #424]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 8006458:	4313      	orrs	r3, r2
 800645a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	d010      	beq.n	800648a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699a      	ldr	r2, [r3, #24]
 800646c:	4b64      	ldr	r3, [pc, #400]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006474:	429a      	cmp	r2, r3
 8006476:	d908      	bls.n	800648a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006478:	4b61      	ldr	r3, [pc, #388]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	495e      	ldr	r1, [pc, #376]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 8006486:	4313      	orrs	r3, r2
 8006488:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b00      	cmp	r3, #0
 8006494:	d010      	beq.n	80064b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69da      	ldr	r2, [r3, #28]
 800649a:	4b59      	ldr	r3, [pc, #356]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d908      	bls.n	80064b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80064a6:	4b56      	ldr	r3, [pc, #344]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	4953      	ldr	r1, [pc, #332]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d010      	beq.n	80064e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	4b4d      	ldr	r3, [pc, #308]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d908      	bls.n	80064e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064d4:	4b4a      	ldr	r3, [pc, #296]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f023 020f 	bic.w	r2, r3, #15
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	4947      	ldr	r1, [pc, #284]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d055      	beq.n	800659e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80064f2:	4b43      	ldr	r3, [pc, #268]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	4940      	ldr	r1, [pc, #256]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 8006500:	4313      	orrs	r3, r2
 8006502:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	2b02      	cmp	r3, #2
 800650a:	d107      	bne.n	800651c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800650c:	4b3c      	ldr	r3, [pc, #240]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d121      	bne.n	800655c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e0f6      	b.n	800670a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b03      	cmp	r3, #3
 8006522:	d107      	bne.n	8006534 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006524:	4b36      	ldr	r3, [pc, #216]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d115      	bne.n	800655c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e0ea      	b.n	800670a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d107      	bne.n	800654c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800653c:	4b30      	ldr	r3, [pc, #192]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006544:	2b00      	cmp	r3, #0
 8006546:	d109      	bne.n	800655c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e0de      	b.n	800670a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800654c:	4b2c      	ldr	r3, [pc, #176]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e0d6      	b.n	800670a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800655c:	4b28      	ldr	r3, [pc, #160]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	f023 0207 	bic.w	r2, r3, #7
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	4925      	ldr	r1, [pc, #148]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800656a:	4313      	orrs	r3, r2
 800656c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800656e:	f7fb ff9f 	bl	80024b0 <HAL_GetTick>
 8006572:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006574:	e00a      	b.n	800658c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006576:	f7fb ff9b 	bl	80024b0 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006584:	4293      	cmp	r3, r2
 8006586:	d901      	bls.n	800658c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e0be      	b.n	800670a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800658c:	4b1c      	ldr	r3, [pc, #112]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	00db      	lsls	r3, r3, #3
 800659a:	429a      	cmp	r2, r3
 800659c:	d1eb      	bne.n	8006576 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d010      	beq.n	80065cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	4b14      	ldr	r3, [pc, #80]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d208      	bcs.n	80065cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065ba:	4b11      	ldr	r3, [pc, #68]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f023 020f 	bic.w	r2, r3, #15
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	490e      	ldr	r1, [pc, #56]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065cc:	4b0b      	ldr	r3, [pc, #44]	@ (80065fc <HAL_RCC_ClockConfig+0x240>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 030f 	and.w	r3, r3, #15
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d214      	bcs.n	8006604 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065da:	4b08      	ldr	r3, [pc, #32]	@ (80065fc <HAL_RCC_ClockConfig+0x240>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f023 020f 	bic.w	r2, r3, #15
 80065e2:	4906      	ldr	r1, [pc, #24]	@ (80065fc <HAL_RCC_ClockConfig+0x240>)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ea:	4b04      	ldr	r3, [pc, #16]	@ (80065fc <HAL_RCC_ClockConfig+0x240>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d005      	beq.n	8006604 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e086      	b.n	800670a <HAL_RCC_ClockConfig+0x34e>
 80065fc:	52002000 	.word	0x52002000
 8006600:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d010      	beq.n	8006632 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	4b3f      	ldr	r3, [pc, #252]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800661c:	429a      	cmp	r2, r3
 800661e:	d208      	bcs.n	8006632 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006620:	4b3c      	ldr	r3, [pc, #240]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	4939      	ldr	r1, [pc, #228]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 800662e:	4313      	orrs	r3, r2
 8006630:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0308 	and.w	r3, r3, #8
 800663a:	2b00      	cmp	r3, #0
 800663c:	d010      	beq.n	8006660 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	695a      	ldr	r2, [r3, #20]
 8006642:	4b34      	ldr	r3, [pc, #208]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800664a:	429a      	cmp	r2, r3
 800664c:	d208      	bcs.n	8006660 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800664e:	4b31      	ldr	r3, [pc, #196]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	492e      	ldr	r1, [pc, #184]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 800665c:	4313      	orrs	r3, r2
 800665e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b00      	cmp	r3, #0
 800666a:	d010      	beq.n	800668e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699a      	ldr	r2, [r3, #24]
 8006670:	4b28      	ldr	r3, [pc, #160]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006678:	429a      	cmp	r2, r3
 800667a:	d208      	bcs.n	800668e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800667c:	4b25      	ldr	r3, [pc, #148]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	4922      	ldr	r1, [pc, #136]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 800668a:	4313      	orrs	r3, r2
 800668c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d010      	beq.n	80066bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69da      	ldr	r2, [r3, #28]
 800669e:	4b1d      	ldr	r3, [pc, #116]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d208      	bcs.n	80066bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	4917      	ldr	r1, [pc, #92]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80066bc:	f000 f834 	bl	8006728 <HAL_RCC_GetSysClockFreq>
 80066c0:	4602      	mov	r2, r0
 80066c2:	4b14      	ldr	r3, [pc, #80]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	0a1b      	lsrs	r3, r3, #8
 80066c8:	f003 030f 	and.w	r3, r3, #15
 80066cc:	4912      	ldr	r1, [pc, #72]	@ (8006718 <HAL_RCC_ClockConfig+0x35c>)
 80066ce:	5ccb      	ldrb	r3, [r1, r3]
 80066d0:	f003 031f 	and.w	r3, r3, #31
 80066d4:	fa22 f303 	lsr.w	r3, r2, r3
 80066d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066da:	4b0e      	ldr	r3, [pc, #56]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006718 <HAL_RCC_ClockConfig+0x35c>)
 80066e4:	5cd3      	ldrb	r3, [r2, r3]
 80066e6:	f003 031f 	and.w	r3, r3, #31
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	fa22 f303 	lsr.w	r3, r2, r3
 80066f0:	4a0a      	ldr	r2, [pc, #40]	@ (800671c <HAL_RCC_ClockConfig+0x360>)
 80066f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006720 <HAL_RCC_ClockConfig+0x364>)
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80066fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006724 <HAL_RCC_ClockConfig+0x368>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fa ff26 	bl	8001550 <HAL_InitTick>
 8006704:	4603      	mov	r3, r0
 8006706:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	58024400 	.word	0x58024400
 8006718:	08012550 	.word	0x08012550
 800671c:	24000004 	.word	0x24000004
 8006720:	24000000 	.word	0x24000000
 8006724:	24000008 	.word	0x24000008

08006728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006728:	b480      	push	{r7}
 800672a:	b089      	sub	sp, #36	@ 0x24
 800672c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800672e:	4bb3      	ldr	r3, [pc, #716]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006736:	2b18      	cmp	r3, #24
 8006738:	f200 8155 	bhi.w	80069e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800673c:	a201      	add	r2, pc, #4	@ (adr r2, 8006744 <HAL_RCC_GetSysClockFreq+0x1c>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	080067a9 	.word	0x080067a9
 8006748:	080069e7 	.word	0x080069e7
 800674c:	080069e7 	.word	0x080069e7
 8006750:	080069e7 	.word	0x080069e7
 8006754:	080069e7 	.word	0x080069e7
 8006758:	080069e7 	.word	0x080069e7
 800675c:	080069e7 	.word	0x080069e7
 8006760:	080069e7 	.word	0x080069e7
 8006764:	080067cf 	.word	0x080067cf
 8006768:	080069e7 	.word	0x080069e7
 800676c:	080069e7 	.word	0x080069e7
 8006770:	080069e7 	.word	0x080069e7
 8006774:	080069e7 	.word	0x080069e7
 8006778:	080069e7 	.word	0x080069e7
 800677c:	080069e7 	.word	0x080069e7
 8006780:	080069e7 	.word	0x080069e7
 8006784:	080067d5 	.word	0x080067d5
 8006788:	080069e7 	.word	0x080069e7
 800678c:	080069e7 	.word	0x080069e7
 8006790:	080069e7 	.word	0x080069e7
 8006794:	080069e7 	.word	0x080069e7
 8006798:	080069e7 	.word	0x080069e7
 800679c:	080069e7 	.word	0x080069e7
 80067a0:	080069e7 	.word	0x080069e7
 80067a4:	080067db 	.word	0x080067db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067a8:	4b94      	ldr	r3, [pc, #592]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0320 	and.w	r3, r3, #32
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d009      	beq.n	80067c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067b4:	4b91      	ldr	r3, [pc, #580]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	08db      	lsrs	r3, r3, #3
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	4a90      	ldr	r2, [pc, #576]	@ (8006a00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067c0:	fa22 f303 	lsr.w	r3, r2, r3
 80067c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80067c6:	e111      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80067c8:	4b8d      	ldr	r3, [pc, #564]	@ (8006a00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067ca:	61bb      	str	r3, [r7, #24]
      break;
 80067cc:	e10e      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80067ce:	4b8d      	ldr	r3, [pc, #564]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80067d0:	61bb      	str	r3, [r7, #24]
      break;
 80067d2:	e10b      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80067d4:	4b8c      	ldr	r3, [pc, #560]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80067d6:	61bb      	str	r3, [r7, #24]
      break;
 80067d8:	e108      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067da:	4b88      	ldr	r3, [pc, #544]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80067e4:	4b85      	ldr	r3, [pc, #532]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e8:	091b      	lsrs	r3, r3, #4
 80067ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80067f0:	4b82      	ldr	r3, [pc, #520]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80067fa:	4b80      	ldr	r3, [pc, #512]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067fe:	08db      	lsrs	r3, r3, #3
 8006800:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	fb02 f303 	mul.w	r3, r2, r3
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006812:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 80e1 	beq.w	80069e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b02      	cmp	r3, #2
 8006822:	f000 8083 	beq.w	800692c <HAL_RCC_GetSysClockFreq+0x204>
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b02      	cmp	r3, #2
 800682a:	f200 80a1 	bhi.w	8006970 <HAL_RCC_GetSysClockFreq+0x248>
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <HAL_RCC_GetSysClockFreq+0x114>
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d056      	beq.n	80068e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800683a:	e099      	b.n	8006970 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800683c:	4b6f      	ldr	r3, [pc, #444]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b00      	cmp	r3, #0
 8006846:	d02d      	beq.n	80068a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006848:	4b6c      	ldr	r3, [pc, #432]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	08db      	lsrs	r3, r3, #3
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	4a6b      	ldr	r2, [pc, #428]	@ (8006a00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006854:	fa22 f303 	lsr.w	r3, r2, r3
 8006858:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	ee07 3a90 	vmov	s15, r3
 8006860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006872:	4b62      	ldr	r3, [pc, #392]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687a:	ee07 3a90 	vmov	s15, r3
 800687e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006882:	ed97 6a02 	vldr	s12, [r7, #8]
 8006886:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800688a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800688e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800689a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800689e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80068a2:	e087      	b.n	80069b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	ee07 3a90 	vmov	s15, r3
 80068aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006a10 <HAL_RCC_GetSysClockFreq+0x2e8>
 80068b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068b6:	4b51      	ldr	r3, [pc, #324]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 80068ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068e6:	e065      	b.n	80069b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	ee07 3a90 	vmov	s15, r3
 80068ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006a14 <HAL_RCC_GetSysClockFreq+0x2ec>
 80068f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068fa:	4b40      	ldr	r3, [pc, #256]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800690a:	ed97 6a02 	vldr	s12, [r7, #8]
 800690e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800691a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800691e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006926:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800692a:	e043      	b.n	80069b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006936:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006a18 <HAL_RCC_GetSysClockFreq+0x2f0>
 800693a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800693e:	4b2f      	ldr	r3, [pc, #188]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800694e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006952:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800695a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800695e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800696a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800696e:	e021      	b.n	80069b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	ee07 3a90 	vmov	s15, r3
 8006976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006a14 <HAL_RCC_GetSysClockFreq+0x2ec>
 800697e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006982:	4b1e      	ldr	r3, [pc, #120]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006992:	ed97 6a02 	vldr	s12, [r7, #8]
 8006996:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800699a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800699e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80069b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80069b4:	4b11      	ldr	r3, [pc, #68]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b8:	0a5b      	lsrs	r3, r3, #9
 80069ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069be:	3301      	adds	r3, #1
 80069c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	ee07 3a90 	vmov	s15, r3
 80069c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80069d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069d8:	ee17 3a90 	vmov	r3, s15
 80069dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80069de:	e005      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	61bb      	str	r3, [r7, #24]
      break;
 80069e4:	e002      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80069e6:	4b07      	ldr	r3, [pc, #28]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069e8:	61bb      	str	r3, [r7, #24]
      break;
 80069ea:	bf00      	nop
  }

  return sysclockfreq;
 80069ec:	69bb      	ldr	r3, [r7, #24]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3724      	adds	r7, #36	@ 0x24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	58024400 	.word	0x58024400
 8006a00:	03d09000 	.word	0x03d09000
 8006a04:	003d0900 	.word	0x003d0900
 8006a08:	017d7840 	.word	0x017d7840
 8006a0c:	46000000 	.word	0x46000000
 8006a10:	4c742400 	.word	0x4c742400
 8006a14:	4a742400 	.word	0x4a742400
 8006a18:	4bbebc20 	.word	0x4bbebc20

08006a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006a22:	f7ff fe81 	bl	8006728 <HAL_RCC_GetSysClockFreq>
 8006a26:	4602      	mov	r2, r0
 8006a28:	4b10      	ldr	r3, [pc, #64]	@ (8006a6c <HAL_RCC_GetHCLKFreq+0x50>)
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	0a1b      	lsrs	r3, r3, #8
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	490f      	ldr	r1, [pc, #60]	@ (8006a70 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a34:	5ccb      	ldrb	r3, [r1, r3]
 8006a36:	f003 031f 	and.w	r3, r3, #31
 8006a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a40:	4b0a      	ldr	r3, [pc, #40]	@ (8006a6c <HAL_RCC_GetHCLKFreq+0x50>)
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	f003 030f 	and.w	r3, r3, #15
 8006a48:	4a09      	ldr	r2, [pc, #36]	@ (8006a70 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a4a:	5cd3      	ldrb	r3, [r2, r3]
 8006a4c:	f003 031f 	and.w	r3, r3, #31
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	fa22 f303 	lsr.w	r3, r2, r3
 8006a56:	4a07      	ldr	r2, [pc, #28]	@ (8006a74 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a5a:	4a07      	ldr	r2, [pc, #28]	@ (8006a78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006a60:	4b04      	ldr	r3, [pc, #16]	@ (8006a74 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a62:	681b      	ldr	r3, [r3, #0]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	58024400 	.word	0x58024400
 8006a70:	08012550 	.word	0x08012550
 8006a74:	24000004 	.word	0x24000004
 8006a78:	24000000 	.word	0x24000000

08006a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006a80:	f7ff ffcc 	bl	8006a1c <HAL_RCC_GetHCLKFreq>
 8006a84:	4602      	mov	r2, r0
 8006a86:	4b06      	ldr	r3, [pc, #24]	@ (8006aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	091b      	lsrs	r3, r3, #4
 8006a8c:	f003 0307 	and.w	r3, r3, #7
 8006a90:	4904      	ldr	r1, [pc, #16]	@ (8006aa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a92:	5ccb      	ldrb	r3, [r1, r3]
 8006a94:	f003 031f 	and.w	r3, r3, #31
 8006a98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	58024400 	.word	0x58024400
 8006aa4:	08012550 	.word	0x08012550

08006aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006aac:	f7ff ffb6 	bl	8006a1c <HAL_RCC_GetHCLKFreq>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	4b06      	ldr	r3, [pc, #24]	@ (8006acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	0a1b      	lsrs	r3, r3, #8
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	4904      	ldr	r1, [pc, #16]	@ (8006ad0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006abe:	5ccb      	ldrb	r3, [r1, r3]
 8006ac0:	f003 031f 	and.w	r3, r3, #31
 8006ac4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	58024400 	.word	0x58024400
 8006ad0:	08012550 	.word	0x08012550

08006ad4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	223f      	movs	r2, #63	@ 0x3f
 8006ae2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8006b50 <HAL_RCC_GetClockConfig+0x7c>)
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f003 0207 	and.w	r2, r3, #7
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006af0:	4b17      	ldr	r3, [pc, #92]	@ (8006b50 <HAL_RCC_GetClockConfig+0x7c>)
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006afc:	4b14      	ldr	r3, [pc, #80]	@ (8006b50 <HAL_RCC_GetClockConfig+0x7c>)
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	f003 020f 	and.w	r2, r3, #15
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006b08:	4b11      	ldr	r3, [pc, #68]	@ (8006b50 <HAL_RCC_GetClockConfig+0x7c>)
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006b14:	4b0e      	ldr	r3, [pc, #56]	@ (8006b50 <HAL_RCC_GetClockConfig+0x7c>)
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006b20:	4b0b      	ldr	r3, [pc, #44]	@ (8006b50 <HAL_RCC_GetClockConfig+0x7c>)
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006b2c:	4b08      	ldr	r3, [pc, #32]	@ (8006b50 <HAL_RCC_GetClockConfig+0x7c>)
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b38:	4b06      	ldr	r3, [pc, #24]	@ (8006b54 <HAL_RCC_GetClockConfig+0x80>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 020f 	and.w	r2, r3, #15
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	601a      	str	r2, [r3, #0]
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	58024400 	.word	0x58024400
 8006b54:	52002000 	.word	0x52002000

08006b58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b5c:	b0c8      	sub	sp, #288	@ 0x120
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b64:	2300      	movs	r3, #0
 8006b66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006b7c:	2500      	movs	r5, #0
 8006b7e:	ea54 0305 	orrs.w	r3, r4, r5
 8006b82:	d049      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b8e:	d02f      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006b90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b94:	d828      	bhi.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b9a:	d01a      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006b9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ba0:	d822      	bhi.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006ba6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006baa:	d007      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bac:	e01c      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bae:	4bb8      	ldr	r3, [pc, #736]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb2:	4ab7      	ldr	r2, [pc, #732]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006bba:	e01a      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	2102      	movs	r1, #2
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f002 fb45 	bl	8009254 <RCCEx_PLL2_Config>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006bd0:	e00f      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bd6:	3328      	adds	r3, #40	@ 0x28
 8006bd8:	2102      	movs	r1, #2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f002 fbec 	bl	80093b8 <RCCEx_PLL3_Config>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006be6:	e004      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006bee:	e000      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10a      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006bfa:	4ba5      	ldr	r3, [pc, #660]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bfe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c08:	4aa1      	ldr	r2, [pc, #644]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c0a:	430b      	orrs	r3, r1
 8006c0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c0e:	e003      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006c24:	f04f 0900 	mov.w	r9, #0
 8006c28:	ea58 0309 	orrs.w	r3, r8, r9
 8006c2c:	d047      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d82a      	bhi.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006c38:	a201      	add	r2, pc, #4	@ (adr r2, 8006c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006c55 	.word	0x08006c55
 8006c44:	08006c63 	.word	0x08006c63
 8006c48:	08006c79 	.word	0x08006c79
 8006c4c:	08006c97 	.word	0x08006c97
 8006c50:	08006c97 	.word	0x08006c97
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c54:	4b8e      	ldr	r3, [pc, #568]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c58:	4a8d      	ldr	r2, [pc, #564]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c60:	e01a      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c66:	3308      	adds	r3, #8
 8006c68:	2100      	movs	r1, #0
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f002 faf2 	bl	8009254 <RCCEx_PLL2_Config>
 8006c70:	4603      	mov	r3, r0
 8006c72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c76:	e00f      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c7c:	3328      	adds	r3, #40	@ 0x28
 8006c7e:	2100      	movs	r1, #0
 8006c80:	4618      	mov	r0, r3
 8006c82:	f002 fb99 	bl	80093b8 <RCCEx_PLL3_Config>
 8006c86:	4603      	mov	r3, r0
 8006c88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c8c:	e004      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006c94:	e000      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006c96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ca0:	4b7b      	ldr	r3, [pc, #492]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ca4:	f023 0107 	bic.w	r1, r3, #7
 8006ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cae:	4a78      	ldr	r2, [pc, #480]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cb0:	430b      	orrs	r3, r1
 8006cb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006cb4:	e003      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006cca:	f04f 0b00 	mov.w	fp, #0
 8006cce:	ea5a 030b 	orrs.w	r3, sl, fp
 8006cd2:	d04c      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cde:	d030      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006ce0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ce4:	d829      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ce6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ce8:	d02d      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006cea:	2bc0      	cmp	r3, #192	@ 0xc0
 8006cec:	d825      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006cee:	2b80      	cmp	r3, #128	@ 0x80
 8006cf0:	d018      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006cf2:	2b80      	cmp	r3, #128	@ 0x80
 8006cf4:	d821      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006cfa:	2b40      	cmp	r3, #64	@ 0x40
 8006cfc:	d007      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006cfe:	e01c      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d00:	4b63      	ldr	r3, [pc, #396]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d04:	4a62      	ldr	r2, [pc, #392]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d0c:	e01c      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d12:	3308      	adds	r3, #8
 8006d14:	2100      	movs	r1, #0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f002 fa9c 	bl	8009254 <RCCEx_PLL2_Config>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d22:	e011      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d28:	3328      	adds	r3, #40	@ 0x28
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f002 fb43 	bl	80093b8 <RCCEx_PLL3_Config>
 8006d32:	4603      	mov	r3, r0
 8006d34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d38:	e006      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006d40:	e002      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006d42:	bf00      	nop
 8006d44:	e000      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10a      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006d50:	4b4f      	ldr	r3, [pc, #316]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d54:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d5e:	4a4c      	ldr	r2, [pc, #304]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d60:	430b      	orrs	r3, r1
 8006d62:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d64:	e003      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006d7a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006d84:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	d053      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006d96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d9a:	d035      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006d9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006da0:	d82e      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006da2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006da6:	d031      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006da8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006dac:	d828      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006db2:	d01a      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006db4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006db8:	d822      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006dbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006dc2:	d007      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006dc4:	e01c      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dc6:	4b32      	ldr	r3, [pc, #200]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dca:	4a31      	ldr	r2, [pc, #196]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dd2:	e01c      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dd8:	3308      	adds	r3, #8
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f002 fa39 	bl	8009254 <RCCEx_PLL2_Config>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006de8:	e011      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dee:	3328      	adds	r3, #40	@ 0x28
 8006df0:	2100      	movs	r1, #0
 8006df2:	4618      	mov	r0, r3
 8006df4:	f002 fae0 	bl	80093b8 <RCCEx_PLL3_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dfe:	e006      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e06:	e002      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006e08:	bf00      	nop
 8006e0a:	e000      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10b      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e16:	4b1e      	ldr	r3, [pc, #120]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e1a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e26:	4a1a      	ldr	r2, [pc, #104]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e2c:	e003      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006e42:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006e46:	2300      	movs	r3, #0
 8006e48:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006e4c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006e50:	460b      	mov	r3, r1
 8006e52:	4313      	orrs	r3, r2
 8006e54:	d056      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e62:	d038      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006e64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e68:	d831      	bhi.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e6a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e6e:	d034      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006e70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e74:	d82b      	bhi.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e7a:	d01d      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006e7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e80:	d825      	bhi.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d006      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006e86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e8a:	d00a      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006e8c:	e01f      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e8e:	bf00      	nop
 8006e90:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e94:	4ba2      	ldr	r3, [pc, #648]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e98:	4aa1      	ldr	r2, [pc, #644]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ea0:	e01c      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f002 f9d2 	bl	8009254 <RCCEx_PLL2_Config>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006eb6:	e011      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ebc:	3328      	adds	r3, #40	@ 0x28
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f002 fa79 	bl	80093b8 <RCCEx_PLL3_Config>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ecc:	e006      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006ed4:	e002      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006ed6:	bf00      	nop
 8006ed8:	e000      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006edc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10b      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ee4:	4b8e      	ldr	r3, [pc, #568]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ef0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ef4:	4a8a      	ldr	r2, [pc, #552]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ef6:	430b      	orrs	r3, r1
 8006ef8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006efa:	e003      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006f10:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006f14:	2300      	movs	r3, #0
 8006f16:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f1a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4313      	orrs	r3, r2
 8006f22:	d03a      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f2a:	2b30      	cmp	r3, #48	@ 0x30
 8006f2c:	d01f      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006f2e:	2b30      	cmp	r3, #48	@ 0x30
 8006f30:	d819      	bhi.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	d00c      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	d815      	bhi.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d019      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006f3e:	2b10      	cmp	r3, #16
 8006f40:	d111      	bne.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f42:	4b77      	ldr	r3, [pc, #476]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f46:	4a76      	ldr	r2, [pc, #472]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006f4e:	e011      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f54:	3308      	adds	r3, #8
 8006f56:	2102      	movs	r1, #2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f002 f97b 	bl	8009254 <RCCEx_PLL2_Config>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006f64:	e006      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006f6c:	e002      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006f6e:	bf00      	nop
 8006f70:	e000      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10a      	bne.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f7c:	4b68      	ldr	r3, [pc, #416]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f80:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f8a:	4a65      	ldr	r2, [pc, #404]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f90:	e003      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f96:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006faa:	2300      	movs	r3, #0
 8006fac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006fb0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	d051      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fc4:	d035      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006fc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fca:	d82e      	bhi.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006fcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fd0:	d031      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006fd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fd6:	d828      	bhi.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fdc:	d01a      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006fde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fe2:	d822      	bhi.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fec:	d007      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006fee:	e01c      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ffc:	e01c      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007002:	3308      	adds	r3, #8
 8007004:	2100      	movs	r1, #0
 8007006:	4618      	mov	r0, r3
 8007008:	f002 f924 	bl	8009254 <RCCEx_PLL2_Config>
 800700c:	4603      	mov	r3, r0
 800700e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007012:	e011      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007018:	3328      	adds	r3, #40	@ 0x28
 800701a:	2100      	movs	r1, #0
 800701c:	4618      	mov	r0, r3
 800701e:	f002 f9cb 	bl	80093b8 <RCCEx_PLL3_Config>
 8007022:	4603      	mov	r3, r0
 8007024:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007028:	e006      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007030:	e002      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007032:	bf00      	nop
 8007034:	e000      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007038:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10a      	bne.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007040:	4b37      	ldr	r3, [pc, #220]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007044:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007048:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800704c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800704e:	4a34      	ldr	r2, [pc, #208]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007050:	430b      	orrs	r3, r1
 8007052:	6513      	str	r3, [r2, #80]	@ 0x50
 8007054:	e003      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007056:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800705a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800705e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800706a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800706e:	2300      	movs	r3, #0
 8007070:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007074:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007078:	460b      	mov	r3, r1
 800707a:	4313      	orrs	r3, r2
 800707c:	d056      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800707e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007088:	d033      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800708a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800708e:	d82c      	bhi.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007090:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007094:	d02f      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007096:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800709a:	d826      	bhi.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800709c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80070a0:	d02b      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80070a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80070a6:	d820      	bhi.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80070a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070ac:	d012      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80070ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070b2:	d81a      	bhi.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d022      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80070b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070bc:	d115      	bne.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070c2:	3308      	adds	r3, #8
 80070c4:	2101      	movs	r1, #1
 80070c6:	4618      	mov	r0, r3
 80070c8:	f002 f8c4 	bl	8009254 <RCCEx_PLL2_Config>
 80070cc:	4603      	mov	r3, r0
 80070ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80070d2:	e015      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070d8:	3328      	adds	r3, #40	@ 0x28
 80070da:	2101      	movs	r1, #1
 80070dc:	4618      	mov	r0, r3
 80070de:	f002 f96b 	bl	80093b8 <RCCEx_PLL3_Config>
 80070e2:	4603      	mov	r3, r0
 80070e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80070e8:	e00a      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80070f0:	e006      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80070f2:	bf00      	nop
 80070f4:	e004      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80070f6:	bf00      	nop
 80070f8:	e002      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80070fa:	bf00      	nop
 80070fc:	e000      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80070fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007100:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10d      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007108:	4b05      	ldr	r3, [pc, #20]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800710a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800710c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007116:	4a02      	ldr	r2, [pc, #8]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007118:	430b      	orrs	r3, r1
 800711a:	6513      	str	r3, [r2, #80]	@ 0x50
 800711c:	e006      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800711e:	bf00      	nop
 8007120:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007124:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007128:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800712c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007138:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800713c:	2300      	movs	r3, #0
 800713e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007146:	460b      	mov	r3, r1
 8007148:	4313      	orrs	r3, r2
 800714a:	d055      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800714c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007150:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007154:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007158:	d033      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800715a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800715e:	d82c      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007164:	d02f      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800716a:	d826      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800716c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007170:	d02b      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007172:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007176:	d820      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800717c:	d012      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800717e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007182:	d81a      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d022      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007188:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800718c:	d115      	bne.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800718e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007192:	3308      	adds	r3, #8
 8007194:	2101      	movs	r1, #1
 8007196:	4618      	mov	r0, r3
 8007198:	f002 f85c 	bl	8009254 <RCCEx_PLL2_Config>
 800719c:	4603      	mov	r3, r0
 800719e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80071a2:	e015      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071a8:	3328      	adds	r3, #40	@ 0x28
 80071aa:	2101      	movs	r1, #1
 80071ac:	4618      	mov	r0, r3
 80071ae:	f002 f903 	bl	80093b8 <RCCEx_PLL3_Config>
 80071b2:	4603      	mov	r3, r0
 80071b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80071b8:	e00a      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80071c0:	e006      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071c2:	bf00      	nop
 80071c4:	e004      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071c6:	bf00      	nop
 80071c8:	e002      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071ca:	bf00      	nop
 80071cc:	e000      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10b      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80071d8:	4ba3      	ldr	r3, [pc, #652]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071dc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80071e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80071e8:	4a9f      	ldr	r2, [pc, #636]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071ea:	430b      	orrs	r3, r1
 80071ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80071ee:	e003      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007208:	2300      	movs	r3, #0
 800720a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800720e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007212:	460b      	mov	r3, r1
 8007214:	4313      	orrs	r3, r2
 8007216:	d037      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800721c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800721e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007222:	d00e      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007228:	d816      	bhi.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d018      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800722e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007232:	d111      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007234:	4b8c      	ldr	r3, [pc, #560]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007238:	4a8b      	ldr	r2, [pc, #556]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800723a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800723e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007240:	e00f      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007242:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007246:	3308      	adds	r3, #8
 8007248:	2101      	movs	r1, #1
 800724a:	4618      	mov	r0, r3
 800724c:	f002 f802 	bl	8009254 <RCCEx_PLL2_Config>
 8007250:	4603      	mov	r3, r0
 8007252:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007256:	e004      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800725e:	e000      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007262:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800726a:	4b7f      	ldr	r3, [pc, #508]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800726c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800726e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007278:	4a7b      	ldr	r2, [pc, #492]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800727a:	430b      	orrs	r3, r1
 800727c:	6513      	str	r3, [r2, #80]	@ 0x50
 800727e:	e003      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007280:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007284:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007288:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007294:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007298:	2300      	movs	r3, #0
 800729a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800729e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80072a2:	460b      	mov	r3, r1
 80072a4:	4313      	orrs	r3, r2
 80072a6:	d039      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80072a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d81c      	bhi.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x794>
 80072b2:	a201      	add	r2, pc, #4	@ (adr r2, 80072b8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	080072f5 	.word	0x080072f5
 80072bc:	080072c9 	.word	0x080072c9
 80072c0:	080072d7 	.word	0x080072d7
 80072c4:	080072f5 	.word	0x080072f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c8:	4b67      	ldr	r3, [pc, #412]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	4a66      	ldr	r2, [pc, #408]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80072d4:	e00f      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072da:	3308      	adds	r3, #8
 80072dc:	2102      	movs	r1, #2
 80072de:	4618      	mov	r0, r3
 80072e0:	f001 ffb8 	bl	8009254 <RCCEx_PLL2_Config>
 80072e4:	4603      	mov	r3, r0
 80072e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80072ea:	e004      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80072f2:	e000      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80072f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10a      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80072fe:	4b5a      	ldr	r3, [pc, #360]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007302:	f023 0103 	bic.w	r1, r3, #3
 8007306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800730a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800730c:	4a56      	ldr	r2, [pc, #344]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800730e:	430b      	orrs	r3, r1
 8007310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007312:	e003      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007314:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007318:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800731c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007328:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800732c:	2300      	movs	r3, #0
 800732e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007332:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007336:	460b      	mov	r3, r1
 8007338:	4313      	orrs	r3, r2
 800733a:	f000 809f 	beq.w	800747c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800733e:	4b4b      	ldr	r3, [pc, #300]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a4a      	ldr	r2, [pc, #296]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007348:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800734a:	f7fb f8b1 	bl	80024b0 <HAL_GetTick>
 800734e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007352:	e00b      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007354:	f7fb f8ac 	bl	80024b0 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b64      	cmp	r3, #100	@ 0x64
 8007362:	d903      	bls.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800736a:	e005      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800736c:	4b3f      	ldr	r3, [pc, #252]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0ed      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007378:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800737c:	2b00      	cmp	r3, #0
 800737e:	d179      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007380:	4b39      	ldr	r3, [pc, #228]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007382:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007388:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800738c:	4053      	eors	r3, r2
 800738e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007392:	2b00      	cmp	r3, #0
 8007394:	d015      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007396:	4b34      	ldr	r3, [pc, #208]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800739e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073a2:	4b31      	ldr	r3, [pc, #196]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a6:	4a30      	ldr	r2, [pc, #192]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073ac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073ae:	4b2e      	ldr	r3, [pc, #184]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b2:	4a2d      	ldr	r2, [pc, #180]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073b8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80073ba:	4a2b      	ldr	r2, [pc, #172]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80073c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80073ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073ce:	d118      	bne.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d0:	f7fb f86e 	bl	80024b0 <HAL_GetTick>
 80073d4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073d8:	e00d      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073da:	f7fb f869 	bl	80024b0 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80073e4:	1ad2      	subs	r2, r2, r3
 80073e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d903      	bls.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80073f4:	e005      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0eb      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007402:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007406:	2b00      	cmp	r3, #0
 8007408:	d129      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800740a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800740e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007416:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800741a:	d10e      	bne.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800741c:	4b12      	ldr	r3, [pc, #72]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007428:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800742c:	091a      	lsrs	r2, r3, #4
 800742e:	4b10      	ldr	r3, [pc, #64]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007430:	4013      	ands	r3, r2
 8007432:	4a0d      	ldr	r2, [pc, #52]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007434:	430b      	orrs	r3, r1
 8007436:	6113      	str	r3, [r2, #16]
 8007438:	e005      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800743a:	4b0b      	ldr	r3, [pc, #44]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	4a0a      	ldr	r2, [pc, #40]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007440:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007444:	6113      	str	r3, [r2, #16]
 8007446:	4b08      	ldr	r3, [pc, #32]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007448:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800744a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800744e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007456:	4a04      	ldr	r2, [pc, #16]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007458:	430b      	orrs	r3, r1
 800745a:	6713      	str	r3, [r2, #112]	@ 0x70
 800745c:	e00e      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800745e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007462:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007466:	e009      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007468:	58024400 	.word	0x58024400
 800746c:	58024800 	.word	0x58024800
 8007470:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007474:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007478:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800747c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	f002 0301 	and.w	r3, r2, #1
 8007488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800748c:	2300      	movs	r3, #0
 800748e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007492:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007496:	460b      	mov	r3, r1
 8007498:	4313      	orrs	r3, r2
 800749a:	f000 8089 	beq.w	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800749e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074a4:	2b28      	cmp	r3, #40	@ 0x28
 80074a6:	d86b      	bhi.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80074a8:	a201      	add	r2, pc, #4	@ (adr r2, 80074b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	08007589 	.word	0x08007589
 80074b4:	08007581 	.word	0x08007581
 80074b8:	08007581 	.word	0x08007581
 80074bc:	08007581 	.word	0x08007581
 80074c0:	08007581 	.word	0x08007581
 80074c4:	08007581 	.word	0x08007581
 80074c8:	08007581 	.word	0x08007581
 80074cc:	08007581 	.word	0x08007581
 80074d0:	08007555 	.word	0x08007555
 80074d4:	08007581 	.word	0x08007581
 80074d8:	08007581 	.word	0x08007581
 80074dc:	08007581 	.word	0x08007581
 80074e0:	08007581 	.word	0x08007581
 80074e4:	08007581 	.word	0x08007581
 80074e8:	08007581 	.word	0x08007581
 80074ec:	08007581 	.word	0x08007581
 80074f0:	0800756b 	.word	0x0800756b
 80074f4:	08007581 	.word	0x08007581
 80074f8:	08007581 	.word	0x08007581
 80074fc:	08007581 	.word	0x08007581
 8007500:	08007581 	.word	0x08007581
 8007504:	08007581 	.word	0x08007581
 8007508:	08007581 	.word	0x08007581
 800750c:	08007581 	.word	0x08007581
 8007510:	08007589 	.word	0x08007589
 8007514:	08007581 	.word	0x08007581
 8007518:	08007581 	.word	0x08007581
 800751c:	08007581 	.word	0x08007581
 8007520:	08007581 	.word	0x08007581
 8007524:	08007581 	.word	0x08007581
 8007528:	08007581 	.word	0x08007581
 800752c:	08007581 	.word	0x08007581
 8007530:	08007589 	.word	0x08007589
 8007534:	08007581 	.word	0x08007581
 8007538:	08007581 	.word	0x08007581
 800753c:	08007581 	.word	0x08007581
 8007540:	08007581 	.word	0x08007581
 8007544:	08007581 	.word	0x08007581
 8007548:	08007581 	.word	0x08007581
 800754c:	08007581 	.word	0x08007581
 8007550:	08007589 	.word	0x08007589
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007558:	3308      	adds	r3, #8
 800755a:	2101      	movs	r1, #1
 800755c:	4618      	mov	r0, r3
 800755e:	f001 fe79 	bl	8009254 <RCCEx_PLL2_Config>
 8007562:	4603      	mov	r3, r0
 8007564:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007568:	e00f      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800756a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800756e:	3328      	adds	r3, #40	@ 0x28
 8007570:	2101      	movs	r1, #1
 8007572:	4618      	mov	r0, r3
 8007574:	f001 ff20 	bl	80093b8 <RCCEx_PLL3_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800757e:	e004      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007586:	e000      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800758a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10a      	bne.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007592:	4bbf      	ldr	r3, [pc, #764]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007596:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800759a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800759e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075a0:	4abb      	ldr	r2, [pc, #748]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075a2:	430b      	orrs	r3, r1
 80075a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80075a6:	e003      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80075b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	f002 0302 	and.w	r3, r2, #2
 80075bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075c0:	2300      	movs	r3, #0
 80075c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4313      	orrs	r3, r2
 80075ce:	d041      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80075d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075d6:	2b05      	cmp	r3, #5
 80075d8:	d824      	bhi.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80075da:	a201      	add	r2, pc, #4	@ (adr r2, 80075e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80075dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e0:	0800762d 	.word	0x0800762d
 80075e4:	080075f9 	.word	0x080075f9
 80075e8:	0800760f 	.word	0x0800760f
 80075ec:	0800762d 	.word	0x0800762d
 80075f0:	0800762d 	.word	0x0800762d
 80075f4:	0800762d 	.word	0x0800762d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075fc:	3308      	adds	r3, #8
 80075fe:	2101      	movs	r1, #1
 8007600:	4618      	mov	r0, r3
 8007602:	f001 fe27 	bl	8009254 <RCCEx_PLL2_Config>
 8007606:	4603      	mov	r3, r0
 8007608:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800760c:	e00f      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800760e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007612:	3328      	adds	r3, #40	@ 0x28
 8007614:	2101      	movs	r1, #1
 8007616:	4618      	mov	r0, r3
 8007618:	f001 fece 	bl	80093b8 <RCCEx_PLL3_Config>
 800761c:	4603      	mov	r3, r0
 800761e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007622:	e004      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800762a:	e000      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800762c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800762e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007636:	4b96      	ldr	r3, [pc, #600]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800763a:	f023 0107 	bic.w	r1, r3, #7
 800763e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007642:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007644:	4a92      	ldr	r2, [pc, #584]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007646:	430b      	orrs	r3, r1
 8007648:	6553      	str	r3, [r2, #84]	@ 0x54
 800764a:	e003      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007650:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	f002 0304 	and.w	r3, r2, #4
 8007660:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007664:	2300      	movs	r3, #0
 8007666:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800766a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800766e:	460b      	mov	r3, r1
 8007670:	4313      	orrs	r3, r2
 8007672:	d044      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800767c:	2b05      	cmp	r3, #5
 800767e:	d825      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007680:	a201      	add	r2, pc, #4	@ (adr r2, 8007688 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007686:	bf00      	nop
 8007688:	080076d5 	.word	0x080076d5
 800768c:	080076a1 	.word	0x080076a1
 8007690:	080076b7 	.word	0x080076b7
 8007694:	080076d5 	.word	0x080076d5
 8007698:	080076d5 	.word	0x080076d5
 800769c:	080076d5 	.word	0x080076d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076a4:	3308      	adds	r3, #8
 80076a6:	2101      	movs	r1, #1
 80076a8:	4618      	mov	r0, r3
 80076aa:	f001 fdd3 	bl	8009254 <RCCEx_PLL2_Config>
 80076ae:	4603      	mov	r3, r0
 80076b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80076b4:	e00f      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ba:	3328      	adds	r3, #40	@ 0x28
 80076bc:	2101      	movs	r1, #1
 80076be:	4618      	mov	r0, r3
 80076c0:	f001 fe7a 	bl	80093b8 <RCCEx_PLL3_Config>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80076ca:	e004      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80076d2:	e000      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80076d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10b      	bne.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076de:	4b6c      	ldr	r3, [pc, #432]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076e2:	f023 0107 	bic.w	r1, r3, #7
 80076e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076ee:	4a68      	ldr	r2, [pc, #416]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076f0:	430b      	orrs	r3, r1
 80076f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80076f4:	e003      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007706:	f002 0320 	and.w	r3, r2, #32
 800770a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800770e:	2300      	movs	r3, #0
 8007710:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007714:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007718:	460b      	mov	r3, r1
 800771a:	4313      	orrs	r3, r2
 800771c:	d055      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800771e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007726:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800772a:	d033      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800772c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007730:	d82c      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007736:	d02f      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800773c:	d826      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800773e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007742:	d02b      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007744:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007748:	d820      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800774a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800774e:	d012      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007754:	d81a      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d022      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800775a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800775e:	d115      	bne.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007764:	3308      	adds	r3, #8
 8007766:	2100      	movs	r1, #0
 8007768:	4618      	mov	r0, r3
 800776a:	f001 fd73 	bl	8009254 <RCCEx_PLL2_Config>
 800776e:	4603      	mov	r3, r0
 8007770:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007774:	e015      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800777a:	3328      	adds	r3, #40	@ 0x28
 800777c:	2102      	movs	r1, #2
 800777e:	4618      	mov	r0, r3
 8007780:	f001 fe1a 	bl	80093b8 <RCCEx_PLL3_Config>
 8007784:	4603      	mov	r3, r0
 8007786:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800778a:	e00a      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007792:	e006      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007794:	bf00      	nop
 8007796:	e004      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007798:	bf00      	nop
 800779a:	e002      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800779c:	bf00      	nop
 800779e:	e000      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80077a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10b      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077aa:	4b39      	ldr	r3, [pc, #228]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80077b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ba:	4a35      	ldr	r2, [pc, #212]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077bc:	430b      	orrs	r3, r1
 80077be:	6553      	str	r3, [r2, #84]	@ 0x54
 80077c0:	e003      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80077d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077da:	2300      	movs	r3, #0
 80077dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077e0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80077e4:	460b      	mov	r3, r1
 80077e6:	4313      	orrs	r3, r2
 80077e8:	d058      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80077ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077f2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80077f6:	d033      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80077f8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80077fc:	d82c      	bhi.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80077fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007802:	d02f      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007808:	d826      	bhi.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800780a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800780e:	d02b      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007810:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007814:	d820      	bhi.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007816:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800781a:	d012      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800781c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007820:	d81a      	bhi.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d022      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800782a:	d115      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800782c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007830:	3308      	adds	r3, #8
 8007832:	2100      	movs	r1, #0
 8007834:	4618      	mov	r0, r3
 8007836:	f001 fd0d 	bl	8009254 <RCCEx_PLL2_Config>
 800783a:	4603      	mov	r3, r0
 800783c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007840:	e015      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007842:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007846:	3328      	adds	r3, #40	@ 0x28
 8007848:	2102      	movs	r1, #2
 800784a:	4618      	mov	r0, r3
 800784c:	f001 fdb4 	bl	80093b8 <RCCEx_PLL3_Config>
 8007850:	4603      	mov	r3, r0
 8007852:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007856:	e00a      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800785e:	e006      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007860:	bf00      	nop
 8007862:	e004      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007864:	bf00      	nop
 8007866:	e002      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007868:	bf00      	nop
 800786a:	e000      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800786c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800786e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10e      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007876:	4b06      	ldr	r3, [pc, #24]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800787a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800787e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007882:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007886:	4a02      	ldr	r2, [pc, #8]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007888:	430b      	orrs	r3, r1
 800788a:	6593      	str	r3, [r2, #88]	@ 0x58
 800788c:	e006      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800788e:	bf00      	nop
 8007890:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007894:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007898:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800789c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80078a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80078ac:	2300      	movs	r3, #0
 80078ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80078b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80078b6:	460b      	mov	r3, r1
 80078b8:	4313      	orrs	r3, r2
 80078ba:	d055      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80078bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078c4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80078c8:	d033      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80078ca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80078ce:	d82c      	bhi.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078d4:	d02f      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80078d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078da:	d826      	bhi.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078dc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80078e0:	d02b      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80078e2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80078e6:	d820      	bhi.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078ec:	d012      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80078ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078f2:	d81a      	bhi.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d022      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80078f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078fc:	d115      	bne.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007902:	3308      	adds	r3, #8
 8007904:	2100      	movs	r1, #0
 8007906:	4618      	mov	r0, r3
 8007908:	f001 fca4 	bl	8009254 <RCCEx_PLL2_Config>
 800790c:	4603      	mov	r3, r0
 800790e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007912:	e015      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007918:	3328      	adds	r3, #40	@ 0x28
 800791a:	2102      	movs	r1, #2
 800791c:	4618      	mov	r0, r3
 800791e:	f001 fd4b 	bl	80093b8 <RCCEx_PLL3_Config>
 8007922:	4603      	mov	r3, r0
 8007924:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007928:	e00a      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007930:	e006      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007932:	bf00      	nop
 8007934:	e004      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007936:	bf00      	nop
 8007938:	e002      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800793a:	bf00      	nop
 800793c:	e000      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800793e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007940:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10b      	bne.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007948:	4bbb      	ldr	r3, [pc, #748]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800794a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800794c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007954:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007958:	4ab7      	ldr	r2, [pc, #732]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800795a:	430b      	orrs	r3, r1
 800795c:	6593      	str	r3, [r2, #88]	@ 0x58
 800795e:	e003      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007960:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007964:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007968:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f002 0308 	and.w	r3, r2, #8
 8007974:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007978:	2300      	movs	r3, #0
 800797a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800797e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007982:	460b      	mov	r3, r1
 8007984:	4313      	orrs	r3, r2
 8007986:	d01e      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800798c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007994:	d10c      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007996:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800799a:	3328      	adds	r3, #40	@ 0x28
 800799c:	2102      	movs	r1, #2
 800799e:	4618      	mov	r0, r3
 80079a0:	f001 fd0a 	bl	80093b8 <RCCEx_PLL3_Config>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80079b0:	4ba1      	ldr	r3, [pc, #644]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80079b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079c0:	4a9d      	ldr	r2, [pc, #628]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80079c2:	430b      	orrs	r3, r1
 80079c4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f002 0310 	and.w	r3, r2, #16
 80079d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079d6:	2300      	movs	r3, #0
 80079d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079dc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80079e0:	460b      	mov	r3, r1
 80079e2:	4313      	orrs	r3, r2
 80079e4:	d01e      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80079e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079f2:	d10c      	bne.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80079f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079f8:	3328      	adds	r3, #40	@ 0x28
 80079fa:	2102      	movs	r1, #2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f001 fcdb 	bl	80093b8 <RCCEx_PLL3_Config>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a0e:	4b8a      	ldr	r3, [pc, #552]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a1e:	4a86      	ldr	r2, [pc, #536]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007a20:	430b      	orrs	r3, r1
 8007a22:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007a30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a32:	2300      	movs	r3, #0
 8007a34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a36:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	d03e      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a4c:	d022      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007a4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a52:	d81b      	bhi.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a5c:	d00b      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007a5e:	e015      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a64:	3308      	adds	r3, #8
 8007a66:	2100      	movs	r1, #0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f001 fbf3 	bl	8009254 <RCCEx_PLL2_Config>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a74:	e00f      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a7a:	3328      	adds	r3, #40	@ 0x28
 8007a7c:	2102      	movs	r1, #2
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f001 fc9a 	bl	80093b8 <RCCEx_PLL3_Config>
 8007a84:	4603      	mov	r3, r0
 8007a86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a8a:	e004      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007a92:	e000      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10b      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a9e:	4b66      	ldr	r3, [pc, #408]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aa2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007aae:	4a62      	ldr	r2, [pc, #392]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007ab0:	430b      	orrs	r3, r1
 8007ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ab4:	e003      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007aba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007aca:	673b      	str	r3, [r7, #112]	@ 0x70
 8007acc:	2300      	movs	r3, #0
 8007ace:	677b      	str	r3, [r7, #116]	@ 0x74
 8007ad0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	d03b      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ae2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ae6:	d01f      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
 8007ae8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007aec:	d818      	bhi.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
 8007aee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007af2:	d003      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xfa4>
 8007af4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007af8:	d007      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xfb2>
 8007afa:	e011      	b.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007afc:	4b4e      	ldr	r3, [pc, #312]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b00:	4a4d      	ldr	r2, [pc, #308]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007b02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b08:	e00f      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xfd2>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b0e:	3328      	adds	r3, #40	@ 0x28
 8007b10:	2101      	movs	r1, #1
 8007b12:	4618      	mov	r0, r3
 8007b14:	f001 fc50 	bl	80093b8 <RCCEx_PLL3_Config>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b1e:	e004      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007b26:	e000      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        break;
 8007b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10b      	bne.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xff2>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b32:	4b41      	ldr	r3, [pc, #260]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b36:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b42:	4a3d      	ldr	r2, [pc, #244]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007b44:	430b      	orrs	r3, r1
 8007b46:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b48:	e003      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xffa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b4e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007b5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b60:	2300      	movs	r3, #0
 8007b62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b64:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	d031      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x107a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x1028>
 8007b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b7c:	d007      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x1036>
 8007b7e:	e011      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x104c>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b80:	4b2d      	ldr	r3, [pc, #180]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b84:	4a2c      	ldr	r2, [pc, #176]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007b8c:	e00e      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x1054>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b92:	3308      	adds	r3, #8
 8007b94:	2102      	movs	r1, #2
 8007b96:	4618      	mov	r0, r3
 8007b98:	f001 fb5c 	bl	8009254 <RCCEx_PLL2_Config>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007ba2:	e003      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x1054>

      default:
        ret = HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10a      	bne.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x1072>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007bb4:	4b20      	ldr	r3, [pc, #128]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bb8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007bc4:	430b      	orrs	r3, r1
 8007bc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007bc8:	e003      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x107a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007bde:	663b      	str	r3, [r7, #96]	@ 0x60
 8007be0:	2300      	movs	r3, #0
 8007be2:	667b      	str	r3, [r7, #100]	@ 0x64
 8007be4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007be8:	460b      	mov	r3, r1
 8007bea:	4313      	orrs	r3, r2
 8007bec:	d03b      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bfa:	d018      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x10d6>
 8007bfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c00:	d811      	bhi.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 8007c02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c06:	d014      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x10da>
 8007c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c0c:	d80b      	bhi.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d014      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x10e4>
 8007c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c16:	d106      	bne.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x10ce>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c18:	4b07      	ldr	r3, [pc, #28]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1c:	4a06      	ldr	r2, [pc, #24]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007c1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007c24:	e00b      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007c2c:	e007      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 8007c2e:	bf00      	nop
 8007c30:	e005      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 8007c32:	bf00      	nop
 8007c34:	e003      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x10e6>
 8007c36:	bf00      	nop
 8007c38:	58024400 	.word	0x58024400
        break;
 8007c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10b      	bne.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x1106>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c46:	4bba      	ldr	r3, [pc, #744]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c56:	4ab6      	ldr	r2, [pc, #728]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007c58:	430b      	orrs	r3, r1
 8007c5a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c5c:	e003      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c62:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007c72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c74:	2300      	movs	r3, #0
 8007c76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c78:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	d009      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c82:	4bab      	ldr	r3, [pc, #684]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c86:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c90:	4aa7      	ldr	r2, [pc, #668]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007c92:	430b      	orrs	r3, r1
 8007c94:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007ca2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ca8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007cac:	460b      	mov	r3, r1
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	d00a      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007cb2:	4b9f      	ldr	r3, [pc, #636]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cbe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007cc2:	4a9b      	ldr	r2, [pc, #620]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007cc4:	430b      	orrs	r3, r1
 8007cc6:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cda:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	d009      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ce4:	4b92      	ldr	r3, [pc, #584]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ce8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cf2:	4a8f      	ldr	r2, [pc, #572]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007d04:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d06:	2300      	movs	r3, #0
 8007d08:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d0a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007d0e:	460b      	mov	r3, r1
 8007d10:	4313      	orrs	r3, r2
 8007d12:	d00e      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d14:	4b86      	ldr	r3, [pc, #536]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	4a85      	ldr	r2, [pc, #532]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007d1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d1e:	6113      	str	r3, [r2, #16]
 8007d20:	4b83      	ldr	r3, [pc, #524]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007d22:	6919      	ldr	r1, [r3, #16]
 8007d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007d2c:	4a80      	ldr	r2, [pc, #512]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007d2e:	430b      	orrs	r3, r1
 8007d30:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d40:	2300      	movs	r3, #0
 8007d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d44:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	d009      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x120a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d4e:	4b78      	ldr	r3, [pc, #480]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d52:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d5c:	4a74      	ldr	r2, [pc, #464]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007d5e:	430b      	orrs	r3, r1
 8007d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007d6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d70:	2300      	movs	r3, #0
 8007d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d74:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	d00a      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x123c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d7e:	4b6c      	ldr	r3, [pc, #432]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d82:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d8e:	4a68      	ldr	r2, [pc, #416]	@ (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007d90:	430b      	orrs	r3, r1
 8007d92:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007da6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007daa:	460b      	mov	r3, r1
 8007dac:	4313      	orrs	r3, r2
 8007dae:	d011      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x127c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007db4:	3308      	adds	r3, #8
 8007db6:	2100      	movs	r1, #0
 8007db8:	4618      	mov	r0, r3
 8007dba:	f001 fa4b 	bl	8009254 <RCCEx_PLL2_Config>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007dc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x127c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dcc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007dd0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	2100      	movs	r1, #0
 8007dde:	6239      	str	r1, [r7, #32]
 8007de0:	f003 0302 	and.w	r3, r3, #2
 8007de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007de6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007dea:	460b      	mov	r3, r1
 8007dec:	4313      	orrs	r3, r2
 8007dee:	d011      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007df4:	3308      	adds	r3, #8
 8007df6:	2101      	movs	r1, #1
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f001 fa2b 	bl	8009254 <RCCEx_PLL2_Config>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007e04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e10:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	61b9      	str	r1, [r7, #24]
 8007e20:	f003 0304 	and.w	r3, r3, #4
 8007e24:	61fb      	str	r3, [r7, #28]
 8007e26:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	d011      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e34:	3308      	adds	r3, #8
 8007e36:	2102      	movs	r1, #2
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f001 fa0b 	bl	8009254 <RCCEx_PLL2_Config>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007e44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	6139      	str	r1, [r7, #16]
 8007e60:	f003 0308 	and.w	r3, r3, #8
 8007e64:	617b      	str	r3, [r7, #20]
 8007e66:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	d011      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x133c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e74:	3328      	adds	r3, #40	@ 0x28
 8007e76:	2100      	movs	r1, #0
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f001 fa9d 	bl	80093b8 <RCCEx_PLL3_Config>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8007e84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d003      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x133c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	f003 0310 	and.w	r3, r3, #16
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4313      	orrs	r3, r2
 8007eae:	d011      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x137c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eb4:	3328      	adds	r3, #40	@ 0x28
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f001 fa7d 	bl	80093b8 <RCCEx_PLL3_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007ec4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x137c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ecc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ed0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007edc:	2100      	movs	r1, #0
 8007ede:	6039      	str	r1, [r7, #0]
 8007ee0:	f003 0320 	and.w	r3, r3, #32
 8007ee4:	607b      	str	r3, [r7, #4]
 8007ee6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007eea:	460b      	mov	r3, r1
 8007eec:	4313      	orrs	r3, r2
 8007eee:	d011      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ef4:	3328      	adds	r3, #40	@ 0x28
 8007ef6:	2102      	movs	r1, #2
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f001 fa5d 	bl	80093b8 <RCCEx_PLL3_Config>
 8007efe:	4603      	mov	r3, r0
 8007f00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007f04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f10:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8007f14:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x13c8>
  {
    return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	e000      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x13ca>
  }
  return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f2e:	bf00      	nop
 8007f30:	58024400 	.word	0x58024400

08007f34 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b090      	sub	sp, #64	@ 0x40
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f42:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007f46:	430b      	orrs	r3, r1
 8007f48:	f040 8094 	bne.w	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007f4c:	4b9e      	ldr	r3, [pc, #632]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f50:	f003 0307 	and.w	r3, r3, #7
 8007f54:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	f200 8087 	bhi.w	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f64:	08007f79 	.word	0x08007f79
 8007f68:	08007fa1 	.word	0x08007fa1
 8007f6c:	08007fc9 	.word	0x08007fc9
 8007f70:	08008065 	.word	0x08008065
 8007f74:	08007ff1 	.word	0x08007ff1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f78:	4b93      	ldr	r3, [pc, #588]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f84:	d108      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f001 f810 	bl	8008fb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f94:	f000 bd45 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f9c:	f000 bd41 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fa0:	4b89      	ldr	r3, [pc, #548]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fac:	d108      	bne.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fae:	f107 0318 	add.w	r3, r7, #24
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fd54 	bl	8008a60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fbc:	f000 bd31 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fc4:	f000 bd2d 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fc8:	4b7f      	ldr	r3, [pc, #508]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fd4:	d108      	bne.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fd6:	f107 030c 	add.w	r3, r7, #12
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 fe94 	bl	8008d08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fe4:	f000 bd1d 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fec:	f000 bd19 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ff0:	4b75      	ldr	r3, [pc, #468]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ff4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ff8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ffa:	4b73      	ldr	r3, [pc, #460]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0304 	and.w	r3, r3, #4
 8008002:	2b04      	cmp	r3, #4
 8008004:	d10c      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008008:	2b00      	cmp	r3, #0
 800800a:	d109      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800800c:	4b6e      	ldr	r3, [pc, #440]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	08db      	lsrs	r3, r3, #3
 8008012:	f003 0303 	and.w	r3, r3, #3
 8008016:	4a6d      	ldr	r2, [pc, #436]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008018:	fa22 f303 	lsr.w	r3, r2, r3
 800801c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800801e:	e01f      	b.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008020:	4b69      	ldr	r3, [pc, #420]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008028:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800802c:	d106      	bne.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800802e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008030:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008034:	d102      	bne.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008036:	4b66      	ldr	r3, [pc, #408]	@ (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800803a:	e011      	b.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800803c:	4b62      	ldr	r3, [pc, #392]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008044:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008048:	d106      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800804a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800804c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008050:	d102      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008052:	4b60      	ldr	r3, [pc, #384]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008054:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008056:	e003      	b.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008058:	2300      	movs	r3, #0
 800805a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800805c:	f000 bce1 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008060:	f000 bcdf 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008064:	4b5c      	ldr	r3, [pc, #368]	@ (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008068:	f000 bcdb 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008070:	f000 bcd7 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008078:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800807c:	430b      	orrs	r3, r1
 800807e:	f040 80ad 	bne.w	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008082:	4b51      	ldr	r3, [pc, #324]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008086:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800808a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800808c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008092:	d056      	beq.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800809a:	f200 8090 	bhi.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800809e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a0:	2bc0      	cmp	r3, #192	@ 0xc0
 80080a2:	f000 8088 	beq.w	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	2bc0      	cmp	r3, #192	@ 0xc0
 80080aa:	f200 8088 	bhi.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	2b80      	cmp	r3, #128	@ 0x80
 80080b2:	d032      	beq.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80080b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b6:	2b80      	cmp	r3, #128	@ 0x80
 80080b8:	f200 8081 	bhi.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80080bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80080c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c4:	2b40      	cmp	r3, #64	@ 0x40
 80080c6:	d014      	beq.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80080c8:	e079      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080ca:	4b3f      	ldr	r3, [pc, #252]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080d6:	d108      	bne.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 ff67 	bl	8008fb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080e6:	f000 bc9c 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080ee:	f000 bc98 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080f2:	4b35      	ldr	r3, [pc, #212]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080fe:	d108      	bne.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008100:	f107 0318 	add.w	r3, r7, #24
 8008104:	4618      	mov	r0, r3
 8008106:	f000 fcab 	bl	8008a60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800810e:	f000 bc88 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008116:	f000 bc84 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800811a:	4b2b      	ldr	r3, [pc, #172]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008126:	d108      	bne.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008128:	f107 030c 	add.w	r3, r7, #12
 800812c:	4618      	mov	r0, r3
 800812e:	f000 fdeb 	bl	8008d08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008136:	f000 bc74 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800813e:	f000 bc70 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008142:	4b21      	ldr	r3, [pc, #132]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008146:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800814a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800814c:	4b1e      	ldr	r3, [pc, #120]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b04      	cmp	r3, #4
 8008156:	d10c      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800815a:	2b00      	cmp	r3, #0
 800815c:	d109      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800815e:	4b1a      	ldr	r3, [pc, #104]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	08db      	lsrs	r3, r3, #3
 8008164:	f003 0303 	and.w	r3, r3, #3
 8008168:	4a18      	ldr	r2, [pc, #96]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800816a:	fa22 f303 	lsr.w	r3, r2, r3
 800816e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008170:	e01f      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008172:	4b15      	ldr	r3, [pc, #84]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800817a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800817e:	d106      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008182:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008186:	d102      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008188:	4b11      	ldr	r3, [pc, #68]	@ (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800818a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800818c:	e011      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800818e:	4b0e      	ldr	r3, [pc, #56]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008196:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800819a:	d106      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800819c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800819e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081a2:	d102      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081a4:	4b0b      	ldr	r3, [pc, #44]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80081a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081a8:	e003      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80081ae:	f000 bc38 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081b2:	f000 bc36 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081b6:	4b08      	ldr	r3, [pc, #32]	@ (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80081b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081ba:	f000 bc32 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081c2:	f000 bc2e 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081c6:	bf00      	nop
 80081c8:	58024400 	.word	0x58024400
 80081cc:	03d09000 	.word	0x03d09000
 80081d0:	003d0900 	.word	0x003d0900
 80081d4:	017d7840 	.word	0x017d7840
 80081d8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80081dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80081e4:	430b      	orrs	r3, r1
 80081e6:	f040 809c 	bne.w	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80081ea:	4b9e      	ldr	r3, [pc, #632]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081ee:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80081f2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80081f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081fa:	d054      	beq.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80081fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008202:	f200 808b 	bhi.w	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008208:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800820c:	f000 8083 	beq.w	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008212:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008216:	f200 8081 	bhi.w	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008220:	d02f      	beq.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008224:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008228:	d878      	bhi.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800822a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008232:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008236:	d012      	beq.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008238:	e070      	b.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800823a:	4b8a      	ldr	r3, [pc, #552]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008242:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008246:	d107      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008248:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800824c:	4618      	mov	r0, r3
 800824e:	f000 feaf 	bl	8008fb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008256:	e3e4      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008258:	2300      	movs	r3, #0
 800825a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800825c:	e3e1      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800825e:	4b81      	ldr	r3, [pc, #516]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008266:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800826a:	d107      	bne.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800826c:	f107 0318 	add.w	r3, r7, #24
 8008270:	4618      	mov	r0, r3
 8008272:	f000 fbf5 	bl	8008a60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800827a:	e3d2      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008280:	e3cf      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008282:	4b78      	ldr	r3, [pc, #480]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800828a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800828e:	d107      	bne.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008290:	f107 030c 	add.w	r3, r7, #12
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fd37 	bl	8008d08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800829e:	e3c0      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082a4:	e3bd      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082a6:	4b6f      	ldr	r3, [pc, #444]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80082ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082b0:	4b6c      	ldr	r3, [pc, #432]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d10c      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80082bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d109      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082c2:	4b68      	ldr	r3, [pc, #416]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	08db      	lsrs	r3, r3, #3
 80082c8:	f003 0303 	and.w	r3, r3, #3
 80082cc:	4a66      	ldr	r2, [pc, #408]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80082ce:	fa22 f303 	lsr.w	r3, r2, r3
 80082d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082d4:	e01e      	b.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082d6:	4b63      	ldr	r3, [pc, #396]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082e2:	d106      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80082e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082ea:	d102      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082ec:	4b5f      	ldr	r3, [pc, #380]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80082ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082f0:	e010      	b.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082f2:	4b5c      	ldr	r3, [pc, #368]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082fe:	d106      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008302:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008306:	d102      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008308:	4b59      	ldr	r3, [pc, #356]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800830a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800830c:	e002      	b.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008312:	e386      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008314:	e385      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008316:	4b57      	ldr	r3, [pc, #348]	@ (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800831a:	e382      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800831c:	2300      	movs	r3, #0
 800831e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008320:	e37f      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008326:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800832a:	430b      	orrs	r3, r1
 800832c:	f040 80a7 	bne.w	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008330:	4b4c      	ldr	r3, [pc, #304]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008334:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008338:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800833a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008340:	d055      	beq.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008344:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008348:	f200 8096 	bhi.w	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800834c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008352:	f000 8084 	beq.w	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008358:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800835c:	f200 808c 	bhi.w	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008362:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008366:	d030      	beq.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800836e:	f200 8083 	bhi.w	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008374:	2b00      	cmp	r3, #0
 8008376:	d004      	beq.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800837e:	d012      	beq.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008380:	e07a      	b.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008382:	4b38      	ldr	r3, [pc, #224]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800838a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800838e:	d107      	bne.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008394:	4618      	mov	r0, r3
 8008396:	f000 fe0b 	bl	8008fb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800839a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800839e:	e340      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083a0:	2300      	movs	r3, #0
 80083a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083a4:	e33d      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083a6:	4b2f      	ldr	r3, [pc, #188]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083b2:	d107      	bne.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083b4:	f107 0318 	add.w	r3, r7, #24
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 fb51 	bl	8008a60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083c2:	e32e      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c8:	e32b      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083ca:	4b26      	ldr	r3, [pc, #152]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083d6:	d107      	bne.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083d8:	f107 030c 	add.w	r3, r7, #12
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 fc93 	bl	8008d08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083e6:	e31c      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ec:	e319      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80083f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0304 	and.w	r3, r3, #4
 8008400:	2b04      	cmp	r3, #4
 8008402:	d10c      	bne.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008406:	2b00      	cmp	r3, #0
 8008408:	d109      	bne.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800840a:	4b16      	ldr	r3, [pc, #88]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	08db      	lsrs	r3, r3, #3
 8008410:	f003 0303 	and.w	r3, r3, #3
 8008414:	4a14      	ldr	r2, [pc, #80]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008416:	fa22 f303 	lsr.w	r3, r2, r3
 800841a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800841c:	e01e      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800841e:	4b11      	ldr	r3, [pc, #68]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800842a:	d106      	bne.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800842c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800842e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008432:	d102      	bne.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008434:	4b0d      	ldr	r3, [pc, #52]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008438:	e010      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800843a:	4b0a      	ldr	r3, [pc, #40]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008446:	d106      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800844a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800844e:	d102      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008450:	4b07      	ldr	r3, [pc, #28]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008454:	e002      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800845a:	e2e2      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800845c:	e2e1      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800845e:	4b05      	ldr	r3, [pc, #20]	@ (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008462:	e2de      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008464:	58024400 	.word	0x58024400
 8008468:	03d09000 	.word	0x03d09000
 800846c:	003d0900 	.word	0x003d0900
 8008470:	017d7840 	.word	0x017d7840
 8008474:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008478:	2300      	movs	r3, #0
 800847a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800847c:	e2d1      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800847e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008482:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008486:	430b      	orrs	r3, r1
 8008488:	f040 809c 	bne.w	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800848c:	4b93      	ldr	r3, [pc, #588]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800848e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008490:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008494:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008498:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800849c:	d054      	beq.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800849e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084a4:	f200 808b 	bhi.w	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80084a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80084ae:	f000 8083 	beq.w	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80084b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80084b8:	f200 8081 	bhi.w	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80084bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084c2:	d02f      	beq.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80084c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084ca:	d878      	bhi.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80084cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d004      	beq.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80084d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084d8:	d012      	beq.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80084da:	e070      	b.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084dc:	4b7f      	ldr	r3, [pc, #508]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084e8:	d107      	bne.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fd5e 	bl	8008fb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f8:	e293      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084fe:	e290      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008500:	4b76      	ldr	r3, [pc, #472]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008508:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800850c:	d107      	bne.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800850e:	f107 0318 	add.w	r3, r7, #24
 8008512:	4618      	mov	r0, r3
 8008514:	f000 faa4 	bl	8008a60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800851c:	e281      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008522:	e27e      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008524:	4b6d      	ldr	r3, [pc, #436]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800852c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008530:	d107      	bne.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008532:	f107 030c 	add.w	r3, r7, #12
 8008536:	4618      	mov	r0, r3
 8008538:	f000 fbe6 	bl	8008d08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008540:	e26f      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008546:	e26c      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008548:	4b64      	ldr	r3, [pc, #400]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800854a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800854c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008550:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008552:	4b62      	ldr	r3, [pc, #392]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0304 	and.w	r3, r3, #4
 800855a:	2b04      	cmp	r3, #4
 800855c:	d10c      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800855e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008560:	2b00      	cmp	r3, #0
 8008562:	d109      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008564:	4b5d      	ldr	r3, [pc, #372]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	08db      	lsrs	r3, r3, #3
 800856a:	f003 0303 	and.w	r3, r3, #3
 800856e:	4a5c      	ldr	r2, [pc, #368]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008570:	fa22 f303 	lsr.w	r3, r2, r3
 8008574:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008576:	e01e      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008578:	4b58      	ldr	r3, [pc, #352]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008584:	d106      	bne.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008588:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800858c:	d102      	bne.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800858e:	4b55      	ldr	r3, [pc, #340]	@ (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008590:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008592:	e010      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008594:	4b51      	ldr	r3, [pc, #324]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800859c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085a0:	d106      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80085a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085a8:	d102      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085aa:	4b4f      	ldr	r3, [pc, #316]	@ (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80085ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085ae:	e002      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085b4:	e235      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085b6:	e234      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085b8:	4b4c      	ldr	r3, [pc, #304]	@ (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80085ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085bc:	e231      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085c2:	e22e      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80085c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085c8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80085cc:	430b      	orrs	r3, r1
 80085ce:	f040 808f 	bne.w	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80085d2:	4b42      	ldr	r3, [pc, #264]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085d6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80085da:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80085dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085e2:	d06b      	beq.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80085e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085ea:	d874      	bhi.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80085ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80085f2:	d056      	beq.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80085f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80085fa:	d86c      	bhi.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80085fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008602:	d03b      	beq.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008606:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800860a:	d864      	bhi.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800860c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800860e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008612:	d021      	beq.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008616:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800861a:	d85c      	bhi.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800861c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861e:	2b00      	cmp	r3, #0
 8008620:	d004      	beq.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008628:	d004      	beq.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800862a:	e054      	b.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800862c:	f7fe fa26 	bl	8006a7c <HAL_RCC_GetPCLK1Freq>
 8008630:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008632:	e1f6      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008634:	4b29      	ldr	r3, [pc, #164]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800863c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008640:	d107      	bne.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008642:	f107 0318 	add.w	r3, r7, #24
 8008646:	4618      	mov	r0, r3
 8008648:	f000 fa0a 	bl	8008a60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008650:	e1e7      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008652:	2300      	movs	r3, #0
 8008654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008656:	e1e4      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008658:	4b20      	ldr	r3, [pc, #128]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008664:	d107      	bne.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008666:	f107 030c 	add.w	r3, r7, #12
 800866a:	4618      	mov	r0, r3
 800866c:	f000 fb4c 	bl	8008d08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008674:	e1d5      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800867a:	e1d2      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800867c:	4b17      	ldr	r3, [pc, #92]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b04      	cmp	r3, #4
 8008686:	d109      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008688:	4b14      	ldr	r3, [pc, #80]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	08db      	lsrs	r3, r3, #3
 800868e:	f003 0303 	and.w	r3, r3, #3
 8008692:	4a13      	ldr	r2, [pc, #76]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008694:	fa22 f303 	lsr.w	r3, r2, r3
 8008698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800869a:	e1c2      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800869c:	2300      	movs	r3, #0
 800869e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086a0:	e1bf      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80086a2:	4b0e      	ldr	r3, [pc, #56]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ae:	d102      	bne.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80086b0:	4b0c      	ldr	r3, [pc, #48]	@ (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80086b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086b4:	e1b5      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086b6:	2300      	movs	r3, #0
 80086b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ba:	e1b2      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086bc:	4b07      	ldr	r3, [pc, #28]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086c8:	d102      	bne.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80086ca:	4b07      	ldr	r3, [pc, #28]	@ (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80086cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ce:	e1a8      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d4:	e1a5      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80086d6:	2300      	movs	r3, #0
 80086d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086da:	e1a2      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086dc:	58024400 	.word	0x58024400
 80086e0:	03d09000 	.word	0x03d09000
 80086e4:	003d0900 	.word	0x003d0900
 80086e8:	017d7840 	.word	0x017d7840
 80086ec:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80086f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086f4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80086f8:	430b      	orrs	r3, r1
 80086fa:	d173      	bne.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80086fc:	4b9c      	ldr	r3, [pc, #624]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008700:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008704:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800870c:	d02f      	beq.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800870e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008710:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008714:	d863      	bhi.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008718:	2b00      	cmp	r3, #0
 800871a:	d004      	beq.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800871c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008722:	d012      	beq.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008724:	e05b      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008726:	4b92      	ldr	r3, [pc, #584]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800872e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008732:	d107      	bne.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008734:	f107 0318 	add.w	r3, r7, #24
 8008738:	4618      	mov	r0, r3
 800873a:	f000 f991 	bl	8008a60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008742:	e16e      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008748:	e16b      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800874a:	4b89      	ldr	r3, [pc, #548]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008756:	d107      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008758:	f107 030c 	add.w	r3, r7, #12
 800875c:	4618      	mov	r0, r3
 800875e:	f000 fad3 	bl	8008d08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008766:	e15c      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008768:	2300      	movs	r3, #0
 800876a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800876c:	e159      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800876e:	4b80      	ldr	r3, [pc, #512]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008772:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008776:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008778:	4b7d      	ldr	r3, [pc, #500]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0304 	and.w	r3, r3, #4
 8008780:	2b04      	cmp	r3, #4
 8008782:	d10c      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008786:	2b00      	cmp	r3, #0
 8008788:	d109      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800878a:	4b79      	ldr	r3, [pc, #484]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	08db      	lsrs	r3, r3, #3
 8008790:	f003 0303 	and.w	r3, r3, #3
 8008794:	4a77      	ldr	r2, [pc, #476]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008796:	fa22 f303 	lsr.w	r3, r2, r3
 800879a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800879c:	e01e      	b.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800879e:	4b74      	ldr	r3, [pc, #464]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087aa:	d106      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80087ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087b2:	d102      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80087b4:	4b70      	ldr	r3, [pc, #448]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80087b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087b8:	e010      	b.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087ba:	4b6d      	ldr	r3, [pc, #436]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087c6:	d106      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80087c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087ce:	d102      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087d0:	4b6a      	ldr	r3, [pc, #424]	@ (800897c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80087d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087d4:	e002      	b.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80087da:	e122      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087dc:	e121      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e2:	e11e      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80087e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087e8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80087ec:	430b      	orrs	r3, r1
 80087ee:	d133      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80087f0:	4b5f      	ldr	r3, [pc, #380]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80087fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d004      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008806:	d012      	beq.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008808:	e023      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800880a:	4b59      	ldr	r3, [pc, #356]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008812:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008816:	d107      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800881c:	4618      	mov	r0, r3
 800881e:	f000 fbc7 	bl	8008fb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008826:	e0fc      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800882c:	e0f9      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800882e:	4b50      	ldr	r3, [pc, #320]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800883a:	d107      	bne.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800883c:	f107 0318 	add.w	r3, r7, #24
 8008840:	4618      	mov	r0, r3
 8008842:	f000 f90d 	bl	8008a60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800884a:	e0ea      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008850:	e0e7      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008856:	e0e4      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800885c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008860:	430b      	orrs	r3, r1
 8008862:	f040 808d 	bne.w	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008866:	4b42      	ldr	r3, [pc, #264]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800886a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800886e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008872:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008876:	d06b      	beq.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800887e:	d874      	bhi.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008886:	d056      	beq.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800888e:	d86c      	bhi.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008892:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008896:	d03b      	beq.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800889e:	d864      	bhi.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80088a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088a6:	d021      	beq.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80088a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088ae:	d85c      	bhi.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80088b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d004      	beq.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80088b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088bc:	d004      	beq.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80088be:	e054      	b.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80088c0:	f000 f8b8 	bl	8008a34 <HAL_RCCEx_GetD3PCLK1Freq>
 80088c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088c6:	e0ac      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088c8:	4b29      	ldr	r3, [pc, #164]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088d4:	d107      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088d6:	f107 0318 	add.w	r3, r7, #24
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 f8c0 	bl	8008a60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088e4:	e09d      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088ea:	e09a      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088ec:	4b20      	ldr	r3, [pc, #128]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088f8:	d107      	bne.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088fa:	f107 030c 	add.w	r3, r7, #12
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 fa02 	bl	8008d08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008908:	e08b      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800890a:	2300      	movs	r3, #0
 800890c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800890e:	e088      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008910:	4b17      	ldr	r3, [pc, #92]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0304 	and.w	r3, r3, #4
 8008918:	2b04      	cmp	r3, #4
 800891a:	d109      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800891c:	4b14      	ldr	r3, [pc, #80]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	08db      	lsrs	r3, r3, #3
 8008922:	f003 0303 	and.w	r3, r3, #3
 8008926:	4a13      	ldr	r2, [pc, #76]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008928:	fa22 f303 	lsr.w	r3, r2, r3
 800892c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800892e:	e078      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008934:	e075      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008936:	4b0e      	ldr	r3, [pc, #56]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800893e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008942:	d102      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008944:	4b0c      	ldr	r3, [pc, #48]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008948:	e06b      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800894a:	2300      	movs	r3, #0
 800894c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800894e:	e068      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008950:	4b07      	ldr	r3, [pc, #28]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008958:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800895c:	d102      	bne.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800895e:	4b07      	ldr	r3, [pc, #28]	@ (800897c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008962:	e05e      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008964:	2300      	movs	r3, #0
 8008966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008968:	e05b      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800896a:	2300      	movs	r3, #0
 800896c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800896e:	e058      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008970:	58024400 	.word	0x58024400
 8008974:	03d09000 	.word	0x03d09000
 8008978:	003d0900 	.word	0x003d0900
 800897c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008984:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008988:	430b      	orrs	r3, r1
 800898a:	d148      	bne.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800898c:	4b27      	ldr	r3, [pc, #156]	@ (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800898e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008990:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008994:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008998:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800899c:	d02a      	beq.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800899e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089a4:	d838      	bhi.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80089a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d004      	beq.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80089ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089b2:	d00d      	beq.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80089b4:	e030      	b.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80089b6:	4b1d      	ldr	r3, [pc, #116]	@ (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089c2:	d102      	bne.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80089c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80089c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089c8:	e02b      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089ca:	2300      	movs	r3, #0
 80089cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ce:	e028      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089d0:	4b16      	ldr	r3, [pc, #88]	@ (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089dc:	d107      	bne.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 fae4 	bl	8008fb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089ec:	e019      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089f2:	e016      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089f4:	4b0d      	ldr	r3, [pc, #52]	@ (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a00:	d107      	bne.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a02:	f107 0318 	add.w	r3, r7, #24
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 f82a 	bl	8008a60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a10:	e007      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a16:	e004      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a1c:	e001      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3740      	adds	r7, #64	@ 0x40
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	58024400 	.word	0x58024400
 8008a30:	017d7840 	.word	0x017d7840

08008a34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008a38:	f7fd fff0 	bl	8006a1c <HAL_RCC_GetHCLKFreq>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	4b06      	ldr	r3, [pc, #24]	@ (8008a58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	091b      	lsrs	r3, r3, #4
 8008a44:	f003 0307 	and.w	r3, r3, #7
 8008a48:	4904      	ldr	r1, [pc, #16]	@ (8008a5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008a4a:	5ccb      	ldrb	r3, [r1, r3]
 8008a4c:	f003 031f 	and.w	r3, r3, #31
 8008a50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	58024400 	.word	0x58024400
 8008a5c:	08012550 	.word	0x08012550

08008a60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b089      	sub	sp, #36	@ 0x24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a68:	4ba1      	ldr	r3, [pc, #644]	@ (8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a6c:	f003 0303 	and.w	r3, r3, #3
 8008a70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008a72:	4b9f      	ldr	r3, [pc, #636]	@ (8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a76:	0b1b      	lsrs	r3, r3, #12
 8008a78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008a7e:	4b9c      	ldr	r3, [pc, #624]	@ (8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a82:	091b      	lsrs	r3, r3, #4
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008a8a:	4b99      	ldr	r3, [pc, #612]	@ (8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a8e:	08db      	lsrs	r3, r3, #3
 8008a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	fb02 f303 	mul.w	r3, r2, r3
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f000 8111 	beq.w	8008cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	f000 8083 	beq.w	8008bbc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	f200 80a1 	bhi.w	8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d003      	beq.n	8008acc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d056      	beq.n	8008b78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008aca:	e099      	b.n	8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008acc:	4b88      	ldr	r3, [pc, #544]	@ (8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 0320 	and.w	r3, r3, #32
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d02d      	beq.n	8008b34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ad8:	4b85      	ldr	r3, [pc, #532]	@ (8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	08db      	lsrs	r3, r3, #3
 8008ade:	f003 0303 	and.w	r3, r3, #3
 8008ae2:	4a84      	ldr	r2, [pc, #528]	@ (8008cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	ee07 3a90 	vmov	s15, r3
 8008af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b02:	4b7b      	ldr	r3, [pc, #492]	@ (8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b0a:	ee07 3a90 	vmov	s15, r3
 8008b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b32:	e087      	b.n	8008c44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	ee07 3a90 	vmov	s15, r3
 8008b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b46:	4b6a      	ldr	r3, [pc, #424]	@ (8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b4e:	ee07 3a90 	vmov	s15, r3
 8008b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b76:	e065      	b.n	8008c44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	ee07 3a90 	vmov	s15, r3
 8008b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b8a:	4b59      	ldr	r3, [pc, #356]	@ (8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b92:	ee07 3a90 	vmov	s15, r3
 8008b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bba:	e043      	b.n	8008c44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008d04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bce:	4b48      	ldr	r3, [pc, #288]	@ (8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd6:	ee07 3a90 	vmov	s15, r3
 8008bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8008be2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bfe:	e021      	b.n	8008c44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	ee07 3a90 	vmov	s15, r3
 8008c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c12:	4b37      	ldr	r3, [pc, #220]	@ (8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c1a:	ee07 3a90 	vmov	s15, r3
 8008c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008c44:	4b2a      	ldr	r3, [pc, #168]	@ (8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c48:	0a5b      	lsrs	r3, r3, #9
 8008c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c4e:	ee07 3a90 	vmov	s15, r3
 8008c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c6a:	ee17 2a90 	vmov	r2, s15
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008c72:	4b1f      	ldr	r3, [pc, #124]	@ (8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c76:	0c1b      	lsrs	r3, r3, #16
 8008c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c7c:	ee07 3a90 	vmov	s15, r3
 8008c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c98:	ee17 2a90 	vmov	r2, s15
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008ca0:	4b13      	ldr	r3, [pc, #76]	@ (8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca4:	0e1b      	lsrs	r3, r3, #24
 8008ca6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008caa:	ee07 3a90 	vmov	s15, r3
 8008cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cba:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cc6:	ee17 2a90 	vmov	r2, s15
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008cce:	e008      	b.n	8008ce2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	609a      	str	r2, [r3, #8]
}
 8008ce2:	bf00      	nop
 8008ce4:	3724      	adds	r7, #36	@ 0x24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	58024400 	.word	0x58024400
 8008cf4:	03d09000 	.word	0x03d09000
 8008cf8:	46000000 	.word	0x46000000
 8008cfc:	4c742400 	.word	0x4c742400
 8008d00:	4a742400 	.word	0x4a742400
 8008d04:	4bbebc20 	.word	0x4bbebc20

08008d08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b089      	sub	sp, #36	@ 0x24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d10:	4ba1      	ldr	r3, [pc, #644]	@ (8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d14:	f003 0303 	and.w	r3, r3, #3
 8008d18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008d1a:	4b9f      	ldr	r3, [pc, #636]	@ (8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d1e:	0d1b      	lsrs	r3, r3, #20
 8008d20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008d26:	4b9c      	ldr	r3, [pc, #624]	@ (8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2a:	0a1b      	lsrs	r3, r3, #8
 8008d2c:	f003 0301 	and.w	r3, r3, #1
 8008d30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008d32:	4b99      	ldr	r3, [pc, #612]	@ (8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d36:	08db      	lsrs	r3, r3, #3
 8008d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	fb02 f303 	mul.w	r3, r2, r3
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 8111 	beq.w	8008f78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	f000 8083 	beq.w	8008e64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	f200 80a1 	bhi.w	8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d056      	beq.n	8008e20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008d72:	e099      	b.n	8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d74:	4b88      	ldr	r3, [pc, #544]	@ (8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0320 	and.w	r3, r3, #32
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d02d      	beq.n	8008ddc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d80:	4b85      	ldr	r3, [pc, #532]	@ (8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	08db      	lsrs	r3, r3, #3
 8008d86:	f003 0303 	and.w	r3, r3, #3
 8008d8a:	4a84      	ldr	r2, [pc, #528]	@ (8008f9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	ee07 3a90 	vmov	s15, r3
 8008d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008daa:	4b7b      	ldr	r3, [pc, #492]	@ (8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db2:	ee07 3a90 	vmov	s15, r3
 8008db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008dda:	e087      	b.n	8008eec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	ee07 3a90 	vmov	s15, r3
 8008de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dee:	4b6a      	ldr	r3, [pc, #424]	@ (8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df6:	ee07 3a90 	vmov	s15, r3
 8008dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e1e:	e065      	b.n	8008eec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	ee07 3a90 	vmov	s15, r3
 8008e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e32:	4b59      	ldr	r3, [pc, #356]	@ (8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e3a:	ee07 3a90 	vmov	s15, r3
 8008e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e62:	e043      	b.n	8008eec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	ee07 3a90 	vmov	s15, r3
 8008e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008fac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e76:	4b48      	ldr	r3, [pc, #288]	@ (8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e7e:	ee07 3a90 	vmov	s15, r3
 8008e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ea6:	e021      	b.n	8008eec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	ee07 3a90 	vmov	s15, r3
 8008eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eba:	4b37      	ldr	r3, [pc, #220]	@ (8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ec2:	ee07 3a90 	vmov	s15, r3
 8008ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ece:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008eea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008eec:	4b2a      	ldr	r3, [pc, #168]	@ (8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef0:	0a5b      	lsrs	r3, r3, #9
 8008ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ef6:	ee07 3a90 	vmov	s15, r3
 8008efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008efe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f06:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f12:	ee17 2a90 	vmov	r2, s15
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f1e:	0c1b      	lsrs	r3, r3, #16
 8008f20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f24:	ee07 3a90 	vmov	s15, r3
 8008f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f34:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f40:	ee17 2a90 	vmov	r2, s15
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008f48:	4b13      	ldr	r3, [pc, #76]	@ (8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f4c:	0e1b      	lsrs	r3, r3, #24
 8008f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f62:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f6e:	ee17 2a90 	vmov	r2, s15
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008f76:	e008      	b.n	8008f8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	609a      	str	r2, [r3, #8]
}
 8008f8a:	bf00      	nop
 8008f8c:	3724      	adds	r7, #36	@ 0x24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	58024400 	.word	0x58024400
 8008f9c:	03d09000 	.word	0x03d09000
 8008fa0:	46000000 	.word	0x46000000
 8008fa4:	4c742400 	.word	0x4c742400
 8008fa8:	4a742400 	.word	0x4a742400
 8008fac:	4bbebc20 	.word	0x4bbebc20

08008fb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b089      	sub	sp, #36	@ 0x24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fb8:	4ba0      	ldr	r3, [pc, #640]	@ (800923c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fbc:	f003 0303 	and.w	r3, r3, #3
 8008fc0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008fc2:	4b9e      	ldr	r3, [pc, #632]	@ (800923c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc6:	091b      	lsrs	r3, r3, #4
 8008fc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fcc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008fce:	4b9b      	ldr	r3, [pc, #620]	@ (800923c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008fd8:	4b98      	ldr	r3, [pc, #608]	@ (800923c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fdc:	08db      	lsrs	r3, r3, #3
 8008fde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	fb02 f303 	mul.w	r3, r2, r3
 8008fe8:	ee07 3a90 	vmov	s15, r3
 8008fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f000 8111 	beq.w	800921e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	f000 8083 	beq.w	800910a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	2b02      	cmp	r3, #2
 8009008:	f200 80a1 	bhi.w	800914e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d003      	beq.n	800901a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d056      	beq.n	80090c6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009018:	e099      	b.n	800914e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800901a:	4b88      	ldr	r3, [pc, #544]	@ (800923c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 0320 	and.w	r3, r3, #32
 8009022:	2b00      	cmp	r3, #0
 8009024:	d02d      	beq.n	8009082 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009026:	4b85      	ldr	r3, [pc, #532]	@ (800923c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	08db      	lsrs	r3, r3, #3
 800902c:	f003 0303 	and.w	r3, r3, #3
 8009030:	4a83      	ldr	r2, [pc, #524]	@ (8009240 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009032:	fa22 f303 	lsr.w	r3, r2, r3
 8009036:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	ee07 3a90 	vmov	s15, r3
 800903e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	ee07 3a90 	vmov	s15, r3
 8009048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009050:	4b7a      	ldr	r3, [pc, #488]	@ (800923c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009058:	ee07 3a90 	vmov	s15, r3
 800905c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009060:	ed97 6a03 	vldr	s12, [r7, #12]
 8009064:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009244 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009068:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800906c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009070:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009074:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800907c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009080:	e087      	b.n	8009192 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	ee07 3a90 	vmov	s15, r3
 8009088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009094:	4b69      	ldr	r3, [pc, #420]	@ (800923c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909c:	ee07 3a90 	vmov	s15, r3
 80090a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80090a8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009244 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090c4:	e065      	b.n	8009192 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	ee07 3a90 	vmov	s15, r3
 80090cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800924c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80090d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090d8:	4b58      	ldr	r3, [pc, #352]	@ (800923c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e0:	ee07 3a90 	vmov	s15, r3
 80090e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ec:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009244 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009104:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009108:	e043      	b.n	8009192 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	ee07 3a90 	vmov	s15, r3
 8009110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009114:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009250 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800911c:	4b47      	ldr	r3, [pc, #284]	@ (800923c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800911e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009124:	ee07 3a90 	vmov	s15, r3
 8009128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800912c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009130:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009244 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009134:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800913c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009148:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800914c:	e021      	b.n	8009192 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	ee07 3a90 	vmov	s15, r3
 8009154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009158:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800915c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009160:	4b36      	ldr	r3, [pc, #216]	@ (800923c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009168:	ee07 3a90 	vmov	s15, r3
 800916c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009170:	ed97 6a03 	vldr	s12, [r7, #12]
 8009174:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009244 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800917c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009180:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800918c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009190:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009192:	4b2a      	ldr	r3, [pc, #168]	@ (800923c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009196:	0a5b      	lsrs	r3, r3, #9
 8009198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800919c:	ee07 3a90 	vmov	s15, r3
 80091a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80091b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091b8:	ee17 2a90 	vmov	r2, s15
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80091c0:	4b1e      	ldr	r3, [pc, #120]	@ (800923c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091c4:	0c1b      	lsrs	r3, r3, #16
 80091c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091da:	edd7 6a07 	vldr	s13, [r7, #28]
 80091de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091e6:	ee17 2a90 	vmov	r2, s15
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80091ee:	4b13      	ldr	r3, [pc, #76]	@ (800923c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091f2:	0e1b      	lsrs	r3, r3, #24
 80091f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091f8:	ee07 3a90 	vmov	s15, r3
 80091fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009200:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009204:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009208:	edd7 6a07 	vldr	s13, [r7, #28]
 800920c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009214:	ee17 2a90 	vmov	r2, s15
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800921c:	e008      	b.n	8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	609a      	str	r2, [r3, #8]
}
 8009230:	bf00      	nop
 8009232:	3724      	adds	r7, #36	@ 0x24
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	58024400 	.word	0x58024400
 8009240:	03d09000 	.word	0x03d09000
 8009244:	46000000 	.word	0x46000000
 8009248:	4c742400 	.word	0x4c742400
 800924c:	4a742400 	.word	0x4a742400
 8009250:	4bbebc20 	.word	0x4bbebc20

08009254 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009262:	4b53      	ldr	r3, [pc, #332]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 8009264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009266:	f003 0303 	and.w	r3, r3, #3
 800926a:	2b03      	cmp	r3, #3
 800926c:	d101      	bne.n	8009272 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e099      	b.n	80093a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009272:	4b4f      	ldr	r3, [pc, #316]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a4e      	ldr	r2, [pc, #312]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 8009278:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800927c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800927e:	f7f9 f917 	bl	80024b0 <HAL_GetTick>
 8009282:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009284:	e008      	b.n	8009298 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009286:	f7f9 f913 	bl	80024b0 <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	2b02      	cmp	r3, #2
 8009292:	d901      	bls.n	8009298 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e086      	b.n	80093a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009298:	4b45      	ldr	r3, [pc, #276]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1f0      	bne.n	8009286 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80092a4:	4b42      	ldr	r3, [pc, #264]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 80092a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	031b      	lsls	r3, r3, #12
 80092b2:	493f      	ldr	r1, [pc, #252]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 80092b4:	4313      	orrs	r3, r2
 80092b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	3b01      	subs	r3, #1
 80092be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	3b01      	subs	r3, #1
 80092c8:	025b      	lsls	r3, r3, #9
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	431a      	orrs	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	3b01      	subs	r3, #1
 80092d4:	041b      	lsls	r3, r3, #16
 80092d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80092da:	431a      	orrs	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	3b01      	subs	r3, #1
 80092e2:	061b      	lsls	r3, r3, #24
 80092e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80092e8:	4931      	ldr	r1, [pc, #196]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 80092ea:	4313      	orrs	r3, r2
 80092ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80092ee:	4b30      	ldr	r3, [pc, #192]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 80092f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	695b      	ldr	r3, [r3, #20]
 80092fa:	492d      	ldr	r1, [pc, #180]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 80092fc:	4313      	orrs	r3, r2
 80092fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009300:	4b2b      	ldr	r3, [pc, #172]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 8009302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009304:	f023 0220 	bic.w	r2, r3, #32
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	4928      	ldr	r1, [pc, #160]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 800930e:	4313      	orrs	r3, r2
 8009310:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009312:	4b27      	ldr	r3, [pc, #156]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 8009314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009316:	4a26      	ldr	r2, [pc, #152]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 8009318:	f023 0310 	bic.w	r3, r3, #16
 800931c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800931e:	4b24      	ldr	r3, [pc, #144]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 8009320:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009322:	4b24      	ldr	r3, [pc, #144]	@ (80093b4 <RCCEx_PLL2_Config+0x160>)
 8009324:	4013      	ands	r3, r2
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	69d2      	ldr	r2, [r2, #28]
 800932a:	00d2      	lsls	r2, r2, #3
 800932c:	4920      	ldr	r1, [pc, #128]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 800932e:	4313      	orrs	r3, r2
 8009330:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009332:	4b1f      	ldr	r3, [pc, #124]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 8009334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009336:	4a1e      	ldr	r2, [pc, #120]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 8009338:	f043 0310 	orr.w	r3, r3, #16
 800933c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d106      	bne.n	8009352 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009344:	4b1a      	ldr	r3, [pc, #104]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 8009346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009348:	4a19      	ldr	r2, [pc, #100]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 800934a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800934e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009350:	e00f      	b.n	8009372 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d106      	bne.n	8009366 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009358:	4b15      	ldr	r3, [pc, #84]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 800935a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800935c:	4a14      	ldr	r2, [pc, #80]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 800935e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009362:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009364:	e005      	b.n	8009372 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009366:	4b12      	ldr	r3, [pc, #72]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 8009368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936a:	4a11      	ldr	r2, [pc, #68]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 800936c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009370:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009372:	4b0f      	ldr	r3, [pc, #60]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a0e      	ldr	r2, [pc, #56]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 8009378:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800937c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800937e:	f7f9 f897 	bl	80024b0 <HAL_GetTick>
 8009382:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009384:	e008      	b.n	8009398 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009386:	f7f9 f893 	bl	80024b0 <HAL_GetTick>
 800938a:	4602      	mov	r2, r0
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	2b02      	cmp	r3, #2
 8009392:	d901      	bls.n	8009398 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	e006      	b.n	80093a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009398:	4b05      	ldr	r3, [pc, #20]	@ (80093b0 <RCCEx_PLL2_Config+0x15c>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d0f0      	beq.n	8009386 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	58024400 	.word	0x58024400
 80093b4:	ffff0007 	.word	0xffff0007

080093b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093c6:	4b53      	ldr	r3, [pc, #332]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 80093c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ca:	f003 0303 	and.w	r3, r3, #3
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	d101      	bne.n	80093d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e099      	b.n	800950a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80093d6:	4b4f      	ldr	r3, [pc, #316]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a4e      	ldr	r2, [pc, #312]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 80093dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093e2:	f7f9 f865 	bl	80024b0 <HAL_GetTick>
 80093e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093e8:	e008      	b.n	80093fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80093ea:	f7f9 f861 	bl	80024b0 <HAL_GetTick>
 80093ee:	4602      	mov	r2, r0
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d901      	bls.n	80093fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093f8:	2303      	movs	r3, #3
 80093fa:	e086      	b.n	800950a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093fc:	4b45      	ldr	r3, [pc, #276]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1f0      	bne.n	80093ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009408:	4b42      	ldr	r3, [pc, #264]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 800940a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800940c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	051b      	lsls	r3, r3, #20
 8009416:	493f      	ldr	r1, [pc, #252]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 8009418:	4313      	orrs	r3, r2
 800941a:	628b      	str	r3, [r1, #40]	@ 0x28
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	3b01      	subs	r3, #1
 8009422:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	3b01      	subs	r3, #1
 800942c:	025b      	lsls	r3, r3, #9
 800942e:	b29b      	uxth	r3, r3
 8009430:	431a      	orrs	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	3b01      	subs	r3, #1
 8009438:	041b      	lsls	r3, r3, #16
 800943a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800943e:	431a      	orrs	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	3b01      	subs	r3, #1
 8009446:	061b      	lsls	r3, r3, #24
 8009448:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800944c:	4931      	ldr	r1, [pc, #196]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 800944e:	4313      	orrs	r3, r2
 8009450:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009452:	4b30      	ldr	r3, [pc, #192]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 8009454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009456:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	492d      	ldr	r1, [pc, #180]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 8009460:	4313      	orrs	r3, r2
 8009462:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009464:	4b2b      	ldr	r3, [pc, #172]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 8009466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009468:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	4928      	ldr	r1, [pc, #160]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 8009472:	4313      	orrs	r3, r2
 8009474:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009476:	4b27      	ldr	r3, [pc, #156]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 8009478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800947a:	4a26      	ldr	r2, [pc, #152]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 800947c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009480:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009482:	4b24      	ldr	r3, [pc, #144]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 8009484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009486:	4b24      	ldr	r3, [pc, #144]	@ (8009518 <RCCEx_PLL3_Config+0x160>)
 8009488:	4013      	ands	r3, r2
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	69d2      	ldr	r2, [r2, #28]
 800948e:	00d2      	lsls	r2, r2, #3
 8009490:	4920      	ldr	r1, [pc, #128]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 8009492:	4313      	orrs	r3, r2
 8009494:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009496:	4b1f      	ldr	r3, [pc, #124]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 8009498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800949a:	4a1e      	ldr	r2, [pc, #120]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 800949c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d106      	bne.n	80094b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80094a8:	4b1a      	ldr	r3, [pc, #104]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 80094aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ac:	4a19      	ldr	r2, [pc, #100]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 80094ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80094b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80094b4:	e00f      	b.n	80094d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d106      	bne.n	80094ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80094bc:	4b15      	ldr	r3, [pc, #84]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 80094be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c0:	4a14      	ldr	r2, [pc, #80]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 80094c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80094c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80094c8:	e005      	b.n	80094d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80094ca:	4b12      	ldr	r3, [pc, #72]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 80094cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ce:	4a11      	ldr	r2, [pc, #68]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 80094d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80094d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80094d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a0e      	ldr	r2, [pc, #56]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 80094dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094e2:	f7f8 ffe5 	bl	80024b0 <HAL_GetTick>
 80094e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094e8:	e008      	b.n	80094fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80094ea:	f7f8 ffe1 	bl	80024b0 <HAL_GetTick>
 80094ee:	4602      	mov	r2, r0
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d901      	bls.n	80094fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e006      	b.n	800950a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094fc:	4b05      	ldr	r3, [pc, #20]	@ (8009514 <RCCEx_PLL3_Config+0x15c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009504:	2b00      	cmp	r3, #0
 8009506:	d0f0      	beq.n	80094ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009508:	7bfb      	ldrb	r3, [r7, #15]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	58024400 	.word	0x58024400
 8009518:	ffff0007 	.word	0xffff0007

0800951c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e049      	b.n	80095c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d106      	bne.n	8009548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7f7 ff7c 	bl	8001440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2202      	movs	r2, #2
 800954c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	3304      	adds	r3, #4
 8009558:	4619      	mov	r1, r3
 800955a:	4610      	mov	r0, r2
 800955c:	f000 fad6 	bl	8009b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
	...

080095cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d001      	beq.n	80095e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e054      	b.n	800968e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2202      	movs	r2, #2
 80095e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68da      	ldr	r2, [r3, #12]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f042 0201 	orr.w	r2, r2, #1
 80095fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a26      	ldr	r2, [pc, #152]	@ (800969c <HAL_TIM_Base_Start_IT+0xd0>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d022      	beq.n	800964c <HAL_TIM_Base_Start_IT+0x80>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800960e:	d01d      	beq.n	800964c <HAL_TIM_Base_Start_IT+0x80>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a22      	ldr	r2, [pc, #136]	@ (80096a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d018      	beq.n	800964c <HAL_TIM_Base_Start_IT+0x80>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a21      	ldr	r2, [pc, #132]	@ (80096a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d013      	beq.n	800964c <HAL_TIM_Base_Start_IT+0x80>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a1f      	ldr	r2, [pc, #124]	@ (80096a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d00e      	beq.n	800964c <HAL_TIM_Base_Start_IT+0x80>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a1e      	ldr	r2, [pc, #120]	@ (80096ac <HAL_TIM_Base_Start_IT+0xe0>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d009      	beq.n	800964c <HAL_TIM_Base_Start_IT+0x80>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a1c      	ldr	r2, [pc, #112]	@ (80096b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d004      	beq.n	800964c <HAL_TIM_Base_Start_IT+0x80>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a1b      	ldr	r2, [pc, #108]	@ (80096b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d115      	bne.n	8009678 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689a      	ldr	r2, [r3, #8]
 8009652:	4b19      	ldr	r3, [pc, #100]	@ (80096b8 <HAL_TIM_Base_Start_IT+0xec>)
 8009654:	4013      	ands	r3, r2
 8009656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2b06      	cmp	r3, #6
 800965c:	d015      	beq.n	800968a <HAL_TIM_Base_Start_IT+0xbe>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009664:	d011      	beq.n	800968a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f042 0201 	orr.w	r2, r2, #1
 8009674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009676:	e008      	b.n	800968a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f042 0201 	orr.w	r2, r2, #1
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	e000      	b.n	800968c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800968a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3714      	adds	r7, #20
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	40010000 	.word	0x40010000
 80096a0:	40000400 	.word	0x40000400
 80096a4:	40000800 	.word	0x40000800
 80096a8:	40000c00 	.word	0x40000c00
 80096ac:	40010400 	.word	0x40010400
 80096b0:	40001800 	.word	0x40001800
 80096b4:	40014000 	.word	0x40014000
 80096b8:	00010007 	.word	0x00010007

080096bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f003 0302 	and.w	r3, r3, #2
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d020      	beq.n	8009720 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f003 0302 	and.w	r3, r3, #2
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d01b      	beq.n	8009720 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f06f 0202 	mvn.w	r2, #2
 80096f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	f003 0303 	and.w	r3, r3, #3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d003      	beq.n	800970e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f9e2 	bl	8009ad0 <HAL_TIM_IC_CaptureCallback>
 800970c:	e005      	b.n	800971a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f9d4 	bl	8009abc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f9e5 	bl	8009ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	f003 0304 	and.w	r3, r3, #4
 8009726:	2b00      	cmp	r3, #0
 8009728:	d020      	beq.n	800976c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d01b      	beq.n	800976c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f06f 0204 	mvn.w	r2, #4
 800973c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2202      	movs	r2, #2
 8009742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	699b      	ldr	r3, [r3, #24]
 800974a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f9bc 	bl	8009ad0 <HAL_TIM_IC_CaptureCallback>
 8009758:	e005      	b.n	8009766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f9ae 	bl	8009abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 f9bf 	bl	8009ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	f003 0308 	and.w	r3, r3, #8
 8009772:	2b00      	cmp	r3, #0
 8009774:	d020      	beq.n	80097b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f003 0308 	and.w	r3, r3, #8
 800977c:	2b00      	cmp	r3, #0
 800977e:	d01b      	beq.n	80097b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f06f 0208 	mvn.w	r2, #8
 8009788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2204      	movs	r2, #4
 800978e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	f003 0303 	and.w	r3, r3, #3
 800979a:	2b00      	cmp	r3, #0
 800979c:	d003      	beq.n	80097a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f996 	bl	8009ad0 <HAL_TIM_IC_CaptureCallback>
 80097a4:	e005      	b.n	80097b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f988 	bl	8009abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f999 	bl	8009ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	f003 0310 	and.w	r3, r3, #16
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d020      	beq.n	8009804 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f003 0310 	and.w	r3, r3, #16
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d01b      	beq.n	8009804 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f06f 0210 	mvn.w	r2, #16
 80097d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2208      	movs	r2, #8
 80097da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f970 	bl	8009ad0 <HAL_TIM_IC_CaptureCallback>
 80097f0:	e005      	b.n	80097fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f962 	bl	8009abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f973 	bl	8009ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00c      	beq.n	8009828 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	2b00      	cmp	r3, #0
 8009816:	d007      	beq.n	8009828 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f06f 0201 	mvn.w	r2, #1
 8009820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7f7 fc26 	bl	8001074 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800982e:	2b00      	cmp	r3, #0
 8009830:	d104      	bne.n	800983c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00c      	beq.n	8009856 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009842:	2b00      	cmp	r3, #0
 8009844:	d007      	beq.n	8009856 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800984e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fb37 	bl	8009ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00c      	beq.n	800987a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009866:	2b00      	cmp	r3, #0
 8009868:	d007      	beq.n	800987a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fb2f 	bl	8009ed8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00c      	beq.n	800989e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800988a:	2b00      	cmp	r3, #0
 800988c:	d007      	beq.n	800989e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f92d 	bl	8009af8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	f003 0320 	and.w	r3, r3, #32
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00c      	beq.n	80098c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f003 0320 	and.w	r3, r3, #32
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d007      	beq.n	80098c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f06f 0220 	mvn.w	r2, #32
 80098ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 faf7 	bl	8009eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098c2:	bf00      	nop
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
	...

080098cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d101      	bne.n	80098e8 <HAL_TIM_ConfigClockSource+0x1c>
 80098e4:	2302      	movs	r3, #2
 80098e6:	e0dc      	b.n	8009aa2 <HAL_TIM_ConfigClockSource+0x1d6>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2202      	movs	r2, #2
 80098f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	4b6a      	ldr	r3, [pc, #424]	@ (8009aac <HAL_TIM_ConfigClockSource+0x1e0>)
 8009904:	4013      	ands	r3, r2
 8009906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800990e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a64      	ldr	r2, [pc, #400]	@ (8009ab0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800991e:	4293      	cmp	r3, r2
 8009920:	f000 80a9 	beq.w	8009a76 <HAL_TIM_ConfigClockSource+0x1aa>
 8009924:	4a62      	ldr	r2, [pc, #392]	@ (8009ab0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009926:	4293      	cmp	r3, r2
 8009928:	f200 80ae 	bhi.w	8009a88 <HAL_TIM_ConfigClockSource+0x1bc>
 800992c:	4a61      	ldr	r2, [pc, #388]	@ (8009ab4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800992e:	4293      	cmp	r3, r2
 8009930:	f000 80a1 	beq.w	8009a76 <HAL_TIM_ConfigClockSource+0x1aa>
 8009934:	4a5f      	ldr	r2, [pc, #380]	@ (8009ab4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009936:	4293      	cmp	r3, r2
 8009938:	f200 80a6 	bhi.w	8009a88 <HAL_TIM_ConfigClockSource+0x1bc>
 800993c:	4a5e      	ldr	r2, [pc, #376]	@ (8009ab8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800993e:	4293      	cmp	r3, r2
 8009940:	f000 8099 	beq.w	8009a76 <HAL_TIM_ConfigClockSource+0x1aa>
 8009944:	4a5c      	ldr	r2, [pc, #368]	@ (8009ab8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009946:	4293      	cmp	r3, r2
 8009948:	f200 809e 	bhi.w	8009a88 <HAL_TIM_ConfigClockSource+0x1bc>
 800994c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009950:	f000 8091 	beq.w	8009a76 <HAL_TIM_ConfigClockSource+0x1aa>
 8009954:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009958:	f200 8096 	bhi.w	8009a88 <HAL_TIM_ConfigClockSource+0x1bc>
 800995c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009960:	f000 8089 	beq.w	8009a76 <HAL_TIM_ConfigClockSource+0x1aa>
 8009964:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009968:	f200 808e 	bhi.w	8009a88 <HAL_TIM_ConfigClockSource+0x1bc>
 800996c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009970:	d03e      	beq.n	80099f0 <HAL_TIM_ConfigClockSource+0x124>
 8009972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009976:	f200 8087 	bhi.w	8009a88 <HAL_TIM_ConfigClockSource+0x1bc>
 800997a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800997e:	f000 8086 	beq.w	8009a8e <HAL_TIM_ConfigClockSource+0x1c2>
 8009982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009986:	d87f      	bhi.n	8009a88 <HAL_TIM_ConfigClockSource+0x1bc>
 8009988:	2b70      	cmp	r3, #112	@ 0x70
 800998a:	d01a      	beq.n	80099c2 <HAL_TIM_ConfigClockSource+0xf6>
 800998c:	2b70      	cmp	r3, #112	@ 0x70
 800998e:	d87b      	bhi.n	8009a88 <HAL_TIM_ConfigClockSource+0x1bc>
 8009990:	2b60      	cmp	r3, #96	@ 0x60
 8009992:	d050      	beq.n	8009a36 <HAL_TIM_ConfigClockSource+0x16a>
 8009994:	2b60      	cmp	r3, #96	@ 0x60
 8009996:	d877      	bhi.n	8009a88 <HAL_TIM_ConfigClockSource+0x1bc>
 8009998:	2b50      	cmp	r3, #80	@ 0x50
 800999a:	d03c      	beq.n	8009a16 <HAL_TIM_ConfigClockSource+0x14a>
 800999c:	2b50      	cmp	r3, #80	@ 0x50
 800999e:	d873      	bhi.n	8009a88 <HAL_TIM_ConfigClockSource+0x1bc>
 80099a0:	2b40      	cmp	r3, #64	@ 0x40
 80099a2:	d058      	beq.n	8009a56 <HAL_TIM_ConfigClockSource+0x18a>
 80099a4:	2b40      	cmp	r3, #64	@ 0x40
 80099a6:	d86f      	bhi.n	8009a88 <HAL_TIM_ConfigClockSource+0x1bc>
 80099a8:	2b30      	cmp	r3, #48	@ 0x30
 80099aa:	d064      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0x1aa>
 80099ac:	2b30      	cmp	r3, #48	@ 0x30
 80099ae:	d86b      	bhi.n	8009a88 <HAL_TIM_ConfigClockSource+0x1bc>
 80099b0:	2b20      	cmp	r3, #32
 80099b2:	d060      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0x1aa>
 80099b4:	2b20      	cmp	r3, #32
 80099b6:	d867      	bhi.n	8009a88 <HAL_TIM_ConfigClockSource+0x1bc>
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d05c      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0x1aa>
 80099bc:	2b10      	cmp	r3, #16
 80099be:	d05a      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0x1aa>
 80099c0:	e062      	b.n	8009a88 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80099d2:	f000 f9bf 	bl	8009d54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80099e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	609a      	str	r2, [r3, #8]
      break;
 80099ee:	e04f      	b.n	8009a90 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a00:	f000 f9a8 	bl	8009d54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	689a      	ldr	r2, [r3, #8]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a12:	609a      	str	r2, [r3, #8]
      break;
 8009a14:	e03c      	b.n	8009a90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a22:	461a      	mov	r2, r3
 8009a24:	f000 f918 	bl	8009c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2150      	movs	r1, #80	@ 0x50
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f000 f972 	bl	8009d18 <TIM_ITRx_SetConfig>
      break;
 8009a34:	e02c      	b.n	8009a90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a42:	461a      	mov	r2, r3
 8009a44:	f000 f937 	bl	8009cb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2160      	movs	r1, #96	@ 0x60
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 f962 	bl	8009d18 <TIM_ITRx_SetConfig>
      break;
 8009a54:	e01c      	b.n	8009a90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a62:	461a      	mov	r2, r3
 8009a64:	f000 f8f8 	bl	8009c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2140      	movs	r1, #64	@ 0x40
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f000 f952 	bl	8009d18 <TIM_ITRx_SetConfig>
      break;
 8009a74:	e00c      	b.n	8009a90 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	4610      	mov	r0, r2
 8009a82:	f000 f949 	bl	8009d18 <TIM_ITRx_SetConfig>
      break;
 8009a86:	e003      	b.n	8009a90 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a8c:	e000      	b.n	8009a90 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009a8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	ffceff88 	.word	0xffceff88
 8009ab0:	00100040 	.word	0x00100040
 8009ab4:	00100030 	.word	0x00100030
 8009ab8:	00100020 	.word	0x00100020

08009abc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ad8:	bf00      	nop
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a46      	ldr	r2, [pc, #280]	@ (8009c38 <TIM_Base_SetConfig+0x12c>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d013      	beq.n	8009b4c <TIM_Base_SetConfig+0x40>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b2a:	d00f      	beq.n	8009b4c <TIM_Base_SetConfig+0x40>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a43      	ldr	r2, [pc, #268]	@ (8009c3c <TIM_Base_SetConfig+0x130>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d00b      	beq.n	8009b4c <TIM_Base_SetConfig+0x40>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a42      	ldr	r2, [pc, #264]	@ (8009c40 <TIM_Base_SetConfig+0x134>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d007      	beq.n	8009b4c <TIM_Base_SetConfig+0x40>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a41      	ldr	r2, [pc, #260]	@ (8009c44 <TIM_Base_SetConfig+0x138>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d003      	beq.n	8009b4c <TIM_Base_SetConfig+0x40>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a40      	ldr	r2, [pc, #256]	@ (8009c48 <TIM_Base_SetConfig+0x13c>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d108      	bne.n	8009b5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a35      	ldr	r2, [pc, #212]	@ (8009c38 <TIM_Base_SetConfig+0x12c>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d01f      	beq.n	8009ba6 <TIM_Base_SetConfig+0x9a>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b6c:	d01b      	beq.n	8009ba6 <TIM_Base_SetConfig+0x9a>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a32      	ldr	r2, [pc, #200]	@ (8009c3c <TIM_Base_SetConfig+0x130>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d017      	beq.n	8009ba6 <TIM_Base_SetConfig+0x9a>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a31      	ldr	r2, [pc, #196]	@ (8009c40 <TIM_Base_SetConfig+0x134>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d013      	beq.n	8009ba6 <TIM_Base_SetConfig+0x9a>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a30      	ldr	r2, [pc, #192]	@ (8009c44 <TIM_Base_SetConfig+0x138>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d00f      	beq.n	8009ba6 <TIM_Base_SetConfig+0x9a>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a2f      	ldr	r2, [pc, #188]	@ (8009c48 <TIM_Base_SetConfig+0x13c>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d00b      	beq.n	8009ba6 <TIM_Base_SetConfig+0x9a>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a2e      	ldr	r2, [pc, #184]	@ (8009c4c <TIM_Base_SetConfig+0x140>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d007      	beq.n	8009ba6 <TIM_Base_SetConfig+0x9a>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4a2d      	ldr	r2, [pc, #180]	@ (8009c50 <TIM_Base_SetConfig+0x144>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d003      	beq.n	8009ba6 <TIM_Base_SetConfig+0x9a>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8009c54 <TIM_Base_SetConfig+0x148>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d108      	bne.n	8009bb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	695b      	ldr	r3, [r3, #20]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	689a      	ldr	r2, [r3, #8]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a16      	ldr	r2, [pc, #88]	@ (8009c38 <TIM_Base_SetConfig+0x12c>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d00f      	beq.n	8009c04 <TIM_Base_SetConfig+0xf8>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a18      	ldr	r2, [pc, #96]	@ (8009c48 <TIM_Base_SetConfig+0x13c>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d00b      	beq.n	8009c04 <TIM_Base_SetConfig+0xf8>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a17      	ldr	r2, [pc, #92]	@ (8009c4c <TIM_Base_SetConfig+0x140>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d007      	beq.n	8009c04 <TIM_Base_SetConfig+0xf8>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a16      	ldr	r2, [pc, #88]	@ (8009c50 <TIM_Base_SetConfig+0x144>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d003      	beq.n	8009c04 <TIM_Base_SetConfig+0xf8>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a15      	ldr	r2, [pc, #84]	@ (8009c54 <TIM_Base_SetConfig+0x148>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d103      	bne.n	8009c0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	691a      	ldr	r2, [r3, #16]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	f003 0301 	and.w	r3, r3, #1
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d105      	bne.n	8009c2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	f023 0201 	bic.w	r2, r3, #1
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	611a      	str	r2, [r3, #16]
  }
}
 8009c2a:	bf00      	nop
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	40010000 	.word	0x40010000
 8009c3c:	40000400 	.word	0x40000400
 8009c40:	40000800 	.word	0x40000800
 8009c44:	40000c00 	.word	0x40000c00
 8009c48:	40010400 	.word	0x40010400
 8009c4c:	40014000 	.word	0x40014000
 8009c50:	40014400 	.word	0x40014400
 8009c54:	40014800 	.word	0x40014800

08009c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b087      	sub	sp, #28
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6a1b      	ldr	r3, [r3, #32]
 8009c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	f023 0201 	bic.w	r2, r3, #1
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	011b      	lsls	r3, r3, #4
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f023 030a 	bic.w	r3, r3, #10
 8009c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c96:	697a      	ldr	r2, [r7, #20]
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	621a      	str	r2, [r3, #32]
}
 8009caa:	bf00      	nop
 8009cac:	371c      	adds	r7, #28
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b087      	sub	sp, #28
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	60f8      	str	r0, [r7, #12]
 8009cbe:	60b9      	str	r1, [r7, #8]
 8009cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6a1b      	ldr	r3, [r3, #32]
 8009ccc:	f023 0210 	bic.w	r2, r3, #16
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	031b      	lsls	r3, r3, #12
 8009ce6:	693a      	ldr	r2, [r7, #16]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009cf2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	011b      	lsls	r3, r3, #4
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	621a      	str	r2, [r3, #32]
}
 8009d0a:	bf00      	nop
 8009d0c:	371c      	adds	r7, #28
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
	...

08009d18 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	4b09      	ldr	r3, [pc, #36]	@ (8009d50 <TIM_ITRx_SetConfig+0x38>)
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	f043 0307 	orr.w	r3, r3, #7
 8009d3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	609a      	str	r2, [r3, #8]
}
 8009d42:	bf00      	nop
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	ffcfff8f 	.word	0xffcfff8f

08009d54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b087      	sub	sp, #28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
 8009d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	021a      	lsls	r2, r3, #8
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	431a      	orrs	r2, r3
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	609a      	str	r2, [r3, #8]
}
 8009d88:	bf00      	nop
 8009d8a:	371c      	adds	r7, #28
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d101      	bne.n	8009dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009da8:	2302      	movs	r3, #2
 8009daa:	e06d      	b.n	8009e88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2202      	movs	r2, #2
 8009db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a30      	ldr	r2, [pc, #192]	@ (8009e94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d004      	beq.n	8009de0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a2f      	ldr	r2, [pc, #188]	@ (8009e98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d108      	bne.n	8009df2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009de6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009df8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a20      	ldr	r2, [pc, #128]	@ (8009e94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d022      	beq.n	8009e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e1e:	d01d      	beq.n	8009e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a1d      	ldr	r2, [pc, #116]	@ (8009e9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d018      	beq.n	8009e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d013      	beq.n	8009e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a1a      	ldr	r2, [pc, #104]	@ (8009ea4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d00e      	beq.n	8009e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a15      	ldr	r2, [pc, #84]	@ (8009e98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d009      	beq.n	8009e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a16      	ldr	r2, [pc, #88]	@ (8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d004      	beq.n	8009e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a15      	ldr	r2, [pc, #84]	@ (8009eac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d10c      	bne.n	8009e76 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	40010000 	.word	0x40010000
 8009e98:	40010400 	.word	0x40010400
 8009e9c:	40000400 	.word	0x40000400
 8009ea0:	40000800 	.word	0x40000800
 8009ea4:	40000c00 	.word	0x40000c00
 8009ea8:	40001800 	.word	0x40001800
 8009eac:	40014000 	.word	0x40014000

08009eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e042      	b.n	8009f84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d106      	bne.n	8009f16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7f7 fab5 	bl	8001480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2224      	movs	r2, #36	@ 0x24
 8009f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f022 0201 	bic.w	r2, r2, #1
 8009f2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d002      	beq.n	8009f3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 fee6 	bl	800ad08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f97b 	bl	800a238 <UART_SetConfig>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d101      	bne.n	8009f4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e01b      	b.n	8009f84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689a      	ldr	r2, [r3, #8]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f042 0201 	orr.w	r2, r2, #1
 8009f7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 ff65 	bl	800ae4c <UART_CheckIdleState>
 8009f82:	4603      	mov	r3, r0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08a      	sub	sp, #40	@ 0x28
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	603b      	str	r3, [r7, #0]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fa2:	2b20      	cmp	r3, #32
 8009fa4:	d17b      	bne.n	800a09e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <HAL_UART_Transmit+0x26>
 8009fac:	88fb      	ldrh	r3, [r7, #6]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e074      	b.n	800a0a0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2221      	movs	r2, #33	@ 0x21
 8009fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fc6:	f7f8 fa73 	bl	80024b0 <HAL_GetTick>
 8009fca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	88fa      	ldrh	r2, [r7, #6]
 8009fd0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	88fa      	ldrh	r2, [r7, #6]
 8009fd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fe4:	d108      	bne.n	8009ff8 <HAL_UART_Transmit+0x6c>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d104      	bne.n	8009ff8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	61bb      	str	r3, [r7, #24]
 8009ff6:	e003      	b.n	800a000 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a000:	e030      	b.n	800a064 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2200      	movs	r2, #0
 800a00a:	2180      	movs	r1, #128	@ 0x80
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f000 ffc7 	bl	800afa0 <UART_WaitOnFlagUntilTimeout>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d005      	beq.n	800a024 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2220      	movs	r2, #32
 800a01c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a020:	2303      	movs	r3, #3
 800a022:	e03d      	b.n	800a0a0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10b      	bne.n	800a042 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a038:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	3302      	adds	r3, #2
 800a03e:	61bb      	str	r3, [r7, #24]
 800a040:	e007      	b.n	800a052 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	781a      	ldrb	r2, [r3, #0]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	3301      	adds	r3, #1
 800a050:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a058:	b29b      	uxth	r3, r3
 800a05a:	3b01      	subs	r3, #1
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1c8      	bne.n	800a002 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	2200      	movs	r2, #0
 800a078:	2140      	movs	r1, #64	@ 0x40
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f000 ff90 	bl	800afa0 <UART_WaitOnFlagUntilTimeout>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d005      	beq.n	800a092 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2220      	movs	r2, #32
 800a08a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e006      	b.n	800a0a0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2220      	movs	r2, #32
 800a096:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	e000      	b.n	800a0a0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a09e:	2302      	movs	r3, #2
  }
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3720      	adds	r7, #32
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b08a      	sub	sp, #40	@ 0x28
 800a0ac:	af02      	add	r7, sp, #8
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	603b      	str	r3, [r7, #0]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0be:	2b20      	cmp	r3, #32
 800a0c0:	f040 80b5 	bne.w	800a22e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d002      	beq.n	800a0d0 <HAL_UART_Receive+0x28>
 800a0ca:	88fb      	ldrh	r3, [r7, #6]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d101      	bne.n	800a0d4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e0ad      	b.n	800a230 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2222      	movs	r2, #34	@ 0x22
 800a0e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0ea:	f7f8 f9e1 	bl	80024b0 <HAL_GetTick>
 800a0ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	88fa      	ldrh	r2, [r7, #6]
 800a0f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	88fa      	ldrh	r2, [r7, #6]
 800a0fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a108:	d10e      	bne.n	800a128 <HAL_UART_Receive+0x80>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d105      	bne.n	800a11e <HAL_UART_Receive+0x76>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a118:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a11c:	e02d      	b.n	800a17a <HAL_UART_Receive+0xd2>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	22ff      	movs	r2, #255	@ 0xff
 800a122:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a126:	e028      	b.n	800a17a <HAL_UART_Receive+0xd2>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10d      	bne.n	800a14c <HAL_UART_Receive+0xa4>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d104      	bne.n	800a142 <HAL_UART_Receive+0x9a>
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	22ff      	movs	r2, #255	@ 0xff
 800a13c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a140:	e01b      	b.n	800a17a <HAL_UART_Receive+0xd2>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	227f      	movs	r2, #127	@ 0x7f
 800a146:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a14a:	e016      	b.n	800a17a <HAL_UART_Receive+0xd2>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a154:	d10d      	bne.n	800a172 <HAL_UART_Receive+0xca>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d104      	bne.n	800a168 <HAL_UART_Receive+0xc0>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	227f      	movs	r2, #127	@ 0x7f
 800a162:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a166:	e008      	b.n	800a17a <HAL_UART_Receive+0xd2>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	223f      	movs	r2, #63	@ 0x3f
 800a16c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a170:	e003      	b.n	800a17a <HAL_UART_Receive+0xd2>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a180:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a18a:	d108      	bne.n	800a19e <HAL_UART_Receive+0xf6>
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d104      	bne.n	800a19e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800a194:	2300      	movs	r3, #0
 800a196:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	61bb      	str	r3, [r7, #24]
 800a19c:	e003      	b.n	800a1a6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a1a6:	e036      	b.n	800a216 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2120      	movs	r1, #32
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f000 fef4 	bl	800afa0 <UART_WaitOnFlagUntilTimeout>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d005      	beq.n	800a1ca <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2220      	movs	r2, #32
 800a1c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	e032      	b.n	800a230 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10c      	bne.n	800a1ea <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	8a7b      	ldrh	r3, [r7, #18]
 800a1da:	4013      	ands	r3, r2
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	3302      	adds	r3, #2
 800a1e6:	61bb      	str	r3, [r7, #24]
 800a1e8:	e00c      	b.n	800a204 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	8a7b      	ldrh	r3, [r7, #18]
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	3301      	adds	r3, #1
 800a202:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	3b01      	subs	r3, #1
 800a20e:	b29a      	uxth	r2, r3
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1c2      	bne.n	800a1a8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2220      	movs	r2, #32
 800a226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	e000      	b.n	800a230 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800a22e:	2302      	movs	r3, #2
  }
}
 800a230:	4618      	mov	r0, r3
 800a232:	3720      	adds	r7, #32
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a23c:	b092      	sub	sp, #72	@ 0x48
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	689a      	ldr	r2, [r3, #8]
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	431a      	orrs	r2, r3
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	431a      	orrs	r2, r3
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	69db      	ldr	r3, [r3, #28]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	4bbe      	ldr	r3, [pc, #760]	@ (800a560 <UART_SetConfig+0x328>)
 800a268:	4013      	ands	r3, r2
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	6812      	ldr	r2, [r2, #0]
 800a26e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a270:	430b      	orrs	r3, r1
 800a272:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	68da      	ldr	r2, [r3, #12]
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	699b      	ldr	r3, [r3, #24]
 800a28e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4ab3      	ldr	r2, [pc, #716]	@ (800a564 <UART_SetConfig+0x32c>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d004      	beq.n	800a2a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	689a      	ldr	r2, [r3, #8]
 800a2aa:	4baf      	ldr	r3, [pc, #700]	@ (800a568 <UART_SetConfig+0x330>)
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	6812      	ldr	r2, [r2, #0]
 800a2b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a2b4:	430b      	orrs	r3, r1
 800a2b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2be:	f023 010f 	bic.w	r1, r3, #15
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4aa6      	ldr	r2, [pc, #664]	@ (800a56c <UART_SetConfig+0x334>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d177      	bne.n	800a3c8 <UART_SetConfig+0x190>
 800a2d8:	4ba5      	ldr	r3, [pc, #660]	@ (800a570 <UART_SetConfig+0x338>)
 800a2da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a2e0:	2b28      	cmp	r3, #40	@ 0x28
 800a2e2:	d86d      	bhi.n	800a3c0 <UART_SetConfig+0x188>
 800a2e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a2ec <UART_SetConfig+0xb4>)
 800a2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ea:	bf00      	nop
 800a2ec:	0800a391 	.word	0x0800a391
 800a2f0:	0800a3c1 	.word	0x0800a3c1
 800a2f4:	0800a3c1 	.word	0x0800a3c1
 800a2f8:	0800a3c1 	.word	0x0800a3c1
 800a2fc:	0800a3c1 	.word	0x0800a3c1
 800a300:	0800a3c1 	.word	0x0800a3c1
 800a304:	0800a3c1 	.word	0x0800a3c1
 800a308:	0800a3c1 	.word	0x0800a3c1
 800a30c:	0800a399 	.word	0x0800a399
 800a310:	0800a3c1 	.word	0x0800a3c1
 800a314:	0800a3c1 	.word	0x0800a3c1
 800a318:	0800a3c1 	.word	0x0800a3c1
 800a31c:	0800a3c1 	.word	0x0800a3c1
 800a320:	0800a3c1 	.word	0x0800a3c1
 800a324:	0800a3c1 	.word	0x0800a3c1
 800a328:	0800a3c1 	.word	0x0800a3c1
 800a32c:	0800a3a1 	.word	0x0800a3a1
 800a330:	0800a3c1 	.word	0x0800a3c1
 800a334:	0800a3c1 	.word	0x0800a3c1
 800a338:	0800a3c1 	.word	0x0800a3c1
 800a33c:	0800a3c1 	.word	0x0800a3c1
 800a340:	0800a3c1 	.word	0x0800a3c1
 800a344:	0800a3c1 	.word	0x0800a3c1
 800a348:	0800a3c1 	.word	0x0800a3c1
 800a34c:	0800a3a9 	.word	0x0800a3a9
 800a350:	0800a3c1 	.word	0x0800a3c1
 800a354:	0800a3c1 	.word	0x0800a3c1
 800a358:	0800a3c1 	.word	0x0800a3c1
 800a35c:	0800a3c1 	.word	0x0800a3c1
 800a360:	0800a3c1 	.word	0x0800a3c1
 800a364:	0800a3c1 	.word	0x0800a3c1
 800a368:	0800a3c1 	.word	0x0800a3c1
 800a36c:	0800a3b1 	.word	0x0800a3b1
 800a370:	0800a3c1 	.word	0x0800a3c1
 800a374:	0800a3c1 	.word	0x0800a3c1
 800a378:	0800a3c1 	.word	0x0800a3c1
 800a37c:	0800a3c1 	.word	0x0800a3c1
 800a380:	0800a3c1 	.word	0x0800a3c1
 800a384:	0800a3c1 	.word	0x0800a3c1
 800a388:	0800a3c1 	.word	0x0800a3c1
 800a38c:	0800a3b9 	.word	0x0800a3b9
 800a390:	2301      	movs	r3, #1
 800a392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a396:	e222      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a398:	2304      	movs	r3, #4
 800a39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39e:	e21e      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a3a0:	2308      	movs	r3, #8
 800a3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a6:	e21a      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a3a8:	2310      	movs	r3, #16
 800a3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ae:	e216      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a3b0:	2320      	movs	r3, #32
 800a3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b6:	e212      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a3b8:	2340      	movs	r3, #64	@ 0x40
 800a3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3be:	e20e      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a3c0:	2380      	movs	r3, #128	@ 0x80
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c6:	e20a      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a69      	ldr	r2, [pc, #420]	@ (800a574 <UART_SetConfig+0x33c>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d130      	bne.n	800a434 <UART_SetConfig+0x1fc>
 800a3d2:	4b67      	ldr	r3, [pc, #412]	@ (800a570 <UART_SetConfig+0x338>)
 800a3d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3d6:	f003 0307 	and.w	r3, r3, #7
 800a3da:	2b05      	cmp	r3, #5
 800a3dc:	d826      	bhi.n	800a42c <UART_SetConfig+0x1f4>
 800a3de:	a201      	add	r2, pc, #4	@ (adr r2, 800a3e4 <UART_SetConfig+0x1ac>)
 800a3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e4:	0800a3fd 	.word	0x0800a3fd
 800a3e8:	0800a405 	.word	0x0800a405
 800a3ec:	0800a40d 	.word	0x0800a40d
 800a3f0:	0800a415 	.word	0x0800a415
 800a3f4:	0800a41d 	.word	0x0800a41d
 800a3f8:	0800a425 	.word	0x0800a425
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a402:	e1ec      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a404:	2304      	movs	r3, #4
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40a:	e1e8      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a40c:	2308      	movs	r3, #8
 800a40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a412:	e1e4      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a414:	2310      	movs	r3, #16
 800a416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41a:	e1e0      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a41c:	2320      	movs	r3, #32
 800a41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a422:	e1dc      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a424:	2340      	movs	r3, #64	@ 0x40
 800a426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42a:	e1d8      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a42c:	2380      	movs	r3, #128	@ 0x80
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a432:	e1d4      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a4f      	ldr	r2, [pc, #316]	@ (800a578 <UART_SetConfig+0x340>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d130      	bne.n	800a4a0 <UART_SetConfig+0x268>
 800a43e:	4b4c      	ldr	r3, [pc, #304]	@ (800a570 <UART_SetConfig+0x338>)
 800a440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a442:	f003 0307 	and.w	r3, r3, #7
 800a446:	2b05      	cmp	r3, #5
 800a448:	d826      	bhi.n	800a498 <UART_SetConfig+0x260>
 800a44a:	a201      	add	r2, pc, #4	@ (adr r2, 800a450 <UART_SetConfig+0x218>)
 800a44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a450:	0800a469 	.word	0x0800a469
 800a454:	0800a471 	.word	0x0800a471
 800a458:	0800a479 	.word	0x0800a479
 800a45c:	0800a481 	.word	0x0800a481
 800a460:	0800a489 	.word	0x0800a489
 800a464:	0800a491 	.word	0x0800a491
 800a468:	2300      	movs	r3, #0
 800a46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46e:	e1b6      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a470:	2304      	movs	r3, #4
 800a472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a476:	e1b2      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a478:	2308      	movs	r3, #8
 800a47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a47e:	e1ae      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a480:	2310      	movs	r3, #16
 800a482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a486:	e1aa      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a488:	2320      	movs	r3, #32
 800a48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a48e:	e1a6      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a490:	2340      	movs	r3, #64	@ 0x40
 800a492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a496:	e1a2      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a498:	2380      	movs	r3, #128	@ 0x80
 800a49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49e:	e19e      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a35      	ldr	r2, [pc, #212]	@ (800a57c <UART_SetConfig+0x344>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d130      	bne.n	800a50c <UART_SetConfig+0x2d4>
 800a4aa:	4b31      	ldr	r3, [pc, #196]	@ (800a570 <UART_SetConfig+0x338>)
 800a4ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ae:	f003 0307 	and.w	r3, r3, #7
 800a4b2:	2b05      	cmp	r3, #5
 800a4b4:	d826      	bhi.n	800a504 <UART_SetConfig+0x2cc>
 800a4b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4bc <UART_SetConfig+0x284>)
 800a4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4bc:	0800a4d5 	.word	0x0800a4d5
 800a4c0:	0800a4dd 	.word	0x0800a4dd
 800a4c4:	0800a4e5 	.word	0x0800a4e5
 800a4c8:	0800a4ed 	.word	0x0800a4ed
 800a4cc:	0800a4f5 	.word	0x0800a4f5
 800a4d0:	0800a4fd 	.word	0x0800a4fd
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4da:	e180      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a4dc:	2304      	movs	r3, #4
 800a4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e2:	e17c      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a4e4:	2308      	movs	r3, #8
 800a4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ea:	e178      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a4ec:	2310      	movs	r3, #16
 800a4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f2:	e174      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a4f4:	2320      	movs	r3, #32
 800a4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fa:	e170      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a4fc:	2340      	movs	r3, #64	@ 0x40
 800a4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a502:	e16c      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a504:	2380      	movs	r3, #128	@ 0x80
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50a:	e168      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a1b      	ldr	r2, [pc, #108]	@ (800a580 <UART_SetConfig+0x348>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d142      	bne.n	800a59c <UART_SetConfig+0x364>
 800a516:	4b16      	ldr	r3, [pc, #88]	@ (800a570 <UART_SetConfig+0x338>)
 800a518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a51a:	f003 0307 	and.w	r3, r3, #7
 800a51e:	2b05      	cmp	r3, #5
 800a520:	d838      	bhi.n	800a594 <UART_SetConfig+0x35c>
 800a522:	a201      	add	r2, pc, #4	@ (adr r2, 800a528 <UART_SetConfig+0x2f0>)
 800a524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a528:	0800a541 	.word	0x0800a541
 800a52c:	0800a549 	.word	0x0800a549
 800a530:	0800a551 	.word	0x0800a551
 800a534:	0800a559 	.word	0x0800a559
 800a538:	0800a585 	.word	0x0800a585
 800a53c:	0800a58d 	.word	0x0800a58d
 800a540:	2300      	movs	r3, #0
 800a542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a546:	e14a      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a548:	2304      	movs	r3, #4
 800a54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54e:	e146      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a550:	2308      	movs	r3, #8
 800a552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a556:	e142      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a558:	2310      	movs	r3, #16
 800a55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a55e:	e13e      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a560:	cfff69f3 	.word	0xcfff69f3
 800a564:	58000c00 	.word	0x58000c00
 800a568:	11fff4ff 	.word	0x11fff4ff
 800a56c:	40011000 	.word	0x40011000
 800a570:	58024400 	.word	0x58024400
 800a574:	40004400 	.word	0x40004400
 800a578:	40004800 	.word	0x40004800
 800a57c:	40004c00 	.word	0x40004c00
 800a580:	40005000 	.word	0x40005000
 800a584:	2320      	movs	r3, #32
 800a586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58a:	e128      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a58c:	2340      	movs	r3, #64	@ 0x40
 800a58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a592:	e124      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a594:	2380      	movs	r3, #128	@ 0x80
 800a596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59a:	e120      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4acb      	ldr	r2, [pc, #812]	@ (800a8d0 <UART_SetConfig+0x698>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d176      	bne.n	800a694 <UART_SetConfig+0x45c>
 800a5a6:	4bcb      	ldr	r3, [pc, #812]	@ (800a8d4 <UART_SetConfig+0x69c>)
 800a5a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5ae:	2b28      	cmp	r3, #40	@ 0x28
 800a5b0:	d86c      	bhi.n	800a68c <UART_SetConfig+0x454>
 800a5b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b8 <UART_SetConfig+0x380>)
 800a5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b8:	0800a65d 	.word	0x0800a65d
 800a5bc:	0800a68d 	.word	0x0800a68d
 800a5c0:	0800a68d 	.word	0x0800a68d
 800a5c4:	0800a68d 	.word	0x0800a68d
 800a5c8:	0800a68d 	.word	0x0800a68d
 800a5cc:	0800a68d 	.word	0x0800a68d
 800a5d0:	0800a68d 	.word	0x0800a68d
 800a5d4:	0800a68d 	.word	0x0800a68d
 800a5d8:	0800a665 	.word	0x0800a665
 800a5dc:	0800a68d 	.word	0x0800a68d
 800a5e0:	0800a68d 	.word	0x0800a68d
 800a5e4:	0800a68d 	.word	0x0800a68d
 800a5e8:	0800a68d 	.word	0x0800a68d
 800a5ec:	0800a68d 	.word	0x0800a68d
 800a5f0:	0800a68d 	.word	0x0800a68d
 800a5f4:	0800a68d 	.word	0x0800a68d
 800a5f8:	0800a66d 	.word	0x0800a66d
 800a5fc:	0800a68d 	.word	0x0800a68d
 800a600:	0800a68d 	.word	0x0800a68d
 800a604:	0800a68d 	.word	0x0800a68d
 800a608:	0800a68d 	.word	0x0800a68d
 800a60c:	0800a68d 	.word	0x0800a68d
 800a610:	0800a68d 	.word	0x0800a68d
 800a614:	0800a68d 	.word	0x0800a68d
 800a618:	0800a675 	.word	0x0800a675
 800a61c:	0800a68d 	.word	0x0800a68d
 800a620:	0800a68d 	.word	0x0800a68d
 800a624:	0800a68d 	.word	0x0800a68d
 800a628:	0800a68d 	.word	0x0800a68d
 800a62c:	0800a68d 	.word	0x0800a68d
 800a630:	0800a68d 	.word	0x0800a68d
 800a634:	0800a68d 	.word	0x0800a68d
 800a638:	0800a67d 	.word	0x0800a67d
 800a63c:	0800a68d 	.word	0x0800a68d
 800a640:	0800a68d 	.word	0x0800a68d
 800a644:	0800a68d 	.word	0x0800a68d
 800a648:	0800a68d 	.word	0x0800a68d
 800a64c:	0800a68d 	.word	0x0800a68d
 800a650:	0800a68d 	.word	0x0800a68d
 800a654:	0800a68d 	.word	0x0800a68d
 800a658:	0800a685 	.word	0x0800a685
 800a65c:	2301      	movs	r3, #1
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a662:	e0bc      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a664:	2304      	movs	r3, #4
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66a:	e0b8      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a66c:	2308      	movs	r3, #8
 800a66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a672:	e0b4      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a674:	2310      	movs	r3, #16
 800a676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a67a:	e0b0      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a67c:	2320      	movs	r3, #32
 800a67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a682:	e0ac      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a684:	2340      	movs	r3, #64	@ 0x40
 800a686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a68a:	e0a8      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a68c:	2380      	movs	r3, #128	@ 0x80
 800a68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a692:	e0a4      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a8f      	ldr	r2, [pc, #572]	@ (800a8d8 <UART_SetConfig+0x6a0>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d130      	bne.n	800a700 <UART_SetConfig+0x4c8>
 800a69e:	4b8d      	ldr	r3, [pc, #564]	@ (800a8d4 <UART_SetConfig+0x69c>)
 800a6a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6a2:	f003 0307 	and.w	r3, r3, #7
 800a6a6:	2b05      	cmp	r3, #5
 800a6a8:	d826      	bhi.n	800a6f8 <UART_SetConfig+0x4c0>
 800a6aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a6b0 <UART_SetConfig+0x478>)
 800a6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b0:	0800a6c9 	.word	0x0800a6c9
 800a6b4:	0800a6d1 	.word	0x0800a6d1
 800a6b8:	0800a6d9 	.word	0x0800a6d9
 800a6bc:	0800a6e1 	.word	0x0800a6e1
 800a6c0:	0800a6e9 	.word	0x0800a6e9
 800a6c4:	0800a6f1 	.word	0x0800a6f1
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ce:	e086      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a6d0:	2304      	movs	r3, #4
 800a6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6d6:	e082      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a6d8:	2308      	movs	r3, #8
 800a6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6de:	e07e      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a6e0:	2310      	movs	r3, #16
 800a6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6e6:	e07a      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a6e8:	2320      	movs	r3, #32
 800a6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ee:	e076      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a6f0:	2340      	movs	r3, #64	@ 0x40
 800a6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f6:	e072      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a6f8:	2380      	movs	r3, #128	@ 0x80
 800a6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fe:	e06e      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a75      	ldr	r2, [pc, #468]	@ (800a8dc <UART_SetConfig+0x6a4>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d130      	bne.n	800a76c <UART_SetConfig+0x534>
 800a70a:	4b72      	ldr	r3, [pc, #456]	@ (800a8d4 <UART_SetConfig+0x69c>)
 800a70c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a70e:	f003 0307 	and.w	r3, r3, #7
 800a712:	2b05      	cmp	r3, #5
 800a714:	d826      	bhi.n	800a764 <UART_SetConfig+0x52c>
 800a716:	a201      	add	r2, pc, #4	@ (adr r2, 800a71c <UART_SetConfig+0x4e4>)
 800a718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71c:	0800a735 	.word	0x0800a735
 800a720:	0800a73d 	.word	0x0800a73d
 800a724:	0800a745 	.word	0x0800a745
 800a728:	0800a74d 	.word	0x0800a74d
 800a72c:	0800a755 	.word	0x0800a755
 800a730:	0800a75d 	.word	0x0800a75d
 800a734:	2300      	movs	r3, #0
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a73a:	e050      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a73c:	2304      	movs	r3, #4
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a742:	e04c      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a744:	2308      	movs	r3, #8
 800a746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a74a:	e048      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a74c:	2310      	movs	r3, #16
 800a74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a752:	e044      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a754:	2320      	movs	r3, #32
 800a756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a75a:	e040      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a75c:	2340      	movs	r3, #64	@ 0x40
 800a75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a762:	e03c      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a764:	2380      	movs	r3, #128	@ 0x80
 800a766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76a:	e038      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a5b      	ldr	r2, [pc, #364]	@ (800a8e0 <UART_SetConfig+0x6a8>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d130      	bne.n	800a7d8 <UART_SetConfig+0x5a0>
 800a776:	4b57      	ldr	r3, [pc, #348]	@ (800a8d4 <UART_SetConfig+0x69c>)
 800a778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a77a:	f003 0307 	and.w	r3, r3, #7
 800a77e:	2b05      	cmp	r3, #5
 800a780:	d826      	bhi.n	800a7d0 <UART_SetConfig+0x598>
 800a782:	a201      	add	r2, pc, #4	@ (adr r2, 800a788 <UART_SetConfig+0x550>)
 800a784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a788:	0800a7a1 	.word	0x0800a7a1
 800a78c:	0800a7a9 	.word	0x0800a7a9
 800a790:	0800a7b1 	.word	0x0800a7b1
 800a794:	0800a7b9 	.word	0x0800a7b9
 800a798:	0800a7c1 	.word	0x0800a7c1
 800a79c:	0800a7c9 	.word	0x0800a7c9
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7a6:	e01a      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a7a8:	2304      	movs	r3, #4
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ae:	e016      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a7b0:	2308      	movs	r3, #8
 800a7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7b6:	e012      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a7b8:	2310      	movs	r3, #16
 800a7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7be:	e00e      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a7c0:	2320      	movs	r3, #32
 800a7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7c6:	e00a      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a7c8:	2340      	movs	r3, #64	@ 0x40
 800a7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ce:	e006      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a7d0:	2380      	movs	r3, #128	@ 0x80
 800a7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7d6:	e002      	b.n	800a7de <UART_SetConfig+0x5a6>
 800a7d8:	2380      	movs	r3, #128	@ 0x80
 800a7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a3f      	ldr	r2, [pc, #252]	@ (800a8e0 <UART_SetConfig+0x6a8>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	f040 80f8 	bne.w	800a9da <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a7ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a7ee:	2b20      	cmp	r3, #32
 800a7f0:	dc46      	bgt.n	800a880 <UART_SetConfig+0x648>
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	f2c0 8082 	blt.w	800a8fc <UART_SetConfig+0x6c4>
 800a7f8:	3b02      	subs	r3, #2
 800a7fa:	2b1e      	cmp	r3, #30
 800a7fc:	d87e      	bhi.n	800a8fc <UART_SetConfig+0x6c4>
 800a7fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a804 <UART_SetConfig+0x5cc>)
 800a800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a804:	0800a887 	.word	0x0800a887
 800a808:	0800a8fd 	.word	0x0800a8fd
 800a80c:	0800a88f 	.word	0x0800a88f
 800a810:	0800a8fd 	.word	0x0800a8fd
 800a814:	0800a8fd 	.word	0x0800a8fd
 800a818:	0800a8fd 	.word	0x0800a8fd
 800a81c:	0800a89f 	.word	0x0800a89f
 800a820:	0800a8fd 	.word	0x0800a8fd
 800a824:	0800a8fd 	.word	0x0800a8fd
 800a828:	0800a8fd 	.word	0x0800a8fd
 800a82c:	0800a8fd 	.word	0x0800a8fd
 800a830:	0800a8fd 	.word	0x0800a8fd
 800a834:	0800a8fd 	.word	0x0800a8fd
 800a838:	0800a8fd 	.word	0x0800a8fd
 800a83c:	0800a8af 	.word	0x0800a8af
 800a840:	0800a8fd 	.word	0x0800a8fd
 800a844:	0800a8fd 	.word	0x0800a8fd
 800a848:	0800a8fd 	.word	0x0800a8fd
 800a84c:	0800a8fd 	.word	0x0800a8fd
 800a850:	0800a8fd 	.word	0x0800a8fd
 800a854:	0800a8fd 	.word	0x0800a8fd
 800a858:	0800a8fd 	.word	0x0800a8fd
 800a85c:	0800a8fd 	.word	0x0800a8fd
 800a860:	0800a8fd 	.word	0x0800a8fd
 800a864:	0800a8fd 	.word	0x0800a8fd
 800a868:	0800a8fd 	.word	0x0800a8fd
 800a86c:	0800a8fd 	.word	0x0800a8fd
 800a870:	0800a8fd 	.word	0x0800a8fd
 800a874:	0800a8fd 	.word	0x0800a8fd
 800a878:	0800a8fd 	.word	0x0800a8fd
 800a87c:	0800a8ef 	.word	0x0800a8ef
 800a880:	2b40      	cmp	r3, #64	@ 0x40
 800a882:	d037      	beq.n	800a8f4 <UART_SetConfig+0x6bc>
 800a884:	e03a      	b.n	800a8fc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a886:	f7fe f8d5 	bl	8008a34 <HAL_RCCEx_GetD3PCLK1Freq>
 800a88a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a88c:	e03c      	b.n	800a908 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a88e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a892:	4618      	mov	r0, r3
 800a894:	f7fe f8e4 	bl	8008a60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a89c:	e034      	b.n	800a908 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a89e:	f107 0318 	add.w	r3, r7, #24
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fe fa30 	bl	8008d08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ac:	e02c      	b.n	800a908 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8ae:	4b09      	ldr	r3, [pc, #36]	@ (800a8d4 <UART_SetConfig+0x69c>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0320 	and.w	r3, r3, #32
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d016      	beq.n	800a8e8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8ba:	4b06      	ldr	r3, [pc, #24]	@ (800a8d4 <UART_SetConfig+0x69c>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	08db      	lsrs	r3, r3, #3
 800a8c0:	f003 0303 	and.w	r3, r3, #3
 800a8c4:	4a07      	ldr	r2, [pc, #28]	@ (800a8e4 <UART_SetConfig+0x6ac>)
 800a8c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8cc:	e01c      	b.n	800a908 <UART_SetConfig+0x6d0>
 800a8ce:	bf00      	nop
 800a8d0:	40011400 	.word	0x40011400
 800a8d4:	58024400 	.word	0x58024400
 800a8d8:	40007800 	.word	0x40007800
 800a8dc:	40007c00 	.word	0x40007c00
 800a8e0:	58000c00 	.word	0x58000c00
 800a8e4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a8e8:	4b9d      	ldr	r3, [pc, #628]	@ (800ab60 <UART_SetConfig+0x928>)
 800a8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ec:	e00c      	b.n	800a908 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8ee:	4b9d      	ldr	r3, [pc, #628]	@ (800ab64 <UART_SetConfig+0x92c>)
 800a8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8f2:	e009      	b.n	800a908 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8fa:	e005      	b.n	800a908 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a906:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f000 81de 	beq.w	800accc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a914:	4a94      	ldr	r2, [pc, #592]	@ (800ab68 <UART_SetConfig+0x930>)
 800a916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a91a:	461a      	mov	r2, r3
 800a91c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a91e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a922:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	4613      	mov	r3, r2
 800a92a:	005b      	lsls	r3, r3, #1
 800a92c:	4413      	add	r3, r2
 800a92e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a930:	429a      	cmp	r2, r3
 800a932:	d305      	bcc.n	800a940 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a93a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d903      	bls.n	800a948 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a946:	e1c1      	b.n	800accc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a94a:	2200      	movs	r2, #0
 800a94c:	60bb      	str	r3, [r7, #8]
 800a94e:	60fa      	str	r2, [r7, #12]
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a954:	4a84      	ldr	r2, [pc, #528]	@ (800ab68 <UART_SetConfig+0x930>)
 800a956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	2200      	movs	r2, #0
 800a95e:	603b      	str	r3, [r7, #0]
 800a960:	607a      	str	r2, [r7, #4]
 800a962:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a966:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a96a:	f7f5 fcb9 	bl	80002e0 <__aeabi_uldivmod>
 800a96e:	4602      	mov	r2, r0
 800a970:	460b      	mov	r3, r1
 800a972:	4610      	mov	r0, r2
 800a974:	4619      	mov	r1, r3
 800a976:	f04f 0200 	mov.w	r2, #0
 800a97a:	f04f 0300 	mov.w	r3, #0
 800a97e:	020b      	lsls	r3, r1, #8
 800a980:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a984:	0202      	lsls	r2, r0, #8
 800a986:	6979      	ldr	r1, [r7, #20]
 800a988:	6849      	ldr	r1, [r1, #4]
 800a98a:	0849      	lsrs	r1, r1, #1
 800a98c:	2000      	movs	r0, #0
 800a98e:	460c      	mov	r4, r1
 800a990:	4605      	mov	r5, r0
 800a992:	eb12 0804 	adds.w	r8, r2, r4
 800a996:	eb43 0905 	adc.w	r9, r3, r5
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	469a      	mov	sl, r3
 800a9a2:	4693      	mov	fp, r2
 800a9a4:	4652      	mov	r2, sl
 800a9a6:	465b      	mov	r3, fp
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	4649      	mov	r1, r9
 800a9ac:	f7f5 fc98 	bl	80002e0 <__aeabi_uldivmod>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9be:	d308      	bcc.n	800a9d2 <UART_SetConfig+0x79a>
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9c6:	d204      	bcs.n	800a9d2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9ce:	60da      	str	r2, [r3, #12]
 800a9d0:	e17c      	b.n	800accc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a9d8:	e178      	b.n	800accc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9e2:	f040 80c5 	bne.w	800ab70 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a9e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a9ea:	2b20      	cmp	r3, #32
 800a9ec:	dc48      	bgt.n	800aa80 <UART_SetConfig+0x848>
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	db7b      	blt.n	800aaea <UART_SetConfig+0x8b2>
 800a9f2:	2b20      	cmp	r3, #32
 800a9f4:	d879      	bhi.n	800aaea <UART_SetConfig+0x8b2>
 800a9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a9fc <UART_SetConfig+0x7c4>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa87 	.word	0x0800aa87
 800aa00:	0800aa8f 	.word	0x0800aa8f
 800aa04:	0800aaeb 	.word	0x0800aaeb
 800aa08:	0800aaeb 	.word	0x0800aaeb
 800aa0c:	0800aa97 	.word	0x0800aa97
 800aa10:	0800aaeb 	.word	0x0800aaeb
 800aa14:	0800aaeb 	.word	0x0800aaeb
 800aa18:	0800aaeb 	.word	0x0800aaeb
 800aa1c:	0800aaa7 	.word	0x0800aaa7
 800aa20:	0800aaeb 	.word	0x0800aaeb
 800aa24:	0800aaeb 	.word	0x0800aaeb
 800aa28:	0800aaeb 	.word	0x0800aaeb
 800aa2c:	0800aaeb 	.word	0x0800aaeb
 800aa30:	0800aaeb 	.word	0x0800aaeb
 800aa34:	0800aaeb 	.word	0x0800aaeb
 800aa38:	0800aaeb 	.word	0x0800aaeb
 800aa3c:	0800aab7 	.word	0x0800aab7
 800aa40:	0800aaeb 	.word	0x0800aaeb
 800aa44:	0800aaeb 	.word	0x0800aaeb
 800aa48:	0800aaeb 	.word	0x0800aaeb
 800aa4c:	0800aaeb 	.word	0x0800aaeb
 800aa50:	0800aaeb 	.word	0x0800aaeb
 800aa54:	0800aaeb 	.word	0x0800aaeb
 800aa58:	0800aaeb 	.word	0x0800aaeb
 800aa5c:	0800aaeb 	.word	0x0800aaeb
 800aa60:	0800aaeb 	.word	0x0800aaeb
 800aa64:	0800aaeb 	.word	0x0800aaeb
 800aa68:	0800aaeb 	.word	0x0800aaeb
 800aa6c:	0800aaeb 	.word	0x0800aaeb
 800aa70:	0800aaeb 	.word	0x0800aaeb
 800aa74:	0800aaeb 	.word	0x0800aaeb
 800aa78:	0800aaeb 	.word	0x0800aaeb
 800aa7c:	0800aadd 	.word	0x0800aadd
 800aa80:	2b40      	cmp	r3, #64	@ 0x40
 800aa82:	d02e      	beq.n	800aae2 <UART_SetConfig+0x8aa>
 800aa84:	e031      	b.n	800aaea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa86:	f7fb fff9 	bl	8006a7c <HAL_RCC_GetPCLK1Freq>
 800aa8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa8c:	e033      	b.n	800aaf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa8e:	f7fc f80b 	bl	8006aa8 <HAL_RCC_GetPCLK2Freq>
 800aa92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa94:	e02f      	b.n	800aaf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fd ffe0 	bl	8008a60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aaa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaa4:	e027      	b.n	800aaf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaa6:	f107 0318 	add.w	r3, r7, #24
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fe f92c 	bl	8008d08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab4:	e01f      	b.n	800aaf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aab6:	4b2d      	ldr	r3, [pc, #180]	@ (800ab6c <UART_SetConfig+0x934>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 0320 	and.w	r3, r3, #32
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d009      	beq.n	800aad6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aac2:	4b2a      	ldr	r3, [pc, #168]	@ (800ab6c <UART_SetConfig+0x934>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	08db      	lsrs	r3, r3, #3
 800aac8:	f003 0303 	and.w	r3, r3, #3
 800aacc:	4a24      	ldr	r2, [pc, #144]	@ (800ab60 <UART_SetConfig+0x928>)
 800aace:	fa22 f303 	lsr.w	r3, r2, r3
 800aad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aad4:	e00f      	b.n	800aaf6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aad6:	4b22      	ldr	r3, [pc, #136]	@ (800ab60 <UART_SetConfig+0x928>)
 800aad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aada:	e00c      	b.n	800aaf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aadc:	4b21      	ldr	r3, [pc, #132]	@ (800ab64 <UART_SetConfig+0x92c>)
 800aade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aae0:	e009      	b.n	800aaf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aae8:	e005      	b.n	800aaf6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aaea:	2300      	movs	r3, #0
 800aaec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aaf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aaf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f000 80e7 	beq.w	800accc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab02:	4a19      	ldr	r2, [pc, #100]	@ (800ab68 <UART_SetConfig+0x930>)
 800ab04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab10:	005a      	lsls	r2, r3, #1
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	085b      	lsrs	r3, r3, #1
 800ab18:	441a      	add	r2, r3
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab22:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab26:	2b0f      	cmp	r3, #15
 800ab28:	d916      	bls.n	800ab58 <UART_SetConfig+0x920>
 800ab2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab30:	d212      	bcs.n	800ab58 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	f023 030f 	bic.w	r3, r3, #15
 800ab3a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3e:	085b      	lsrs	r3, r3, #1
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	f003 0307 	and.w	r3, r3, #7
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ab54:	60da      	str	r2, [r3, #12]
 800ab56:	e0b9      	b.n	800accc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ab5e:	e0b5      	b.n	800accc <UART_SetConfig+0xa94>
 800ab60:	03d09000 	.word	0x03d09000
 800ab64:	003d0900 	.word	0x003d0900
 800ab68:	08012560 	.word	0x08012560
 800ab6c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab70:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ab74:	2b20      	cmp	r3, #32
 800ab76:	dc49      	bgt.n	800ac0c <UART_SetConfig+0x9d4>
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	db7c      	blt.n	800ac76 <UART_SetConfig+0xa3e>
 800ab7c:	2b20      	cmp	r3, #32
 800ab7e:	d87a      	bhi.n	800ac76 <UART_SetConfig+0xa3e>
 800ab80:	a201      	add	r2, pc, #4	@ (adr r2, 800ab88 <UART_SetConfig+0x950>)
 800ab82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab86:	bf00      	nop
 800ab88:	0800ac13 	.word	0x0800ac13
 800ab8c:	0800ac1b 	.word	0x0800ac1b
 800ab90:	0800ac77 	.word	0x0800ac77
 800ab94:	0800ac77 	.word	0x0800ac77
 800ab98:	0800ac23 	.word	0x0800ac23
 800ab9c:	0800ac77 	.word	0x0800ac77
 800aba0:	0800ac77 	.word	0x0800ac77
 800aba4:	0800ac77 	.word	0x0800ac77
 800aba8:	0800ac33 	.word	0x0800ac33
 800abac:	0800ac77 	.word	0x0800ac77
 800abb0:	0800ac77 	.word	0x0800ac77
 800abb4:	0800ac77 	.word	0x0800ac77
 800abb8:	0800ac77 	.word	0x0800ac77
 800abbc:	0800ac77 	.word	0x0800ac77
 800abc0:	0800ac77 	.word	0x0800ac77
 800abc4:	0800ac77 	.word	0x0800ac77
 800abc8:	0800ac43 	.word	0x0800ac43
 800abcc:	0800ac77 	.word	0x0800ac77
 800abd0:	0800ac77 	.word	0x0800ac77
 800abd4:	0800ac77 	.word	0x0800ac77
 800abd8:	0800ac77 	.word	0x0800ac77
 800abdc:	0800ac77 	.word	0x0800ac77
 800abe0:	0800ac77 	.word	0x0800ac77
 800abe4:	0800ac77 	.word	0x0800ac77
 800abe8:	0800ac77 	.word	0x0800ac77
 800abec:	0800ac77 	.word	0x0800ac77
 800abf0:	0800ac77 	.word	0x0800ac77
 800abf4:	0800ac77 	.word	0x0800ac77
 800abf8:	0800ac77 	.word	0x0800ac77
 800abfc:	0800ac77 	.word	0x0800ac77
 800ac00:	0800ac77 	.word	0x0800ac77
 800ac04:	0800ac77 	.word	0x0800ac77
 800ac08:	0800ac69 	.word	0x0800ac69
 800ac0c:	2b40      	cmp	r3, #64	@ 0x40
 800ac0e:	d02e      	beq.n	800ac6e <UART_SetConfig+0xa36>
 800ac10:	e031      	b.n	800ac76 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac12:	f7fb ff33 	bl	8006a7c <HAL_RCC_GetPCLK1Freq>
 800ac16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac18:	e033      	b.n	800ac82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac1a:	f7fb ff45 	bl	8006aa8 <HAL_RCC_GetPCLK2Freq>
 800ac1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac20:	e02f      	b.n	800ac82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fd ff1a 	bl	8008a60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac30:	e027      	b.n	800ac82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac32:	f107 0318 	add.w	r3, r7, #24
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fe f866 	bl	8008d08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac40:	e01f      	b.n	800ac82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac42:	4b2d      	ldr	r3, [pc, #180]	@ (800acf8 <UART_SetConfig+0xac0>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f003 0320 	and.w	r3, r3, #32
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d009      	beq.n	800ac62 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac4e:	4b2a      	ldr	r3, [pc, #168]	@ (800acf8 <UART_SetConfig+0xac0>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	08db      	lsrs	r3, r3, #3
 800ac54:	f003 0303 	and.w	r3, r3, #3
 800ac58:	4a28      	ldr	r2, [pc, #160]	@ (800acfc <UART_SetConfig+0xac4>)
 800ac5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac60:	e00f      	b.n	800ac82 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ac62:	4b26      	ldr	r3, [pc, #152]	@ (800acfc <UART_SetConfig+0xac4>)
 800ac64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac66:	e00c      	b.n	800ac82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac68:	4b25      	ldr	r3, [pc, #148]	@ (800ad00 <UART_SetConfig+0xac8>)
 800ac6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac6c:	e009      	b.n	800ac82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac74:	e005      	b.n	800ac82 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ac76:	2300      	movs	r3, #0
 800ac78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ac80:	bf00      	nop
    }

    if (pclk != 0U)
 800ac82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d021      	beq.n	800accc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac8c:	4a1d      	ldr	r2, [pc, #116]	@ (800ad04 <UART_SetConfig+0xacc>)
 800ac8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac92:	461a      	mov	r2, r3
 800ac94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac96:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	085b      	lsrs	r3, r3, #1
 800aca0:	441a      	add	r2, r3
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	fbb2 f3f3 	udiv	r3, r2, r3
 800acaa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acae:	2b0f      	cmp	r3, #15
 800acb0:	d909      	bls.n	800acc6 <UART_SetConfig+0xa8e>
 800acb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acb8:	d205      	bcs.n	800acc6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800acba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acbc:	b29a      	uxth	r2, r3
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	60da      	str	r2, [r3, #12]
 800acc4:	e002      	b.n	800accc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	2201      	movs	r2, #1
 800acd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	2201      	movs	r2, #1
 800acd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	2200      	movs	r2, #0
 800ace0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2200      	movs	r2, #0
 800ace6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ace8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800acec:	4618      	mov	r0, r3
 800acee:	3748      	adds	r7, #72	@ 0x48
 800acf0:	46bd      	mov	sp, r7
 800acf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acf6:	bf00      	nop
 800acf8:	58024400 	.word	0x58024400
 800acfc:	03d09000 	.word	0x03d09000
 800ad00:	003d0900 	.word	0x003d0900
 800ad04:	08012560 	.word	0x08012560

0800ad08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad14:	f003 0308 	and.w	r3, r3, #8
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00a      	beq.n	800ad32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad36:	f003 0301 	and.w	r3, r3, #1
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00a      	beq.n	800ad54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	430a      	orrs	r2, r1
 800ad52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad58:	f003 0302 	and.w	r3, r3, #2
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00a      	beq.n	800ad76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	430a      	orrs	r2, r1
 800ad74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad7a:	f003 0304 	and.w	r3, r3, #4
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	430a      	orrs	r2, r1
 800ad96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad9c:	f003 0310 	and.w	r3, r3, #16
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00a      	beq.n	800adba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adbe:	f003 0320 	and.w	r3, r3, #32
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00a      	beq.n	800addc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	430a      	orrs	r2, r1
 800adda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ade0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d01a      	beq.n	800ae1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	430a      	orrs	r2, r1
 800adfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae06:	d10a      	bne.n	800ae1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00a      	beq.n	800ae40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	605a      	str	r2, [r3, #4]
  }
}
 800ae40:	bf00      	nop
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b098      	sub	sp, #96	@ 0x60
 800ae50:	af02      	add	r7, sp, #8
 800ae52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae5c:	f7f7 fb28 	bl	80024b0 <HAL_GetTick>
 800ae60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 0308 	and.w	r3, r3, #8
 800ae6c:	2b08      	cmp	r3, #8
 800ae6e:	d12f      	bne.n	800aed0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f88e 	bl	800afa0 <UART_WaitOnFlagUntilTimeout>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d022      	beq.n	800aed0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae92:	e853 3f00 	ldrex	r3, [r3]
 800ae96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae9e:	653b      	str	r3, [r7, #80]	@ 0x50
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	461a      	mov	r2, r3
 800aea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aea8:	647b      	str	r3, [r7, #68]	@ 0x44
 800aeaa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aeae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aeb0:	e841 2300 	strex	r3, r2, [r1]
 800aeb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aeb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1e6      	bne.n	800ae8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2220      	movs	r2, #32
 800aec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	e063      	b.n	800af98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f003 0304 	and.w	r3, r3, #4
 800aeda:	2b04      	cmp	r3, #4
 800aedc:	d149      	bne.n	800af72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aede:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aee6:	2200      	movs	r2, #0
 800aee8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 f857 	bl	800afa0 <UART_WaitOnFlagUntilTimeout>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d03c      	beq.n	800af72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af00:	e853 3f00 	ldrex	r3, [r3]
 800af04:	623b      	str	r3, [r7, #32]
   return(result);
 800af06:	6a3b      	ldr	r3, [r7, #32]
 800af08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af16:	633b      	str	r3, [r7, #48]	@ 0x30
 800af18:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af1e:	e841 2300 	strex	r3, r2, [r1]
 800af22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af26:	2b00      	cmp	r3, #0
 800af28:	d1e6      	bne.n	800aef8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	3308      	adds	r3, #8
 800af30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	e853 3f00 	ldrex	r3, [r3]
 800af38:	60fb      	str	r3, [r7, #12]
   return(result);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f023 0301 	bic.w	r3, r3, #1
 800af40:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	3308      	adds	r3, #8
 800af48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af4a:	61fa      	str	r2, [r7, #28]
 800af4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4e:	69b9      	ldr	r1, [r7, #24]
 800af50:	69fa      	ldr	r2, [r7, #28]
 800af52:	e841 2300 	strex	r3, r2, [r1]
 800af56:	617b      	str	r3, [r7, #20]
   return(result);
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d1e5      	bne.n	800af2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2220      	movs	r2, #32
 800af62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af6e:	2303      	movs	r3, #3
 800af70:	e012      	b.n	800af98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2220      	movs	r2, #32
 800af76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2220      	movs	r2, #32
 800af7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3758      	adds	r7, #88	@ 0x58
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	603b      	str	r3, [r7, #0]
 800afac:	4613      	mov	r3, r2
 800afae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afb0:	e04f      	b.n	800b052 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb8:	d04b      	beq.n	800b052 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afba:	f7f7 fa79 	bl	80024b0 <HAL_GetTick>
 800afbe:	4602      	mov	r2, r0
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	69ba      	ldr	r2, [r7, #24]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d302      	bcc.n	800afd0 <UART_WaitOnFlagUntilTimeout+0x30>
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d101      	bne.n	800afd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800afd0:	2303      	movs	r3, #3
 800afd2:	e04e      	b.n	800b072 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0304 	and.w	r3, r3, #4
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d037      	beq.n	800b052 <UART_WaitOnFlagUntilTimeout+0xb2>
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	2b80      	cmp	r3, #128	@ 0x80
 800afe6:	d034      	beq.n	800b052 <UART_WaitOnFlagUntilTimeout+0xb2>
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	2b40      	cmp	r3, #64	@ 0x40
 800afec:	d031      	beq.n	800b052 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	69db      	ldr	r3, [r3, #28]
 800aff4:	f003 0308 	and.w	r3, r3, #8
 800aff8:	2b08      	cmp	r3, #8
 800affa:	d110      	bne.n	800b01e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2208      	movs	r2, #8
 800b002:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	f000 f839 	bl	800b07c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2208      	movs	r2, #8
 800b00e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e029      	b.n	800b072 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	69db      	ldr	r3, [r3, #28]
 800b024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b02c:	d111      	bne.n	800b052 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b036:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f000 f81f 	bl	800b07c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2220      	movs	r2, #32
 800b042:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b04e:	2303      	movs	r3, #3
 800b050:	e00f      	b.n	800b072 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	69da      	ldr	r2, [r3, #28]
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	4013      	ands	r3, r2
 800b05c:	68ba      	ldr	r2, [r7, #8]
 800b05e:	429a      	cmp	r2, r3
 800b060:	bf0c      	ite	eq
 800b062:	2301      	moveq	r3, #1
 800b064:	2300      	movne	r3, #0
 800b066:	b2db      	uxtb	r3, r3
 800b068:	461a      	mov	r2, r3
 800b06a:	79fb      	ldrb	r3, [r7, #7]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d0a0      	beq.n	800afb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
	...

0800b07c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b095      	sub	sp, #84	@ 0x54
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b08c:	e853 3f00 	ldrex	r3, [r3]
 800b090:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b094:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b098:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b0a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0aa:	e841 2300 	strex	r3, r2, [r1]
 800b0ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1e6      	bne.n	800b084 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	3308      	adds	r3, #8
 800b0bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	e853 3f00 	ldrex	r3, [r3]
 800b0c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0c6:	69fa      	ldr	r2, [r7, #28]
 800b0c8:	4b1e      	ldr	r3, [pc, #120]	@ (800b144 <UART_EndRxTransfer+0xc8>)
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	3308      	adds	r3, #8
 800b0d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b0d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b0dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0de:	e841 2300 	strex	r3, r2, [r1]
 800b0e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1e5      	bne.n	800b0b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d118      	bne.n	800b124 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	e853 3f00 	ldrex	r3, [r3]
 800b0fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	f023 0310 	bic.w	r3, r3, #16
 800b106:	647b      	str	r3, [r7, #68]	@ 0x44
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	461a      	mov	r2, r3
 800b10e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b110:	61bb      	str	r3, [r7, #24]
 800b112:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b114:	6979      	ldr	r1, [r7, #20]
 800b116:	69ba      	ldr	r2, [r7, #24]
 800b118:	e841 2300 	strex	r3, r2, [r1]
 800b11c:	613b      	str	r3, [r7, #16]
   return(result);
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d1e6      	bne.n	800b0f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2220      	movs	r2, #32
 800b128:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b138:	bf00      	nop
 800b13a:	3754      	adds	r7, #84	@ 0x54
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr
 800b144:	effffffe 	.word	0xeffffffe

0800b148 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b148:	b084      	sub	sp, #16
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b084      	sub	sp, #16
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	f107 001c 	add.w	r0, r7, #28
 800b156:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b15a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d121      	bne.n	800b1a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b166:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	68da      	ldr	r2, [r3, #12]
 800b172:	4b2c      	ldr	r3, [pc, #176]	@ (800b224 <USB_CoreInit+0xdc>)
 800b174:	4013      	ands	r3, r2
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b186:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d105      	bne.n	800b19a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f001 faf6 	bl	800c78c <USB_CoreReset>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	73fb      	strb	r3, [r7, #15]
 800b1a4:	e01b      	b.n	800b1de <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f001 faea 	bl	800c78c <USB_CoreReset>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b1bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d106      	bne.n	800b1d2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	639a      	str	r2, [r3, #56]	@ 0x38
 800b1d0:	e005      	b.n	800b1de <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b1de:	7fbb      	ldrb	r3, [r7, #30]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d116      	bne.n	800b212 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1e8:	b29a      	uxth	r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b1f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b228 <USB_CoreInit+0xe0>)
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	f043 0206 	orr.w	r2, r3, #6
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	f043 0220 	orr.w	r2, r3, #32
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b212:	7bfb      	ldrb	r3, [r7, #15]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b21e:	b004      	add	sp, #16
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop
 800b224:	ffbdffbf 	.word	0xffbdffbf
 800b228:	03ee0000 	.word	0x03ee0000

0800b22c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b087      	sub	sp, #28
 800b230:	af00      	add	r7, sp, #0
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	4613      	mov	r3, r2
 800b238:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b23a:	79fb      	ldrb	r3, [r7, #7]
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d165      	bne.n	800b30c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	4a41      	ldr	r2, [pc, #260]	@ (800b348 <USB_SetTurnaroundTime+0x11c>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d906      	bls.n	800b256 <USB_SetTurnaroundTime+0x2a>
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	4a40      	ldr	r2, [pc, #256]	@ (800b34c <USB_SetTurnaroundTime+0x120>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d202      	bcs.n	800b256 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b250:	230f      	movs	r3, #15
 800b252:	617b      	str	r3, [r7, #20]
 800b254:	e062      	b.n	800b31c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	4a3c      	ldr	r2, [pc, #240]	@ (800b34c <USB_SetTurnaroundTime+0x120>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d306      	bcc.n	800b26c <USB_SetTurnaroundTime+0x40>
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	4a3b      	ldr	r2, [pc, #236]	@ (800b350 <USB_SetTurnaroundTime+0x124>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d202      	bcs.n	800b26c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b266:	230e      	movs	r3, #14
 800b268:	617b      	str	r3, [r7, #20]
 800b26a:	e057      	b.n	800b31c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	4a38      	ldr	r2, [pc, #224]	@ (800b350 <USB_SetTurnaroundTime+0x124>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d306      	bcc.n	800b282 <USB_SetTurnaroundTime+0x56>
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	4a37      	ldr	r2, [pc, #220]	@ (800b354 <USB_SetTurnaroundTime+0x128>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d202      	bcs.n	800b282 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b27c:	230d      	movs	r3, #13
 800b27e:	617b      	str	r3, [r7, #20]
 800b280:	e04c      	b.n	800b31c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	4a33      	ldr	r2, [pc, #204]	@ (800b354 <USB_SetTurnaroundTime+0x128>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d306      	bcc.n	800b298 <USB_SetTurnaroundTime+0x6c>
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	4a32      	ldr	r2, [pc, #200]	@ (800b358 <USB_SetTurnaroundTime+0x12c>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d802      	bhi.n	800b298 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b292:	230c      	movs	r3, #12
 800b294:	617b      	str	r3, [r7, #20]
 800b296:	e041      	b.n	800b31c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	4a2f      	ldr	r2, [pc, #188]	@ (800b358 <USB_SetTurnaroundTime+0x12c>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d906      	bls.n	800b2ae <USB_SetTurnaroundTime+0x82>
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	4a2e      	ldr	r2, [pc, #184]	@ (800b35c <USB_SetTurnaroundTime+0x130>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d802      	bhi.n	800b2ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b2a8:	230b      	movs	r3, #11
 800b2aa:	617b      	str	r3, [r7, #20]
 800b2ac:	e036      	b.n	800b31c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	4a2a      	ldr	r2, [pc, #168]	@ (800b35c <USB_SetTurnaroundTime+0x130>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d906      	bls.n	800b2c4 <USB_SetTurnaroundTime+0x98>
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	4a29      	ldr	r2, [pc, #164]	@ (800b360 <USB_SetTurnaroundTime+0x134>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d802      	bhi.n	800b2c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b2be:	230a      	movs	r3, #10
 800b2c0:	617b      	str	r3, [r7, #20]
 800b2c2:	e02b      	b.n	800b31c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	4a26      	ldr	r2, [pc, #152]	@ (800b360 <USB_SetTurnaroundTime+0x134>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d906      	bls.n	800b2da <USB_SetTurnaroundTime+0xae>
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	4a25      	ldr	r2, [pc, #148]	@ (800b364 <USB_SetTurnaroundTime+0x138>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d202      	bcs.n	800b2da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b2d4:	2309      	movs	r3, #9
 800b2d6:	617b      	str	r3, [r7, #20]
 800b2d8:	e020      	b.n	800b31c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	4a21      	ldr	r2, [pc, #132]	@ (800b364 <USB_SetTurnaroundTime+0x138>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d306      	bcc.n	800b2f0 <USB_SetTurnaroundTime+0xc4>
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	4a20      	ldr	r2, [pc, #128]	@ (800b368 <USB_SetTurnaroundTime+0x13c>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d802      	bhi.n	800b2f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b2ea:	2308      	movs	r3, #8
 800b2ec:	617b      	str	r3, [r7, #20]
 800b2ee:	e015      	b.n	800b31c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	4a1d      	ldr	r2, [pc, #116]	@ (800b368 <USB_SetTurnaroundTime+0x13c>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d906      	bls.n	800b306 <USB_SetTurnaroundTime+0xda>
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	4a1c      	ldr	r2, [pc, #112]	@ (800b36c <USB_SetTurnaroundTime+0x140>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d202      	bcs.n	800b306 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b300:	2307      	movs	r3, #7
 800b302:	617b      	str	r3, [r7, #20]
 800b304:	e00a      	b.n	800b31c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b306:	2306      	movs	r3, #6
 800b308:	617b      	str	r3, [r7, #20]
 800b30a:	e007      	b.n	800b31c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b30c:	79fb      	ldrb	r3, [r7, #7]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d102      	bne.n	800b318 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b312:	2309      	movs	r3, #9
 800b314:	617b      	str	r3, [r7, #20]
 800b316:	e001      	b.n	800b31c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b318:	2309      	movs	r3, #9
 800b31a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	68da      	ldr	r2, [r3, #12]
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	029b      	lsls	r3, r3, #10
 800b330:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b334:	431a      	orrs	r2, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	371c      	adds	r7, #28
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr
 800b348:	00d8acbf 	.word	0x00d8acbf
 800b34c:	00e4e1c0 	.word	0x00e4e1c0
 800b350:	00f42400 	.word	0x00f42400
 800b354:	01067380 	.word	0x01067380
 800b358:	011a499f 	.word	0x011a499f
 800b35c:	01312cff 	.word	0x01312cff
 800b360:	014ca43f 	.word	0x014ca43f
 800b364:	016e3600 	.word	0x016e3600
 800b368:	01a6ab1f 	.word	0x01a6ab1f
 800b36c:	01e84800 	.word	0x01e84800

0800b370 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	f043 0201 	orr.w	r2, r3, #1
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	370c      	adds	r7, #12
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b392:	b480      	push	{r7}
 800b394:	b083      	sub	sp, #12
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	f023 0201 	bic.w	r2, r3, #1
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b3d0:	78fb      	ldrb	r3, [r7, #3]
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d115      	bne.n	800b402 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b3e2:	200a      	movs	r0, #10
 800b3e4:	f7f7 f870 	bl	80024c8 <HAL_Delay>
      ms += 10U;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	330a      	adds	r3, #10
 800b3ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f001 f93b 	bl	800c66a <USB_GetMode>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d01e      	beq.n	800b438 <USB_SetCurrentMode+0x84>
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2bc7      	cmp	r3, #199	@ 0xc7
 800b3fe:	d9f0      	bls.n	800b3e2 <USB_SetCurrentMode+0x2e>
 800b400:	e01a      	b.n	800b438 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b402:	78fb      	ldrb	r3, [r7, #3]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d115      	bne.n	800b434 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b414:	200a      	movs	r0, #10
 800b416:	f7f7 f857 	bl	80024c8 <HAL_Delay>
      ms += 10U;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	330a      	adds	r3, #10
 800b41e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f001 f922 	bl	800c66a <USB_GetMode>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d005      	beq.n	800b438 <USB_SetCurrentMode+0x84>
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2bc7      	cmp	r3, #199	@ 0xc7
 800b430:	d9f0      	bls.n	800b414 <USB_SetCurrentMode+0x60>
 800b432:	e001      	b.n	800b438 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	e005      	b.n	800b444 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2bc8      	cmp	r3, #200	@ 0xc8
 800b43c:	d101      	bne.n	800b442 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	e000      	b.n	800b444 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b442:	2300      	movs	r3, #0
}
 800b444:	4618      	mov	r0, r3
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b44c:	b084      	sub	sp, #16
 800b44e:	b580      	push	{r7, lr}
 800b450:	b086      	sub	sp, #24
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b45a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b466:	2300      	movs	r3, #0
 800b468:	613b      	str	r3, [r7, #16]
 800b46a:	e009      	b.n	800b480 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	3340      	adds	r3, #64	@ 0x40
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	4413      	add	r3, r2
 800b476:	2200      	movs	r2, #0
 800b478:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	3301      	adds	r3, #1
 800b47e:	613b      	str	r3, [r7, #16]
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	2b0e      	cmp	r3, #14
 800b484:	d9f2      	bls.n	800b46c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b486:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d11c      	bne.n	800b4c8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b49c:	f043 0302 	orr.w	r3, r3, #2
 800b4a0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4a6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	601a      	str	r2, [r3, #0]
 800b4c6:	e005      	b.n	800b4d4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b4da:	461a      	mov	r2, r3
 800b4dc:	2300      	movs	r3, #0
 800b4de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b4e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d10d      	bne.n	800b504 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b4e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d104      	bne.n	800b4fa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f968 	bl	800b7c8 <USB_SetDevSpeed>
 800b4f8:	e008      	b.n	800b50c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 f963 	bl	800b7c8 <USB_SetDevSpeed>
 800b502:	e003      	b.n	800b50c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b504:	2103      	movs	r1, #3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f95e 	bl	800b7c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b50c:	2110      	movs	r1, #16
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 f8fa 	bl	800b708 <USB_FlushTxFifo>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d001      	beq.n	800b51e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f924 	bl	800b76c <USB_FlushRxFifo>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d001      	beq.n	800b52e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b534:	461a      	mov	r2, r3
 800b536:	2300      	movs	r3, #0
 800b538:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b540:	461a      	mov	r2, r3
 800b542:	2300      	movs	r3, #0
 800b544:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b54c:	461a      	mov	r2, r3
 800b54e:	2300      	movs	r3, #0
 800b550:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b552:	2300      	movs	r3, #0
 800b554:	613b      	str	r3, [r7, #16]
 800b556:	e043      	b.n	800b5e0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	015a      	lsls	r2, r3, #5
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	4413      	add	r3, r2
 800b560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b56a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b56e:	d118      	bne.n	800b5a2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d10a      	bne.n	800b58c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	015a      	lsls	r2, r3, #5
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	4413      	add	r3, r2
 800b57e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b582:	461a      	mov	r2, r3
 800b584:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b588:	6013      	str	r3, [r2, #0]
 800b58a:	e013      	b.n	800b5b4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	015a      	lsls	r2, r3, #5
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	4413      	add	r3, r2
 800b594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b598:	461a      	mov	r2, r3
 800b59a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b59e:	6013      	str	r3, [r2, #0]
 800b5a0:	e008      	b.n	800b5b4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	015a      	lsls	r2, r3, #5
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	015a      	lsls	r2, r3, #5
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	015a      	lsls	r2, r3, #5
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b5d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	613b      	str	r3, [r7, #16]
 800b5e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d3b5      	bcc.n	800b558 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	613b      	str	r3, [r7, #16]
 800b5f0:	e043      	b.n	800b67a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	015a      	lsls	r2, r3, #5
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b604:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b608:	d118      	bne.n	800b63c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10a      	bne.n	800b626 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	015a      	lsls	r2, r3, #5
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	4413      	add	r3, r2
 800b618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b61c:	461a      	mov	r2, r3
 800b61e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b622:	6013      	str	r3, [r2, #0]
 800b624:	e013      	b.n	800b64e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	015a      	lsls	r2, r3, #5
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	4413      	add	r3, r2
 800b62e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b632:	461a      	mov	r2, r3
 800b634:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b638:	6013      	str	r3, [r2, #0]
 800b63a:	e008      	b.n	800b64e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	015a      	lsls	r2, r3, #5
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	4413      	add	r3, r2
 800b644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b648:	461a      	mov	r2, r3
 800b64a:	2300      	movs	r3, #0
 800b64c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	015a      	lsls	r2, r3, #5
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	4413      	add	r3, r2
 800b656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b65a:	461a      	mov	r2, r3
 800b65c:	2300      	movs	r3, #0
 800b65e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	015a      	lsls	r2, r3, #5
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	4413      	add	r3, r2
 800b668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b66c:	461a      	mov	r2, r3
 800b66e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b672:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	3301      	adds	r3, #1
 800b678:	613b      	str	r3, [r7, #16]
 800b67a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b67e:	461a      	mov	r2, r3
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	4293      	cmp	r3, r2
 800b684:	d3b5      	bcc.n	800b5f2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b68c:	691b      	ldr	r3, [r3, #16]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b698:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b6a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b6a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d105      	bne.n	800b6bc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	f043 0210 	orr.w	r2, r3, #16
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	699a      	ldr	r2, [r3, #24]
 800b6c0:	4b0f      	ldr	r3, [pc, #60]	@ (800b700 <USB_DevInit+0x2b4>)
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b6c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d005      	beq.n	800b6dc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	699b      	ldr	r3, [r3, #24]
 800b6d4:	f043 0208 	orr.w	r2, r3, #8
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b6dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d105      	bne.n	800b6f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	699a      	ldr	r2, [r3, #24]
 800b6e8:	4b06      	ldr	r3, [pc, #24]	@ (800b704 <USB_DevInit+0x2b8>)
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b6f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3718      	adds	r7, #24
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b6fc:	b004      	add	sp, #16
 800b6fe:	4770      	bx	lr
 800b700:	803c3800 	.word	0x803c3800
 800b704:	40000004 	.word	0x40000004

0800b708 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b712:	2300      	movs	r3, #0
 800b714:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	3301      	adds	r3, #1
 800b71a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b722:	d901      	bls.n	800b728 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b724:	2303      	movs	r3, #3
 800b726:	e01b      	b.n	800b760 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	691b      	ldr	r3, [r3, #16]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	daf2      	bge.n	800b716 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b730:	2300      	movs	r3, #0
 800b732:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	019b      	lsls	r3, r3, #6
 800b738:	f043 0220 	orr.w	r2, r3, #32
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	3301      	adds	r3, #1
 800b744:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b74c:	d901      	bls.n	800b752 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b74e:	2303      	movs	r3, #3
 800b750:	e006      	b.n	800b760 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	f003 0320 	and.w	r3, r3, #32
 800b75a:	2b20      	cmp	r3, #32
 800b75c:	d0f0      	beq.n	800b740 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3714      	adds	r7, #20
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b085      	sub	sp, #20
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b774:	2300      	movs	r3, #0
 800b776:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	3301      	adds	r3, #1
 800b77c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b784:	d901      	bls.n	800b78a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b786:	2303      	movs	r3, #3
 800b788:	e018      	b.n	800b7bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	daf2      	bge.n	800b778 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b792:	2300      	movs	r3, #0
 800b794:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2210      	movs	r2, #16
 800b79a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b7a8:	d901      	bls.n	800b7ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b7aa:	2303      	movs	r3, #3
 800b7ac:	e006      	b.n	800b7bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	f003 0310 	and.w	r3, r3, #16
 800b7b6:	2b10      	cmp	r3, #16
 800b7b8:	d0f0      	beq.n	800b79c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3714      	adds	r7, #20
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	78fb      	ldrb	r3, [r7, #3]
 800b7e2:	68f9      	ldr	r1, [r7, #12]
 800b7e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b087      	sub	sp, #28
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	f003 0306 	and.w	r3, r3, #6
 800b812:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d102      	bne.n	800b820 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b81a:	2300      	movs	r3, #0
 800b81c:	75fb      	strb	r3, [r7, #23]
 800b81e:	e00a      	b.n	800b836 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2b02      	cmp	r3, #2
 800b824:	d002      	beq.n	800b82c <USB_GetDevSpeed+0x32>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b06      	cmp	r3, #6
 800b82a:	d102      	bne.n	800b832 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b82c:	2302      	movs	r3, #2
 800b82e:	75fb      	strb	r3, [r7, #23]
 800b830:	e001      	b.n	800b836 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b832:	230f      	movs	r3, #15
 800b834:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b836:	7dfb      	ldrb	r3, [r7, #23]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	371c      	adds	r7, #28
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	785b      	ldrb	r3, [r3, #1]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d139      	bne.n	800b8d4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b866:	69da      	ldr	r2, [r3, #28]
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	f003 030f 	and.w	r3, r3, #15
 800b870:	2101      	movs	r1, #1
 800b872:	fa01 f303 	lsl.w	r3, r1, r3
 800b876:	b29b      	uxth	r3, r3
 800b878:	68f9      	ldr	r1, [r7, #12]
 800b87a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b87e:	4313      	orrs	r3, r2
 800b880:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	015a      	lsls	r2, r3, #5
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	4413      	add	r3, r2
 800b88a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b894:	2b00      	cmp	r3, #0
 800b896:	d153      	bne.n	800b940 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	015a      	lsls	r2, r3, #5
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	4413      	add	r3, r2
 800b8a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	791b      	ldrb	r3, [r3, #4]
 800b8b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b8b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	059b      	lsls	r3, r3, #22
 800b8ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b8bc:	431a      	orrs	r2, r3
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	0159      	lsls	r1, r3, #5
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	440b      	add	r3, r1
 800b8c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	4b20      	ldr	r3, [pc, #128]	@ (800b950 <USB_ActivateEndpoint+0x10c>)
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	600b      	str	r3, [r1, #0]
 800b8d2:	e035      	b.n	800b940 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8da:	69da      	ldr	r2, [r3, #28]
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	f003 030f 	and.w	r3, r3, #15
 800b8e4:	2101      	movs	r1, #1
 800b8e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ea:	041b      	lsls	r3, r3, #16
 800b8ec:	68f9      	ldr	r1, [r7, #12]
 800b8ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	015a      	lsls	r2, r3, #5
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d119      	bne.n	800b940 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	015a      	lsls	r2, r3, #5
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	4413      	add	r3, r2
 800b914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	791b      	ldrb	r3, [r3, #4]
 800b926:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b928:	430b      	orrs	r3, r1
 800b92a:	431a      	orrs	r2, r3
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	0159      	lsls	r1, r3, #5
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	440b      	add	r3, r1
 800b934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b938:	4619      	mov	r1, r3
 800b93a:	4b05      	ldr	r3, [pc, #20]	@ (800b950 <USB_ActivateEndpoint+0x10c>)
 800b93c:	4313      	orrs	r3, r2
 800b93e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3714      	adds	r7, #20
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop
 800b950:	10008000 	.word	0x10008000

0800b954 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b954:	b480      	push	{r7}
 800b956:	b085      	sub	sp, #20
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	785b      	ldrb	r3, [r3, #1]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d161      	bne.n	800ba34 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	015a      	lsls	r2, r3, #5
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	4413      	add	r3, r2
 800b978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b982:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b986:	d11f      	bne.n	800b9c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	015a      	lsls	r2, r3, #5
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	4413      	add	r3, r2
 800b990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	68ba      	ldr	r2, [r7, #8]
 800b998:	0151      	lsls	r1, r2, #5
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	440a      	add	r2, r1
 800b99e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b9a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	015a      	lsls	r2, r3, #5
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	0151      	lsls	r1, r2, #5
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	440a      	add	r2, r1
 800b9be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b9c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	f003 030f 	and.w	r3, r3, #15
 800b9d8:	2101      	movs	r1, #1
 800b9da:	fa01 f303 	lsl.w	r3, r1, r3
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	43db      	mvns	r3, r3
 800b9e2:	68f9      	ldr	r1, [r7, #12]
 800b9e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9f2:	69da      	ldr	r2, [r3, #28]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	f003 030f 	and.w	r3, r3, #15
 800b9fc:	2101      	movs	r1, #1
 800b9fe:	fa01 f303 	lsl.w	r3, r1, r3
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	43db      	mvns	r3, r3
 800ba06:	68f9      	ldr	r1, [r7, #12]
 800ba08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ba0c:	4013      	ands	r3, r2
 800ba0e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	015a      	lsls	r2, r3, #5
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	4413      	add	r3, r2
 800ba18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	0159      	lsls	r1, r3, #5
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	440b      	add	r3, r1
 800ba26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	4b35      	ldr	r3, [pc, #212]	@ (800bb04 <USB_DeactivateEndpoint+0x1b0>)
 800ba2e:	4013      	ands	r3, r2
 800ba30:	600b      	str	r3, [r1, #0]
 800ba32:	e060      	b.n	800baf6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	015a      	lsls	r2, r3, #5
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	4413      	add	r3, r2
 800ba3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba4a:	d11f      	bne.n	800ba8c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	015a      	lsls	r2, r3, #5
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	4413      	add	r3, r2
 800ba54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	68ba      	ldr	r2, [r7, #8]
 800ba5c:	0151      	lsls	r1, r2, #5
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	440a      	add	r2, r1
 800ba62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ba6a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	015a      	lsls	r2, r3, #5
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	4413      	add	r3, r2
 800ba74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	68ba      	ldr	r2, [r7, #8]
 800ba7c:	0151      	lsls	r1, r2, #5
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	440a      	add	r2, r1
 800ba82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ba8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	f003 030f 	and.w	r3, r3, #15
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	fa01 f303 	lsl.w	r3, r1, r3
 800baa2:	041b      	lsls	r3, r3, #16
 800baa4:	43db      	mvns	r3, r3
 800baa6:	68f9      	ldr	r1, [r7, #12]
 800baa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800baac:	4013      	ands	r3, r2
 800baae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bab6:	69da      	ldr	r2, [r3, #28]
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	f003 030f 	and.w	r3, r3, #15
 800bac0:	2101      	movs	r1, #1
 800bac2:	fa01 f303 	lsl.w	r3, r1, r3
 800bac6:	041b      	lsls	r3, r3, #16
 800bac8:	43db      	mvns	r3, r3
 800baca:	68f9      	ldr	r1, [r7, #12]
 800bacc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bad0:	4013      	ands	r3, r2
 800bad2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	015a      	lsls	r2, r3, #5
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	4413      	add	r3, r2
 800badc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	0159      	lsls	r1, r3, #5
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	440b      	add	r3, r1
 800baea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baee:	4619      	mov	r1, r3
 800baf0:	4b05      	ldr	r3, [pc, #20]	@ (800bb08 <USB_DeactivateEndpoint+0x1b4>)
 800baf2:	4013      	ands	r3, r2
 800baf4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3714      	adds	r7, #20
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr
 800bb04:	ec337800 	.word	0xec337800
 800bb08:	eff37800 	.word	0xeff37800

0800bb0c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b08a      	sub	sp, #40	@ 0x28
 800bb10:	af02      	add	r7, sp, #8
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	4613      	mov	r3, r2
 800bb18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	785b      	ldrb	r3, [r3, #1]
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	f040 8181 	bne.w	800be30 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d132      	bne.n	800bb9c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	015a      	lsls	r2, r3, #5
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb42:	691a      	ldr	r2, [r3, #16]
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	0159      	lsls	r1, r3, #5
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	440b      	add	r3, r1
 800bb4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb50:	4619      	mov	r1, r3
 800bb52:	4ba5      	ldr	r3, [pc, #660]	@ (800bde8 <USB_EPStartXfer+0x2dc>)
 800bb54:	4013      	ands	r3, r2
 800bb56:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	015a      	lsls	r2, r3, #5
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	4413      	add	r3, r2
 800bb60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb64:	691b      	ldr	r3, [r3, #16]
 800bb66:	69ba      	ldr	r2, [r7, #24]
 800bb68:	0151      	lsls	r1, r2, #5
 800bb6a:	69fa      	ldr	r2, [r7, #28]
 800bb6c:	440a      	add	r2, r1
 800bb6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bb76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	015a      	lsls	r2, r3, #5
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	4413      	add	r3, r2
 800bb80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb84:	691a      	ldr	r2, [r3, #16]
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	0159      	lsls	r1, r3, #5
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	440b      	add	r3, r1
 800bb8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb92:	4619      	mov	r1, r3
 800bb94:	4b95      	ldr	r3, [pc, #596]	@ (800bdec <USB_EPStartXfer+0x2e0>)
 800bb96:	4013      	ands	r3, r2
 800bb98:	610b      	str	r3, [r1, #16]
 800bb9a:	e092      	b.n	800bcc2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	015a      	lsls	r2, r3, #5
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	4413      	add	r3, r2
 800bba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bba8:	691a      	ldr	r2, [r3, #16]
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	0159      	lsls	r1, r3, #5
 800bbae:	69fb      	ldr	r3, [r7, #28]
 800bbb0:	440b      	add	r3, r1
 800bbb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	4b8c      	ldr	r3, [pc, #560]	@ (800bdec <USB_EPStartXfer+0x2e0>)
 800bbba:	4013      	ands	r3, r2
 800bbbc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	015a      	lsls	r2, r3, #5
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbca:	691a      	ldr	r2, [r3, #16]
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	0159      	lsls	r1, r3, #5
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	440b      	add	r3, r1
 800bbd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4b83      	ldr	r3, [pc, #524]	@ (800bde8 <USB_EPStartXfer+0x2dc>)
 800bbdc:	4013      	ands	r3, r2
 800bbde:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d11a      	bne.n	800bc1c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	691a      	ldr	r2, [r3, #16]
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d903      	bls.n	800bbfa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	689a      	ldr	r2, [r3, #8]
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	015a      	lsls	r2, r3, #5
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	4413      	add	r3, r2
 800bc02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc06:	691b      	ldr	r3, [r3, #16]
 800bc08:	69ba      	ldr	r2, [r7, #24]
 800bc0a:	0151      	lsls	r1, r2, #5
 800bc0c:	69fa      	ldr	r2, [r7, #28]
 800bc0e:	440a      	add	r2, r1
 800bc10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bc18:	6113      	str	r3, [r2, #16]
 800bc1a:	e01b      	b.n	800bc54 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	015a      	lsls	r2, r3, #5
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	4413      	add	r3, r2
 800bc24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc28:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	6919      	ldr	r1, [r3, #16]
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	440b      	add	r3, r1
 800bc34:	1e59      	subs	r1, r3, #1
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	fbb1 f3f3 	udiv	r3, r1, r3
 800bc3e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bc40:	4b6b      	ldr	r3, [pc, #428]	@ (800bdf0 <USB_EPStartXfer+0x2e4>)
 800bc42:	400b      	ands	r3, r1
 800bc44:	69b9      	ldr	r1, [r7, #24]
 800bc46:	0148      	lsls	r0, r1, #5
 800bc48:	69f9      	ldr	r1, [r7, #28]
 800bc4a:	4401      	add	r1, r0
 800bc4c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bc50:	4313      	orrs	r3, r2
 800bc52:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	015a      	lsls	r2, r3, #5
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc60:	691a      	ldr	r2, [r3, #16]
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc6a:	69b9      	ldr	r1, [r7, #24]
 800bc6c:	0148      	lsls	r0, r1, #5
 800bc6e:	69f9      	ldr	r1, [r7, #28]
 800bc70:	4401      	add	r1, r0
 800bc72:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bc76:	4313      	orrs	r3, r2
 800bc78:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	791b      	ldrb	r3, [r3, #4]
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d11f      	bne.n	800bcc2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	015a      	lsls	r2, r3, #5
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	4413      	add	r3, r2
 800bc8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc8e:	691b      	ldr	r3, [r3, #16]
 800bc90:	69ba      	ldr	r2, [r7, #24]
 800bc92:	0151      	lsls	r1, r2, #5
 800bc94:	69fa      	ldr	r2, [r7, #28]
 800bc96:	440a      	add	r2, r1
 800bc98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc9c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800bca0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	015a      	lsls	r2, r3, #5
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	4413      	add	r3, r2
 800bcaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	69ba      	ldr	r2, [r7, #24]
 800bcb2:	0151      	lsls	r1, r2, #5
 800bcb4:	69fa      	ldr	r2, [r7, #28]
 800bcb6:	440a      	add	r2, r1
 800bcb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bcbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bcc0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bcc2:	79fb      	ldrb	r3, [r7, #7]
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d14b      	bne.n	800bd60 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	69db      	ldr	r3, [r3, #28]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d009      	beq.n	800bce4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	015a      	lsls	r2, r3, #5
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcdc:	461a      	mov	r2, r3
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	69db      	ldr	r3, [r3, #28]
 800bce2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	791b      	ldrb	r3, [r3, #4]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d128      	bne.n	800bd3e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d110      	bne.n	800bd1e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	015a      	lsls	r2, r3, #5
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	4413      	add	r3, r2
 800bd04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	69ba      	ldr	r2, [r7, #24]
 800bd0c:	0151      	lsls	r1, r2, #5
 800bd0e:	69fa      	ldr	r2, [r7, #28]
 800bd10:	440a      	add	r2, r1
 800bd12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bd1a:	6013      	str	r3, [r2, #0]
 800bd1c:	e00f      	b.n	800bd3e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	015a      	lsls	r2, r3, #5
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	4413      	add	r3, r2
 800bd26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	69ba      	ldr	r2, [r7, #24]
 800bd2e:	0151      	lsls	r1, r2, #5
 800bd30:	69fa      	ldr	r2, [r7, #28]
 800bd32:	440a      	add	r2, r1
 800bd34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd3c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	015a      	lsls	r2, r3, #5
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	4413      	add	r3, r2
 800bd46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	69ba      	ldr	r2, [r7, #24]
 800bd4e:	0151      	lsls	r1, r2, #5
 800bd50:	69fa      	ldr	r2, [r7, #28]
 800bd52:	440a      	add	r2, r1
 800bd54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd58:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bd5c:	6013      	str	r3, [r2, #0]
 800bd5e:	e16a      	b.n	800c036 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	015a      	lsls	r2, r3, #5
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	4413      	add	r3, r2
 800bd68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	69ba      	ldr	r2, [r7, #24]
 800bd70:	0151      	lsls	r1, r2, #5
 800bd72:	69fa      	ldr	r2, [r7, #28]
 800bd74:	440a      	add	r2, r1
 800bd76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd7a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bd7e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	791b      	ldrb	r3, [r3, #4]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d015      	beq.n	800bdb4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f000 8152 	beq.w	800c036 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	f003 030f 	and.w	r3, r3, #15
 800bda2:	2101      	movs	r1, #1
 800bda4:	fa01 f303 	lsl.w	r3, r1, r3
 800bda8:	69f9      	ldr	r1, [r7, #28]
 800bdaa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	634b      	str	r3, [r1, #52]	@ 0x34
 800bdb2:	e140      	b.n	800c036 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d117      	bne.n	800bdf4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	015a      	lsls	r2, r3, #5
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	4413      	add	r3, r2
 800bdcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	69ba      	ldr	r2, [r7, #24]
 800bdd4:	0151      	lsls	r1, r2, #5
 800bdd6:	69fa      	ldr	r2, [r7, #28]
 800bdd8:	440a      	add	r2, r1
 800bdda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bdde:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	e016      	b.n	800be14 <USB_EPStartXfer+0x308>
 800bde6:	bf00      	nop
 800bde8:	e007ffff 	.word	0xe007ffff
 800bdec:	fff80000 	.word	0xfff80000
 800bdf0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	015a      	lsls	r2, r3, #5
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	69ba      	ldr	r2, [r7, #24]
 800be04:	0151      	lsls	r1, r2, #5
 800be06:	69fa      	ldr	r2, [r7, #28]
 800be08:	440a      	add	r2, r1
 800be0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be12:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	68d9      	ldr	r1, [r3, #12]
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	781a      	ldrb	r2, [r3, #0]
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	691b      	ldr	r3, [r3, #16]
 800be20:	b298      	uxth	r0, r3
 800be22:	79fb      	ldrb	r3, [r7, #7]
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	4603      	mov	r3, r0
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f000 f9b9 	bl	800c1a0 <USB_WritePacket>
 800be2e:	e102      	b.n	800c036 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	015a      	lsls	r2, r3, #5
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	4413      	add	r3, r2
 800be38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be3c:	691a      	ldr	r2, [r3, #16]
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	0159      	lsls	r1, r3, #5
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	440b      	add	r3, r1
 800be46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be4a:	4619      	mov	r1, r3
 800be4c:	4b7c      	ldr	r3, [pc, #496]	@ (800c040 <USB_EPStartXfer+0x534>)
 800be4e:	4013      	ands	r3, r2
 800be50:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	015a      	lsls	r2, r3, #5
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	4413      	add	r3, r2
 800be5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be5e:	691a      	ldr	r2, [r3, #16]
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	0159      	lsls	r1, r3, #5
 800be64:	69fb      	ldr	r3, [r7, #28]
 800be66:	440b      	add	r3, r1
 800be68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be6c:	4619      	mov	r1, r3
 800be6e:	4b75      	ldr	r3, [pc, #468]	@ (800c044 <USB_EPStartXfer+0x538>)
 800be70:	4013      	ands	r3, r2
 800be72:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800be74:	69bb      	ldr	r3, [r7, #24]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d12f      	bne.n	800beda <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d003      	beq.n	800be8a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	689a      	ldr	r2, [r3, #8]
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	689a      	ldr	r2, [r3, #8]
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	015a      	lsls	r2, r3, #5
 800be96:	69fb      	ldr	r3, [r7, #28]
 800be98:	4413      	add	r3, r2
 800be9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be9e:	691a      	ldr	r2, [r3, #16]
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	6a1b      	ldr	r3, [r3, #32]
 800bea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bea8:	69b9      	ldr	r1, [r7, #24]
 800beaa:	0148      	lsls	r0, r1, #5
 800beac:	69f9      	ldr	r1, [r7, #28]
 800beae:	4401      	add	r1, r0
 800beb0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800beb4:	4313      	orrs	r3, r2
 800beb6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	015a      	lsls	r2, r3, #5
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	4413      	add	r3, r2
 800bec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	69ba      	ldr	r2, [r7, #24]
 800bec8:	0151      	lsls	r1, r2, #5
 800beca:	69fa      	ldr	r2, [r7, #28]
 800becc:	440a      	add	r2, r1
 800bece:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bed2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bed6:	6113      	str	r3, [r2, #16]
 800bed8:	e05f      	b.n	800bf9a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d123      	bne.n	800bf2a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	015a      	lsls	r2, r3, #5
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	4413      	add	r3, r2
 800beea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800beee:	691a      	ldr	r2, [r3, #16]
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bef8:	69b9      	ldr	r1, [r7, #24]
 800befa:	0148      	lsls	r0, r1, #5
 800befc:	69f9      	ldr	r1, [r7, #28]
 800befe:	4401      	add	r1, r0
 800bf00:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bf04:	4313      	orrs	r3, r2
 800bf06:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	015a      	lsls	r2, r3, #5
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	4413      	add	r3, r2
 800bf10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	69ba      	ldr	r2, [r7, #24]
 800bf18:	0151      	lsls	r1, r2, #5
 800bf1a:	69fa      	ldr	r2, [r7, #28]
 800bf1c:	440a      	add	r2, r1
 800bf1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bf26:	6113      	str	r3, [r2, #16]
 800bf28:	e037      	b.n	800bf9a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	691a      	ldr	r2, [r3, #16]
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	4413      	add	r3, r2
 800bf34:	1e5a      	subs	r2, r3, #1
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf3e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	8afa      	ldrh	r2, [r7, #22]
 800bf46:	fb03 f202 	mul.w	r2, r3, r2
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	015a      	lsls	r2, r3, #5
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	4413      	add	r3, r2
 800bf56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf5a:	691a      	ldr	r2, [r3, #16]
 800bf5c:	8afb      	ldrh	r3, [r7, #22]
 800bf5e:	04d9      	lsls	r1, r3, #19
 800bf60:	4b39      	ldr	r3, [pc, #228]	@ (800c048 <USB_EPStartXfer+0x53c>)
 800bf62:	400b      	ands	r3, r1
 800bf64:	69b9      	ldr	r1, [r7, #24]
 800bf66:	0148      	lsls	r0, r1, #5
 800bf68:	69f9      	ldr	r1, [r7, #28]
 800bf6a:	4401      	add	r1, r0
 800bf6c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bf70:	4313      	orrs	r3, r2
 800bf72:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	015a      	lsls	r2, r3, #5
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf80:	691a      	ldr	r2, [r3, #16]
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	6a1b      	ldr	r3, [r3, #32]
 800bf86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf8a:	69b9      	ldr	r1, [r7, #24]
 800bf8c:	0148      	lsls	r0, r1, #5
 800bf8e:	69f9      	ldr	r1, [r7, #28]
 800bf90:	4401      	add	r1, r0
 800bf92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bf96:	4313      	orrs	r3, r2
 800bf98:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800bf9a:	79fb      	ldrb	r3, [r7, #7]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d10d      	bne.n	800bfbc <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d009      	beq.n	800bfbc <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	68d9      	ldr	r1, [r3, #12]
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	015a      	lsls	r2, r3, #5
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfb8:	460a      	mov	r2, r1
 800bfba:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	791b      	ldrb	r3, [r3, #4]
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d128      	bne.n	800c016 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d110      	bne.n	800bff6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	015a      	lsls	r2, r3, #5
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	4413      	add	r3, r2
 800bfdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	69ba      	ldr	r2, [r7, #24]
 800bfe4:	0151      	lsls	r1, r2, #5
 800bfe6:	69fa      	ldr	r2, [r7, #28]
 800bfe8:	440a      	add	r2, r1
 800bfea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bfee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bff2:	6013      	str	r3, [r2, #0]
 800bff4:	e00f      	b.n	800c016 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	015a      	lsls	r2, r3, #5
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	4413      	add	r3, r2
 800bffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	69ba      	ldr	r2, [r7, #24]
 800c006:	0151      	lsls	r1, r2, #5
 800c008:	69fa      	ldr	r2, [r7, #28]
 800c00a:	440a      	add	r2, r1
 800c00c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c014:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	015a      	lsls	r2, r3, #5
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	4413      	add	r3, r2
 800c01e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	69ba      	ldr	r2, [r7, #24]
 800c026:	0151      	lsls	r1, r2, #5
 800c028:	69fa      	ldr	r2, [r7, #28]
 800c02a:	440a      	add	r2, r1
 800c02c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c030:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c034:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3720      	adds	r7, #32
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	fff80000 	.word	0xfff80000
 800c044:	e007ffff 	.word	0xe007ffff
 800c048:	1ff80000 	.word	0x1ff80000

0800c04c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b087      	sub	sp, #28
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c056:	2300      	movs	r3, #0
 800c058:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c05a:	2300      	movs	r3, #0
 800c05c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	785b      	ldrb	r3, [r3, #1]
 800c066:	2b01      	cmp	r3, #1
 800c068:	d14a      	bne.n	800c100 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	015a      	lsls	r2, r3, #5
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	4413      	add	r3, r2
 800c074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c07e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c082:	f040 8086 	bne.w	800c192 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	015a      	lsls	r2, r3, #5
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	4413      	add	r3, r2
 800c090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	7812      	ldrb	r2, [r2, #0]
 800c09a:	0151      	lsls	r1, r2, #5
 800c09c:	693a      	ldr	r2, [r7, #16]
 800c09e:	440a      	add	r2, r1
 800c0a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c0a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c0a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	015a      	lsls	r2, r3, #5
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	683a      	ldr	r2, [r7, #0]
 800c0bc:	7812      	ldrb	r2, [r2, #0]
 800c0be:	0151      	lsls	r1, r2, #5
 800c0c0:	693a      	ldr	r2, [r7, #16]
 800c0c2:	440a      	add	r2, r1
 800c0c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c0c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c0cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d902      	bls.n	800c0e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	75fb      	strb	r3, [r7, #23]
          break;
 800c0e2:	e056      	b.n	800c192 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	015a      	lsls	r2, r3, #5
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c0f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c0fc:	d0e7      	beq.n	800c0ce <USB_EPStopXfer+0x82>
 800c0fe:	e048      	b.n	800c192 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	015a      	lsls	r2, r3, #5
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	4413      	add	r3, r2
 800c10a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c114:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c118:	d13b      	bne.n	800c192 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	015a      	lsls	r2, r3, #5
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	4413      	add	r3, r2
 800c124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	7812      	ldrb	r2, [r2, #0]
 800c12e:	0151      	lsls	r1, r2, #5
 800c130:	693a      	ldr	r2, [r7, #16]
 800c132:	440a      	add	r2, r1
 800c134:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c138:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c13c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	015a      	lsls	r2, r3, #5
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	4413      	add	r3, r2
 800c148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	7812      	ldrb	r2, [r2, #0]
 800c152:	0151      	lsls	r1, r2, #5
 800c154:	693a      	ldr	r2, [r7, #16]
 800c156:	440a      	add	r2, r1
 800c158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c15c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c160:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3301      	adds	r3, #1
 800c166:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c16e:	4293      	cmp	r3, r2
 800c170:	d902      	bls.n	800c178 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c172:	2301      	movs	r3, #1
 800c174:	75fb      	strb	r3, [r7, #23]
          break;
 800c176:	e00c      	b.n	800c192 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	015a      	lsls	r2, r3, #5
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	4413      	add	r3, r2
 800c182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c18c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c190:	d0e7      	beq.n	800c162 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c192:	7dfb      	ldrb	r3, [r7, #23]
}
 800c194:	4618      	mov	r0, r3
 800c196:	371c      	adds	r7, #28
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b089      	sub	sp, #36	@ 0x24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	4611      	mov	r1, r2
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	71fb      	strb	r3, [r7, #7]
 800c1b2:	4613      	mov	r3, r2
 800c1b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c1be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d123      	bne.n	800c20e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c1c6:	88bb      	ldrh	r3, [r7, #4]
 800c1c8:	3303      	adds	r3, #3
 800c1ca:	089b      	lsrs	r3, r3, #2
 800c1cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	61bb      	str	r3, [r7, #24]
 800c1d2:	e018      	b.n	800c206 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c1d4:	79fb      	ldrb	r3, [r7, #7]
 800c1d6:	031a      	lsls	r2, r3, #12
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	4413      	add	r3, r2
 800c1dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	3301      	adds	r3, #1
 800c204:	61bb      	str	r3, [r7, #24]
 800c206:	69ba      	ldr	r2, [r7, #24]
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d3e2      	bcc.n	800c1d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c20e:	2300      	movs	r3, #0
}
 800c210:	4618      	mov	r0, r3
 800c212:	3724      	adds	r7, #36	@ 0x24
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b08b      	sub	sp, #44	@ 0x2c
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	4613      	mov	r3, r2
 800c228:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c232:	88fb      	ldrh	r3, [r7, #6]
 800c234:	089b      	lsrs	r3, r3, #2
 800c236:	b29b      	uxth	r3, r3
 800c238:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c23a:	88fb      	ldrh	r3, [r7, #6]
 800c23c:	f003 0303 	and.w	r3, r3, #3
 800c240:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c242:	2300      	movs	r3, #0
 800c244:	623b      	str	r3, [r7, #32]
 800c246:	e014      	b.n	800c272 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c252:	601a      	str	r2, [r3, #0]
    pDest++;
 800c254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c256:	3301      	adds	r3, #1
 800c258:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c25c:	3301      	adds	r3, #1
 800c25e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c262:	3301      	adds	r3, #1
 800c264:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c268:	3301      	adds	r3, #1
 800c26a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c26c:	6a3b      	ldr	r3, [r7, #32]
 800c26e:	3301      	adds	r3, #1
 800c270:	623b      	str	r3, [r7, #32]
 800c272:	6a3a      	ldr	r2, [r7, #32]
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	429a      	cmp	r2, r3
 800c278:	d3e6      	bcc.n	800c248 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c27a:	8bfb      	ldrh	r3, [r7, #30]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d01e      	beq.n	800c2be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c280:	2300      	movs	r3, #0
 800c282:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c28a:	461a      	mov	r2, r3
 800c28c:	f107 0310 	add.w	r3, r7, #16
 800c290:	6812      	ldr	r2, [r2, #0]
 800c292:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c294:	693a      	ldr	r2, [r7, #16]
 800c296:	6a3b      	ldr	r3, [r7, #32]
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	00db      	lsls	r3, r3, #3
 800c29c:	fa22 f303 	lsr.w	r3, r2, r3
 800c2a0:	b2da      	uxtb	r2, r3
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a4:	701a      	strb	r2, [r3, #0]
      i++;
 800c2a6:	6a3b      	ldr	r3, [r7, #32]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	623b      	str	r3, [r7, #32]
      pDest++;
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c2b2:	8bfb      	ldrh	r3, [r7, #30]
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c2b8:	8bfb      	ldrh	r3, [r7, #30]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1ea      	bne.n	800c294 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	372c      	adds	r7, #44	@ 0x2c
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b085      	sub	sp, #20
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	785b      	ldrb	r3, [r3, #1]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d12c      	bne.n	800c342 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	015a      	lsls	r2, r3, #5
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	db12      	blt.n	800c320 <USB_EPSetStall+0x54>
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00f      	beq.n	800c320 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	015a      	lsls	r2, r3, #5
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	4413      	add	r3, r2
 800c308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	68ba      	ldr	r2, [r7, #8]
 800c310:	0151      	lsls	r1, r2, #5
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	440a      	add	r2, r1
 800c316:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c31a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c31e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	015a      	lsls	r2, r3, #5
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	4413      	add	r3, r2
 800c328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	68ba      	ldr	r2, [r7, #8]
 800c330:	0151      	lsls	r1, r2, #5
 800c332:	68fa      	ldr	r2, [r7, #12]
 800c334:	440a      	add	r2, r1
 800c336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c33a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c33e:	6013      	str	r3, [r2, #0]
 800c340:	e02b      	b.n	800c39a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	015a      	lsls	r2, r3, #5
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	4413      	add	r3, r2
 800c34a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	db12      	blt.n	800c37a <USB_EPSetStall+0xae>
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00f      	beq.n	800c37a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	015a      	lsls	r2, r3, #5
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	4413      	add	r3, r2
 800c362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	0151      	lsls	r1, r2, #5
 800c36c:	68fa      	ldr	r2, [r7, #12]
 800c36e:	440a      	add	r2, r1
 800c370:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c374:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c378:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	015a      	lsls	r2, r3, #5
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	4413      	add	r3, r2
 800c382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	68ba      	ldr	r2, [r7, #8]
 800c38a:	0151      	lsls	r1, r2, #5
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	440a      	add	r2, r1
 800c390:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c394:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c398:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3714      	adds	r7, #20
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	785b      	ldrb	r3, [r3, #1]
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d128      	bne.n	800c416 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	015a      	lsls	r2, r3, #5
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	4413      	add	r3, r2
 800c3cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	0151      	lsls	r1, r2, #5
 800c3d6:	68fa      	ldr	r2, [r7, #12]
 800c3d8:	440a      	add	r2, r1
 800c3da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c3de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c3e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	791b      	ldrb	r3, [r3, #4]
 800c3e8:	2b03      	cmp	r3, #3
 800c3ea:	d003      	beq.n	800c3f4 <USB_EPClearStall+0x4c>
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	791b      	ldrb	r3, [r3, #4]
 800c3f0:	2b02      	cmp	r3, #2
 800c3f2:	d138      	bne.n	800c466 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	015a      	lsls	r2, r3, #5
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68ba      	ldr	r2, [r7, #8]
 800c404:	0151      	lsls	r1, r2, #5
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	440a      	add	r2, r1
 800c40a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c40e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c412:	6013      	str	r3, [r2, #0]
 800c414:	e027      	b.n	800c466 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	015a      	lsls	r2, r3, #5
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	4413      	add	r3, r2
 800c41e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	0151      	lsls	r1, r2, #5
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	440a      	add	r2, r1
 800c42c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c430:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c434:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	791b      	ldrb	r3, [r3, #4]
 800c43a:	2b03      	cmp	r3, #3
 800c43c:	d003      	beq.n	800c446 <USB_EPClearStall+0x9e>
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	791b      	ldrb	r3, [r3, #4]
 800c442:	2b02      	cmp	r3, #2
 800c444:	d10f      	bne.n	800c466 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	015a      	lsls	r2, r3, #5
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	4413      	add	r3, r2
 800c44e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	68ba      	ldr	r2, [r7, #8]
 800c456:	0151      	lsls	r1, r2, #5
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	440a      	add	r2, r1
 800c45c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c464:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3714      	adds	r7, #20
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c474:	b480      	push	{r7}
 800c476:	b085      	sub	sp, #20
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	460b      	mov	r3, r1
 800c47e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	68fa      	ldr	r2, [r7, #12]
 800c48e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c492:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c496:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	78fb      	ldrb	r3, [r7, #3]
 800c4a2:	011b      	lsls	r3, r3, #4
 800c4a4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c4a8:	68f9      	ldr	r1, [r7, #12]
 800c4aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c4b2:	2300      	movs	r3, #0
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3714      	adds	r7, #20
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68fa      	ldr	r2, [r7, #12]
 800c4d6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c4da:	f023 0303 	bic.w	r3, r3, #3
 800c4de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c4ee:	f023 0302 	bic.w	r3, r3, #2
 800c4f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3714      	adds	r7, #20
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c502:	b480      	push	{r7}
 800c504:	b085      	sub	sp, #20
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c51c:	f023 0303 	bic.w	r3, r3, #3
 800c520:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c530:	f043 0302 	orr.w	r3, r3, #2
 800c534:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c536:	2300      	movs	r3, #0
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3714      	adds	r7, #20
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	695b      	ldr	r3, [r3, #20]
 800c550:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	699b      	ldr	r3, [r3, #24]
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	4013      	ands	r3, r2
 800c55a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c55c:	68fb      	ldr	r3, [r7, #12]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c56a:	b480      	push	{r7}
 800c56c:	b085      	sub	sp, #20
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c57c:	699b      	ldr	r3, [r3, #24]
 800c57e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c586:	69db      	ldr	r3, [r3, #28]
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	4013      	ands	r3, r2
 800c58c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	0c1b      	lsrs	r3, r3, #16
}
 800c592:	4618      	mov	r0, r3
 800c594:	3714      	adds	r7, #20
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr

0800c59e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c59e:	b480      	push	{r7}
 800c5a0:	b085      	sub	sp, #20
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5b0:	699b      	ldr	r3, [r3, #24]
 800c5b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5ba:	69db      	ldr	r3, [r3, #28]
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	4013      	ands	r3, r2
 800c5c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	b29b      	uxth	r3, r3
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3714      	adds	r7, #20
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr

0800c5d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c5d2:	b480      	push	{r7}
 800c5d4:	b085      	sub	sp, #20
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	460b      	mov	r3, r1
 800c5dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c5e2:	78fb      	ldrb	r3, [r7, #3]
 800c5e4:	015a      	lsls	r2, r3, #5
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5ee:	689b      	ldr	r3, [r3, #8]
 800c5f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5f8:	695b      	ldr	r3, [r3, #20]
 800c5fa:	68ba      	ldr	r2, [r7, #8]
 800c5fc:	4013      	ands	r3, r2
 800c5fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c600:	68bb      	ldr	r3, [r7, #8]
}
 800c602:	4618      	mov	r0, r3
 800c604:	3714      	adds	r7, #20
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr

0800c60e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c60e:	b480      	push	{r7}
 800c610:	b087      	sub	sp, #28
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
 800c616:	460b      	mov	r3, r1
 800c618:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c62e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c630:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c632:	78fb      	ldrb	r3, [r7, #3]
 800c634:	f003 030f 	and.w	r3, r3, #15
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	fa22 f303 	lsr.w	r3, r2, r3
 800c63e:	01db      	lsls	r3, r3, #7
 800c640:	b2db      	uxtb	r3, r3
 800c642:	693a      	ldr	r2, [r7, #16]
 800c644:	4313      	orrs	r3, r2
 800c646:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c648:	78fb      	ldrb	r3, [r7, #3]
 800c64a:	015a      	lsls	r2, r3, #5
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	4413      	add	r3, r2
 800c650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c654:	689b      	ldr	r3, [r3, #8]
 800c656:	693a      	ldr	r2, [r7, #16]
 800c658:	4013      	ands	r3, r2
 800c65a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c65c:	68bb      	ldr	r3, [r7, #8]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	371c      	adds	r7, #28
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr

0800c66a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c66a:	b480      	push	{r7}
 800c66c:	b083      	sub	sp, #12
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	695b      	ldr	r3, [r3, #20]
 800c676:	f003 0301 	and.w	r3, r3, #1
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	370c      	adds	r7, #12
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr
	...

0800c688 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c688:	b480      	push	{r7}
 800c68a:	b085      	sub	sp, #20
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	4b09      	ldr	r3, [pc, #36]	@ (800c6cc <USB_ActivateSetup+0x44>)
 800c6a6:	4013      	ands	r3, r2
 800c6a8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	68fa      	ldr	r2, [r7, #12]
 800c6b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c6b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3714      	adds	r7, #20
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr
 800c6cc:	fffff800 	.word	0xfffff800

0800c6d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b087      	sub	sp, #28
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	460b      	mov	r3, r1
 800c6da:	607a      	str	r2, [r7, #4]
 800c6dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	333c      	adds	r3, #60	@ 0x3c
 800c6e6:	3304      	adds	r3, #4
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	4a26      	ldr	r2, [pc, #152]	@ (800c788 <USB_EP0_OutStart+0xb8>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d90a      	bls.n	800c70a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c700:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c704:	d101      	bne.n	800c70a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c706:	2300      	movs	r3, #0
 800c708:	e037      	b.n	800c77a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c710:	461a      	mov	r2, r3
 800c712:	2300      	movs	r3, #0
 800c714:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c71c:	691b      	ldr	r3, [r3, #16]
 800c71e:	697a      	ldr	r2, [r7, #20]
 800c720:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c724:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c728:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c730:	691b      	ldr	r3, [r3, #16]
 800c732:	697a      	ldr	r2, [r7, #20]
 800c734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c738:	f043 0318 	orr.w	r3, r3, #24
 800c73c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c744:	691b      	ldr	r3, [r3, #16]
 800c746:	697a      	ldr	r2, [r7, #20]
 800c748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c74c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c750:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c752:	7afb      	ldrb	r3, [r7, #11]
 800c754:	2b01      	cmp	r3, #1
 800c756:	d10f      	bne.n	800c778 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c75e:	461a      	mov	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	697a      	ldr	r2, [r7, #20]
 800c76e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c772:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c776:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c778:	2300      	movs	r3, #0
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	371c      	adds	r7, #28
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr
 800c786:	bf00      	nop
 800c788:	4f54300a 	.word	0x4f54300a

0800c78c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c794:	2300      	movs	r3, #0
 800c796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	3301      	adds	r3, #1
 800c79c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c7a4:	d901      	bls.n	800c7aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c7a6:	2303      	movs	r3, #3
 800c7a8:	e01b      	b.n	800c7e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	691b      	ldr	r3, [r3, #16]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	daf2      	bge.n	800c798 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	f043 0201 	orr.w	r2, r3, #1
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c7ce:	d901      	bls.n	800c7d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c7d0:	2303      	movs	r3, #3
 800c7d2:	e006      	b.n	800c7e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	f003 0301 	and.w	r3, r3, #1
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d0f0      	beq.n	800c7c2 <USB_CoreReset+0x36>

  return HAL_OK;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3714      	adds	r7, #20
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr
	...

0800c7f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c7fc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c800:	f005 fce0 	bl	80121c4 <USBD_static_malloc>
 800c804:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d109      	bne.n	800c820 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	32b0      	adds	r2, #176	@ 0xb0
 800c816:	2100      	movs	r1, #0
 800c818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c81c:	2302      	movs	r3, #2
 800c81e:	e0d4      	b.n	800c9ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c820:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c824:	2100      	movs	r1, #0
 800c826:	68f8      	ldr	r0, [r7, #12]
 800c828:	f005 fd10 	bl	801224c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	32b0      	adds	r2, #176	@ 0xb0
 800c836:	68f9      	ldr	r1, [r7, #12]
 800c838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	32b0      	adds	r2, #176	@ 0xb0
 800c846:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	7c1b      	ldrb	r3, [r3, #16]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d138      	bne.n	800c8ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c858:	4b5e      	ldr	r3, [pc, #376]	@ (800c9d4 <USBD_CDC_Init+0x1e4>)
 800c85a:	7819      	ldrb	r1, [r3, #0]
 800c85c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c860:	2202      	movs	r2, #2
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f005 fb8b 	bl	8011f7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c868:	4b5a      	ldr	r3, [pc, #360]	@ (800c9d4 <USBD_CDC_Init+0x1e4>)
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	f003 020f 	and.w	r2, r3, #15
 800c870:	6879      	ldr	r1, [r7, #4]
 800c872:	4613      	mov	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	440b      	add	r3, r1
 800c87c:	3324      	adds	r3, #36	@ 0x24
 800c87e:	2201      	movs	r2, #1
 800c880:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c882:	4b55      	ldr	r3, [pc, #340]	@ (800c9d8 <USBD_CDC_Init+0x1e8>)
 800c884:	7819      	ldrb	r1, [r3, #0]
 800c886:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c88a:	2202      	movs	r2, #2
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f005 fb76 	bl	8011f7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c892:	4b51      	ldr	r3, [pc, #324]	@ (800c9d8 <USBD_CDC_Init+0x1e8>)
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	f003 020f 	and.w	r2, r3, #15
 800c89a:	6879      	ldr	r1, [r7, #4]
 800c89c:	4613      	mov	r3, r2
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	4413      	add	r3, r2
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	440b      	add	r3, r1
 800c8a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c8ae:	4b4b      	ldr	r3, [pc, #300]	@ (800c9dc <USBD_CDC_Init+0x1ec>)
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	f003 020f 	and.w	r2, r3, #15
 800c8b6:	6879      	ldr	r1, [r7, #4]
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	4413      	add	r3, r2
 800c8be:	009b      	lsls	r3, r3, #2
 800c8c0:	440b      	add	r3, r1
 800c8c2:	3326      	adds	r3, #38	@ 0x26
 800c8c4:	2210      	movs	r2, #16
 800c8c6:	801a      	strh	r2, [r3, #0]
 800c8c8:	e035      	b.n	800c936 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c8ca:	4b42      	ldr	r3, [pc, #264]	@ (800c9d4 <USBD_CDC_Init+0x1e4>)
 800c8cc:	7819      	ldrb	r1, [r3, #0]
 800c8ce:	2340      	movs	r3, #64	@ 0x40
 800c8d0:	2202      	movs	r2, #2
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f005 fb53 	bl	8011f7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c8d8:	4b3e      	ldr	r3, [pc, #248]	@ (800c9d4 <USBD_CDC_Init+0x1e4>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	f003 020f 	and.w	r2, r3, #15
 800c8e0:	6879      	ldr	r1, [r7, #4]
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	4413      	add	r3, r2
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	440b      	add	r3, r1
 800c8ec:	3324      	adds	r3, #36	@ 0x24
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c8f2:	4b39      	ldr	r3, [pc, #228]	@ (800c9d8 <USBD_CDC_Init+0x1e8>)
 800c8f4:	7819      	ldrb	r1, [r3, #0]
 800c8f6:	2340      	movs	r3, #64	@ 0x40
 800c8f8:	2202      	movs	r2, #2
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f005 fb3f 	bl	8011f7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c900:	4b35      	ldr	r3, [pc, #212]	@ (800c9d8 <USBD_CDC_Init+0x1e8>)
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	f003 020f 	and.w	r2, r3, #15
 800c908:	6879      	ldr	r1, [r7, #4]
 800c90a:	4613      	mov	r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	4413      	add	r3, r2
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	440b      	add	r3, r1
 800c914:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c918:	2201      	movs	r2, #1
 800c91a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c91c:	4b2f      	ldr	r3, [pc, #188]	@ (800c9dc <USBD_CDC_Init+0x1ec>)
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	f003 020f 	and.w	r2, r3, #15
 800c924:	6879      	ldr	r1, [r7, #4]
 800c926:	4613      	mov	r3, r2
 800c928:	009b      	lsls	r3, r3, #2
 800c92a:	4413      	add	r3, r2
 800c92c:	009b      	lsls	r3, r3, #2
 800c92e:	440b      	add	r3, r1
 800c930:	3326      	adds	r3, #38	@ 0x26
 800c932:	2210      	movs	r2, #16
 800c934:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c936:	4b29      	ldr	r3, [pc, #164]	@ (800c9dc <USBD_CDC_Init+0x1ec>)
 800c938:	7819      	ldrb	r1, [r3, #0]
 800c93a:	2308      	movs	r3, #8
 800c93c:	2203      	movs	r2, #3
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f005 fb1d 	bl	8011f7e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c944:	4b25      	ldr	r3, [pc, #148]	@ (800c9dc <USBD_CDC_Init+0x1ec>)
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	f003 020f 	and.w	r2, r3, #15
 800c94c:	6879      	ldr	r1, [r7, #4]
 800c94e:	4613      	mov	r3, r2
 800c950:	009b      	lsls	r3, r3, #2
 800c952:	4413      	add	r3, r2
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	440b      	add	r3, r1
 800c958:	3324      	adds	r3, #36	@ 0x24
 800c95a:	2201      	movs	r2, #1
 800c95c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2200      	movs	r2, #0
 800c962:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	33b0      	adds	r3, #176	@ 0xb0
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	4413      	add	r3, r2
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2200      	movs	r2, #0
 800c97e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2200      	movs	r2, #0
 800c986:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c994:	2302      	movs	r3, #2
 800c996:	e018      	b.n	800c9ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	7c1b      	ldrb	r3, [r3, #16]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d10a      	bne.n	800c9b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c9a0:	4b0d      	ldr	r3, [pc, #52]	@ (800c9d8 <USBD_CDC_Init+0x1e8>)
 800c9a2:	7819      	ldrb	r1, [r3, #0]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c9aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f005 fbd4 	bl	801215c <USBD_LL_PrepareReceive>
 800c9b4:	e008      	b.n	800c9c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c9b6:	4b08      	ldr	r3, [pc, #32]	@ (800c9d8 <USBD_CDC_Init+0x1e8>)
 800c9b8:	7819      	ldrb	r1, [r3, #0]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c9c0:	2340      	movs	r3, #64	@ 0x40
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f005 fbca 	bl	801215c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c9c8:	2300      	movs	r3, #0
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3710      	adds	r7, #16
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	24000097 	.word	0x24000097
 800c9d8:	24000098 	.word	0x24000098
 800c9dc:	24000099 	.word	0x24000099

0800c9e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c9ec:	4b3a      	ldr	r3, [pc, #232]	@ (800cad8 <USBD_CDC_DeInit+0xf8>)
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f005 fae9 	bl	8011fca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c9f8:	4b37      	ldr	r3, [pc, #220]	@ (800cad8 <USBD_CDC_DeInit+0xf8>)
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	f003 020f 	and.w	r2, r3, #15
 800ca00:	6879      	ldr	r1, [r7, #4]
 800ca02:	4613      	mov	r3, r2
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	4413      	add	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	440b      	add	r3, r1
 800ca0c:	3324      	adds	r3, #36	@ 0x24
 800ca0e:	2200      	movs	r2, #0
 800ca10:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ca12:	4b32      	ldr	r3, [pc, #200]	@ (800cadc <USBD_CDC_DeInit+0xfc>)
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	4619      	mov	r1, r3
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f005 fad6 	bl	8011fca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ca1e:	4b2f      	ldr	r3, [pc, #188]	@ (800cadc <USBD_CDC_DeInit+0xfc>)
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	f003 020f 	and.w	r2, r3, #15
 800ca26:	6879      	ldr	r1, [r7, #4]
 800ca28:	4613      	mov	r3, r2
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	4413      	add	r3, r2
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	440b      	add	r3, r1
 800ca32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ca36:	2200      	movs	r2, #0
 800ca38:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ca3a:	4b29      	ldr	r3, [pc, #164]	@ (800cae0 <USBD_CDC_DeInit+0x100>)
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	4619      	mov	r1, r3
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f005 fac2 	bl	8011fca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ca46:	4b26      	ldr	r3, [pc, #152]	@ (800cae0 <USBD_CDC_DeInit+0x100>)
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	f003 020f 	and.w	r2, r3, #15
 800ca4e:	6879      	ldr	r1, [r7, #4]
 800ca50:	4613      	mov	r3, r2
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	4413      	add	r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	440b      	add	r3, r1
 800ca5a:	3324      	adds	r3, #36	@ 0x24
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ca60:	4b1f      	ldr	r3, [pc, #124]	@ (800cae0 <USBD_CDC_DeInit+0x100>)
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	f003 020f 	and.w	r2, r3, #15
 800ca68:	6879      	ldr	r1, [r7, #4]
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	4413      	add	r3, r2
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	440b      	add	r3, r1
 800ca74:	3326      	adds	r3, #38	@ 0x26
 800ca76:	2200      	movs	r2, #0
 800ca78:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	32b0      	adds	r2, #176	@ 0xb0
 800ca84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d01f      	beq.n	800cacc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	33b0      	adds	r3, #176	@ 0xb0
 800ca96:	009b      	lsls	r3, r3, #2
 800ca98:	4413      	add	r3, r2
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	32b0      	adds	r2, #176	@ 0xb0
 800caaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caae:	4618      	mov	r0, r3
 800cab0:	f005 fb96 	bl	80121e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	32b0      	adds	r2, #176	@ 0xb0
 800cabe:	2100      	movs	r1, #0
 800cac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cacc:	2300      	movs	r3, #0
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3708      	adds	r7, #8
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	24000097 	.word	0x24000097
 800cadc:	24000098 	.word	0x24000098
 800cae0:	24000099 	.word	0x24000099

0800cae4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b086      	sub	sp, #24
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	32b0      	adds	r2, #176	@ 0xb0
 800caf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cafc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cafe:	2300      	movs	r3, #0
 800cb00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cb02:	2300      	movs	r3, #0
 800cb04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb06:	2300      	movs	r3, #0
 800cb08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d101      	bne.n	800cb14 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cb10:	2303      	movs	r3, #3
 800cb12:	e0bf      	b.n	800cc94 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d050      	beq.n	800cbc2 <USBD_CDC_Setup+0xde>
 800cb20:	2b20      	cmp	r3, #32
 800cb22:	f040 80af 	bne.w	800cc84 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	88db      	ldrh	r3, [r3, #6]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d03a      	beq.n	800cba4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	b25b      	sxtb	r3, r3
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	da1b      	bge.n	800cb70 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	33b0      	adds	r3, #176	@ 0xb0
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4413      	add	r3, r2
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	683a      	ldr	r2, [r7, #0]
 800cb4c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cb4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cb50:	683a      	ldr	r2, [r7, #0]
 800cb52:	88d2      	ldrh	r2, [r2, #6]
 800cb54:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	88db      	ldrh	r3, [r3, #6]
 800cb5a:	2b07      	cmp	r3, #7
 800cb5c:	bf28      	it	cs
 800cb5e:	2307      	movcs	r3, #7
 800cb60:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	89fa      	ldrh	r2, [r7, #14]
 800cb66:	4619      	mov	r1, r3
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f001 fd7d 	bl	800e668 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cb6e:	e090      	b.n	800cc92 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	785a      	ldrb	r2, [r3, #1]
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	88db      	ldrh	r3, [r3, #6]
 800cb7e:	2b3f      	cmp	r3, #63	@ 0x3f
 800cb80:	d803      	bhi.n	800cb8a <USBD_CDC_Setup+0xa6>
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	88db      	ldrh	r3, [r3, #6]
 800cb86:	b2da      	uxtb	r2, r3
 800cb88:	e000      	b.n	800cb8c <USBD_CDC_Setup+0xa8>
 800cb8a:	2240      	movs	r2, #64	@ 0x40
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cb92:	6939      	ldr	r1, [r7, #16]
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f001 fd8f 	bl	800e6c0 <USBD_CtlPrepareRx>
      break;
 800cba2:	e076      	b.n	800cc92 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	33b0      	adds	r3, #176	@ 0xb0
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	4413      	add	r3, r2
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	683a      	ldr	r2, [r7, #0]
 800cbb8:	7850      	ldrb	r0, [r2, #1]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	6839      	ldr	r1, [r7, #0]
 800cbbe:	4798      	blx	r3
      break;
 800cbc0:	e067      	b.n	800cc92 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	785b      	ldrb	r3, [r3, #1]
 800cbc6:	2b0b      	cmp	r3, #11
 800cbc8:	d851      	bhi.n	800cc6e <USBD_CDC_Setup+0x18a>
 800cbca:	a201      	add	r2, pc, #4	@ (adr r2, 800cbd0 <USBD_CDC_Setup+0xec>)
 800cbcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd0:	0800cc01 	.word	0x0800cc01
 800cbd4:	0800cc7d 	.word	0x0800cc7d
 800cbd8:	0800cc6f 	.word	0x0800cc6f
 800cbdc:	0800cc6f 	.word	0x0800cc6f
 800cbe0:	0800cc6f 	.word	0x0800cc6f
 800cbe4:	0800cc6f 	.word	0x0800cc6f
 800cbe8:	0800cc6f 	.word	0x0800cc6f
 800cbec:	0800cc6f 	.word	0x0800cc6f
 800cbf0:	0800cc6f 	.word	0x0800cc6f
 800cbf4:	0800cc6f 	.word	0x0800cc6f
 800cbf8:	0800cc2b 	.word	0x0800cc2b
 800cbfc:	0800cc55 	.word	0x0800cc55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	2b03      	cmp	r3, #3
 800cc0a:	d107      	bne.n	800cc1c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cc0c:	f107 030a 	add.w	r3, r7, #10
 800cc10:	2202      	movs	r2, #2
 800cc12:	4619      	mov	r1, r3
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f001 fd27 	bl	800e668 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cc1a:	e032      	b.n	800cc82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cc1c:	6839      	ldr	r1, [r7, #0]
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f001 fca5 	bl	800e56e <USBD_CtlError>
            ret = USBD_FAIL;
 800cc24:	2303      	movs	r3, #3
 800cc26:	75fb      	strb	r3, [r7, #23]
          break;
 800cc28:	e02b      	b.n	800cc82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	2b03      	cmp	r3, #3
 800cc34:	d107      	bne.n	800cc46 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cc36:	f107 030d 	add.w	r3, r7, #13
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f001 fd12 	bl	800e668 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cc44:	e01d      	b.n	800cc82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cc46:	6839      	ldr	r1, [r7, #0]
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f001 fc90 	bl	800e56e <USBD_CtlError>
            ret = USBD_FAIL;
 800cc4e:	2303      	movs	r3, #3
 800cc50:	75fb      	strb	r3, [r7, #23]
          break;
 800cc52:	e016      	b.n	800cc82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	2b03      	cmp	r3, #3
 800cc5e:	d00f      	beq.n	800cc80 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cc60:	6839      	ldr	r1, [r7, #0]
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f001 fc83 	bl	800e56e <USBD_CtlError>
            ret = USBD_FAIL;
 800cc68:	2303      	movs	r3, #3
 800cc6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cc6c:	e008      	b.n	800cc80 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cc6e:	6839      	ldr	r1, [r7, #0]
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f001 fc7c 	bl	800e56e <USBD_CtlError>
          ret = USBD_FAIL;
 800cc76:	2303      	movs	r3, #3
 800cc78:	75fb      	strb	r3, [r7, #23]
          break;
 800cc7a:	e002      	b.n	800cc82 <USBD_CDC_Setup+0x19e>
          break;
 800cc7c:	bf00      	nop
 800cc7e:	e008      	b.n	800cc92 <USBD_CDC_Setup+0x1ae>
          break;
 800cc80:	bf00      	nop
      }
      break;
 800cc82:	e006      	b.n	800cc92 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cc84:	6839      	ldr	r1, [r7, #0]
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f001 fc71 	bl	800e56e <USBD_CtlError>
      ret = USBD_FAIL;
 800cc8c:	2303      	movs	r3, #3
 800cc8e:	75fb      	strb	r3, [r7, #23]
      break;
 800cc90:	bf00      	nop
  }

  return (uint8_t)ret;
 800cc92:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3718      	adds	r7, #24
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	460b      	mov	r3, r1
 800cca6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ccae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	32b0      	adds	r2, #176	@ 0xb0
 800ccba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d101      	bne.n	800ccc6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ccc2:	2303      	movs	r3, #3
 800ccc4:	e065      	b.n	800cd92 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	32b0      	adds	r2, #176	@ 0xb0
 800ccd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccd4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ccd6:	78fb      	ldrb	r3, [r7, #3]
 800ccd8:	f003 020f 	and.w	r2, r3, #15
 800ccdc:	6879      	ldr	r1, [r7, #4]
 800ccde:	4613      	mov	r3, r2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4413      	add	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	440b      	add	r3, r1
 800cce8:	3318      	adds	r3, #24
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d02f      	beq.n	800cd50 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ccf0:	78fb      	ldrb	r3, [r7, #3]
 800ccf2:	f003 020f 	and.w	r2, r3, #15
 800ccf6:	6879      	ldr	r1, [r7, #4]
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	4413      	add	r3, r2
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	440b      	add	r3, r1
 800cd02:	3318      	adds	r3, #24
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	78fb      	ldrb	r3, [r7, #3]
 800cd08:	f003 010f 	and.w	r1, r3, #15
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	460b      	mov	r3, r1
 800cd10:	00db      	lsls	r3, r3, #3
 800cd12:	440b      	add	r3, r1
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	4403      	add	r3, r0
 800cd18:	331c      	adds	r3, #28
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	fbb2 f1f3 	udiv	r1, r2, r3
 800cd20:	fb01 f303 	mul.w	r3, r1, r3
 800cd24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d112      	bne.n	800cd50 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cd2a:	78fb      	ldrb	r3, [r7, #3]
 800cd2c:	f003 020f 	and.w	r2, r3, #15
 800cd30:	6879      	ldr	r1, [r7, #4]
 800cd32:	4613      	mov	r3, r2
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	4413      	add	r3, r2
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	440b      	add	r3, r1
 800cd3c:	3318      	adds	r3, #24
 800cd3e:	2200      	movs	r2, #0
 800cd40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cd42:	78f9      	ldrb	r1, [r7, #3]
 800cd44:	2300      	movs	r3, #0
 800cd46:	2200      	movs	r2, #0
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f005 f9e6 	bl	801211a <USBD_LL_Transmit>
 800cd4e:	e01f      	b.n	800cd90 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	2200      	movs	r2, #0
 800cd54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	33b0      	adds	r3, #176	@ 0xb0
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	4413      	add	r3, r2
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d010      	beq.n	800cd90 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	33b0      	adds	r3, #176	@ 0xb0
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	4413      	add	r3, r2
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	691b      	ldr	r3, [r3, #16]
 800cd80:	68ba      	ldr	r2, [r7, #8]
 800cd82:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800cd86:	68ba      	ldr	r2, [r7, #8]
 800cd88:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800cd8c:	78fa      	ldrb	r2, [r7, #3]
 800cd8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b084      	sub	sp, #16
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	460b      	mov	r3, r1
 800cda4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	32b0      	adds	r2, #176	@ 0xb0
 800cdb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	32b0      	adds	r2, #176	@ 0xb0
 800cdc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d101      	bne.n	800cdcc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cdc8:	2303      	movs	r3, #3
 800cdca:	e01a      	b.n	800ce02 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cdcc:	78fb      	ldrb	r3, [r7, #3]
 800cdce:	4619      	mov	r1, r3
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f005 f9e4 	bl	801219e <USBD_LL_GetRxDataSize>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	33b0      	adds	r3, #176	@ 0xb0
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	4413      	add	r3, r2
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800cdfc:	4611      	mov	r1, r2
 800cdfe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ce00:	2300      	movs	r3, #0
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3710      	adds	r7, #16
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}

0800ce0a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ce0a:	b580      	push	{r7, lr}
 800ce0c:	b084      	sub	sp, #16
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	32b0      	adds	r2, #176	@ 0xb0
 800ce1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d101      	bne.n	800ce2c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	e024      	b.n	800ce76 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	33b0      	adds	r3, #176	@ 0xb0
 800ce36:	009b      	lsls	r3, r3, #2
 800ce38:	4413      	add	r3, r2
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d019      	beq.n	800ce74 <USBD_CDC_EP0_RxReady+0x6a>
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ce46:	2bff      	cmp	r3, #255	@ 0xff
 800ce48:	d014      	beq.n	800ce74 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	33b0      	adds	r3, #176	@ 0xb0
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	4413      	add	r3, r2
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ce62:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ce64:	68fa      	ldr	r2, [r7, #12]
 800ce66:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ce6a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	22ff      	movs	r2, #255	@ 0xff
 800ce70:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
	...

0800ce80 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b086      	sub	sp, #24
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ce88:	2182      	movs	r1, #130	@ 0x82
 800ce8a:	4818      	ldr	r0, [pc, #96]	@ (800ceec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ce8c:	f000 fd0f 	bl	800d8ae <USBD_GetEpDesc>
 800ce90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ce92:	2101      	movs	r1, #1
 800ce94:	4815      	ldr	r0, [pc, #84]	@ (800ceec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ce96:	f000 fd0a 	bl	800d8ae <USBD_GetEpDesc>
 800ce9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ce9c:	2181      	movs	r1, #129	@ 0x81
 800ce9e:	4813      	ldr	r0, [pc, #76]	@ (800ceec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cea0:	f000 fd05 	bl	800d8ae <USBD_GetEpDesc>
 800cea4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d002      	beq.n	800ceb2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	2210      	movs	r2, #16
 800ceb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d006      	beq.n	800cec6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cec0:	711a      	strb	r2, [r3, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d006      	beq.n	800ceda <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ced4:	711a      	strb	r2, [r3, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2243      	movs	r2, #67	@ 0x43
 800cede:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cee0:	4b02      	ldr	r3, [pc, #8]	@ (800ceec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3718      	adds	r7, #24
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	24000054 	.word	0x24000054

0800cef0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b086      	sub	sp, #24
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cef8:	2182      	movs	r1, #130	@ 0x82
 800cefa:	4818      	ldr	r0, [pc, #96]	@ (800cf5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cefc:	f000 fcd7 	bl	800d8ae <USBD_GetEpDesc>
 800cf00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cf02:	2101      	movs	r1, #1
 800cf04:	4815      	ldr	r0, [pc, #84]	@ (800cf5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cf06:	f000 fcd2 	bl	800d8ae <USBD_GetEpDesc>
 800cf0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cf0c:	2181      	movs	r1, #129	@ 0x81
 800cf0e:	4813      	ldr	r0, [pc, #76]	@ (800cf5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cf10:	f000 fccd 	bl	800d8ae <USBD_GetEpDesc>
 800cf14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d002      	beq.n	800cf22 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	2210      	movs	r2, #16
 800cf20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d006      	beq.n	800cf36 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	711a      	strb	r2, [r3, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f042 0202 	orr.w	r2, r2, #2
 800cf34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d006      	beq.n	800cf4a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	711a      	strb	r2, [r3, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	f042 0202 	orr.w	r2, r2, #2
 800cf48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2243      	movs	r2, #67	@ 0x43
 800cf4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cf50:	4b02      	ldr	r3, [pc, #8]	@ (800cf5c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3718      	adds	r7, #24
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	24000054 	.word	0x24000054

0800cf60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b086      	sub	sp, #24
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cf68:	2182      	movs	r1, #130	@ 0x82
 800cf6a:	4818      	ldr	r0, [pc, #96]	@ (800cfcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cf6c:	f000 fc9f 	bl	800d8ae <USBD_GetEpDesc>
 800cf70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cf72:	2101      	movs	r1, #1
 800cf74:	4815      	ldr	r0, [pc, #84]	@ (800cfcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cf76:	f000 fc9a 	bl	800d8ae <USBD_GetEpDesc>
 800cf7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cf7c:	2181      	movs	r1, #129	@ 0x81
 800cf7e:	4813      	ldr	r0, [pc, #76]	@ (800cfcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cf80:	f000 fc95 	bl	800d8ae <USBD_GetEpDesc>
 800cf84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d002      	beq.n	800cf92 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	2210      	movs	r2, #16
 800cf90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d006      	beq.n	800cfa6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cfa0:	711a      	strb	r2, [r3, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d006      	beq.n	800cfba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cfb4:	711a      	strb	r2, [r3, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2243      	movs	r2, #67	@ 0x43
 800cfbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cfc0:	4b02      	ldr	r3, [pc, #8]	@ (800cfcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3718      	adds	r7, #24
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	24000054 	.word	0x24000054

0800cfd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	220a      	movs	r2, #10
 800cfdc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cfde:	4b03      	ldr	r3, [pc, #12]	@ (800cfec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr
 800cfec:	24000010 	.word	0x24000010

0800cff0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d101      	bne.n	800d004 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d000:	2303      	movs	r3, #3
 800d002:	e009      	b.n	800d018 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	33b0      	adds	r3, #176	@ 0xb0
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	4413      	add	r3, r2
 800d012:	683a      	ldr	r2, [r7, #0]
 800d014:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d016:	2300      	movs	r3, #0
}
 800d018:	4618      	mov	r0, r3
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d024:	b480      	push	{r7}
 800d026:	b087      	sub	sp, #28
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	32b0      	adds	r2, #176	@ 0xb0
 800d03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d03e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d101      	bne.n	800d04a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d046:	2303      	movs	r3, #3
 800d048:	e008      	b.n	800d05c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d05a:	2300      	movs	r3, #0
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	371c      	adds	r7, #28
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	32b0      	adds	r2, #176	@ 0xb0
 800d07c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d080:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d101      	bne.n	800d08c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d088:	2303      	movs	r3, #3
 800d08a:	e004      	b.n	800d096 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	683a      	ldr	r2, [r7, #0]
 800d090:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d094:	2300      	movs	r3, #0
}
 800d096:	4618      	mov	r0, r3
 800d098:	3714      	adds	r7, #20
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr
	...

0800d0a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	32b0      	adds	r2, #176	@ 0xb0
 800d0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	32b0      	adds	r2, #176	@ 0xb0
 800d0c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d101      	bne.n	800d0d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d0ce:	2303      	movs	r3, #3
 800d0d0:	e018      	b.n	800d104 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	7c1b      	ldrb	r3, [r3, #16]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d10a      	bne.n	800d0f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d0da:	4b0c      	ldr	r3, [pc, #48]	@ (800d10c <USBD_CDC_ReceivePacket+0x68>)
 800d0dc:	7819      	ldrb	r1, [r3, #0]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d0e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f005 f837 	bl	801215c <USBD_LL_PrepareReceive>
 800d0ee:	e008      	b.n	800d102 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d0f0:	4b06      	ldr	r3, [pc, #24]	@ (800d10c <USBD_CDC_ReceivePacket+0x68>)
 800d0f2:	7819      	ldrb	r1, [r3, #0]
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d0fa:	2340      	movs	r3, #64	@ 0x40
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f005 f82d 	bl	801215c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d102:	2300      	movs	r3, #0
}
 800d104:	4618      	mov	r0, r3
 800d106:	3710      	adds	r7, #16
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	24000098 	.word	0x24000098

0800d110 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b086      	sub	sp, #24
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	4613      	mov	r3, r2
 800d11c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d101      	bne.n	800d128 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d124:	2303      	movs	r3, #3
 800d126:	e01f      	b.n	800d168 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2200      	movs	r2, #0
 800d12c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2200      	movs	r2, #0
 800d134:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2200      	movs	r2, #0
 800d13c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d003      	beq.n	800d14e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	68ba      	ldr	r2, [r7, #8]
 800d14a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2201      	movs	r2, #1
 800d152:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	79fa      	ldrb	r2, [r7, #7]
 800d15a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f004 fea3 	bl	8011ea8 <USBD_LL_Init>
 800d162:	4603      	mov	r3, r0
 800d164:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d166:	7dfb      	ldrb	r3, [r7, #23]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3718      	adds	r7, #24
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d17a:	2300      	movs	r3, #0
 800d17c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d101      	bne.n	800d188 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d184:	2303      	movs	r3, #3
 800d186:	e025      	b.n	800d1d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	683a      	ldr	r2, [r7, #0]
 800d18c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	32ae      	adds	r2, #174	@ 0xae
 800d19a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d00f      	beq.n	800d1c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	32ae      	adds	r2, #174	@ 0xae
 800d1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1b4:	f107 020e 	add.w	r2, r7, #14
 800d1b8:	4610      	mov	r0, r2
 800d1ba:	4798      	blx	r3
 800d1bc:	4602      	mov	r2, r0
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d1ca:	1c5a      	adds	r2, r3, #1
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d1d2:	2300      	movs	r3, #0
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3710      	adds	r7, #16
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f004 feaf 	bl	8011f48 <USBD_LL_Start>
 800d1ea:	4603      	mov	r3, r0
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3708      	adds	r7, #8
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d1fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	370c      	adds	r7, #12
 800d202:	46bd      	mov	sp, r7
 800d204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d208:	4770      	bx	lr

0800d20a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b084      	sub	sp, #16
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
 800d212:	460b      	mov	r3, r1
 800d214:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d216:	2300      	movs	r3, #0
 800d218:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d220:	2b00      	cmp	r3, #0
 800d222:	d009      	beq.n	800d238 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	78fa      	ldrb	r2, [r7, #3]
 800d22e:	4611      	mov	r1, r2
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	4798      	blx	r3
 800d234:	4603      	mov	r3, r0
 800d236:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d238:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3710      	adds	r7, #16
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d242:	b580      	push	{r7, lr}
 800d244:	b084      	sub	sp, #16
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
 800d24a:	460b      	mov	r3, r1
 800d24c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d24e:	2300      	movs	r3, #0
 800d250:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	78fa      	ldrb	r2, [r7, #3]
 800d25c:	4611      	mov	r1, r2
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	4798      	blx	r3
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d268:	2303      	movs	r3, #3
 800d26a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b084      	sub	sp, #16
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	4618      	mov	r0, r3
 800d28a:	f001 f936 	bl	800e4fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2201      	movs	r2, #1
 800d292:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d29c:	461a      	mov	r2, r3
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d2aa:	f003 031f 	and.w	r3, r3, #31
 800d2ae:	2b02      	cmp	r3, #2
 800d2b0:	d01a      	beq.n	800d2e8 <USBD_LL_SetupStage+0x72>
 800d2b2:	2b02      	cmp	r3, #2
 800d2b4:	d822      	bhi.n	800d2fc <USBD_LL_SetupStage+0x86>
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d002      	beq.n	800d2c0 <USBD_LL_SetupStage+0x4a>
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d00a      	beq.n	800d2d4 <USBD_LL_SetupStage+0x5e>
 800d2be:	e01d      	b.n	800d2fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 fb63 	bl	800d994 <USBD_StdDevReq>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	73fb      	strb	r3, [r7, #15]
      break;
 800d2d2:	e020      	b.n	800d316 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 fbcb 	bl	800da78 <USBD_StdItfReq>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	73fb      	strb	r3, [r7, #15]
      break;
 800d2e6:	e016      	b.n	800d316 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f000 fc2d 	bl	800db50 <USBD_StdEPReq>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	73fb      	strb	r3, [r7, #15]
      break;
 800d2fa:	e00c      	b.n	800d316 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d302:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d306:	b2db      	uxtb	r3, r3
 800d308:	4619      	mov	r1, r3
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f004 fe7c 	bl	8012008 <USBD_LL_StallEP>
 800d310:	4603      	mov	r3, r0
 800d312:	73fb      	strb	r3, [r7, #15]
      break;
 800d314:	bf00      	nop
  }

  return ret;
 800d316:	7bfb      	ldrb	r3, [r7, #15]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	460b      	mov	r3, r1
 800d32a:	607a      	str	r2, [r7, #4]
 800d32c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d32e:	2300      	movs	r3, #0
 800d330:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d332:	7afb      	ldrb	r3, [r7, #11]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d16e      	bne.n	800d416 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d33e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d346:	2b03      	cmp	r3, #3
 800d348:	f040 8098 	bne.w	800d47c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	689a      	ldr	r2, [r3, #8]
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	68db      	ldr	r3, [r3, #12]
 800d354:	429a      	cmp	r2, r3
 800d356:	d913      	bls.n	800d380 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	689a      	ldr	r2, [r3, #8]
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	1ad2      	subs	r2, r2, r3
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	68da      	ldr	r2, [r3, #12]
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	4293      	cmp	r3, r2
 800d370:	bf28      	it	cs
 800d372:	4613      	movcs	r3, r2
 800d374:	461a      	mov	r2, r3
 800d376:	6879      	ldr	r1, [r7, #4]
 800d378:	68f8      	ldr	r0, [r7, #12]
 800d37a:	f001 f9be 	bl	800e6fa <USBD_CtlContinueRx>
 800d37e:	e07d      	b.n	800d47c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d386:	f003 031f 	and.w	r3, r3, #31
 800d38a:	2b02      	cmp	r3, #2
 800d38c:	d014      	beq.n	800d3b8 <USBD_LL_DataOutStage+0x98>
 800d38e:	2b02      	cmp	r3, #2
 800d390:	d81d      	bhi.n	800d3ce <USBD_LL_DataOutStage+0xae>
 800d392:	2b00      	cmp	r3, #0
 800d394:	d002      	beq.n	800d39c <USBD_LL_DataOutStage+0x7c>
 800d396:	2b01      	cmp	r3, #1
 800d398:	d003      	beq.n	800d3a2 <USBD_LL_DataOutStage+0x82>
 800d39a:	e018      	b.n	800d3ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d39c:	2300      	movs	r3, #0
 800d39e:	75bb      	strb	r3, [r7, #22]
            break;
 800d3a0:	e018      	b.n	800d3d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f000 fa64 	bl	800d87a <USBD_CoreFindIF>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	75bb      	strb	r3, [r7, #22]
            break;
 800d3b6:	e00d      	b.n	800d3d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	f000 fa66 	bl	800d894 <USBD_CoreFindEP>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	75bb      	strb	r3, [r7, #22]
            break;
 800d3cc:	e002      	b.n	800d3d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	75bb      	strb	r3, [r7, #22]
            break;
 800d3d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d3d4:	7dbb      	ldrb	r3, [r7, #22]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d119      	bne.n	800d40e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	2b03      	cmp	r3, #3
 800d3e4:	d113      	bne.n	800d40e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d3e6:	7dba      	ldrb	r2, [r7, #22]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	32ae      	adds	r2, #174	@ 0xae
 800d3ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3f0:	691b      	ldr	r3, [r3, #16]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00b      	beq.n	800d40e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d3f6:	7dba      	ldrb	r2, [r7, #22]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d3fe:	7dba      	ldrb	r2, [r7, #22]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	32ae      	adds	r2, #174	@ 0xae
 800d404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d408:	691b      	ldr	r3, [r3, #16]
 800d40a:	68f8      	ldr	r0, [r7, #12]
 800d40c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d40e:	68f8      	ldr	r0, [r7, #12]
 800d410:	f001 f984 	bl	800e71c <USBD_CtlSendStatus>
 800d414:	e032      	b.n	800d47c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d416:	7afb      	ldrb	r3, [r7, #11]
 800d418:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	4619      	mov	r1, r3
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	f000 fa37 	bl	800d894 <USBD_CoreFindEP>
 800d426:	4603      	mov	r3, r0
 800d428:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d42a:	7dbb      	ldrb	r3, [r7, #22]
 800d42c:	2bff      	cmp	r3, #255	@ 0xff
 800d42e:	d025      	beq.n	800d47c <USBD_LL_DataOutStage+0x15c>
 800d430:	7dbb      	ldrb	r3, [r7, #22]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d122      	bne.n	800d47c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	2b03      	cmp	r3, #3
 800d440:	d117      	bne.n	800d472 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d442:	7dba      	ldrb	r2, [r7, #22]
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	32ae      	adds	r2, #174	@ 0xae
 800d448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d44c:	699b      	ldr	r3, [r3, #24]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00f      	beq.n	800d472 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d452:	7dba      	ldrb	r2, [r7, #22]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d45a:	7dba      	ldrb	r2, [r7, #22]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	32ae      	adds	r2, #174	@ 0xae
 800d460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d464:	699b      	ldr	r3, [r3, #24]
 800d466:	7afa      	ldrb	r2, [r7, #11]
 800d468:	4611      	mov	r1, r2
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	4798      	blx	r3
 800d46e:	4603      	mov	r3, r0
 800d470:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d472:	7dfb      	ldrb	r3, [r7, #23]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d001      	beq.n	800d47c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d478:	7dfb      	ldrb	r3, [r7, #23]
 800d47a:	e000      	b.n	800d47e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d47c:	2300      	movs	r3, #0
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3718      	adds	r7, #24
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}

0800d486 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d486:	b580      	push	{r7, lr}
 800d488:	b086      	sub	sp, #24
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	60f8      	str	r0, [r7, #12]
 800d48e:	460b      	mov	r3, r1
 800d490:	607a      	str	r2, [r7, #4]
 800d492:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d494:	7afb      	ldrb	r3, [r7, #11]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d16f      	bne.n	800d57a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	3314      	adds	r3, #20
 800d49e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d15a      	bne.n	800d560 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	689a      	ldr	r2, [r3, #8]
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d914      	bls.n	800d4e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	689a      	ldr	r2, [r3, #8]
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	68db      	ldr	r3, [r3, #12]
 800d4be:	1ad2      	subs	r2, r2, r3
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	689b      	ldr	r3, [r3, #8]
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	6879      	ldr	r1, [r7, #4]
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f001 f8e6 	bl	800e69e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	2100      	movs	r1, #0
 800d4d8:	68f8      	ldr	r0, [r7, #12]
 800d4da:	f004 fe3f 	bl	801215c <USBD_LL_PrepareReceive>
 800d4de:	e03f      	b.n	800d560 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	68da      	ldr	r2, [r3, #12]
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	689b      	ldr	r3, [r3, #8]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d11c      	bne.n	800d526 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	685a      	ldr	r2, [r3, #4]
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d316      	bcc.n	800d526 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	685a      	ldr	r2, [r3, #4]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d502:	429a      	cmp	r2, r3
 800d504:	d20f      	bcs.n	800d526 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d506:	2200      	movs	r2, #0
 800d508:	2100      	movs	r1, #0
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	f001 f8c7 	bl	800e69e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2200      	movs	r2, #0
 800d514:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d518:	2300      	movs	r3, #0
 800d51a:	2200      	movs	r2, #0
 800d51c:	2100      	movs	r1, #0
 800d51e:	68f8      	ldr	r0, [r7, #12]
 800d520:	f004 fe1c 	bl	801215c <USBD_LL_PrepareReceive>
 800d524:	e01c      	b.n	800d560 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	2b03      	cmp	r3, #3
 800d530:	d10f      	bne.n	800d552 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d009      	beq.n	800d552 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2200      	movs	r2, #0
 800d542:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d552:	2180      	movs	r1, #128	@ 0x80
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	f004 fd57 	bl	8012008 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d55a:	68f8      	ldr	r0, [r7, #12]
 800d55c:	f001 f8f1 	bl	800e742 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d566:	2b00      	cmp	r3, #0
 800d568:	d03a      	beq.n	800d5e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d56a:	68f8      	ldr	r0, [r7, #12]
 800d56c:	f7ff fe42 	bl	800d1f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2200      	movs	r2, #0
 800d574:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d578:	e032      	b.n	800d5e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d57a:	7afb      	ldrb	r3, [r7, #11]
 800d57c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d580:	b2db      	uxtb	r3, r3
 800d582:	4619      	mov	r1, r3
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f000 f985 	bl	800d894 <USBD_CoreFindEP>
 800d58a:	4603      	mov	r3, r0
 800d58c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d58e:	7dfb      	ldrb	r3, [r7, #23]
 800d590:	2bff      	cmp	r3, #255	@ 0xff
 800d592:	d025      	beq.n	800d5e0 <USBD_LL_DataInStage+0x15a>
 800d594:	7dfb      	ldrb	r3, [r7, #23]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d122      	bne.n	800d5e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	2b03      	cmp	r3, #3
 800d5a4:	d11c      	bne.n	800d5e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d5a6:	7dfa      	ldrb	r2, [r7, #23]
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	32ae      	adds	r2, #174	@ 0xae
 800d5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5b0:	695b      	ldr	r3, [r3, #20]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d014      	beq.n	800d5e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d5b6:	7dfa      	ldrb	r2, [r7, #23]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d5be:	7dfa      	ldrb	r2, [r7, #23]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	32ae      	adds	r2, #174	@ 0xae
 800d5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5c8:	695b      	ldr	r3, [r3, #20]
 800d5ca:	7afa      	ldrb	r2, [r7, #11]
 800d5cc:	4611      	mov	r1, r2
 800d5ce:	68f8      	ldr	r0, [r7, #12]
 800d5d0:	4798      	blx	r3
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d5d6:	7dbb      	ldrb	r3, [r7, #22]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d001      	beq.n	800d5e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d5dc:	7dbb      	ldrb	r3, [r7, #22]
 800d5de:	e000      	b.n	800d5e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d5e0:	2300      	movs	r3, #0
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3718      	adds	r7, #24
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b084      	sub	sp, #16
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2200      	movs	r2, #0
 800d602:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2200      	movs	r2, #0
 800d60a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2200      	movs	r2, #0
 800d618:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d622:	2b00      	cmp	r3, #0
 800d624:	d014      	beq.n	800d650 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00e      	beq.n	800d650 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	6852      	ldr	r2, [r2, #4]
 800d63e:	b2d2      	uxtb	r2, r2
 800d640:	4611      	mov	r1, r2
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	4798      	blx	r3
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d001      	beq.n	800d650 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d64c:	2303      	movs	r3, #3
 800d64e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d650:	2340      	movs	r3, #64	@ 0x40
 800d652:	2200      	movs	r2, #0
 800d654:	2100      	movs	r1, #0
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f004 fc91 	bl	8011f7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2201      	movs	r2, #1
 800d660:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2240      	movs	r2, #64	@ 0x40
 800d668:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d66c:	2340      	movs	r3, #64	@ 0x40
 800d66e:	2200      	movs	r2, #0
 800d670:	2180      	movs	r1, #128	@ 0x80
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f004 fc83 	bl	8011f7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2201      	movs	r2, #1
 800d67c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2240      	movs	r2, #64	@ 0x40
 800d682:	621a      	str	r2, [r3, #32]

  return ret;
 800d684:	7bfb      	ldrb	r3, [r7, #15]
}
 800d686:	4618      	mov	r0, r3
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d68e:	b480      	push	{r7}
 800d690:	b083      	sub	sp, #12
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
 800d696:	460b      	mov	r3, r1
 800d698:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	78fa      	ldrb	r2, [r7, #3]
 800d69e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	370c      	adds	r7, #12
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr

0800d6ae <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d6ae:	b480      	push	{r7}
 800d6b0:	b083      	sub	sp, #12
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	2b04      	cmp	r3, #4
 800d6c0:	d006      	beq.n	800d6d0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6c8:	b2da      	uxtb	r2, r3
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2204      	movs	r2, #4
 800d6d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d6d8:	2300      	movs	r3, #0
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	370c      	adds	r7, #12
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr

0800d6e6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d6e6:	b480      	push	{r7}
 800d6e8:	b083      	sub	sp, #12
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	2b04      	cmp	r3, #4
 800d6f8:	d106      	bne.n	800d708 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d700:	b2da      	uxtb	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d708:	2300      	movs	r3, #0
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	370c      	adds	r7, #12
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr

0800d716 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d716:	b580      	push	{r7, lr}
 800d718:	b082      	sub	sp, #8
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d724:	b2db      	uxtb	r3, r3
 800d726:	2b03      	cmp	r3, #3
 800d728:	d110      	bne.n	800d74c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d730:	2b00      	cmp	r3, #0
 800d732:	d00b      	beq.n	800d74c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d73a:	69db      	ldr	r3, [r3, #28]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d005      	beq.n	800d74c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d746:	69db      	ldr	r3, [r3, #28]
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d74c:	2300      	movs	r3, #0
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3708      	adds	r7, #8
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d756:	b580      	push	{r7, lr}
 800d758:	b082      	sub	sp, #8
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
 800d75e:	460b      	mov	r3, r1
 800d760:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	32ae      	adds	r2, #174	@ 0xae
 800d76c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d101      	bne.n	800d778 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d774:	2303      	movs	r3, #3
 800d776:	e01c      	b.n	800d7b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	2b03      	cmp	r3, #3
 800d782:	d115      	bne.n	800d7b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	32ae      	adds	r2, #174	@ 0xae
 800d78e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d792:	6a1b      	ldr	r3, [r3, #32]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d00b      	beq.n	800d7b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	32ae      	adds	r2, #174	@ 0xae
 800d7a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7a6:	6a1b      	ldr	r3, [r3, #32]
 800d7a8:	78fa      	ldrb	r2, [r7, #3]
 800d7aa:	4611      	mov	r1, r2
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d7b0:	2300      	movs	r3, #0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3708      	adds	r7, #8
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b082      	sub	sp, #8
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	32ae      	adds	r2, #174	@ 0xae
 800d7d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d101      	bne.n	800d7dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d7d8:	2303      	movs	r3, #3
 800d7da:	e01c      	b.n	800d816 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	2b03      	cmp	r3, #3
 800d7e6:	d115      	bne.n	800d814 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	32ae      	adds	r2, #174	@ 0xae
 800d7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00b      	beq.n	800d814 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	32ae      	adds	r2, #174	@ 0xae
 800d806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d80a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d80c:	78fa      	ldrb	r2, [r7, #3]
 800d80e:	4611      	mov	r1, r2
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3708      	adds	r7, #8
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d81e:	b480      	push	{r7}
 800d820:	b083      	sub	sp, #12
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d826:	2300      	movs	r3, #0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	370c      	adds	r7, #12
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d83c:	2300      	movs	r3, #0
 800d83e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2201      	movs	r2, #1
 800d844:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d00e      	beq.n	800d870 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	6852      	ldr	r2, [r2, #4]
 800d85e:	b2d2      	uxtb	r2, r2
 800d860:	4611      	mov	r1, r2
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	4798      	blx	r3
 800d866:	4603      	mov	r3, r0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d001      	beq.n	800d870 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d86c:	2303      	movs	r3, #3
 800d86e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d870:	7bfb      	ldrb	r3, [r7, #15]
}
 800d872:	4618      	mov	r0, r3
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d87a:	b480      	push	{r7}
 800d87c:	b083      	sub	sp, #12
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
 800d882:	460b      	mov	r3, r1
 800d884:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d886:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d888:	4618      	mov	r0, r3
 800d88a:	370c      	adds	r7, #12
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	460b      	mov	r3, r1
 800d89e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d8a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	370c      	adds	r7, #12
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr

0800d8ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b086      	sub	sp, #24
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
 800d8b6:	460b      	mov	r3, r1
 800d8b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	885b      	ldrh	r3, [r3, #2]
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	68fa      	ldr	r2, [r7, #12]
 800d8ce:	7812      	ldrb	r2, [r2, #0]
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d91f      	bls.n	800d914 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d8da:	e013      	b.n	800d904 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d8dc:	f107 030a 	add.w	r3, r7, #10
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	6978      	ldr	r0, [r7, #20]
 800d8e4:	f000 f81b 	bl	800d91e <USBD_GetNextDesc>
 800d8e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	785b      	ldrb	r3, [r3, #1]
 800d8ee:	2b05      	cmp	r3, #5
 800d8f0:	d108      	bne.n	800d904 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	789b      	ldrb	r3, [r3, #2]
 800d8fa:	78fa      	ldrb	r2, [r7, #3]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d008      	beq.n	800d912 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d900:	2300      	movs	r3, #0
 800d902:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	885b      	ldrh	r3, [r3, #2]
 800d908:	b29a      	uxth	r2, r3
 800d90a:	897b      	ldrh	r3, [r7, #10]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d8e5      	bhi.n	800d8dc <USBD_GetEpDesc+0x2e>
 800d910:	e000      	b.n	800d914 <USBD_GetEpDesc+0x66>
          break;
 800d912:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d914:	693b      	ldr	r3, [r7, #16]
}
 800d916:	4618      	mov	r0, r3
 800d918:	3718      	adds	r7, #24
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d91e:	b480      	push	{r7}
 800d920:	b085      	sub	sp, #20
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
 800d926:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	881b      	ldrh	r3, [r3, #0]
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	7812      	ldrb	r2, [r2, #0]
 800d934:	4413      	add	r3, r2
 800d936:	b29a      	uxth	r2, r3
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	461a      	mov	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	4413      	add	r3, r2
 800d946:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d948:	68fb      	ldr	r3, [r7, #12]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3714      	adds	r7, #20
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr

0800d956 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d956:	b480      	push	{r7}
 800d958:	b087      	sub	sp, #28
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	3301      	adds	r3, #1
 800d96c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d974:	8a3b      	ldrh	r3, [r7, #16]
 800d976:	021b      	lsls	r3, r3, #8
 800d978:	b21a      	sxth	r2, r3
 800d97a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d97e:	4313      	orrs	r3, r2
 800d980:	b21b      	sxth	r3, r3
 800d982:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d984:	89fb      	ldrh	r3, [r7, #14]
}
 800d986:	4618      	mov	r0, r3
 800d988:	371c      	adds	r7, #28
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr
	...

0800d994 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d9aa:	2b40      	cmp	r3, #64	@ 0x40
 800d9ac:	d005      	beq.n	800d9ba <USBD_StdDevReq+0x26>
 800d9ae:	2b40      	cmp	r3, #64	@ 0x40
 800d9b0:	d857      	bhi.n	800da62 <USBD_StdDevReq+0xce>
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d00f      	beq.n	800d9d6 <USBD_StdDevReq+0x42>
 800d9b6:	2b20      	cmp	r3, #32
 800d9b8:	d153      	bne.n	800da62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	32ae      	adds	r2, #174	@ 0xae
 800d9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9c8:	689b      	ldr	r3, [r3, #8]
 800d9ca:	6839      	ldr	r1, [r7, #0]
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	4798      	blx	r3
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	73fb      	strb	r3, [r7, #15]
      break;
 800d9d4:	e04a      	b.n	800da6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	785b      	ldrb	r3, [r3, #1]
 800d9da:	2b09      	cmp	r3, #9
 800d9dc:	d83b      	bhi.n	800da56 <USBD_StdDevReq+0xc2>
 800d9de:	a201      	add	r2, pc, #4	@ (adr r2, 800d9e4 <USBD_StdDevReq+0x50>)
 800d9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e4:	0800da39 	.word	0x0800da39
 800d9e8:	0800da4d 	.word	0x0800da4d
 800d9ec:	0800da57 	.word	0x0800da57
 800d9f0:	0800da43 	.word	0x0800da43
 800d9f4:	0800da57 	.word	0x0800da57
 800d9f8:	0800da17 	.word	0x0800da17
 800d9fc:	0800da0d 	.word	0x0800da0d
 800da00:	0800da57 	.word	0x0800da57
 800da04:	0800da2f 	.word	0x0800da2f
 800da08:	0800da21 	.word	0x0800da21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800da0c:	6839      	ldr	r1, [r7, #0]
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f000 fa3c 	bl	800de8c <USBD_GetDescriptor>
          break;
 800da14:	e024      	b.n	800da60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800da16:	6839      	ldr	r1, [r7, #0]
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 fbcb 	bl	800e1b4 <USBD_SetAddress>
          break;
 800da1e:	e01f      	b.n	800da60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800da20:	6839      	ldr	r1, [r7, #0]
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 fc0a 	bl	800e23c <USBD_SetConfig>
 800da28:	4603      	mov	r3, r0
 800da2a:	73fb      	strb	r3, [r7, #15]
          break;
 800da2c:	e018      	b.n	800da60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800da2e:	6839      	ldr	r1, [r7, #0]
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f000 fcad 	bl	800e390 <USBD_GetConfig>
          break;
 800da36:	e013      	b.n	800da60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800da38:	6839      	ldr	r1, [r7, #0]
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 fcde 	bl	800e3fc <USBD_GetStatus>
          break;
 800da40:	e00e      	b.n	800da60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800da42:	6839      	ldr	r1, [r7, #0]
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 fd0d 	bl	800e464 <USBD_SetFeature>
          break;
 800da4a:	e009      	b.n	800da60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800da4c:	6839      	ldr	r1, [r7, #0]
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f000 fd31 	bl	800e4b6 <USBD_ClrFeature>
          break;
 800da54:	e004      	b.n	800da60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800da56:	6839      	ldr	r1, [r7, #0]
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f000 fd88 	bl	800e56e <USBD_CtlError>
          break;
 800da5e:	bf00      	nop
      }
      break;
 800da60:	e004      	b.n	800da6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800da62:	6839      	ldr	r1, [r7, #0]
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f000 fd82 	bl	800e56e <USBD_CtlError>
      break;
 800da6a:	bf00      	nop
  }

  return ret;
 800da6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop

0800da78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da82:	2300      	movs	r3, #0
 800da84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800da8e:	2b40      	cmp	r3, #64	@ 0x40
 800da90:	d005      	beq.n	800da9e <USBD_StdItfReq+0x26>
 800da92:	2b40      	cmp	r3, #64	@ 0x40
 800da94:	d852      	bhi.n	800db3c <USBD_StdItfReq+0xc4>
 800da96:	2b00      	cmp	r3, #0
 800da98:	d001      	beq.n	800da9e <USBD_StdItfReq+0x26>
 800da9a:	2b20      	cmp	r3, #32
 800da9c:	d14e      	bne.n	800db3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	3b01      	subs	r3, #1
 800daa8:	2b02      	cmp	r3, #2
 800daaa:	d840      	bhi.n	800db2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	889b      	ldrh	r3, [r3, #4]
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d836      	bhi.n	800db24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	889b      	ldrh	r3, [r3, #4]
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	4619      	mov	r1, r3
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7ff fedb 	bl	800d87a <USBD_CoreFindIF>
 800dac4:	4603      	mov	r3, r0
 800dac6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dac8:	7bbb      	ldrb	r3, [r7, #14]
 800daca:	2bff      	cmp	r3, #255	@ 0xff
 800dacc:	d01d      	beq.n	800db0a <USBD_StdItfReq+0x92>
 800dace:	7bbb      	ldrb	r3, [r7, #14]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d11a      	bne.n	800db0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dad4:	7bba      	ldrb	r2, [r7, #14]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	32ae      	adds	r2, #174	@ 0xae
 800dada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00f      	beq.n	800db04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dae4:	7bba      	ldrb	r2, [r7, #14]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800daec:	7bba      	ldrb	r2, [r7, #14]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	32ae      	adds	r2, #174	@ 0xae
 800daf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	6839      	ldr	r1, [r7, #0]
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	4798      	blx	r3
 800dafe:	4603      	mov	r3, r0
 800db00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800db02:	e004      	b.n	800db0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800db04:	2303      	movs	r3, #3
 800db06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800db08:	e001      	b.n	800db0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800db0a:	2303      	movs	r3, #3
 800db0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	88db      	ldrh	r3, [r3, #6]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d110      	bne.n	800db38 <USBD_StdItfReq+0xc0>
 800db16:	7bfb      	ldrb	r3, [r7, #15]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d10d      	bne.n	800db38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 fdfd 	bl	800e71c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800db22:	e009      	b.n	800db38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800db24:	6839      	ldr	r1, [r7, #0]
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 fd21 	bl	800e56e <USBD_CtlError>
          break;
 800db2c:	e004      	b.n	800db38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800db2e:	6839      	ldr	r1, [r7, #0]
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 fd1c 	bl	800e56e <USBD_CtlError>
          break;
 800db36:	e000      	b.n	800db3a <USBD_StdItfReq+0xc2>
          break;
 800db38:	bf00      	nop
      }
      break;
 800db3a:	e004      	b.n	800db46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800db3c:	6839      	ldr	r1, [r7, #0]
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 fd15 	bl	800e56e <USBD_CtlError>
      break;
 800db44:	bf00      	nop
  }

  return ret;
 800db46:	7bfb      	ldrb	r3, [r7, #15]
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800db5a:	2300      	movs	r3, #0
 800db5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	889b      	ldrh	r3, [r3, #4]
 800db62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800db6c:	2b40      	cmp	r3, #64	@ 0x40
 800db6e:	d007      	beq.n	800db80 <USBD_StdEPReq+0x30>
 800db70:	2b40      	cmp	r3, #64	@ 0x40
 800db72:	f200 817f 	bhi.w	800de74 <USBD_StdEPReq+0x324>
 800db76:	2b00      	cmp	r3, #0
 800db78:	d02a      	beq.n	800dbd0 <USBD_StdEPReq+0x80>
 800db7a:	2b20      	cmp	r3, #32
 800db7c:	f040 817a 	bne.w	800de74 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800db80:	7bbb      	ldrb	r3, [r7, #14]
 800db82:	4619      	mov	r1, r3
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f7ff fe85 	bl	800d894 <USBD_CoreFindEP>
 800db8a:	4603      	mov	r3, r0
 800db8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db8e:	7b7b      	ldrb	r3, [r7, #13]
 800db90:	2bff      	cmp	r3, #255	@ 0xff
 800db92:	f000 8174 	beq.w	800de7e <USBD_StdEPReq+0x32e>
 800db96:	7b7b      	ldrb	r3, [r7, #13]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	f040 8170 	bne.w	800de7e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800db9e:	7b7a      	ldrb	r2, [r7, #13]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800dba6:	7b7a      	ldrb	r2, [r7, #13]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	32ae      	adds	r2, #174	@ 0xae
 800dbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbb0:	689b      	ldr	r3, [r3, #8]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	f000 8163 	beq.w	800de7e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800dbb8:	7b7a      	ldrb	r2, [r7, #13]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	32ae      	adds	r2, #174	@ 0xae
 800dbbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	6839      	ldr	r1, [r7, #0]
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	4798      	blx	r3
 800dbca:	4603      	mov	r3, r0
 800dbcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dbce:	e156      	b.n	800de7e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	785b      	ldrb	r3, [r3, #1]
 800dbd4:	2b03      	cmp	r3, #3
 800dbd6:	d008      	beq.n	800dbea <USBD_StdEPReq+0x9a>
 800dbd8:	2b03      	cmp	r3, #3
 800dbda:	f300 8145 	bgt.w	800de68 <USBD_StdEPReq+0x318>
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	f000 809b 	beq.w	800dd1a <USBD_StdEPReq+0x1ca>
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d03c      	beq.n	800dc62 <USBD_StdEPReq+0x112>
 800dbe8:	e13e      	b.n	800de68 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	2b02      	cmp	r3, #2
 800dbf4:	d002      	beq.n	800dbfc <USBD_StdEPReq+0xac>
 800dbf6:	2b03      	cmp	r3, #3
 800dbf8:	d016      	beq.n	800dc28 <USBD_StdEPReq+0xd8>
 800dbfa:	e02c      	b.n	800dc56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dbfc:	7bbb      	ldrb	r3, [r7, #14]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00d      	beq.n	800dc1e <USBD_StdEPReq+0xce>
 800dc02:	7bbb      	ldrb	r3, [r7, #14]
 800dc04:	2b80      	cmp	r3, #128	@ 0x80
 800dc06:	d00a      	beq.n	800dc1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc08:	7bbb      	ldrb	r3, [r7, #14]
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f004 f9fb 	bl	8012008 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc12:	2180      	movs	r1, #128	@ 0x80
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f004 f9f7 	bl	8012008 <USBD_LL_StallEP>
 800dc1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc1c:	e020      	b.n	800dc60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dc1e:	6839      	ldr	r1, [r7, #0]
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 fca4 	bl	800e56e <USBD_CtlError>
              break;
 800dc26:	e01b      	b.n	800dc60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	885b      	ldrh	r3, [r3, #2]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d10e      	bne.n	800dc4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dc30:	7bbb      	ldrb	r3, [r7, #14]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d00b      	beq.n	800dc4e <USBD_StdEPReq+0xfe>
 800dc36:	7bbb      	ldrb	r3, [r7, #14]
 800dc38:	2b80      	cmp	r3, #128	@ 0x80
 800dc3a:	d008      	beq.n	800dc4e <USBD_StdEPReq+0xfe>
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	88db      	ldrh	r3, [r3, #6]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d104      	bne.n	800dc4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc44:	7bbb      	ldrb	r3, [r7, #14]
 800dc46:	4619      	mov	r1, r3
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f004 f9dd 	bl	8012008 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 fd64 	bl	800e71c <USBD_CtlSendStatus>

              break;
 800dc54:	e004      	b.n	800dc60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dc56:	6839      	ldr	r1, [r7, #0]
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f000 fc88 	bl	800e56e <USBD_CtlError>
              break;
 800dc5e:	bf00      	nop
          }
          break;
 800dc60:	e107      	b.n	800de72 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	2b02      	cmp	r3, #2
 800dc6c:	d002      	beq.n	800dc74 <USBD_StdEPReq+0x124>
 800dc6e:	2b03      	cmp	r3, #3
 800dc70:	d016      	beq.n	800dca0 <USBD_StdEPReq+0x150>
 800dc72:	e04b      	b.n	800dd0c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc74:	7bbb      	ldrb	r3, [r7, #14]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00d      	beq.n	800dc96 <USBD_StdEPReq+0x146>
 800dc7a:	7bbb      	ldrb	r3, [r7, #14]
 800dc7c:	2b80      	cmp	r3, #128	@ 0x80
 800dc7e:	d00a      	beq.n	800dc96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc80:	7bbb      	ldrb	r3, [r7, #14]
 800dc82:	4619      	mov	r1, r3
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f004 f9bf 	bl	8012008 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc8a:	2180      	movs	r1, #128	@ 0x80
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f004 f9bb 	bl	8012008 <USBD_LL_StallEP>
 800dc92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc94:	e040      	b.n	800dd18 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dc96:	6839      	ldr	r1, [r7, #0]
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 fc68 	bl	800e56e <USBD_CtlError>
              break;
 800dc9e:	e03b      	b.n	800dd18 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	885b      	ldrh	r3, [r3, #2]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d136      	bne.n	800dd16 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dca8:	7bbb      	ldrb	r3, [r7, #14]
 800dcaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d004      	beq.n	800dcbc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dcb2:	7bbb      	ldrb	r3, [r7, #14]
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f004 f9c5 	bl	8012046 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 fd2d 	bl	800e71c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dcc2:	7bbb      	ldrb	r3, [r7, #14]
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f7ff fde4 	bl	800d894 <USBD_CoreFindEP>
 800dccc:	4603      	mov	r3, r0
 800dcce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dcd0:	7b7b      	ldrb	r3, [r7, #13]
 800dcd2:	2bff      	cmp	r3, #255	@ 0xff
 800dcd4:	d01f      	beq.n	800dd16 <USBD_StdEPReq+0x1c6>
 800dcd6:	7b7b      	ldrb	r3, [r7, #13]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d11c      	bne.n	800dd16 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dcdc:	7b7a      	ldrb	r2, [r7, #13]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dce4:	7b7a      	ldrb	r2, [r7, #13]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	32ae      	adds	r2, #174	@ 0xae
 800dcea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcee:	689b      	ldr	r3, [r3, #8]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d010      	beq.n	800dd16 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dcf4:	7b7a      	ldrb	r2, [r7, #13]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	32ae      	adds	r2, #174	@ 0xae
 800dcfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	6839      	ldr	r1, [r7, #0]
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	4798      	blx	r3
 800dd06:	4603      	mov	r3, r0
 800dd08:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dd0a:	e004      	b.n	800dd16 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dd0c:	6839      	ldr	r1, [r7, #0]
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f000 fc2d 	bl	800e56e <USBD_CtlError>
              break;
 800dd14:	e000      	b.n	800dd18 <USBD_StdEPReq+0x1c8>
              break;
 800dd16:	bf00      	nop
          }
          break;
 800dd18:	e0ab      	b.n	800de72 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	2b02      	cmp	r3, #2
 800dd24:	d002      	beq.n	800dd2c <USBD_StdEPReq+0x1dc>
 800dd26:	2b03      	cmp	r3, #3
 800dd28:	d032      	beq.n	800dd90 <USBD_StdEPReq+0x240>
 800dd2a:	e097      	b.n	800de5c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd2c:	7bbb      	ldrb	r3, [r7, #14]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d007      	beq.n	800dd42 <USBD_StdEPReq+0x1f2>
 800dd32:	7bbb      	ldrb	r3, [r7, #14]
 800dd34:	2b80      	cmp	r3, #128	@ 0x80
 800dd36:	d004      	beq.n	800dd42 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dd38:	6839      	ldr	r1, [r7, #0]
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 fc17 	bl	800e56e <USBD_CtlError>
                break;
 800dd40:	e091      	b.n	800de66 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	da0b      	bge.n	800dd62 <USBD_StdEPReq+0x212>
 800dd4a:	7bbb      	ldrb	r3, [r7, #14]
 800dd4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dd50:	4613      	mov	r3, r2
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4413      	add	r3, r2
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	3310      	adds	r3, #16
 800dd5a:	687a      	ldr	r2, [r7, #4]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	3304      	adds	r3, #4
 800dd60:	e00b      	b.n	800dd7a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dd62:	7bbb      	ldrb	r3, [r7, #14]
 800dd64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd68:	4613      	mov	r3, r2
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	4413      	add	r3, r2
 800dd6e:	009b      	lsls	r3, r3, #2
 800dd70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	4413      	add	r3, r2
 800dd78:	3304      	adds	r3, #4
 800dd7a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	2202      	movs	r2, #2
 800dd86:	4619      	mov	r1, r3
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f000 fc6d 	bl	800e668 <USBD_CtlSendData>
              break;
 800dd8e:	e06a      	b.n	800de66 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dd90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	da11      	bge.n	800ddbc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dd98:	7bbb      	ldrb	r3, [r7, #14]
 800dd9a:	f003 020f 	and.w	r2, r3, #15
 800dd9e:	6879      	ldr	r1, [r7, #4]
 800dda0:	4613      	mov	r3, r2
 800dda2:	009b      	lsls	r3, r3, #2
 800dda4:	4413      	add	r3, r2
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	440b      	add	r3, r1
 800ddaa:	3324      	adds	r3, #36	@ 0x24
 800ddac:	881b      	ldrh	r3, [r3, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d117      	bne.n	800dde2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ddb2:	6839      	ldr	r1, [r7, #0]
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f000 fbda 	bl	800e56e <USBD_CtlError>
                  break;
 800ddba:	e054      	b.n	800de66 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ddbc:	7bbb      	ldrb	r3, [r7, #14]
 800ddbe:	f003 020f 	and.w	r2, r3, #15
 800ddc2:	6879      	ldr	r1, [r7, #4]
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	4413      	add	r3, r2
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	440b      	add	r3, r1
 800ddce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ddd2:	881b      	ldrh	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d104      	bne.n	800dde2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ddd8:	6839      	ldr	r1, [r7, #0]
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 fbc7 	bl	800e56e <USBD_CtlError>
                  break;
 800dde0:	e041      	b.n	800de66 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dde2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	da0b      	bge.n	800de02 <USBD_StdEPReq+0x2b2>
 800ddea:	7bbb      	ldrb	r3, [r7, #14]
 800ddec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ddf0:	4613      	mov	r3, r2
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	4413      	add	r3, r2
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	3310      	adds	r3, #16
 800ddfa:	687a      	ldr	r2, [r7, #4]
 800ddfc:	4413      	add	r3, r2
 800ddfe:	3304      	adds	r3, #4
 800de00:	e00b      	b.n	800de1a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800de02:	7bbb      	ldrb	r3, [r7, #14]
 800de04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de08:	4613      	mov	r3, r2
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	4413      	add	r3, r2
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	4413      	add	r3, r2
 800de18:	3304      	adds	r3, #4
 800de1a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800de1c:	7bbb      	ldrb	r3, [r7, #14]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d002      	beq.n	800de28 <USBD_StdEPReq+0x2d8>
 800de22:	7bbb      	ldrb	r3, [r7, #14]
 800de24:	2b80      	cmp	r3, #128	@ 0x80
 800de26:	d103      	bne.n	800de30 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	2200      	movs	r2, #0
 800de2c:	601a      	str	r2, [r3, #0]
 800de2e:	e00e      	b.n	800de4e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800de30:	7bbb      	ldrb	r3, [r7, #14]
 800de32:	4619      	mov	r1, r3
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f004 f925 	bl	8012084 <USBD_LL_IsStallEP>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d003      	beq.n	800de48 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	2201      	movs	r2, #1
 800de44:	601a      	str	r2, [r3, #0]
 800de46:	e002      	b.n	800de4e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	2200      	movs	r2, #0
 800de4c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	2202      	movs	r2, #2
 800de52:	4619      	mov	r1, r3
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f000 fc07 	bl	800e668 <USBD_CtlSendData>
              break;
 800de5a:	e004      	b.n	800de66 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800de5c:	6839      	ldr	r1, [r7, #0]
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 fb85 	bl	800e56e <USBD_CtlError>
              break;
 800de64:	bf00      	nop
          }
          break;
 800de66:	e004      	b.n	800de72 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800de68:	6839      	ldr	r1, [r7, #0]
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f000 fb7f 	bl	800e56e <USBD_CtlError>
          break;
 800de70:	bf00      	nop
      }
      break;
 800de72:	e005      	b.n	800de80 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800de74:	6839      	ldr	r1, [r7, #0]
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f000 fb79 	bl	800e56e <USBD_CtlError>
      break;
 800de7c:	e000      	b.n	800de80 <USBD_StdEPReq+0x330>
      break;
 800de7e:	bf00      	nop
  }

  return ret;
 800de80:	7bfb      	ldrb	r3, [r7, #15]
}
 800de82:	4618      	mov	r0, r3
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
	...

0800de8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b084      	sub	sp, #16
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800de96:	2300      	movs	r3, #0
 800de98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800de9e:	2300      	movs	r3, #0
 800dea0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	885b      	ldrh	r3, [r3, #2]
 800dea6:	0a1b      	lsrs	r3, r3, #8
 800dea8:	b29b      	uxth	r3, r3
 800deaa:	3b01      	subs	r3, #1
 800deac:	2b0e      	cmp	r3, #14
 800deae:	f200 8152 	bhi.w	800e156 <USBD_GetDescriptor+0x2ca>
 800deb2:	a201      	add	r2, pc, #4	@ (adr r2, 800deb8 <USBD_GetDescriptor+0x2c>)
 800deb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb8:	0800df29 	.word	0x0800df29
 800debc:	0800df41 	.word	0x0800df41
 800dec0:	0800df81 	.word	0x0800df81
 800dec4:	0800e157 	.word	0x0800e157
 800dec8:	0800e157 	.word	0x0800e157
 800decc:	0800e0f7 	.word	0x0800e0f7
 800ded0:	0800e123 	.word	0x0800e123
 800ded4:	0800e157 	.word	0x0800e157
 800ded8:	0800e157 	.word	0x0800e157
 800dedc:	0800e157 	.word	0x0800e157
 800dee0:	0800e157 	.word	0x0800e157
 800dee4:	0800e157 	.word	0x0800e157
 800dee8:	0800e157 	.word	0x0800e157
 800deec:	0800e157 	.word	0x0800e157
 800def0:	0800def5 	.word	0x0800def5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800defa:	69db      	ldr	r3, [r3, #28]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d00b      	beq.n	800df18 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df06:	69db      	ldr	r3, [r3, #28]
 800df08:	687a      	ldr	r2, [r7, #4]
 800df0a:	7c12      	ldrb	r2, [r2, #16]
 800df0c:	f107 0108 	add.w	r1, r7, #8
 800df10:	4610      	mov	r0, r2
 800df12:	4798      	blx	r3
 800df14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df16:	e126      	b.n	800e166 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800df18:	6839      	ldr	r1, [r7, #0]
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f000 fb27 	bl	800e56e <USBD_CtlError>
        err++;
 800df20:	7afb      	ldrb	r3, [r7, #11]
 800df22:	3301      	adds	r3, #1
 800df24:	72fb      	strb	r3, [r7, #11]
      break;
 800df26:	e11e      	b.n	800e166 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	7c12      	ldrb	r2, [r2, #16]
 800df34:	f107 0108 	add.w	r1, r7, #8
 800df38:	4610      	mov	r0, r2
 800df3a:	4798      	blx	r3
 800df3c:	60f8      	str	r0, [r7, #12]
      break;
 800df3e:	e112      	b.n	800e166 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	7c1b      	ldrb	r3, [r3, #16]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d10d      	bne.n	800df64 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df50:	f107 0208 	add.w	r2, r7, #8
 800df54:	4610      	mov	r0, r2
 800df56:	4798      	blx	r3
 800df58:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	3301      	adds	r3, #1
 800df5e:	2202      	movs	r2, #2
 800df60:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800df62:	e100      	b.n	800e166 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df6c:	f107 0208 	add.w	r2, r7, #8
 800df70:	4610      	mov	r0, r2
 800df72:	4798      	blx	r3
 800df74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	3301      	adds	r3, #1
 800df7a:	2202      	movs	r2, #2
 800df7c:	701a      	strb	r2, [r3, #0]
      break;
 800df7e:	e0f2      	b.n	800e166 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	885b      	ldrh	r3, [r3, #2]
 800df84:	b2db      	uxtb	r3, r3
 800df86:	2b05      	cmp	r3, #5
 800df88:	f200 80ac 	bhi.w	800e0e4 <USBD_GetDescriptor+0x258>
 800df8c:	a201      	add	r2, pc, #4	@ (adr r2, 800df94 <USBD_GetDescriptor+0x108>)
 800df8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df92:	bf00      	nop
 800df94:	0800dfad 	.word	0x0800dfad
 800df98:	0800dfe1 	.word	0x0800dfe1
 800df9c:	0800e015 	.word	0x0800e015
 800dfa0:	0800e049 	.word	0x0800e049
 800dfa4:	0800e07d 	.word	0x0800e07d
 800dfa8:	0800e0b1 	.word	0x0800e0b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00b      	beq.n	800dfd0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	7c12      	ldrb	r2, [r2, #16]
 800dfc4:	f107 0108 	add.w	r1, r7, #8
 800dfc8:	4610      	mov	r0, r2
 800dfca:	4798      	blx	r3
 800dfcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfce:	e091      	b.n	800e0f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dfd0:	6839      	ldr	r1, [r7, #0]
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 facb 	bl	800e56e <USBD_CtlError>
            err++;
 800dfd8:	7afb      	ldrb	r3, [r7, #11]
 800dfda:	3301      	adds	r3, #1
 800dfdc:	72fb      	strb	r3, [r7, #11]
          break;
 800dfde:	e089      	b.n	800e0f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dfe6:	689b      	ldr	r3, [r3, #8]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00b      	beq.n	800e004 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dff2:	689b      	ldr	r3, [r3, #8]
 800dff4:	687a      	ldr	r2, [r7, #4]
 800dff6:	7c12      	ldrb	r2, [r2, #16]
 800dff8:	f107 0108 	add.w	r1, r7, #8
 800dffc:	4610      	mov	r0, r2
 800dffe:	4798      	blx	r3
 800e000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e002:	e077      	b.n	800e0f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e004:	6839      	ldr	r1, [r7, #0]
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f000 fab1 	bl	800e56e <USBD_CtlError>
            err++;
 800e00c:	7afb      	ldrb	r3, [r7, #11]
 800e00e:	3301      	adds	r3, #1
 800e010:	72fb      	strb	r3, [r7, #11]
          break;
 800e012:	e06f      	b.n	800e0f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d00b      	beq.n	800e038 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e026:	68db      	ldr	r3, [r3, #12]
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	7c12      	ldrb	r2, [r2, #16]
 800e02c:	f107 0108 	add.w	r1, r7, #8
 800e030:	4610      	mov	r0, r2
 800e032:	4798      	blx	r3
 800e034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e036:	e05d      	b.n	800e0f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e038:	6839      	ldr	r1, [r7, #0]
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f000 fa97 	bl	800e56e <USBD_CtlError>
            err++;
 800e040:	7afb      	ldrb	r3, [r7, #11]
 800e042:	3301      	adds	r3, #1
 800e044:	72fb      	strb	r3, [r7, #11]
          break;
 800e046:	e055      	b.n	800e0f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e04e:	691b      	ldr	r3, [r3, #16]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d00b      	beq.n	800e06c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e05a:	691b      	ldr	r3, [r3, #16]
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	7c12      	ldrb	r2, [r2, #16]
 800e060:	f107 0108 	add.w	r1, r7, #8
 800e064:	4610      	mov	r0, r2
 800e066:	4798      	blx	r3
 800e068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e06a:	e043      	b.n	800e0f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e06c:	6839      	ldr	r1, [r7, #0]
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 fa7d 	bl	800e56e <USBD_CtlError>
            err++;
 800e074:	7afb      	ldrb	r3, [r7, #11]
 800e076:	3301      	adds	r3, #1
 800e078:	72fb      	strb	r3, [r7, #11]
          break;
 800e07a:	e03b      	b.n	800e0f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e082:	695b      	ldr	r3, [r3, #20]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00b      	beq.n	800e0a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e08e:	695b      	ldr	r3, [r3, #20]
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	7c12      	ldrb	r2, [r2, #16]
 800e094:	f107 0108 	add.w	r1, r7, #8
 800e098:	4610      	mov	r0, r2
 800e09a:	4798      	blx	r3
 800e09c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e09e:	e029      	b.n	800e0f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e0a0:	6839      	ldr	r1, [r7, #0]
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 fa63 	bl	800e56e <USBD_CtlError>
            err++;
 800e0a8:	7afb      	ldrb	r3, [r7, #11]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	72fb      	strb	r3, [r7, #11]
          break;
 800e0ae:	e021      	b.n	800e0f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e0b6:	699b      	ldr	r3, [r3, #24]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d00b      	beq.n	800e0d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e0c2:	699b      	ldr	r3, [r3, #24]
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	7c12      	ldrb	r2, [r2, #16]
 800e0c8:	f107 0108 	add.w	r1, r7, #8
 800e0cc:	4610      	mov	r0, r2
 800e0ce:	4798      	blx	r3
 800e0d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0d2:	e00f      	b.n	800e0f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e0d4:	6839      	ldr	r1, [r7, #0]
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 fa49 	bl	800e56e <USBD_CtlError>
            err++;
 800e0dc:	7afb      	ldrb	r3, [r7, #11]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	72fb      	strb	r3, [r7, #11]
          break;
 800e0e2:	e007      	b.n	800e0f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e0e4:	6839      	ldr	r1, [r7, #0]
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 fa41 	bl	800e56e <USBD_CtlError>
          err++;
 800e0ec:	7afb      	ldrb	r3, [r7, #11]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e0f2:	bf00      	nop
      }
      break;
 800e0f4:	e037      	b.n	800e166 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	7c1b      	ldrb	r3, [r3, #16]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d109      	bne.n	800e112 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e106:	f107 0208 	add.w	r2, r7, #8
 800e10a:	4610      	mov	r0, r2
 800e10c:	4798      	blx	r3
 800e10e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e110:	e029      	b.n	800e166 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e112:	6839      	ldr	r1, [r7, #0]
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f000 fa2a 	bl	800e56e <USBD_CtlError>
        err++;
 800e11a:	7afb      	ldrb	r3, [r7, #11]
 800e11c:	3301      	adds	r3, #1
 800e11e:	72fb      	strb	r3, [r7, #11]
      break;
 800e120:	e021      	b.n	800e166 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	7c1b      	ldrb	r3, [r3, #16]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d10d      	bne.n	800e146 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e132:	f107 0208 	add.w	r2, r7, #8
 800e136:	4610      	mov	r0, r2
 800e138:	4798      	blx	r3
 800e13a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	3301      	adds	r3, #1
 800e140:	2207      	movs	r2, #7
 800e142:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e144:	e00f      	b.n	800e166 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e146:	6839      	ldr	r1, [r7, #0]
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 fa10 	bl	800e56e <USBD_CtlError>
        err++;
 800e14e:	7afb      	ldrb	r3, [r7, #11]
 800e150:	3301      	adds	r3, #1
 800e152:	72fb      	strb	r3, [r7, #11]
      break;
 800e154:	e007      	b.n	800e166 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e156:	6839      	ldr	r1, [r7, #0]
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f000 fa08 	bl	800e56e <USBD_CtlError>
      err++;
 800e15e:	7afb      	ldrb	r3, [r7, #11]
 800e160:	3301      	adds	r3, #1
 800e162:	72fb      	strb	r3, [r7, #11]
      break;
 800e164:	bf00      	nop
  }

  if (err != 0U)
 800e166:	7afb      	ldrb	r3, [r7, #11]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d11e      	bne.n	800e1aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	88db      	ldrh	r3, [r3, #6]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d016      	beq.n	800e1a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e174:	893b      	ldrh	r3, [r7, #8]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d00e      	beq.n	800e198 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	88da      	ldrh	r2, [r3, #6]
 800e17e:	893b      	ldrh	r3, [r7, #8]
 800e180:	4293      	cmp	r3, r2
 800e182:	bf28      	it	cs
 800e184:	4613      	movcs	r3, r2
 800e186:	b29b      	uxth	r3, r3
 800e188:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e18a:	893b      	ldrh	r3, [r7, #8]
 800e18c:	461a      	mov	r2, r3
 800e18e:	68f9      	ldr	r1, [r7, #12]
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 fa69 	bl	800e668 <USBD_CtlSendData>
 800e196:	e009      	b.n	800e1ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e198:	6839      	ldr	r1, [r7, #0]
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f000 f9e7 	bl	800e56e <USBD_CtlError>
 800e1a0:	e004      	b.n	800e1ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f000 faba 	bl	800e71c <USBD_CtlSendStatus>
 800e1a8:	e000      	b.n	800e1ac <USBD_GetDescriptor+0x320>
    return;
 800e1aa:	bf00      	nop
  }
}
 800e1ac:	3710      	adds	r7, #16
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop

0800e1b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	889b      	ldrh	r3, [r3, #4]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d131      	bne.n	800e22a <USBD_SetAddress+0x76>
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	88db      	ldrh	r3, [r3, #6]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d12d      	bne.n	800e22a <USBD_SetAddress+0x76>
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	885b      	ldrh	r3, [r3, #2]
 800e1d2:	2b7f      	cmp	r3, #127	@ 0x7f
 800e1d4:	d829      	bhi.n	800e22a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	885b      	ldrh	r3, [r3, #2]
 800e1da:	b2db      	uxtb	r3, r3
 800e1dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1e8:	b2db      	uxtb	r3, r3
 800e1ea:	2b03      	cmp	r3, #3
 800e1ec:	d104      	bne.n	800e1f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e1ee:	6839      	ldr	r1, [r7, #0]
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f000 f9bc 	bl	800e56e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1f6:	e01d      	b.n	800e234 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	7bfa      	ldrb	r2, [r7, #15]
 800e1fc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e200:	7bfb      	ldrb	r3, [r7, #15]
 800e202:	4619      	mov	r1, r3
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f003 ff69 	bl	80120dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 fa86 	bl	800e71c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e210:	7bfb      	ldrb	r3, [r7, #15]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d004      	beq.n	800e220 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2202      	movs	r2, #2
 800e21a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e21e:	e009      	b.n	800e234 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2201      	movs	r2, #1
 800e224:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e228:	e004      	b.n	800e234 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e22a:	6839      	ldr	r1, [r7, #0]
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 f99e 	bl	800e56e <USBD_CtlError>
  }
}
 800e232:	bf00      	nop
 800e234:	bf00      	nop
 800e236:	3710      	adds	r7, #16
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e246:	2300      	movs	r3, #0
 800e248:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	885b      	ldrh	r3, [r3, #2]
 800e24e:	b2da      	uxtb	r2, r3
 800e250:	4b4e      	ldr	r3, [pc, #312]	@ (800e38c <USBD_SetConfig+0x150>)
 800e252:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e254:	4b4d      	ldr	r3, [pc, #308]	@ (800e38c <USBD_SetConfig+0x150>)
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d905      	bls.n	800e268 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e25c:	6839      	ldr	r1, [r7, #0]
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f000 f985 	bl	800e56e <USBD_CtlError>
    return USBD_FAIL;
 800e264:	2303      	movs	r3, #3
 800e266:	e08c      	b.n	800e382 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	2b02      	cmp	r3, #2
 800e272:	d002      	beq.n	800e27a <USBD_SetConfig+0x3e>
 800e274:	2b03      	cmp	r3, #3
 800e276:	d029      	beq.n	800e2cc <USBD_SetConfig+0x90>
 800e278:	e075      	b.n	800e366 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e27a:	4b44      	ldr	r3, [pc, #272]	@ (800e38c <USBD_SetConfig+0x150>)
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d020      	beq.n	800e2c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e282:	4b42      	ldr	r3, [pc, #264]	@ (800e38c <USBD_SetConfig+0x150>)
 800e284:	781b      	ldrb	r3, [r3, #0]
 800e286:	461a      	mov	r2, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e28c:	4b3f      	ldr	r3, [pc, #252]	@ (800e38c <USBD_SetConfig+0x150>)
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	4619      	mov	r1, r3
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7fe ffb9 	bl	800d20a <USBD_SetClassConfig>
 800e298:	4603      	mov	r3, r0
 800e29a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e29c:	7bfb      	ldrb	r3, [r7, #15]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d008      	beq.n	800e2b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e2a2:	6839      	ldr	r1, [r7, #0]
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 f962 	bl	800e56e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2202      	movs	r2, #2
 800e2ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e2b2:	e065      	b.n	800e380 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f000 fa31 	bl	800e71c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2203      	movs	r2, #3
 800e2be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e2c2:	e05d      	b.n	800e380 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 fa29 	bl	800e71c <USBD_CtlSendStatus>
      break;
 800e2ca:	e059      	b.n	800e380 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e2cc:	4b2f      	ldr	r3, [pc, #188]	@ (800e38c <USBD_SetConfig+0x150>)
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d112      	bne.n	800e2fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2202      	movs	r2, #2
 800e2d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e2dc:	4b2b      	ldr	r3, [pc, #172]	@ (800e38c <USBD_SetConfig+0x150>)
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e2e6:	4b29      	ldr	r3, [pc, #164]	@ (800e38c <USBD_SetConfig+0x150>)
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f7fe ffa8 	bl	800d242 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 fa12 	bl	800e71c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e2f8:	e042      	b.n	800e380 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e2fa:	4b24      	ldr	r3, [pc, #144]	@ (800e38c <USBD_SetConfig+0x150>)
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	461a      	mov	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	429a      	cmp	r2, r3
 800e306:	d02a      	beq.n	800e35e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	685b      	ldr	r3, [r3, #4]
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	4619      	mov	r1, r3
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f7fe ff96 	bl	800d242 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e316:	4b1d      	ldr	r3, [pc, #116]	@ (800e38c <USBD_SetConfig+0x150>)
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	461a      	mov	r2, r3
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e320:	4b1a      	ldr	r3, [pc, #104]	@ (800e38c <USBD_SetConfig+0x150>)
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	4619      	mov	r1, r3
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f7fe ff6f 	bl	800d20a <USBD_SetClassConfig>
 800e32c:	4603      	mov	r3, r0
 800e32e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e330:	7bfb      	ldrb	r3, [r7, #15]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00f      	beq.n	800e356 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e336:	6839      	ldr	r1, [r7, #0]
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f000 f918 	bl	800e56e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	b2db      	uxtb	r3, r3
 800e344:	4619      	mov	r1, r3
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f7fe ff7b 	bl	800d242 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2202      	movs	r2, #2
 800e350:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e354:	e014      	b.n	800e380 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 f9e0 	bl	800e71c <USBD_CtlSendStatus>
      break;
 800e35c:	e010      	b.n	800e380 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 f9dc 	bl	800e71c <USBD_CtlSendStatus>
      break;
 800e364:	e00c      	b.n	800e380 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e366:	6839      	ldr	r1, [r7, #0]
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f000 f900 	bl	800e56e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e36e:	4b07      	ldr	r3, [pc, #28]	@ (800e38c <USBD_SetConfig+0x150>)
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	4619      	mov	r1, r3
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f7fe ff64 	bl	800d242 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e37a:	2303      	movs	r3, #3
 800e37c:	73fb      	strb	r3, [r7, #15]
      break;
 800e37e:	bf00      	nop
  }

  return ret;
 800e380:	7bfb      	ldrb	r3, [r7, #15]
}
 800e382:	4618      	mov	r0, r3
 800e384:	3710      	adds	r7, #16
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	24000c30 	.word	0x24000c30

0800e390 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	88db      	ldrh	r3, [r3, #6]
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d004      	beq.n	800e3ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e3a2:	6839      	ldr	r1, [r7, #0]
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f000 f8e2 	bl	800e56e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e3aa:	e023      	b.n	800e3f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	2b02      	cmp	r3, #2
 800e3b6:	dc02      	bgt.n	800e3be <USBD_GetConfig+0x2e>
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	dc03      	bgt.n	800e3c4 <USBD_GetConfig+0x34>
 800e3bc:	e015      	b.n	800e3ea <USBD_GetConfig+0x5a>
 800e3be:	2b03      	cmp	r3, #3
 800e3c0:	d00b      	beq.n	800e3da <USBD_GetConfig+0x4a>
 800e3c2:	e012      	b.n	800e3ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	3308      	adds	r3, #8
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 f948 	bl	800e668 <USBD_CtlSendData>
        break;
 800e3d8:	e00c      	b.n	800e3f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	3304      	adds	r3, #4
 800e3de:	2201      	movs	r2, #1
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 f940 	bl	800e668 <USBD_CtlSendData>
        break;
 800e3e8:	e004      	b.n	800e3f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e3ea:	6839      	ldr	r1, [r7, #0]
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 f8be 	bl	800e56e <USBD_CtlError>
        break;
 800e3f2:	bf00      	nop
}
 800e3f4:	bf00      	nop
 800e3f6:	3708      	adds	r7, #8
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	3b01      	subs	r3, #1
 800e410:	2b02      	cmp	r3, #2
 800e412:	d81e      	bhi.n	800e452 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	88db      	ldrh	r3, [r3, #6]
 800e418:	2b02      	cmp	r3, #2
 800e41a:	d004      	beq.n	800e426 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e41c:	6839      	ldr	r1, [r7, #0]
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 f8a5 	bl	800e56e <USBD_CtlError>
        break;
 800e424:	e01a      	b.n	800e45c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2201      	movs	r2, #1
 800e42a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e432:	2b00      	cmp	r3, #0
 800e434:	d005      	beq.n	800e442 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	68db      	ldr	r3, [r3, #12]
 800e43a:	f043 0202 	orr.w	r2, r3, #2
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	330c      	adds	r3, #12
 800e446:	2202      	movs	r2, #2
 800e448:	4619      	mov	r1, r3
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 f90c 	bl	800e668 <USBD_CtlSendData>
      break;
 800e450:	e004      	b.n	800e45c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e452:	6839      	ldr	r1, [r7, #0]
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 f88a 	bl	800e56e <USBD_CtlError>
      break;
 800e45a:	bf00      	nop
  }
}
 800e45c:	bf00      	nop
 800e45e:	3708      	adds	r7, #8
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	885b      	ldrh	r3, [r3, #2]
 800e472:	2b01      	cmp	r3, #1
 800e474:	d107      	bne.n	800e486 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2201      	movs	r2, #1
 800e47a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 f94c 	bl	800e71c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e484:	e013      	b.n	800e4ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	885b      	ldrh	r3, [r3, #2]
 800e48a:	2b02      	cmp	r3, #2
 800e48c:	d10b      	bne.n	800e4a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	889b      	ldrh	r3, [r3, #4]
 800e492:	0a1b      	lsrs	r3, r3, #8
 800e494:	b29b      	uxth	r3, r3
 800e496:	b2da      	uxtb	r2, r3
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f000 f93c 	bl	800e71c <USBD_CtlSendStatus>
}
 800e4a4:	e003      	b.n	800e4ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e4a6:	6839      	ldr	r1, [r7, #0]
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f000 f860 	bl	800e56e <USBD_CtlError>
}
 800e4ae:	bf00      	nop
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b082      	sub	sp, #8
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
 800e4be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4c6:	b2db      	uxtb	r3, r3
 800e4c8:	3b01      	subs	r3, #1
 800e4ca:	2b02      	cmp	r3, #2
 800e4cc:	d80b      	bhi.n	800e4e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	885b      	ldrh	r3, [r3, #2]
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d10c      	bne.n	800e4f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 f91c 	bl	800e71c <USBD_CtlSendStatus>
      }
      break;
 800e4e4:	e004      	b.n	800e4f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e4e6:	6839      	ldr	r1, [r7, #0]
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f000 f840 	bl	800e56e <USBD_CtlError>
      break;
 800e4ee:	e000      	b.n	800e4f2 <USBD_ClrFeature+0x3c>
      break;
 800e4f0:	bf00      	nop
  }
}
 800e4f2:	bf00      	nop
 800e4f4:	3708      	adds	r7, #8
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}

0800e4fa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e4fa:	b580      	push	{r7, lr}
 800e4fc:	b084      	sub	sp, #16
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
 800e502:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	781a      	ldrb	r2, [r3, #0]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	3301      	adds	r3, #1
 800e514:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	781a      	ldrb	r2, [r3, #0]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	3301      	adds	r3, #1
 800e522:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e524:	68f8      	ldr	r0, [r7, #12]
 800e526:	f7ff fa16 	bl	800d956 <SWAPBYTE>
 800e52a:	4603      	mov	r3, r0
 800e52c:	461a      	mov	r2, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	3301      	adds	r3, #1
 800e536:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	3301      	adds	r3, #1
 800e53c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e53e:	68f8      	ldr	r0, [r7, #12]
 800e540:	f7ff fa09 	bl	800d956 <SWAPBYTE>
 800e544:	4603      	mov	r3, r0
 800e546:	461a      	mov	r2, r3
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	3301      	adds	r3, #1
 800e550:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	3301      	adds	r3, #1
 800e556:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e558:	68f8      	ldr	r0, [r7, #12]
 800e55a:	f7ff f9fc 	bl	800d956 <SWAPBYTE>
 800e55e:	4603      	mov	r3, r0
 800e560:	461a      	mov	r2, r3
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	80da      	strh	r2, [r3, #6]
}
 800e566:	bf00      	nop
 800e568:	3710      	adds	r7, #16
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}

0800e56e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e56e:	b580      	push	{r7, lr}
 800e570:	b082      	sub	sp, #8
 800e572:	af00      	add	r7, sp, #0
 800e574:	6078      	str	r0, [r7, #4]
 800e576:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e578:	2180      	movs	r1, #128	@ 0x80
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f003 fd44 	bl	8012008 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e580:	2100      	movs	r1, #0
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f003 fd40 	bl	8012008 <USBD_LL_StallEP>
}
 800e588:	bf00      	nop
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b086      	sub	sp, #24
 800e594:	af00      	add	r7, sp, #0
 800e596:	60f8      	str	r0, [r7, #12]
 800e598:	60b9      	str	r1, [r7, #8]
 800e59a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e59c:	2300      	movs	r3, #0
 800e59e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d042      	beq.n	800e62c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e5aa:	6938      	ldr	r0, [r7, #16]
 800e5ac:	f000 f842 	bl	800e634 <USBD_GetLen>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	005b      	lsls	r3, r3, #1
 800e5b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e5ba:	d808      	bhi.n	800e5ce <USBD_GetString+0x3e>
 800e5bc:	6938      	ldr	r0, [r7, #16]
 800e5be:	f000 f839 	bl	800e634 <USBD_GetLen>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	005b      	lsls	r3, r3, #1
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	e001      	b.n	800e5d2 <USBD_GetString+0x42>
 800e5ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e5d6:	7dfb      	ldrb	r3, [r7, #23]
 800e5d8:	68ba      	ldr	r2, [r7, #8]
 800e5da:	4413      	add	r3, r2
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	7812      	ldrb	r2, [r2, #0]
 800e5e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e5e2:	7dfb      	ldrb	r3, [r7, #23]
 800e5e4:	3301      	adds	r3, #1
 800e5e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e5e8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ea:	68ba      	ldr	r2, [r7, #8]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	2203      	movs	r2, #3
 800e5f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e5f2:	7dfb      	ldrb	r3, [r7, #23]
 800e5f4:	3301      	adds	r3, #1
 800e5f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e5f8:	e013      	b.n	800e622 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e5fa:	7dfb      	ldrb	r3, [r7, #23]
 800e5fc:	68ba      	ldr	r2, [r7, #8]
 800e5fe:	4413      	add	r3, r2
 800e600:	693a      	ldr	r2, [r7, #16]
 800e602:	7812      	ldrb	r2, [r2, #0]
 800e604:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	3301      	adds	r3, #1
 800e60a:	613b      	str	r3, [r7, #16]
    idx++;
 800e60c:	7dfb      	ldrb	r3, [r7, #23]
 800e60e:	3301      	adds	r3, #1
 800e610:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e612:	7dfb      	ldrb	r3, [r7, #23]
 800e614:	68ba      	ldr	r2, [r7, #8]
 800e616:	4413      	add	r3, r2
 800e618:	2200      	movs	r2, #0
 800e61a:	701a      	strb	r2, [r3, #0]
    idx++;
 800e61c:	7dfb      	ldrb	r3, [r7, #23]
 800e61e:	3301      	adds	r3, #1
 800e620:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d1e7      	bne.n	800e5fa <USBD_GetString+0x6a>
 800e62a:	e000      	b.n	800e62e <USBD_GetString+0x9e>
    return;
 800e62c:	bf00      	nop
  }
}
 800e62e:	3718      	adds	r7, #24
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e634:	b480      	push	{r7}
 800e636:	b085      	sub	sp, #20
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e63c:	2300      	movs	r3, #0
 800e63e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e644:	e005      	b.n	800e652 <USBD_GetLen+0x1e>
  {
    len++;
 800e646:	7bfb      	ldrb	r3, [r7, #15]
 800e648:	3301      	adds	r3, #1
 800e64a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	3301      	adds	r3, #1
 800e650:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1f5      	bne.n	800e646 <USBD_GetLen+0x12>
  }

  return len;
 800e65a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3714      	adds	r7, #20
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr

0800e668 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b084      	sub	sp, #16
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	60f8      	str	r0, [r7, #12]
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2202      	movs	r2, #2
 800e678:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	68ba      	ldr	r2, [r7, #8]
 800e68c:	2100      	movs	r1, #0
 800e68e:	68f8      	ldr	r0, [r7, #12]
 800e690:	f003 fd43 	bl	801211a <USBD_LL_Transmit>

  return USBD_OK;
 800e694:	2300      	movs	r3, #0
}
 800e696:	4618      	mov	r0, r3
 800e698:	3710      	adds	r7, #16
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b084      	sub	sp, #16
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	60f8      	str	r0, [r7, #12]
 800e6a6:	60b9      	str	r1, [r7, #8]
 800e6a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	68ba      	ldr	r2, [r7, #8]
 800e6ae:	2100      	movs	r1, #0
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	f003 fd32 	bl	801211a <USBD_LL_Transmit>

  return USBD_OK;
 800e6b6:	2300      	movs	r3, #0
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3710      	adds	r7, #16
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2203      	movs	r2, #3
 800e6d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	687a      	ldr	r2, [r7, #4]
 800e6d8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	68ba      	ldr	r2, [r7, #8]
 800e6e8:	2100      	movs	r1, #0
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f003 fd36 	bl	801215c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6f0:	2300      	movs	r3, #0
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3710      	adds	r7, #16
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}

0800e6fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e6fa:	b580      	push	{r7, lr}
 800e6fc:	b084      	sub	sp, #16
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	60f8      	str	r0, [r7, #12]
 800e702:	60b9      	str	r1, [r7, #8]
 800e704:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	68ba      	ldr	r2, [r7, #8]
 800e70a:	2100      	movs	r1, #0
 800e70c:	68f8      	ldr	r0, [r7, #12]
 800e70e:	f003 fd25 	bl	801215c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e712:	2300      	movs	r3, #0
}
 800e714:	4618      	mov	r0, r3
 800e716:	3710      	adds	r7, #16
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2204      	movs	r2, #4
 800e728:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e72c:	2300      	movs	r3, #0
 800e72e:	2200      	movs	r2, #0
 800e730:	2100      	movs	r1, #0
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f003 fcf1 	bl	801211a <USBD_LL_Transmit>

  return USBD_OK;
 800e738:	2300      	movs	r3, #0
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3708      	adds	r7, #8
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}

0800e742 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e742:	b580      	push	{r7, lr}
 800e744:	b082      	sub	sp, #8
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2205      	movs	r2, #5
 800e74e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e752:	2300      	movs	r3, #0
 800e754:	2200      	movs	r2, #0
 800e756:	2100      	movs	r1, #0
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f003 fcff 	bl	801215c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e75e:	2300      	movs	r3, #0
}
 800e760:	4618      	mov	r0, r3
 800e762:	3708      	adds	r7, #8
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}

0800e768 <__NVIC_SetPriority>:
{
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	4603      	mov	r3, r0
 800e770:	6039      	str	r1, [r7, #0]
 800e772:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e774:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	db0a      	blt.n	800e792 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	b2da      	uxtb	r2, r3
 800e780:	490c      	ldr	r1, [pc, #48]	@ (800e7b4 <__NVIC_SetPriority+0x4c>)
 800e782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e786:	0112      	lsls	r2, r2, #4
 800e788:	b2d2      	uxtb	r2, r2
 800e78a:	440b      	add	r3, r1
 800e78c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800e790:	e00a      	b.n	800e7a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	b2da      	uxtb	r2, r3
 800e796:	4908      	ldr	r1, [pc, #32]	@ (800e7b8 <__NVIC_SetPriority+0x50>)
 800e798:	88fb      	ldrh	r3, [r7, #6]
 800e79a:	f003 030f 	and.w	r3, r3, #15
 800e79e:	3b04      	subs	r3, #4
 800e7a0:	0112      	lsls	r2, r2, #4
 800e7a2:	b2d2      	uxtb	r2, r2
 800e7a4:	440b      	add	r3, r1
 800e7a6:	761a      	strb	r2, [r3, #24]
}
 800e7a8:	bf00      	nop
 800e7aa:	370c      	adds	r7, #12
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b2:	4770      	bx	lr
 800e7b4:	e000e100 	.word	0xe000e100
 800e7b8:	e000ed00 	.word	0xe000ed00

0800e7bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e7c0:	4b05      	ldr	r3, [pc, #20]	@ (800e7d8 <SysTick_Handler+0x1c>)
 800e7c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e7c4:	f001 feaa 	bl	801051c <xTaskGetSchedulerState>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	d001      	beq.n	800e7d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e7ce:	f002 fda3 	bl	8011318 <xPortSysTickHandler>
  }
}
 800e7d2:	bf00      	nop
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	e000e010 	.word	0xe000e010

0800e7dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e7e0:	2100      	movs	r1, #0
 800e7e2:	f06f 0004 	mvn.w	r0, #4
 800e7e6:	f7ff ffbf 	bl	800e768 <__NVIC_SetPriority>
#endif
}
 800e7ea:	bf00      	nop
 800e7ec:	bd80      	pop	{r7, pc}
	...

0800e7f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e7f0:	b480      	push	{r7}
 800e7f2:	b083      	sub	sp, #12
 800e7f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7f6:	f3ef 8305 	mrs	r3, IPSR
 800e7fa:	603b      	str	r3, [r7, #0]
  return(result);
 800e7fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d003      	beq.n	800e80a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e802:	f06f 0305 	mvn.w	r3, #5
 800e806:	607b      	str	r3, [r7, #4]
 800e808:	e00c      	b.n	800e824 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e80a:	4b0a      	ldr	r3, [pc, #40]	@ (800e834 <osKernelInitialize+0x44>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d105      	bne.n	800e81e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e812:	4b08      	ldr	r3, [pc, #32]	@ (800e834 <osKernelInitialize+0x44>)
 800e814:	2201      	movs	r2, #1
 800e816:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e818:	2300      	movs	r3, #0
 800e81a:	607b      	str	r3, [r7, #4]
 800e81c:	e002      	b.n	800e824 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e81e:	f04f 33ff 	mov.w	r3, #4294967295
 800e822:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e824:	687b      	ldr	r3, [r7, #4]
}
 800e826:	4618      	mov	r0, r3
 800e828:	370c      	adds	r7, #12
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr
 800e832:	bf00      	nop
 800e834:	24000c34 	.word	0x24000c34

0800e838 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e83e:	f3ef 8305 	mrs	r3, IPSR
 800e842:	603b      	str	r3, [r7, #0]
  return(result);
 800e844:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e846:	2b00      	cmp	r3, #0
 800e848:	d003      	beq.n	800e852 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e84a:	f06f 0305 	mvn.w	r3, #5
 800e84e:	607b      	str	r3, [r7, #4]
 800e850:	e010      	b.n	800e874 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e852:	4b0b      	ldr	r3, [pc, #44]	@ (800e880 <osKernelStart+0x48>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2b01      	cmp	r3, #1
 800e858:	d109      	bne.n	800e86e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e85a:	f7ff ffbf 	bl	800e7dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e85e:	4b08      	ldr	r3, [pc, #32]	@ (800e880 <osKernelStart+0x48>)
 800e860:	2202      	movs	r2, #2
 800e862:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e864:	f001 f9f6 	bl	800fc54 <vTaskStartScheduler>
      stat = osOK;
 800e868:	2300      	movs	r3, #0
 800e86a:	607b      	str	r3, [r7, #4]
 800e86c:	e002      	b.n	800e874 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e86e:	f04f 33ff 	mov.w	r3, #4294967295
 800e872:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e874:	687b      	ldr	r3, [r7, #4]
}
 800e876:	4618      	mov	r0, r3
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	24000c34 	.word	0x24000c34

0800e884 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e884:	b580      	push	{r7, lr}
 800e886:	b08e      	sub	sp, #56	@ 0x38
 800e888:	af04      	add	r7, sp, #16
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e890:	2300      	movs	r3, #0
 800e892:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e894:	f3ef 8305 	mrs	r3, IPSR
 800e898:	617b      	str	r3, [r7, #20]
  return(result);
 800e89a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d17e      	bne.n	800e99e <osThreadNew+0x11a>
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d07b      	beq.n	800e99e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e8a6:	2380      	movs	r3, #128	@ 0x80
 800e8a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e8aa:	2318      	movs	r3, #24
 800e8ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800e8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d045      	beq.n	800e94a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d002      	beq.n	800e8cc <osThreadNew+0x48>
        name = attr->name;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	699b      	ldr	r3, [r3, #24]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d002      	beq.n	800e8da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	699b      	ldr	r3, [r3, #24]
 800e8d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d008      	beq.n	800e8f2 <osThreadNew+0x6e>
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	2b38      	cmp	r3, #56	@ 0x38
 800e8e4:	d805      	bhi.n	800e8f2 <osThreadNew+0x6e>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	f003 0301 	and.w	r3, r3, #1
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d001      	beq.n	800e8f6 <osThreadNew+0x72>
        return (NULL);
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	e054      	b.n	800e9a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	695b      	ldr	r3, [r3, #20]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d003      	beq.n	800e906 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	695b      	ldr	r3, [r3, #20]
 800e902:	089b      	lsrs	r3, r3, #2
 800e904:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	689b      	ldr	r3, [r3, #8]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d00e      	beq.n	800e92c <osThreadNew+0xa8>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	2ba7      	cmp	r3, #167	@ 0xa7
 800e914:	d90a      	bls.n	800e92c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d006      	beq.n	800e92c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	695b      	ldr	r3, [r3, #20]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d002      	beq.n	800e92c <osThreadNew+0xa8>
        mem = 1;
 800e926:	2301      	movs	r3, #1
 800e928:	61bb      	str	r3, [r7, #24]
 800e92a:	e010      	b.n	800e94e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d10c      	bne.n	800e94e <osThreadNew+0xca>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d108      	bne.n	800e94e <osThreadNew+0xca>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	691b      	ldr	r3, [r3, #16]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d104      	bne.n	800e94e <osThreadNew+0xca>
          mem = 0;
 800e944:	2300      	movs	r3, #0
 800e946:	61bb      	str	r3, [r7, #24]
 800e948:	e001      	b.n	800e94e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e94a:	2300      	movs	r3, #0
 800e94c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e94e:	69bb      	ldr	r3, [r7, #24]
 800e950:	2b01      	cmp	r3, #1
 800e952:	d110      	bne.n	800e976 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e95c:	9202      	str	r2, [sp, #8]
 800e95e:	9301      	str	r3, [sp, #4]
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	9300      	str	r3, [sp, #0]
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	6a3a      	ldr	r2, [r7, #32]
 800e968:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e96a:	68f8      	ldr	r0, [r7, #12]
 800e96c:	f000 ff7e 	bl	800f86c <xTaskCreateStatic>
 800e970:	4603      	mov	r3, r0
 800e972:	613b      	str	r3, [r7, #16]
 800e974:	e013      	b.n	800e99e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e976:	69bb      	ldr	r3, [r7, #24]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d110      	bne.n	800e99e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e97c:	6a3b      	ldr	r3, [r7, #32]
 800e97e:	b29a      	uxth	r2, r3
 800e980:	f107 0310 	add.w	r3, r7, #16
 800e984:	9301      	str	r3, [sp, #4]
 800e986:	69fb      	ldr	r3, [r7, #28]
 800e988:	9300      	str	r3, [sp, #0]
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e98e:	68f8      	ldr	r0, [r7, #12]
 800e990:	f000 ffcc 	bl	800f92c <xTaskCreate>
 800e994:	4603      	mov	r3, r0
 800e996:	2b01      	cmp	r3, #1
 800e998:	d001      	beq.n	800e99e <osThreadNew+0x11a>
            hTask = NULL;
 800e99a:	2300      	movs	r3, #0
 800e99c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e99e:	693b      	ldr	r3, [r7, #16]
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3728      	adds	r7, #40	@ 0x28
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9b0:	f3ef 8305 	mrs	r3, IPSR
 800e9b4:	60bb      	str	r3, [r7, #8]
  return(result);
 800e9b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d003      	beq.n	800e9c4 <osDelay+0x1c>
    stat = osErrorISR;
 800e9bc:	f06f 0305 	mvn.w	r3, #5
 800e9c0:	60fb      	str	r3, [r7, #12]
 800e9c2:	e007      	b.n	800e9d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d002      	beq.n	800e9d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f001 f90a 	bl	800fbe8 <vTaskDelay>
    }
  }

  return (stat);
 800e9d4:	68fb      	ldr	r3, [r7, #12]
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3710      	adds	r7, #16
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
	...

0800e9e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e9e0:	b480      	push	{r7}
 800e9e2:	b085      	sub	sp, #20
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	60f8      	str	r0, [r7, #12]
 800e9e8:	60b9      	str	r1, [r7, #8]
 800e9ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	4a07      	ldr	r2, [pc, #28]	@ (800ea0c <vApplicationGetIdleTaskMemory+0x2c>)
 800e9f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	4a06      	ldr	r2, [pc, #24]	@ (800ea10 <vApplicationGetIdleTaskMemory+0x30>)
 800e9f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2280      	movs	r2, #128	@ 0x80
 800e9fc:	601a      	str	r2, [r3, #0]
}
 800e9fe:	bf00      	nop
 800ea00:	3714      	adds	r7, #20
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop
 800ea0c:	24000c38 	.word	0x24000c38
 800ea10:	24000ce0 	.word	0x24000ce0

0800ea14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ea14:	b480      	push	{r7}
 800ea16:	b085      	sub	sp, #20
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	4a07      	ldr	r2, [pc, #28]	@ (800ea40 <vApplicationGetTimerTaskMemory+0x2c>)
 800ea24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	4a06      	ldr	r2, [pc, #24]	@ (800ea44 <vApplicationGetTimerTaskMemory+0x30>)
 800ea2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ea32:	601a      	str	r2, [r3, #0]
}
 800ea34:	bf00      	nop
 800ea36:	3714      	adds	r7, #20
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr
 800ea40:	24000ee0 	.word	0x24000ee0
 800ea44:	24000f88 	.word	0x24000f88

0800ea48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f103 0208 	add.w	r2, r3, #8
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f103 0208 	add.w	r2, r3, #8
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f103 0208 	add.w	r2, r3, #8
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ea7c:	bf00      	nop
 800ea7e:	370c      	adds	r7, #12
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr

0800ea88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2200      	movs	r2, #0
 800ea94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ea96:	bf00      	nop
 800ea98:	370c      	adds	r7, #12
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr

0800eaa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eaa2:	b480      	push	{r7}
 800eaa4:	b085      	sub	sp, #20
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
 800eaaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	689a      	ldr	r2, [r3, #8]
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	689b      	ldr	r3, [r3, #8]
 800eac4:	683a      	ldr	r2, [r7, #0]
 800eac6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	683a      	ldr	r2, [r7, #0]
 800eacc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	687a      	ldr	r2, [r7, #4]
 800ead2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	1c5a      	adds	r2, r3, #1
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	601a      	str	r2, [r3, #0]
}
 800eade:	bf00      	nop
 800eae0:	3714      	adds	r7, #20
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr

0800eaea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eaea:	b480      	push	{r7}
 800eaec:	b085      	sub	sp, #20
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
 800eaf2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb00:	d103      	bne.n	800eb0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	691b      	ldr	r3, [r3, #16]
 800eb06:	60fb      	str	r3, [r7, #12]
 800eb08:	e00c      	b.n	800eb24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	3308      	adds	r3, #8
 800eb0e:	60fb      	str	r3, [r7, #12]
 800eb10:	e002      	b.n	800eb18 <vListInsert+0x2e>
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	60fb      	str	r3, [r7, #12]
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	685b      	ldr	r3, [r3, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	68ba      	ldr	r2, [r7, #8]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d2f6      	bcs.n	800eb12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	685a      	ldr	r2, [r3, #4]
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	683a      	ldr	r2, [r7, #0]
 800eb32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	68fa      	ldr	r2, [r7, #12]
 800eb38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	683a      	ldr	r2, [r7, #0]
 800eb3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	1c5a      	adds	r2, r3, #1
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	601a      	str	r2, [r3, #0]
}
 800eb50:	bf00      	nop
 800eb52:	3714      	adds	r7, #20
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b085      	sub	sp, #20
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	687a      	ldr	r2, [r7, #4]
 800eb70:	6892      	ldr	r2, [r2, #8]
 800eb72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	6852      	ldr	r2, [r2, #4]
 800eb7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	687a      	ldr	r2, [r7, #4]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d103      	bne.n	800eb90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	689a      	ldr	r2, [r3, #8]
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2200      	movs	r2, #0
 800eb94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	1e5a      	subs	r2, r3, #1
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3714      	adds	r7, #20
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d10b      	bne.n	800ebdc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ebc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebc8:	f383 8811 	msr	BASEPRI, r3
 800ebcc:	f3bf 8f6f 	isb	sy
 800ebd0:	f3bf 8f4f 	dsb	sy
 800ebd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ebd6:	bf00      	nop
 800ebd8:	bf00      	nop
 800ebda:	e7fd      	b.n	800ebd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ebdc:	f002 fb0c 	bl	80111f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681a      	ldr	r2, [r3, #0]
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebe8:	68f9      	ldr	r1, [r7, #12]
 800ebea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ebec:	fb01 f303 	mul.w	r3, r1, r3
 800ebf0:	441a      	add	r2, r3
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec0c:	3b01      	subs	r3, #1
 800ec0e:	68f9      	ldr	r1, [r7, #12]
 800ec10:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ec12:	fb01 f303 	mul.w	r3, r1, r3
 800ec16:	441a      	add	r2, r3
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	22ff      	movs	r2, #255	@ 0xff
 800ec20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	22ff      	movs	r2, #255	@ 0xff
 800ec28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d114      	bne.n	800ec5c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	691b      	ldr	r3, [r3, #16]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d01a      	beq.n	800ec70 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	3310      	adds	r3, #16
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f001 faa6 	bl	8010190 <xTaskRemoveFromEventList>
 800ec44:	4603      	mov	r3, r0
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d012      	beq.n	800ec70 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ec4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ec80 <xQueueGenericReset+0xd0>)
 800ec4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec50:	601a      	str	r2, [r3, #0]
 800ec52:	f3bf 8f4f 	dsb	sy
 800ec56:	f3bf 8f6f 	isb	sy
 800ec5a:	e009      	b.n	800ec70 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	3310      	adds	r3, #16
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7ff fef1 	bl	800ea48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	3324      	adds	r3, #36	@ 0x24
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7ff feec 	bl	800ea48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ec70:	f002 faf4 	bl	801125c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ec74:	2301      	movs	r3, #1
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3710      	adds	r7, #16
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	e000ed04 	.word	0xe000ed04

0800ec84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b08e      	sub	sp, #56	@ 0x38
 800ec88:	af02      	add	r7, sp, #8
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	607a      	str	r2, [r7, #4]
 800ec90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d10b      	bne.n	800ecb0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ec98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec9c:	f383 8811 	msr	BASEPRI, r3
 800eca0:	f3bf 8f6f 	isb	sy
 800eca4:	f3bf 8f4f 	dsb	sy
 800eca8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ecaa:	bf00      	nop
 800ecac:	bf00      	nop
 800ecae:	e7fd      	b.n	800ecac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d10b      	bne.n	800ecce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ecb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecba:	f383 8811 	msr	BASEPRI, r3
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ecc8:	bf00      	nop
 800ecca:	bf00      	nop
 800eccc:	e7fd      	b.n	800ecca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d002      	beq.n	800ecda <xQueueGenericCreateStatic+0x56>
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d001      	beq.n	800ecde <xQueueGenericCreateStatic+0x5a>
 800ecda:	2301      	movs	r3, #1
 800ecdc:	e000      	b.n	800ece0 <xQueueGenericCreateStatic+0x5c>
 800ecde:	2300      	movs	r3, #0
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d10b      	bne.n	800ecfc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ece4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ece8:	f383 8811 	msr	BASEPRI, r3
 800ecec:	f3bf 8f6f 	isb	sy
 800ecf0:	f3bf 8f4f 	dsb	sy
 800ecf4:	623b      	str	r3, [r7, #32]
}
 800ecf6:	bf00      	nop
 800ecf8:	bf00      	nop
 800ecfa:	e7fd      	b.n	800ecf8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d102      	bne.n	800ed08 <xQueueGenericCreateStatic+0x84>
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d101      	bne.n	800ed0c <xQueueGenericCreateStatic+0x88>
 800ed08:	2301      	movs	r3, #1
 800ed0a:	e000      	b.n	800ed0e <xQueueGenericCreateStatic+0x8a>
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d10b      	bne.n	800ed2a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ed12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed16:	f383 8811 	msr	BASEPRI, r3
 800ed1a:	f3bf 8f6f 	isb	sy
 800ed1e:	f3bf 8f4f 	dsb	sy
 800ed22:	61fb      	str	r3, [r7, #28]
}
 800ed24:	bf00      	nop
 800ed26:	bf00      	nop
 800ed28:	e7fd      	b.n	800ed26 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ed2a:	2350      	movs	r3, #80	@ 0x50
 800ed2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	2b50      	cmp	r3, #80	@ 0x50
 800ed32:	d00b      	beq.n	800ed4c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ed34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed38:	f383 8811 	msr	BASEPRI, r3
 800ed3c:	f3bf 8f6f 	isb	sy
 800ed40:	f3bf 8f4f 	dsb	sy
 800ed44:	61bb      	str	r3, [r7, #24]
}
 800ed46:	bf00      	nop
 800ed48:	bf00      	nop
 800ed4a:	e7fd      	b.n	800ed48 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ed4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ed52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d00d      	beq.n	800ed74 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ed58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ed60:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ed64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed66:	9300      	str	r3, [sp, #0]
 800ed68:	4613      	mov	r3, r2
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	68b9      	ldr	r1, [r7, #8]
 800ed6e:	68f8      	ldr	r0, [r7, #12]
 800ed70:	f000 f840 	bl	800edf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ed74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3730      	adds	r7, #48	@ 0x30
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}

0800ed7e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ed7e:	b580      	push	{r7, lr}
 800ed80:	b08a      	sub	sp, #40	@ 0x28
 800ed82:	af02      	add	r7, sp, #8
 800ed84:	60f8      	str	r0, [r7, #12]
 800ed86:	60b9      	str	r1, [r7, #8]
 800ed88:	4613      	mov	r3, r2
 800ed8a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d10b      	bne.n	800edaa <xQueueGenericCreate+0x2c>
	__asm volatile
 800ed92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed96:	f383 8811 	msr	BASEPRI, r3
 800ed9a:	f3bf 8f6f 	isb	sy
 800ed9e:	f3bf 8f4f 	dsb	sy
 800eda2:	613b      	str	r3, [r7, #16]
}
 800eda4:	bf00      	nop
 800eda6:	bf00      	nop
 800eda8:	e7fd      	b.n	800eda6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	68ba      	ldr	r2, [r7, #8]
 800edae:	fb02 f303 	mul.w	r3, r2, r3
 800edb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	3350      	adds	r3, #80	@ 0x50
 800edb8:	4618      	mov	r0, r3
 800edba:	f002 fb3f 	bl	801143c <pvPortMalloc>
 800edbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d011      	beq.n	800edea <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	3350      	adds	r3, #80	@ 0x50
 800edce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800edd0:	69bb      	ldr	r3, [r7, #24]
 800edd2:	2200      	movs	r2, #0
 800edd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800edd8:	79fa      	ldrb	r2, [r7, #7]
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	9300      	str	r3, [sp, #0]
 800edde:	4613      	mov	r3, r2
 800ede0:	697a      	ldr	r2, [r7, #20]
 800ede2:	68b9      	ldr	r1, [r7, #8]
 800ede4:	68f8      	ldr	r0, [r7, #12]
 800ede6:	f000 f805 	bl	800edf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800edea:	69bb      	ldr	r3, [r7, #24]
	}
 800edec:	4618      	mov	r0, r3
 800edee:	3720      	adds	r7, #32
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b084      	sub	sp, #16
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	60f8      	str	r0, [r7, #12]
 800edfc:	60b9      	str	r1, [r7, #8]
 800edfe:	607a      	str	r2, [r7, #4]
 800ee00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d103      	bne.n	800ee10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ee08:	69bb      	ldr	r3, [r7, #24]
 800ee0a:	69ba      	ldr	r2, [r7, #24]
 800ee0c:	601a      	str	r2, [r3, #0]
 800ee0e:	e002      	b.n	800ee16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ee10:	69bb      	ldr	r3, [r7, #24]
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	68ba      	ldr	r2, [r7, #8]
 800ee20:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ee22:	2101      	movs	r1, #1
 800ee24:	69b8      	ldr	r0, [r7, #24]
 800ee26:	f7ff fec3 	bl	800ebb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ee2a:	69bb      	ldr	r3, [r7, #24]
 800ee2c:	78fa      	ldrb	r2, [r7, #3]
 800ee2e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ee32:	bf00      	nop
 800ee34:	3710      	adds	r7, #16
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
	...

0800ee3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b08e      	sub	sp, #56	@ 0x38
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	60f8      	str	r0, [r7, #12]
 800ee44:	60b9      	str	r1, [r7, #8]
 800ee46:	607a      	str	r2, [r7, #4]
 800ee48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ee52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d10b      	bne.n	800ee70 <xQueueGenericSend+0x34>
	__asm volatile
 800ee58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee5c:	f383 8811 	msr	BASEPRI, r3
 800ee60:	f3bf 8f6f 	isb	sy
 800ee64:	f3bf 8f4f 	dsb	sy
 800ee68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ee6a:	bf00      	nop
 800ee6c:	bf00      	nop
 800ee6e:	e7fd      	b.n	800ee6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d103      	bne.n	800ee7e <xQueueGenericSend+0x42>
 800ee76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d101      	bne.n	800ee82 <xQueueGenericSend+0x46>
 800ee7e:	2301      	movs	r3, #1
 800ee80:	e000      	b.n	800ee84 <xQueueGenericSend+0x48>
 800ee82:	2300      	movs	r3, #0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d10b      	bne.n	800eea0 <xQueueGenericSend+0x64>
	__asm volatile
 800ee88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee8c:	f383 8811 	msr	BASEPRI, r3
 800ee90:	f3bf 8f6f 	isb	sy
 800ee94:	f3bf 8f4f 	dsb	sy
 800ee98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ee9a:	bf00      	nop
 800ee9c:	bf00      	nop
 800ee9e:	e7fd      	b.n	800ee9c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	2b02      	cmp	r3, #2
 800eea4:	d103      	bne.n	800eeae <xQueueGenericSend+0x72>
 800eea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eeaa:	2b01      	cmp	r3, #1
 800eeac:	d101      	bne.n	800eeb2 <xQueueGenericSend+0x76>
 800eeae:	2301      	movs	r3, #1
 800eeb0:	e000      	b.n	800eeb4 <xQueueGenericSend+0x78>
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d10b      	bne.n	800eed0 <xQueueGenericSend+0x94>
	__asm volatile
 800eeb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eebc:	f383 8811 	msr	BASEPRI, r3
 800eec0:	f3bf 8f6f 	isb	sy
 800eec4:	f3bf 8f4f 	dsb	sy
 800eec8:	623b      	str	r3, [r7, #32]
}
 800eeca:	bf00      	nop
 800eecc:	bf00      	nop
 800eece:	e7fd      	b.n	800eecc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eed0:	f001 fb24 	bl	801051c <xTaskGetSchedulerState>
 800eed4:	4603      	mov	r3, r0
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d102      	bne.n	800eee0 <xQueueGenericSend+0xa4>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d101      	bne.n	800eee4 <xQueueGenericSend+0xa8>
 800eee0:	2301      	movs	r3, #1
 800eee2:	e000      	b.n	800eee6 <xQueueGenericSend+0xaa>
 800eee4:	2300      	movs	r3, #0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d10b      	bne.n	800ef02 <xQueueGenericSend+0xc6>
	__asm volatile
 800eeea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeee:	f383 8811 	msr	BASEPRI, r3
 800eef2:	f3bf 8f6f 	isb	sy
 800eef6:	f3bf 8f4f 	dsb	sy
 800eefa:	61fb      	str	r3, [r7, #28]
}
 800eefc:	bf00      	nop
 800eefe:	bf00      	nop
 800ef00:	e7fd      	b.n	800eefe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef02:	f002 f979 	bl	80111f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d302      	bcc.n	800ef18 <xQueueGenericSend+0xdc>
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	2b02      	cmp	r3, #2
 800ef16:	d129      	bne.n	800ef6c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef18:	683a      	ldr	r2, [r7, #0]
 800ef1a:	68b9      	ldr	r1, [r7, #8]
 800ef1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ef1e:	f000 fb37 	bl	800f590 <prvCopyDataToQueue>
 800ef22:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d010      	beq.n	800ef4e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef2e:	3324      	adds	r3, #36	@ 0x24
 800ef30:	4618      	mov	r0, r3
 800ef32:	f001 f92d 	bl	8010190 <xTaskRemoveFromEventList>
 800ef36:	4603      	mov	r3, r0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d013      	beq.n	800ef64 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ef3c:	4b3f      	ldr	r3, [pc, #252]	@ (800f03c <xQueueGenericSend+0x200>)
 800ef3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef42:	601a      	str	r2, [r3, #0]
 800ef44:	f3bf 8f4f 	dsb	sy
 800ef48:	f3bf 8f6f 	isb	sy
 800ef4c:	e00a      	b.n	800ef64 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ef4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d007      	beq.n	800ef64 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ef54:	4b39      	ldr	r3, [pc, #228]	@ (800f03c <xQueueGenericSend+0x200>)
 800ef56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef5a:	601a      	str	r2, [r3, #0]
 800ef5c:	f3bf 8f4f 	dsb	sy
 800ef60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ef64:	f002 f97a 	bl	801125c <vPortExitCritical>
				return pdPASS;
 800ef68:	2301      	movs	r3, #1
 800ef6a:	e063      	b.n	800f034 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d103      	bne.n	800ef7a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef72:	f002 f973 	bl	801125c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ef76:	2300      	movs	r3, #0
 800ef78:	e05c      	b.n	800f034 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d106      	bne.n	800ef8e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef80:	f107 0314 	add.w	r3, r7, #20
 800ef84:	4618      	mov	r0, r3
 800ef86:	f001 f967 	bl	8010258 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef8e:	f002 f965 	bl	801125c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef92:	f000 fecf 	bl	800fd34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef96:	f002 f92f 	bl	80111f8 <vPortEnterCritical>
 800ef9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800efa0:	b25b      	sxtb	r3, r3
 800efa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa6:	d103      	bne.n	800efb0 <xQueueGenericSend+0x174>
 800efa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efaa:	2200      	movs	r2, #0
 800efac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800efb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800efb6:	b25b      	sxtb	r3, r3
 800efb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efbc:	d103      	bne.n	800efc6 <xQueueGenericSend+0x18a>
 800efbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efc0:	2200      	movs	r2, #0
 800efc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800efc6:	f002 f949 	bl	801125c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800efca:	1d3a      	adds	r2, r7, #4
 800efcc:	f107 0314 	add.w	r3, r7, #20
 800efd0:	4611      	mov	r1, r2
 800efd2:	4618      	mov	r0, r3
 800efd4:	f001 f956 	bl	8010284 <xTaskCheckForTimeOut>
 800efd8:	4603      	mov	r3, r0
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d124      	bne.n	800f028 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800efde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800efe0:	f000 fbce 	bl	800f780 <prvIsQueueFull>
 800efe4:	4603      	mov	r3, r0
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d018      	beq.n	800f01c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800efea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efec:	3310      	adds	r3, #16
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	4611      	mov	r1, r2
 800eff2:	4618      	mov	r0, r3
 800eff4:	f001 f87a 	bl	80100ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eff8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800effa:	f000 fb59 	bl	800f6b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800effe:	f000 fea7 	bl	800fd50 <xTaskResumeAll>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	f47f af7c 	bne.w	800ef02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f00a:	4b0c      	ldr	r3, [pc, #48]	@ (800f03c <xQueueGenericSend+0x200>)
 800f00c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f010:	601a      	str	r2, [r3, #0]
 800f012:	f3bf 8f4f 	dsb	sy
 800f016:	f3bf 8f6f 	isb	sy
 800f01a:	e772      	b.n	800ef02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f01c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f01e:	f000 fb47 	bl	800f6b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f022:	f000 fe95 	bl	800fd50 <xTaskResumeAll>
 800f026:	e76c      	b.n	800ef02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f028:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f02a:	f000 fb41 	bl	800f6b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f02e:	f000 fe8f 	bl	800fd50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f032:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f034:	4618      	mov	r0, r3
 800f036:	3738      	adds	r7, #56	@ 0x38
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	e000ed04 	.word	0xe000ed04

0800f040 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b090      	sub	sp, #64	@ 0x40
 800f044:	af00      	add	r7, sp, #0
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	607a      	str	r2, [r7, #4]
 800f04c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800f052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f054:	2b00      	cmp	r3, #0
 800f056:	d10b      	bne.n	800f070 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800f058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f05c:	f383 8811 	msr	BASEPRI, r3
 800f060:	f3bf 8f6f 	isb	sy
 800f064:	f3bf 8f4f 	dsb	sy
 800f068:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f06a:	bf00      	nop
 800f06c:	bf00      	nop
 800f06e:	e7fd      	b.n	800f06c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d103      	bne.n	800f07e <xQueueGenericSendFromISR+0x3e>
 800f076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d101      	bne.n	800f082 <xQueueGenericSendFromISR+0x42>
 800f07e:	2301      	movs	r3, #1
 800f080:	e000      	b.n	800f084 <xQueueGenericSendFromISR+0x44>
 800f082:	2300      	movs	r3, #0
 800f084:	2b00      	cmp	r3, #0
 800f086:	d10b      	bne.n	800f0a0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800f088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f08c:	f383 8811 	msr	BASEPRI, r3
 800f090:	f3bf 8f6f 	isb	sy
 800f094:	f3bf 8f4f 	dsb	sy
 800f098:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f09a:	bf00      	nop
 800f09c:	bf00      	nop
 800f09e:	e7fd      	b.n	800f09c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	2b02      	cmp	r3, #2
 800f0a4:	d103      	bne.n	800f0ae <xQueueGenericSendFromISR+0x6e>
 800f0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d101      	bne.n	800f0b2 <xQueueGenericSendFromISR+0x72>
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e000      	b.n	800f0b4 <xQueueGenericSendFromISR+0x74>
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d10b      	bne.n	800f0d0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800f0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0bc:	f383 8811 	msr	BASEPRI, r3
 800f0c0:	f3bf 8f6f 	isb	sy
 800f0c4:	f3bf 8f4f 	dsb	sy
 800f0c8:	623b      	str	r3, [r7, #32]
}
 800f0ca:	bf00      	nop
 800f0cc:	bf00      	nop
 800f0ce:	e7fd      	b.n	800f0cc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f0d0:	f002 f972 	bl	80113b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f0d4:	f3ef 8211 	mrs	r2, BASEPRI
 800f0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0dc:	f383 8811 	msr	BASEPRI, r3
 800f0e0:	f3bf 8f6f 	isb	sy
 800f0e4:	f3bf 8f4f 	dsb	sy
 800f0e8:	61fa      	str	r2, [r7, #28]
 800f0ea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f0ec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0ee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d302      	bcc.n	800f102 <xQueueGenericSendFromISR+0xc2>
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	2b02      	cmp	r3, #2
 800f100:	d12f      	bne.n	800f162 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f104:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f108:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f10e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f110:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f112:	683a      	ldr	r2, [r7, #0]
 800f114:	68b9      	ldr	r1, [r7, #8]
 800f116:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f118:	f000 fa3a 	bl	800f590 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f11c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f120:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f124:	d112      	bne.n	800f14c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d016      	beq.n	800f15c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f130:	3324      	adds	r3, #36	@ 0x24
 800f132:	4618      	mov	r0, r3
 800f134:	f001 f82c 	bl	8010190 <xTaskRemoveFromEventList>
 800f138:	4603      	mov	r3, r0
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d00e      	beq.n	800f15c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d00b      	beq.n	800f15c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2201      	movs	r2, #1
 800f148:	601a      	str	r2, [r3, #0]
 800f14a:	e007      	b.n	800f15c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f14c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f150:	3301      	adds	r3, #1
 800f152:	b2db      	uxtb	r3, r3
 800f154:	b25a      	sxtb	r2, r3
 800f156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f15c:	2301      	movs	r3, #1
 800f15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800f160:	e001      	b.n	800f166 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f162:	2300      	movs	r3, #0
 800f164:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f168:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f170:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f174:	4618      	mov	r0, r3
 800f176:	3740      	adds	r7, #64	@ 0x40
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b08c      	sub	sp, #48	@ 0x30
 800f180:	af00      	add	r7, sp, #0
 800f182:	60f8      	str	r0, [r7, #12]
 800f184:	60b9      	str	r1, [r7, #8]
 800f186:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f188:	2300      	movs	r3, #0
 800f18a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f192:	2b00      	cmp	r3, #0
 800f194:	d10b      	bne.n	800f1ae <xQueueReceive+0x32>
	__asm volatile
 800f196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f19a:	f383 8811 	msr	BASEPRI, r3
 800f19e:	f3bf 8f6f 	isb	sy
 800f1a2:	f3bf 8f4f 	dsb	sy
 800f1a6:	623b      	str	r3, [r7, #32]
}
 800f1a8:	bf00      	nop
 800f1aa:	bf00      	nop
 800f1ac:	e7fd      	b.n	800f1aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d103      	bne.n	800f1bc <xQueueReceive+0x40>
 800f1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d101      	bne.n	800f1c0 <xQueueReceive+0x44>
 800f1bc:	2301      	movs	r3, #1
 800f1be:	e000      	b.n	800f1c2 <xQueueReceive+0x46>
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d10b      	bne.n	800f1de <xQueueReceive+0x62>
	__asm volatile
 800f1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ca:	f383 8811 	msr	BASEPRI, r3
 800f1ce:	f3bf 8f6f 	isb	sy
 800f1d2:	f3bf 8f4f 	dsb	sy
 800f1d6:	61fb      	str	r3, [r7, #28]
}
 800f1d8:	bf00      	nop
 800f1da:	bf00      	nop
 800f1dc:	e7fd      	b.n	800f1da <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f1de:	f001 f99d 	bl	801051c <xTaskGetSchedulerState>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d102      	bne.n	800f1ee <xQueueReceive+0x72>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d101      	bne.n	800f1f2 <xQueueReceive+0x76>
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e000      	b.n	800f1f4 <xQueueReceive+0x78>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d10b      	bne.n	800f210 <xQueueReceive+0x94>
	__asm volatile
 800f1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1fc:	f383 8811 	msr	BASEPRI, r3
 800f200:	f3bf 8f6f 	isb	sy
 800f204:	f3bf 8f4f 	dsb	sy
 800f208:	61bb      	str	r3, [r7, #24]
}
 800f20a:	bf00      	nop
 800f20c:	bf00      	nop
 800f20e:	e7fd      	b.n	800f20c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f210:	f001 fff2 	bl	80111f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f218:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d01f      	beq.n	800f260 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f220:	68b9      	ldr	r1, [r7, #8]
 800f222:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f224:	f000 fa1e 	bl	800f664 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f22a:	1e5a      	subs	r2, r3, #1
 800f22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f22e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f232:	691b      	ldr	r3, [r3, #16]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d00f      	beq.n	800f258 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f23a:	3310      	adds	r3, #16
 800f23c:	4618      	mov	r0, r3
 800f23e:	f000 ffa7 	bl	8010190 <xTaskRemoveFromEventList>
 800f242:	4603      	mov	r3, r0
 800f244:	2b00      	cmp	r3, #0
 800f246:	d007      	beq.n	800f258 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f248:	4b3c      	ldr	r3, [pc, #240]	@ (800f33c <xQueueReceive+0x1c0>)
 800f24a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f24e:	601a      	str	r2, [r3, #0]
 800f250:	f3bf 8f4f 	dsb	sy
 800f254:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f258:	f002 f800 	bl	801125c <vPortExitCritical>
				return pdPASS;
 800f25c:	2301      	movs	r3, #1
 800f25e:	e069      	b.n	800f334 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d103      	bne.n	800f26e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f266:	f001 fff9 	bl	801125c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f26a:	2300      	movs	r3, #0
 800f26c:	e062      	b.n	800f334 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f270:	2b00      	cmp	r3, #0
 800f272:	d106      	bne.n	800f282 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f274:	f107 0310 	add.w	r3, r7, #16
 800f278:	4618      	mov	r0, r3
 800f27a:	f000 ffed 	bl	8010258 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f27e:	2301      	movs	r3, #1
 800f280:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f282:	f001 ffeb 	bl	801125c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f286:	f000 fd55 	bl	800fd34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f28a:	f001 ffb5 	bl	80111f8 <vPortEnterCritical>
 800f28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f290:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f294:	b25b      	sxtb	r3, r3
 800f296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f29a:	d103      	bne.n	800f2a4 <xQueueReceive+0x128>
 800f29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f29e:	2200      	movs	r2, #0
 800f2a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f2aa:	b25b      	sxtb	r3, r3
 800f2ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2b0:	d103      	bne.n	800f2ba <xQueueReceive+0x13e>
 800f2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f2ba:	f001 ffcf 	bl	801125c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f2be:	1d3a      	adds	r2, r7, #4
 800f2c0:	f107 0310 	add.w	r3, r7, #16
 800f2c4:	4611      	mov	r1, r2
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f000 ffdc 	bl	8010284 <xTaskCheckForTimeOut>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d123      	bne.n	800f31a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f2d4:	f000 fa3e 	bl	800f754 <prvIsQueueEmpty>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d017      	beq.n	800f30e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2e0:	3324      	adds	r3, #36	@ 0x24
 800f2e2:	687a      	ldr	r2, [r7, #4]
 800f2e4:	4611      	mov	r1, r2
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f000 ff00 	bl	80100ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f2ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f2ee:	f000 f9df 	bl	800f6b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f2f2:	f000 fd2d 	bl	800fd50 <xTaskResumeAll>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d189      	bne.n	800f210 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f2fc:	4b0f      	ldr	r3, [pc, #60]	@ (800f33c <xQueueReceive+0x1c0>)
 800f2fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f302:	601a      	str	r2, [r3, #0]
 800f304:	f3bf 8f4f 	dsb	sy
 800f308:	f3bf 8f6f 	isb	sy
 800f30c:	e780      	b.n	800f210 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f30e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f310:	f000 f9ce 	bl	800f6b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f314:	f000 fd1c 	bl	800fd50 <xTaskResumeAll>
 800f318:	e77a      	b.n	800f210 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f31a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f31c:	f000 f9c8 	bl	800f6b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f320:	f000 fd16 	bl	800fd50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f324:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f326:	f000 fa15 	bl	800f754 <prvIsQueueEmpty>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	f43f af6f 	beq.w	800f210 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f332:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f334:	4618      	mov	r0, r3
 800f336:	3730      	adds	r7, #48	@ 0x30
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	e000ed04 	.word	0xe000ed04

0800f340 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b08e      	sub	sp, #56	@ 0x38
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f34a:	2300      	movs	r3, #0
 800f34c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f352:	2300      	movs	r3, #0
 800f354:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d10b      	bne.n	800f374 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800f35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f360:	f383 8811 	msr	BASEPRI, r3
 800f364:	f3bf 8f6f 	isb	sy
 800f368:	f3bf 8f4f 	dsb	sy
 800f36c:	623b      	str	r3, [r7, #32]
}
 800f36e:	bf00      	nop
 800f370:	bf00      	nop
 800f372:	e7fd      	b.n	800f370 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d00b      	beq.n	800f394 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800f37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f380:	f383 8811 	msr	BASEPRI, r3
 800f384:	f3bf 8f6f 	isb	sy
 800f388:	f3bf 8f4f 	dsb	sy
 800f38c:	61fb      	str	r3, [r7, #28]
}
 800f38e:	bf00      	nop
 800f390:	bf00      	nop
 800f392:	e7fd      	b.n	800f390 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f394:	f001 f8c2 	bl	801051c <xTaskGetSchedulerState>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d102      	bne.n	800f3a4 <xQueueSemaphoreTake+0x64>
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d101      	bne.n	800f3a8 <xQueueSemaphoreTake+0x68>
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	e000      	b.n	800f3aa <xQueueSemaphoreTake+0x6a>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d10b      	bne.n	800f3c6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800f3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3b2:	f383 8811 	msr	BASEPRI, r3
 800f3b6:	f3bf 8f6f 	isb	sy
 800f3ba:	f3bf 8f4f 	dsb	sy
 800f3be:	61bb      	str	r3, [r7, #24]
}
 800f3c0:	bf00      	nop
 800f3c2:	bf00      	nop
 800f3c4:	e7fd      	b.n	800f3c2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f3c6:	f001 ff17 	bl	80111f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3ce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d024      	beq.n	800f420 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d8:	1e5a      	subs	r2, r3, #1
 800f3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3dc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d104      	bne.n	800f3f0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f3e6:	f001 fa13 	bl	8010810 <pvTaskIncrementMutexHeldCount>
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f2:	691b      	ldr	r3, [r3, #16]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d00f      	beq.n	800f418 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3fa:	3310      	adds	r3, #16
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f000 fec7 	bl	8010190 <xTaskRemoveFromEventList>
 800f402:	4603      	mov	r3, r0
 800f404:	2b00      	cmp	r3, #0
 800f406:	d007      	beq.n	800f418 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f408:	4b54      	ldr	r3, [pc, #336]	@ (800f55c <xQueueSemaphoreTake+0x21c>)
 800f40a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f40e:	601a      	str	r2, [r3, #0]
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f418:	f001 ff20 	bl	801125c <vPortExitCritical>
				return pdPASS;
 800f41c:	2301      	movs	r3, #1
 800f41e:	e098      	b.n	800f552 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d112      	bne.n	800f44c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d00b      	beq.n	800f444 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800f42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f430:	f383 8811 	msr	BASEPRI, r3
 800f434:	f3bf 8f6f 	isb	sy
 800f438:	f3bf 8f4f 	dsb	sy
 800f43c:	617b      	str	r3, [r7, #20]
}
 800f43e:	bf00      	nop
 800f440:	bf00      	nop
 800f442:	e7fd      	b.n	800f440 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f444:	f001 ff0a 	bl	801125c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f448:	2300      	movs	r3, #0
 800f44a:	e082      	b.n	800f552 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d106      	bne.n	800f460 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f452:	f107 030c 	add.w	r3, r7, #12
 800f456:	4618      	mov	r0, r3
 800f458:	f000 fefe 	bl	8010258 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f45c:	2301      	movs	r3, #1
 800f45e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f460:	f001 fefc 	bl	801125c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f464:	f000 fc66 	bl	800fd34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f468:	f001 fec6 	bl	80111f8 <vPortEnterCritical>
 800f46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f46e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f472:	b25b      	sxtb	r3, r3
 800f474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f478:	d103      	bne.n	800f482 <xQueueSemaphoreTake+0x142>
 800f47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f47c:	2200      	movs	r2, #0
 800f47e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f484:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f488:	b25b      	sxtb	r3, r3
 800f48a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f48e:	d103      	bne.n	800f498 <xQueueSemaphoreTake+0x158>
 800f490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f492:	2200      	movs	r2, #0
 800f494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f498:	f001 fee0 	bl	801125c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f49c:	463a      	mov	r2, r7
 800f49e:	f107 030c 	add.w	r3, r7, #12
 800f4a2:	4611      	mov	r1, r2
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f000 feed 	bl	8010284 <xTaskCheckForTimeOut>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d132      	bne.n	800f516 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f4b2:	f000 f94f 	bl	800f754 <prvIsQueueEmpty>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d026      	beq.n	800f50a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d109      	bne.n	800f4d8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800f4c4:	f001 fe98 	bl	80111f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ca:	689b      	ldr	r3, [r3, #8]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f001 f843 	bl	8010558 <xTaskPriorityInherit>
 800f4d2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800f4d4:	f001 fec2 	bl	801125c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4da:	3324      	adds	r3, #36	@ 0x24
 800f4dc:	683a      	ldr	r2, [r7, #0]
 800f4de:	4611      	mov	r1, r2
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f000 fe03 	bl	80100ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f4e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f4e8:	f000 f8e2 	bl	800f6b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f4ec:	f000 fc30 	bl	800fd50 <xTaskResumeAll>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	f47f af67 	bne.w	800f3c6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800f4f8:	4b18      	ldr	r3, [pc, #96]	@ (800f55c <xQueueSemaphoreTake+0x21c>)
 800f4fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4fe:	601a      	str	r2, [r3, #0]
 800f500:	f3bf 8f4f 	dsb	sy
 800f504:	f3bf 8f6f 	isb	sy
 800f508:	e75d      	b.n	800f3c6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f50a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f50c:	f000 f8d0 	bl	800f6b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f510:	f000 fc1e 	bl	800fd50 <xTaskResumeAll>
 800f514:	e757      	b.n	800f3c6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f516:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f518:	f000 f8ca 	bl	800f6b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f51c:	f000 fc18 	bl	800fd50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f520:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f522:	f000 f917 	bl	800f754 <prvIsQueueEmpty>
 800f526:	4603      	mov	r3, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	f43f af4c 	beq.w	800f3c6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f530:	2b00      	cmp	r3, #0
 800f532:	d00d      	beq.n	800f550 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800f534:	f001 fe60 	bl	80111f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f538:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f53a:	f000 f811 	bl	800f560 <prvGetDisinheritPriorityAfterTimeout>
 800f53e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f542:	689b      	ldr	r3, [r3, #8]
 800f544:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f546:	4618      	mov	r0, r3
 800f548:	f001 f8de 	bl	8010708 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f54c:	f001 fe86 	bl	801125c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f550:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f552:	4618      	mov	r0, r3
 800f554:	3738      	adds	r7, #56	@ 0x38
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	e000ed04 	.word	0xe000ed04

0800f560 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f560:	b480      	push	{r7}
 800f562:	b085      	sub	sp, #20
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d006      	beq.n	800f57e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800f57a:	60fb      	str	r3, [r7, #12]
 800f57c:	e001      	b.n	800f582 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f57e:	2300      	movs	r3, #0
 800f580:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f582:	68fb      	ldr	r3, [r7, #12]
	}
 800f584:	4618      	mov	r0, r3
 800f586:	3714      	adds	r7, #20
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr

0800f590 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b086      	sub	sp, #24
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f59c:	2300      	movs	r3, #0
 800f59e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d10d      	bne.n	800f5ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d14d      	bne.n	800f652 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	689b      	ldr	r3, [r3, #8]
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f001 f834 	bl	8010628 <xTaskPriorityDisinherit>
 800f5c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	609a      	str	r2, [r3, #8]
 800f5c8:	e043      	b.n	800f652 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d119      	bne.n	800f604 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	6858      	ldr	r0, [r3, #4]
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5d8:	461a      	mov	r2, r3
 800f5da:	68b9      	ldr	r1, [r7, #8]
 800f5dc:	f002 feba 	bl	8012354 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	685a      	ldr	r2, [r3, #4]
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5e8:	441a      	add	r2, r3
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	685a      	ldr	r2, [r3, #4]
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	689b      	ldr	r3, [r3, #8]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d32b      	bcc.n	800f652 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681a      	ldr	r2, [r3, #0]
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	605a      	str	r2, [r3, #4]
 800f602:	e026      	b.n	800f652 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	68d8      	ldr	r0, [r3, #12]
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f60c:	461a      	mov	r2, r3
 800f60e:	68b9      	ldr	r1, [r7, #8]
 800f610:	f002 fea0 	bl	8012354 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	68da      	ldr	r2, [r3, #12]
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f61c:	425b      	negs	r3, r3
 800f61e:	441a      	add	r2, r3
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	68da      	ldr	r2, [r3, #12]
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d207      	bcs.n	800f640 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	689a      	ldr	r2, [r3, #8]
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f638:	425b      	negs	r3, r3
 800f63a:	441a      	add	r2, r3
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2b02      	cmp	r3, #2
 800f644:	d105      	bne.n	800f652 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d002      	beq.n	800f652 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	3b01      	subs	r3, #1
 800f650:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	1c5a      	adds	r2, r3, #1
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f65a:	697b      	ldr	r3, [r7, #20]
}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3718      	adds	r7, #24
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f672:	2b00      	cmp	r3, #0
 800f674:	d018      	beq.n	800f6a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	68da      	ldr	r2, [r3, #12]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f67e:	441a      	add	r2, r3
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	68da      	ldr	r2, [r3, #12]
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	689b      	ldr	r3, [r3, #8]
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d303      	bcc.n	800f698 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681a      	ldr	r2, [r3, #0]
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	68d9      	ldr	r1, [r3, #12]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	6838      	ldr	r0, [r7, #0]
 800f6a4:	f002 fe56 	bl	8012354 <memcpy>
	}
}
 800f6a8:	bf00      	nop
 800f6aa:	3708      	adds	r7, #8
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}

0800f6b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b084      	sub	sp, #16
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f6b8:	f001 fd9e 	bl	80111f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f6c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f6c4:	e011      	b.n	800f6ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d012      	beq.n	800f6f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	3324      	adds	r3, #36	@ 0x24
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f000 fd5c 	bl	8010190 <xTaskRemoveFromEventList>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d001      	beq.n	800f6e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f6de:	f000 fe35 	bl	801034c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f6e2:	7bfb      	ldrb	r3, [r7, #15]
 800f6e4:	3b01      	subs	r3, #1
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f6ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	dce9      	bgt.n	800f6c6 <prvUnlockQueue+0x16>
 800f6f2:	e000      	b.n	800f6f6 <prvUnlockQueue+0x46>
					break;
 800f6f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	22ff      	movs	r2, #255	@ 0xff
 800f6fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f6fe:	f001 fdad 	bl	801125c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f702:	f001 fd79 	bl	80111f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f70c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f70e:	e011      	b.n	800f734 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	691b      	ldr	r3, [r3, #16]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d012      	beq.n	800f73e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	3310      	adds	r3, #16
 800f71c:	4618      	mov	r0, r3
 800f71e:	f000 fd37 	bl	8010190 <xTaskRemoveFromEventList>
 800f722:	4603      	mov	r3, r0
 800f724:	2b00      	cmp	r3, #0
 800f726:	d001      	beq.n	800f72c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f728:	f000 fe10 	bl	801034c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f72c:	7bbb      	ldrb	r3, [r7, #14]
 800f72e:	3b01      	subs	r3, #1
 800f730:	b2db      	uxtb	r3, r3
 800f732:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f734:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	dce9      	bgt.n	800f710 <prvUnlockQueue+0x60>
 800f73c:	e000      	b.n	800f740 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f73e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	22ff      	movs	r2, #255	@ 0xff
 800f744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f748:	f001 fd88 	bl	801125c <vPortExitCritical>
}
 800f74c:	bf00      	nop
 800f74e:	3710      	adds	r7, #16
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b084      	sub	sp, #16
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f75c:	f001 fd4c 	bl	80111f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f764:	2b00      	cmp	r3, #0
 800f766:	d102      	bne.n	800f76e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f768:	2301      	movs	r3, #1
 800f76a:	60fb      	str	r3, [r7, #12]
 800f76c:	e001      	b.n	800f772 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f76e:	2300      	movs	r3, #0
 800f770:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f772:	f001 fd73 	bl	801125c <vPortExitCritical>

	return xReturn;
 800f776:	68fb      	ldr	r3, [r7, #12]
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3710      	adds	r7, #16
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b084      	sub	sp, #16
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f788:	f001 fd36 	bl	80111f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f794:	429a      	cmp	r2, r3
 800f796:	d102      	bne.n	800f79e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f798:	2301      	movs	r3, #1
 800f79a:	60fb      	str	r3, [r7, #12]
 800f79c:	e001      	b.n	800f7a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f7a2:	f001 fd5b 	bl	801125c <vPortExitCritical>

	return xReturn;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3710      	adds	r7, #16
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b085      	sub	sp, #20
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	60fb      	str	r3, [r7, #12]
 800f7be:	e014      	b.n	800f7ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f7c0:	4a0f      	ldr	r2, [pc, #60]	@ (800f800 <vQueueAddToRegistry+0x50>)
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d10b      	bne.n	800f7e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f7cc:	490c      	ldr	r1, [pc, #48]	@ (800f800 <vQueueAddToRegistry+0x50>)
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	683a      	ldr	r2, [r7, #0]
 800f7d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f7d6:	4a0a      	ldr	r2, [pc, #40]	@ (800f800 <vQueueAddToRegistry+0x50>)
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	00db      	lsls	r3, r3, #3
 800f7dc:	4413      	add	r3, r2
 800f7de:	687a      	ldr	r2, [r7, #4]
 800f7e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f7e2:	e006      	b.n	800f7f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	60fb      	str	r3, [r7, #12]
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	2b07      	cmp	r3, #7
 800f7ee:	d9e7      	bls.n	800f7c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f7f0:	bf00      	nop
 800f7f2:	bf00      	nop
 800f7f4:	3714      	adds	r7, #20
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fc:	4770      	bx	lr
 800f7fe:	bf00      	nop
 800f800:	24001388 	.word	0x24001388

0800f804 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f804:	b580      	push	{r7, lr}
 800f806:	b086      	sub	sp, #24
 800f808:	af00      	add	r7, sp, #0
 800f80a:	60f8      	str	r0, [r7, #12]
 800f80c:	60b9      	str	r1, [r7, #8]
 800f80e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f814:	f001 fcf0 	bl	80111f8 <vPortEnterCritical>
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f81e:	b25b      	sxtb	r3, r3
 800f820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f824:	d103      	bne.n	800f82e <vQueueWaitForMessageRestricted+0x2a>
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	2200      	movs	r2, #0
 800f82a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f834:	b25b      	sxtb	r3, r3
 800f836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f83a:	d103      	bne.n	800f844 <vQueueWaitForMessageRestricted+0x40>
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	2200      	movs	r2, #0
 800f840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f844:	f001 fd0a 	bl	801125c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d106      	bne.n	800f85e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	3324      	adds	r3, #36	@ 0x24
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	68b9      	ldr	r1, [r7, #8]
 800f858:	4618      	mov	r0, r3
 800f85a:	f000 fc6d 	bl	8010138 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f85e:	6978      	ldr	r0, [r7, #20]
 800f860:	f7ff ff26 	bl	800f6b0 <prvUnlockQueue>
	}
 800f864:	bf00      	nop
 800f866:	3718      	adds	r7, #24
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b08e      	sub	sp, #56	@ 0x38
 800f870:	af04      	add	r7, sp, #16
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
 800f878:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f87a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d10b      	bne.n	800f898 <xTaskCreateStatic+0x2c>
	__asm volatile
 800f880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f884:	f383 8811 	msr	BASEPRI, r3
 800f888:	f3bf 8f6f 	isb	sy
 800f88c:	f3bf 8f4f 	dsb	sy
 800f890:	623b      	str	r3, [r7, #32]
}
 800f892:	bf00      	nop
 800f894:	bf00      	nop
 800f896:	e7fd      	b.n	800f894 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d10b      	bne.n	800f8b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800f89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8a2:	f383 8811 	msr	BASEPRI, r3
 800f8a6:	f3bf 8f6f 	isb	sy
 800f8aa:	f3bf 8f4f 	dsb	sy
 800f8ae:	61fb      	str	r3, [r7, #28]
}
 800f8b0:	bf00      	nop
 800f8b2:	bf00      	nop
 800f8b4:	e7fd      	b.n	800f8b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f8b6:	23a8      	movs	r3, #168	@ 0xa8
 800f8b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	2ba8      	cmp	r3, #168	@ 0xa8
 800f8be:	d00b      	beq.n	800f8d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800f8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8c4:	f383 8811 	msr	BASEPRI, r3
 800f8c8:	f3bf 8f6f 	isb	sy
 800f8cc:	f3bf 8f4f 	dsb	sy
 800f8d0:	61bb      	str	r3, [r7, #24]
}
 800f8d2:	bf00      	nop
 800f8d4:	bf00      	nop
 800f8d6:	e7fd      	b.n	800f8d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f8d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d01e      	beq.n	800f91e <xTaskCreateStatic+0xb2>
 800f8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d01b      	beq.n	800f91e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f8ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f2:	2202      	movs	r2, #2
 800f8f4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	9303      	str	r3, [sp, #12]
 800f8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8fe:	9302      	str	r3, [sp, #8]
 800f900:	f107 0314 	add.w	r3, r7, #20
 800f904:	9301      	str	r3, [sp, #4]
 800f906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f908:	9300      	str	r3, [sp, #0]
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	687a      	ldr	r2, [r7, #4]
 800f90e:	68b9      	ldr	r1, [r7, #8]
 800f910:	68f8      	ldr	r0, [r7, #12]
 800f912:	f000 f851 	bl	800f9b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f916:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f918:	f000 f8f6 	bl	800fb08 <prvAddNewTaskToReadyList>
 800f91c:	e001      	b.n	800f922 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f91e:	2300      	movs	r3, #0
 800f920:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f922:	697b      	ldr	r3, [r7, #20]
	}
 800f924:	4618      	mov	r0, r3
 800f926:	3728      	adds	r7, #40	@ 0x28
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b08c      	sub	sp, #48	@ 0x30
 800f930:	af04      	add	r7, sp, #16
 800f932:	60f8      	str	r0, [r7, #12]
 800f934:	60b9      	str	r1, [r7, #8]
 800f936:	603b      	str	r3, [r7, #0]
 800f938:	4613      	mov	r3, r2
 800f93a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f93c:	88fb      	ldrh	r3, [r7, #6]
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	4618      	mov	r0, r3
 800f942:	f001 fd7b 	bl	801143c <pvPortMalloc>
 800f946:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d00e      	beq.n	800f96c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f94e:	20a8      	movs	r0, #168	@ 0xa8
 800f950:	f001 fd74 	bl	801143c <pvPortMalloc>
 800f954:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f956:	69fb      	ldr	r3, [r7, #28]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d003      	beq.n	800f964 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f95c:	69fb      	ldr	r3, [r7, #28]
 800f95e:	697a      	ldr	r2, [r7, #20]
 800f960:	631a      	str	r2, [r3, #48]	@ 0x30
 800f962:	e005      	b.n	800f970 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f964:	6978      	ldr	r0, [r7, #20]
 800f966:	f001 fe37 	bl	80115d8 <vPortFree>
 800f96a:	e001      	b.n	800f970 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f96c:	2300      	movs	r3, #0
 800f96e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f970:	69fb      	ldr	r3, [r7, #28]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d017      	beq.n	800f9a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f976:	69fb      	ldr	r3, [r7, #28]
 800f978:	2200      	movs	r2, #0
 800f97a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f97e:	88fa      	ldrh	r2, [r7, #6]
 800f980:	2300      	movs	r3, #0
 800f982:	9303      	str	r3, [sp, #12]
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	9302      	str	r3, [sp, #8]
 800f988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f98a:	9301      	str	r3, [sp, #4]
 800f98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f98e:	9300      	str	r3, [sp, #0]
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	68b9      	ldr	r1, [r7, #8]
 800f994:	68f8      	ldr	r0, [r7, #12]
 800f996:	f000 f80f 	bl	800f9b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f99a:	69f8      	ldr	r0, [r7, #28]
 800f99c:	f000 f8b4 	bl	800fb08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	61bb      	str	r3, [r7, #24]
 800f9a4:	e002      	b.n	800f9ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f9a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f9ac:	69bb      	ldr	r3, [r7, #24]
	}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3720      	adds	r7, #32
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
	...

0800f9b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b088      	sub	sp, #32
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	60f8      	str	r0, [r7, #12]
 800f9c0:	60b9      	str	r1, [r7, #8]
 800f9c2:	607a      	str	r2, [r7, #4]
 800f9c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9c8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	009b      	lsls	r3, r3, #2
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	21a5      	movs	r1, #165	@ 0xa5
 800f9d2:	f002 fc3b 	bl	801224c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f9da:	6879      	ldr	r1, [r7, #4]
 800f9dc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f9e0:	440b      	add	r3, r1
 800f9e2:	009b      	lsls	r3, r3, #2
 800f9e4:	4413      	add	r3, r2
 800f9e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f9e8:	69bb      	ldr	r3, [r7, #24]
 800f9ea:	f023 0307 	bic.w	r3, r3, #7
 800f9ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f9f0:	69bb      	ldr	r3, [r7, #24]
 800f9f2:	f003 0307 	and.w	r3, r3, #7
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d00b      	beq.n	800fa12 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9fe:	f383 8811 	msr	BASEPRI, r3
 800fa02:	f3bf 8f6f 	isb	sy
 800fa06:	f3bf 8f4f 	dsb	sy
 800fa0a:	617b      	str	r3, [r7, #20]
}
 800fa0c:	bf00      	nop
 800fa0e:	bf00      	nop
 800fa10:	e7fd      	b.n	800fa0e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d01f      	beq.n	800fa58 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fa18:	2300      	movs	r3, #0
 800fa1a:	61fb      	str	r3, [r7, #28]
 800fa1c:	e012      	b.n	800fa44 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fa1e:	68ba      	ldr	r2, [r7, #8]
 800fa20:	69fb      	ldr	r3, [r7, #28]
 800fa22:	4413      	add	r3, r2
 800fa24:	7819      	ldrb	r1, [r3, #0]
 800fa26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	4413      	add	r3, r2
 800fa2c:	3334      	adds	r3, #52	@ 0x34
 800fa2e:	460a      	mov	r2, r1
 800fa30:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fa32:	68ba      	ldr	r2, [r7, #8]
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	4413      	add	r3, r2
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d006      	beq.n	800fa4c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fa3e:	69fb      	ldr	r3, [r7, #28]
 800fa40:	3301      	adds	r3, #1
 800fa42:	61fb      	str	r3, [r7, #28]
 800fa44:	69fb      	ldr	r3, [r7, #28]
 800fa46:	2b0f      	cmp	r3, #15
 800fa48:	d9e9      	bls.n	800fa1e <prvInitialiseNewTask+0x66>
 800fa4a:	e000      	b.n	800fa4e <prvInitialiseNewTask+0x96>
			{
				break;
 800fa4c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fa4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa50:	2200      	movs	r2, #0
 800fa52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fa56:	e003      	b.n	800fa60 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fa58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fa60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa62:	2b37      	cmp	r3, #55	@ 0x37
 800fa64:	d901      	bls.n	800fa6a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fa66:	2337      	movs	r3, #55	@ 0x37
 800fa68:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fa6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa6e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fa70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa74:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fa76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa78:	2200      	movs	r2, #0
 800fa7a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fa7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa7e:	3304      	adds	r3, #4
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7ff f801 	bl	800ea88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fa86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa88:	3318      	adds	r3, #24
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7fe fffc 	bl	800ea88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fa90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa94:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa98:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fa9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa9e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800faa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800faa4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800faa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faa8:	2200      	movs	r2, #0
 800faaa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800faae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fab0:	2200      	movs	r2, #0
 800fab2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fab8:	3354      	adds	r3, #84	@ 0x54
 800faba:	224c      	movs	r2, #76	@ 0x4c
 800fabc:	2100      	movs	r1, #0
 800fabe:	4618      	mov	r0, r3
 800fac0:	f002 fbc4 	bl	801224c <memset>
 800fac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fac6:	4a0d      	ldr	r2, [pc, #52]	@ (800fafc <prvInitialiseNewTask+0x144>)
 800fac8:	659a      	str	r2, [r3, #88]	@ 0x58
 800faca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800facc:	4a0c      	ldr	r2, [pc, #48]	@ (800fb00 <prvInitialiseNewTask+0x148>)
 800face:	65da      	str	r2, [r3, #92]	@ 0x5c
 800fad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fad2:	4a0c      	ldr	r2, [pc, #48]	@ (800fb04 <prvInitialiseNewTask+0x14c>)
 800fad4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fad6:	683a      	ldr	r2, [r7, #0]
 800fad8:	68f9      	ldr	r1, [r7, #12]
 800fada:	69b8      	ldr	r0, [r7, #24]
 800fadc:	f001 fa5a 	bl	8010f94 <pxPortInitialiseStack>
 800fae0:	4602      	mov	r2, r0
 800fae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fae4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d002      	beq.n	800faf2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800faec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800faf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800faf2:	bf00      	nop
 800faf4:	3720      	adds	r7, #32
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	240071fc 	.word	0x240071fc
 800fb00:	24007264 	.word	0x24007264
 800fb04:	240072cc 	.word	0x240072cc

0800fb08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fb10:	f001 fb72 	bl	80111f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fb14:	4b2d      	ldr	r3, [pc, #180]	@ (800fbcc <prvAddNewTaskToReadyList+0xc4>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	4a2c      	ldr	r2, [pc, #176]	@ (800fbcc <prvAddNewTaskToReadyList+0xc4>)
 800fb1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fb1e:	4b2c      	ldr	r3, [pc, #176]	@ (800fbd0 <prvAddNewTaskToReadyList+0xc8>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d109      	bne.n	800fb3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fb26:	4a2a      	ldr	r2, [pc, #168]	@ (800fbd0 <prvAddNewTaskToReadyList+0xc8>)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fb2c:	4b27      	ldr	r3, [pc, #156]	@ (800fbcc <prvAddNewTaskToReadyList+0xc4>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2b01      	cmp	r3, #1
 800fb32:	d110      	bne.n	800fb56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fb34:	f000 fc2e 	bl	8010394 <prvInitialiseTaskLists>
 800fb38:	e00d      	b.n	800fb56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fb3a:	4b26      	ldr	r3, [pc, #152]	@ (800fbd4 <prvAddNewTaskToReadyList+0xcc>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d109      	bne.n	800fb56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fb42:	4b23      	ldr	r3, [pc, #140]	@ (800fbd0 <prvAddNewTaskToReadyList+0xc8>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d802      	bhi.n	800fb56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fb50:	4a1f      	ldr	r2, [pc, #124]	@ (800fbd0 <prvAddNewTaskToReadyList+0xc8>)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fb56:	4b20      	ldr	r3, [pc, #128]	@ (800fbd8 <prvAddNewTaskToReadyList+0xd0>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	4a1e      	ldr	r2, [pc, #120]	@ (800fbd8 <prvAddNewTaskToReadyList+0xd0>)
 800fb5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fb60:	4b1d      	ldr	r3, [pc, #116]	@ (800fbd8 <prvAddNewTaskToReadyList+0xd0>)
 800fb62:	681a      	ldr	r2, [r3, #0]
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb6c:	4b1b      	ldr	r3, [pc, #108]	@ (800fbdc <prvAddNewTaskToReadyList+0xd4>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d903      	bls.n	800fb7c <prvAddNewTaskToReadyList+0x74>
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb78:	4a18      	ldr	r2, [pc, #96]	@ (800fbdc <prvAddNewTaskToReadyList+0xd4>)
 800fb7a:	6013      	str	r3, [r2, #0]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb80:	4613      	mov	r3, r2
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	4413      	add	r3, r2
 800fb86:	009b      	lsls	r3, r3, #2
 800fb88:	4a15      	ldr	r2, [pc, #84]	@ (800fbe0 <prvAddNewTaskToReadyList+0xd8>)
 800fb8a:	441a      	add	r2, r3
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	3304      	adds	r3, #4
 800fb90:	4619      	mov	r1, r3
 800fb92:	4610      	mov	r0, r2
 800fb94:	f7fe ff85 	bl	800eaa2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fb98:	f001 fb60 	bl	801125c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fb9c:	4b0d      	ldr	r3, [pc, #52]	@ (800fbd4 <prvAddNewTaskToReadyList+0xcc>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d00e      	beq.n	800fbc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fba4:	4b0a      	ldr	r3, [pc, #40]	@ (800fbd0 <prvAddNewTaskToReadyList+0xc8>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d207      	bcs.n	800fbc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fbb2:	4b0c      	ldr	r3, [pc, #48]	@ (800fbe4 <prvAddNewTaskToReadyList+0xdc>)
 800fbb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbb8:	601a      	str	r2, [r3, #0]
 800fbba:	f3bf 8f4f 	dsb	sy
 800fbbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fbc2:	bf00      	nop
 800fbc4:	3708      	adds	r7, #8
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}
 800fbca:	bf00      	nop
 800fbcc:	2400189c 	.word	0x2400189c
 800fbd0:	240013c8 	.word	0x240013c8
 800fbd4:	240018a8 	.word	0x240018a8
 800fbd8:	240018b8 	.word	0x240018b8
 800fbdc:	240018a4 	.word	0x240018a4
 800fbe0:	240013cc 	.word	0x240013cc
 800fbe4:	e000ed04 	.word	0xe000ed04

0800fbe8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b084      	sub	sp, #16
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d018      	beq.n	800fc2c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fbfa:	4b14      	ldr	r3, [pc, #80]	@ (800fc4c <vTaskDelay+0x64>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d00b      	beq.n	800fc1a <vTaskDelay+0x32>
	__asm volatile
 800fc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc06:	f383 8811 	msr	BASEPRI, r3
 800fc0a:	f3bf 8f6f 	isb	sy
 800fc0e:	f3bf 8f4f 	dsb	sy
 800fc12:	60bb      	str	r3, [r7, #8]
}
 800fc14:	bf00      	nop
 800fc16:	bf00      	nop
 800fc18:	e7fd      	b.n	800fc16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fc1a:	f000 f88b 	bl	800fd34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fc1e:	2100      	movs	r1, #0
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f000 fe09 	bl	8010838 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fc26:	f000 f893 	bl	800fd50 <xTaskResumeAll>
 800fc2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d107      	bne.n	800fc42 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800fc32:	4b07      	ldr	r3, [pc, #28]	@ (800fc50 <vTaskDelay+0x68>)
 800fc34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc38:	601a      	str	r2, [r3, #0]
 800fc3a:	f3bf 8f4f 	dsb	sy
 800fc3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fc42:	bf00      	nop
 800fc44:	3710      	adds	r7, #16
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	240018c4 	.word	0x240018c4
 800fc50:	e000ed04 	.word	0xe000ed04

0800fc54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b08a      	sub	sp, #40	@ 0x28
 800fc58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fc62:	463a      	mov	r2, r7
 800fc64:	1d39      	adds	r1, r7, #4
 800fc66:	f107 0308 	add.w	r3, r7, #8
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7fe feb8 	bl	800e9e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fc70:	6839      	ldr	r1, [r7, #0]
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	68ba      	ldr	r2, [r7, #8]
 800fc76:	9202      	str	r2, [sp, #8]
 800fc78:	9301      	str	r3, [sp, #4]
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	9300      	str	r3, [sp, #0]
 800fc7e:	2300      	movs	r3, #0
 800fc80:	460a      	mov	r2, r1
 800fc82:	4924      	ldr	r1, [pc, #144]	@ (800fd14 <vTaskStartScheduler+0xc0>)
 800fc84:	4824      	ldr	r0, [pc, #144]	@ (800fd18 <vTaskStartScheduler+0xc4>)
 800fc86:	f7ff fdf1 	bl	800f86c <xTaskCreateStatic>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	4a23      	ldr	r2, [pc, #140]	@ (800fd1c <vTaskStartScheduler+0xc8>)
 800fc8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fc90:	4b22      	ldr	r3, [pc, #136]	@ (800fd1c <vTaskStartScheduler+0xc8>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d002      	beq.n	800fc9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fc98:	2301      	movs	r3, #1
 800fc9a:	617b      	str	r3, [r7, #20]
 800fc9c:	e001      	b.n	800fca2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	d102      	bne.n	800fcae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fca8:	f000 fe1a 	bl	80108e0 <xTimerCreateTimerTask>
 800fcac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d11b      	bne.n	800fcec <vTaskStartScheduler+0x98>
	__asm volatile
 800fcb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcb8:	f383 8811 	msr	BASEPRI, r3
 800fcbc:	f3bf 8f6f 	isb	sy
 800fcc0:	f3bf 8f4f 	dsb	sy
 800fcc4:	613b      	str	r3, [r7, #16]
}
 800fcc6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fcc8:	4b15      	ldr	r3, [pc, #84]	@ (800fd20 <vTaskStartScheduler+0xcc>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	3354      	adds	r3, #84	@ 0x54
 800fcce:	4a15      	ldr	r2, [pc, #84]	@ (800fd24 <vTaskStartScheduler+0xd0>)
 800fcd0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fcd2:	4b15      	ldr	r3, [pc, #84]	@ (800fd28 <vTaskStartScheduler+0xd4>)
 800fcd4:	f04f 32ff 	mov.w	r2, #4294967295
 800fcd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fcda:	4b14      	ldr	r3, [pc, #80]	@ (800fd2c <vTaskStartScheduler+0xd8>)
 800fcdc:	2201      	movs	r2, #1
 800fcde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fce0:	4b13      	ldr	r3, [pc, #76]	@ (800fd30 <vTaskStartScheduler+0xdc>)
 800fce2:	2200      	movs	r2, #0
 800fce4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fce6:	f001 f9e3 	bl	80110b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fcea:	e00f      	b.n	800fd0c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcf2:	d10b      	bne.n	800fd0c <vTaskStartScheduler+0xb8>
	__asm volatile
 800fcf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcf8:	f383 8811 	msr	BASEPRI, r3
 800fcfc:	f3bf 8f6f 	isb	sy
 800fd00:	f3bf 8f4f 	dsb	sy
 800fd04:	60fb      	str	r3, [r7, #12]
}
 800fd06:	bf00      	nop
 800fd08:	bf00      	nop
 800fd0a:	e7fd      	b.n	800fd08 <vTaskStartScheduler+0xb4>
}
 800fd0c:	bf00      	nop
 800fd0e:	3718      	adds	r7, #24
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}
 800fd14:	08012460 	.word	0x08012460
 800fd18:	08010365 	.word	0x08010365
 800fd1c:	240018c0 	.word	0x240018c0
 800fd20:	240013c8 	.word	0x240013c8
 800fd24:	24000108 	.word	0x24000108
 800fd28:	240018bc 	.word	0x240018bc
 800fd2c:	240018a8 	.word	0x240018a8
 800fd30:	240018a0 	.word	0x240018a0

0800fd34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fd34:	b480      	push	{r7}
 800fd36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fd38:	4b04      	ldr	r3, [pc, #16]	@ (800fd4c <vTaskSuspendAll+0x18>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	4a03      	ldr	r2, [pc, #12]	@ (800fd4c <vTaskSuspendAll+0x18>)
 800fd40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fd42:	bf00      	nop
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr
 800fd4c:	240018c4 	.word	0x240018c4

0800fd50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b084      	sub	sp, #16
 800fd54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fd56:	2300      	movs	r3, #0
 800fd58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fd5e:	4b42      	ldr	r3, [pc, #264]	@ (800fe68 <xTaskResumeAll+0x118>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d10b      	bne.n	800fd7e <xTaskResumeAll+0x2e>
	__asm volatile
 800fd66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd6a:	f383 8811 	msr	BASEPRI, r3
 800fd6e:	f3bf 8f6f 	isb	sy
 800fd72:	f3bf 8f4f 	dsb	sy
 800fd76:	603b      	str	r3, [r7, #0]
}
 800fd78:	bf00      	nop
 800fd7a:	bf00      	nop
 800fd7c:	e7fd      	b.n	800fd7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fd7e:	f001 fa3b 	bl	80111f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fd82:	4b39      	ldr	r3, [pc, #228]	@ (800fe68 <xTaskResumeAll+0x118>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	3b01      	subs	r3, #1
 800fd88:	4a37      	ldr	r2, [pc, #220]	@ (800fe68 <xTaskResumeAll+0x118>)
 800fd8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd8c:	4b36      	ldr	r3, [pc, #216]	@ (800fe68 <xTaskResumeAll+0x118>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d162      	bne.n	800fe5a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fd94:	4b35      	ldr	r3, [pc, #212]	@ (800fe6c <xTaskResumeAll+0x11c>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d05e      	beq.n	800fe5a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fd9c:	e02f      	b.n	800fdfe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd9e:	4b34      	ldr	r3, [pc, #208]	@ (800fe70 <xTaskResumeAll+0x120>)
 800fda0:	68db      	ldr	r3, [r3, #12]
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	3318      	adds	r3, #24
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7fe fed6 	bl	800eb5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	3304      	adds	r3, #4
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7fe fed1 	bl	800eb5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdbe:	4b2d      	ldr	r3, [pc, #180]	@ (800fe74 <xTaskResumeAll+0x124>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d903      	bls.n	800fdce <xTaskResumeAll+0x7e>
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdca:	4a2a      	ldr	r2, [pc, #168]	@ (800fe74 <xTaskResumeAll+0x124>)
 800fdcc:	6013      	str	r3, [r2, #0]
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdd2:	4613      	mov	r3, r2
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	4413      	add	r3, r2
 800fdd8:	009b      	lsls	r3, r3, #2
 800fdda:	4a27      	ldr	r2, [pc, #156]	@ (800fe78 <xTaskResumeAll+0x128>)
 800fddc:	441a      	add	r2, r3
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	3304      	adds	r3, #4
 800fde2:	4619      	mov	r1, r3
 800fde4:	4610      	mov	r0, r2
 800fde6:	f7fe fe5c 	bl	800eaa2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdee:	4b23      	ldr	r3, [pc, #140]	@ (800fe7c <xTaskResumeAll+0x12c>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d302      	bcc.n	800fdfe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800fdf8:	4b21      	ldr	r3, [pc, #132]	@ (800fe80 <xTaskResumeAll+0x130>)
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fdfe:	4b1c      	ldr	r3, [pc, #112]	@ (800fe70 <xTaskResumeAll+0x120>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d1cb      	bne.n	800fd9e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d001      	beq.n	800fe10 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fe0c:	f000 fb66 	bl	80104dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fe10:	4b1c      	ldr	r3, [pc, #112]	@ (800fe84 <xTaskResumeAll+0x134>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d010      	beq.n	800fe3e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fe1c:	f000 f846 	bl	800feac <xTaskIncrementTick>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d002      	beq.n	800fe2c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800fe26:	4b16      	ldr	r3, [pc, #88]	@ (800fe80 <xTaskResumeAll+0x130>)
 800fe28:	2201      	movs	r2, #1
 800fe2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	3b01      	subs	r3, #1
 800fe30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d1f1      	bne.n	800fe1c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800fe38:	4b12      	ldr	r3, [pc, #72]	@ (800fe84 <xTaskResumeAll+0x134>)
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fe3e:	4b10      	ldr	r3, [pc, #64]	@ (800fe80 <xTaskResumeAll+0x130>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d009      	beq.n	800fe5a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fe46:	2301      	movs	r3, #1
 800fe48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fe4a:	4b0f      	ldr	r3, [pc, #60]	@ (800fe88 <xTaskResumeAll+0x138>)
 800fe4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe50:	601a      	str	r2, [r3, #0]
 800fe52:	f3bf 8f4f 	dsb	sy
 800fe56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fe5a:	f001 f9ff 	bl	801125c <vPortExitCritical>

	return xAlreadyYielded;
 800fe5e:	68bb      	ldr	r3, [r7, #8]
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3710      	adds	r7, #16
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	240018c4 	.word	0x240018c4
 800fe6c:	2400189c 	.word	0x2400189c
 800fe70:	2400185c 	.word	0x2400185c
 800fe74:	240018a4 	.word	0x240018a4
 800fe78:	240013cc 	.word	0x240013cc
 800fe7c:	240013c8 	.word	0x240013c8
 800fe80:	240018b0 	.word	0x240018b0
 800fe84:	240018ac 	.word	0x240018ac
 800fe88:	e000ed04 	.word	0xe000ed04

0800fe8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b083      	sub	sp, #12
 800fe90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fe92:	4b05      	ldr	r3, [pc, #20]	@ (800fea8 <xTaskGetTickCount+0x1c>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fe98:	687b      	ldr	r3, [r7, #4]
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	370c      	adds	r7, #12
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr
 800fea6:	bf00      	nop
 800fea8:	240018a0 	.word	0x240018a0

0800feac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b086      	sub	sp, #24
 800feb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800feb2:	2300      	movs	r3, #0
 800feb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800feb6:	4b4f      	ldr	r3, [pc, #316]	@ (800fff4 <xTaskIncrementTick+0x148>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	2b00      	cmp	r3, #0
 800febc:	f040 8090 	bne.w	800ffe0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fec0:	4b4d      	ldr	r3, [pc, #308]	@ (800fff8 <xTaskIncrementTick+0x14c>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	3301      	adds	r3, #1
 800fec6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fec8:	4a4b      	ldr	r2, [pc, #300]	@ (800fff8 <xTaskIncrementTick+0x14c>)
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d121      	bne.n	800ff18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800fed4:	4b49      	ldr	r3, [pc, #292]	@ (800fffc <xTaskIncrementTick+0x150>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d00b      	beq.n	800fef6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800fede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fee2:	f383 8811 	msr	BASEPRI, r3
 800fee6:	f3bf 8f6f 	isb	sy
 800feea:	f3bf 8f4f 	dsb	sy
 800feee:	603b      	str	r3, [r7, #0]
}
 800fef0:	bf00      	nop
 800fef2:	bf00      	nop
 800fef4:	e7fd      	b.n	800fef2 <xTaskIncrementTick+0x46>
 800fef6:	4b41      	ldr	r3, [pc, #260]	@ (800fffc <xTaskIncrementTick+0x150>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	60fb      	str	r3, [r7, #12]
 800fefc:	4b40      	ldr	r3, [pc, #256]	@ (8010000 <xTaskIncrementTick+0x154>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	4a3e      	ldr	r2, [pc, #248]	@ (800fffc <xTaskIncrementTick+0x150>)
 800ff02:	6013      	str	r3, [r2, #0]
 800ff04:	4a3e      	ldr	r2, [pc, #248]	@ (8010000 <xTaskIncrementTick+0x154>)
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	6013      	str	r3, [r2, #0]
 800ff0a:	4b3e      	ldr	r3, [pc, #248]	@ (8010004 <xTaskIncrementTick+0x158>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	3301      	adds	r3, #1
 800ff10:	4a3c      	ldr	r2, [pc, #240]	@ (8010004 <xTaskIncrementTick+0x158>)
 800ff12:	6013      	str	r3, [r2, #0]
 800ff14:	f000 fae2 	bl	80104dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ff18:	4b3b      	ldr	r3, [pc, #236]	@ (8010008 <xTaskIncrementTick+0x15c>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	693a      	ldr	r2, [r7, #16]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d349      	bcc.n	800ffb6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff22:	4b36      	ldr	r3, [pc, #216]	@ (800fffc <xTaskIncrementTick+0x150>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d104      	bne.n	800ff36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff2c:	4b36      	ldr	r3, [pc, #216]	@ (8010008 <xTaskIncrementTick+0x15c>)
 800ff2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff32:	601a      	str	r2, [r3, #0]
					break;
 800ff34:	e03f      	b.n	800ffb6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff36:	4b31      	ldr	r3, [pc, #196]	@ (800fffc <xTaskIncrementTick+0x150>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	68db      	ldr	r3, [r3, #12]
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ff46:	693a      	ldr	r2, [r7, #16]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d203      	bcs.n	800ff56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ff4e:	4a2e      	ldr	r2, [pc, #184]	@ (8010008 <xTaskIncrementTick+0x15c>)
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ff54:	e02f      	b.n	800ffb6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	3304      	adds	r3, #4
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7fe fdfe 	bl	800eb5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d004      	beq.n	800ff72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	3318      	adds	r3, #24
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7fe fdf5 	bl	800eb5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff76:	4b25      	ldr	r3, [pc, #148]	@ (801000c <xTaskIncrementTick+0x160>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d903      	bls.n	800ff86 <xTaskIncrementTick+0xda>
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff82:	4a22      	ldr	r2, [pc, #136]	@ (801000c <xTaskIncrementTick+0x160>)
 800ff84:	6013      	str	r3, [r2, #0]
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	009b      	lsls	r3, r3, #2
 800ff8e:	4413      	add	r3, r2
 800ff90:	009b      	lsls	r3, r3, #2
 800ff92:	4a1f      	ldr	r2, [pc, #124]	@ (8010010 <xTaskIncrementTick+0x164>)
 800ff94:	441a      	add	r2, r3
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	3304      	adds	r3, #4
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	4610      	mov	r0, r2
 800ff9e:	f7fe fd80 	bl	800eaa2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffa6:	4b1b      	ldr	r3, [pc, #108]	@ (8010014 <xTaskIncrementTick+0x168>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d3b8      	bcc.n	800ff22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ffb4:	e7b5      	b.n	800ff22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ffb6:	4b17      	ldr	r3, [pc, #92]	@ (8010014 <xTaskIncrementTick+0x168>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffbc:	4914      	ldr	r1, [pc, #80]	@ (8010010 <xTaskIncrementTick+0x164>)
 800ffbe:	4613      	mov	r3, r2
 800ffc0:	009b      	lsls	r3, r3, #2
 800ffc2:	4413      	add	r3, r2
 800ffc4:	009b      	lsls	r3, r3, #2
 800ffc6:	440b      	add	r3, r1
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2b01      	cmp	r3, #1
 800ffcc:	d901      	bls.n	800ffd2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ffce:	2301      	movs	r3, #1
 800ffd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ffd2:	4b11      	ldr	r3, [pc, #68]	@ (8010018 <xTaskIncrementTick+0x16c>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d007      	beq.n	800ffea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ffda:	2301      	movs	r3, #1
 800ffdc:	617b      	str	r3, [r7, #20]
 800ffde:	e004      	b.n	800ffea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ffe0:	4b0e      	ldr	r3, [pc, #56]	@ (801001c <xTaskIncrementTick+0x170>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	4a0d      	ldr	r2, [pc, #52]	@ (801001c <xTaskIncrementTick+0x170>)
 800ffe8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ffea:	697b      	ldr	r3, [r7, #20]
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3718      	adds	r7, #24
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	240018c4 	.word	0x240018c4
 800fff8:	240018a0 	.word	0x240018a0
 800fffc:	24001854 	.word	0x24001854
 8010000:	24001858 	.word	0x24001858
 8010004:	240018b4 	.word	0x240018b4
 8010008:	240018bc 	.word	0x240018bc
 801000c:	240018a4 	.word	0x240018a4
 8010010:	240013cc 	.word	0x240013cc
 8010014:	240013c8 	.word	0x240013c8
 8010018:	240018b0 	.word	0x240018b0
 801001c:	240018ac 	.word	0x240018ac

08010020 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010020:	b480      	push	{r7}
 8010022:	b085      	sub	sp, #20
 8010024:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010026:	4b2b      	ldr	r3, [pc, #172]	@ (80100d4 <vTaskSwitchContext+0xb4>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d003      	beq.n	8010036 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801002e:	4b2a      	ldr	r3, [pc, #168]	@ (80100d8 <vTaskSwitchContext+0xb8>)
 8010030:	2201      	movs	r2, #1
 8010032:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010034:	e047      	b.n	80100c6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8010036:	4b28      	ldr	r3, [pc, #160]	@ (80100d8 <vTaskSwitchContext+0xb8>)
 8010038:	2200      	movs	r2, #0
 801003a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801003c:	4b27      	ldr	r3, [pc, #156]	@ (80100dc <vTaskSwitchContext+0xbc>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	60fb      	str	r3, [r7, #12]
 8010042:	e011      	b.n	8010068 <vTaskSwitchContext+0x48>
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d10b      	bne.n	8010062 <vTaskSwitchContext+0x42>
	__asm volatile
 801004a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801004e:	f383 8811 	msr	BASEPRI, r3
 8010052:	f3bf 8f6f 	isb	sy
 8010056:	f3bf 8f4f 	dsb	sy
 801005a:	607b      	str	r3, [r7, #4]
}
 801005c:	bf00      	nop
 801005e:	bf00      	nop
 8010060:	e7fd      	b.n	801005e <vTaskSwitchContext+0x3e>
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	3b01      	subs	r3, #1
 8010066:	60fb      	str	r3, [r7, #12]
 8010068:	491d      	ldr	r1, [pc, #116]	@ (80100e0 <vTaskSwitchContext+0xc0>)
 801006a:	68fa      	ldr	r2, [r7, #12]
 801006c:	4613      	mov	r3, r2
 801006e:	009b      	lsls	r3, r3, #2
 8010070:	4413      	add	r3, r2
 8010072:	009b      	lsls	r3, r3, #2
 8010074:	440b      	add	r3, r1
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d0e3      	beq.n	8010044 <vTaskSwitchContext+0x24>
 801007c:	68fa      	ldr	r2, [r7, #12]
 801007e:	4613      	mov	r3, r2
 8010080:	009b      	lsls	r3, r3, #2
 8010082:	4413      	add	r3, r2
 8010084:	009b      	lsls	r3, r3, #2
 8010086:	4a16      	ldr	r2, [pc, #88]	@ (80100e0 <vTaskSwitchContext+0xc0>)
 8010088:	4413      	add	r3, r2
 801008a:	60bb      	str	r3, [r7, #8]
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	685a      	ldr	r2, [r3, #4]
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	605a      	str	r2, [r3, #4]
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	685a      	ldr	r2, [r3, #4]
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	3308      	adds	r3, #8
 801009e:	429a      	cmp	r2, r3
 80100a0:	d104      	bne.n	80100ac <vTaskSwitchContext+0x8c>
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	685a      	ldr	r2, [r3, #4]
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	605a      	str	r2, [r3, #4]
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	68db      	ldr	r3, [r3, #12]
 80100b2:	4a0c      	ldr	r2, [pc, #48]	@ (80100e4 <vTaskSwitchContext+0xc4>)
 80100b4:	6013      	str	r3, [r2, #0]
 80100b6:	4a09      	ldr	r2, [pc, #36]	@ (80100dc <vTaskSwitchContext+0xbc>)
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80100bc:	4b09      	ldr	r3, [pc, #36]	@ (80100e4 <vTaskSwitchContext+0xc4>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	3354      	adds	r3, #84	@ 0x54
 80100c2:	4a09      	ldr	r2, [pc, #36]	@ (80100e8 <vTaskSwitchContext+0xc8>)
 80100c4:	6013      	str	r3, [r2, #0]
}
 80100c6:	bf00      	nop
 80100c8:	3714      	adds	r7, #20
 80100ca:	46bd      	mov	sp, r7
 80100cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d0:	4770      	bx	lr
 80100d2:	bf00      	nop
 80100d4:	240018c4 	.word	0x240018c4
 80100d8:	240018b0 	.word	0x240018b0
 80100dc:	240018a4 	.word	0x240018a4
 80100e0:	240013cc 	.word	0x240013cc
 80100e4:	240013c8 	.word	0x240013c8
 80100e8:	24000108 	.word	0x24000108

080100ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d10b      	bne.n	8010114 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80100fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010100:	f383 8811 	msr	BASEPRI, r3
 8010104:	f3bf 8f6f 	isb	sy
 8010108:	f3bf 8f4f 	dsb	sy
 801010c:	60fb      	str	r3, [r7, #12]
}
 801010e:	bf00      	nop
 8010110:	bf00      	nop
 8010112:	e7fd      	b.n	8010110 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010114:	4b07      	ldr	r3, [pc, #28]	@ (8010134 <vTaskPlaceOnEventList+0x48>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	3318      	adds	r3, #24
 801011a:	4619      	mov	r1, r3
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f7fe fce4 	bl	800eaea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010122:	2101      	movs	r1, #1
 8010124:	6838      	ldr	r0, [r7, #0]
 8010126:	f000 fb87 	bl	8010838 <prvAddCurrentTaskToDelayedList>
}
 801012a:	bf00      	nop
 801012c:	3710      	adds	r7, #16
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	240013c8 	.word	0x240013c8

08010138 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010138:	b580      	push	{r7, lr}
 801013a:	b086      	sub	sp, #24
 801013c:	af00      	add	r7, sp, #0
 801013e:	60f8      	str	r0, [r7, #12]
 8010140:	60b9      	str	r1, [r7, #8]
 8010142:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d10b      	bne.n	8010162 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801014a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801014e:	f383 8811 	msr	BASEPRI, r3
 8010152:	f3bf 8f6f 	isb	sy
 8010156:	f3bf 8f4f 	dsb	sy
 801015a:	617b      	str	r3, [r7, #20]
}
 801015c:	bf00      	nop
 801015e:	bf00      	nop
 8010160:	e7fd      	b.n	801015e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010162:	4b0a      	ldr	r3, [pc, #40]	@ (801018c <vTaskPlaceOnEventListRestricted+0x54>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	3318      	adds	r3, #24
 8010168:	4619      	mov	r1, r3
 801016a:	68f8      	ldr	r0, [r7, #12]
 801016c:	f7fe fc99 	bl	800eaa2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d002      	beq.n	801017c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8010176:	f04f 33ff 	mov.w	r3, #4294967295
 801017a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801017c:	6879      	ldr	r1, [r7, #4]
 801017e:	68b8      	ldr	r0, [r7, #8]
 8010180:	f000 fb5a 	bl	8010838 <prvAddCurrentTaskToDelayedList>
	}
 8010184:	bf00      	nop
 8010186:	3718      	adds	r7, #24
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}
 801018c:	240013c8 	.word	0x240013c8

08010190 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b086      	sub	sp, #24
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	68db      	ldr	r3, [r3, #12]
 801019c:	68db      	ldr	r3, [r3, #12]
 801019e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80101a0:	693b      	ldr	r3, [r7, #16]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d10b      	bne.n	80101be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80101a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101aa:	f383 8811 	msr	BASEPRI, r3
 80101ae:	f3bf 8f6f 	isb	sy
 80101b2:	f3bf 8f4f 	dsb	sy
 80101b6:	60fb      	str	r3, [r7, #12]
}
 80101b8:	bf00      	nop
 80101ba:	bf00      	nop
 80101bc:	e7fd      	b.n	80101ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	3318      	adds	r3, #24
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7fe fcca 	bl	800eb5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101c8:	4b1d      	ldr	r3, [pc, #116]	@ (8010240 <xTaskRemoveFromEventList+0xb0>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d11d      	bne.n	801020c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	3304      	adds	r3, #4
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7fe fcc1 	bl	800eb5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80101da:	693b      	ldr	r3, [r7, #16]
 80101dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101de:	4b19      	ldr	r3, [pc, #100]	@ (8010244 <xTaskRemoveFromEventList+0xb4>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d903      	bls.n	80101ee <xTaskRemoveFromEventList+0x5e>
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101ea:	4a16      	ldr	r2, [pc, #88]	@ (8010244 <xTaskRemoveFromEventList+0xb4>)
 80101ec:	6013      	str	r3, [r2, #0]
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101f2:	4613      	mov	r3, r2
 80101f4:	009b      	lsls	r3, r3, #2
 80101f6:	4413      	add	r3, r2
 80101f8:	009b      	lsls	r3, r3, #2
 80101fa:	4a13      	ldr	r2, [pc, #76]	@ (8010248 <xTaskRemoveFromEventList+0xb8>)
 80101fc:	441a      	add	r2, r3
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	3304      	adds	r3, #4
 8010202:	4619      	mov	r1, r3
 8010204:	4610      	mov	r0, r2
 8010206:	f7fe fc4c 	bl	800eaa2 <vListInsertEnd>
 801020a:	e005      	b.n	8010218 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	3318      	adds	r3, #24
 8010210:	4619      	mov	r1, r3
 8010212:	480e      	ldr	r0, [pc, #56]	@ (801024c <xTaskRemoveFromEventList+0xbc>)
 8010214:	f7fe fc45 	bl	800eaa2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801021c:	4b0c      	ldr	r3, [pc, #48]	@ (8010250 <xTaskRemoveFromEventList+0xc0>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010222:	429a      	cmp	r2, r3
 8010224:	d905      	bls.n	8010232 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010226:	2301      	movs	r3, #1
 8010228:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801022a:	4b0a      	ldr	r3, [pc, #40]	@ (8010254 <xTaskRemoveFromEventList+0xc4>)
 801022c:	2201      	movs	r2, #1
 801022e:	601a      	str	r2, [r3, #0]
 8010230:	e001      	b.n	8010236 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8010232:	2300      	movs	r3, #0
 8010234:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010236:	697b      	ldr	r3, [r7, #20]
}
 8010238:	4618      	mov	r0, r3
 801023a:	3718      	adds	r7, #24
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}
 8010240:	240018c4 	.word	0x240018c4
 8010244:	240018a4 	.word	0x240018a4
 8010248:	240013cc 	.word	0x240013cc
 801024c:	2400185c 	.word	0x2400185c
 8010250:	240013c8 	.word	0x240013c8
 8010254:	240018b0 	.word	0x240018b0

08010258 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010258:	b480      	push	{r7}
 801025a:	b083      	sub	sp, #12
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010260:	4b06      	ldr	r3, [pc, #24]	@ (801027c <vTaskInternalSetTimeOutState+0x24>)
 8010262:	681a      	ldr	r2, [r3, #0]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010268:	4b05      	ldr	r3, [pc, #20]	@ (8010280 <vTaskInternalSetTimeOutState+0x28>)
 801026a:	681a      	ldr	r2, [r3, #0]
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	605a      	str	r2, [r3, #4]
}
 8010270:	bf00      	nop
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr
 801027c:	240018b4 	.word	0x240018b4
 8010280:	240018a0 	.word	0x240018a0

08010284 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b088      	sub	sp, #32
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d10b      	bne.n	80102ac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010298:	f383 8811 	msr	BASEPRI, r3
 801029c:	f3bf 8f6f 	isb	sy
 80102a0:	f3bf 8f4f 	dsb	sy
 80102a4:	613b      	str	r3, [r7, #16]
}
 80102a6:	bf00      	nop
 80102a8:	bf00      	nop
 80102aa:	e7fd      	b.n	80102a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d10b      	bne.n	80102ca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80102b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102b6:	f383 8811 	msr	BASEPRI, r3
 80102ba:	f3bf 8f6f 	isb	sy
 80102be:	f3bf 8f4f 	dsb	sy
 80102c2:	60fb      	str	r3, [r7, #12]
}
 80102c4:	bf00      	nop
 80102c6:	bf00      	nop
 80102c8:	e7fd      	b.n	80102c6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80102ca:	f000 ff95 	bl	80111f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80102ce:	4b1d      	ldr	r3, [pc, #116]	@ (8010344 <xTaskCheckForTimeOut+0xc0>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	685b      	ldr	r3, [r3, #4]
 80102d8:	69ba      	ldr	r2, [r7, #24]
 80102da:	1ad3      	subs	r3, r2, r3
 80102dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102e6:	d102      	bne.n	80102ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80102e8:	2300      	movs	r3, #0
 80102ea:	61fb      	str	r3, [r7, #28]
 80102ec:	e023      	b.n	8010336 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	4b15      	ldr	r3, [pc, #84]	@ (8010348 <xTaskCheckForTimeOut+0xc4>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d007      	beq.n	801030a <xTaskCheckForTimeOut+0x86>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	69ba      	ldr	r2, [r7, #24]
 8010300:	429a      	cmp	r2, r3
 8010302:	d302      	bcc.n	801030a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010304:	2301      	movs	r3, #1
 8010306:	61fb      	str	r3, [r7, #28]
 8010308:	e015      	b.n	8010336 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	697a      	ldr	r2, [r7, #20]
 8010310:	429a      	cmp	r2, r3
 8010312:	d20b      	bcs.n	801032c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	681a      	ldr	r2, [r3, #0]
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	1ad2      	subs	r2, r2, r3
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f7ff ff99 	bl	8010258 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010326:	2300      	movs	r3, #0
 8010328:	61fb      	str	r3, [r7, #28]
 801032a:	e004      	b.n	8010336 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	2200      	movs	r2, #0
 8010330:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010332:	2301      	movs	r3, #1
 8010334:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010336:	f000 ff91 	bl	801125c <vPortExitCritical>

	return xReturn;
 801033a:	69fb      	ldr	r3, [r7, #28]
}
 801033c:	4618      	mov	r0, r3
 801033e:	3720      	adds	r7, #32
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}
 8010344:	240018a0 	.word	0x240018a0
 8010348:	240018b4 	.word	0x240018b4

0801034c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801034c:	b480      	push	{r7}
 801034e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010350:	4b03      	ldr	r3, [pc, #12]	@ (8010360 <vTaskMissedYield+0x14>)
 8010352:	2201      	movs	r2, #1
 8010354:	601a      	str	r2, [r3, #0]
}
 8010356:	bf00      	nop
 8010358:	46bd      	mov	sp, r7
 801035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035e:	4770      	bx	lr
 8010360:	240018b0 	.word	0x240018b0

08010364 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b082      	sub	sp, #8
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801036c:	f000 f852 	bl	8010414 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010370:	4b06      	ldr	r3, [pc, #24]	@ (801038c <prvIdleTask+0x28>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	2b01      	cmp	r3, #1
 8010376:	d9f9      	bls.n	801036c <prvIdleTask+0x8>
			{
				taskYIELD();
 8010378:	4b05      	ldr	r3, [pc, #20]	@ (8010390 <prvIdleTask+0x2c>)
 801037a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801037e:	601a      	str	r2, [r3, #0]
 8010380:	f3bf 8f4f 	dsb	sy
 8010384:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010388:	e7f0      	b.n	801036c <prvIdleTask+0x8>
 801038a:	bf00      	nop
 801038c:	240013cc 	.word	0x240013cc
 8010390:	e000ed04 	.word	0xe000ed04

08010394 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b082      	sub	sp, #8
 8010398:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801039a:	2300      	movs	r3, #0
 801039c:	607b      	str	r3, [r7, #4]
 801039e:	e00c      	b.n	80103ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80103a0:	687a      	ldr	r2, [r7, #4]
 80103a2:	4613      	mov	r3, r2
 80103a4:	009b      	lsls	r3, r3, #2
 80103a6:	4413      	add	r3, r2
 80103a8:	009b      	lsls	r3, r3, #2
 80103aa:	4a12      	ldr	r2, [pc, #72]	@ (80103f4 <prvInitialiseTaskLists+0x60>)
 80103ac:	4413      	add	r3, r2
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fe fb4a 	bl	800ea48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	3301      	adds	r3, #1
 80103b8:	607b      	str	r3, [r7, #4]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2b37      	cmp	r3, #55	@ 0x37
 80103be:	d9ef      	bls.n	80103a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80103c0:	480d      	ldr	r0, [pc, #52]	@ (80103f8 <prvInitialiseTaskLists+0x64>)
 80103c2:	f7fe fb41 	bl	800ea48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80103c6:	480d      	ldr	r0, [pc, #52]	@ (80103fc <prvInitialiseTaskLists+0x68>)
 80103c8:	f7fe fb3e 	bl	800ea48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80103cc:	480c      	ldr	r0, [pc, #48]	@ (8010400 <prvInitialiseTaskLists+0x6c>)
 80103ce:	f7fe fb3b 	bl	800ea48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80103d2:	480c      	ldr	r0, [pc, #48]	@ (8010404 <prvInitialiseTaskLists+0x70>)
 80103d4:	f7fe fb38 	bl	800ea48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80103d8:	480b      	ldr	r0, [pc, #44]	@ (8010408 <prvInitialiseTaskLists+0x74>)
 80103da:	f7fe fb35 	bl	800ea48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80103de:	4b0b      	ldr	r3, [pc, #44]	@ (801040c <prvInitialiseTaskLists+0x78>)
 80103e0:	4a05      	ldr	r2, [pc, #20]	@ (80103f8 <prvInitialiseTaskLists+0x64>)
 80103e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80103e4:	4b0a      	ldr	r3, [pc, #40]	@ (8010410 <prvInitialiseTaskLists+0x7c>)
 80103e6:	4a05      	ldr	r2, [pc, #20]	@ (80103fc <prvInitialiseTaskLists+0x68>)
 80103e8:	601a      	str	r2, [r3, #0]
}
 80103ea:	bf00      	nop
 80103ec:	3708      	adds	r7, #8
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	240013cc 	.word	0x240013cc
 80103f8:	2400182c 	.word	0x2400182c
 80103fc:	24001840 	.word	0x24001840
 8010400:	2400185c 	.word	0x2400185c
 8010404:	24001870 	.word	0x24001870
 8010408:	24001888 	.word	0x24001888
 801040c:	24001854 	.word	0x24001854
 8010410:	24001858 	.word	0x24001858

08010414 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801041a:	e019      	b.n	8010450 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801041c:	f000 feec 	bl	80111f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010420:	4b10      	ldr	r3, [pc, #64]	@ (8010464 <prvCheckTasksWaitingTermination+0x50>)
 8010422:	68db      	ldr	r3, [r3, #12]
 8010424:	68db      	ldr	r3, [r3, #12]
 8010426:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	3304      	adds	r3, #4
 801042c:	4618      	mov	r0, r3
 801042e:	f7fe fb95 	bl	800eb5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010432:	4b0d      	ldr	r3, [pc, #52]	@ (8010468 <prvCheckTasksWaitingTermination+0x54>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	3b01      	subs	r3, #1
 8010438:	4a0b      	ldr	r2, [pc, #44]	@ (8010468 <prvCheckTasksWaitingTermination+0x54>)
 801043a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801043c:	4b0b      	ldr	r3, [pc, #44]	@ (801046c <prvCheckTasksWaitingTermination+0x58>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	3b01      	subs	r3, #1
 8010442:	4a0a      	ldr	r2, [pc, #40]	@ (801046c <prvCheckTasksWaitingTermination+0x58>)
 8010444:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010446:	f000 ff09 	bl	801125c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f000 f810 	bl	8010470 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010450:	4b06      	ldr	r3, [pc, #24]	@ (801046c <prvCheckTasksWaitingTermination+0x58>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d1e1      	bne.n	801041c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010458:	bf00      	nop
 801045a:	bf00      	nop
 801045c:	3708      	adds	r7, #8
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}
 8010462:	bf00      	nop
 8010464:	24001870 	.word	0x24001870
 8010468:	2400189c 	.word	0x2400189c
 801046c:	24001884 	.word	0x24001884

08010470 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	3354      	adds	r3, #84	@ 0x54
 801047c:	4618      	mov	r0, r3
 801047e:	f001 feed 	bl	801225c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010488:	2b00      	cmp	r3, #0
 801048a:	d108      	bne.n	801049e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010490:	4618      	mov	r0, r3
 8010492:	f001 f8a1 	bl	80115d8 <vPortFree>
				vPortFree( pxTCB );
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f001 f89e 	bl	80115d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801049c:	e019      	b.n	80104d2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d103      	bne.n	80104b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f001 f895 	bl	80115d8 <vPortFree>
	}
 80104ae:	e010      	b.n	80104d2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80104b6:	2b02      	cmp	r3, #2
 80104b8:	d00b      	beq.n	80104d2 <prvDeleteTCB+0x62>
	__asm volatile
 80104ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104be:	f383 8811 	msr	BASEPRI, r3
 80104c2:	f3bf 8f6f 	isb	sy
 80104c6:	f3bf 8f4f 	dsb	sy
 80104ca:	60fb      	str	r3, [r7, #12]
}
 80104cc:	bf00      	nop
 80104ce:	bf00      	nop
 80104d0:	e7fd      	b.n	80104ce <prvDeleteTCB+0x5e>
	}
 80104d2:	bf00      	nop
 80104d4:	3710      	adds	r7, #16
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
	...

080104dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80104dc:	b480      	push	{r7}
 80104de:	b083      	sub	sp, #12
 80104e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80104e2:	4b0c      	ldr	r3, [pc, #48]	@ (8010514 <prvResetNextTaskUnblockTime+0x38>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d104      	bne.n	80104f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80104ec:	4b0a      	ldr	r3, [pc, #40]	@ (8010518 <prvResetNextTaskUnblockTime+0x3c>)
 80104ee:	f04f 32ff 	mov.w	r2, #4294967295
 80104f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80104f4:	e008      	b.n	8010508 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104f6:	4b07      	ldr	r3, [pc, #28]	@ (8010514 <prvResetNextTaskUnblockTime+0x38>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	68db      	ldr	r3, [r3, #12]
 80104fc:	68db      	ldr	r3, [r3, #12]
 80104fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	685b      	ldr	r3, [r3, #4]
 8010504:	4a04      	ldr	r2, [pc, #16]	@ (8010518 <prvResetNextTaskUnblockTime+0x3c>)
 8010506:	6013      	str	r3, [r2, #0]
}
 8010508:	bf00      	nop
 801050a:	370c      	adds	r7, #12
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr
 8010514:	24001854 	.word	0x24001854
 8010518:	240018bc 	.word	0x240018bc

0801051c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801051c:	b480      	push	{r7}
 801051e:	b083      	sub	sp, #12
 8010520:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010522:	4b0b      	ldr	r3, [pc, #44]	@ (8010550 <xTaskGetSchedulerState+0x34>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d102      	bne.n	8010530 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801052a:	2301      	movs	r3, #1
 801052c:	607b      	str	r3, [r7, #4]
 801052e:	e008      	b.n	8010542 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010530:	4b08      	ldr	r3, [pc, #32]	@ (8010554 <xTaskGetSchedulerState+0x38>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d102      	bne.n	801053e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010538:	2302      	movs	r3, #2
 801053a:	607b      	str	r3, [r7, #4]
 801053c:	e001      	b.n	8010542 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801053e:	2300      	movs	r3, #0
 8010540:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010542:	687b      	ldr	r3, [r7, #4]
	}
 8010544:	4618      	mov	r0, r3
 8010546:	370c      	adds	r7, #12
 8010548:	46bd      	mov	sp, r7
 801054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054e:	4770      	bx	lr
 8010550:	240018a8 	.word	0x240018a8
 8010554:	240018c4 	.word	0x240018c4

08010558 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010564:	2300      	movs	r3, #0
 8010566:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d051      	beq.n	8010612 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010572:	4b2a      	ldr	r3, [pc, #168]	@ (801061c <xTaskPriorityInherit+0xc4>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010578:	429a      	cmp	r2, r3
 801057a:	d241      	bcs.n	8010600 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	699b      	ldr	r3, [r3, #24]
 8010580:	2b00      	cmp	r3, #0
 8010582:	db06      	blt.n	8010592 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010584:	4b25      	ldr	r3, [pc, #148]	@ (801061c <xTaskPriorityInherit+0xc4>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801058a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	6959      	ldr	r1, [r3, #20]
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801059a:	4613      	mov	r3, r2
 801059c:	009b      	lsls	r3, r3, #2
 801059e:	4413      	add	r3, r2
 80105a0:	009b      	lsls	r3, r3, #2
 80105a2:	4a1f      	ldr	r2, [pc, #124]	@ (8010620 <xTaskPriorityInherit+0xc8>)
 80105a4:	4413      	add	r3, r2
 80105a6:	4299      	cmp	r1, r3
 80105a8:	d122      	bne.n	80105f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	3304      	adds	r3, #4
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7fe fad4 	bl	800eb5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80105b4:	4b19      	ldr	r3, [pc, #100]	@ (801061c <xTaskPriorityInherit+0xc4>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105c2:	4b18      	ldr	r3, [pc, #96]	@ (8010624 <xTaskPriorityInherit+0xcc>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d903      	bls.n	80105d2 <xTaskPriorityInherit+0x7a>
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105ce:	4a15      	ldr	r2, [pc, #84]	@ (8010624 <xTaskPriorityInherit+0xcc>)
 80105d0:	6013      	str	r3, [r2, #0]
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105d6:	4613      	mov	r3, r2
 80105d8:	009b      	lsls	r3, r3, #2
 80105da:	4413      	add	r3, r2
 80105dc:	009b      	lsls	r3, r3, #2
 80105de:	4a10      	ldr	r2, [pc, #64]	@ (8010620 <xTaskPriorityInherit+0xc8>)
 80105e0:	441a      	add	r2, r3
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	3304      	adds	r3, #4
 80105e6:	4619      	mov	r1, r3
 80105e8:	4610      	mov	r0, r2
 80105ea:	f7fe fa5a 	bl	800eaa2 <vListInsertEnd>
 80105ee:	e004      	b.n	80105fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80105f0:	4b0a      	ldr	r3, [pc, #40]	@ (801061c <xTaskPriorityInherit+0xc4>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80105fa:	2301      	movs	r3, #1
 80105fc:	60fb      	str	r3, [r7, #12]
 80105fe:	e008      	b.n	8010612 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010604:	4b05      	ldr	r3, [pc, #20]	@ (801061c <xTaskPriorityInherit+0xc4>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801060a:	429a      	cmp	r2, r3
 801060c:	d201      	bcs.n	8010612 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801060e:	2301      	movs	r3, #1
 8010610:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010612:	68fb      	ldr	r3, [r7, #12]
	}
 8010614:	4618      	mov	r0, r3
 8010616:	3710      	adds	r7, #16
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}
 801061c:	240013c8 	.word	0x240013c8
 8010620:	240013cc 	.word	0x240013cc
 8010624:	240018a4 	.word	0x240018a4

08010628 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010628:	b580      	push	{r7, lr}
 801062a:	b086      	sub	sp, #24
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010634:	2300      	movs	r3, #0
 8010636:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d058      	beq.n	80106f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801063e:	4b2f      	ldr	r3, [pc, #188]	@ (80106fc <xTaskPriorityDisinherit+0xd4>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	693a      	ldr	r2, [r7, #16]
 8010644:	429a      	cmp	r2, r3
 8010646:	d00b      	beq.n	8010660 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801064c:	f383 8811 	msr	BASEPRI, r3
 8010650:	f3bf 8f6f 	isb	sy
 8010654:	f3bf 8f4f 	dsb	sy
 8010658:	60fb      	str	r3, [r7, #12]
}
 801065a:	bf00      	nop
 801065c:	bf00      	nop
 801065e:	e7fd      	b.n	801065c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010660:	693b      	ldr	r3, [r7, #16]
 8010662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010664:	2b00      	cmp	r3, #0
 8010666:	d10b      	bne.n	8010680 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801066c:	f383 8811 	msr	BASEPRI, r3
 8010670:	f3bf 8f6f 	isb	sy
 8010674:	f3bf 8f4f 	dsb	sy
 8010678:	60bb      	str	r3, [r7, #8]
}
 801067a:	bf00      	nop
 801067c:	bf00      	nop
 801067e:	e7fd      	b.n	801067c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010684:	1e5a      	subs	r2, r3, #1
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010692:	429a      	cmp	r2, r3
 8010694:	d02c      	beq.n	80106f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801069a:	2b00      	cmp	r3, #0
 801069c:	d128      	bne.n	80106f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801069e:	693b      	ldr	r3, [r7, #16]
 80106a0:	3304      	adds	r3, #4
 80106a2:	4618      	mov	r0, r3
 80106a4:	f7fe fa5a 	bl	800eb5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80106b8:	693b      	ldr	r3, [r7, #16]
 80106ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106c0:	4b0f      	ldr	r3, [pc, #60]	@ (8010700 <xTaskPriorityDisinherit+0xd8>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	429a      	cmp	r2, r3
 80106c6:	d903      	bls.n	80106d0 <xTaskPriorityDisinherit+0xa8>
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106cc:	4a0c      	ldr	r2, [pc, #48]	@ (8010700 <xTaskPriorityDisinherit+0xd8>)
 80106ce:	6013      	str	r3, [r2, #0]
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106d4:	4613      	mov	r3, r2
 80106d6:	009b      	lsls	r3, r3, #2
 80106d8:	4413      	add	r3, r2
 80106da:	009b      	lsls	r3, r3, #2
 80106dc:	4a09      	ldr	r2, [pc, #36]	@ (8010704 <xTaskPriorityDisinherit+0xdc>)
 80106de:	441a      	add	r2, r3
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	3304      	adds	r3, #4
 80106e4:	4619      	mov	r1, r3
 80106e6:	4610      	mov	r0, r2
 80106e8:	f7fe f9db 	bl	800eaa2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80106ec:	2301      	movs	r3, #1
 80106ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80106f0:	697b      	ldr	r3, [r7, #20]
	}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3718      	adds	r7, #24
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	240013c8 	.word	0x240013c8
 8010700:	240018a4 	.word	0x240018a4
 8010704:	240013cc 	.word	0x240013cc

08010708 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010708:	b580      	push	{r7, lr}
 801070a:	b088      	sub	sp, #32
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010716:	2301      	movs	r3, #1
 8010718:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d06c      	beq.n	80107fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010720:	69bb      	ldr	r3, [r7, #24]
 8010722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010724:	2b00      	cmp	r3, #0
 8010726:	d10b      	bne.n	8010740 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8010728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801072c:	f383 8811 	msr	BASEPRI, r3
 8010730:	f3bf 8f6f 	isb	sy
 8010734:	f3bf 8f4f 	dsb	sy
 8010738:	60fb      	str	r3, [r7, #12]
}
 801073a:	bf00      	nop
 801073c:	bf00      	nop
 801073e:	e7fd      	b.n	801073c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010740:	69bb      	ldr	r3, [r7, #24]
 8010742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010744:	683a      	ldr	r2, [r7, #0]
 8010746:	429a      	cmp	r2, r3
 8010748:	d902      	bls.n	8010750 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	61fb      	str	r3, [r7, #28]
 801074e:	e002      	b.n	8010756 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010750:	69bb      	ldr	r3, [r7, #24]
 8010752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010754:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801075a:	69fa      	ldr	r2, [r7, #28]
 801075c:	429a      	cmp	r2, r3
 801075e:	d04c      	beq.n	80107fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010760:	69bb      	ldr	r3, [r7, #24]
 8010762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010764:	697a      	ldr	r2, [r7, #20]
 8010766:	429a      	cmp	r2, r3
 8010768:	d147      	bne.n	80107fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801076a:	4b26      	ldr	r3, [pc, #152]	@ (8010804 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	69ba      	ldr	r2, [r7, #24]
 8010770:	429a      	cmp	r2, r3
 8010772:	d10b      	bne.n	801078c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8010774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010778:	f383 8811 	msr	BASEPRI, r3
 801077c:	f3bf 8f6f 	isb	sy
 8010780:	f3bf 8f4f 	dsb	sy
 8010784:	60bb      	str	r3, [r7, #8]
}
 8010786:	bf00      	nop
 8010788:	bf00      	nop
 801078a:	e7fd      	b.n	8010788 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801078c:	69bb      	ldr	r3, [r7, #24]
 801078e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010790:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010792:	69bb      	ldr	r3, [r7, #24]
 8010794:	69fa      	ldr	r2, [r7, #28]
 8010796:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010798:	69bb      	ldr	r3, [r7, #24]
 801079a:	699b      	ldr	r3, [r3, #24]
 801079c:	2b00      	cmp	r3, #0
 801079e:	db04      	blt.n	80107aa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107a0:	69fb      	ldr	r3, [r7, #28]
 80107a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80107a6:	69bb      	ldr	r3, [r7, #24]
 80107a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80107aa:	69bb      	ldr	r3, [r7, #24]
 80107ac:	6959      	ldr	r1, [r3, #20]
 80107ae:	693a      	ldr	r2, [r7, #16]
 80107b0:	4613      	mov	r3, r2
 80107b2:	009b      	lsls	r3, r3, #2
 80107b4:	4413      	add	r3, r2
 80107b6:	009b      	lsls	r3, r3, #2
 80107b8:	4a13      	ldr	r2, [pc, #76]	@ (8010808 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80107ba:	4413      	add	r3, r2
 80107bc:	4299      	cmp	r1, r3
 80107be:	d11c      	bne.n	80107fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80107c0:	69bb      	ldr	r3, [r7, #24]
 80107c2:	3304      	adds	r3, #4
 80107c4:	4618      	mov	r0, r3
 80107c6:	f7fe f9c9 	bl	800eb5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80107ca:	69bb      	ldr	r3, [r7, #24]
 80107cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107ce:	4b0f      	ldr	r3, [pc, #60]	@ (801080c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d903      	bls.n	80107de <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107da:	4a0c      	ldr	r2, [pc, #48]	@ (801080c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80107dc:	6013      	str	r3, [r2, #0]
 80107de:	69bb      	ldr	r3, [r7, #24]
 80107e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107e2:	4613      	mov	r3, r2
 80107e4:	009b      	lsls	r3, r3, #2
 80107e6:	4413      	add	r3, r2
 80107e8:	009b      	lsls	r3, r3, #2
 80107ea:	4a07      	ldr	r2, [pc, #28]	@ (8010808 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80107ec:	441a      	add	r2, r3
 80107ee:	69bb      	ldr	r3, [r7, #24]
 80107f0:	3304      	adds	r3, #4
 80107f2:	4619      	mov	r1, r3
 80107f4:	4610      	mov	r0, r2
 80107f6:	f7fe f954 	bl	800eaa2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80107fa:	bf00      	nop
 80107fc:	3720      	adds	r7, #32
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	240013c8 	.word	0x240013c8
 8010808:	240013cc 	.word	0x240013cc
 801080c:	240018a4 	.word	0x240018a4

08010810 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010810:	b480      	push	{r7}
 8010812:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010814:	4b07      	ldr	r3, [pc, #28]	@ (8010834 <pvTaskIncrementMutexHeldCount+0x24>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d004      	beq.n	8010826 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801081c:	4b05      	ldr	r3, [pc, #20]	@ (8010834 <pvTaskIncrementMutexHeldCount+0x24>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010822:	3201      	adds	r2, #1
 8010824:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8010826:	4b03      	ldr	r3, [pc, #12]	@ (8010834 <pvTaskIncrementMutexHeldCount+0x24>)
 8010828:	681b      	ldr	r3, [r3, #0]
	}
 801082a:	4618      	mov	r0, r3
 801082c:	46bd      	mov	sp, r7
 801082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010832:	4770      	bx	lr
 8010834:	240013c8 	.word	0x240013c8

08010838 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b084      	sub	sp, #16
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010842:	4b21      	ldr	r3, [pc, #132]	@ (80108c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010848:	4b20      	ldr	r3, [pc, #128]	@ (80108cc <prvAddCurrentTaskToDelayedList+0x94>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	3304      	adds	r3, #4
 801084e:	4618      	mov	r0, r3
 8010850:	f7fe f984 	bl	800eb5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f1b3 3fff 	cmp.w	r3, #4294967295
 801085a:	d10a      	bne.n	8010872 <prvAddCurrentTaskToDelayedList+0x3a>
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d007      	beq.n	8010872 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010862:	4b1a      	ldr	r3, [pc, #104]	@ (80108cc <prvAddCurrentTaskToDelayedList+0x94>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	3304      	adds	r3, #4
 8010868:	4619      	mov	r1, r3
 801086a:	4819      	ldr	r0, [pc, #100]	@ (80108d0 <prvAddCurrentTaskToDelayedList+0x98>)
 801086c:	f7fe f919 	bl	800eaa2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010870:	e026      	b.n	80108c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010872:	68fa      	ldr	r2, [r7, #12]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	4413      	add	r3, r2
 8010878:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801087a:	4b14      	ldr	r3, [pc, #80]	@ (80108cc <prvAddCurrentTaskToDelayedList+0x94>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	68ba      	ldr	r2, [r7, #8]
 8010880:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010882:	68ba      	ldr	r2, [r7, #8]
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	429a      	cmp	r2, r3
 8010888:	d209      	bcs.n	801089e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801088a:	4b12      	ldr	r3, [pc, #72]	@ (80108d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801088c:	681a      	ldr	r2, [r3, #0]
 801088e:	4b0f      	ldr	r3, [pc, #60]	@ (80108cc <prvAddCurrentTaskToDelayedList+0x94>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	3304      	adds	r3, #4
 8010894:	4619      	mov	r1, r3
 8010896:	4610      	mov	r0, r2
 8010898:	f7fe f927 	bl	800eaea <vListInsert>
}
 801089c:	e010      	b.n	80108c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801089e:	4b0e      	ldr	r3, [pc, #56]	@ (80108d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80108a0:	681a      	ldr	r2, [r3, #0]
 80108a2:	4b0a      	ldr	r3, [pc, #40]	@ (80108cc <prvAddCurrentTaskToDelayedList+0x94>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	3304      	adds	r3, #4
 80108a8:	4619      	mov	r1, r3
 80108aa:	4610      	mov	r0, r2
 80108ac:	f7fe f91d 	bl	800eaea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80108b0:	4b0a      	ldr	r3, [pc, #40]	@ (80108dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	68ba      	ldr	r2, [r7, #8]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d202      	bcs.n	80108c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80108ba:	4a08      	ldr	r2, [pc, #32]	@ (80108dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	6013      	str	r3, [r2, #0]
}
 80108c0:	bf00      	nop
 80108c2:	3710      	adds	r7, #16
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	240018a0 	.word	0x240018a0
 80108cc:	240013c8 	.word	0x240013c8
 80108d0:	24001888 	.word	0x24001888
 80108d4:	24001858 	.word	0x24001858
 80108d8:	24001854 	.word	0x24001854
 80108dc:	240018bc 	.word	0x240018bc

080108e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b08a      	sub	sp, #40	@ 0x28
 80108e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80108e6:	2300      	movs	r3, #0
 80108e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80108ea:	f000 fb13 	bl	8010f14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80108ee:	4b1d      	ldr	r3, [pc, #116]	@ (8010964 <xTimerCreateTimerTask+0x84>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d021      	beq.n	801093a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80108f6:	2300      	movs	r3, #0
 80108f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80108fa:	2300      	movs	r3, #0
 80108fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80108fe:	1d3a      	adds	r2, r7, #4
 8010900:	f107 0108 	add.w	r1, r7, #8
 8010904:	f107 030c 	add.w	r3, r7, #12
 8010908:	4618      	mov	r0, r3
 801090a:	f7fe f883 	bl	800ea14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801090e:	6879      	ldr	r1, [r7, #4]
 8010910:	68bb      	ldr	r3, [r7, #8]
 8010912:	68fa      	ldr	r2, [r7, #12]
 8010914:	9202      	str	r2, [sp, #8]
 8010916:	9301      	str	r3, [sp, #4]
 8010918:	2302      	movs	r3, #2
 801091a:	9300      	str	r3, [sp, #0]
 801091c:	2300      	movs	r3, #0
 801091e:	460a      	mov	r2, r1
 8010920:	4911      	ldr	r1, [pc, #68]	@ (8010968 <xTimerCreateTimerTask+0x88>)
 8010922:	4812      	ldr	r0, [pc, #72]	@ (801096c <xTimerCreateTimerTask+0x8c>)
 8010924:	f7fe ffa2 	bl	800f86c <xTaskCreateStatic>
 8010928:	4603      	mov	r3, r0
 801092a:	4a11      	ldr	r2, [pc, #68]	@ (8010970 <xTimerCreateTimerTask+0x90>)
 801092c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801092e:	4b10      	ldr	r3, [pc, #64]	@ (8010970 <xTimerCreateTimerTask+0x90>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d001      	beq.n	801093a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010936:	2301      	movs	r3, #1
 8010938:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d10b      	bne.n	8010958 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010944:	f383 8811 	msr	BASEPRI, r3
 8010948:	f3bf 8f6f 	isb	sy
 801094c:	f3bf 8f4f 	dsb	sy
 8010950:	613b      	str	r3, [r7, #16]
}
 8010952:	bf00      	nop
 8010954:	bf00      	nop
 8010956:	e7fd      	b.n	8010954 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010958:	697b      	ldr	r3, [r7, #20]
}
 801095a:	4618      	mov	r0, r3
 801095c:	3718      	adds	r7, #24
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}
 8010962:	bf00      	nop
 8010964:	240018f8 	.word	0x240018f8
 8010968:	08012468 	.word	0x08012468
 801096c:	08010aad 	.word	0x08010aad
 8010970:	240018fc 	.word	0x240018fc

08010974 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b08a      	sub	sp, #40	@ 0x28
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
 8010980:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010982:	2300      	movs	r3, #0
 8010984:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d10b      	bne.n	80109a4 <xTimerGenericCommand+0x30>
	__asm volatile
 801098c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010990:	f383 8811 	msr	BASEPRI, r3
 8010994:	f3bf 8f6f 	isb	sy
 8010998:	f3bf 8f4f 	dsb	sy
 801099c:	623b      	str	r3, [r7, #32]
}
 801099e:	bf00      	nop
 80109a0:	bf00      	nop
 80109a2:	e7fd      	b.n	80109a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80109a4:	4b19      	ldr	r3, [pc, #100]	@ (8010a0c <xTimerGenericCommand+0x98>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d02a      	beq.n	8010a02 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	2b05      	cmp	r3, #5
 80109bc:	dc18      	bgt.n	80109f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80109be:	f7ff fdad 	bl	801051c <xTaskGetSchedulerState>
 80109c2:	4603      	mov	r3, r0
 80109c4:	2b02      	cmp	r3, #2
 80109c6:	d109      	bne.n	80109dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80109c8:	4b10      	ldr	r3, [pc, #64]	@ (8010a0c <xTimerGenericCommand+0x98>)
 80109ca:	6818      	ldr	r0, [r3, #0]
 80109cc:	f107 0110 	add.w	r1, r7, #16
 80109d0:	2300      	movs	r3, #0
 80109d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109d4:	f7fe fa32 	bl	800ee3c <xQueueGenericSend>
 80109d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80109da:	e012      	b.n	8010a02 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80109dc:	4b0b      	ldr	r3, [pc, #44]	@ (8010a0c <xTimerGenericCommand+0x98>)
 80109de:	6818      	ldr	r0, [r3, #0]
 80109e0:	f107 0110 	add.w	r1, r7, #16
 80109e4:	2300      	movs	r3, #0
 80109e6:	2200      	movs	r2, #0
 80109e8:	f7fe fa28 	bl	800ee3c <xQueueGenericSend>
 80109ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80109ee:	e008      	b.n	8010a02 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80109f0:	4b06      	ldr	r3, [pc, #24]	@ (8010a0c <xTimerGenericCommand+0x98>)
 80109f2:	6818      	ldr	r0, [r3, #0]
 80109f4:	f107 0110 	add.w	r1, r7, #16
 80109f8:	2300      	movs	r3, #0
 80109fa:	683a      	ldr	r2, [r7, #0]
 80109fc:	f7fe fb20 	bl	800f040 <xQueueGenericSendFromISR>
 8010a00:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	3728      	adds	r7, #40	@ 0x28
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}
 8010a0c:	240018f8 	.word	0x240018f8

08010a10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b088      	sub	sp, #32
 8010a14:	af02      	add	r7, sp, #8
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a1a:	4b23      	ldr	r3, [pc, #140]	@ (8010aa8 <prvProcessExpiredTimer+0x98>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	68db      	ldr	r3, [r3, #12]
 8010a20:	68db      	ldr	r3, [r3, #12]
 8010a22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	3304      	adds	r3, #4
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7fe f897 	bl	800eb5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010a34:	f003 0304 	and.w	r3, r3, #4
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d023      	beq.n	8010a84 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	699a      	ldr	r2, [r3, #24]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	18d1      	adds	r1, r2, r3
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	683a      	ldr	r2, [r7, #0]
 8010a48:	6978      	ldr	r0, [r7, #20]
 8010a4a:	f000 f8d5 	bl	8010bf8 <prvInsertTimerInActiveList>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d020      	beq.n	8010a96 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a54:	2300      	movs	r3, #0
 8010a56:	9300      	str	r3, [sp, #0]
 8010a58:	2300      	movs	r3, #0
 8010a5a:	687a      	ldr	r2, [r7, #4]
 8010a5c:	2100      	movs	r1, #0
 8010a5e:	6978      	ldr	r0, [r7, #20]
 8010a60:	f7ff ff88 	bl	8010974 <xTimerGenericCommand>
 8010a64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010a66:	693b      	ldr	r3, [r7, #16]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d114      	bne.n	8010a96 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a70:	f383 8811 	msr	BASEPRI, r3
 8010a74:	f3bf 8f6f 	isb	sy
 8010a78:	f3bf 8f4f 	dsb	sy
 8010a7c:	60fb      	str	r3, [r7, #12]
}
 8010a7e:	bf00      	nop
 8010a80:	bf00      	nop
 8010a82:	e7fd      	b.n	8010a80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010a8a:	f023 0301 	bic.w	r3, r3, #1
 8010a8e:	b2da      	uxtb	r2, r3
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	6a1b      	ldr	r3, [r3, #32]
 8010a9a:	6978      	ldr	r0, [r7, #20]
 8010a9c:	4798      	blx	r3
}
 8010a9e:	bf00      	nop
 8010aa0:	3718      	adds	r7, #24
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	240018f0 	.word	0x240018f0

08010aac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b084      	sub	sp, #16
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010ab4:	f107 0308 	add.w	r3, r7, #8
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f000 f859 	bl	8010b70 <prvGetNextExpireTime>
 8010abe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	4619      	mov	r1, r3
 8010ac4:	68f8      	ldr	r0, [r7, #12]
 8010ac6:	f000 f805 	bl	8010ad4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010aca:	f000 f8d7 	bl	8010c7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010ace:	bf00      	nop
 8010ad0:	e7f0      	b.n	8010ab4 <prvTimerTask+0x8>
	...

08010ad4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b084      	sub	sp, #16
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010ade:	f7ff f929 	bl	800fd34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010ae2:	f107 0308 	add.w	r3, r7, #8
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f000 f866 	bl	8010bb8 <prvSampleTimeNow>
 8010aec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d130      	bne.n	8010b56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d10a      	bne.n	8010b10 <prvProcessTimerOrBlockTask+0x3c>
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d806      	bhi.n	8010b10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010b02:	f7ff f925 	bl	800fd50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010b06:	68f9      	ldr	r1, [r7, #12]
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f7ff ff81 	bl	8010a10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010b0e:	e024      	b.n	8010b5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d008      	beq.n	8010b28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010b16:	4b13      	ldr	r3, [pc, #76]	@ (8010b64 <prvProcessTimerOrBlockTask+0x90>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d101      	bne.n	8010b24 <prvProcessTimerOrBlockTask+0x50>
 8010b20:	2301      	movs	r3, #1
 8010b22:	e000      	b.n	8010b26 <prvProcessTimerOrBlockTask+0x52>
 8010b24:	2300      	movs	r3, #0
 8010b26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010b28:	4b0f      	ldr	r3, [pc, #60]	@ (8010b68 <prvProcessTimerOrBlockTask+0x94>)
 8010b2a:	6818      	ldr	r0, [r3, #0]
 8010b2c:	687a      	ldr	r2, [r7, #4]
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	1ad3      	subs	r3, r2, r3
 8010b32:	683a      	ldr	r2, [r7, #0]
 8010b34:	4619      	mov	r1, r3
 8010b36:	f7fe fe65 	bl	800f804 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010b3a:	f7ff f909 	bl	800fd50 <xTaskResumeAll>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d10a      	bne.n	8010b5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010b44:	4b09      	ldr	r3, [pc, #36]	@ (8010b6c <prvProcessTimerOrBlockTask+0x98>)
 8010b46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b4a:	601a      	str	r2, [r3, #0]
 8010b4c:	f3bf 8f4f 	dsb	sy
 8010b50:	f3bf 8f6f 	isb	sy
}
 8010b54:	e001      	b.n	8010b5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010b56:	f7ff f8fb 	bl	800fd50 <xTaskResumeAll>
}
 8010b5a:	bf00      	nop
 8010b5c:	3710      	adds	r7, #16
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	240018f4 	.word	0x240018f4
 8010b68:	240018f8 	.word	0x240018f8
 8010b6c:	e000ed04 	.word	0xe000ed04

08010b70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010b70:	b480      	push	{r7}
 8010b72:	b085      	sub	sp, #20
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010b78:	4b0e      	ldr	r3, [pc, #56]	@ (8010bb4 <prvGetNextExpireTime+0x44>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d101      	bne.n	8010b86 <prvGetNextExpireTime+0x16>
 8010b82:	2201      	movs	r2, #1
 8010b84:	e000      	b.n	8010b88 <prvGetNextExpireTime+0x18>
 8010b86:	2200      	movs	r2, #0
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d105      	bne.n	8010ba0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010b94:	4b07      	ldr	r3, [pc, #28]	@ (8010bb4 <prvGetNextExpireTime+0x44>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	68db      	ldr	r3, [r3, #12]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	60fb      	str	r3, [r7, #12]
 8010b9e:	e001      	b.n	8010ba4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3714      	adds	r7, #20
 8010baa:	46bd      	mov	sp, r7
 8010bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb0:	4770      	bx	lr
 8010bb2:	bf00      	nop
 8010bb4:	240018f0 	.word	0x240018f0

08010bb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b084      	sub	sp, #16
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010bc0:	f7ff f964 	bl	800fe8c <xTaskGetTickCount>
 8010bc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8010bf4 <prvSampleTimeNow+0x3c>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	68fa      	ldr	r2, [r7, #12]
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d205      	bcs.n	8010bdc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010bd0:	f000 f93a 	bl	8010e48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2201      	movs	r2, #1
 8010bd8:	601a      	str	r2, [r3, #0]
 8010bda:	e002      	b.n	8010be2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2200      	movs	r2, #0
 8010be0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010be2:	4a04      	ldr	r2, [pc, #16]	@ (8010bf4 <prvSampleTimeNow+0x3c>)
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010be8:	68fb      	ldr	r3, [r7, #12]
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3710      	adds	r7, #16
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
 8010bf2:	bf00      	nop
 8010bf4:	24001900 	.word	0x24001900

08010bf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b086      	sub	sp, #24
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	60f8      	str	r0, [r7, #12]
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	607a      	str	r2, [r7, #4]
 8010c04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010c06:	2300      	movs	r3, #0
 8010c08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	68ba      	ldr	r2, [r7, #8]
 8010c0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	68fa      	ldr	r2, [r7, #12]
 8010c14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010c16:	68ba      	ldr	r2, [r7, #8]
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d812      	bhi.n	8010c44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	1ad2      	subs	r2, r2, r3
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	699b      	ldr	r3, [r3, #24]
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d302      	bcc.n	8010c32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	617b      	str	r3, [r7, #20]
 8010c30:	e01b      	b.n	8010c6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010c32:	4b10      	ldr	r3, [pc, #64]	@ (8010c74 <prvInsertTimerInActiveList+0x7c>)
 8010c34:	681a      	ldr	r2, [r3, #0]
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	3304      	adds	r3, #4
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	4610      	mov	r0, r2
 8010c3e:	f7fd ff54 	bl	800eaea <vListInsert>
 8010c42:	e012      	b.n	8010c6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010c44:	687a      	ldr	r2, [r7, #4]
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	429a      	cmp	r2, r3
 8010c4a:	d206      	bcs.n	8010c5a <prvInsertTimerInActiveList+0x62>
 8010c4c:	68ba      	ldr	r2, [r7, #8]
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d302      	bcc.n	8010c5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010c54:	2301      	movs	r3, #1
 8010c56:	617b      	str	r3, [r7, #20]
 8010c58:	e007      	b.n	8010c6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c5a:	4b07      	ldr	r3, [pc, #28]	@ (8010c78 <prvInsertTimerInActiveList+0x80>)
 8010c5c:	681a      	ldr	r2, [r3, #0]
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	3304      	adds	r3, #4
 8010c62:	4619      	mov	r1, r3
 8010c64:	4610      	mov	r0, r2
 8010c66:	f7fd ff40 	bl	800eaea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010c6a:	697b      	ldr	r3, [r7, #20]
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3718      	adds	r7, #24
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	240018f4 	.word	0x240018f4
 8010c78:	240018f0 	.word	0x240018f0

08010c7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b08e      	sub	sp, #56	@ 0x38
 8010c80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010c82:	e0ce      	b.n	8010e22 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	da19      	bge.n	8010cbe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010c8a:	1d3b      	adds	r3, r7, #4
 8010c8c:	3304      	adds	r3, #4
 8010c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d10b      	bne.n	8010cae <prvProcessReceivedCommands+0x32>
	__asm volatile
 8010c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c9a:	f383 8811 	msr	BASEPRI, r3
 8010c9e:	f3bf 8f6f 	isb	sy
 8010ca2:	f3bf 8f4f 	dsb	sy
 8010ca6:	61fb      	str	r3, [r7, #28]
}
 8010ca8:	bf00      	nop
 8010caa:	bf00      	nop
 8010cac:	e7fd      	b.n	8010caa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010cb4:	6850      	ldr	r0, [r2, #4]
 8010cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010cb8:	6892      	ldr	r2, [r2, #8]
 8010cba:	4611      	mov	r1, r2
 8010cbc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	f2c0 80ae 	blt.w	8010e22 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ccc:	695b      	ldr	r3, [r3, #20]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d004      	beq.n	8010cdc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cd4:	3304      	adds	r3, #4
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7fd ff40 	bl	800eb5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010cdc:	463b      	mov	r3, r7
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7ff ff6a 	bl	8010bb8 <prvSampleTimeNow>
 8010ce4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2b09      	cmp	r3, #9
 8010cea:	f200 8097 	bhi.w	8010e1c <prvProcessReceivedCommands+0x1a0>
 8010cee:	a201      	add	r2, pc, #4	@ (adr r2, 8010cf4 <prvProcessReceivedCommands+0x78>)
 8010cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cf4:	08010d1d 	.word	0x08010d1d
 8010cf8:	08010d1d 	.word	0x08010d1d
 8010cfc:	08010d1d 	.word	0x08010d1d
 8010d00:	08010d93 	.word	0x08010d93
 8010d04:	08010da7 	.word	0x08010da7
 8010d08:	08010df3 	.word	0x08010df3
 8010d0c:	08010d1d 	.word	0x08010d1d
 8010d10:	08010d1d 	.word	0x08010d1d
 8010d14:	08010d93 	.word	0x08010d93
 8010d18:	08010da7 	.word	0x08010da7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010d22:	f043 0301 	orr.w	r3, r3, #1
 8010d26:	b2da      	uxtb	r2, r3
 8010d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010d2e:	68ba      	ldr	r2, [r7, #8]
 8010d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d32:	699b      	ldr	r3, [r3, #24]
 8010d34:	18d1      	adds	r1, r2, r3
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010d3c:	f7ff ff5c 	bl	8010bf8 <prvInsertTimerInActiveList>
 8010d40:	4603      	mov	r3, r0
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d06c      	beq.n	8010e20 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d48:	6a1b      	ldr	r3, [r3, #32]
 8010d4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010d4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010d54:	f003 0304 	and.w	r3, r3, #4
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d061      	beq.n	8010e20 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010d5c:	68ba      	ldr	r2, [r7, #8]
 8010d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d60:	699b      	ldr	r3, [r3, #24]
 8010d62:	441a      	add	r2, r3
 8010d64:	2300      	movs	r3, #0
 8010d66:	9300      	str	r3, [sp, #0]
 8010d68:	2300      	movs	r3, #0
 8010d6a:	2100      	movs	r1, #0
 8010d6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010d6e:	f7ff fe01 	bl	8010974 <xTimerGenericCommand>
 8010d72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010d74:	6a3b      	ldr	r3, [r7, #32]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d152      	bne.n	8010e20 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d7e:	f383 8811 	msr	BASEPRI, r3
 8010d82:	f3bf 8f6f 	isb	sy
 8010d86:	f3bf 8f4f 	dsb	sy
 8010d8a:	61bb      	str	r3, [r7, #24]
}
 8010d8c:	bf00      	nop
 8010d8e:	bf00      	nop
 8010d90:	e7fd      	b.n	8010d8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010d98:	f023 0301 	bic.w	r3, r3, #1
 8010d9c:	b2da      	uxtb	r2, r3
 8010d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010da0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010da4:	e03d      	b.n	8010e22 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010da8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010dac:	f043 0301 	orr.w	r3, r3, #1
 8010db0:	b2da      	uxtb	r2, r3
 8010db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010db4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010db8:	68ba      	ldr	r2, [r7, #8]
 8010dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dbc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dc0:	699b      	ldr	r3, [r3, #24]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d10b      	bne.n	8010dde <prvProcessReceivedCommands+0x162>
	__asm volatile
 8010dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dca:	f383 8811 	msr	BASEPRI, r3
 8010dce:	f3bf 8f6f 	isb	sy
 8010dd2:	f3bf 8f4f 	dsb	sy
 8010dd6:	617b      	str	r3, [r7, #20]
}
 8010dd8:	bf00      	nop
 8010dda:	bf00      	nop
 8010ddc:	e7fd      	b.n	8010dda <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010de0:	699a      	ldr	r2, [r3, #24]
 8010de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010de4:	18d1      	adds	r1, r2, r3
 8010de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010dec:	f7ff ff04 	bl	8010bf8 <prvInsertTimerInActiveList>
					break;
 8010df0:	e017      	b.n	8010e22 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010df4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010df8:	f003 0302 	and.w	r3, r3, #2
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d103      	bne.n	8010e08 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010e00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e02:	f000 fbe9 	bl	80115d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010e06:	e00c      	b.n	8010e22 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e0e:	f023 0301 	bic.w	r3, r3, #1
 8010e12:	b2da      	uxtb	r2, r3
 8010e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010e1a:	e002      	b.n	8010e22 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8010e1c:	bf00      	nop
 8010e1e:	e000      	b.n	8010e22 <prvProcessReceivedCommands+0x1a6>
					break;
 8010e20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010e22:	4b08      	ldr	r3, [pc, #32]	@ (8010e44 <prvProcessReceivedCommands+0x1c8>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	1d39      	adds	r1, r7, #4
 8010e28:	2200      	movs	r2, #0
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7fe f9a6 	bl	800f17c <xQueueReceive>
 8010e30:	4603      	mov	r3, r0
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	f47f af26 	bne.w	8010c84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010e38:	bf00      	nop
 8010e3a:	bf00      	nop
 8010e3c:	3730      	adds	r7, #48	@ 0x30
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}
 8010e42:	bf00      	nop
 8010e44:	240018f8 	.word	0x240018f8

08010e48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b088      	sub	sp, #32
 8010e4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010e4e:	e049      	b.n	8010ee4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010e50:	4b2e      	ldr	r3, [pc, #184]	@ (8010f0c <prvSwitchTimerLists+0xc4>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	68db      	ldr	r3, [r3, #12]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8010f0c <prvSwitchTimerLists+0xc4>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	3304      	adds	r3, #4
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7fd fe77 	bl	800eb5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	6a1b      	ldr	r3, [r3, #32]
 8010e72:	68f8      	ldr	r0, [r7, #12]
 8010e74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e7c:	f003 0304 	and.w	r3, r3, #4
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d02f      	beq.n	8010ee4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	699b      	ldr	r3, [r3, #24]
 8010e88:	693a      	ldr	r2, [r7, #16]
 8010e8a:	4413      	add	r3, r2
 8010e8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010e8e:	68ba      	ldr	r2, [r7, #8]
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d90e      	bls.n	8010eb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	68ba      	ldr	r2, [r7, #8]
 8010e9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	68fa      	ldr	r2, [r7, #12]
 8010ea0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8010f0c <prvSwitchTimerLists+0xc4>)
 8010ea4:	681a      	ldr	r2, [r3, #0]
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	3304      	adds	r3, #4
 8010eaa:	4619      	mov	r1, r3
 8010eac:	4610      	mov	r0, r2
 8010eae:	f7fd fe1c 	bl	800eaea <vListInsert>
 8010eb2:	e017      	b.n	8010ee4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	9300      	str	r3, [sp, #0]
 8010eb8:	2300      	movs	r3, #0
 8010eba:	693a      	ldr	r2, [r7, #16]
 8010ebc:	2100      	movs	r1, #0
 8010ebe:	68f8      	ldr	r0, [r7, #12]
 8010ec0:	f7ff fd58 	bl	8010974 <xTimerGenericCommand>
 8010ec4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d10b      	bne.n	8010ee4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8010ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ed0:	f383 8811 	msr	BASEPRI, r3
 8010ed4:	f3bf 8f6f 	isb	sy
 8010ed8:	f3bf 8f4f 	dsb	sy
 8010edc:	603b      	str	r3, [r7, #0]
}
 8010ede:	bf00      	nop
 8010ee0:	bf00      	nop
 8010ee2:	e7fd      	b.n	8010ee0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010ee4:	4b09      	ldr	r3, [pc, #36]	@ (8010f0c <prvSwitchTimerLists+0xc4>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d1b0      	bne.n	8010e50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010eee:	4b07      	ldr	r3, [pc, #28]	@ (8010f0c <prvSwitchTimerLists+0xc4>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010ef4:	4b06      	ldr	r3, [pc, #24]	@ (8010f10 <prvSwitchTimerLists+0xc8>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4a04      	ldr	r2, [pc, #16]	@ (8010f0c <prvSwitchTimerLists+0xc4>)
 8010efa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010efc:	4a04      	ldr	r2, [pc, #16]	@ (8010f10 <prvSwitchTimerLists+0xc8>)
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	6013      	str	r3, [r2, #0]
}
 8010f02:	bf00      	nop
 8010f04:	3718      	adds	r7, #24
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
 8010f0a:	bf00      	nop
 8010f0c:	240018f0 	.word	0x240018f0
 8010f10:	240018f4 	.word	0x240018f4

08010f14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010f1a:	f000 f96d 	bl	80111f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010f1e:	4b15      	ldr	r3, [pc, #84]	@ (8010f74 <prvCheckForValidListAndQueue+0x60>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d120      	bne.n	8010f68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010f26:	4814      	ldr	r0, [pc, #80]	@ (8010f78 <prvCheckForValidListAndQueue+0x64>)
 8010f28:	f7fd fd8e 	bl	800ea48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010f2c:	4813      	ldr	r0, [pc, #76]	@ (8010f7c <prvCheckForValidListAndQueue+0x68>)
 8010f2e:	f7fd fd8b 	bl	800ea48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010f32:	4b13      	ldr	r3, [pc, #76]	@ (8010f80 <prvCheckForValidListAndQueue+0x6c>)
 8010f34:	4a10      	ldr	r2, [pc, #64]	@ (8010f78 <prvCheckForValidListAndQueue+0x64>)
 8010f36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010f38:	4b12      	ldr	r3, [pc, #72]	@ (8010f84 <prvCheckForValidListAndQueue+0x70>)
 8010f3a:	4a10      	ldr	r2, [pc, #64]	@ (8010f7c <prvCheckForValidListAndQueue+0x68>)
 8010f3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010f3e:	2300      	movs	r3, #0
 8010f40:	9300      	str	r3, [sp, #0]
 8010f42:	4b11      	ldr	r3, [pc, #68]	@ (8010f88 <prvCheckForValidListAndQueue+0x74>)
 8010f44:	4a11      	ldr	r2, [pc, #68]	@ (8010f8c <prvCheckForValidListAndQueue+0x78>)
 8010f46:	2110      	movs	r1, #16
 8010f48:	200a      	movs	r0, #10
 8010f4a:	f7fd fe9b 	bl	800ec84 <xQueueGenericCreateStatic>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	4a08      	ldr	r2, [pc, #32]	@ (8010f74 <prvCheckForValidListAndQueue+0x60>)
 8010f52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010f54:	4b07      	ldr	r3, [pc, #28]	@ (8010f74 <prvCheckForValidListAndQueue+0x60>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d005      	beq.n	8010f68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010f5c:	4b05      	ldr	r3, [pc, #20]	@ (8010f74 <prvCheckForValidListAndQueue+0x60>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	490b      	ldr	r1, [pc, #44]	@ (8010f90 <prvCheckForValidListAndQueue+0x7c>)
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7fe fc24 	bl	800f7b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010f68:	f000 f978 	bl	801125c <vPortExitCritical>
}
 8010f6c:	bf00      	nop
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	240018f8 	.word	0x240018f8
 8010f78:	240018c8 	.word	0x240018c8
 8010f7c:	240018dc 	.word	0x240018dc
 8010f80:	240018f0 	.word	0x240018f0
 8010f84:	240018f4 	.word	0x240018f4
 8010f88:	240019a4 	.word	0x240019a4
 8010f8c:	24001904 	.word	0x24001904
 8010f90:	08012470 	.word	0x08012470

08010f94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010f94:	b480      	push	{r7}
 8010f96:	b085      	sub	sp, #20
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	60f8      	str	r0, [r7, #12]
 8010f9c:	60b9      	str	r1, [r7, #8]
 8010f9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	3b04      	subs	r3, #4
 8010fa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	3b04      	subs	r3, #4
 8010fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	f023 0201 	bic.w	r2, r3, #1
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	3b04      	subs	r3, #4
 8010fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010fc4:	4a0c      	ldr	r2, [pc, #48]	@ (8010ff8 <pxPortInitialiseStack+0x64>)
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	3b14      	subs	r3, #20
 8010fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010fd0:	687a      	ldr	r2, [r7, #4]
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	3b04      	subs	r3, #4
 8010fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	f06f 0202 	mvn.w	r2, #2
 8010fe2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	3b20      	subs	r3, #32
 8010fe8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010fea:	68fb      	ldr	r3, [r7, #12]
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3714      	adds	r7, #20
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr
 8010ff8:	08010ffd 	.word	0x08010ffd

08010ffc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b085      	sub	sp, #20
 8011000:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011002:	2300      	movs	r3, #0
 8011004:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011006:	4b13      	ldr	r3, [pc, #76]	@ (8011054 <prvTaskExitError+0x58>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801100e:	d00b      	beq.n	8011028 <prvTaskExitError+0x2c>
	__asm volatile
 8011010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011014:	f383 8811 	msr	BASEPRI, r3
 8011018:	f3bf 8f6f 	isb	sy
 801101c:	f3bf 8f4f 	dsb	sy
 8011020:	60fb      	str	r3, [r7, #12]
}
 8011022:	bf00      	nop
 8011024:	bf00      	nop
 8011026:	e7fd      	b.n	8011024 <prvTaskExitError+0x28>
	__asm volatile
 8011028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801102c:	f383 8811 	msr	BASEPRI, r3
 8011030:	f3bf 8f6f 	isb	sy
 8011034:	f3bf 8f4f 	dsb	sy
 8011038:	60bb      	str	r3, [r7, #8]
}
 801103a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801103c:	bf00      	nop
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d0fc      	beq.n	801103e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011044:	bf00      	nop
 8011046:	bf00      	nop
 8011048:	3714      	adds	r7, #20
 801104a:	46bd      	mov	sp, r7
 801104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011050:	4770      	bx	lr
 8011052:	bf00      	nop
 8011054:	2400009c 	.word	0x2400009c
	...

08011060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011060:	4b07      	ldr	r3, [pc, #28]	@ (8011080 <pxCurrentTCBConst2>)
 8011062:	6819      	ldr	r1, [r3, #0]
 8011064:	6808      	ldr	r0, [r1, #0]
 8011066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801106a:	f380 8809 	msr	PSP, r0
 801106e:	f3bf 8f6f 	isb	sy
 8011072:	f04f 0000 	mov.w	r0, #0
 8011076:	f380 8811 	msr	BASEPRI, r0
 801107a:	4770      	bx	lr
 801107c:	f3af 8000 	nop.w

08011080 <pxCurrentTCBConst2>:
 8011080:	240013c8 	.word	0x240013c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011084:	bf00      	nop
 8011086:	bf00      	nop

08011088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011088:	4808      	ldr	r0, [pc, #32]	@ (80110ac <prvPortStartFirstTask+0x24>)
 801108a:	6800      	ldr	r0, [r0, #0]
 801108c:	6800      	ldr	r0, [r0, #0]
 801108e:	f380 8808 	msr	MSP, r0
 8011092:	f04f 0000 	mov.w	r0, #0
 8011096:	f380 8814 	msr	CONTROL, r0
 801109a:	b662      	cpsie	i
 801109c:	b661      	cpsie	f
 801109e:	f3bf 8f4f 	dsb	sy
 80110a2:	f3bf 8f6f 	isb	sy
 80110a6:	df00      	svc	0
 80110a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80110aa:	bf00      	nop
 80110ac:	e000ed08 	.word	0xe000ed08

080110b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b086      	sub	sp, #24
 80110b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80110b6:	4b47      	ldr	r3, [pc, #284]	@ (80111d4 <xPortStartScheduler+0x124>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	4a47      	ldr	r2, [pc, #284]	@ (80111d8 <xPortStartScheduler+0x128>)
 80110bc:	4293      	cmp	r3, r2
 80110be:	d10b      	bne.n	80110d8 <xPortStartScheduler+0x28>
	__asm volatile
 80110c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110c4:	f383 8811 	msr	BASEPRI, r3
 80110c8:	f3bf 8f6f 	isb	sy
 80110cc:	f3bf 8f4f 	dsb	sy
 80110d0:	613b      	str	r3, [r7, #16]
}
 80110d2:	bf00      	nop
 80110d4:	bf00      	nop
 80110d6:	e7fd      	b.n	80110d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80110d8:	4b3e      	ldr	r3, [pc, #248]	@ (80111d4 <xPortStartScheduler+0x124>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	4a3f      	ldr	r2, [pc, #252]	@ (80111dc <xPortStartScheduler+0x12c>)
 80110de:	4293      	cmp	r3, r2
 80110e0:	d10b      	bne.n	80110fa <xPortStartScheduler+0x4a>
	__asm volatile
 80110e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110e6:	f383 8811 	msr	BASEPRI, r3
 80110ea:	f3bf 8f6f 	isb	sy
 80110ee:	f3bf 8f4f 	dsb	sy
 80110f2:	60fb      	str	r3, [r7, #12]
}
 80110f4:	bf00      	nop
 80110f6:	bf00      	nop
 80110f8:	e7fd      	b.n	80110f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80110fa:	4b39      	ldr	r3, [pc, #228]	@ (80111e0 <xPortStartScheduler+0x130>)
 80110fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	781b      	ldrb	r3, [r3, #0]
 8011102:	b2db      	uxtb	r3, r3
 8011104:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011106:	697b      	ldr	r3, [r7, #20]
 8011108:	22ff      	movs	r2, #255	@ 0xff
 801110a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	b2db      	uxtb	r3, r3
 8011112:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011114:	78fb      	ldrb	r3, [r7, #3]
 8011116:	b2db      	uxtb	r3, r3
 8011118:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801111c:	b2da      	uxtb	r2, r3
 801111e:	4b31      	ldr	r3, [pc, #196]	@ (80111e4 <xPortStartScheduler+0x134>)
 8011120:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011122:	4b31      	ldr	r3, [pc, #196]	@ (80111e8 <xPortStartScheduler+0x138>)
 8011124:	2207      	movs	r2, #7
 8011126:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011128:	e009      	b.n	801113e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801112a:	4b2f      	ldr	r3, [pc, #188]	@ (80111e8 <xPortStartScheduler+0x138>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	3b01      	subs	r3, #1
 8011130:	4a2d      	ldr	r2, [pc, #180]	@ (80111e8 <xPortStartScheduler+0x138>)
 8011132:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011134:	78fb      	ldrb	r3, [r7, #3]
 8011136:	b2db      	uxtb	r3, r3
 8011138:	005b      	lsls	r3, r3, #1
 801113a:	b2db      	uxtb	r3, r3
 801113c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801113e:	78fb      	ldrb	r3, [r7, #3]
 8011140:	b2db      	uxtb	r3, r3
 8011142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011146:	2b80      	cmp	r3, #128	@ 0x80
 8011148:	d0ef      	beq.n	801112a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801114a:	4b27      	ldr	r3, [pc, #156]	@ (80111e8 <xPortStartScheduler+0x138>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	f1c3 0307 	rsb	r3, r3, #7
 8011152:	2b04      	cmp	r3, #4
 8011154:	d00b      	beq.n	801116e <xPortStartScheduler+0xbe>
	__asm volatile
 8011156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801115a:	f383 8811 	msr	BASEPRI, r3
 801115e:	f3bf 8f6f 	isb	sy
 8011162:	f3bf 8f4f 	dsb	sy
 8011166:	60bb      	str	r3, [r7, #8]
}
 8011168:	bf00      	nop
 801116a:	bf00      	nop
 801116c:	e7fd      	b.n	801116a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801116e:	4b1e      	ldr	r3, [pc, #120]	@ (80111e8 <xPortStartScheduler+0x138>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	021b      	lsls	r3, r3, #8
 8011174:	4a1c      	ldr	r2, [pc, #112]	@ (80111e8 <xPortStartScheduler+0x138>)
 8011176:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011178:	4b1b      	ldr	r3, [pc, #108]	@ (80111e8 <xPortStartScheduler+0x138>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011180:	4a19      	ldr	r2, [pc, #100]	@ (80111e8 <xPortStartScheduler+0x138>)
 8011182:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	b2da      	uxtb	r2, r3
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801118c:	4b17      	ldr	r3, [pc, #92]	@ (80111ec <xPortStartScheduler+0x13c>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	4a16      	ldr	r2, [pc, #88]	@ (80111ec <xPortStartScheduler+0x13c>)
 8011192:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011196:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011198:	4b14      	ldr	r3, [pc, #80]	@ (80111ec <xPortStartScheduler+0x13c>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	4a13      	ldr	r2, [pc, #76]	@ (80111ec <xPortStartScheduler+0x13c>)
 801119e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80111a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80111a4:	f000 f8da 	bl	801135c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80111a8:	4b11      	ldr	r3, [pc, #68]	@ (80111f0 <xPortStartScheduler+0x140>)
 80111aa:	2200      	movs	r2, #0
 80111ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80111ae:	f000 f8f9 	bl	80113a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80111b2:	4b10      	ldr	r3, [pc, #64]	@ (80111f4 <xPortStartScheduler+0x144>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	4a0f      	ldr	r2, [pc, #60]	@ (80111f4 <xPortStartScheduler+0x144>)
 80111b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80111bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80111be:	f7ff ff63 	bl	8011088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80111c2:	f7fe ff2d 	bl	8010020 <vTaskSwitchContext>
	prvTaskExitError();
 80111c6:	f7ff ff19 	bl	8010ffc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80111ca:	2300      	movs	r3, #0
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3718      	adds	r7, #24
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}
 80111d4:	e000ed00 	.word	0xe000ed00
 80111d8:	410fc271 	.word	0x410fc271
 80111dc:	410fc270 	.word	0x410fc270
 80111e0:	e000e400 	.word	0xe000e400
 80111e4:	240019f4 	.word	0x240019f4
 80111e8:	240019f8 	.word	0x240019f8
 80111ec:	e000ed20 	.word	0xe000ed20
 80111f0:	2400009c 	.word	0x2400009c
 80111f4:	e000ef34 	.word	0xe000ef34

080111f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80111f8:	b480      	push	{r7}
 80111fa:	b083      	sub	sp, #12
 80111fc:	af00      	add	r7, sp, #0
	__asm volatile
 80111fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011202:	f383 8811 	msr	BASEPRI, r3
 8011206:	f3bf 8f6f 	isb	sy
 801120a:	f3bf 8f4f 	dsb	sy
 801120e:	607b      	str	r3, [r7, #4]
}
 8011210:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011212:	4b10      	ldr	r3, [pc, #64]	@ (8011254 <vPortEnterCritical+0x5c>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	3301      	adds	r3, #1
 8011218:	4a0e      	ldr	r2, [pc, #56]	@ (8011254 <vPortEnterCritical+0x5c>)
 801121a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801121c:	4b0d      	ldr	r3, [pc, #52]	@ (8011254 <vPortEnterCritical+0x5c>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	2b01      	cmp	r3, #1
 8011222:	d110      	bne.n	8011246 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011224:	4b0c      	ldr	r3, [pc, #48]	@ (8011258 <vPortEnterCritical+0x60>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	b2db      	uxtb	r3, r3
 801122a:	2b00      	cmp	r3, #0
 801122c:	d00b      	beq.n	8011246 <vPortEnterCritical+0x4e>
	__asm volatile
 801122e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011232:	f383 8811 	msr	BASEPRI, r3
 8011236:	f3bf 8f6f 	isb	sy
 801123a:	f3bf 8f4f 	dsb	sy
 801123e:	603b      	str	r3, [r7, #0]
}
 8011240:	bf00      	nop
 8011242:	bf00      	nop
 8011244:	e7fd      	b.n	8011242 <vPortEnterCritical+0x4a>
	}
}
 8011246:	bf00      	nop
 8011248:	370c      	adds	r7, #12
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr
 8011252:	bf00      	nop
 8011254:	2400009c 	.word	0x2400009c
 8011258:	e000ed04 	.word	0xe000ed04

0801125c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801125c:	b480      	push	{r7}
 801125e:	b083      	sub	sp, #12
 8011260:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011262:	4b12      	ldr	r3, [pc, #72]	@ (80112ac <vPortExitCritical+0x50>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d10b      	bne.n	8011282 <vPortExitCritical+0x26>
	__asm volatile
 801126a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801126e:	f383 8811 	msr	BASEPRI, r3
 8011272:	f3bf 8f6f 	isb	sy
 8011276:	f3bf 8f4f 	dsb	sy
 801127a:	607b      	str	r3, [r7, #4]
}
 801127c:	bf00      	nop
 801127e:	bf00      	nop
 8011280:	e7fd      	b.n	801127e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011282:	4b0a      	ldr	r3, [pc, #40]	@ (80112ac <vPortExitCritical+0x50>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	3b01      	subs	r3, #1
 8011288:	4a08      	ldr	r2, [pc, #32]	@ (80112ac <vPortExitCritical+0x50>)
 801128a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801128c:	4b07      	ldr	r3, [pc, #28]	@ (80112ac <vPortExitCritical+0x50>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d105      	bne.n	80112a0 <vPortExitCritical+0x44>
 8011294:	2300      	movs	r3, #0
 8011296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	f383 8811 	msr	BASEPRI, r3
}
 801129e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80112a0:	bf00      	nop
 80112a2:	370c      	adds	r7, #12
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr
 80112ac:	2400009c 	.word	0x2400009c

080112b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80112b0:	f3ef 8009 	mrs	r0, PSP
 80112b4:	f3bf 8f6f 	isb	sy
 80112b8:	4b15      	ldr	r3, [pc, #84]	@ (8011310 <pxCurrentTCBConst>)
 80112ba:	681a      	ldr	r2, [r3, #0]
 80112bc:	f01e 0f10 	tst.w	lr, #16
 80112c0:	bf08      	it	eq
 80112c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80112c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ca:	6010      	str	r0, [r2, #0]
 80112cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80112d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80112d4:	f380 8811 	msr	BASEPRI, r0
 80112d8:	f3bf 8f4f 	dsb	sy
 80112dc:	f3bf 8f6f 	isb	sy
 80112e0:	f7fe fe9e 	bl	8010020 <vTaskSwitchContext>
 80112e4:	f04f 0000 	mov.w	r0, #0
 80112e8:	f380 8811 	msr	BASEPRI, r0
 80112ec:	bc09      	pop	{r0, r3}
 80112ee:	6819      	ldr	r1, [r3, #0]
 80112f0:	6808      	ldr	r0, [r1, #0]
 80112f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112f6:	f01e 0f10 	tst.w	lr, #16
 80112fa:	bf08      	it	eq
 80112fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011300:	f380 8809 	msr	PSP, r0
 8011304:	f3bf 8f6f 	isb	sy
 8011308:	4770      	bx	lr
 801130a:	bf00      	nop
 801130c:	f3af 8000 	nop.w

08011310 <pxCurrentTCBConst>:
 8011310:	240013c8 	.word	0x240013c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011314:	bf00      	nop
 8011316:	bf00      	nop

08011318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b082      	sub	sp, #8
 801131c:	af00      	add	r7, sp, #0
	__asm volatile
 801131e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011322:	f383 8811 	msr	BASEPRI, r3
 8011326:	f3bf 8f6f 	isb	sy
 801132a:	f3bf 8f4f 	dsb	sy
 801132e:	607b      	str	r3, [r7, #4]
}
 8011330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011332:	f7fe fdbb 	bl	800feac <xTaskIncrementTick>
 8011336:	4603      	mov	r3, r0
 8011338:	2b00      	cmp	r3, #0
 801133a:	d003      	beq.n	8011344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801133c:	4b06      	ldr	r3, [pc, #24]	@ (8011358 <xPortSysTickHandler+0x40>)
 801133e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011342:	601a      	str	r2, [r3, #0]
 8011344:	2300      	movs	r3, #0
 8011346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	f383 8811 	msr	BASEPRI, r3
}
 801134e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011350:	bf00      	nop
 8011352:	3708      	adds	r7, #8
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}
 8011358:	e000ed04 	.word	0xe000ed04

0801135c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801135c:	b480      	push	{r7}
 801135e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011360:	4b0b      	ldr	r3, [pc, #44]	@ (8011390 <vPortSetupTimerInterrupt+0x34>)
 8011362:	2200      	movs	r2, #0
 8011364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011366:	4b0b      	ldr	r3, [pc, #44]	@ (8011394 <vPortSetupTimerInterrupt+0x38>)
 8011368:	2200      	movs	r2, #0
 801136a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801136c:	4b0a      	ldr	r3, [pc, #40]	@ (8011398 <vPortSetupTimerInterrupt+0x3c>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	4a0a      	ldr	r2, [pc, #40]	@ (801139c <vPortSetupTimerInterrupt+0x40>)
 8011372:	fba2 2303 	umull	r2, r3, r2, r3
 8011376:	099b      	lsrs	r3, r3, #6
 8011378:	4a09      	ldr	r2, [pc, #36]	@ (80113a0 <vPortSetupTimerInterrupt+0x44>)
 801137a:	3b01      	subs	r3, #1
 801137c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801137e:	4b04      	ldr	r3, [pc, #16]	@ (8011390 <vPortSetupTimerInterrupt+0x34>)
 8011380:	2207      	movs	r2, #7
 8011382:	601a      	str	r2, [r3, #0]
}
 8011384:	bf00      	nop
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr
 801138e:	bf00      	nop
 8011390:	e000e010 	.word	0xe000e010
 8011394:	e000e018 	.word	0xe000e018
 8011398:	24000000 	.word	0x24000000
 801139c:	10624dd3 	.word	0x10624dd3
 80113a0:	e000e014 	.word	0xe000e014

080113a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80113a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80113b4 <vPortEnableVFP+0x10>
 80113a8:	6801      	ldr	r1, [r0, #0]
 80113aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80113ae:	6001      	str	r1, [r0, #0]
 80113b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80113b2:	bf00      	nop
 80113b4:	e000ed88 	.word	0xe000ed88

080113b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80113b8:	b480      	push	{r7}
 80113ba:	b085      	sub	sp, #20
 80113bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80113be:	f3ef 8305 	mrs	r3, IPSR
 80113c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	2b0f      	cmp	r3, #15
 80113c8:	d915      	bls.n	80113f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80113ca:	4a18      	ldr	r2, [pc, #96]	@ (801142c <vPortValidateInterruptPriority+0x74>)
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	4413      	add	r3, r2
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80113d4:	4b16      	ldr	r3, [pc, #88]	@ (8011430 <vPortValidateInterruptPriority+0x78>)
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	7afa      	ldrb	r2, [r7, #11]
 80113da:	429a      	cmp	r2, r3
 80113dc:	d20b      	bcs.n	80113f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80113de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113e2:	f383 8811 	msr	BASEPRI, r3
 80113e6:	f3bf 8f6f 	isb	sy
 80113ea:	f3bf 8f4f 	dsb	sy
 80113ee:	607b      	str	r3, [r7, #4]
}
 80113f0:	bf00      	nop
 80113f2:	bf00      	nop
 80113f4:	e7fd      	b.n	80113f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80113f6:	4b0f      	ldr	r3, [pc, #60]	@ (8011434 <vPortValidateInterruptPriority+0x7c>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80113fe:	4b0e      	ldr	r3, [pc, #56]	@ (8011438 <vPortValidateInterruptPriority+0x80>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	429a      	cmp	r2, r3
 8011404:	d90b      	bls.n	801141e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801140a:	f383 8811 	msr	BASEPRI, r3
 801140e:	f3bf 8f6f 	isb	sy
 8011412:	f3bf 8f4f 	dsb	sy
 8011416:	603b      	str	r3, [r7, #0]
}
 8011418:	bf00      	nop
 801141a:	bf00      	nop
 801141c:	e7fd      	b.n	801141a <vPortValidateInterruptPriority+0x62>
	}
 801141e:	bf00      	nop
 8011420:	3714      	adds	r7, #20
 8011422:	46bd      	mov	sp, r7
 8011424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011428:	4770      	bx	lr
 801142a:	bf00      	nop
 801142c:	e000e3f0 	.word	0xe000e3f0
 8011430:	240019f4 	.word	0x240019f4
 8011434:	e000ed0c 	.word	0xe000ed0c
 8011438:	240019f8 	.word	0x240019f8

0801143c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b08a      	sub	sp, #40	@ 0x28
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011444:	2300      	movs	r3, #0
 8011446:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011448:	f7fe fc74 	bl	800fd34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801144c:	4b5c      	ldr	r3, [pc, #368]	@ (80115c0 <pvPortMalloc+0x184>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d101      	bne.n	8011458 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011454:	f000 f924 	bl	80116a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011458:	4b5a      	ldr	r3, [pc, #360]	@ (80115c4 <pvPortMalloc+0x188>)
 801145a:	681a      	ldr	r2, [r3, #0]
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	4013      	ands	r3, r2
 8011460:	2b00      	cmp	r3, #0
 8011462:	f040 8095 	bne.w	8011590 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d01e      	beq.n	80114aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801146c:	2208      	movs	r2, #8
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	4413      	add	r3, r2
 8011472:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f003 0307 	and.w	r3, r3, #7
 801147a:	2b00      	cmp	r3, #0
 801147c:	d015      	beq.n	80114aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f023 0307 	bic.w	r3, r3, #7
 8011484:	3308      	adds	r3, #8
 8011486:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f003 0307 	and.w	r3, r3, #7
 801148e:	2b00      	cmp	r3, #0
 8011490:	d00b      	beq.n	80114aa <pvPortMalloc+0x6e>
	__asm volatile
 8011492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011496:	f383 8811 	msr	BASEPRI, r3
 801149a:	f3bf 8f6f 	isb	sy
 801149e:	f3bf 8f4f 	dsb	sy
 80114a2:	617b      	str	r3, [r7, #20]
}
 80114a4:	bf00      	nop
 80114a6:	bf00      	nop
 80114a8:	e7fd      	b.n	80114a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d06f      	beq.n	8011590 <pvPortMalloc+0x154>
 80114b0:	4b45      	ldr	r3, [pc, #276]	@ (80115c8 <pvPortMalloc+0x18c>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	687a      	ldr	r2, [r7, #4]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d86a      	bhi.n	8011590 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80114ba:	4b44      	ldr	r3, [pc, #272]	@ (80115cc <pvPortMalloc+0x190>)
 80114bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80114be:	4b43      	ldr	r3, [pc, #268]	@ (80115cc <pvPortMalloc+0x190>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80114c4:	e004      	b.n	80114d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80114c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80114ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80114d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d2:	685b      	ldr	r3, [r3, #4]
 80114d4:	687a      	ldr	r2, [r7, #4]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d903      	bls.n	80114e2 <pvPortMalloc+0xa6>
 80114da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d1f1      	bne.n	80114c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80114e2:	4b37      	ldr	r3, [pc, #220]	@ (80115c0 <pvPortMalloc+0x184>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d051      	beq.n	8011590 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80114ec:	6a3b      	ldr	r3, [r7, #32]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	2208      	movs	r2, #8
 80114f2:	4413      	add	r3, r2
 80114f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80114f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114f8:	681a      	ldr	r2, [r3, #0]
 80114fa:	6a3b      	ldr	r3, [r7, #32]
 80114fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80114fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011500:	685a      	ldr	r2, [r3, #4]
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	1ad2      	subs	r2, r2, r3
 8011506:	2308      	movs	r3, #8
 8011508:	005b      	lsls	r3, r3, #1
 801150a:	429a      	cmp	r2, r3
 801150c:	d920      	bls.n	8011550 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801150e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	4413      	add	r3, r2
 8011514:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011516:	69bb      	ldr	r3, [r7, #24]
 8011518:	f003 0307 	and.w	r3, r3, #7
 801151c:	2b00      	cmp	r3, #0
 801151e:	d00b      	beq.n	8011538 <pvPortMalloc+0xfc>
	__asm volatile
 8011520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011524:	f383 8811 	msr	BASEPRI, r3
 8011528:	f3bf 8f6f 	isb	sy
 801152c:	f3bf 8f4f 	dsb	sy
 8011530:	613b      	str	r3, [r7, #16]
}
 8011532:	bf00      	nop
 8011534:	bf00      	nop
 8011536:	e7fd      	b.n	8011534 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801153a:	685a      	ldr	r2, [r3, #4]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	1ad2      	subs	r2, r2, r3
 8011540:	69bb      	ldr	r3, [r7, #24]
 8011542:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011546:	687a      	ldr	r2, [r7, #4]
 8011548:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801154a:	69b8      	ldr	r0, [r7, #24]
 801154c:	f000 f90a 	bl	8011764 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011550:	4b1d      	ldr	r3, [pc, #116]	@ (80115c8 <pvPortMalloc+0x18c>)
 8011552:	681a      	ldr	r2, [r3, #0]
 8011554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011556:	685b      	ldr	r3, [r3, #4]
 8011558:	1ad3      	subs	r3, r2, r3
 801155a:	4a1b      	ldr	r2, [pc, #108]	@ (80115c8 <pvPortMalloc+0x18c>)
 801155c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801155e:	4b1a      	ldr	r3, [pc, #104]	@ (80115c8 <pvPortMalloc+0x18c>)
 8011560:	681a      	ldr	r2, [r3, #0]
 8011562:	4b1b      	ldr	r3, [pc, #108]	@ (80115d0 <pvPortMalloc+0x194>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	429a      	cmp	r2, r3
 8011568:	d203      	bcs.n	8011572 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801156a:	4b17      	ldr	r3, [pc, #92]	@ (80115c8 <pvPortMalloc+0x18c>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	4a18      	ldr	r2, [pc, #96]	@ (80115d0 <pvPortMalloc+0x194>)
 8011570:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011574:	685a      	ldr	r2, [r3, #4]
 8011576:	4b13      	ldr	r3, [pc, #76]	@ (80115c4 <pvPortMalloc+0x188>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	431a      	orrs	r2, r3
 801157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801157e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011582:	2200      	movs	r2, #0
 8011584:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011586:	4b13      	ldr	r3, [pc, #76]	@ (80115d4 <pvPortMalloc+0x198>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	3301      	adds	r3, #1
 801158c:	4a11      	ldr	r2, [pc, #68]	@ (80115d4 <pvPortMalloc+0x198>)
 801158e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011590:	f7fe fbde 	bl	800fd50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	f003 0307 	and.w	r3, r3, #7
 801159a:	2b00      	cmp	r3, #0
 801159c:	d00b      	beq.n	80115b6 <pvPortMalloc+0x17a>
	__asm volatile
 801159e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115a2:	f383 8811 	msr	BASEPRI, r3
 80115a6:	f3bf 8f6f 	isb	sy
 80115aa:	f3bf 8f4f 	dsb	sy
 80115ae:	60fb      	str	r3, [r7, #12]
}
 80115b0:	bf00      	nop
 80115b2:	bf00      	nop
 80115b4:	e7fd      	b.n	80115b2 <pvPortMalloc+0x176>
	return pvReturn;
 80115b6:	69fb      	ldr	r3, [r7, #28]
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3728      	adds	r7, #40	@ 0x28
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}
 80115c0:	24005604 	.word	0x24005604
 80115c4:	24005618 	.word	0x24005618
 80115c8:	24005608 	.word	0x24005608
 80115cc:	240055fc 	.word	0x240055fc
 80115d0:	2400560c 	.word	0x2400560c
 80115d4:	24005610 	.word	0x24005610

080115d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b086      	sub	sp, #24
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d04f      	beq.n	801168a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80115ea:	2308      	movs	r3, #8
 80115ec:	425b      	negs	r3, r3
 80115ee:	697a      	ldr	r2, [r7, #20]
 80115f0:	4413      	add	r3, r2
 80115f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80115f8:	693b      	ldr	r3, [r7, #16]
 80115fa:	685a      	ldr	r2, [r3, #4]
 80115fc:	4b25      	ldr	r3, [pc, #148]	@ (8011694 <vPortFree+0xbc>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	4013      	ands	r3, r2
 8011602:	2b00      	cmp	r3, #0
 8011604:	d10b      	bne.n	801161e <vPortFree+0x46>
	__asm volatile
 8011606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801160a:	f383 8811 	msr	BASEPRI, r3
 801160e:	f3bf 8f6f 	isb	sy
 8011612:	f3bf 8f4f 	dsb	sy
 8011616:	60fb      	str	r3, [r7, #12]
}
 8011618:	bf00      	nop
 801161a:	bf00      	nop
 801161c:	e7fd      	b.n	801161a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d00b      	beq.n	801163e <vPortFree+0x66>
	__asm volatile
 8011626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801162a:	f383 8811 	msr	BASEPRI, r3
 801162e:	f3bf 8f6f 	isb	sy
 8011632:	f3bf 8f4f 	dsb	sy
 8011636:	60bb      	str	r3, [r7, #8]
}
 8011638:	bf00      	nop
 801163a:	bf00      	nop
 801163c:	e7fd      	b.n	801163a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801163e:	693b      	ldr	r3, [r7, #16]
 8011640:	685a      	ldr	r2, [r3, #4]
 8011642:	4b14      	ldr	r3, [pc, #80]	@ (8011694 <vPortFree+0xbc>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	4013      	ands	r3, r2
 8011648:	2b00      	cmp	r3, #0
 801164a:	d01e      	beq.n	801168a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801164c:	693b      	ldr	r3, [r7, #16]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d11a      	bne.n	801168a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011654:	693b      	ldr	r3, [r7, #16]
 8011656:	685a      	ldr	r2, [r3, #4]
 8011658:	4b0e      	ldr	r3, [pc, #56]	@ (8011694 <vPortFree+0xbc>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	43db      	mvns	r3, r3
 801165e:	401a      	ands	r2, r3
 8011660:	693b      	ldr	r3, [r7, #16]
 8011662:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011664:	f7fe fb66 	bl	800fd34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	685a      	ldr	r2, [r3, #4]
 801166c:	4b0a      	ldr	r3, [pc, #40]	@ (8011698 <vPortFree+0xc0>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4413      	add	r3, r2
 8011672:	4a09      	ldr	r2, [pc, #36]	@ (8011698 <vPortFree+0xc0>)
 8011674:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011676:	6938      	ldr	r0, [r7, #16]
 8011678:	f000 f874 	bl	8011764 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801167c:	4b07      	ldr	r3, [pc, #28]	@ (801169c <vPortFree+0xc4>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	3301      	adds	r3, #1
 8011682:	4a06      	ldr	r2, [pc, #24]	@ (801169c <vPortFree+0xc4>)
 8011684:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011686:	f7fe fb63 	bl	800fd50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801168a:	bf00      	nop
 801168c:	3718      	adds	r7, #24
 801168e:	46bd      	mov	sp, r7
 8011690:	bd80      	pop	{r7, pc}
 8011692:	bf00      	nop
 8011694:	24005618 	.word	0x24005618
 8011698:	24005608 	.word	0x24005608
 801169c:	24005614 	.word	0x24005614

080116a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80116a0:	b480      	push	{r7}
 80116a2:	b085      	sub	sp, #20
 80116a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80116a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80116aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80116ac:	4b27      	ldr	r3, [pc, #156]	@ (801174c <prvHeapInit+0xac>)
 80116ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	f003 0307 	and.w	r3, r3, #7
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d00c      	beq.n	80116d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	3307      	adds	r3, #7
 80116be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	f023 0307 	bic.w	r3, r3, #7
 80116c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80116c8:	68ba      	ldr	r2, [r7, #8]
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	1ad3      	subs	r3, r2, r3
 80116ce:	4a1f      	ldr	r2, [pc, #124]	@ (801174c <prvHeapInit+0xac>)
 80116d0:	4413      	add	r3, r2
 80116d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80116d8:	4a1d      	ldr	r2, [pc, #116]	@ (8011750 <prvHeapInit+0xb0>)
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80116de:	4b1c      	ldr	r3, [pc, #112]	@ (8011750 <prvHeapInit+0xb0>)
 80116e0:	2200      	movs	r2, #0
 80116e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	68ba      	ldr	r2, [r7, #8]
 80116e8:	4413      	add	r3, r2
 80116ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80116ec:	2208      	movs	r2, #8
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	1a9b      	subs	r3, r3, r2
 80116f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	f023 0307 	bic.w	r3, r3, #7
 80116fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	4a15      	ldr	r2, [pc, #84]	@ (8011754 <prvHeapInit+0xb4>)
 8011700:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011702:	4b14      	ldr	r3, [pc, #80]	@ (8011754 <prvHeapInit+0xb4>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	2200      	movs	r2, #0
 8011708:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801170a:	4b12      	ldr	r3, [pc, #72]	@ (8011754 <prvHeapInit+0xb4>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	2200      	movs	r2, #0
 8011710:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	68fa      	ldr	r2, [r7, #12]
 801171a:	1ad2      	subs	r2, r2, r3
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011720:	4b0c      	ldr	r3, [pc, #48]	@ (8011754 <prvHeapInit+0xb4>)
 8011722:	681a      	ldr	r2, [r3, #0]
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	685b      	ldr	r3, [r3, #4]
 801172c:	4a0a      	ldr	r2, [pc, #40]	@ (8011758 <prvHeapInit+0xb8>)
 801172e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	685b      	ldr	r3, [r3, #4]
 8011734:	4a09      	ldr	r2, [pc, #36]	@ (801175c <prvHeapInit+0xbc>)
 8011736:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011738:	4b09      	ldr	r3, [pc, #36]	@ (8011760 <prvHeapInit+0xc0>)
 801173a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801173e:	601a      	str	r2, [r3, #0]
}
 8011740:	bf00      	nop
 8011742:	3714      	adds	r7, #20
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr
 801174c:	240019fc 	.word	0x240019fc
 8011750:	240055fc 	.word	0x240055fc
 8011754:	24005604 	.word	0x24005604
 8011758:	2400560c 	.word	0x2400560c
 801175c:	24005608 	.word	0x24005608
 8011760:	24005618 	.word	0x24005618

08011764 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011764:	b480      	push	{r7}
 8011766:	b085      	sub	sp, #20
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801176c:	4b28      	ldr	r3, [pc, #160]	@ (8011810 <prvInsertBlockIntoFreeList+0xac>)
 801176e:	60fb      	str	r3, [r7, #12]
 8011770:	e002      	b.n	8011778 <prvInsertBlockIntoFreeList+0x14>
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	60fb      	str	r3, [r7, #12]
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	687a      	ldr	r2, [r7, #4]
 801177e:	429a      	cmp	r2, r3
 8011780:	d8f7      	bhi.n	8011772 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	68ba      	ldr	r2, [r7, #8]
 801178c:	4413      	add	r3, r2
 801178e:	687a      	ldr	r2, [r7, #4]
 8011790:	429a      	cmp	r2, r3
 8011792:	d108      	bne.n	80117a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	685a      	ldr	r2, [r3, #4]
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	441a      	add	r2, r3
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	685b      	ldr	r3, [r3, #4]
 80117ae:	68ba      	ldr	r2, [r7, #8]
 80117b0:	441a      	add	r2, r3
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d118      	bne.n	80117ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	681a      	ldr	r2, [r3, #0]
 80117be:	4b15      	ldr	r3, [pc, #84]	@ (8011814 <prvInsertBlockIntoFreeList+0xb0>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d00d      	beq.n	80117e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	685a      	ldr	r2, [r3, #4]
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	685b      	ldr	r3, [r3, #4]
 80117d0:	441a      	add	r2, r3
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	681a      	ldr	r2, [r3, #0]
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	601a      	str	r2, [r3, #0]
 80117e0:	e008      	b.n	80117f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80117e2:	4b0c      	ldr	r3, [pc, #48]	@ (8011814 <prvInsertBlockIntoFreeList+0xb0>)
 80117e4:	681a      	ldr	r2, [r3, #0]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	601a      	str	r2, [r3, #0]
 80117ea:	e003      	b.n	80117f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	681a      	ldr	r2, [r3, #0]
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80117f4:	68fa      	ldr	r2, [r7, #12]
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d002      	beq.n	8011802 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	687a      	ldr	r2, [r7, #4]
 8011800:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011802:	bf00      	nop
 8011804:	3714      	adds	r7, #20
 8011806:	46bd      	mov	sp, r7
 8011808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180c:	4770      	bx	lr
 801180e:	bf00      	nop
 8011810:	240055fc 	.word	0x240055fc
 8011814:	24005604 	.word	0x24005604

08011818 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801181c:	2200      	movs	r2, #0
 801181e:	4913      	ldr	r1, [pc, #76]	@ (801186c <MX_USB_DEVICE_Init+0x54>)
 8011820:	4813      	ldr	r0, [pc, #76]	@ (8011870 <MX_USB_DEVICE_Init+0x58>)
 8011822:	f7fb fc75 	bl	800d110 <USBD_Init>
 8011826:	4603      	mov	r3, r0
 8011828:	2b00      	cmp	r3, #0
 801182a:	d001      	beq.n	8011830 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801182c:	f7ef fc34 	bl	8001098 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011830:	4910      	ldr	r1, [pc, #64]	@ (8011874 <MX_USB_DEVICE_Init+0x5c>)
 8011832:	480f      	ldr	r0, [pc, #60]	@ (8011870 <MX_USB_DEVICE_Init+0x58>)
 8011834:	f7fb fc9c 	bl	800d170 <USBD_RegisterClass>
 8011838:	4603      	mov	r3, r0
 801183a:	2b00      	cmp	r3, #0
 801183c:	d001      	beq.n	8011842 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801183e:	f7ef fc2b 	bl	8001098 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011842:	490d      	ldr	r1, [pc, #52]	@ (8011878 <MX_USB_DEVICE_Init+0x60>)
 8011844:	480a      	ldr	r0, [pc, #40]	@ (8011870 <MX_USB_DEVICE_Init+0x58>)
 8011846:	f7fb fbd3 	bl	800cff0 <USBD_CDC_RegisterInterface>
 801184a:	4603      	mov	r3, r0
 801184c:	2b00      	cmp	r3, #0
 801184e:	d001      	beq.n	8011854 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011850:	f7ef fc22 	bl	8001098 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011854:	4806      	ldr	r0, [pc, #24]	@ (8011870 <MX_USB_DEVICE_Init+0x58>)
 8011856:	f7fb fcc1 	bl	800d1dc <USBD_Start>
 801185a:	4603      	mov	r3, r0
 801185c:	2b00      	cmp	r3, #0
 801185e:	d001      	beq.n	8011864 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011860:	f7ef fc1a 	bl	8001098 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011864:	f7f4 f940 	bl	8005ae8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011868:	bf00      	nop
 801186a:	bd80      	pop	{r7, pc}
 801186c:	240000b4 	.word	0x240000b4
 8011870:	2400561c 	.word	0x2400561c
 8011874:	2400001c 	.word	0x2400001c
 8011878:	240000a0 	.word	0x240000a0

0801187c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011880:	2200      	movs	r2, #0
 8011882:	4905      	ldr	r1, [pc, #20]	@ (8011898 <CDC_Init_FS+0x1c>)
 8011884:	4805      	ldr	r0, [pc, #20]	@ (801189c <CDC_Init_FS+0x20>)
 8011886:	f7fb fbcd 	bl	800d024 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801188a:	4905      	ldr	r1, [pc, #20]	@ (80118a0 <CDC_Init_FS+0x24>)
 801188c:	4803      	ldr	r0, [pc, #12]	@ (801189c <CDC_Init_FS+0x20>)
 801188e:	f7fb fbeb 	bl	800d068 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011892:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011894:	4618      	mov	r0, r3
 8011896:	bd80      	pop	{r7, pc}
 8011898:	240060f8 	.word	0x240060f8
 801189c:	2400561c 	.word	0x2400561c
 80118a0:	240058f8 	.word	0x240058f8

080118a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80118a4:	b480      	push	{r7}
 80118a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80118a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80118aa:	4618      	mov	r0, r3
 80118ac:	46bd      	mov	sp, r7
 80118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b2:	4770      	bx	lr

080118b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80118b4:	b480      	push	{r7}
 80118b6:	b083      	sub	sp, #12
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	4603      	mov	r3, r0
 80118bc:	6039      	str	r1, [r7, #0]
 80118be:	71fb      	strb	r3, [r7, #7]
 80118c0:	4613      	mov	r3, r2
 80118c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80118c4:	79fb      	ldrb	r3, [r7, #7]
 80118c6:	2b23      	cmp	r3, #35	@ 0x23
 80118c8:	d84a      	bhi.n	8011960 <CDC_Control_FS+0xac>
 80118ca:	a201      	add	r2, pc, #4	@ (adr r2, 80118d0 <CDC_Control_FS+0x1c>)
 80118cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118d0:	08011961 	.word	0x08011961
 80118d4:	08011961 	.word	0x08011961
 80118d8:	08011961 	.word	0x08011961
 80118dc:	08011961 	.word	0x08011961
 80118e0:	08011961 	.word	0x08011961
 80118e4:	08011961 	.word	0x08011961
 80118e8:	08011961 	.word	0x08011961
 80118ec:	08011961 	.word	0x08011961
 80118f0:	08011961 	.word	0x08011961
 80118f4:	08011961 	.word	0x08011961
 80118f8:	08011961 	.word	0x08011961
 80118fc:	08011961 	.word	0x08011961
 8011900:	08011961 	.word	0x08011961
 8011904:	08011961 	.word	0x08011961
 8011908:	08011961 	.word	0x08011961
 801190c:	08011961 	.word	0x08011961
 8011910:	08011961 	.word	0x08011961
 8011914:	08011961 	.word	0x08011961
 8011918:	08011961 	.word	0x08011961
 801191c:	08011961 	.word	0x08011961
 8011920:	08011961 	.word	0x08011961
 8011924:	08011961 	.word	0x08011961
 8011928:	08011961 	.word	0x08011961
 801192c:	08011961 	.word	0x08011961
 8011930:	08011961 	.word	0x08011961
 8011934:	08011961 	.word	0x08011961
 8011938:	08011961 	.word	0x08011961
 801193c:	08011961 	.word	0x08011961
 8011940:	08011961 	.word	0x08011961
 8011944:	08011961 	.word	0x08011961
 8011948:	08011961 	.word	0x08011961
 801194c:	08011961 	.word	0x08011961
 8011950:	08011961 	.word	0x08011961
 8011954:	08011961 	.word	0x08011961
 8011958:	08011961 	.word	0x08011961
 801195c:	08011961 	.word	0x08011961
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011960:	bf00      	nop
  }

  return (USBD_OK);
 8011962:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011964:	4618      	mov	r0, r3
 8011966:	370c      	adds	r7, #12
 8011968:	46bd      	mov	sp, r7
 801196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196e:	4770      	bx	lr

08011970 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801197a:	6879      	ldr	r1, [r7, #4]
 801197c:	4805      	ldr	r0, [pc, #20]	@ (8011994 <CDC_Receive_FS+0x24>)
 801197e:	f7fb fb73 	bl	800d068 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011982:	4804      	ldr	r0, [pc, #16]	@ (8011994 <CDC_Receive_FS+0x24>)
 8011984:	f7fb fb8e 	bl	800d0a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011988:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801198a:	4618      	mov	r0, r3
 801198c:	3708      	adds	r7, #8
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}
 8011992:	bf00      	nop
 8011994:	2400561c 	.word	0x2400561c

08011998 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011998:	b480      	push	{r7}
 801199a:	b087      	sub	sp, #28
 801199c:	af00      	add	r7, sp, #0
 801199e:	60f8      	str	r0, [r7, #12]
 80119a0:	60b9      	str	r1, [r7, #8]
 80119a2:	4613      	mov	r3, r2
 80119a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80119a6:	2300      	movs	r3, #0
 80119a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80119aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	371c      	adds	r7, #28
 80119b2:	46bd      	mov	sp, r7
 80119b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b8:	4770      	bx	lr
	...

080119bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119bc:	b480      	push	{r7}
 80119be:	b083      	sub	sp, #12
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	4603      	mov	r3, r0
 80119c4:	6039      	str	r1, [r7, #0]
 80119c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	2212      	movs	r2, #18
 80119cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80119ce:	4b03      	ldr	r3, [pc, #12]	@ (80119dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	370c      	adds	r7, #12
 80119d4:	46bd      	mov	sp, r7
 80119d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119da:	4770      	bx	lr
 80119dc:	240000d4 	.word	0x240000d4

080119e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119e0:	b480      	push	{r7}
 80119e2:	b083      	sub	sp, #12
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	4603      	mov	r3, r0
 80119e8:	6039      	str	r1, [r7, #0]
 80119ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	2204      	movs	r2, #4
 80119f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80119f2:	4b03      	ldr	r3, [pc, #12]	@ (8011a00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	370c      	adds	r7, #12
 80119f8:	46bd      	mov	sp, r7
 80119fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fe:	4770      	bx	lr
 8011a00:	240000e8 	.word	0x240000e8

08011a04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b082      	sub	sp, #8
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	6039      	str	r1, [r7, #0]
 8011a0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011a10:	79fb      	ldrb	r3, [r7, #7]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d105      	bne.n	8011a22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011a16:	683a      	ldr	r2, [r7, #0]
 8011a18:	4907      	ldr	r1, [pc, #28]	@ (8011a38 <USBD_FS_ProductStrDescriptor+0x34>)
 8011a1a:	4808      	ldr	r0, [pc, #32]	@ (8011a3c <USBD_FS_ProductStrDescriptor+0x38>)
 8011a1c:	f7fc fdb8 	bl	800e590 <USBD_GetString>
 8011a20:	e004      	b.n	8011a2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011a22:	683a      	ldr	r2, [r7, #0]
 8011a24:	4904      	ldr	r1, [pc, #16]	@ (8011a38 <USBD_FS_ProductStrDescriptor+0x34>)
 8011a26:	4805      	ldr	r0, [pc, #20]	@ (8011a3c <USBD_FS_ProductStrDescriptor+0x38>)
 8011a28:	f7fc fdb2 	bl	800e590 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011a2c:	4b02      	ldr	r3, [pc, #8]	@ (8011a38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3708      	adds	r7, #8
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}
 8011a36:	bf00      	nop
 8011a38:	240068f8 	.word	0x240068f8
 8011a3c:	08012478 	.word	0x08012478

08011a40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b082      	sub	sp, #8
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	4603      	mov	r3, r0
 8011a48:	6039      	str	r1, [r7, #0]
 8011a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011a4c:	683a      	ldr	r2, [r7, #0]
 8011a4e:	4904      	ldr	r1, [pc, #16]	@ (8011a60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011a50:	4804      	ldr	r0, [pc, #16]	@ (8011a64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011a52:	f7fc fd9d 	bl	800e590 <USBD_GetString>
  return USBD_StrDesc;
 8011a56:	4b02      	ldr	r3, [pc, #8]	@ (8011a60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	3708      	adds	r7, #8
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}
 8011a60:	240068f8 	.word	0x240068f8
 8011a64:	08012490 	.word	0x08012490

08011a68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	4603      	mov	r3, r0
 8011a70:	6039      	str	r1, [r7, #0]
 8011a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	221a      	movs	r2, #26
 8011a78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011a7a:	f000 f843 	bl	8011b04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011a7e:	4b02      	ldr	r3, [pc, #8]	@ (8011a88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3708      	adds	r7, #8
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	240000ec 	.word	0x240000ec

08011a8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	4603      	mov	r3, r0
 8011a94:	6039      	str	r1, [r7, #0]
 8011a96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011a98:	79fb      	ldrb	r3, [r7, #7]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d105      	bne.n	8011aaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011a9e:	683a      	ldr	r2, [r7, #0]
 8011aa0:	4907      	ldr	r1, [pc, #28]	@ (8011ac0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011aa2:	4808      	ldr	r0, [pc, #32]	@ (8011ac4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011aa4:	f7fc fd74 	bl	800e590 <USBD_GetString>
 8011aa8:	e004      	b.n	8011ab4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011aaa:	683a      	ldr	r2, [r7, #0]
 8011aac:	4904      	ldr	r1, [pc, #16]	@ (8011ac0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011aae:	4805      	ldr	r0, [pc, #20]	@ (8011ac4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011ab0:	f7fc fd6e 	bl	800e590 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ab4:	4b02      	ldr	r3, [pc, #8]	@ (8011ac0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3708      	adds	r7, #8
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
 8011abe:	bf00      	nop
 8011ac0:	240068f8 	.word	0x240068f8
 8011ac4:	080124a4 	.word	0x080124a4

08011ac8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	4603      	mov	r3, r0
 8011ad0:	6039      	str	r1, [r7, #0]
 8011ad2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011ad4:	79fb      	ldrb	r3, [r7, #7]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d105      	bne.n	8011ae6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011ada:	683a      	ldr	r2, [r7, #0]
 8011adc:	4907      	ldr	r1, [pc, #28]	@ (8011afc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011ade:	4808      	ldr	r0, [pc, #32]	@ (8011b00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011ae0:	f7fc fd56 	bl	800e590 <USBD_GetString>
 8011ae4:	e004      	b.n	8011af0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011ae6:	683a      	ldr	r2, [r7, #0]
 8011ae8:	4904      	ldr	r1, [pc, #16]	@ (8011afc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011aea:	4805      	ldr	r0, [pc, #20]	@ (8011b00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011aec:	f7fc fd50 	bl	800e590 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011af0:	4b02      	ldr	r3, [pc, #8]	@ (8011afc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3708      	adds	r7, #8
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}
 8011afa:	bf00      	nop
 8011afc:	240068f8 	.word	0x240068f8
 8011b00:	080124b0 	.word	0x080124b0

08011b04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b084      	sub	sp, #16
 8011b08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8011b48 <Get_SerialNum+0x44>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011b10:	4b0e      	ldr	r3, [pc, #56]	@ (8011b4c <Get_SerialNum+0x48>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011b16:	4b0e      	ldr	r3, [pc, #56]	@ (8011b50 <Get_SerialNum+0x4c>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011b1c:	68fa      	ldr	r2, [r7, #12]
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	4413      	add	r3, r2
 8011b22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d009      	beq.n	8011b3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011b2a:	2208      	movs	r2, #8
 8011b2c:	4909      	ldr	r1, [pc, #36]	@ (8011b54 <Get_SerialNum+0x50>)
 8011b2e:	68f8      	ldr	r0, [r7, #12]
 8011b30:	f000 f814 	bl	8011b5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011b34:	2204      	movs	r2, #4
 8011b36:	4908      	ldr	r1, [pc, #32]	@ (8011b58 <Get_SerialNum+0x54>)
 8011b38:	68b8      	ldr	r0, [r7, #8]
 8011b3a:	f000 f80f 	bl	8011b5c <IntToUnicode>
  }
}
 8011b3e:	bf00      	nop
 8011b40:	3710      	adds	r7, #16
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	1ff1e800 	.word	0x1ff1e800
 8011b4c:	1ff1e804 	.word	0x1ff1e804
 8011b50:	1ff1e808 	.word	0x1ff1e808
 8011b54:	240000ee 	.word	0x240000ee
 8011b58:	240000fe 	.word	0x240000fe

08011b5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011b5c:	b480      	push	{r7}
 8011b5e:	b087      	sub	sp, #28
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	60f8      	str	r0, [r7, #12]
 8011b64:	60b9      	str	r1, [r7, #8]
 8011b66:	4613      	mov	r3, r2
 8011b68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011b6e:	2300      	movs	r3, #0
 8011b70:	75fb      	strb	r3, [r7, #23]
 8011b72:	e027      	b.n	8011bc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	0f1b      	lsrs	r3, r3, #28
 8011b78:	2b09      	cmp	r3, #9
 8011b7a:	d80b      	bhi.n	8011b94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	0f1b      	lsrs	r3, r3, #28
 8011b80:	b2da      	uxtb	r2, r3
 8011b82:	7dfb      	ldrb	r3, [r7, #23]
 8011b84:	005b      	lsls	r3, r3, #1
 8011b86:	4619      	mov	r1, r3
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	440b      	add	r3, r1
 8011b8c:	3230      	adds	r2, #48	@ 0x30
 8011b8e:	b2d2      	uxtb	r2, r2
 8011b90:	701a      	strb	r2, [r3, #0]
 8011b92:	e00a      	b.n	8011baa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	0f1b      	lsrs	r3, r3, #28
 8011b98:	b2da      	uxtb	r2, r3
 8011b9a:	7dfb      	ldrb	r3, [r7, #23]
 8011b9c:	005b      	lsls	r3, r3, #1
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	440b      	add	r3, r1
 8011ba4:	3237      	adds	r2, #55	@ 0x37
 8011ba6:	b2d2      	uxtb	r2, r2
 8011ba8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	011b      	lsls	r3, r3, #4
 8011bae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011bb0:	7dfb      	ldrb	r3, [r7, #23]
 8011bb2:	005b      	lsls	r3, r3, #1
 8011bb4:	3301      	adds	r3, #1
 8011bb6:	68ba      	ldr	r2, [r7, #8]
 8011bb8:	4413      	add	r3, r2
 8011bba:	2200      	movs	r2, #0
 8011bbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011bbe:	7dfb      	ldrb	r3, [r7, #23]
 8011bc0:	3301      	adds	r3, #1
 8011bc2:	75fb      	strb	r3, [r7, #23]
 8011bc4:	7dfa      	ldrb	r2, [r7, #23]
 8011bc6:	79fb      	ldrb	r3, [r7, #7]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d3d3      	bcc.n	8011b74 <IntToUnicode+0x18>
  }
}
 8011bcc:	bf00      	nop
 8011bce:	bf00      	nop
 8011bd0:	371c      	adds	r7, #28
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd8:	4770      	bx	lr
	...

08011bdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b0ba      	sub	sp, #232	@ 0xe8
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011be4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011be8:	2200      	movs	r2, #0
 8011bea:	601a      	str	r2, [r3, #0]
 8011bec:	605a      	str	r2, [r3, #4]
 8011bee:	609a      	str	r2, [r3, #8]
 8011bf0:	60da      	str	r2, [r3, #12]
 8011bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011bf4:	f107 0310 	add.w	r3, r7, #16
 8011bf8:	22c0      	movs	r2, #192	@ 0xc0
 8011bfa:	2100      	movs	r1, #0
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f000 fb25 	bl	801224c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	4a2c      	ldr	r2, [pc, #176]	@ (8011cb8 <HAL_PCD_MspInit+0xdc>)
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d151      	bne.n	8011cb0 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011c0c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011c10:	f04f 0300 	mov.w	r3, #0
 8011c14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011c18:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8011c1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011c20:	f107 0310 	add.w	r3, r7, #16
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7f4 ff97 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d001      	beq.n	8011c34 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8011c30:	f7ef fa32 	bl	8001098 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011c34:	f7f3 ff58 	bl	8005ae8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011c38:	4b20      	ldr	r3, [pc, #128]	@ (8011cbc <HAL_PCD_MspInit+0xe0>)
 8011c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8011cbc <HAL_PCD_MspInit+0xe0>)
 8011c40:	f043 0301 	orr.w	r3, r3, #1
 8011c44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011c48:	4b1c      	ldr	r3, [pc, #112]	@ (8011cbc <HAL_PCD_MspInit+0xe0>)
 8011c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011c4e:	f003 0301 	and.w	r3, r3, #1
 8011c52:	60fb      	str	r3, [r7, #12]
 8011c54:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011c56:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c5e:	2302      	movs	r3, #2
 8011c60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c64:	2300      	movs	r3, #0
 8011c66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011c70:	230a      	movs	r3, #10
 8011c72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011c76:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011c7a:	4619      	mov	r1, r3
 8011c7c:	4810      	ldr	r0, [pc, #64]	@ (8011cc0 <HAL_PCD_MspInit+0xe4>)
 8011c7e:	f7f1 fdcd 	bl	800381c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011c82:	4b0e      	ldr	r3, [pc, #56]	@ (8011cbc <HAL_PCD_MspInit+0xe0>)
 8011c84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011c88:	4a0c      	ldr	r2, [pc, #48]	@ (8011cbc <HAL_PCD_MspInit+0xe0>)
 8011c8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011c8e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011c92:	4b0a      	ldr	r3, [pc, #40]	@ (8011cbc <HAL_PCD_MspInit+0xe0>)
 8011c94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011c98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011c9c:	60bb      	str	r3, [r7, #8]
 8011c9e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	2105      	movs	r1, #5
 8011ca4:	2065      	movs	r0, #101	@ 0x65
 8011ca6:	f7f1 fd91 	bl	80037cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011caa:	2065      	movs	r0, #101	@ 0x65
 8011cac:	f7f1 fda8 	bl	8003800 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011cb0:	bf00      	nop
 8011cb2:	37e8      	adds	r7, #232	@ 0xe8
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}
 8011cb8:	40080000 	.word	0x40080000
 8011cbc:	58024400 	.word	0x58024400
 8011cc0:	58020000 	.word	0x58020000

08011cc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b082      	sub	sp, #8
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8011cd8:	4619      	mov	r1, r3
 8011cda:	4610      	mov	r0, r2
 8011cdc:	f7fb facb 	bl	800d276 <USBD_LL_SetupStage>
}
 8011ce0:	bf00      	nop
 8011ce2:	3708      	adds	r7, #8
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}

08011ce8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b082      	sub	sp, #8
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
 8011cf0:	460b      	mov	r3, r1
 8011cf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011cfa:	78fa      	ldrb	r2, [r7, #3]
 8011cfc:	6879      	ldr	r1, [r7, #4]
 8011cfe:	4613      	mov	r3, r2
 8011d00:	00db      	lsls	r3, r3, #3
 8011d02:	4413      	add	r3, r2
 8011d04:	009b      	lsls	r3, r3, #2
 8011d06:	440b      	add	r3, r1
 8011d08:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011d0c:	681a      	ldr	r2, [r3, #0]
 8011d0e:	78fb      	ldrb	r3, [r7, #3]
 8011d10:	4619      	mov	r1, r3
 8011d12:	f7fb fb05 	bl	800d320 <USBD_LL_DataOutStage>
}
 8011d16:	bf00      	nop
 8011d18:	3708      	adds	r7, #8
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}

08011d1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d1e:	b580      	push	{r7, lr}
 8011d20:	b082      	sub	sp, #8
 8011d22:	af00      	add	r7, sp, #0
 8011d24:	6078      	str	r0, [r7, #4]
 8011d26:	460b      	mov	r3, r1
 8011d28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011d30:	78fa      	ldrb	r2, [r7, #3]
 8011d32:	6879      	ldr	r1, [r7, #4]
 8011d34:	4613      	mov	r3, r2
 8011d36:	00db      	lsls	r3, r3, #3
 8011d38:	4413      	add	r3, r2
 8011d3a:	009b      	lsls	r3, r3, #2
 8011d3c:	440b      	add	r3, r1
 8011d3e:	3320      	adds	r3, #32
 8011d40:	681a      	ldr	r2, [r3, #0]
 8011d42:	78fb      	ldrb	r3, [r7, #3]
 8011d44:	4619      	mov	r1, r3
 8011d46:	f7fb fb9e 	bl	800d486 <USBD_LL_DataInStage>
}
 8011d4a:	bf00      	nop
 8011d4c:	3708      	adds	r7, #8
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}

08011d52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d52:	b580      	push	{r7, lr}
 8011d54:	b082      	sub	sp, #8
 8011d56:	af00      	add	r7, sp, #0
 8011d58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011d60:	4618      	mov	r0, r3
 8011d62:	f7fb fcd8 	bl	800d716 <USBD_LL_SOF>
}
 8011d66:	bf00      	nop
 8011d68:	3708      	adds	r7, #8
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}

08011d6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d6e:	b580      	push	{r7, lr}
 8011d70:	b084      	sub	sp, #16
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011d76:	2301      	movs	r3, #1
 8011d78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	79db      	ldrb	r3, [r3, #7]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d102      	bne.n	8011d88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011d82:	2300      	movs	r3, #0
 8011d84:	73fb      	strb	r3, [r7, #15]
 8011d86:	e008      	b.n	8011d9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	79db      	ldrb	r3, [r3, #7]
 8011d8c:	2b02      	cmp	r3, #2
 8011d8e:	d102      	bne.n	8011d96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011d90:	2301      	movs	r3, #1
 8011d92:	73fb      	strb	r3, [r7, #15]
 8011d94:	e001      	b.n	8011d9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011d96:	f7ef f97f 	bl	8001098 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011da0:	7bfa      	ldrb	r2, [r7, #15]
 8011da2:	4611      	mov	r1, r2
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7fb fc72 	bl	800d68e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011db0:	4618      	mov	r0, r3
 8011db2:	f7fb fc1a 	bl	800d5ea <USBD_LL_Reset>
}
 8011db6:	bf00      	nop
 8011db8:	3710      	adds	r7, #16
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}
	...

08011dc0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7fb fc6d 	bl	800d6ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	687a      	ldr	r2, [r7, #4]
 8011de0:	6812      	ldr	r2, [r2, #0]
 8011de2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011de6:	f043 0301 	orr.w	r3, r3, #1
 8011dea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	7adb      	ldrb	r3, [r3, #11]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d005      	beq.n	8011e00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011df4:	4b04      	ldr	r3, [pc, #16]	@ (8011e08 <HAL_PCD_SuspendCallback+0x48>)
 8011df6:	691b      	ldr	r3, [r3, #16]
 8011df8:	4a03      	ldr	r2, [pc, #12]	@ (8011e08 <HAL_PCD_SuspendCallback+0x48>)
 8011dfa:	f043 0306 	orr.w	r3, r3, #6
 8011dfe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011e00:	bf00      	nop
 8011e02:	3708      	adds	r7, #8
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}
 8011e08:	e000ed00 	.word	0xe000ed00

08011e0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b082      	sub	sp, #8
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f7fb fc63 	bl	800d6e6 <USBD_LL_Resume>
}
 8011e20:	bf00      	nop
 8011e22:	3708      	adds	r7, #8
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}

08011e28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b082      	sub	sp, #8
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	460b      	mov	r3, r1
 8011e32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011e3a:	78fa      	ldrb	r2, [r7, #3]
 8011e3c:	4611      	mov	r1, r2
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7fb fcbb 	bl	800d7ba <USBD_LL_IsoOUTIncomplete>
}
 8011e44:	bf00      	nop
 8011e46:	3708      	adds	r7, #8
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}

08011e4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b082      	sub	sp, #8
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	460b      	mov	r3, r1
 8011e56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011e5e:	78fa      	ldrb	r2, [r7, #3]
 8011e60:	4611      	mov	r1, r2
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7fb fc77 	bl	800d756 <USBD_LL_IsoINIncomplete>
}
 8011e68:	bf00      	nop
 8011e6a:	3708      	adds	r7, #8
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd80      	pop	{r7, pc}

08011e70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b082      	sub	sp, #8
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f7fb fccd 	bl	800d81e <USBD_LL_DevConnected>
}
 8011e84:	bf00      	nop
 8011e86:	3708      	adds	r7, #8
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}

08011e8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b082      	sub	sp, #8
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f7fb fcca 	bl	800d834 <USBD_LL_DevDisconnected>
}
 8011ea0:	bf00      	nop
 8011ea2:	3708      	adds	r7, #8
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}

08011ea8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b082      	sub	sp, #8
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d13e      	bne.n	8011f36 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011eb8:	4a21      	ldr	r2, [pc, #132]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011ec4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011eca:	4a1e      	ldr	r2, [pc, #120]	@ (8011f44 <USBD_LL_Init+0x9c>)
 8011ecc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8011ece:	4b1c      	ldr	r3, [pc, #112]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011ed0:	2209      	movs	r2, #9
 8011ed2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011ed6:	2202      	movs	r2, #2
 8011ed8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011eda:	4b19      	ldr	r3, [pc, #100]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011edc:	2200      	movs	r2, #0
 8011ede:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011ee0:	4b17      	ldr	r3, [pc, #92]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011ee2:	2202      	movs	r2, #2
 8011ee4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011ee6:	4b16      	ldr	r3, [pc, #88]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011ee8:	2200      	movs	r2, #0
 8011eea:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011eec:	4b14      	ldr	r3, [pc, #80]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011eee:	2200      	movs	r2, #0
 8011ef0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011ef2:	4b13      	ldr	r3, [pc, #76]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011ef8:	4b11      	ldr	r3, [pc, #68]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011efa:	2200      	movs	r2, #0
 8011efc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011efe:	4b10      	ldr	r3, [pc, #64]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011f00:	2200      	movs	r2, #0
 8011f02:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011f04:	4b0e      	ldr	r3, [pc, #56]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011f06:	2200      	movs	r2, #0
 8011f08:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011f0a:	480d      	ldr	r0, [pc, #52]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011f0c:	f7f2 fb14 	bl	8004538 <HAL_PCD_Init>
 8011f10:	4603      	mov	r3, r0
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d001      	beq.n	8011f1a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011f16:	f7ef f8bf 	bl	8001098 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011f1a:	2180      	movs	r1, #128	@ 0x80
 8011f1c:	4808      	ldr	r0, [pc, #32]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011f1e:	f7f3 fd68 	bl	80059f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011f22:	2240      	movs	r2, #64	@ 0x40
 8011f24:	2100      	movs	r1, #0
 8011f26:	4806      	ldr	r0, [pc, #24]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011f28:	f7f3 fd1c 	bl	8005964 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011f2c:	2280      	movs	r2, #128	@ 0x80
 8011f2e:	2101      	movs	r1, #1
 8011f30:	4803      	ldr	r0, [pc, #12]	@ (8011f40 <USBD_LL_Init+0x98>)
 8011f32:	f7f3 fd17 	bl	8005964 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8011f36:	2300      	movs	r3, #0
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3708      	adds	r7, #8
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}
 8011f40:	24006af8 	.word	0x24006af8
 8011f44:	40080000 	.word	0x40080000

08011f48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b084      	sub	sp, #16
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f50:	2300      	movs	r3, #0
 8011f52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f54:	2300      	movs	r3, #0
 8011f56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7f2 fbf6 	bl	8004750 <HAL_PCD_Start>
 8011f64:	4603      	mov	r3, r0
 8011f66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f68:	7bfb      	ldrb	r3, [r7, #15]
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f000 f942 	bl	80121f4 <USBD_Get_USB_Status>
 8011f70:	4603      	mov	r3, r0
 8011f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	3710      	adds	r7, #16
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}

08011f7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011f7e:	b580      	push	{r7, lr}
 8011f80:	b084      	sub	sp, #16
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
 8011f86:	4608      	mov	r0, r1
 8011f88:	4611      	mov	r1, r2
 8011f8a:	461a      	mov	r2, r3
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	70fb      	strb	r3, [r7, #3]
 8011f90:	460b      	mov	r3, r1
 8011f92:	70bb      	strb	r3, [r7, #2]
 8011f94:	4613      	mov	r3, r2
 8011f96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011fa6:	78bb      	ldrb	r3, [r7, #2]
 8011fa8:	883a      	ldrh	r2, [r7, #0]
 8011faa:	78f9      	ldrb	r1, [r7, #3]
 8011fac:	f7f3 f8f7 	bl	800519e <HAL_PCD_EP_Open>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011fb4:	7bfb      	ldrb	r3, [r7, #15]
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f000 f91c 	bl	80121f4 <USBD_Get_USB_Status>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011fc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3710      	adds	r7, #16
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}

08011fca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011fca:	b580      	push	{r7, lr}
 8011fcc:	b084      	sub	sp, #16
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	6078      	str	r0, [r7, #4]
 8011fd2:	460b      	mov	r3, r1
 8011fd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011fe4:	78fa      	ldrb	r2, [r7, #3]
 8011fe6:	4611      	mov	r1, r2
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7f3 f940 	bl	800526e <HAL_PCD_EP_Close>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ff2:	7bfb      	ldrb	r3, [r7, #15]
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f000 f8fd 	bl	80121f4 <USBD_Get_USB_Status>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ffe:	7bbb      	ldrb	r3, [r7, #14]
}
 8012000:	4618      	mov	r0, r3
 8012002:	3710      	adds	r7, #16
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}

08012008 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b084      	sub	sp, #16
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	460b      	mov	r3, r1
 8012012:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012014:	2300      	movs	r3, #0
 8012016:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012018:	2300      	movs	r3, #0
 801201a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012022:	78fa      	ldrb	r2, [r7, #3]
 8012024:	4611      	mov	r1, r2
 8012026:	4618      	mov	r0, r3
 8012028:	f7f3 f9f8 	bl	800541c <HAL_PCD_EP_SetStall>
 801202c:	4603      	mov	r3, r0
 801202e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012030:	7bfb      	ldrb	r3, [r7, #15]
 8012032:	4618      	mov	r0, r3
 8012034:	f000 f8de 	bl	80121f4 <USBD_Get_USB_Status>
 8012038:	4603      	mov	r3, r0
 801203a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801203c:	7bbb      	ldrb	r3, [r7, #14]
}
 801203e:	4618      	mov	r0, r3
 8012040:	3710      	adds	r7, #16
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}

08012046 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012046:	b580      	push	{r7, lr}
 8012048:	b084      	sub	sp, #16
 801204a:	af00      	add	r7, sp, #0
 801204c:	6078      	str	r0, [r7, #4]
 801204e:	460b      	mov	r3, r1
 8012050:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012052:	2300      	movs	r3, #0
 8012054:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012056:	2300      	movs	r3, #0
 8012058:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012060:	78fa      	ldrb	r2, [r7, #3]
 8012062:	4611      	mov	r1, r2
 8012064:	4618      	mov	r0, r3
 8012066:	f7f3 fa3c 	bl	80054e2 <HAL_PCD_EP_ClrStall>
 801206a:	4603      	mov	r3, r0
 801206c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801206e:	7bfb      	ldrb	r3, [r7, #15]
 8012070:	4618      	mov	r0, r3
 8012072:	f000 f8bf 	bl	80121f4 <USBD_Get_USB_Status>
 8012076:	4603      	mov	r3, r0
 8012078:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801207a:	7bbb      	ldrb	r3, [r7, #14]
}
 801207c:	4618      	mov	r0, r3
 801207e:	3710      	adds	r7, #16
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}

08012084 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012084:	b480      	push	{r7}
 8012086:	b085      	sub	sp, #20
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	460b      	mov	r3, r1
 801208e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012096:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801209c:	2b00      	cmp	r3, #0
 801209e:	da0b      	bge.n	80120b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80120a0:	78fb      	ldrb	r3, [r7, #3]
 80120a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80120a6:	68f9      	ldr	r1, [r7, #12]
 80120a8:	4613      	mov	r3, r2
 80120aa:	00db      	lsls	r3, r3, #3
 80120ac:	4413      	add	r3, r2
 80120ae:	009b      	lsls	r3, r3, #2
 80120b0:	440b      	add	r3, r1
 80120b2:	3316      	adds	r3, #22
 80120b4:	781b      	ldrb	r3, [r3, #0]
 80120b6:	e00b      	b.n	80120d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80120b8:	78fb      	ldrb	r3, [r7, #3]
 80120ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80120be:	68f9      	ldr	r1, [r7, #12]
 80120c0:	4613      	mov	r3, r2
 80120c2:	00db      	lsls	r3, r3, #3
 80120c4:	4413      	add	r3, r2
 80120c6:	009b      	lsls	r3, r3, #2
 80120c8:	440b      	add	r3, r1
 80120ca:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80120ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3714      	adds	r7, #20
 80120d4:	46bd      	mov	sp, r7
 80120d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120da:	4770      	bx	lr

080120dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b084      	sub	sp, #16
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	460b      	mov	r3, r1
 80120e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120e8:	2300      	movs	r3, #0
 80120ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120ec:	2300      	movs	r3, #0
 80120ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80120f6:	78fa      	ldrb	r2, [r7, #3]
 80120f8:	4611      	mov	r1, r2
 80120fa:	4618      	mov	r0, r3
 80120fc:	f7f3 f82b 	bl	8005156 <HAL_PCD_SetAddress>
 8012100:	4603      	mov	r3, r0
 8012102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012104:	7bfb      	ldrb	r3, [r7, #15]
 8012106:	4618      	mov	r0, r3
 8012108:	f000 f874 	bl	80121f4 <USBD_Get_USB_Status>
 801210c:	4603      	mov	r3, r0
 801210e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012110:	7bbb      	ldrb	r3, [r7, #14]
}
 8012112:	4618      	mov	r0, r3
 8012114:	3710      	adds	r7, #16
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}

0801211a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801211a:	b580      	push	{r7, lr}
 801211c:	b086      	sub	sp, #24
 801211e:	af00      	add	r7, sp, #0
 8012120:	60f8      	str	r0, [r7, #12]
 8012122:	607a      	str	r2, [r7, #4]
 8012124:	603b      	str	r3, [r7, #0]
 8012126:	460b      	mov	r3, r1
 8012128:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801212a:	2300      	movs	r3, #0
 801212c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801212e:	2300      	movs	r3, #0
 8012130:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012138:	7af9      	ldrb	r1, [r7, #11]
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	687a      	ldr	r2, [r7, #4]
 801213e:	f7f3 f933 	bl	80053a8 <HAL_PCD_EP_Transmit>
 8012142:	4603      	mov	r3, r0
 8012144:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012146:	7dfb      	ldrb	r3, [r7, #23]
 8012148:	4618      	mov	r0, r3
 801214a:	f000 f853 	bl	80121f4 <USBD_Get_USB_Status>
 801214e:	4603      	mov	r3, r0
 8012150:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012152:	7dbb      	ldrb	r3, [r7, #22]
}
 8012154:	4618      	mov	r0, r3
 8012156:	3718      	adds	r7, #24
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}

0801215c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b086      	sub	sp, #24
 8012160:	af00      	add	r7, sp, #0
 8012162:	60f8      	str	r0, [r7, #12]
 8012164:	607a      	str	r2, [r7, #4]
 8012166:	603b      	str	r3, [r7, #0]
 8012168:	460b      	mov	r3, r1
 801216a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801216c:	2300      	movs	r3, #0
 801216e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012170:	2300      	movs	r3, #0
 8012172:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801217a:	7af9      	ldrb	r1, [r7, #11]
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	687a      	ldr	r2, [r7, #4]
 8012180:	f7f3 f8bf 	bl	8005302 <HAL_PCD_EP_Receive>
 8012184:	4603      	mov	r3, r0
 8012186:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012188:	7dfb      	ldrb	r3, [r7, #23]
 801218a:	4618      	mov	r0, r3
 801218c:	f000 f832 	bl	80121f4 <USBD_Get_USB_Status>
 8012190:	4603      	mov	r3, r0
 8012192:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012194:	7dbb      	ldrb	r3, [r7, #22]
}
 8012196:	4618      	mov	r0, r3
 8012198:	3718      	adds	r7, #24
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}

0801219e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801219e:	b580      	push	{r7, lr}
 80121a0:	b082      	sub	sp, #8
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	6078      	str	r0, [r7, #4]
 80121a6:	460b      	mov	r3, r1
 80121a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80121b0:	78fa      	ldrb	r2, [r7, #3]
 80121b2:	4611      	mov	r1, r2
 80121b4:	4618      	mov	r0, r3
 80121b6:	f7f3 f8df 	bl	8005378 <HAL_PCD_EP_GetRxCount>
 80121ba:	4603      	mov	r3, r0
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3708      	adds	r7, #8
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}

080121c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80121c4:	b480      	push	{r7}
 80121c6:	b083      	sub	sp, #12
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80121cc:	4b03      	ldr	r3, [pc, #12]	@ (80121dc <USBD_static_malloc+0x18>)
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	370c      	adds	r7, #12
 80121d2:	46bd      	mov	sp, r7
 80121d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d8:	4770      	bx	lr
 80121da:	bf00      	nop
 80121dc:	24006fdc 	.word	0x24006fdc

080121e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80121e0:	b480      	push	{r7}
 80121e2:	b083      	sub	sp, #12
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80121e8:	bf00      	nop
 80121ea:	370c      	adds	r7, #12
 80121ec:	46bd      	mov	sp, r7
 80121ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f2:	4770      	bx	lr

080121f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80121f4:	b480      	push	{r7}
 80121f6:	b085      	sub	sp, #20
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	4603      	mov	r3, r0
 80121fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121fe:	2300      	movs	r3, #0
 8012200:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012202:	79fb      	ldrb	r3, [r7, #7]
 8012204:	2b03      	cmp	r3, #3
 8012206:	d817      	bhi.n	8012238 <USBD_Get_USB_Status+0x44>
 8012208:	a201      	add	r2, pc, #4	@ (adr r2, 8012210 <USBD_Get_USB_Status+0x1c>)
 801220a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801220e:	bf00      	nop
 8012210:	08012221 	.word	0x08012221
 8012214:	08012227 	.word	0x08012227
 8012218:	0801222d 	.word	0x0801222d
 801221c:	08012233 	.word	0x08012233
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012220:	2300      	movs	r3, #0
 8012222:	73fb      	strb	r3, [r7, #15]
    break;
 8012224:	e00b      	b.n	801223e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012226:	2303      	movs	r3, #3
 8012228:	73fb      	strb	r3, [r7, #15]
    break;
 801222a:	e008      	b.n	801223e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801222c:	2301      	movs	r3, #1
 801222e:	73fb      	strb	r3, [r7, #15]
    break;
 8012230:	e005      	b.n	801223e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012232:	2303      	movs	r3, #3
 8012234:	73fb      	strb	r3, [r7, #15]
    break;
 8012236:	e002      	b.n	801223e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012238:	2303      	movs	r3, #3
 801223a:	73fb      	strb	r3, [r7, #15]
    break;
 801223c:	bf00      	nop
  }
  return usb_status;
 801223e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012240:	4618      	mov	r0, r3
 8012242:	3714      	adds	r7, #20
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr

0801224c <memset>:
 801224c:	4402      	add	r2, r0
 801224e:	4603      	mov	r3, r0
 8012250:	4293      	cmp	r3, r2
 8012252:	d100      	bne.n	8012256 <memset+0xa>
 8012254:	4770      	bx	lr
 8012256:	f803 1b01 	strb.w	r1, [r3], #1
 801225a:	e7f9      	b.n	8012250 <memset+0x4>

0801225c <_reclaim_reent>:
 801225c:	4b29      	ldr	r3, [pc, #164]	@ (8012304 <_reclaim_reent+0xa8>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	4283      	cmp	r3, r0
 8012262:	b570      	push	{r4, r5, r6, lr}
 8012264:	4604      	mov	r4, r0
 8012266:	d04b      	beq.n	8012300 <_reclaim_reent+0xa4>
 8012268:	69c3      	ldr	r3, [r0, #28]
 801226a:	b1ab      	cbz	r3, 8012298 <_reclaim_reent+0x3c>
 801226c:	68db      	ldr	r3, [r3, #12]
 801226e:	b16b      	cbz	r3, 801228c <_reclaim_reent+0x30>
 8012270:	2500      	movs	r5, #0
 8012272:	69e3      	ldr	r3, [r4, #28]
 8012274:	68db      	ldr	r3, [r3, #12]
 8012276:	5959      	ldr	r1, [r3, r5]
 8012278:	2900      	cmp	r1, #0
 801227a:	d13b      	bne.n	80122f4 <_reclaim_reent+0x98>
 801227c:	3504      	adds	r5, #4
 801227e:	2d80      	cmp	r5, #128	@ 0x80
 8012280:	d1f7      	bne.n	8012272 <_reclaim_reent+0x16>
 8012282:	69e3      	ldr	r3, [r4, #28]
 8012284:	4620      	mov	r0, r4
 8012286:	68d9      	ldr	r1, [r3, #12]
 8012288:	f000 f872 	bl	8012370 <_free_r>
 801228c:	69e3      	ldr	r3, [r4, #28]
 801228e:	6819      	ldr	r1, [r3, #0]
 8012290:	b111      	cbz	r1, 8012298 <_reclaim_reent+0x3c>
 8012292:	4620      	mov	r0, r4
 8012294:	f000 f86c 	bl	8012370 <_free_r>
 8012298:	6961      	ldr	r1, [r4, #20]
 801229a:	b111      	cbz	r1, 80122a2 <_reclaim_reent+0x46>
 801229c:	4620      	mov	r0, r4
 801229e:	f000 f867 	bl	8012370 <_free_r>
 80122a2:	69e1      	ldr	r1, [r4, #28]
 80122a4:	b111      	cbz	r1, 80122ac <_reclaim_reent+0x50>
 80122a6:	4620      	mov	r0, r4
 80122a8:	f000 f862 	bl	8012370 <_free_r>
 80122ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80122ae:	b111      	cbz	r1, 80122b6 <_reclaim_reent+0x5a>
 80122b0:	4620      	mov	r0, r4
 80122b2:	f000 f85d 	bl	8012370 <_free_r>
 80122b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80122b8:	b111      	cbz	r1, 80122c0 <_reclaim_reent+0x64>
 80122ba:	4620      	mov	r0, r4
 80122bc:	f000 f858 	bl	8012370 <_free_r>
 80122c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80122c2:	b111      	cbz	r1, 80122ca <_reclaim_reent+0x6e>
 80122c4:	4620      	mov	r0, r4
 80122c6:	f000 f853 	bl	8012370 <_free_r>
 80122ca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80122cc:	b111      	cbz	r1, 80122d4 <_reclaim_reent+0x78>
 80122ce:	4620      	mov	r0, r4
 80122d0:	f000 f84e 	bl	8012370 <_free_r>
 80122d4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80122d6:	b111      	cbz	r1, 80122de <_reclaim_reent+0x82>
 80122d8:	4620      	mov	r0, r4
 80122da:	f000 f849 	bl	8012370 <_free_r>
 80122de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80122e0:	b111      	cbz	r1, 80122e8 <_reclaim_reent+0x8c>
 80122e2:	4620      	mov	r0, r4
 80122e4:	f000 f844 	bl	8012370 <_free_r>
 80122e8:	6a23      	ldr	r3, [r4, #32]
 80122ea:	b14b      	cbz	r3, 8012300 <_reclaim_reent+0xa4>
 80122ec:	4620      	mov	r0, r4
 80122ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122f2:	4718      	bx	r3
 80122f4:	680e      	ldr	r6, [r1, #0]
 80122f6:	4620      	mov	r0, r4
 80122f8:	f000 f83a 	bl	8012370 <_free_r>
 80122fc:	4631      	mov	r1, r6
 80122fe:	e7bb      	b.n	8012278 <_reclaim_reent+0x1c>
 8012300:	bd70      	pop	{r4, r5, r6, pc}
 8012302:	bf00      	nop
 8012304:	24000108 	.word	0x24000108

08012308 <__libc_init_array>:
 8012308:	b570      	push	{r4, r5, r6, lr}
 801230a:	4d0d      	ldr	r5, [pc, #52]	@ (8012340 <__libc_init_array+0x38>)
 801230c:	4c0d      	ldr	r4, [pc, #52]	@ (8012344 <__libc_init_array+0x3c>)
 801230e:	1b64      	subs	r4, r4, r5
 8012310:	10a4      	asrs	r4, r4, #2
 8012312:	2600      	movs	r6, #0
 8012314:	42a6      	cmp	r6, r4
 8012316:	d109      	bne.n	801232c <__libc_init_array+0x24>
 8012318:	4d0b      	ldr	r5, [pc, #44]	@ (8012348 <__libc_init_array+0x40>)
 801231a:	4c0c      	ldr	r4, [pc, #48]	@ (801234c <__libc_init_array+0x44>)
 801231c:	f000 f87e 	bl	801241c <_init>
 8012320:	1b64      	subs	r4, r4, r5
 8012322:	10a4      	asrs	r4, r4, #2
 8012324:	2600      	movs	r6, #0
 8012326:	42a6      	cmp	r6, r4
 8012328:	d105      	bne.n	8012336 <__libc_init_array+0x2e>
 801232a:	bd70      	pop	{r4, r5, r6, pc}
 801232c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012330:	4798      	blx	r3
 8012332:	3601      	adds	r6, #1
 8012334:	e7ee      	b.n	8012314 <__libc_init_array+0xc>
 8012336:	f855 3b04 	ldr.w	r3, [r5], #4
 801233a:	4798      	blx	r3
 801233c:	3601      	adds	r6, #1
 801233e:	e7f2      	b.n	8012326 <__libc_init_array+0x1e>
 8012340:	08012580 	.word	0x08012580
 8012344:	08012580 	.word	0x08012580
 8012348:	08012580 	.word	0x08012580
 801234c:	08012584 	.word	0x08012584

08012350 <__retarget_lock_acquire_recursive>:
 8012350:	4770      	bx	lr

08012352 <__retarget_lock_release_recursive>:
 8012352:	4770      	bx	lr

08012354 <memcpy>:
 8012354:	440a      	add	r2, r1
 8012356:	4291      	cmp	r1, r2
 8012358:	f100 33ff 	add.w	r3, r0, #4294967295
 801235c:	d100      	bne.n	8012360 <memcpy+0xc>
 801235e:	4770      	bx	lr
 8012360:	b510      	push	{r4, lr}
 8012362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012366:	f803 4f01 	strb.w	r4, [r3, #1]!
 801236a:	4291      	cmp	r1, r2
 801236c:	d1f9      	bne.n	8012362 <memcpy+0xe>
 801236e:	bd10      	pop	{r4, pc}

08012370 <_free_r>:
 8012370:	b538      	push	{r3, r4, r5, lr}
 8012372:	4605      	mov	r5, r0
 8012374:	2900      	cmp	r1, #0
 8012376:	d041      	beq.n	80123fc <_free_r+0x8c>
 8012378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801237c:	1f0c      	subs	r4, r1, #4
 801237e:	2b00      	cmp	r3, #0
 8012380:	bfb8      	it	lt
 8012382:	18e4      	addlt	r4, r4, r3
 8012384:	f000 f83e 	bl	8012404 <__malloc_lock>
 8012388:	4a1d      	ldr	r2, [pc, #116]	@ (8012400 <_free_r+0x90>)
 801238a:	6813      	ldr	r3, [r2, #0]
 801238c:	b933      	cbnz	r3, 801239c <_free_r+0x2c>
 801238e:	6063      	str	r3, [r4, #4]
 8012390:	6014      	str	r4, [r2, #0]
 8012392:	4628      	mov	r0, r5
 8012394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012398:	f000 b83a 	b.w	8012410 <__malloc_unlock>
 801239c:	42a3      	cmp	r3, r4
 801239e:	d908      	bls.n	80123b2 <_free_r+0x42>
 80123a0:	6820      	ldr	r0, [r4, #0]
 80123a2:	1821      	adds	r1, r4, r0
 80123a4:	428b      	cmp	r3, r1
 80123a6:	bf01      	itttt	eq
 80123a8:	6819      	ldreq	r1, [r3, #0]
 80123aa:	685b      	ldreq	r3, [r3, #4]
 80123ac:	1809      	addeq	r1, r1, r0
 80123ae:	6021      	streq	r1, [r4, #0]
 80123b0:	e7ed      	b.n	801238e <_free_r+0x1e>
 80123b2:	461a      	mov	r2, r3
 80123b4:	685b      	ldr	r3, [r3, #4]
 80123b6:	b10b      	cbz	r3, 80123bc <_free_r+0x4c>
 80123b8:	42a3      	cmp	r3, r4
 80123ba:	d9fa      	bls.n	80123b2 <_free_r+0x42>
 80123bc:	6811      	ldr	r1, [r2, #0]
 80123be:	1850      	adds	r0, r2, r1
 80123c0:	42a0      	cmp	r0, r4
 80123c2:	d10b      	bne.n	80123dc <_free_r+0x6c>
 80123c4:	6820      	ldr	r0, [r4, #0]
 80123c6:	4401      	add	r1, r0
 80123c8:	1850      	adds	r0, r2, r1
 80123ca:	4283      	cmp	r3, r0
 80123cc:	6011      	str	r1, [r2, #0]
 80123ce:	d1e0      	bne.n	8012392 <_free_r+0x22>
 80123d0:	6818      	ldr	r0, [r3, #0]
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	6053      	str	r3, [r2, #4]
 80123d6:	4408      	add	r0, r1
 80123d8:	6010      	str	r0, [r2, #0]
 80123da:	e7da      	b.n	8012392 <_free_r+0x22>
 80123dc:	d902      	bls.n	80123e4 <_free_r+0x74>
 80123de:	230c      	movs	r3, #12
 80123e0:	602b      	str	r3, [r5, #0]
 80123e2:	e7d6      	b.n	8012392 <_free_r+0x22>
 80123e4:	6820      	ldr	r0, [r4, #0]
 80123e6:	1821      	adds	r1, r4, r0
 80123e8:	428b      	cmp	r3, r1
 80123ea:	bf04      	itt	eq
 80123ec:	6819      	ldreq	r1, [r3, #0]
 80123ee:	685b      	ldreq	r3, [r3, #4]
 80123f0:	6063      	str	r3, [r4, #4]
 80123f2:	bf04      	itt	eq
 80123f4:	1809      	addeq	r1, r1, r0
 80123f6:	6021      	streq	r1, [r4, #0]
 80123f8:	6054      	str	r4, [r2, #4]
 80123fa:	e7ca      	b.n	8012392 <_free_r+0x22>
 80123fc:	bd38      	pop	{r3, r4, r5, pc}
 80123fe:	bf00      	nop
 8012400:	24007338 	.word	0x24007338

08012404 <__malloc_lock>:
 8012404:	4801      	ldr	r0, [pc, #4]	@ (801240c <__malloc_lock+0x8>)
 8012406:	f7ff bfa3 	b.w	8012350 <__retarget_lock_acquire_recursive>
 801240a:	bf00      	nop
 801240c:	24007334 	.word	0x24007334

08012410 <__malloc_unlock>:
 8012410:	4801      	ldr	r0, [pc, #4]	@ (8012418 <__malloc_unlock+0x8>)
 8012412:	f7ff bf9e 	b.w	8012352 <__retarget_lock_release_recursive>
 8012416:	bf00      	nop
 8012418:	24007334 	.word	0x24007334

0801241c <_init>:
 801241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801241e:	bf00      	nop
 8012420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012422:	bc08      	pop	{r3}
 8012424:	469e      	mov	lr, r3
 8012426:	4770      	bx	lr

08012428 <_fini>:
 8012428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801242a:	bf00      	nop
 801242c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801242e:	bc08      	pop	{r3}
 8012430:	469e      	mov	lr, r3
 8012432:	4770      	bx	lr
