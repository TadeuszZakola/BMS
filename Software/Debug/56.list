
56.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f94  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800722c  0800722c  0000822c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800723c  0800723c  0000823c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08007240  08007240  00008240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08007244  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002c4  24000010  08007254  00009010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240002d4  08007254  000092d4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018496  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000271b  00000000  00000000  000214d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001638  00000000  00000000  00023bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001159  00000000  00000000  00025228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038c3b  00000000  00000000  00026381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00019308  00000000  00000000  0005efbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00180b7e  00000000  00000000  000782c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001f8e42  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000061a4  00000000  00000000  001f8e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000059  00000000  00000000  001ff02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007214 	.word	0x08007214

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08007214 	.word	0x08007214

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80002de:	4b42      	ldr	r3, [pc, #264]	@ (80003e8 <main+0x110>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d11b      	bne.n	8000322 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002ea:	f3bf 8f4f 	dsb	sy
}
 80002ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80002f0:	f3bf 8f6f 	isb	sy
}
 80002f4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80002f6:	4b3c      	ldr	r3, [pc, #240]	@ (80003e8 <main+0x110>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80002fe:	f3bf 8f4f 	dsb	sy
}
 8000302:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000304:	f3bf 8f6f 	isb	sy
}
 8000308:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800030a:	4b37      	ldr	r3, [pc, #220]	@ (80003e8 <main+0x110>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	4a36      	ldr	r2, [pc, #216]	@ (80003e8 <main+0x110>)
 8000310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000314:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000316:	f3bf 8f4f 	dsb	sy
}
 800031a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800031c:	f3bf 8f6f 	isb	sy
}
 8000320:	e000      	b.n	8000324 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000322:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000324:	4b30      	ldr	r3, [pc, #192]	@ (80003e8 <main+0x110>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800032c:	2b00      	cmp	r3, #0
 800032e:	d138      	bne.n	80003a2 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000330:	4b2d      	ldr	r3, [pc, #180]	@ (80003e8 <main+0x110>)
 8000332:	2200      	movs	r2, #0
 8000334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000338:	f3bf 8f4f 	dsb	sy
}
 800033c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800033e:	4b2a      	ldr	r3, [pc, #168]	@ (80003e8 <main+0x110>)
 8000340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000344:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	0b5b      	lsrs	r3, r3, #13
 800034a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800034e:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	08db      	lsrs	r3, r3, #3
 8000354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000358:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	015a      	lsls	r2, r3, #5
 800035e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000362:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000364:	683a      	ldr	r2, [r7, #0]
 8000366:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000368:	491f      	ldr	r1, [pc, #124]	@ (80003e8 <main+0x110>)
 800036a:	4313      	orrs	r3, r2
 800036c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	1e5a      	subs	r2, r3, #1
 8000374:	603a      	str	r2, [r7, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d1ef      	bne.n	800035a <main+0x82>
    } while(sets-- != 0U);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	1e5a      	subs	r2, r3, #1
 800037e:	607a      	str	r2, [r7, #4]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d1e5      	bne.n	8000350 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000384:	f3bf 8f4f 	dsb	sy
}
 8000388:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800038a:	4b17      	ldr	r3, [pc, #92]	@ (80003e8 <main+0x110>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a16      	ldr	r2, [pc, #88]	@ (80003e8 <main+0x110>)
 8000390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000394:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	e000      	b.n	80003a4 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003a2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a4:	f000 fe46 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a8:	f000 f822 	bl	80003f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ac:	f000 fabc 	bl	8000928 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003b0:	f000 f890 	bl	80004d4 <MX_ADC1_Init>
  MX_HRTIM_Init();
 80003b4:	f000 f912 	bl	80005dc <MX_HRTIM_Init>
  MX_LPTIM1_Init();
 80003b8:	f000 f99a 	bl	80006f0 <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 80003bc:	f000 f9c4 	bl	8000748 <MX_LPTIM2_Init>
  MX_LPTIM3_Init();
 80003c0:	f000 f9ee 	bl	80007a0 <MX_LPTIM3_Init>
  MX_LPTIM4_Init();
 80003c4:	f000 fa16 	bl	80007f4 <MX_LPTIM4_Init>
  MX_LPTIM5_Init();
 80003c8:	f000 fa3a 	bl	8000840 <MX_LPTIM5_Init>
  MX_TIM2_Init();
 80003cc:	f000 fa5e 	bl	800088c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
int xd =0 ;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 80003d4:	2104      	movs	r1, #4
 80003d6:	4805      	ldr	r0, [pc, #20]	@ (80003ec <main+0x114>)
 80003d8:	f002 fa35 	bl	8002846 <HAL_GPIO_TogglePin>

	  	// Wait for 500 ms
	  	HAL_Delay(5);
 80003dc:	2005      	movs	r0, #5
 80003de:	f000 febb 	bl	8001158 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 80003e2:	bf00      	nop
 80003e4:	e7f6      	b.n	80003d4 <main+0xfc>
 80003e6:	bf00      	nop
 80003e8:	e000ed00 	.word	0xe000ed00
 80003ec:	58021000 	.word	0x58021000

080003f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b09c      	sub	sp, #112	@ 0x70
 80003f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003fa:	224c      	movs	r2, #76	@ 0x4c
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f006 fedc 	bl	80071bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2220      	movs	r2, #32
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f006 fed6 	bl	80071bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000410:	2002      	movs	r0, #2
 8000412:	f002 fec5 	bl	80031a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000416:	2300      	movs	r3, #0
 8000418:	603b      	str	r3, [r7, #0]
 800041a:	4b2b      	ldr	r3, [pc, #172]	@ (80004c8 <SystemClock_Config+0xd8>)
 800041c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800041e:	4a2a      	ldr	r2, [pc, #168]	@ (80004c8 <SystemClock_Config+0xd8>)
 8000420:	f023 0301 	bic.w	r3, r3, #1
 8000424:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000426:	4b28      	ldr	r3, [pc, #160]	@ (80004c8 <SystemClock_Config+0xd8>)
 8000428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	4b26      	ldr	r3, [pc, #152]	@ (80004cc <SystemClock_Config+0xdc>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000438:	4a24      	ldr	r2, [pc, #144]	@ (80004cc <SystemClock_Config+0xdc>)
 800043a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b22      	ldr	r3, [pc, #136]	@ (80004cc <SystemClock_Config+0xdc>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000448:	603b      	str	r3, [r7, #0]
 800044a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800044c:	bf00      	nop
 800044e:	4b1f      	ldr	r3, [pc, #124]	@ (80004cc <SystemClock_Config+0xdc>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000456:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800045a:	d1f8      	bne.n	800044e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800045c:	4b1c      	ldr	r3, [pc, #112]	@ (80004d0 <SystemClock_Config+0xe0>)
 800045e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000460:	4a1b      	ldr	r2, [pc, #108]	@ (80004d0 <SystemClock_Config+0xe0>)
 8000462:	f023 0303 	bic.w	r3, r3, #3
 8000466:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000468:	2302      	movs	r3, #2
 800046a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800046c:	2301      	movs	r3, #1
 800046e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000470:	2340      	movs	r3, #64	@ 0x40
 8000472:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000474:	2300      	movs	r3, #0
 8000476:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800047c:	4618      	mov	r0, r3
 800047e:	f002 fec9 	bl	8003214 <HAL_RCC_OscConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000488:	f000 fb04 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048c:	233f      	movs	r3, #63	@ 0x3f
 800048e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000490:	2300      	movs	r3, #0
 8000492:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004a0:	2340      	movs	r3, #64	@ 0x40
 80004a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004a8:	2340      	movs	r3, #64	@ 0x40
 80004aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2101      	movs	r1, #1
 80004b0:	4618      	mov	r0, r3
 80004b2:	f003 fb09 	bl	8003ac8 <HAL_RCC_ClockConfig>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80004bc:	f000 faea 	bl	8000a94 <Error_Handler>
  }
}
 80004c0:	bf00      	nop
 80004c2:	3770      	adds	r7, #112	@ 0x70
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	58000400 	.word	0x58000400
 80004cc:	58024800 	.word	0x58024800
 80004d0:	58024400 	.word	0x58024400

080004d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	@ 0x28
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004da:	f107 031c 	add.w	r3, r7, #28
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004e6:	463b      	mov	r3, r7
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
 80004f4:	615a      	str	r2, [r3, #20]
 80004f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004f8:	4b35      	ldr	r3, [pc, #212]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 80004fa:	4a36      	ldr	r2, [pc, #216]	@ (80005d4 <MX_ADC1_Init+0x100>)
 80004fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004fe:	4b34      	ldr	r3, [pc, #208]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000504:	4b32      	ldr	r3, [pc, #200]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 8000506:	2204      	movs	r2, #4
 8000508:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800050a:	4b31      	ldr	r3, [pc, #196]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 800050c:	2200      	movs	r2, #0
 800050e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000510:	4b2f      	ldr	r3, [pc, #188]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 8000512:	2200      	movs	r2, #0
 8000514:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000516:	4b2e      	ldr	r3, [pc, #184]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 8000518:	2201      	movs	r2, #1
 800051a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800051c:	4b2c      	ldr	r3, [pc, #176]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 800051e:	2200      	movs	r2, #0
 8000520:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000522:	4b2b      	ldr	r3, [pc, #172]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 8000524:	2200      	movs	r2, #0
 8000526:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000528:	4b29      	ldr	r3, [pc, #164]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 800052a:	2200      	movs	r2, #0
 800052c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800052e:	4b28      	ldr	r3, [pc, #160]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 8000530:	2200      	movs	r2, #0
 8000532:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000534:	4b26      	ldr	r3, [pc, #152]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 8000536:	2200      	movs	r2, #0
 8000538:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800053a:	4b25      	ldr	r3, [pc, #148]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 800053c:	2200      	movs	r2, #0
 800053e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000540:	4b23      	ldr	r3, [pc, #140]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 8000542:	2200      	movs	r2, #0
 8000544:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000548:	4b21      	ldr	r3, [pc, #132]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 800054a:	2201      	movs	r2, #1
 800054c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800054e:	4820      	ldr	r0, [pc, #128]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 8000550:	f000 ffbe 	bl	80014d0 <HAL_ADC_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800055a:	f000 fa9b 	bl	8000a94 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800055e:	4b1c      	ldr	r3, [pc, #112]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 8000560:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000564:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000566:	4b1a      	ldr	r3, [pc, #104]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800056c:	4818      	ldr	r0, [pc, #96]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 800056e:	f000 ffaf 	bl	80014d0 <HAL_ADC_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000578:	f000 fa8c 	bl	8000a94 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000580:	f107 031c 	add.w	r3, r7, #28
 8000584:	4619      	mov	r1, r3
 8000586:	4812      	ldr	r0, [pc, #72]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 8000588:	f001 fdd2 	bl	8002130 <HAL_ADCEx_MultiModeConfigChannel>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000592:	f000 fa7f 	bl	8000a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000596:	4b10      	ldr	r3, [pc, #64]	@ (80005d8 <MX_ADC1_Init+0x104>)
 8000598:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800059a:	2306      	movs	r3, #6
 800059c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005a2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80005a6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005a8:	2304      	movs	r3, #4
 80005aa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b4:	463b      	mov	r3, r7
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	@ (80005d0 <MX_ADC1_Init+0xfc>)
 80005ba:	f001 f92b 	bl	8001814 <HAL_ADC_ConfigChannel>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80005c4:	f000 fa66 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	3728      	adds	r7, #40	@ 0x28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2400002c 	.word	0x2400002c
 80005d4:	40022000 	.word	0x40022000
 80005d8:	10c00010 	.word	0x10c00010

080005dc <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b09a      	sub	sp, #104	@ 0x68
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80005e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2254      	movs	r2, #84	@ 0x54
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f006 fde0 	bl	80071bc <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 80005fc:	4b3a      	ldr	r3, [pc, #232]	@ (80006e8 <MX_HRTIM_Init+0x10c>)
 80005fe:	4a3b      	ldr	r2, [pc, #236]	@ (80006ec <MX_HRTIM_Init+0x110>)
 8000600:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000602:	4b39      	ldr	r3, [pc, #228]	@ (80006e8 <MX_HRTIM_Init+0x10c>)
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000608:	4b37      	ldr	r3, [pc, #220]	@ (80006e8 <MX_HRTIM_Init+0x10c>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 800060e:	4836      	ldr	r0, [pc, #216]	@ (80006e8 <MX_HRTIM_Init+0x10c>)
 8000610:	f002 f934 	bl	800287c <HAL_HRTIM_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_HRTIM_Init+0x42>
  {
    Error_Handler();
 800061a:	f000 fa3b 	bl	8000a94 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFFD;
 800061e:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8000622:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000624:	2300      	movs	r3, #0
 8000626:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000628:	2305      	movs	r3, #5
 800062a:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800062c:	2308      	movs	r3, #8
 800062e:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000630:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000634:	461a      	mov	r2, r3
 8000636:	2100      	movs	r1, #0
 8000638:	482b      	ldr	r0, [pc, #172]	@ (80006e8 <MX_HRTIM_Init+0x10c>)
 800063a:	f002 f9ef 	bl	8002a1c <HAL_HRTIM_TimeBaseConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_HRTIM_Init+0x6c>
  {
    Error_Handler();
 8000644:	f000 fa26 	bl	8000a94 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  pTimerCfg.DMASrcAddress = 0x0000;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  pTimerCfg.DMADstAddress = 0x0000;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMASize = 0x1;
 8000658:	2301      	movs	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800066c:	2300      	movs	r3, #0
 800066e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000670:	2300      	movs	r3, #0
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000674:	2300      	movs	r3, #0
 8000676:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000678:	2300      	movs	r3, #0
 800067a:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800067c:	2300      	movs	r3, #0
 800067e:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000680:	2300      	movs	r3, #0
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000684:	2300      	movs	r3, #0
 8000686:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000688:	2300      	movs	r3, #0
 800068a:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800068c:	2300      	movs	r3, #0
 800068e:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000690:	2300      	movs	r3, #0
 8000692:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8000698:	2300      	movs	r3, #0
 800069a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	461a      	mov	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	4811      	ldr	r0, [pc, #68]	@ (80006e8 <MX_HRTIM_Init+0x10c>)
 80006a4:	f002 f9e2 	bl	8002a6c <HAL_HRTIM_WaveformTimerConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_HRTIM_Init+0xd6>
  {
    Error_Handler();
 80006ae:	f000 f9f1 	bl	8000a94 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	461a      	mov	r2, r3
 80006b6:	2101      	movs	r1, #1
 80006b8:	480b      	ldr	r0, [pc, #44]	@ (80006e8 <MX_HRTIM_Init+0x10c>)
 80006ba:	f002 f9d7 	bl	8002a6c <HAL_HRTIM_WaveformTimerConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_HRTIM_Init+0xec>
  {
    Error_Handler();
 80006c4:	f000 f9e6 	bl	8000a94 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 80006c8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006cc:	461a      	mov	r2, r3
 80006ce:	2101      	movs	r1, #1
 80006d0:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_HRTIM_Init+0x10c>)
 80006d2:	f002 f9a3 	bl	8002a1c <HAL_HRTIM_TimeBaseConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_HRTIM_Init+0x104>
  {
    Error_Handler();
 80006dc:	f000 f9da 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	3768      	adds	r7, #104	@ 0x68
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	24000090 	.word	0x24000090
 80006ec:	40017400 	.word	0x40017400

080006f0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <MX_LPTIM1_Init+0x50>)
 80006f6:	4a13      	ldr	r2, [pc, #76]	@ (8000744 <MX_LPTIM1_Init+0x54>)
 80006f8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <MX_LPTIM1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <MX_LPTIM1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <MX_LPTIM1_Init+0x50>)
 8000708:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800070c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800070e:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <MX_LPTIM1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <MX_LPTIM1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_LPTIM1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <MX_LPTIM1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <MX_LPTIM1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_LPTIM1_Init+0x50>)
 800072e:	f002 fc87 	bl	8003040 <HAL_LPTIM_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8000738:	f000 f9ac 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2400016c 	.word	0x2400016c
 8000744:	40002400 	.word	0x40002400

08000748 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_LPTIM2_Init+0x50>)
 800074e:	4a13      	ldr	r2, [pc, #76]	@ (800079c <MX_LPTIM2_Init+0x54>)
 8000750:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_LPTIM2_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_LPTIM2_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_LPTIM2_Init+0x50>)
 8000760:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000764:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_LPTIM2_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_LPTIM2_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_LPTIM2_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <MX_LPTIM2_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_LPTIM2_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <MX_LPTIM2_Init+0x50>)
 8000786:	f002 fc5b 	bl	8003040 <HAL_LPTIM_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 8000790:	f000 f980 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	240001a4 	.word	0x240001a4
 800079c:	58002400 	.word	0x58002400

080007a0 <MX_LPTIM3_Init>:
  * @brief LPTIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM3_Init 0 */

  /* USER CODE BEGIN LPTIM3_Init 1 */

  /* USER CODE END LPTIM3_Init 1 */
  hlptim3.Instance = LPTIM3;
 80007a4:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_LPTIM3_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <MX_LPTIM3_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  hlptim3.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <MX_LPTIM3_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  hlptim3.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_LPTIM3_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hlptim3.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <MX_LPTIM3_Init+0x4c>)
 80007b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007bc:	615a      	str	r2, [r3, #20]
  hlptim3.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <MX_LPTIM3_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  hlptim3.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_LPTIM3_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim3.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_LPTIM3_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim3.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_LPTIM3_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_LPTIM_Init(&hlptim3) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_LPTIM3_Init+0x4c>)
 80007d8:	f002 fc32 	bl	8003040 <HAL_LPTIM_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_LPTIM3_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f957 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM3_Init 2 */

  /* USER CODE END LPTIM3_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	240001dc 	.word	0x240001dc
 80007f0:	58002800 	.word	0x58002800

080007f4 <MX_LPTIM4_Init>:
  * @brief LPTIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM4_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM4_Init 0 */

  /* USER CODE BEGIN LPTIM4_Init 1 */

  /* USER CODE END LPTIM4_Init 1 */
  hlptim4.Instance = LPTIM4;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_LPTIM4_Init+0x44>)
 80007fa:	4a10      	ldr	r2, [pc, #64]	@ (800083c <MX_LPTIM4_Init+0x48>)
 80007fc:	601a      	str	r2, [r3, #0]
  hlptim4.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_LPTIM4_Init+0x44>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  hlptim4.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_LPTIM4_Init+0x44>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hlptim4.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <MX_LPTIM4_Init+0x44>)
 800080c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000810:	615a      	str	r2, [r3, #20]
  hlptim4.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_LPTIM4_Init+0x44>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  hlptim4.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000818:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <MX_LPTIM4_Init+0x44>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim4.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <MX_LPTIM4_Init+0x44>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_LPTIM_Init(&hlptim4) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	@ (8000838 <MX_LPTIM4_Init+0x44>)
 8000826:	f002 fc0b 	bl	8003040 <HAL_LPTIM_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_LPTIM4_Init+0x40>
  {
    Error_Handler();
 8000830:	f000 f930 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM4_Init 2 */

  /* USER CODE END LPTIM4_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	24000214 	.word	0x24000214
 800083c:	58002c00 	.word	0x58002c00

08000840 <MX_LPTIM5_Init>:
  * @brief LPTIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM5_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM5_Init 0 */

  /* USER CODE BEGIN LPTIM5_Init 1 */

  /* USER CODE END LPTIM5_Init 1 */
  hlptim5.Instance = LPTIM5;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_LPTIM5_Init+0x44>)
 8000846:	4a10      	ldr	r2, [pc, #64]	@ (8000888 <MX_LPTIM5_Init+0x48>)
 8000848:	601a      	str	r2, [r3, #0]
  hlptim5.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_LPTIM5_Init+0x44>)
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
  hlptim5.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_LPTIM5_Init+0x44>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hlptim5.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_LPTIM5_Init+0x44>)
 8000858:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800085c:	615a      	str	r2, [r3, #20]
  hlptim5.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_LPTIM5_Init+0x44>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  hlptim5.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <MX_LPTIM5_Init+0x44>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim5.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_LPTIM5_Init+0x44>)
 800086c:	2200      	movs	r2, #0
 800086e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_LPTIM_Init(&hlptim5) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_LPTIM5_Init+0x44>)
 8000872:	f002 fbe5 	bl	8003040 <HAL_LPTIM_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_LPTIM5_Init+0x40>
  {
    Error_Handler();
 800087c:	f000 f90a 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM5_Init 2 */

  /* USER CODE END LPTIM5_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2400024c 	.word	0x2400024c
 8000888:	58003000 	.word	0x58003000

0800088c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000924 <MX_TIM2_Init+0x98>)
 80008ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_TIM2_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <MX_TIM2_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008be:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <MX_TIM2_Init+0x98>)
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295
 80008c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c6:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <MX_TIM2_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008cc:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <MX_TIM2_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d2:	4814      	ldr	r0, [pc, #80]	@ (8000924 <MX_TIM2_Init+0x98>)
 80008d4:	f006 f950 	bl	8006b78 <HAL_TIM_Base_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008de:	f000 f8d9 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	480d      	ldr	r0, [pc, #52]	@ (8000924 <MX_TIM2_Init+0x98>)
 80008f0:	f006 f99a 	bl	8006c28 <HAL_TIM_ConfigClockSource>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008fa:	f000 f8cb 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	4619      	mov	r1, r3
 800090a:	4806      	ldr	r0, [pc, #24]	@ (8000924 <MX_TIM2_Init+0x98>)
 800090c:	f006 fbc8 	bl	80070a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000916:	f000 f8bd 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	3720      	adds	r7, #32
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	24000284 	.word	0x24000284

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	@ 0x28
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800093e:	4b50      	ldr	r3, [pc, #320]	@ (8000a80 <MX_GPIO_Init+0x158>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000944:	4a4e      	ldr	r2, [pc, #312]	@ (8000a80 <MX_GPIO_Init+0x158>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800094e:	4b4c      	ldr	r3, [pc, #304]	@ (8000a80 <MX_GPIO_Init+0x158>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	f003 0310 	and.w	r3, r3, #16
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b48      	ldr	r3, [pc, #288]	@ (8000a80 <MX_GPIO_Init+0x158>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000962:	4a47      	ldr	r2, [pc, #284]	@ (8000a80 <MX_GPIO_Init+0x158>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096c:	4b44      	ldr	r3, [pc, #272]	@ (8000a80 <MX_GPIO_Init+0x158>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	4b41      	ldr	r3, [pc, #260]	@ (8000a80 <MX_GPIO_Init+0x158>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000980:	4a3f      	ldr	r2, [pc, #252]	@ (8000a80 <MX_GPIO_Init+0x158>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098a:	4b3d      	ldr	r3, [pc, #244]	@ (8000a80 <MX_GPIO_Init+0x158>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000998:	4b39      	ldr	r3, [pc, #228]	@ (8000a80 <MX_GPIO_Init+0x158>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099e:	4a38      	ldr	r2, [pc, #224]	@ (8000a80 <MX_GPIO_Init+0x158>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a8:	4b35      	ldr	r3, [pc, #212]	@ (8000a80 <MX_GPIO_Init+0x158>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	213c      	movs	r1, #60	@ 0x3c
 80009ba:	4832      	ldr	r0, [pc, #200]	@ (8000a84 <MX_GPIO_Init+0x15c>)
 80009bc:	f001 ff2a 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2160      	movs	r1, #96	@ 0x60
 80009c4:	4830      	ldr	r0, [pc, #192]	@ (8000a88 <MX_GPIO_Init+0x160>)
 80009c6:	f001 ff25 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80009d0:	482e      	ldr	r0, [pc, #184]	@ (8000a8c <MX_GPIO_Init+0x164>)
 80009d2:	f001 ff1f 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009d6:	233c      	movs	r3, #60	@ 0x3c
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4825      	ldr	r0, [pc, #148]	@ (8000a84 <MX_GPIO_Init+0x15c>)
 80009ee:	f001 fd61 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009f2:	2304      	movs	r3, #4
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4820      	ldr	r0, [pc, #128]	@ (8000a88 <MX_GPIO_Init+0x160>)
 8000a06:	f001 fd55 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000a0a:	2360      	movs	r3, #96	@ 0x60
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4819      	ldr	r0, [pc, #100]	@ (8000a88 <MX_GPIO_Init+0x160>)
 8000a22:	f001 fd47 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a26:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4812      	ldr	r0, [pc, #72]	@ (8000a84 <MX_GPIO_Init+0x15c>)
 8000a3c:	f001 fd3a 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a40:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	480e      	ldr	r0, [pc, #56]	@ (8000a90 <MX_GPIO_Init+0x168>)
 8000a56:	f001 fd2d 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000a5a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4806      	ldr	r0, [pc, #24]	@ (8000a8c <MX_GPIO_Init+0x164>)
 8000a74:	f001 fd1e 	bl	80024b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	@ 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	58024400 	.word	0x58024400
 8000a84:	58021000 	.word	0x58021000
 8000a88:	58020000 	.word	0x58020000
 8000a8c:	58020800 	.word	0x58020800
 8000a90:	58020400 	.word	0x58020400

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <Error_Handler+0x8>

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <HAL_MspInit+0x30>)
 8000aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aac:	4a08      	ldr	r2, [pc, #32]	@ (8000ad0 <HAL_MspInit+0x30>)
 8000aae:	f043 0302 	orr.w	r3, r3, #2
 8000ab2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_MspInit+0x30>)
 8000ab8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	58024400 	.word	0x58024400

08000ad4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b0bc      	sub	sp, #240	@ 0xf0
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aec:	f107 0318 	add.w	r3, r7, #24
 8000af0:	22c0      	movs	r2, #192	@ 0xc0
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f006 fb61 	bl	80071bc <memset>
  if(hadc->Instance==ADC1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a3a      	ldr	r2, [pc, #232]	@ (8000be8 <HAL_ADC_MspInit+0x114>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d16d      	bne.n	8000be0 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b04:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000b10:	2304      	movs	r3, #4
 8000b12:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000b14:	230a      	movs	r3, #10
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b24:	23c0      	movs	r3, #192	@ 0xc0
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b28:	2320      	movs	r3, #32
 8000b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b36:	f107 0318 	add.w	r3, r7, #24
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fb3a 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000b46:	f7ff ffa5 	bl	8000a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b4a:	4b28      	ldr	r3, [pc, #160]	@ (8000bec <HAL_ADC_MspInit+0x118>)
 8000b4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b50:	4a26      	ldr	r2, [pc, #152]	@ (8000bec <HAL_ADC_MspInit+0x118>)
 8000b52:	f043 0320 	orr.w	r3, r3, #32
 8000b56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b5a:	4b24      	ldr	r3, [pc, #144]	@ (8000bec <HAL_ADC_MspInit+0x118>)
 8000b5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b60:	f003 0320 	and.w	r3, r3, #32
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b68:	4b20      	ldr	r3, [pc, #128]	@ (8000bec <HAL_ADC_MspInit+0x118>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bec <HAL_ADC_MspInit+0x118>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b78:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <HAL_ADC_MspInit+0x118>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <HAL_ADC_MspInit+0x118>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8c:	4a17      	ldr	r2, [pc, #92]	@ (8000bec <HAL_ADC_MspInit+0x118>)
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b96:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <HAL_ADC_MspInit+0x118>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000baa:	2303      	movs	r3, #3
 8000bac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480c      	ldr	r0, [pc, #48]	@ (8000bf0 <HAL_ADC_MspInit+0x11c>)
 8000bbe:	f001 fc79 	bl	80024b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	@ (8000bf4 <HAL_ADC_MspInit+0x120>)
 8000bdc:	f001 fc6a 	bl	80024b4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000be0:	bf00      	nop
 8000be2:	37f0      	adds	r7, #240	@ 0xf0
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40022000 	.word	0x40022000
 8000bec:	58024400 	.word	0x58024400
 8000bf0:	58020800 	.word	0x58020800
 8000bf4:	58020400 	.word	0x58020400

08000bf8 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b0b4      	sub	sp, #208	@ 0xd0
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	22c0      	movs	r2, #192	@ 0xc0
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f006 fad7 	bl	80071bc <memset>
  if(hhrtim->Instance==HRTIM1)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a14      	ldr	r2, [pc, #80]	@ (8000c64 <HAL_HRTIM_MspInit+0x6c>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d121      	bne.n	8000c5c <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8000c18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 fac0 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8000c3a:	f7ff ff2b 	bl	8000a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <HAL_HRTIM_MspInit+0x70>)
 8000c40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c44:	4a08      	ldr	r2, [pc, #32]	@ (8000c68 <HAL_HRTIM_MspInit+0x70>)
 8000c46:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000c4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_HRTIM_MspInit+0x70>)
 8000c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 8000c5c:	bf00      	nop
 8000c5e:	37d0      	adds	r7, #208	@ 0xd0
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40017400 	.word	0x40017400
 8000c68:	58024400 	.word	0x58024400

08000c6c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b0b8      	sub	sp, #224	@ 0xe0
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c74:	f107 0320 	add.w	r3, r7, #32
 8000c78:	22c0      	movs	r2, #192	@ 0xc0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f006 fa9d 	bl	80071bc <memset>
  if(hlptim->Instance==LPTIM1)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a64      	ldr	r2, [pc, #400]	@ (8000e18 <HAL_LPTIM_MspInit+0x1ac>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d122      	bne.n	8000cd2 <HAL_LPTIM_MspInit+0x66>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000c8c:	f04f 0220 	mov.w	r2, #32
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f003 fa86 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_LPTIM_MspInit+0x46>
    {
      Error_Handler();
 8000cae:	f7ff fef1 	bl	8000a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000cb2:	4b5a      	ldr	r3, [pc, #360]	@ (8000e1c <HAL_LPTIM_MspInit+0x1b0>)
 8000cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cb8:	4a58      	ldr	r2, [pc, #352]	@ (8000e1c <HAL_LPTIM_MspInit+0x1b0>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cbe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cc2:	4b56      	ldr	r3, [pc, #344]	@ (8000e1c <HAL_LPTIM_MspInit+0x1b0>)
 8000cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ccc:	61fb      	str	r3, [r7, #28]
 8000cce:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN LPTIM5_MspInit 1 */

  /* USER CODE END LPTIM5_MspInit 1 */
  }

}
 8000cd0:	e09e      	b.n	8000e10 <HAL_LPTIM_MspInit+0x1a4>
  else if(hlptim->Instance==LPTIM2)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a52      	ldr	r2, [pc, #328]	@ (8000e20 <HAL_LPTIM_MspInit+0x1b4>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d122      	bne.n	8000d22 <HAL_LPTIM_MspInit+0xb6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8000cdc:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cee:	f107 0320 	add.w	r3, r7, #32
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 fa5e 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_LPTIM_MspInit+0x96>
      Error_Handler();
 8000cfe:	f7ff fec9 	bl	8000a94 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8000d02:	4b46      	ldr	r3, [pc, #280]	@ (8000e1c <HAL_LPTIM_MspInit+0x1b0>)
 8000d04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d08:	4a44      	ldr	r2, [pc, #272]	@ (8000e1c <HAL_LPTIM_MspInit+0x1b0>)
 8000d0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d0e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d12:	4b42      	ldr	r3, [pc, #264]	@ (8000e1c <HAL_LPTIM_MspInit+0x1b0>)
 8000d14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d1c:	61bb      	str	r3, [r7, #24]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
}
 8000d20:	e076      	b.n	8000e10 <HAL_LPTIM_MspInit+0x1a4>
  else if(hlptim->Instance==LPTIM3)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a3f      	ldr	r2, [pc, #252]	@ (8000e24 <HAL_LPTIM_MspInit+0x1b8>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d122      	bne.n	8000d72 <HAL_LPTIM_MspInit+0x106>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM3;
 8000d2c:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3e:	f107 0320 	add.w	r3, r7, #32
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 fa36 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_LPTIM_MspInit+0xe6>
      Error_Handler();
 8000d4e:	f7ff fea1 	bl	8000a94 <Error_Handler>
    __HAL_RCC_LPTIM3_CLK_ENABLE();
 8000d52:	4b32      	ldr	r3, [pc, #200]	@ (8000e1c <HAL_LPTIM_MspInit+0x1b0>)
 8000d54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d58:	4a30      	ldr	r2, [pc, #192]	@ (8000e1c <HAL_LPTIM_MspInit+0x1b0>)
 8000d5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d5e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d62:	4b2e      	ldr	r3, [pc, #184]	@ (8000e1c <HAL_LPTIM_MspInit+0x1b0>)
 8000d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	697b      	ldr	r3, [r7, #20]
}
 8000d70:	e04e      	b.n	8000e10 <HAL_LPTIM_MspInit+0x1a4>
  else if(hlptim->Instance==LPTIM4)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a2c      	ldr	r2, [pc, #176]	@ (8000e28 <HAL_LPTIM_MspInit+0x1bc>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d122      	bne.n	8000dc2 <HAL_LPTIM_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM4;
 8000d7c:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d8e:	f107 0320 	add.w	r3, r7, #32
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 fa0e 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_LPTIM_MspInit+0x136>
      Error_Handler();
 8000d9e:	f7ff fe79 	bl	8000a94 <Error_Handler>
    __HAL_RCC_LPTIM4_CLK_ENABLE();
 8000da2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <HAL_LPTIM_MspInit+0x1b0>)
 8000da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000da8:	4a1c      	ldr	r2, [pc, #112]	@ (8000e1c <HAL_LPTIM_MspInit+0x1b0>)
 8000daa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000db2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <HAL_LPTIM_MspInit+0x1b0>)
 8000db4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000db8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	693b      	ldr	r3, [r7, #16]
}
 8000dc0:	e026      	b.n	8000e10 <HAL_LPTIM_MspInit+0x1a4>
  else if(hlptim->Instance==LPTIM5)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a19      	ldr	r2, [pc, #100]	@ (8000e2c <HAL_LPTIM_MspInit+0x1c0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d121      	bne.n	8000e10 <HAL_LPTIM_MspInit+0x1a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM5;
 8000dcc:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 f9e6 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_LPTIM_MspInit+0x186>
      Error_Handler();
 8000dee:	f7ff fe51 	bl	8000a94 <Error_Handler>
    __HAL_RCC_LPTIM5_CLK_ENABLE();
 8000df2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <HAL_LPTIM_MspInit+0x1b0>)
 8000df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000df8:	4a08      	ldr	r2, [pc, #32]	@ (8000e1c <HAL_LPTIM_MspInit+0x1b0>)
 8000dfa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dfe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <HAL_LPTIM_MspInit+0x1b0>)
 8000e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	bf00      	nop
 8000e12:	37e0      	adds	r7, #224	@ 0xe0
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40002400 	.word	0x40002400
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	58002400 	.word	0x58002400
 8000e24:	58002800 	.word	0x58002800
 8000e28:	58002c00 	.word	0x58002c00
 8000e2c:	58003000 	.word	0x58003000

08000e30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e40:	d10e      	bne.n	8000e60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_TIM_Base_MspInit+0x3c>)
 8000e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e48:	4a08      	ldr	r2, [pc, #32]	@ (8000e6c <HAL_TIM_Base_MspInit+0x3c>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e52:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_TIM_Base_MspInit+0x3c>)
 8000e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	58024400 	.word	0x58024400

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <NMI_Handler+0x4>

08000e78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <MemManage_Handler+0x4>

08000e88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec6:	f000 f927 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b37      	ldr	r3, [pc, #220]	@ (8000fb4 <SystemInit+0xe4>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eda:	4a36      	ldr	r2, [pc, #216]	@ (8000fb4 <SystemInit+0xe4>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ee4:	4b34      	ldr	r3, [pc, #208]	@ (8000fb8 <SystemInit+0xe8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 030f 	and.w	r3, r3, #15
 8000eec:	2b06      	cmp	r3, #6
 8000eee:	d807      	bhi.n	8000f00 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ef0:	4b31      	ldr	r3, [pc, #196]	@ (8000fb8 <SystemInit+0xe8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f023 030f 	bic.w	r3, r3, #15
 8000ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb8 <SystemInit+0xe8>)
 8000efa:	f043 0307 	orr.w	r3, r3, #7
 8000efe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f00:	4b2e      	ldr	r3, [pc, #184]	@ (8000fbc <SystemInit+0xec>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a2d      	ldr	r2, [pc, #180]	@ (8000fbc <SystemInit+0xec>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fbc <SystemInit+0xec>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f12:	4b2a      	ldr	r3, [pc, #168]	@ (8000fbc <SystemInit+0xec>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4929      	ldr	r1, [pc, #164]	@ (8000fbc <SystemInit+0xec>)
 8000f18:	4b29      	ldr	r3, [pc, #164]	@ (8000fc0 <SystemInit+0xf0>)
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f1e:	4b26      	ldr	r3, [pc, #152]	@ (8000fb8 <SystemInit+0xe8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0308 	and.w	r3, r3, #8
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d007      	beq.n	8000f3a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f2a:	4b23      	ldr	r3, [pc, #140]	@ (8000fb8 <SystemInit+0xe8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f023 030f 	bic.w	r3, r3, #15
 8000f32:	4a21      	ldr	r2, [pc, #132]	@ (8000fb8 <SystemInit+0xe8>)
 8000f34:	f043 0307 	orr.w	r3, r3, #7
 8000f38:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f3a:	4b20      	ldr	r3, [pc, #128]	@ (8000fbc <SystemInit+0xec>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f40:	4b1e      	ldr	r3, [pc, #120]	@ (8000fbc <SystemInit+0xec>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <SystemInit+0xec>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <SystemInit+0xec>)
 8000f4e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc4 <SystemInit+0xf4>)
 8000f50:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <SystemInit+0xec>)
 8000f54:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc8 <SystemInit+0xf8>)
 8000f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f58:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <SystemInit+0xec>)
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fcc <SystemInit+0xfc>)
 8000f5c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <SystemInit+0xec>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <SystemInit+0xec>)
 8000f66:	4a19      	ldr	r2, [pc, #100]	@ (8000fcc <SystemInit+0xfc>)
 8000f68:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <SystemInit+0xec>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <SystemInit+0xec>)
 8000f72:	4a16      	ldr	r2, [pc, #88]	@ (8000fcc <SystemInit+0xfc>)
 8000f74:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f76:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <SystemInit+0xec>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <SystemInit+0xec>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0e      	ldr	r2, [pc, #56]	@ (8000fbc <SystemInit+0xec>)
 8000f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <SystemInit+0xec>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <SystemInit+0x100>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <SystemInit+0x104>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f9a:	d202      	bcs.n	8000fa2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <SystemInit+0x108>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <SystemInit+0x10c>)
 8000fa4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000fa8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00
 8000fb8:	52002000 	.word	0x52002000
 8000fbc:	58024400 	.word	0x58024400
 8000fc0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fc4:	02020200 	.word	0x02020200
 8000fc8:	01ff0000 	.word	0x01ff0000
 8000fcc:	01010280 	.word	0x01010280
 8000fd0:	5c001000 	.word	0x5c001000
 8000fd4:	ffff0000 	.word	0xffff0000
 8000fd8:	51008108 	.word	0x51008108
 8000fdc:	52004000 	.word	0x52004000

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001018 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe4:	f7ff ff74 	bl	8000ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	@ (8001020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	@ (800102c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100e:	f006 f8dd 	bl	80071cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff f961 	bl	80002d8 <main>
  bx  lr
 8001016:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001018:	24060000 	.word	0x24060000
  ldr r0, =_sdata
 800101c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001020:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001024:	08007244 	.word	0x08007244
  ldr r2, =_sbss
 8001028:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800102c:	240002d4 	.word	0x240002d4

08001030 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC3_IRQHandler>
	...

08001034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103a:	2003      	movs	r0, #3
 800103c:	f001 fa08 	bl	8002450 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001040:	f002 fef8 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8001044:	4602      	mov	r2, r0
 8001046:	4b15      	ldr	r3, [pc, #84]	@ (800109c <HAL_Init+0x68>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	0a1b      	lsrs	r3, r3, #8
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	4913      	ldr	r1, [pc, #76]	@ (80010a0 <HAL_Init+0x6c>)
 8001052:	5ccb      	ldrb	r3, [r1, r3]
 8001054:	f003 031f 	and.w	r3, r3, #31
 8001058:	fa22 f303 	lsr.w	r3, r2, r3
 800105c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800105e:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <HAL_Init+0x68>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	4a0e      	ldr	r2, [pc, #56]	@ (80010a0 <HAL_Init+0x6c>)
 8001068:	5cd3      	ldrb	r3, [r2, r3]
 800106a:	f003 031f 	and.w	r3, r3, #31
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	fa22 f303 	lsr.w	r3, r2, r3
 8001074:	4a0b      	ldr	r2, [pc, #44]	@ (80010a4 <HAL_Init+0x70>)
 8001076:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001078:	4a0b      	ldr	r2, [pc, #44]	@ (80010a8 <HAL_Init+0x74>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800107e:	200f      	movs	r0, #15
 8001080:	f000 f814 	bl	80010ac <HAL_InitTick>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e002      	b.n	8001094 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800108e:	f7ff fd07 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	58024400 	.word	0x58024400
 80010a0:	0800722c 	.word	0x0800722c
 80010a4:	24000004 	.word	0x24000004
 80010a8:	24000000 	.word	0x24000000

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010b4:	4b15      	ldr	r3, [pc, #84]	@ (800110c <HAL_InitTick+0x60>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e021      	b.n	8001104 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <HAL_InitTick+0x64>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b11      	ldr	r3, [pc, #68]	@ (800110c <HAL_InitTick+0x60>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 f9df 	bl	800249a <HAL_SYSTICK_Config>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00e      	b.n	8001104 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d80a      	bhi.n	8001102 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f001 f9b7 	bl	8002466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f8:	4a06      	ldr	r2, [pc, #24]	@ (8001114 <HAL_InitTick+0x68>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2400000c 	.word	0x2400000c
 8001110:	24000000 	.word	0x24000000
 8001114:	24000008 	.word	0x24000008

08001118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	@ (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	2400000c 	.word	0x2400000c
 800113c:	240002d0 	.word	0x240002d0

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	240002d0 	.word	0x240002d0

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff ffee 	bl	8001140 <HAL_GetTick>
 8001164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001170:	d005      	beq.n	800117e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <HAL_Delay+0x44>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800117e:	bf00      	nop
 8001180:	f7ff ffde 	bl	8001140 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	429a      	cmp	r2, r3
 800118e:	d8f7      	bhi.n	8001180 <HAL_Delay+0x28>
  {
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2400000c 	.word	0x2400000c

080011a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011a4:	4b03      	ldr	r3, [pc, #12]	@ (80011b4 <HAL_GetREVID+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	0c1b      	lsrs	r3, r3, #16
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	5c001000 	.word	0x5c001000

080011b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	431a      	orrs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	609a      	str	r2, [r3, #8]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	609a      	str	r2, [r3, #8]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3360      	adds	r3, #96	@ 0x60
 8001232:	461a      	mov	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	430b      	orrs	r3, r1
 800124e:	431a      	orrs	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001254:	bf00      	nop
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	431a      	orrs	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	611a      	str	r2, [r3, #16]
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001292:	b480      	push	{r7}
 8001294:	b087      	sub	sp, #28
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3360      	adds	r3, #96	@ 0x60
 80012a2:	461a      	mov	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	431a      	orrs	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	601a      	str	r2, [r3, #0]
  }
}
 80012bc:	bf00      	nop
 80012be:	371c      	adds	r7, #28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3330      	adds	r3, #48	@ 0x30
 80012d8:	461a      	mov	r2, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	4413      	add	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	f003 031f 	and.w	r3, r3, #31
 80012f2:	211f      	movs	r1, #31
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	401a      	ands	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	0e9b      	lsrs	r3, r3, #26
 8001300:	f003 011f 	and.w	r1, r3, #31
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	f003 031f 	and.w	r3, r3, #31
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	431a      	orrs	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001314:	bf00      	nop
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3314      	adds	r3, #20
 8001330:	461a      	mov	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	0e5b      	lsrs	r3, r3, #25
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	4413      	add	r3, r2
 800133e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	0d1b      	lsrs	r3, r3, #20
 8001348:	f003 031f 	and.w	r3, r3, #31
 800134c:	2107      	movs	r1, #7
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	401a      	ands	r2, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	0d1b      	lsrs	r3, r3, #20
 800135a:	f003 031f 	and.w	r3, r3, #31
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	431a      	orrs	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800136a:	bf00      	nop
 800136c:	371c      	adds	r7, #28
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001390:	43db      	mvns	r3, r3
 8001392:	401a      	ands	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0318 	and.w	r3, r3, #24
 800139a:	4908      	ldr	r1, [pc, #32]	@ (80013bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800139c:	40d9      	lsrs	r1, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	400b      	ands	r3, r1
 80013a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013a6:	431a      	orrs	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	000fffff 	.word	0x000fffff

080013c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6093      	str	r3, [r2, #8]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	5fffffc0 	.word	0x5fffffc0

080013e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013f8:	d101      	bne.n	80013fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <LL_ADC_EnableInternalRegulator+0x24>)
 800141a:	4013      	ands	r3, r2
 800141c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	6fffffc0 	.word	0x6fffffc0

08001434 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001444:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001448:	d101      	bne.n	800144e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <LL_ADC_IsEnabled+0x18>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <LL_ADC_IsEnabled+0x1a>
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	2b04      	cmp	r3, #4
 8001494:	d101      	bne.n	800149a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d101      	bne.n	80014c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b089      	sub	sp, #36	@ 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e18f      	b.n	800180a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d109      	bne.n	800150c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff faeb 	bl	8000ad4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff67 	bl	80013e4 <LL_ADC_IsDeepPowerDownEnabled>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff4d 	bl	80013c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff82 	bl	8001434 <LL_ADC_IsInternalRegulatorEnabled>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d114      	bne.n	8001560 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff66 	bl	800140c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001540:	4b87      	ldr	r3, [pc, #540]	@ (8001760 <HAL_ADC_Init+0x290>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	099b      	lsrs	r3, r3, #6
 8001546:	4a87      	ldr	r2, [pc, #540]	@ (8001764 <HAL_ADC_Init+0x294>)
 8001548:	fba2 2303 	umull	r2, r3, r2, r3
 800154c:	099b      	lsrs	r3, r3, #6
 800154e:	3301      	adds	r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001552:	e002      	b.n	800155a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	3b01      	subs	r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f9      	bne.n	8001554 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff65 	bl	8001434 <LL_ADC_IsInternalRegulatorEnabled>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10d      	bne.n	800158c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001574:	f043 0210 	orr.w	r2, r3, #16
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001580:	f043 0201 	orr.w	r2, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff76 	bl	8001482 <LL_ADC_REG_IsConversionOngoing>
 8001596:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159c:	f003 0310 	and.w	r3, r3, #16
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f040 8129 	bne.w	80017f8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f040 8125 	bne.w	80017f8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80015b6:	f043 0202 	orr.w	r2, r3, #2
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff4a 	bl	800145c <LL_ADC_IsEnabled>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d136      	bne.n	800163c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a65      	ldr	r2, [pc, #404]	@ (8001768 <HAL_ADC_Init+0x298>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d004      	beq.n	80015e2 <HAL_ADC_Init+0x112>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a63      	ldr	r2, [pc, #396]	@ (800176c <HAL_ADC_Init+0x29c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d10e      	bne.n	8001600 <HAL_ADC_Init+0x130>
 80015e2:	4861      	ldr	r0, [pc, #388]	@ (8001768 <HAL_ADC_Init+0x298>)
 80015e4:	f7ff ff3a 	bl	800145c <LL_ADC_IsEnabled>
 80015e8:	4604      	mov	r4, r0
 80015ea:	4860      	ldr	r0, [pc, #384]	@ (800176c <HAL_ADC_Init+0x29c>)
 80015ec:	f7ff ff36 	bl	800145c <LL_ADC_IsEnabled>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4323      	orrs	r3, r4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	bf0c      	ite	eq
 80015f8:	2301      	moveq	r3, #1
 80015fa:	2300      	movne	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	e008      	b.n	8001612 <HAL_ADC_Init+0x142>
 8001600:	485b      	ldr	r0, [pc, #364]	@ (8001770 <HAL_ADC_Init+0x2a0>)
 8001602:	f7ff ff2b 	bl	800145c <LL_ADC_IsEnabled>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d012      	beq.n	800163c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a53      	ldr	r2, [pc, #332]	@ (8001768 <HAL_ADC_Init+0x298>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d004      	beq.n	800162a <HAL_ADC_Init+0x15a>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a51      	ldr	r2, [pc, #324]	@ (800176c <HAL_ADC_Init+0x29c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d101      	bne.n	800162e <HAL_ADC_Init+0x15e>
 800162a:	4a52      	ldr	r2, [pc, #328]	@ (8001774 <HAL_ADC_Init+0x2a4>)
 800162c:	e000      	b.n	8001630 <HAL_ADC_Init+0x160>
 800162e:	4a52      	ldr	r2, [pc, #328]	@ (8001778 <HAL_ADC_Init+0x2a8>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4619      	mov	r1, r3
 8001636:	4610      	mov	r0, r2
 8001638:	f7ff fdbe 	bl	80011b8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800163c:	f7ff fdb0 	bl	80011a0 <HAL_GetREVID>
 8001640:	4603      	mov	r3, r0
 8001642:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001646:	4293      	cmp	r3, r2
 8001648:	d914      	bls.n	8001674 <HAL_ADC_Init+0x1a4>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b10      	cmp	r3, #16
 8001650:	d110      	bne.n	8001674 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7d5b      	ldrb	r3, [r3, #21]
 8001656:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800165c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001662:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7f1b      	ldrb	r3, [r3, #28]
 8001668:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800166a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800166c:	f043 030c 	orr.w	r3, r3, #12
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	e00d      	b.n	8001690 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7d5b      	ldrb	r3, [r3, #21]
 8001678:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800167e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001684:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7f1b      	ldrb	r3, [r3, #28]
 800168a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7f1b      	ldrb	r3, [r3, #28]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d106      	bne.n	80016a6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	3b01      	subs	r3, #1
 800169e:	045b      	lsls	r3, r3, #17
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d009      	beq.n	80016c2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	4b2c      	ldr	r3, [pc, #176]	@ (800177c <HAL_ADC_Init+0x2ac>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	69b9      	ldr	r1, [r7, #24]
 80016d2:	430b      	orrs	r3, r1
 80016d4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fed1 	bl	8001482 <LL_ADC_REG_IsConversionOngoing>
 80016e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fede 	bl	80014a8 <LL_ADC_INJ_IsConversionOngoing>
 80016ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d15f      	bne.n	80017b4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d15c      	bne.n	80017b4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7d1b      	ldrb	r3, [r3, #20]
 80016fe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <HAL_ADC_Init+0x2b0>)
 8001710:	4013      	ands	r3, r2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	69b9      	ldr	r1, [r7, #24]
 8001718:	430b      	orrs	r3, r1
 800171a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001722:	2b01      	cmp	r3, #1
 8001724:	d130      	bne.n	8001788 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <HAL_ADC_Init+0x2b4>)
 8001734:	4013      	ands	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800173a:	3a01      	subs	r2, #1
 800173c:	0411      	lsls	r1, r2, #16
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001742:	4311      	orrs	r1, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001748:	4311      	orrs	r1, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800174e:	430a      	orrs	r2, r1
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	611a      	str	r2, [r3, #16]
 800175c:	e01c      	b.n	8001798 <HAL_ADC_Init+0x2c8>
 800175e:	bf00      	nop
 8001760:	24000000 	.word	0x24000000
 8001764:	053e2d63 	.word	0x053e2d63
 8001768:	40022000 	.word	0x40022000
 800176c:	40022100 	.word	0x40022100
 8001770:	58026000 	.word	0x58026000
 8001774:	40022300 	.word	0x40022300
 8001778:	58026300 	.word	0x58026300
 800177c:	fff0c003 	.word	0xfff0c003
 8001780:	ffffbffc 	.word	0xffffbffc
 8001784:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691a      	ldr	r2, [r3, #16]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0201 	bic.w	r2, r2, #1
 8001796:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 fb8c 	bl	8001ecc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d10c      	bne.n	80017d6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	f023 010f 	bic.w	r1, r3, #15
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	1e5a      	subs	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80017d4:	e007      	b.n	80017e6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 020f 	bic.w	r2, r2, #15
 80017e4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ea:	f023 0303 	bic.w	r3, r3, #3
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80017f6:	e007      	b.n	8001808 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017fc:	f043 0210 	orr.w	r2, r3, #16
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001808:	7ffb      	ldrb	r3, [r7, #31]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3724      	adds	r7, #36	@ 0x24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd90      	pop	{r4, r7, pc}
 8001812:	bf00      	nop

08001814 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b0a1      	sub	sp, #132	@ 0x84
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4a65      	ldr	r2, [pc, #404]	@ (80019c4 <HAL_ADC_ConfigChannel+0x1b0>)
 800182e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <HAL_ADC_ConfigChannel+0x2a>
 800183a:	2302      	movs	r3, #2
 800183c:	e32e      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x688>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fe19 	bl	8001482 <LL_ADC_REG_IsConversionOngoing>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 8313 	bne.w	8001e7e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db2c      	blt.n	80018ba <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001868:	2b00      	cmp	r3, #0
 800186a:	d108      	bne.n	800187e <HAL_ADC_ConfigChannel+0x6a>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0e9b      	lsrs	r3, r3, #26
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	2201      	movs	r2, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	e016      	b.n	80018ac <HAL_ADC_ConfigChannel+0x98>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800188c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800188e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001890:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001896:	2320      	movs	r3, #32
 8001898:	e003      	b.n	80018a2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800189a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800189c:	fab3 f383 	clz	r3, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	2201      	movs	r2, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	69d1      	ldr	r1, [r2, #28]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	430b      	orrs	r3, r1
 80018b8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	6859      	ldr	r1, [r3, #4]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	f7ff fcfe 	bl	80012c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fdd6 	bl	8001482 <LL_ADC_REG_IsConversionOngoing>
 80018d6:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fde3 	bl	80014a8 <LL_ADC_INJ_IsConversionOngoing>
 80018e2:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f040 80b8 	bne.w	8001a5c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 80b4 	bne.w	8001a5c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	6819      	ldr	r1, [r3, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	461a      	mov	r2, r3
 8001902:	f7ff fd0d 	bl	8001320 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001906:	4b30      	ldr	r3, [pc, #192]	@ (80019c8 <HAL_ADC_ConfigChannel+0x1b4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800190e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001912:	d10b      	bne.n	800192c <HAL_ADC_ConfigChannel+0x118>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	695a      	ldr	r2, [r3, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	e01d      	b.n	8001968 <HAL_ADC_ConfigChannel+0x154>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10b      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x13e>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	e00a      	b.n	8001968 <HAL_ADC_ConfigChannel+0x154>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	2b04      	cmp	r3, #4
 8001970:	d02c      	beq.n	80019cc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	6919      	ldr	r1, [r3, #16]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001980:	f7ff fc4e 	bl	8001220 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	6919      	ldr	r1, [r3, #16]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	7e5b      	ldrb	r3, [r3, #25]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d102      	bne.n	800199a <HAL_ADC_ConfigChannel+0x186>
 8001994:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001998:	e000      	b.n	800199c <HAL_ADC_ConfigChannel+0x188>
 800199a:	2300      	movs	r3, #0
 800199c:	461a      	mov	r2, r3
 800199e:	f7ff fc78 	bl	8001292 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	6919      	ldr	r1, [r3, #16]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	7e1b      	ldrb	r3, [r3, #24]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d102      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1a4>
 80019b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019b6:	e000      	b.n	80019ba <HAL_ADC_ConfigChannel+0x1a6>
 80019b8:	2300      	movs	r3, #0
 80019ba:	461a      	mov	r2, r3
 80019bc:	f7ff fc50 	bl	8001260 <LL_ADC_SetDataRightShift>
 80019c0:	e04c      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x248>
 80019c2:	bf00      	nop
 80019c4:	47ff0000 	.word	0x47ff0000
 80019c8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	069b      	lsls	r3, r3, #26
 80019dc:	429a      	cmp	r2, r3
 80019de:	d107      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80019ee:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80019f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	069b      	lsls	r3, r3, #26
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d107      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a12:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	069b      	lsls	r3, r3, #26
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d107      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a36:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	069b      	lsls	r3, r3, #26
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d107      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a5a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fcfb 	bl	800145c <LL_ADC_IsEnabled>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f040 8211 	bne.w	8001e90 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	6819      	ldr	r1, [r3, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f7ff fc7c 	bl	8001378 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4aa1      	ldr	r2, [pc, #644]	@ (8001d0c <HAL_ADC_ConfigChannel+0x4f8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	f040 812e 	bne.w	8001ce8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10b      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x2a0>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0e9b      	lsrs	r3, r3, #26
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	2b09      	cmp	r3, #9
 8001aaa:	bf94      	ite	ls
 8001aac:	2301      	movls	r3, #1
 8001aae:	2300      	movhi	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	e019      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x2d4>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8001acc:	2320      	movs	r3, #32
 8001ace:	e003      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001ad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2b09      	cmp	r3, #9
 8001ae0:	bf94      	ite	ls
 8001ae2:	2301      	movls	r3, #1
 8001ae4:	2300      	movhi	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d079      	beq.n	8001be0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d107      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x2f4>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0e9b      	lsrs	r3, r3, #26
 8001afe:	3301      	adds	r3, #1
 8001b00:	069b      	lsls	r3, r3, #26
 8001b02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b06:	e015      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x320>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b18:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001b1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8001b20:	2320      	movs	r3, #32
 8001b22:	e003      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8001b24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	069b      	lsls	r3, r3, #26
 8001b30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x340>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0e9b      	lsrs	r3, r3, #26
 8001b46:	3301      	adds	r3, #1
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	e017      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x370>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b64:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	e003      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f003 031f 	and.w	r3, r3, #31
 8001b7e:	2101      	movs	r1, #1
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	ea42 0103 	orr.w	r1, r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10a      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x396>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0e9b      	lsrs	r3, r3, #26
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	051b      	lsls	r3, r3, #20
 8001ba8:	e018      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x3c8>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bba:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e003      	b.n	8001bce <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8001bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	e07e      	b.n	8001cde <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d107      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x3e8>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0e9b      	lsrs	r3, r3, #26
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	069b      	lsls	r3, r3, #26
 8001bf6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bfa:	e015      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x414>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8001c14:	2320      	movs	r3, #32
 8001c16:	e003      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8001c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	3301      	adds	r3, #1
 8001c22:	069b      	lsls	r3, r3, #26
 8001c24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d109      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x434>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	0e9b      	lsrs	r3, r3, #26
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	2101      	movs	r1, #1
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	e017      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x464>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa93 f3a3 	rbit	r3, r3
 8001c54:	61bb      	str	r3, [r7, #24]
  return result;
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8001c60:	2320      	movs	r3, #32
 8001c62:	e003      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	fab3 f383 	clz	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2101      	movs	r1, #1
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	ea42 0103 	orr.w	r1, r2, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10d      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x490>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	0e9b      	lsrs	r3, r3, #26
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b1e      	subs	r3, #30
 8001c9c:	051b      	lsls	r3, r3, #20
 8001c9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ca2:	e01b      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x4c8>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	60fb      	str	r3, [r7, #12]
  return result;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	e003      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	3301      	adds	r3, #1
 8001cca:	f003 021f 	and.w	r2, r3, #31
 8001cce:	4613      	mov	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3b1e      	subs	r3, #30
 8001cd6:	051b      	lsls	r3, r3, #20
 8001cd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	6892      	ldr	r2, [r2, #8]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7ff fb1c 	bl	8001320 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f280 80cf 	bge.w	8001e90 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a06      	ldr	r2, [pc, #24]	@ (8001d10 <HAL_ADC_ConfigChannel+0x4fc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d004      	beq.n	8001d06 <HAL_ADC_ConfigChannel+0x4f2>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <HAL_ADC_ConfigChannel+0x500>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d10a      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x508>
 8001d06:	4b04      	ldr	r3, [pc, #16]	@ (8001d18 <HAL_ADC_ConfigChannel+0x504>)
 8001d08:	e009      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x50a>
 8001d0a:	bf00      	nop
 8001d0c:	47ff0000 	.word	0x47ff0000
 8001d10:	40022000 	.word	0x40022000
 8001d14:	40022100 	.word	0x40022100
 8001d18:	40022300 	.word	0x40022300
 8001d1c:	4b61      	ldr	r3, [pc, #388]	@ (8001ea4 <HAL_ADC_ConfigChannel+0x690>)
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fa70 	bl	8001204 <LL_ADC_GetCommonPathInternalCh>
 8001d24:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a5f      	ldr	r2, [pc, #380]	@ (8001ea8 <HAL_ADC_ConfigChannel+0x694>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d004      	beq.n	8001d3a <HAL_ADC_ConfigChannel+0x526>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a5d      	ldr	r2, [pc, #372]	@ (8001eac <HAL_ADC_ConfigChannel+0x698>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d10e      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x544>
 8001d3a:	485b      	ldr	r0, [pc, #364]	@ (8001ea8 <HAL_ADC_ConfigChannel+0x694>)
 8001d3c:	f7ff fb8e 	bl	800145c <LL_ADC_IsEnabled>
 8001d40:	4604      	mov	r4, r0
 8001d42:	485a      	ldr	r0, [pc, #360]	@ (8001eac <HAL_ADC_ConfigChannel+0x698>)
 8001d44:	f7ff fb8a 	bl	800145c <LL_ADC_IsEnabled>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4323      	orrs	r3, r4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	e008      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x556>
 8001d58:	4855      	ldr	r0, [pc, #340]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x69c>)
 8001d5a:	f7ff fb7f 	bl	800145c <LL_ADC_IsEnabled>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d07d      	beq.n	8001e6a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a50      	ldr	r2, [pc, #320]	@ (8001eb4 <HAL_ADC_ConfigChannel+0x6a0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d130      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x5c6>
 8001d78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d12b      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a4a      	ldr	r2, [pc, #296]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x69c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	f040 8081 	bne.w	8001e90 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a45      	ldr	r2, [pc, #276]	@ (8001ea8 <HAL_ADC_ConfigChannel+0x694>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d004      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x58e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a43      	ldr	r2, [pc, #268]	@ (8001eac <HAL_ADC_ConfigChannel+0x698>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x592>
 8001da2:	4a45      	ldr	r2, [pc, #276]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x6a4>)
 8001da4:	e000      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x594>
 8001da6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ea4 <HAL_ADC_ConfigChannel+0x690>)
 8001da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001daa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001dae:	4619      	mov	r1, r3
 8001db0:	4610      	mov	r0, r2
 8001db2:	f7ff fa14 	bl	80011de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001db6:	4b41      	ldr	r3, [pc, #260]	@ (8001ebc <HAL_ADC_ConfigChannel+0x6a8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	099b      	lsrs	r3, r3, #6
 8001dbc:	4a40      	ldr	r2, [pc, #256]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x6ac>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	099b      	lsrs	r3, r3, #6
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001dca:	e002      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1f9      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dd8:	e05a      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a39      	ldr	r2, [pc, #228]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x6b0>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d11e      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x60e>
 8001de4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001de6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d119      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a2f      	ldr	r2, [pc, #188]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x69c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d14b      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8001ea8 <HAL_ADC_ConfigChannel+0x694>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d004      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x5f8>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a29      	ldr	r2, [pc, #164]	@ (8001eac <HAL_ADC_ConfigChannel+0x698>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d101      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x5fc>
 8001e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x6a4>)
 8001e0e:	e000      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x5fe>
 8001e10:	4a24      	ldr	r2, [pc, #144]	@ (8001ea4 <HAL_ADC_ConfigChannel+0x690>)
 8001e12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e14:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	f7ff f9df 	bl	80011de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e20:	e036      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a28      	ldr	r2, [pc, #160]	@ (8001ec8 <HAL_ADC_ConfigChannel+0x6b4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d131      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x67c>
 8001e2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d12c      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x69c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d127      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a18      	ldr	r2, [pc, #96]	@ (8001ea8 <HAL_ADC_ConfigChannel+0x694>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d004      	beq.n	8001e54 <HAL_ADC_ConfigChannel+0x640>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a17      	ldr	r2, [pc, #92]	@ (8001eac <HAL_ADC_ConfigChannel+0x698>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x644>
 8001e54:	4a18      	ldr	r2, [pc, #96]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x6a4>)
 8001e56:	e000      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x646>
 8001e58:	4a12      	ldr	r2, [pc, #72]	@ (8001ea4 <HAL_ADC_ConfigChannel+0x690>)
 8001e5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f7ff f9bb 	bl	80011de <LL_ADC_SetCommonPathInternalCh>
 8001e68:	e012      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6e:	f043 0220 	orr.w	r2, r3, #32
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001e7c:	e008      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e82:	f043 0220 	orr.w	r2, r3, #32
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e98:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3784      	adds	r7, #132	@ 0x84
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd90      	pop	{r4, r7, pc}
 8001ea4:	58026300 	.word	0x58026300
 8001ea8:	40022000 	.word	0x40022000
 8001eac:	40022100 	.word	0x40022100
 8001eb0:	58026000 	.word	0x58026000
 8001eb4:	cb840000 	.word	0xcb840000
 8001eb8:	40022300 	.word	0x40022300
 8001ebc:	24000000 	.word	0x24000000
 8001ec0:	053e2d63 	.word	0x053e2d63
 8001ec4:	c7520000 	.word	0xc7520000
 8001ec8:	cfb80000 	.word	0xcfb80000

08001ecc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a7a      	ldr	r2, [pc, #488]	@ (80020c4 <ADC_ConfigureBoostMode+0x1f8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d004      	beq.n	8001ee8 <ADC_ConfigureBoostMode+0x1c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a79      	ldr	r2, [pc, #484]	@ (80020c8 <ADC_ConfigureBoostMode+0x1fc>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d109      	bne.n	8001efc <ADC_ConfigureBoostMode+0x30>
 8001ee8:	4b78      	ldr	r3, [pc, #480]	@ (80020cc <ADC_ConfigureBoostMode+0x200>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf14      	ite	ne
 8001ef4:	2301      	movne	r3, #1
 8001ef6:	2300      	moveq	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	e008      	b.n	8001f0e <ADC_ConfigureBoostMode+0x42>
 8001efc:	4b74      	ldr	r3, [pc, #464]	@ (80020d0 <ADC_ConfigureBoostMode+0x204>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf14      	ite	ne
 8001f08:	2301      	movne	r3, #1
 8001f0a:	2300      	moveq	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d01c      	beq.n	8001f4c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001f12:	f002 f909 	bl	8004128 <HAL_RCC_GetHCLKFreq>
 8001f16:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001f20:	d010      	beq.n	8001f44 <ADC_ConfigureBoostMode+0x78>
 8001f22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001f26:	d873      	bhi.n	8002010 <ADC_ConfigureBoostMode+0x144>
 8001f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f2c:	d002      	beq.n	8001f34 <ADC_ConfigureBoostMode+0x68>
 8001f2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f32:	d16d      	bne.n	8002010 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	0c1b      	lsrs	r3, r3, #16
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	60fb      	str	r3, [r7, #12]
        break;
 8001f42:	e068      	b.n	8002016 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	60fb      	str	r3, [r7, #12]
        break;
 8001f4a:	e064      	b.n	8002016 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001f4c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001f50:	f04f 0100 	mov.w	r1, #0
 8001f54:	f003 fb1c 	bl	8005590 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f58:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001f62:	d051      	beq.n	8002008 <ADC_ConfigureBoostMode+0x13c>
 8001f64:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001f68:	d854      	bhi.n	8002014 <ADC_ConfigureBoostMode+0x148>
 8001f6a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001f6e:	d047      	beq.n	8002000 <ADC_ConfigureBoostMode+0x134>
 8001f70:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001f74:	d84e      	bhi.n	8002014 <ADC_ConfigureBoostMode+0x148>
 8001f76:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001f7a:	d03d      	beq.n	8001ff8 <ADC_ConfigureBoostMode+0x12c>
 8001f7c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001f80:	d848      	bhi.n	8002014 <ADC_ConfigureBoostMode+0x148>
 8001f82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001f86:	d033      	beq.n	8001ff0 <ADC_ConfigureBoostMode+0x124>
 8001f88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001f8c:	d842      	bhi.n	8002014 <ADC_ConfigureBoostMode+0x148>
 8001f8e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001f92:	d029      	beq.n	8001fe8 <ADC_ConfigureBoostMode+0x11c>
 8001f94:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001f98:	d83c      	bhi.n	8002014 <ADC_ConfigureBoostMode+0x148>
 8001f9a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001f9e:	d01a      	beq.n	8001fd6 <ADC_ConfigureBoostMode+0x10a>
 8001fa0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001fa4:	d836      	bhi.n	8002014 <ADC_ConfigureBoostMode+0x148>
 8001fa6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001faa:	d014      	beq.n	8001fd6 <ADC_ConfigureBoostMode+0x10a>
 8001fac:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001fb0:	d830      	bhi.n	8002014 <ADC_ConfigureBoostMode+0x148>
 8001fb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001fb6:	d00e      	beq.n	8001fd6 <ADC_ConfigureBoostMode+0x10a>
 8001fb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001fbc:	d82a      	bhi.n	8002014 <ADC_ConfigureBoostMode+0x148>
 8001fbe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001fc2:	d008      	beq.n	8001fd6 <ADC_ConfigureBoostMode+0x10a>
 8001fc4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001fc8:	d824      	bhi.n	8002014 <ADC_ConfigureBoostMode+0x148>
 8001fca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001fce:	d002      	beq.n	8001fd6 <ADC_ConfigureBoostMode+0x10a>
 8001fd0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001fd4:	d11e      	bne.n	8002014 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	0c9b      	lsrs	r3, r3, #18
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe4:	60fb      	str	r3, [r7, #12]
        break;
 8001fe6:	e016      	b.n	8002016 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	091b      	lsrs	r3, r3, #4
 8001fec:	60fb      	str	r3, [r7, #12]
        break;
 8001fee:	e012      	b.n	8002016 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	60fb      	str	r3, [r7, #12]
        break;
 8001ff6:	e00e      	b.n	8002016 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	099b      	lsrs	r3, r3, #6
 8001ffc:	60fb      	str	r3, [r7, #12]
        break;
 8001ffe:	e00a      	b.n	8002016 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	09db      	lsrs	r3, r3, #7
 8002004:	60fb      	str	r3, [r7, #12]
        break;
 8002006:	e006      	b.n	8002016 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	0a1b      	lsrs	r3, r3, #8
 800200c:	60fb      	str	r3, [r7, #12]
        break;
 800200e:	e002      	b.n	8002016 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002010:	bf00      	nop
 8002012:	e000      	b.n	8002016 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002014:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002016:	f7ff f8c3 	bl	80011a0 <HAL_GetREVID>
 800201a:	4603      	mov	r3, r0
 800201c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002020:	4293      	cmp	r3, r2
 8002022:	d815      	bhi.n	8002050 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4a2b      	ldr	r2, [pc, #172]	@ (80020d4 <ADC_ConfigureBoostMode+0x208>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d908      	bls.n	800203e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800203a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800203c:	e03e      	b.n	80020bc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800204c:	609a      	str	r2, [r3, #8]
}
 800204e:	e035      	b.n	80020bc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	085b      	lsrs	r3, r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4a1f      	ldr	r2, [pc, #124]	@ (80020d8 <ADC_ConfigureBoostMode+0x20c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d808      	bhi.n	8002070 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800206c:	609a      	str	r2, [r3, #8]
}
 800206e:	e025      	b.n	80020bc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4a1a      	ldr	r2, [pc, #104]	@ (80020dc <ADC_ConfigureBoostMode+0x210>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d80a      	bhi.n	800208e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800208a:	609a      	str	r2, [r3, #8]
}
 800208c:	e016      	b.n	80020bc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4a13      	ldr	r2, [pc, #76]	@ (80020e0 <ADC_ConfigureBoostMode+0x214>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d80a      	bhi.n	80020ac <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020a8:	609a      	str	r2, [r3, #8]
}
 80020aa:	e007      	b.n	80020bc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80020ba:	609a      	str	r2, [r3, #8]
}
 80020bc:	bf00      	nop
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40022100 	.word	0x40022100
 80020cc:	40022300 	.word	0x40022300
 80020d0:	58026300 	.word	0x58026300
 80020d4:	01312d00 	.word	0x01312d00
 80020d8:	005f5e10 	.word	0x005f5e10
 80020dc:	00bebc20 	.word	0x00bebc20
 80020e0:	017d7840 	.word	0x017d7840

080020e4 <LL_ADC_IsEnabled>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <LL_ADC_IsEnabled+0x18>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <LL_ADC_IsEnabled+0x1a>
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_ADC_REG_IsConversionOngoing>:
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b04      	cmp	r3, #4
 800211c:	d101      	bne.n	8002122 <LL_ADC_REG_IsConversionOngoing+0x18>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b09f      	sub	sp, #124	@ 0x7c
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800214a:	2302      	movs	r3, #2
 800214c:	e0be      	b.n	80022cc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800215a:	2300      	movs	r3, #0
 800215c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a5c      	ldr	r2, [pc, #368]	@ (80022d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d102      	bne.n	800216e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002168:	4b5b      	ldr	r3, [pc, #364]	@ (80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	e001      	b.n	8002172 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10b      	bne.n	8002190 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217c:	f043 0220 	orr.w	r2, r3, #32
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e09d      	b.n	80022cc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ffb9 	bl	800210a <LL_ADC_REG_IsConversionOngoing>
 8002198:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ffb3 	bl	800210a <LL_ADC_REG_IsConversionOngoing>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d17f      	bne.n	80022aa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80021aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d17c      	bne.n	80022aa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a47      	ldr	r2, [pc, #284]	@ (80022d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d004      	beq.n	80021c4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a46      	ldr	r2, [pc, #280]	@ (80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d101      	bne.n	80021c8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80021c4:	4b45      	ldr	r3, [pc, #276]	@ (80022dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80021c6:	e000      	b.n	80021ca <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80021c8:	4b45      	ldr	r3, [pc, #276]	@ (80022e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80021ca:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d039      	beq.n	8002248 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80021d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021e4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a3a      	ldr	r2, [pc, #232]	@ (80022d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d004      	beq.n	80021fa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a38      	ldr	r2, [pc, #224]	@ (80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d10e      	bne.n	8002218 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80021fa:	4836      	ldr	r0, [pc, #216]	@ (80022d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80021fc:	f7ff ff72 	bl	80020e4 <LL_ADC_IsEnabled>
 8002200:	4604      	mov	r4, r0
 8002202:	4835      	ldr	r0, [pc, #212]	@ (80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002204:	f7ff ff6e 	bl	80020e4 <LL_ADC_IsEnabled>
 8002208:	4603      	mov	r3, r0
 800220a:	4323      	orrs	r3, r4
 800220c:	2b00      	cmp	r3, #0
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	e008      	b.n	800222a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002218:	4832      	ldr	r0, [pc, #200]	@ (80022e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800221a:	f7ff ff63 	bl	80020e4 <LL_ADC_IsEnabled>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d047      	beq.n	80022be <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800222e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	4b2d      	ldr	r3, [pc, #180]	@ (80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002234:	4013      	ands	r3, r2
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	6811      	ldr	r1, [r2, #0]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	6892      	ldr	r2, [r2, #8]
 800223e:	430a      	orrs	r2, r1
 8002240:	431a      	orrs	r2, r3
 8002242:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002244:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002246:	e03a      	b.n	80022be <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002248:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002250:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002252:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1e      	ldr	r2, [pc, #120]	@ (80022d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d004      	beq.n	8002268 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1d      	ldr	r2, [pc, #116]	@ (80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d10e      	bne.n	8002286 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002268:	481a      	ldr	r0, [pc, #104]	@ (80022d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800226a:	f7ff ff3b 	bl	80020e4 <LL_ADC_IsEnabled>
 800226e:	4604      	mov	r4, r0
 8002270:	4819      	ldr	r0, [pc, #100]	@ (80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002272:	f7ff ff37 	bl	80020e4 <LL_ADC_IsEnabled>
 8002276:	4603      	mov	r3, r0
 8002278:	4323      	orrs	r3, r4
 800227a:	2b00      	cmp	r3, #0
 800227c:	bf0c      	ite	eq
 800227e:	2301      	moveq	r3, #1
 8002280:	2300      	movne	r3, #0
 8002282:	b2db      	uxtb	r3, r3
 8002284:	e008      	b.n	8002298 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002286:	4817      	ldr	r0, [pc, #92]	@ (80022e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002288:	f7ff ff2c 	bl	80020e4 <LL_ADC_IsEnabled>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	bf0c      	ite	eq
 8002292:	2301      	moveq	r3, #1
 8002294:	2300      	movne	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d010      	beq.n	80022be <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800229c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	4b11      	ldr	r3, [pc, #68]	@ (80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80022a6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022a8:	e009      	b.n	80022be <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ae:	f043 0220 	orr.w	r2, r3, #32
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80022bc:	e000      	b.n	80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022be:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80022c8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	377c      	adds	r7, #124	@ 0x7c
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd90      	pop	{r4, r7, pc}
 80022d4:	40022000 	.word	0x40022000
 80022d8:	40022100 	.word	0x40022100
 80022dc:	40022300 	.word	0x40022300
 80022e0:	58026300 	.word	0x58026300
 80022e4:	58026000 	.word	0x58026000
 80022e8:	fffff0e0 	.word	0xfffff0e0

080022ec <__NVIC_SetPriorityGrouping>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <__NVIC_SetPriorityGrouping+0x40>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002308:	4013      	ands	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 8002316:	4313      	orrs	r3, r2
 8002318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231a:	4a04      	ldr	r2, [pc, #16]	@ (800232c <__NVIC_SetPriorityGrouping+0x40>)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	60d3      	str	r3, [r2, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00
 8002330:	05fa0000 	.word	0x05fa0000

08002334 <__NVIC_GetPriorityGrouping>:
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002338:	4b04      	ldr	r3, [pc, #16]	@ (800234c <__NVIC_GetPriorityGrouping+0x18>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	f003 0307 	and.w	r3, r3, #7
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_SetPriority>:
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	@ (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	@ (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EncodePriority>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	@ 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f1c3 0307 	rsb	r3, r3, #7
 80023be:	2b04      	cmp	r3, #4
 80023c0:	bf28      	it	cs
 80023c2:	2304      	movcs	r3, #4
 80023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d902      	bls.n	80023d4 <NVIC_EncodePriority+0x30>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b03      	subs	r3, #3
 80023d2:	e000      	b.n	80023d6 <NVIC_EncodePriority+0x32>
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	4313      	orrs	r3, r2
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	@ 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800241c:	d301      	bcc.n	8002422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241e:	2301      	movs	r3, #1
 8002420:	e00f      	b.n	8002442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002422:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <SysTick_Config+0x40>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800242a:	210f      	movs	r1, #15
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	f7ff ff8e 	bl	8002350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <SysTick_Config+0x40>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243a:	4b04      	ldr	r3, [pc, #16]	@ (800244c <SysTick_Config+0x40>)
 800243c:	2207      	movs	r2, #7
 800243e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	e000e010 	.word	0xe000e010

08002450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff47 	bl	80022ec <__NVIC_SetPriorityGrouping>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002474:	f7ff ff5e 	bl	8002334 <__NVIC_GetPriorityGrouping>
 8002478:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	6978      	ldr	r0, [r7, #20]
 8002480:	f7ff ff90 	bl	80023a4 <NVIC_EncodePriority>
 8002484:	4602      	mov	r2, r0
 8002486:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff5f 	bl	8002350 <__NVIC_SetPriority>
}
 8002492:	bf00      	nop
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ffb2 	bl	800240c <SysTick_Config>
 80024a8:	4603      	mov	r3, r0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	@ 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024c2:	4b89      	ldr	r3, [pc, #548]	@ (80026e8 <HAL_GPIO_Init+0x234>)
 80024c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024c6:	e194      	b.n	80027f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	2101      	movs	r1, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8186 	beq.w	80027ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d005      	beq.n	80024f8 <HAL_GPIO_Init+0x44>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d130      	bne.n	800255a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	2203      	movs	r2, #3
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800252e:	2201      	movs	r2, #1
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	f003 0201 	and.w	r2, r3, #1
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b03      	cmp	r3, #3
 8002564:	d017      	beq.n	8002596 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	2203      	movs	r2, #3
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d123      	bne.n	80025ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	08da      	lsrs	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3208      	adds	r2, #8
 80025aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	220f      	movs	r2, #15
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	08da      	lsrs	r2, r3, #3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3208      	adds	r2, #8
 80025e4:	69b9      	ldr	r1, [r7, #24]
 80025e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	2203      	movs	r2, #3
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 0203 	and.w	r2, r3, #3
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80e0 	beq.w	80027ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262c:	4b2f      	ldr	r3, [pc, #188]	@ (80026ec <HAL_GPIO_Init+0x238>)
 800262e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002632:	4a2e      	ldr	r2, [pc, #184]	@ (80026ec <HAL_GPIO_Init+0x238>)
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800263c:	4b2b      	ldr	r3, [pc, #172]	@ (80026ec <HAL_GPIO_Init+0x238>)
 800263e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800264a:	4a29      	ldr	r2, [pc, #164]	@ (80026f0 <HAL_GPIO_Init+0x23c>)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	3302      	adds	r3, #2
 8002652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	220f      	movs	r2, #15
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a20      	ldr	r2, [pc, #128]	@ (80026f4 <HAL_GPIO_Init+0x240>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d052      	beq.n	800271c <HAL_GPIO_Init+0x268>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1f      	ldr	r2, [pc, #124]	@ (80026f8 <HAL_GPIO_Init+0x244>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d031      	beq.n	80026e2 <HAL_GPIO_Init+0x22e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a1e      	ldr	r2, [pc, #120]	@ (80026fc <HAL_GPIO_Init+0x248>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d02b      	beq.n	80026de <HAL_GPIO_Init+0x22a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a1d      	ldr	r2, [pc, #116]	@ (8002700 <HAL_GPIO_Init+0x24c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d025      	beq.n	80026da <HAL_GPIO_Init+0x226>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1c      	ldr	r2, [pc, #112]	@ (8002704 <HAL_GPIO_Init+0x250>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d01f      	beq.n	80026d6 <HAL_GPIO_Init+0x222>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a1b      	ldr	r2, [pc, #108]	@ (8002708 <HAL_GPIO_Init+0x254>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d019      	beq.n	80026d2 <HAL_GPIO_Init+0x21e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a1a      	ldr	r2, [pc, #104]	@ (800270c <HAL_GPIO_Init+0x258>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0x21a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a19      	ldr	r2, [pc, #100]	@ (8002710 <HAL_GPIO_Init+0x25c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00d      	beq.n	80026ca <HAL_GPIO_Init+0x216>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a18      	ldr	r2, [pc, #96]	@ (8002714 <HAL_GPIO_Init+0x260>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <HAL_GPIO_Init+0x212>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a17      	ldr	r2, [pc, #92]	@ (8002718 <HAL_GPIO_Init+0x264>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_GPIO_Init+0x20e>
 80026be:	2309      	movs	r3, #9
 80026c0:	e02d      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026c2:	230a      	movs	r3, #10
 80026c4:	e02b      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026c6:	2308      	movs	r3, #8
 80026c8:	e029      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026ca:	2307      	movs	r3, #7
 80026cc:	e027      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026ce:	2306      	movs	r3, #6
 80026d0:	e025      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026d2:	2305      	movs	r3, #5
 80026d4:	e023      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026d6:	2304      	movs	r3, #4
 80026d8:	e021      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026da:	2303      	movs	r3, #3
 80026dc:	e01f      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026de:	2302      	movs	r3, #2
 80026e0:	e01d      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e01b      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026e6:	bf00      	nop
 80026e8:	58000080 	.word	0x58000080
 80026ec:	58024400 	.word	0x58024400
 80026f0:	58000400 	.word	0x58000400
 80026f4:	58020000 	.word	0x58020000
 80026f8:	58020400 	.word	0x58020400
 80026fc:	58020800 	.word	0x58020800
 8002700:	58020c00 	.word	0x58020c00
 8002704:	58021000 	.word	0x58021000
 8002708:	58021400 	.word	0x58021400
 800270c:	58021800 	.word	0x58021800
 8002710:	58021c00 	.word	0x58021c00
 8002714:	58022000 	.word	0x58022000
 8002718:	58022400 	.word	0x58022400
 800271c:	2300      	movs	r3, #0
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	f002 0203 	and.w	r2, r2, #3
 8002724:	0092      	lsls	r2, r2, #2
 8002726:	4093      	lsls	r3, r2
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800272e:	4938      	ldr	r1, [pc, #224]	@ (8002810 <HAL_GPIO_Init+0x35c>)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	3302      	adds	r3, #2
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800273c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002762:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800276a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002790:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	3301      	adds	r3, #1
 80027f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f47f ae63 	bne.w	80024c8 <HAL_GPIO_Init+0x14>
  }
}
 8002802:	bf00      	nop
 8002804:	bf00      	nop
 8002806:	3724      	adds	r7, #36	@ 0x24
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	58000400 	.word	0x58000400

08002814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
 8002820:	4613      	mov	r3, r2
 8002822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002824:	787b      	ldrb	r3, [r7, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002830:	e003      	b.n	800283a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	041a      	lsls	r2, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	619a      	str	r2, [r3, #24]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002858:	887a      	ldrh	r2, [r7, #2]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4013      	ands	r3, r2
 800285e:	041a      	lsls	r2, r3, #16
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	43d9      	mvns	r1, r3
 8002864:	887b      	ldrh	r3, [r7, #2]
 8002866:	400b      	ands	r3, r1
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	619a      	str	r2, [r3, #24]
}
 800286e:	bf00      	nop
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0bd      	b.n	8002a0a <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2202      	movs	r2, #2
 8002892:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d031      	beq.n	8002936 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a4f      	ldr	r2, [pc, #316]	@ (8002a14 <HAL_HRTIM_Init+0x198>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d10e      	bne.n	80028fa <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80028dc:	4b4e      	ldr	r3, [pc, #312]	@ (8002a18 <HAL_HRTIM_Init+0x19c>)
 80028de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002a18 <HAL_HRTIM_Init+0x19c>)
 80028e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80028e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002a18 <HAL_HRTIM_Init+0x19c>)
 80028ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002908:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800291e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fe f95e 	bl	8000bf8 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d012      	beq.n	800296e <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002956:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800297e:	2300      	movs	r3, #0
 8002980:	75fb      	strb	r3, [r7, #23]
 8002982:	e03e      	b.n	8002a02 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8002984:	7dfa      	ldrb	r2, [r7, #23]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	3318      	adds	r3, #24
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8002998:	7dfa      	ldrb	r2, [r7, #23]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	331c      	adds	r3, #28
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80029ac:	7dfa      	ldrb	r2, [r7, #23]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	3320      	adds	r3, #32
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80029c0:	7dfa      	ldrb	r2, [r7, #23]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	3324      	adds	r3, #36	@ 0x24
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80029d4:	7dfa      	ldrb	r2, [r7, #23]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	3328      	adds	r3, #40	@ 0x28
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80029e8:	7dfa      	ldrb	r2, [r7, #23]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	3330      	adds	r3, #48	@ 0x30
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80029fc:	7dfb      	ldrb	r3, [r7, #23]
 80029fe:	3301      	adds	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d9bd      	bls.n	8002984 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40017400 	.word	0x40017400
 8002a18:	58024400 	.word	0x58024400

08002a1c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d101      	bne.n	8002a38 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
 8002a36:	e015      	b.n	8002a64 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b05      	cmp	r3, #5
 8002a44:	d104      	bne.n	8002a50 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f881 	bl	8002b50 <HRTIM_MasterBase_Config>
 8002a4e:	e004      	b.n	8002a5a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f8aa 	bl	8002bae <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d101      	bne.n	8002a88 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
 8002a86:	e05f      	b.n	8002b48 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e058      	b.n	8002b48 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	d104      	bne.n	8002ab6 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f8bd 	bl	8002c2e <HRTIM_MasterWaveform_Config>
 8002ab4:	e004      	b.n	8002ac0 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f91e 	bl	8002cfc <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6819      	ldr	r1, [r3, #0]
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4403      	add	r3, r0
 8002ad2:	3320      	adds	r3, #32
 8002ad4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4403      	add	r3, r0
 8002ae8:	3324      	adds	r3, #36	@ 0x24
 8002aea:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6899      	ldr	r1, [r3, #8]
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4403      	add	r3, r0
 8002afe:	3328      	adds	r3, #40	@ 0x28
 8002b00:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68d9      	ldr	r1, [r3, #12]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	1a9b      	subs	r3, r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4403      	add	r3, r0
 8002b14:	332c      	adds	r3, #44	@ 0x2c
 8002b16:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6919      	ldr	r1, [r3, #16]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4403      	add	r3, r0
 8002b2a:	3330      	adds	r3, #48	@ 0x30
 8002b2c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 fa23 	bl	8002f7c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f023 0307 	bic.w	r3, r3, #7
 8002b68:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0318 	bic.w	r3, r3, #24
 8002b7a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	6852      	ldr	r2, [r2, #4]
 8002ba0:	619a      	str	r2, [r3, #24]
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b087      	sub	sp, #28
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	01db      	lsls	r3, r3, #7
 8002bc4:	4413      	add	r3, r2
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f023 0307 	bic.w	r3, r3, #7
 8002bd0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 0318 	bic.w	r3, r3, #24
 8002be2:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	01db      	lsls	r3, r3, #7
 8002bf8:	4413      	add	r3, r2
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6819      	ldr	r1, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	01db      	lsls	r3, r3, #7
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3394      	adds	r3, #148	@ 0x94
 8002c0e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6819      	ldr	r1, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	01db      	lsls	r3, r3, #7
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3398      	adds	r3, #152	@ 0x98
 8002c20:	601a      	str	r2, [r3, #0]
}
 8002c22:	bf00      	nop
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8002c48:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f023 0320 	bic.w	r3, r3, #32
 8002c50:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c62:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c74:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c86:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8002c98:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002caa:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002cbe:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cd0:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b08b      	sub	sp, #44	@ 0x2c
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	01db      	lsls	r3, r3, #7
 8002d12:	4413      	add	r3, r2
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	6811      	ldr	r1, [r2, #0]
 8002d1a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	3301      	adds	r3, #1
 8002d22:	01db      	lsls	r3, r3, #7
 8002d24:	440b      	add	r3, r1
 8002d26:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	01db      	lsls	r3, r3, #7
 8002d32:	4413      	add	r3, r2
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	01db      	lsls	r3, r3, #7
 8002d40:	4413      	add	r3, r2
 8002d42:	33e8      	adds	r3, #232	@ 0xe8
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	01db      	lsls	r3, r3, #7
 8002d50:	4413      	add	r3, r2
 8002d52:	33e4      	adds	r3, #228	@ 0xe4
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8002d60:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	f023 0320 	bic.w	r3, r3, #32
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d70:	4313      	orrs	r3, r2
 8002d72:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8002d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d82:	4313      	orrs	r3, r2
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d94:	4313      	orrs	r3, r2
 8002d96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da6:	4313      	orrs	r3, r2
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db8:	4313      	orrs	r3, r2
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dde:	d103      	bne.n	8002de8 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8002de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dee:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df6:	4313      	orrs	r3, r2
 8002df8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e00:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8002e12:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f023 031f 	bic.w	r3, r3, #31
 8002e24:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e3a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d108      	bne.n	8002e60 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e54:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	6a3a      	ldr	r2, [r7, #32]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e64:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8002e68:	d004      	beq.n	8002e74 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8002e72:	d103      	bne.n	8002e7c <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e78:	2b40      	cmp	r3, #64	@ 0x40
 8002e7a:	d108      	bne.n	8002e8e <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8002e82:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e88:	6a3a      	ldr	r2, [r7, #32]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e92:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d843      	bhi.n	8002f22 <HRTIM_TimingUnitWaveform_Config+0x226>
 8002e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea0 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002eb5 	.word	0x08002eb5
 8002ea4:	08002ecb 	.word	0x08002ecb
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ef7 	.word	0x08002ef7
 8002eb0:	08002f0d 	.word	0x08002f0d
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002eba:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61fb      	str	r3, [r7, #28]
      break;
 8002ec8:	e02c      	b.n	8002f24 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ed0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61fb      	str	r3, [r7, #28]
      break;
 8002ede:	e021      	b.n	8002f24 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002ee6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61fb      	str	r3, [r7, #28]
      break;
 8002ef4:	e016      	b.n	8002f24 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002efc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61fb      	str	r3, [r7, #28]
      break;
 8002f0a:	e00b      	b.n	8002f24 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f12:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	015b      	lsls	r3, r3, #5
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61fb      	str	r3, [r7, #28]
      break;
 8002f20:	e000      	b.n	8002f24 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8002f22:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	01db      	lsls	r3, r3, #7
 8002f2e:	4413      	add	r3, r2
 8002f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f32:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	01db      	lsls	r3, r3, #7
 8002f3c:	4413      	add	r3, r2
 8002f3e:	33e8      	adds	r3, #232	@ 0xe8
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	01db      	lsls	r3, r3, #7
 8002f4c:	4413      	add	r3, r2
 8002f4e:	33e4      	adds	r3, #228	@ 0xe4
 8002f50:	6a3a      	ldr	r2, [r7, #32]
 8002f52:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	01db      	lsls	r3, r3, #7
 8002f5c:	4413      	add	r3, r2
 8002f5e:	33d4      	adds	r3, #212	@ 0xd4
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8002f6e:	bf00      	nop
 8002f70:	372c      	adds	r7, #44	@ 0x2c
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop

08002f7c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b05      	cmp	r3, #5
 8002f8a:	d851      	bhi.n	8003030 <HRTIM_ForceRegistersUpdate+0xb4>
 8002f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f94 <HRTIM_ForceRegistersUpdate+0x18>)
 8002f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f92:	bf00      	nop
 8002f94:	08002fc3 	.word	0x08002fc3
 8002f98:	08002fd9 	.word	0x08002fd9
 8002f9c:	08002fef 	.word	0x08002fef
 8002fa0:	08003005 	.word	0x08003005
 8002fa4:	0800301b 	.word	0x0800301b
 8002fa8:	08002fad 	.word	0x08002fad
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8002fc0:	e037      	b.n	8003032 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0202 	orr.w	r2, r2, #2
 8002fd2:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8002fd6:	e02c      	b.n	8003032 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0204 	orr.w	r2, r2, #4
 8002fe8:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8002fec:	e021      	b.n	8003032 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0208 	orr.w	r2, r2, #8
 8002ffe:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003002:	e016      	b.n	8003032 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0210 	orr.w	r2, r2, #16
 8003014:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003018:	e00b      	b.n	8003032 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0220 	orr.w	r2, r2, #32
 800302a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800302e:	e000      	b.n	8003032 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8003030:	bf00      	nop
  }
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop

08003040 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e097      	b.n	8003182 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7fd fdfd 	bl	8000c6c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d004      	beq.n	8003094 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003092:	d103      	bne.n	800309c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 031e 	bic.w	r3, r3, #30
 800309a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d003      	beq.n	80030b0 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4b38      	ldr	r3, [pc, #224]	@ (800318c <HAL_LPTIM_Init+0x14c>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4b37      	ldr	r3, [pc, #220]	@ (8003190 <HAL_LPTIM_Init+0x150>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80030c0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80030c6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80030cc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80030d2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d107      	bne.n	80030f2 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80030ea:	4313      	orrs	r3, r2
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d004      	beq.n	8003104 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003102:	d107      	bne.n	8003114 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800310c:	4313      	orrs	r3, r2
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800311c:	4293      	cmp	r3, r2
 800311e:	d00a      	beq.n	8003136 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003128:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800312e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a14      	ldr	r2, [pc, #80]	@ (8003194 <HAL_LPTIM_Init+0x154>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d004      	beq.n	8003152 <HAL_LPTIM_Init+0x112>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a12      	ldr	r2, [pc, #72]	@ (8003198 <HAL_LPTIM_Init+0x158>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d108      	bne.n	8003164 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	625a      	str	r2, [r3, #36]	@ 0x24
 8003162:	e009      	b.n	8003178 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0c      	ldr	r2, [pc, #48]	@ (800319c <HAL_LPTIM_Init+0x15c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d104      	bne.n	8003178 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003176:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	ffff1f3f 	.word	0xffff1f3f
 8003190:	ff19f1fe 	.word	0xff19f1fe
 8003194:	40002400 	.word	0x40002400
 8003198:	58002400 	.word	0x58002400
 800319c:	58002800 	.word	0x58002800

080031a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80031a8:	4b19      	ldr	r3, [pc, #100]	@ (8003210 <HAL_PWREx_ConfigSupply+0x70>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d00a      	beq.n	80031ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80031b4:	4b16      	ldr	r3, [pc, #88]	@ (8003210 <HAL_PWREx_ConfigSupply+0x70>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d001      	beq.n	80031c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e01f      	b.n	8003206 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e01d      	b.n	8003206 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80031ca:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <HAL_PWREx_ConfigSupply+0x70>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f023 0207 	bic.w	r2, r3, #7
 80031d2:	490f      	ldr	r1, [pc, #60]	@ (8003210 <HAL_PWREx_ConfigSupply+0x70>)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80031da:	f7fd ffb1 	bl	8001140 <HAL_GetTick>
 80031de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031e0:	e009      	b.n	80031f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031e2:	f7fd ffad 	bl	8001140 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031f0:	d901      	bls.n	80031f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e007      	b.n	8003206 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031f6:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <HAL_PWREx_ConfigSupply+0x70>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003202:	d1ee      	bne.n	80031e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	58024800 	.word	0x58024800

08003214 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08c      	sub	sp, #48	@ 0x30
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	f000 bc48 	b.w	8003ab8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8088 	beq.w	8003346 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003236:	4b99      	ldr	r3, [pc, #612]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800323e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003240:	4b96      	ldr	r3, [pc, #600]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003244:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003248:	2b10      	cmp	r3, #16
 800324a:	d007      	beq.n	800325c <HAL_RCC_OscConfig+0x48>
 800324c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324e:	2b18      	cmp	r3, #24
 8003250:	d111      	bne.n	8003276 <HAL_RCC_OscConfig+0x62>
 8003252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d10c      	bne.n	8003276 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325c:	4b8f      	ldr	r3, [pc, #572]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d06d      	beq.n	8003344 <HAL_RCC_OscConfig+0x130>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d169      	bne.n	8003344 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	f000 bc21 	b.w	8003ab8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800327e:	d106      	bne.n	800328e <HAL_RCC_OscConfig+0x7a>
 8003280:	4b86      	ldr	r3, [pc, #536]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a85      	ldr	r2, [pc, #532]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	e02e      	b.n	80032ec <HAL_RCC_OscConfig+0xd8>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0x9c>
 8003296:	4b81      	ldr	r3, [pc, #516]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a80      	ldr	r2, [pc, #512]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 800329c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b7e      	ldr	r3, [pc, #504]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a7d      	ldr	r2, [pc, #500]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 80032a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e01d      	b.n	80032ec <HAL_RCC_OscConfig+0xd8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0xc0>
 80032ba:	4b78      	ldr	r3, [pc, #480]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a77      	ldr	r2, [pc, #476]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 80032c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	4b75      	ldr	r3, [pc, #468]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a74      	ldr	r2, [pc, #464]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	e00b      	b.n	80032ec <HAL_RCC_OscConfig+0xd8>
 80032d4:	4b71      	ldr	r3, [pc, #452]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a70      	ldr	r2, [pc, #448]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 80032da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4b6e      	ldr	r3, [pc, #440]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a6d      	ldr	r2, [pc, #436]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 80032e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d013      	beq.n	800331c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fd ff24 	bl	8001140 <HAL_GetTick>
 80032f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032fc:	f7fd ff20 	bl	8001140 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	@ 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e3d4      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800330e:	4b63      	ldr	r3, [pc, #396]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0xe8>
 800331a:	e014      	b.n	8003346 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fd ff10 	bl	8001140 <HAL_GetTick>
 8003320:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003324:	f7fd ff0c 	bl	8001140 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	@ 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e3c0      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003336:	4b59      	ldr	r3, [pc, #356]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x110>
 8003342:	e000      	b.n	8003346 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 80ca 	beq.w	80034e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003354:	4b51      	ldr	r3, [pc, #324]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800335c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800335e:	4b4f      	ldr	r3, [pc, #316]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003362:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_RCC_OscConfig+0x166>
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	2b18      	cmp	r3, #24
 800336e:	d156      	bne.n	800341e <HAL_RCC_OscConfig+0x20a>
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d151      	bne.n	800341e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800337a:	4b48      	ldr	r3, [pc, #288]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <HAL_RCC_OscConfig+0x17e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e392      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003392:	4b42      	ldr	r3, [pc, #264]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f023 0219 	bic.w	r2, r3, #25
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	493f      	ldr	r1, [pc, #252]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fd fecc 	bl	8001140 <HAL_GetTick>
 80033a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ac:	f7fd fec8 	bl	8001140 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e37c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033be:	4b37      	ldr	r3, [pc, #220]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ca:	f7fd fee9 	bl	80011a0 <HAL_GetREVID>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d817      	bhi.n	8003408 <HAL_RCC_OscConfig+0x1f4>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2b40      	cmp	r3, #64	@ 0x40
 80033de:	d108      	bne.n	80033f2 <HAL_RCC_OscConfig+0x1de>
 80033e0:	4b2e      	ldr	r3, [pc, #184]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80033e8:	4a2c      	ldr	r2, [pc, #176]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 80033ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f0:	e07a      	b.n	80034e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f2:	4b2a      	ldr	r3, [pc, #168]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	031b      	lsls	r3, r3, #12
 8003400:	4926      	ldr	r1, [pc, #152]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003402:	4313      	orrs	r3, r2
 8003404:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003406:	e06f      	b.n	80034e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003408:	4b24      	ldr	r3, [pc, #144]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	061b      	lsls	r3, r3, #24
 8003416:	4921      	ldr	r1, [pc, #132]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800341c:	e064      	b.n	80034e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d047      	beq.n	80034b6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003426:	4b1d      	ldr	r3, [pc, #116]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 0219 	bic.w	r2, r3, #25
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	491a      	ldr	r1, [pc, #104]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fd fe82 	bl	8001140 <HAL_GetTick>
 800343c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003440:	f7fd fe7e 	bl	8001140 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e332      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003452:	4b12      	ldr	r3, [pc, #72]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345e:	f7fd fe9f 	bl	80011a0 <HAL_GetREVID>
 8003462:	4603      	mov	r3, r0
 8003464:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003468:	4293      	cmp	r3, r2
 800346a:	d819      	bhi.n	80034a0 <HAL_RCC_OscConfig+0x28c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	2b40      	cmp	r3, #64	@ 0x40
 8003472:	d108      	bne.n	8003486 <HAL_RCC_OscConfig+0x272>
 8003474:	4b09      	ldr	r3, [pc, #36]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800347c:	4a07      	ldr	r2, [pc, #28]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 800347e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003482:	6053      	str	r3, [r2, #4]
 8003484:	e030      	b.n	80034e8 <HAL_RCC_OscConfig+0x2d4>
 8003486:	4b05      	ldr	r3, [pc, #20]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	031b      	lsls	r3, r3, #12
 8003494:	4901      	ldr	r1, [pc, #4]	@ (800349c <HAL_RCC_OscConfig+0x288>)
 8003496:	4313      	orrs	r3, r2
 8003498:	604b      	str	r3, [r1, #4]
 800349a:	e025      	b.n	80034e8 <HAL_RCC_OscConfig+0x2d4>
 800349c:	58024400 	.word	0x58024400
 80034a0:	4b9a      	ldr	r3, [pc, #616]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	061b      	lsls	r3, r3, #24
 80034ae:	4997      	ldr	r1, [pc, #604]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
 80034b4:	e018      	b.n	80034e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b6:	4b95      	ldr	r3, [pc, #596]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a94      	ldr	r2, [pc, #592]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fd fe3d 	bl	8001140 <HAL_GetTick>
 80034c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ca:	f7fd fe39 	bl	8001140 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e2ed      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034dc:	4b8b      	ldr	r3, [pc, #556]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f0      	bne.n	80034ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80a9 	beq.w	8003648 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f6:	4b85      	ldr	r3, [pc, #532]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003500:	4b82      	ldr	r3, [pc, #520]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 8003502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003504:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d007      	beq.n	800351c <HAL_RCC_OscConfig+0x308>
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b18      	cmp	r3, #24
 8003510:	d13a      	bne.n	8003588 <HAL_RCC_OscConfig+0x374>
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d135      	bne.n	8003588 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800351c:	4b7b      	ldr	r3, [pc, #492]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_RCC_OscConfig+0x320>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	2b80      	cmp	r3, #128	@ 0x80
 800352e:	d001      	beq.n	8003534 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e2c1      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003534:	f7fd fe34 	bl	80011a0 <HAL_GetREVID>
 8003538:	4603      	mov	r3, r0
 800353a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800353e:	4293      	cmp	r3, r2
 8003540:	d817      	bhi.n	8003572 <HAL_RCC_OscConfig+0x35e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	2b20      	cmp	r3, #32
 8003548:	d108      	bne.n	800355c <HAL_RCC_OscConfig+0x348>
 800354a:	4b70      	ldr	r3, [pc, #448]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003552:	4a6e      	ldr	r2, [pc, #440]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 8003554:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003558:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800355a:	e075      	b.n	8003648 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800355c:	4b6b      	ldr	r3, [pc, #428]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	069b      	lsls	r3, r3, #26
 800356a:	4968      	ldr	r1, [pc, #416]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003570:	e06a      	b.n	8003648 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003572:	4b66      	ldr	r3, [pc, #408]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	4962      	ldr	r1, [pc, #392]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 8003582:	4313      	orrs	r3, r2
 8003584:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003586:	e05f      	b.n	8003648 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d042      	beq.n	8003616 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003590:	4b5e      	ldr	r3, [pc, #376]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a5d      	ldr	r2, [pc, #372]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 8003596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800359a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fd fdd0 	bl	8001140 <HAL_GetTick>
 80035a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80035a4:	f7fd fdcc 	bl	8001140 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e280      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035b6:	4b55      	ldr	r3, [pc, #340]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035c2:	f7fd fded 	bl	80011a0 <HAL_GetREVID>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d817      	bhi.n	8003600 <HAL_RCC_OscConfig+0x3ec>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d108      	bne.n	80035ea <HAL_RCC_OscConfig+0x3d6>
 80035d8:	4b4c      	ldr	r3, [pc, #304]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80035e0:	4a4a      	ldr	r2, [pc, #296]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 80035e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80035e6:	6053      	str	r3, [r2, #4]
 80035e8:	e02e      	b.n	8003648 <HAL_RCC_OscConfig+0x434>
 80035ea:	4b48      	ldr	r3, [pc, #288]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	069b      	lsls	r3, r3, #26
 80035f8:	4944      	ldr	r1, [pc, #272]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	604b      	str	r3, [r1, #4]
 80035fe:	e023      	b.n	8003648 <HAL_RCC_OscConfig+0x434>
 8003600:	4b42      	ldr	r3, [pc, #264]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	061b      	lsls	r3, r3, #24
 800360e:	493f      	ldr	r1, [pc, #252]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 8003610:	4313      	orrs	r3, r2
 8003612:	60cb      	str	r3, [r1, #12]
 8003614:	e018      	b.n	8003648 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003616:	4b3d      	ldr	r3, [pc, #244]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a3c      	ldr	r2, [pc, #240]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 800361c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003622:	f7fd fd8d 	bl	8001140 <HAL_GetTick>
 8003626:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800362a:	f7fd fd89 	bl	8001140 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e23d      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800363c:	4b33      	ldr	r3, [pc, #204]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d036      	beq.n	80036c2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d019      	beq.n	8003690 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365c:	4b2b      	ldr	r3, [pc, #172]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 800365e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003660:	4a2a      	ldr	r2, [pc, #168]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003668:	f7fd fd6a 	bl	8001140 <HAL_GetTick>
 800366c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003670:	f7fd fd66 	bl	8001140 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e21a      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003682:	4b22      	ldr	r3, [pc, #136]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 8003684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x45c>
 800368e:	e018      	b.n	80036c2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003690:	4b1e      	ldr	r3, [pc, #120]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 8003692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003694:	4a1d      	ldr	r2, [pc, #116]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fd fd50 	bl	8001140 <HAL_GetTick>
 80036a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a4:	f7fd fd4c 	bl	8001140 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e200      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036b6:	4b15      	ldr	r3, [pc, #84]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 80036b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d039      	beq.n	8003742 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d01c      	beq.n	8003710 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036d6:	4b0d      	ldr	r3, [pc, #52]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a0c      	ldr	r2, [pc, #48]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 80036dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80036e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036e2:	f7fd fd2d 	bl	8001140 <HAL_GetTick>
 80036e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036ea:	f7fd fd29 	bl	8001140 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e1dd      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036fc:	4b03      	ldr	r3, [pc, #12]	@ (800370c <HAL_RCC_OscConfig+0x4f8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x4d6>
 8003708:	e01b      	b.n	8003742 <HAL_RCC_OscConfig+0x52e>
 800370a:	bf00      	nop
 800370c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003710:	4b9b      	ldr	r3, [pc, #620]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a9a      	ldr	r2, [pc, #616]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003716:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800371a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800371c:	f7fd fd10 	bl	8001140 <HAL_GetTick>
 8003720:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003724:	f7fd fd0c 	bl	8001140 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e1c0      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003736:	4b92      	ldr	r3, [pc, #584]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 8081 	beq.w	8003852 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003750:	4b8c      	ldr	r3, [pc, #560]	@ (8003984 <HAL_RCC_OscConfig+0x770>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a8b      	ldr	r2, [pc, #556]	@ (8003984 <HAL_RCC_OscConfig+0x770>)
 8003756:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800375a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800375c:	f7fd fcf0 	bl	8001140 <HAL_GetTick>
 8003760:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003764:	f7fd fcec 	bl	8001140 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	@ 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e1a0      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003776:	4b83      	ldr	r3, [pc, #524]	@ (8003984 <HAL_RCC_OscConfig+0x770>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d106      	bne.n	8003798 <HAL_RCC_OscConfig+0x584>
 800378a:	4b7d      	ldr	r3, [pc, #500]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378e:	4a7c      	ldr	r2, [pc, #496]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	6713      	str	r3, [r2, #112]	@ 0x70
 8003796:	e02d      	b.n	80037f4 <HAL_RCC_OscConfig+0x5e0>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10c      	bne.n	80037ba <HAL_RCC_OscConfig+0x5a6>
 80037a0:	4b77      	ldr	r3, [pc, #476]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a4:	4a76      	ldr	r2, [pc, #472]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ac:	4b74      	ldr	r3, [pc, #464]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80037ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b0:	4a73      	ldr	r2, [pc, #460]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80037b2:	f023 0304 	bic.w	r3, r3, #4
 80037b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b8:	e01c      	b.n	80037f4 <HAL_RCC_OscConfig+0x5e0>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b05      	cmp	r3, #5
 80037c0:	d10c      	bne.n	80037dc <HAL_RCC_OscConfig+0x5c8>
 80037c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80037c8:	f043 0304 	orr.w	r3, r3, #4
 80037cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d2:	4a6b      	ldr	r2, [pc, #428]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037da:	e00b      	b.n	80037f4 <HAL_RCC_OscConfig+0x5e0>
 80037dc:	4b68      	ldr	r3, [pc, #416]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e0:	4a67      	ldr	r2, [pc, #412]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80037e2:	f023 0301 	bic.w	r3, r3, #1
 80037e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e8:	4b65      	ldr	r3, [pc, #404]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ec:	4a64      	ldr	r2, [pc, #400]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80037ee:	f023 0304 	bic.w	r3, r3, #4
 80037f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d015      	beq.n	8003828 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fc:	f7fd fca0 	bl	8001140 <HAL_GetTick>
 8003800:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003802:	e00a      	b.n	800381a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003804:	f7fd fc9c 	bl	8001140 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e14e      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800381a:	4b59      	ldr	r3, [pc, #356]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0ee      	beq.n	8003804 <HAL_RCC_OscConfig+0x5f0>
 8003826:	e014      	b.n	8003852 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003828:	f7fd fc8a 	bl	8001140 <HAL_GetTick>
 800382c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800382e:	e00a      	b.n	8003846 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003830:	f7fd fc86 	bl	8001140 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e138      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003846:	4b4e      	ldr	r3, [pc, #312]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1ee      	bne.n	8003830 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 812d 	beq.w	8003ab6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800385c:	4b48      	ldr	r3, [pc, #288]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003864:	2b18      	cmp	r3, #24
 8003866:	f000 80bd 	beq.w	80039e4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	2b02      	cmp	r3, #2
 8003870:	f040 809e 	bne.w	80039b0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003874:	4b42      	ldr	r3, [pc, #264]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a41      	ldr	r2, [pc, #260]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 800387a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800387e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fd fc5e 	bl	8001140 <HAL_GetTick>
 8003884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003888:	f7fd fc5a 	bl	8001140 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e10e      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800389a:	4b39      	ldr	r3, [pc, #228]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a6:	4b36      	ldr	r3, [pc, #216]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80038a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038aa:	4b37      	ldr	r3, [pc, #220]	@ (8003988 <HAL_RCC_OscConfig+0x774>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80038b6:	0112      	lsls	r2, r2, #4
 80038b8:	430a      	orrs	r2, r1
 80038ba:	4931      	ldr	r1, [pc, #196]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	628b      	str	r3, [r1, #40]	@ 0x28
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c4:	3b01      	subs	r3, #1
 80038c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ce:	3b01      	subs	r3, #1
 80038d0:	025b      	lsls	r3, r3, #9
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038da:	3b01      	subs	r3, #1
 80038dc:	041b      	lsls	r3, r3, #16
 80038de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e8:	3b01      	subs	r3, #1
 80038ea:	061b      	lsls	r3, r3, #24
 80038ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80038f0:	4923      	ldr	r1, [pc, #140]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80038f6:	4b22      	ldr	r3, [pc, #136]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80038f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fa:	4a21      	ldr	r2, [pc, #132]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 80038fc:	f023 0301 	bic.w	r3, r3, #1
 8003900:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003902:	4b1f      	ldr	r3, [pc, #124]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003904:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003906:	4b21      	ldr	r3, [pc, #132]	@ (800398c <HAL_RCC_OscConfig+0x778>)
 8003908:	4013      	ands	r3, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800390e:	00d2      	lsls	r2, r2, #3
 8003910:	491b      	ldr	r1, [pc, #108]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003912:	4313      	orrs	r3, r2
 8003914:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003916:	4b1a      	ldr	r3, [pc, #104]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391a:	f023 020c 	bic.w	r2, r3, #12
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	4917      	ldr	r1, [pc, #92]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003924:	4313      	orrs	r3, r2
 8003926:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003928:	4b15      	ldr	r3, [pc, #84]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	f023 0202 	bic.w	r2, r3, #2
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003934:	4912      	ldr	r1, [pc, #72]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003936:	4313      	orrs	r3, r2
 8003938:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800393a:	4b11      	ldr	r3, [pc, #68]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 800393c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393e:	4a10      	ldr	r2, [pc, #64]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003944:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003946:	4b0e      	ldr	r3, [pc, #56]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394a:	4a0d      	ldr	r2, [pc, #52]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 800394c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003950:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003952:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003956:	4a0a      	ldr	r2, [pc, #40]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800395c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800395e:	4b08      	ldr	r3, [pc, #32]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003962:	4a07      	ldr	r2, [pc, #28]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800396a:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a04      	ldr	r2, [pc, #16]	@ (8003980 <HAL_RCC_OscConfig+0x76c>)
 8003970:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003976:	f7fd fbe3 	bl	8001140 <HAL_GetTick>
 800397a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800397c:	e011      	b.n	80039a2 <HAL_RCC_OscConfig+0x78e>
 800397e:	bf00      	nop
 8003980:	58024400 	.word	0x58024400
 8003984:	58024800 	.word	0x58024800
 8003988:	fffffc0c 	.word	0xfffffc0c
 800398c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003990:	f7fd fbd6 	bl	8001140 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e08a      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039a2:	4b47      	ldr	r3, [pc, #284]	@ (8003ac0 <HAL_RCC_OscConfig+0x8ac>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x77c>
 80039ae:	e082      	b.n	8003ab6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b0:	4b43      	ldr	r3, [pc, #268]	@ (8003ac0 <HAL_RCC_OscConfig+0x8ac>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a42      	ldr	r2, [pc, #264]	@ (8003ac0 <HAL_RCC_OscConfig+0x8ac>)
 80039b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fd fbc0 	bl	8001140 <HAL_GetTick>
 80039c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c4:	f7fd fbbc 	bl	8001140 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e070      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039d6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac0 <HAL_RCC_OscConfig+0x8ac>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x7b0>
 80039e2:	e068      	b.n	8003ab6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80039e4:	4b36      	ldr	r3, [pc, #216]	@ (8003ac0 <HAL_RCC_OscConfig+0x8ac>)
 80039e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80039ea:	4b35      	ldr	r3, [pc, #212]	@ (8003ac0 <HAL_RCC_OscConfig+0x8ac>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d031      	beq.n	8003a5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f003 0203 	and.w	r2, r3, #3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d12a      	bne.n	8003a5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	091b      	lsrs	r3, r3, #4
 8003a0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d122      	bne.n	8003a5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d11a      	bne.n	8003a5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	0a5b      	lsrs	r3, r3, #9
 8003a2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d111      	bne.n	8003a5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	0c1b      	lsrs	r3, r3, #16
 8003a3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d108      	bne.n	8003a5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	0e1b      	lsrs	r3, r3, #24
 8003a4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e02b      	b.n	8003ab8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003a60:	4b17      	ldr	r3, [pc, #92]	@ (8003ac0 <HAL_RCC_OscConfig+0x8ac>)
 8003a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a64:	08db      	lsrs	r3, r3, #3
 8003a66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d01f      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003a76:	4b12      	ldr	r3, [pc, #72]	@ (8003ac0 <HAL_RCC_OscConfig+0x8ac>)
 8003a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7a:	4a11      	ldr	r2, [pc, #68]	@ (8003ac0 <HAL_RCC_OscConfig+0x8ac>)
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a82:	f7fd fb5d 	bl	8001140 <HAL_GetTick>
 8003a86:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003a88:	bf00      	nop
 8003a8a:	f7fd fb59 	bl	8001140 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d0f9      	beq.n	8003a8a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a96:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac0 <HAL_RCC_OscConfig+0x8ac>)
 8003a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac4 <HAL_RCC_OscConfig+0x8b0>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003aa2:	00d2      	lsls	r2, r2, #3
 8003aa4:	4906      	ldr	r1, [pc, #24]	@ (8003ac0 <HAL_RCC_OscConfig+0x8ac>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003aaa:	4b05      	ldr	r3, [pc, #20]	@ (8003ac0 <HAL_RCC_OscConfig+0x8ac>)
 8003aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aae:	4a04      	ldr	r2, [pc, #16]	@ (8003ac0 <HAL_RCC_OscConfig+0x8ac>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3730      	adds	r7, #48	@ 0x30
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	58024400 	.word	0x58024400
 8003ac4:	ffff0007 	.word	0xffff0007

08003ac8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e19c      	b.n	8003e16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003adc:	4b8a      	ldr	r3, [pc, #552]	@ (8003d08 <HAL_RCC_ClockConfig+0x240>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d910      	bls.n	8003b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b87      	ldr	r3, [pc, #540]	@ (8003d08 <HAL_RCC_ClockConfig+0x240>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 020f 	bic.w	r2, r3, #15
 8003af2:	4985      	ldr	r1, [pc, #532]	@ (8003d08 <HAL_RCC_ClockConfig+0x240>)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afa:	4b83      	ldr	r3, [pc, #524]	@ (8003d08 <HAL_RCC_ClockConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e184      	b.n	8003e16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d010      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	4b7b      	ldr	r3, [pc, #492]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d908      	bls.n	8003b3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b28:	4b78      	ldr	r3, [pc, #480]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	4975      	ldr	r1, [pc, #468]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d010      	beq.n	8003b68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	4b70      	ldr	r3, [pc, #448]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d908      	bls.n	8003b68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b56:	4b6d      	ldr	r3, [pc, #436]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	496a      	ldr	r1, [pc, #424]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d010      	beq.n	8003b96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699a      	ldr	r2, [r3, #24]
 8003b78:	4b64      	ldr	r3, [pc, #400]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d908      	bls.n	8003b96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b84:	4b61      	ldr	r3, [pc, #388]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	495e      	ldr	r1, [pc, #376]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d010      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69da      	ldr	r2, [r3, #28]
 8003ba6:	4b59      	ldr	r3, [pc, #356]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d908      	bls.n	8003bc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bb2:	4b56      	ldr	r3, [pc, #344]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	4953      	ldr	r1, [pc, #332]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d010      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	4b4d      	ldr	r3, [pc, #308]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d908      	bls.n	8003bf2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be0:	4b4a      	ldr	r3, [pc, #296]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	f023 020f 	bic.w	r2, r3, #15
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4947      	ldr	r1, [pc, #284]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d055      	beq.n	8003caa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003bfe:	4b43      	ldr	r3, [pc, #268]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	4940      	ldr	r1, [pc, #256]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d107      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c18:	4b3c      	ldr	r3, [pc, #240]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d121      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0f6      	b.n	8003e16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c30:	4b36      	ldr	r3, [pc, #216]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d115      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0ea      	b.n	8003e16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d107      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c48:	4b30      	ldr	r3, [pc, #192]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d109      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0de      	b.n	8003e16 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c58:	4b2c      	ldr	r3, [pc, #176]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0d6      	b.n	8003e16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c68:	4b28      	ldr	r3, [pc, #160]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f023 0207 	bic.w	r2, r3, #7
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4925      	ldr	r1, [pc, #148]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c7a:	f7fd fa61 	bl	8001140 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c80:	e00a      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c82:	f7fd fa5d 	bl	8001140 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e0be      	b.n	8003e16 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c98:	4b1c      	ldr	r3, [pc, #112]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d1eb      	bne.n	8003c82 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d010      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	4b14      	ldr	r3, [pc, #80]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d208      	bcs.n	8003cd8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc6:	4b11      	ldr	r3, [pc, #68]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f023 020f 	bic.w	r2, r3, #15
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	490e      	ldr	r1, [pc, #56]	@ (8003d0c <HAL_RCC_ClockConfig+0x244>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d08 <HAL_RCC_ClockConfig+0x240>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d214      	bcs.n	8003d10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce6:	4b08      	ldr	r3, [pc, #32]	@ (8003d08 <HAL_RCC_ClockConfig+0x240>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 020f 	bic.w	r2, r3, #15
 8003cee:	4906      	ldr	r1, [pc, #24]	@ (8003d08 <HAL_RCC_ClockConfig+0x240>)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf6:	4b04      	ldr	r3, [pc, #16]	@ (8003d08 <HAL_RCC_ClockConfig+0x240>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e086      	b.n	8003e16 <HAL_RCC_ClockConfig+0x34e>
 8003d08:	52002000 	.word	0x52002000
 8003d0c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d010      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	4b3f      	ldr	r3, [pc, #252]	@ (8003e20 <HAL_RCC_ClockConfig+0x358>)
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d208      	bcs.n	8003d3e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d2c:	4b3c      	ldr	r3, [pc, #240]	@ (8003e20 <HAL_RCC_ClockConfig+0x358>)
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	4939      	ldr	r1, [pc, #228]	@ (8003e20 <HAL_RCC_ClockConfig+0x358>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d010      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695a      	ldr	r2, [r3, #20]
 8003d4e:	4b34      	ldr	r3, [pc, #208]	@ (8003e20 <HAL_RCC_ClockConfig+0x358>)
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d208      	bcs.n	8003d6c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d5a:	4b31      	ldr	r3, [pc, #196]	@ (8003e20 <HAL_RCC_ClockConfig+0x358>)
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	492e      	ldr	r1, [pc, #184]	@ (8003e20 <HAL_RCC_ClockConfig+0x358>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d010      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699a      	ldr	r2, [r3, #24]
 8003d7c:	4b28      	ldr	r3, [pc, #160]	@ (8003e20 <HAL_RCC_ClockConfig+0x358>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d208      	bcs.n	8003d9a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d88:	4b25      	ldr	r3, [pc, #148]	@ (8003e20 <HAL_RCC_ClockConfig+0x358>)
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	4922      	ldr	r1, [pc, #136]	@ (8003e20 <HAL_RCC_ClockConfig+0x358>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d010      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69da      	ldr	r2, [r3, #28]
 8003daa:	4b1d      	ldr	r3, [pc, #116]	@ (8003e20 <HAL_RCC_ClockConfig+0x358>)
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d208      	bcs.n	8003dc8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003db6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e20 <HAL_RCC_ClockConfig+0x358>)
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	4917      	ldr	r1, [pc, #92]	@ (8003e20 <HAL_RCC_ClockConfig+0x358>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dc8:	f000 f834 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b14      	ldr	r3, [pc, #80]	@ (8003e20 <HAL_RCC_ClockConfig+0x358>)
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	4912      	ldr	r1, [pc, #72]	@ (8003e24 <HAL_RCC_ClockConfig+0x35c>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
 8003de4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003de6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e20 <HAL_RCC_ClockConfig+0x358>)
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	4a0d      	ldr	r2, [pc, #52]	@ (8003e24 <HAL_RCC_ClockConfig+0x35c>)
 8003df0:	5cd3      	ldrb	r3, [r2, r3]
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8003e28 <HAL_RCC_ClockConfig+0x360>)
 8003dfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e00:	4a0a      	ldr	r2, [pc, #40]	@ (8003e2c <HAL_RCC_ClockConfig+0x364>)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003e06:	4b0a      	ldr	r3, [pc, #40]	@ (8003e30 <HAL_RCC_ClockConfig+0x368>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fd f94e 	bl	80010ac <HAL_InitTick>
 8003e10:	4603      	mov	r3, r0
 8003e12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	58024400 	.word	0x58024400
 8003e24:	0800722c 	.word	0x0800722c
 8003e28:	24000004 	.word	0x24000004
 8003e2c:	24000000 	.word	0x24000000
 8003e30:	24000008 	.word	0x24000008

08003e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b089      	sub	sp, #36	@ 0x24
 8003e38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e3a:	4bb3      	ldr	r3, [pc, #716]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e42:	2b18      	cmp	r3, #24
 8003e44:	f200 8155 	bhi.w	80040f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003e48:	a201      	add	r2, pc, #4	@ (adr r2, 8003e50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003eb5 	.word	0x08003eb5
 8003e54:	080040f3 	.word	0x080040f3
 8003e58:	080040f3 	.word	0x080040f3
 8003e5c:	080040f3 	.word	0x080040f3
 8003e60:	080040f3 	.word	0x080040f3
 8003e64:	080040f3 	.word	0x080040f3
 8003e68:	080040f3 	.word	0x080040f3
 8003e6c:	080040f3 	.word	0x080040f3
 8003e70:	08003edb 	.word	0x08003edb
 8003e74:	080040f3 	.word	0x080040f3
 8003e78:	080040f3 	.word	0x080040f3
 8003e7c:	080040f3 	.word	0x080040f3
 8003e80:	080040f3 	.word	0x080040f3
 8003e84:	080040f3 	.word	0x080040f3
 8003e88:	080040f3 	.word	0x080040f3
 8003e8c:	080040f3 	.word	0x080040f3
 8003e90:	08003ee1 	.word	0x08003ee1
 8003e94:	080040f3 	.word	0x080040f3
 8003e98:	080040f3 	.word	0x080040f3
 8003e9c:	080040f3 	.word	0x080040f3
 8003ea0:	080040f3 	.word	0x080040f3
 8003ea4:	080040f3 	.word	0x080040f3
 8003ea8:	080040f3 	.word	0x080040f3
 8003eac:	080040f3 	.word	0x080040f3
 8003eb0:	08003ee7 	.word	0x08003ee7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003eb4:	4b94      	ldr	r3, [pc, #592]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d009      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ec0:	4b91      	ldr	r3, [pc, #580]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	08db      	lsrs	r3, r3, #3
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	4a90      	ldr	r2, [pc, #576]	@ (800410c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003ed2:	e111      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ed4:	4b8d      	ldr	r3, [pc, #564]	@ (800410c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ed6:	61bb      	str	r3, [r7, #24]
      break;
 8003ed8:	e10e      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003eda:	4b8d      	ldr	r3, [pc, #564]	@ (8004110 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003edc:	61bb      	str	r3, [r7, #24]
      break;
 8003ede:	e10b      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003ee0:	4b8c      	ldr	r3, [pc, #560]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ee2:	61bb      	str	r3, [r7, #24]
      break;
 8003ee4:	e108      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ee6:	4b88      	ldr	r3, [pc, #544]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ef0:	4b85      	ldr	r3, [pc, #532]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003efa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003efc:	4b82      	ldr	r3, [pc, #520]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003f06:	4b80      	ldr	r3, [pc, #512]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f0a:	08db      	lsrs	r3, r3, #3
 8003f0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	fb02 f303 	mul.w	r3, r2, r3
 8003f16:	ee07 3a90 	vmov	s15, r3
 8003f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80e1 	beq.w	80040ec <HAL_RCC_GetSysClockFreq+0x2b8>
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	f000 8083 	beq.w	8004038 <HAL_RCC_GetSysClockFreq+0x204>
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	f200 80a1 	bhi.w	800407c <HAL_RCC_GetSysClockFreq+0x248>
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x114>
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d056      	beq.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f46:	e099      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f48:	4b6f      	ldr	r3, [pc, #444]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d02d      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f54:	4b6c      	ldr	r3, [pc, #432]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	08db      	lsrs	r3, r3, #3
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	4a6b      	ldr	r2, [pc, #428]	@ (800410c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
 8003f64:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	ee07 3a90 	vmov	s15, r3
 8003f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7e:	4b62      	ldr	r3, [pc, #392]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f92:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004118 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003faa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003fae:	e087      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800411c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc2:	4b51      	ldr	r3, [pc, #324]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fd6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004118 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ff2:	e065      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004120 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004006:	4b40      	ldr	r3, [pc, #256]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004016:	ed97 6a02 	vldr	s12, [r7, #8]
 800401a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004118 <HAL_RCC_GetSysClockFreq+0x2e4>
 800401e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800402a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800402e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004032:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004036:	e043      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004042:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004124 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800404a:	4b2f      	ldr	r3, [pc, #188]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004052:	ee07 3a90 	vmov	s15, r3
 8004056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800405a:	ed97 6a02 	vldr	s12, [r7, #8]
 800405e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004118 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800406a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800406e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004076:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800407a:	e021      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004086:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004120 <HAL_RCC_GetSysClockFreq+0x2ec>
 800408a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800408e:	4b1e      	ldr	r3, [pc, #120]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004096:	ee07 3a90 	vmov	s15, r3
 800409a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409e:	ed97 6a02 	vldr	s12, [r7, #8]
 80040a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004118 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80040c0:	4b11      	ldr	r3, [pc, #68]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c4:	0a5b      	lsrs	r3, r3, #9
 80040c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ca:	3301      	adds	r3, #1
 80040cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	ee07 3a90 	vmov	s15, r3
 80040d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80040dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040e4:	ee17 3a90 	vmov	r3, s15
 80040e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80040ea:	e005      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61bb      	str	r3, [r7, #24]
      break;
 80040f0:	e002      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80040f2:	4b07      	ldr	r3, [pc, #28]	@ (8004110 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80040f4:	61bb      	str	r3, [r7, #24]
      break;
 80040f6:	bf00      	nop
  }

  return sysclockfreq;
 80040f8:	69bb      	ldr	r3, [r7, #24]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3724      	adds	r7, #36	@ 0x24
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	58024400 	.word	0x58024400
 800410c:	03d09000 	.word	0x03d09000
 8004110:	003d0900 	.word	0x003d0900
 8004114:	017d7840 	.word	0x017d7840
 8004118:	46000000 	.word	0x46000000
 800411c:	4c742400 	.word	0x4c742400
 8004120:	4a742400 	.word	0x4a742400
 8004124:	4bbebc20 	.word	0x4bbebc20

08004128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800412e:	f7ff fe81 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8004132:	4602      	mov	r2, r0
 8004134:	4b10      	ldr	r3, [pc, #64]	@ (8004178 <HAL_RCC_GetHCLKFreq+0x50>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	0a1b      	lsrs	r3, r3, #8
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	490f      	ldr	r1, [pc, #60]	@ (800417c <HAL_RCC_GetHCLKFreq+0x54>)
 8004140:	5ccb      	ldrb	r3, [r1, r3]
 8004142:	f003 031f 	and.w	r3, r3, #31
 8004146:	fa22 f303 	lsr.w	r3, r2, r3
 800414a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800414c:	4b0a      	ldr	r3, [pc, #40]	@ (8004178 <HAL_RCC_GetHCLKFreq+0x50>)
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	4a09      	ldr	r2, [pc, #36]	@ (800417c <HAL_RCC_GetHCLKFreq+0x54>)
 8004156:	5cd3      	ldrb	r3, [r2, r3]
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	fa22 f303 	lsr.w	r3, r2, r3
 8004162:	4a07      	ldr	r2, [pc, #28]	@ (8004180 <HAL_RCC_GetHCLKFreq+0x58>)
 8004164:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004166:	4a07      	ldr	r2, [pc, #28]	@ (8004184 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800416c:	4b04      	ldr	r3, [pc, #16]	@ (8004180 <HAL_RCC_GetHCLKFreq+0x58>)
 800416e:	681b      	ldr	r3, [r3, #0]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	58024400 	.word	0x58024400
 800417c:	0800722c 	.word	0x0800722c
 8004180:	24000004 	.word	0x24000004
 8004184:	24000000 	.word	0x24000000

08004188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800418c:	f7ff ffcc 	bl	8004128 <HAL_RCC_GetHCLKFreq>
 8004190:	4602      	mov	r2, r0
 8004192:	4b06      	ldr	r3, [pc, #24]	@ (80041ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	091b      	lsrs	r3, r3, #4
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	4904      	ldr	r1, [pc, #16]	@ (80041b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800419e:	5ccb      	ldrb	r3, [r1, r3]
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	58024400 	.word	0x58024400
 80041b0:	0800722c 	.word	0x0800722c

080041b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b8:	b0c8      	sub	sp, #288	@ 0x120
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041c0:	2300      	movs	r3, #0
 80041c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041c6:	2300      	movs	r3, #0
 80041c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80041d8:	2500      	movs	r5, #0
 80041da:	ea54 0305 	orrs.w	r3, r4, r5
 80041de:	d049      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80041e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041ea:	d02f      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80041ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041f0:	d828      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80041f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041f6:	d01a      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80041f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041fc:	d822      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004206:	d007      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004208:	e01c      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800420a:	4bb8      	ldr	r3, [pc, #736]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	4ab7      	ldr	r2, [pc, #732]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004214:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004216:	e01a      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800421c:	3308      	adds	r3, #8
 800421e:	2102      	movs	r1, #2
 8004220:	4618      	mov	r0, r3
 8004222:	f002 fb45 	bl	80068b0 <RCCEx_PLL2_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800422c:	e00f      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800422e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004232:	3328      	adds	r3, #40	@ 0x28
 8004234:	2102      	movs	r1, #2
 8004236:	4618      	mov	r0, r3
 8004238:	f002 fbec 	bl	8006a14 <RCCEx_PLL3_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004242:	e004      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800424a:	e000      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800424c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004256:	4ba5      	ldr	r3, [pc, #660]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800425a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800425e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004262:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004264:	4aa1      	ldr	r2, [pc, #644]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004266:	430b      	orrs	r3, r1
 8004268:	6513      	str	r3, [r2, #80]	@ 0x50
 800426a:	e003      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004270:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004280:	f04f 0900 	mov.w	r9, #0
 8004284:	ea58 0309 	orrs.w	r3, r8, r9
 8004288:	d047      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800428a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800428e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004290:	2b04      	cmp	r3, #4
 8004292:	d82a      	bhi.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004294:	a201      	add	r2, pc, #4	@ (adr r2, 800429c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429a:	bf00      	nop
 800429c:	080042b1 	.word	0x080042b1
 80042a0:	080042bf 	.word	0x080042bf
 80042a4:	080042d5 	.word	0x080042d5
 80042a8:	080042f3 	.word	0x080042f3
 80042ac:	080042f3 	.word	0x080042f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b0:	4b8e      	ldr	r3, [pc, #568]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b4:	4a8d      	ldr	r2, [pc, #564]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042bc:	e01a      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042c2:	3308      	adds	r3, #8
 80042c4:	2100      	movs	r1, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f002 faf2 	bl	80068b0 <RCCEx_PLL2_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042d2:	e00f      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042d8:	3328      	adds	r3, #40	@ 0x28
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f002 fb99 	bl	8006a14 <RCCEx_PLL3_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042e8:	e004      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80042f0:	e000      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80042f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10a      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042fc:	4b7b      	ldr	r3, [pc, #492]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004300:	f023 0107 	bic.w	r1, r3, #7
 8004304:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430a:	4a78      	ldr	r2, [pc, #480]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800430c:	430b      	orrs	r3, r1
 800430e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004310:	e003      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004312:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004316:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800431a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800431e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004322:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004326:	f04f 0b00 	mov.w	fp, #0
 800432a:	ea5a 030b 	orrs.w	r3, sl, fp
 800432e:	d04c      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800433a:	d030      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800433c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004340:	d829      	bhi.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004342:	2bc0      	cmp	r3, #192	@ 0xc0
 8004344:	d02d      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004346:	2bc0      	cmp	r3, #192	@ 0xc0
 8004348:	d825      	bhi.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800434a:	2b80      	cmp	r3, #128	@ 0x80
 800434c:	d018      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800434e:	2b80      	cmp	r3, #128	@ 0x80
 8004350:	d821      	bhi.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004356:	2b40      	cmp	r3, #64	@ 0x40
 8004358:	d007      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800435a:	e01c      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800435c:	4b63      	ldr	r3, [pc, #396]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	4a62      	ldr	r2, [pc, #392]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004368:	e01c      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800436a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800436e:	3308      	adds	r3, #8
 8004370:	2100      	movs	r1, #0
 8004372:	4618      	mov	r0, r3
 8004374:	f002 fa9c 	bl	80068b0 <RCCEx_PLL2_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800437e:	e011      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004380:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004384:	3328      	adds	r3, #40	@ 0x28
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f002 fb43 	bl	8006a14 <RCCEx_PLL3_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004394:	e006      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800439c:	e002      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800439e:	bf00      	nop
 80043a0:	e000      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80043a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10a      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80043ac:	4b4f      	ldr	r3, [pc, #316]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80043b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ba:	4a4c      	ldr	r2, [pc, #304]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043bc:	430b      	orrs	r3, r1
 80043be:	6513      	str	r3, [r2, #80]	@ 0x50
 80043c0:	e003      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80043ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80043d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80043da:	2300      	movs	r3, #0
 80043dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80043e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80043e4:	460b      	mov	r3, r1
 80043e6:	4313      	orrs	r3, r2
 80043e8:	d053      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80043ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80043f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043f6:	d035      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80043f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043fc:	d82e      	bhi.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80043fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004402:	d031      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004404:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004408:	d828      	bhi.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800440a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800440e:	d01a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004410:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004414:	d822      	bhi.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800441a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800441e:	d007      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004420:	e01c      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004422:	4b32      	ldr	r3, [pc, #200]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004426:	4a31      	ldr	r2, [pc, #196]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800442c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800442e:	e01c      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004430:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004434:	3308      	adds	r3, #8
 8004436:	2100      	movs	r1, #0
 8004438:	4618      	mov	r0, r3
 800443a:	f002 fa39 	bl	80068b0 <RCCEx_PLL2_Config>
 800443e:	4603      	mov	r3, r0
 8004440:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004444:	e011      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004446:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800444a:	3328      	adds	r3, #40	@ 0x28
 800444c:	2100      	movs	r1, #0
 800444e:	4618      	mov	r0, r3
 8004450:	f002 fae0 	bl	8006a14 <RCCEx_PLL3_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800445a:	e006      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004462:	e002      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004464:	bf00      	nop
 8004466:	e000      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800446a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10b      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004472:	4b1e      	ldr	r3, [pc, #120]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004476:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800447a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800447e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004482:	4a1a      	ldr	r2, [pc, #104]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004484:	430b      	orrs	r3, r1
 8004486:	6593      	str	r3, [r2, #88]	@ 0x58
 8004488:	e003      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800448e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800449e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80044a2:	2300      	movs	r3, #0
 80044a4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80044a8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80044ac:	460b      	mov	r3, r1
 80044ae:	4313      	orrs	r3, r2
 80044b0:	d056      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80044b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80044ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044be:	d038      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80044c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044c4:	d831      	bhi.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80044c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80044ca:	d034      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80044cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80044d0:	d82b      	bhi.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80044d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044d6:	d01d      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80044d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044dc:	d825      	bhi.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d006      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80044e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044e6:	d00a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80044e8:	e01f      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80044ea:	bf00      	nop
 80044ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f0:	4ba2      	ldr	r3, [pc, #648]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	4aa1      	ldr	r2, [pc, #644]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044fc:	e01c      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004502:	3308      	adds	r3, #8
 8004504:	2100      	movs	r1, #0
 8004506:	4618      	mov	r0, r3
 8004508:	f002 f9d2 	bl	80068b0 <RCCEx_PLL2_Config>
 800450c:	4603      	mov	r3, r0
 800450e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004512:	e011      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004514:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004518:	3328      	adds	r3, #40	@ 0x28
 800451a:	2100      	movs	r1, #0
 800451c:	4618      	mov	r0, r3
 800451e:	f002 fa79 	bl	8006a14 <RCCEx_PLL3_Config>
 8004522:	4603      	mov	r3, r0
 8004524:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004528:	e006      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004530:	e002      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004532:	bf00      	nop
 8004534:	e000      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004538:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10b      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004540:	4b8e      	ldr	r3, [pc, #568]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004544:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800454c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004550:	4a8a      	ldr	r2, [pc, #552]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004552:	430b      	orrs	r3, r1
 8004554:	6593      	str	r3, [r2, #88]	@ 0x58
 8004556:	e003      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004558:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800455c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004568:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800456c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004570:	2300      	movs	r3, #0
 8004572:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004576:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800457a:	460b      	mov	r3, r1
 800457c:	4313      	orrs	r3, r2
 800457e:	d03a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004580:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004586:	2b30      	cmp	r3, #48	@ 0x30
 8004588:	d01f      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800458a:	2b30      	cmp	r3, #48	@ 0x30
 800458c:	d819      	bhi.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800458e:	2b20      	cmp	r3, #32
 8004590:	d00c      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004592:	2b20      	cmp	r3, #32
 8004594:	d815      	bhi.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d019      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800459a:	2b10      	cmp	r3, #16
 800459c:	d111      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800459e:	4b77      	ldr	r3, [pc, #476]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a2:	4a76      	ldr	r2, [pc, #472]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80045aa:	e011      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045b0:	3308      	adds	r3, #8
 80045b2:	2102      	movs	r1, #2
 80045b4:	4618      	mov	r0, r3
 80045b6:	f002 f97b 	bl	80068b0 <RCCEx_PLL2_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80045c0:	e006      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80045c8:	e002      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80045ca:	bf00      	nop
 80045cc:	e000      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80045ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80045d8:	4b68      	ldr	r3, [pc, #416]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045dc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80045e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e6:	4a65      	ldr	r2, [pc, #404]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045e8:	430b      	orrs	r3, r1
 80045ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045ec:	e003      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80045f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004602:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004606:	2300      	movs	r3, #0
 8004608:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800460c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004610:	460b      	mov	r3, r1
 8004612:	4313      	orrs	r3, r2
 8004614:	d051      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800461a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800461c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004620:	d035      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004622:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004626:	d82e      	bhi.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004628:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800462c:	d031      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800462e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004632:	d828      	bhi.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004638:	d01a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800463a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800463e:	d822      	bhi.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004648:	d007      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800464a:	e01c      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800464c:	4b4b      	ldr	r3, [pc, #300]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800464e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004650:	4a4a      	ldr	r2, [pc, #296]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004656:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004658:	e01c      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800465a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800465e:	3308      	adds	r3, #8
 8004660:	2100      	movs	r1, #0
 8004662:	4618      	mov	r0, r3
 8004664:	f002 f924 	bl	80068b0 <RCCEx_PLL2_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800466e:	e011      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004670:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004674:	3328      	adds	r3, #40	@ 0x28
 8004676:	2100      	movs	r1, #0
 8004678:	4618      	mov	r0, r3
 800467a:	f002 f9cb 	bl	8006a14 <RCCEx_PLL3_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004684:	e006      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800468c:	e002      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800468e:	bf00      	nop
 8004690:	e000      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004694:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800469c:	4b37      	ldr	r3, [pc, #220]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800469e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80046a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046aa:	4a34      	ldr	r2, [pc, #208]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046ac:	430b      	orrs	r3, r1
 80046ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80046b0:	e003      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80046ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80046c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046ca:	2300      	movs	r3, #0
 80046cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046d0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4313      	orrs	r3, r2
 80046d8:	d056      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80046da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046e4:	d033      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80046e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046ea:	d82c      	bhi.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80046ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046f0:	d02f      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80046f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046f6:	d826      	bhi.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80046f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046fc:	d02b      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80046fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004702:	d820      	bhi.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004704:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004708:	d012      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800470a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800470e:	d81a      	bhi.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d022      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004718:	d115      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800471a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800471e:	3308      	adds	r3, #8
 8004720:	2101      	movs	r1, #1
 8004722:	4618      	mov	r0, r3
 8004724:	f002 f8c4 	bl	80068b0 <RCCEx_PLL2_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800472e:	e015      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004730:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004734:	3328      	adds	r3, #40	@ 0x28
 8004736:	2101      	movs	r1, #1
 8004738:	4618      	mov	r0, r3
 800473a:	f002 f96b 	bl	8006a14 <RCCEx_PLL3_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004744:	e00a      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800474c:	e006      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800474e:	bf00      	nop
 8004750:	e004      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004752:	bf00      	nop
 8004754:	e002      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004756:	bf00      	nop
 8004758:	e000      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800475a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800475c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10d      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004764:	4b05      	ldr	r3, [pc, #20]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004768:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800476c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004770:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004772:	4a02      	ldr	r2, [pc, #8]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004774:	430b      	orrs	r3, r1
 8004776:	6513      	str	r3, [r2, #80]	@ 0x50
 8004778:	e006      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800477a:	bf00      	nop
 800477c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004780:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004784:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004790:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004794:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004798:	2300      	movs	r3, #0
 800479a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800479e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80047a2:	460b      	mov	r3, r1
 80047a4:	4313      	orrs	r3, r2
 80047a6:	d055      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80047a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80047b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047b4:	d033      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80047b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047ba:	d82c      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80047bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c0:	d02f      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80047c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c6:	d826      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80047c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047cc:	d02b      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80047ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047d2:	d820      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80047d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047d8:	d012      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80047da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047de:	d81a      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d022      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80047e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047e8:	d115      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ee:	3308      	adds	r3, #8
 80047f0:	2101      	movs	r1, #1
 80047f2:	4618      	mov	r0, r3
 80047f4:	f002 f85c 	bl	80068b0 <RCCEx_PLL2_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80047fe:	e015      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004804:	3328      	adds	r3, #40	@ 0x28
 8004806:	2101      	movs	r1, #1
 8004808:	4618      	mov	r0, r3
 800480a:	f002 f903 	bl	8006a14 <RCCEx_PLL3_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004814:	e00a      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800481c:	e006      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800481e:	bf00      	nop
 8004820:	e004      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004822:	bf00      	nop
 8004824:	e002      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004826:	bf00      	nop
 8004828:	e000      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800482a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800482c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10b      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004834:	4ba3      	ldr	r3, [pc, #652]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004838:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800483c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004840:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004844:	4a9f      	ldr	r2, [pc, #636]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004846:	430b      	orrs	r3, r1
 8004848:	6593      	str	r3, [r2, #88]	@ 0x58
 800484a:	e003      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004850:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004860:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004864:	2300      	movs	r3, #0
 8004866:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800486a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800486e:	460b      	mov	r3, r1
 8004870:	4313      	orrs	r3, r2
 8004872:	d037      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800487e:	d00e      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004880:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004884:	d816      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004886:	2b00      	cmp	r3, #0
 8004888:	d018      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800488a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800488e:	d111      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004890:	4b8c      	ldr	r3, [pc, #560]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004894:	4a8b      	ldr	r2, [pc, #556]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800489a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800489c:	e00f      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800489e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048a2:	3308      	adds	r3, #8
 80048a4:	2101      	movs	r1, #1
 80048a6:	4618      	mov	r0, r3
 80048a8:	f002 f802 	bl	80068b0 <RCCEx_PLL2_Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80048b2:	e004      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048ba:	e000      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80048bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048c6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80048ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d4:	4a7b      	ldr	r2, [pc, #492]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048d6:	430b      	orrs	r3, r1
 80048d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80048da:	e003      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80048e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80048f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048f4:	2300      	movs	r3, #0
 80048f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80048fe:	460b      	mov	r3, r1
 8004900:	4313      	orrs	r3, r2
 8004902:	d039      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800490a:	2b03      	cmp	r3, #3
 800490c:	d81c      	bhi.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800490e:	a201      	add	r2, pc, #4	@ (adr r2, 8004914 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004914:	08004951 	.word	0x08004951
 8004918:	08004925 	.word	0x08004925
 800491c:	08004933 	.word	0x08004933
 8004920:	08004951 	.word	0x08004951
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004924:	4b67      	ldr	r3, [pc, #412]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004928:	4a66      	ldr	r2, [pc, #408]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800492a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800492e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004930:	e00f      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004932:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004936:	3308      	adds	r3, #8
 8004938:	2102      	movs	r1, #2
 800493a:	4618      	mov	r0, r3
 800493c:	f001 ffb8 	bl	80068b0 <RCCEx_PLL2_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004946:	e004      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800494e:	e000      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004952:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800495a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800495c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800495e:	f023 0103 	bic.w	r1, r3, #3
 8004962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004968:	4a56      	ldr	r2, [pc, #344]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800496a:	430b      	orrs	r3, r1
 800496c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800496e:	e003      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004970:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004974:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004980:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004984:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004988:	2300      	movs	r3, #0
 800498a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800498e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004992:	460b      	mov	r3, r1
 8004994:	4313      	orrs	r3, r2
 8004996:	f000 809f 	beq.w	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800499a:	4b4b      	ldr	r3, [pc, #300]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a4a      	ldr	r2, [pc, #296]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80049a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049a6:	f7fc fbcb 	bl	8001140 <HAL_GetTick>
 80049aa:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049ae:	e00b      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b0:	f7fc fbc6 	bl	8001140 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b64      	cmp	r3, #100	@ 0x64
 80049be:	d903      	bls.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80049c6:	e005      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049c8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0ed      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80049d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d179      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80049dc:	4b39      	ldr	r3, [pc, #228]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80049e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80049e8:	4053      	eors	r3, r2
 80049ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d015      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049f2:	4b34      	ldr	r3, [pc, #208]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049fa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049fe:	4b31      	ldr	r3, [pc, #196]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a02:	4a30      	ldr	r2, [pc, #192]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a08:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a14:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004a16:	4a2b      	ldr	r2, [pc, #172]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a2a:	d118      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2c:	f7fc fb88 	bl	8001140 <HAL_GetTick>
 8004a30:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a34:	e00d      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a36:	f7fc fb83 	bl	8001140 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004a40:	1ad2      	subs	r2, r2, r3
 8004a42:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d903      	bls.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8004a50:	e005      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a52:	4b1c      	ldr	r3, [pc, #112]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0eb      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004a5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d129      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a76:	d10e      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004a78:	4b12      	ldr	r3, [pc, #72]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a88:	091a      	lsrs	r2, r3, #4
 8004a8a:	4b10      	ldr	r3, [pc, #64]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	4a0d      	ldr	r2, [pc, #52]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a90:	430b      	orrs	r3, r1
 8004a92:	6113      	str	r3, [r2, #16]
 8004a94:	e005      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004a96:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004aa0:	6113      	str	r3, [r2, #16]
 8004aa2:	4b08      	ldr	r3, [pc, #32]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004aa4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab2:	4a04      	ldr	r2, [pc, #16]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ab8:	e00e      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004aba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004abe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8004ac2:	e009      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004ac4:	58024400 	.word	0x58024400
 8004ac8:	58024800 	.word	0x58024800
 8004acc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ad4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	f002 0301 	and.w	r3, r2, #1
 8004ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004aee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004af2:	460b      	mov	r3, r1
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f000 8089 	beq.w	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004afe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b00:	2b28      	cmp	r3, #40	@ 0x28
 8004b02:	d86b      	bhi.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004b04:	a201      	add	r2, pc, #4	@ (adr r2, 8004b0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004be5 	.word	0x08004be5
 8004b10:	08004bdd 	.word	0x08004bdd
 8004b14:	08004bdd 	.word	0x08004bdd
 8004b18:	08004bdd 	.word	0x08004bdd
 8004b1c:	08004bdd 	.word	0x08004bdd
 8004b20:	08004bdd 	.word	0x08004bdd
 8004b24:	08004bdd 	.word	0x08004bdd
 8004b28:	08004bdd 	.word	0x08004bdd
 8004b2c:	08004bb1 	.word	0x08004bb1
 8004b30:	08004bdd 	.word	0x08004bdd
 8004b34:	08004bdd 	.word	0x08004bdd
 8004b38:	08004bdd 	.word	0x08004bdd
 8004b3c:	08004bdd 	.word	0x08004bdd
 8004b40:	08004bdd 	.word	0x08004bdd
 8004b44:	08004bdd 	.word	0x08004bdd
 8004b48:	08004bdd 	.word	0x08004bdd
 8004b4c:	08004bc7 	.word	0x08004bc7
 8004b50:	08004bdd 	.word	0x08004bdd
 8004b54:	08004bdd 	.word	0x08004bdd
 8004b58:	08004bdd 	.word	0x08004bdd
 8004b5c:	08004bdd 	.word	0x08004bdd
 8004b60:	08004bdd 	.word	0x08004bdd
 8004b64:	08004bdd 	.word	0x08004bdd
 8004b68:	08004bdd 	.word	0x08004bdd
 8004b6c:	08004be5 	.word	0x08004be5
 8004b70:	08004bdd 	.word	0x08004bdd
 8004b74:	08004bdd 	.word	0x08004bdd
 8004b78:	08004bdd 	.word	0x08004bdd
 8004b7c:	08004bdd 	.word	0x08004bdd
 8004b80:	08004bdd 	.word	0x08004bdd
 8004b84:	08004bdd 	.word	0x08004bdd
 8004b88:	08004bdd 	.word	0x08004bdd
 8004b8c:	08004be5 	.word	0x08004be5
 8004b90:	08004bdd 	.word	0x08004bdd
 8004b94:	08004bdd 	.word	0x08004bdd
 8004b98:	08004bdd 	.word	0x08004bdd
 8004b9c:	08004bdd 	.word	0x08004bdd
 8004ba0:	08004bdd 	.word	0x08004bdd
 8004ba4:	08004bdd 	.word	0x08004bdd
 8004ba8:	08004bdd 	.word	0x08004bdd
 8004bac:	08004be5 	.word	0x08004be5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f001 fe79 	bl	80068b0 <RCCEx_PLL2_Config>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004bc4:	e00f      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bca:	3328      	adds	r3, #40	@ 0x28
 8004bcc:	2101      	movs	r1, #1
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f001 ff20 	bl	8006a14 <RCCEx_PLL3_Config>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004bda:	e004      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004be2:	e000      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004bee:	4bbf      	ldr	r3, [pc, #764]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bfc:	4abb      	ldr	r2, [pc, #748]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bfe:	430b      	orrs	r3, r1
 8004c00:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c02:	e003      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	f002 0302 	and.w	r3, r2, #2
 8004c18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c22:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	d041      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c32:	2b05      	cmp	r3, #5
 8004c34:	d824      	bhi.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004c36:	a201      	add	r2, pc, #4	@ (adr r2, 8004c3c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3c:	08004c89 	.word	0x08004c89
 8004c40:	08004c55 	.word	0x08004c55
 8004c44:	08004c6b 	.word	0x08004c6b
 8004c48:	08004c89 	.word	0x08004c89
 8004c4c:	08004c89 	.word	0x08004c89
 8004c50:	08004c89 	.word	0x08004c89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c58:	3308      	adds	r3, #8
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f001 fe27 	bl	80068b0 <RCCEx_PLL2_Config>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c68:	e00f      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c6e:	3328      	adds	r3, #40	@ 0x28
 8004c70:	2101      	movs	r1, #1
 8004c72:	4618      	mov	r0, r3
 8004c74:	f001 fece 	bl	8006a14 <RCCEx_PLL3_Config>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c7e:	e004      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c86:	e000      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004c92:	4b96      	ldr	r3, [pc, #600]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c96:	f023 0107 	bic.w	r1, r3, #7
 8004c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ca0:	4a92      	ldr	r2, [pc, #584]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ca6:	e003      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	f002 0304 	and.w	r3, r2, #4
 8004cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004cc6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	d044      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cd8:	2b05      	cmp	r3, #5
 8004cda:	d825      	bhi.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004d31 	.word	0x08004d31
 8004ce8:	08004cfd 	.word	0x08004cfd
 8004cec:	08004d13 	.word	0x08004d13
 8004cf0:	08004d31 	.word	0x08004d31
 8004cf4:	08004d31 	.word	0x08004d31
 8004cf8:	08004d31 	.word	0x08004d31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d00:	3308      	adds	r3, #8
 8004d02:	2101      	movs	r1, #1
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 fdd3 	bl	80068b0 <RCCEx_PLL2_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004d10:	e00f      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d16:	3328      	adds	r3, #40	@ 0x28
 8004d18:	2101      	movs	r1, #1
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f001 fe7a 	bl	8006a14 <RCCEx_PLL3_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004d26:	e004      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d2e:	e000      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10b      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d3a:	4b6c      	ldr	r3, [pc, #432]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3e:	f023 0107 	bic.w	r1, r3, #7
 8004d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d4a:	4a68      	ldr	r2, [pc, #416]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d50:	e003      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d56:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f002 0320 	and.w	r3, r2, #32
 8004d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004d70:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4313      	orrs	r3, r2
 8004d78:	d055      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d86:	d033      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d8c:	d82c      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d92:	d02f      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d98:	d826      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d9e:	d02b      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004da0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004da4:	d820      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004da6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004daa:	d012      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004dac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004db0:	d81a      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d022      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004db6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dba:	d115      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 fd73 	bl	80068b0 <RCCEx_PLL2_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004dd0:	e015      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dd6:	3328      	adds	r3, #40	@ 0x28
 8004dd8:	2102      	movs	r1, #2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 fe1a 	bl	8006a14 <RCCEx_PLL3_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004de6:	e00a      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004dee:	e006      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004df0:	bf00      	nop
 8004df2:	e004      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004df4:	bf00      	nop
 8004df6:	e002      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004df8:	bf00      	nop
 8004dfa:	e000      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10b      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e06:	4b39      	ldr	r3, [pc, #228]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e16:	4a35      	ldr	r2, [pc, #212]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e1c:	e003      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004e32:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e36:	2300      	movs	r3, #0
 8004e38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e3c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004e40:	460b      	mov	r3, r1
 8004e42:	4313      	orrs	r3, r2
 8004e44:	d058      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004e52:	d033      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004e54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004e58:	d82c      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e5e:	d02f      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e64:	d826      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004e66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e6a:	d02b      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004e6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e70:	d820      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004e72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e76:	d012      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004e78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e7c:	d81a      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d022      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e86:	d115      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e8c:	3308      	adds	r3, #8
 8004e8e:	2100      	movs	r1, #0
 8004e90:	4618      	mov	r0, r3
 8004e92:	f001 fd0d 	bl	80068b0 <RCCEx_PLL2_Config>
 8004e96:	4603      	mov	r3, r0
 8004e98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004e9c:	e015      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ea2:	3328      	adds	r3, #40	@ 0x28
 8004ea4:	2102      	movs	r1, #2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f001 fdb4 	bl	8006a14 <RCCEx_PLL3_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004eb2:	e00a      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004eba:	e006      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004ebc:	bf00      	nop
 8004ebe:	e004      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004ec0:	bf00      	nop
 8004ec2:	e002      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004ec4:	bf00      	nop
 8004ec6:	e000      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10e      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ed2:	4b06      	ldr	r3, [pc, #24]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ede:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ee2:	4a02      	ldr	r2, [pc, #8]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ee8:	e006      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004eea:	bf00      	nop
 8004eec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ef4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004f04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f0e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004f12:	460b      	mov	r3, r1
 8004f14:	4313      	orrs	r3, r2
 8004f16:	d055      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f20:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004f24:	d033      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004f26:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004f2a:	d82c      	bhi.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004f2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f30:	d02f      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004f32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f36:	d826      	bhi.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004f38:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004f3c:	d02b      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004f3e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004f42:	d820      	bhi.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004f44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f48:	d012      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004f4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f4e:	d81a      	bhi.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d022      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f58:	d115      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f5e:	3308      	adds	r3, #8
 8004f60:	2100      	movs	r1, #0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f001 fca4 	bl	80068b0 <RCCEx_PLL2_Config>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f6e:	e015      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f74:	3328      	adds	r3, #40	@ 0x28
 8004f76:	2102      	movs	r1, #2
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f001 fd4b 	bl	8006a14 <RCCEx_PLL3_Config>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f84:	e00a      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f8c:	e006      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f8e:	bf00      	nop
 8004f90:	e004      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f92:	bf00      	nop
 8004f94:	e002      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f96:	bf00      	nop
 8004f98:	e000      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10b      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004fa4:	4bbb      	ldr	r3, [pc, #748]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004fb4:	4ab7      	ldr	r2, [pc, #732]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004fb6:	430b      	orrs	r3, r1
 8004fb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fba:	e003      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f002 0308 	and.w	r3, r2, #8
 8004fd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004fda:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	d01e      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ff0:	d10c      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ff6:	3328      	adds	r3, #40	@ 0x28
 8004ff8:	2102      	movs	r1, #2
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f001 fd0a 	bl	8006a14 <RCCEx_PLL3_Config>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800500c:	4ba1      	ldr	r3, [pc, #644]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800500e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005010:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800501c:	4a9d      	ldr	r2, [pc, #628]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800501e:	430b      	orrs	r3, r1
 8005020:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	f002 0310 	and.w	r3, r2, #16
 800502e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005032:	2300      	movs	r3, #0
 8005034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005038:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800503c:	460b      	mov	r3, r1
 800503e:	4313      	orrs	r3, r2
 8005040:	d01e      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005042:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005046:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800504a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800504e:	d10c      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005054:	3328      	adds	r3, #40	@ 0x28
 8005056:	2102      	movs	r1, #2
 8005058:	4618      	mov	r0, r3
 800505a:	f001 fcdb 	bl	8006a14 <RCCEx_PLL3_Config>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800506a:	4b8a      	ldr	r3, [pc, #552]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800506c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800506e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005076:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800507a:	4a86      	ldr	r2, [pc, #536]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800507c:	430b      	orrs	r3, r1
 800507e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005080:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800508c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800508e:	2300      	movs	r3, #0
 8005090:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005092:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005096:	460b      	mov	r3, r1
 8005098:	4313      	orrs	r3, r2
 800509a:	d03e      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800509c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050a8:	d022      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80050aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050ae:	d81b      	bhi.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b8:	d00b      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80050ba:	e015      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050c0:	3308      	adds	r3, #8
 80050c2:	2100      	movs	r1, #0
 80050c4:	4618      	mov	r0, r3
 80050c6:	f001 fbf3 	bl	80068b0 <RCCEx_PLL2_Config>
 80050ca:	4603      	mov	r3, r0
 80050cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80050d0:	e00f      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050d6:	3328      	adds	r3, #40	@ 0x28
 80050d8:	2102      	movs	r1, #2
 80050da:	4618      	mov	r0, r3
 80050dc:	f001 fc9a 	bl	8006a14 <RCCEx_PLL3_Config>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80050e6:	e004      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80050ee:	e000      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80050f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050fa:	4b66      	ldr	r3, [pc, #408]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80050fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005106:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800510a:	4a62      	ldr	r2, [pc, #392]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800510c:	430b      	orrs	r3, r1
 800510e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005110:	e003      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005112:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005116:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800511a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005122:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005126:	673b      	str	r3, [r7, #112]	@ 0x70
 8005128:	2300      	movs	r3, #0
 800512a:	677b      	str	r3, [r7, #116]	@ 0x74
 800512c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005130:	460b      	mov	r3, r1
 8005132:	4313      	orrs	r3, r2
 8005134:	d03b      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005142:	d01f      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
 8005144:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005148:	d818      	bhi.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xfc8>
 800514a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800514e:	d003      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
 8005150:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005154:	d007      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xfb2>
 8005156:	e011      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xfc8>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005158:	4b4e      	ldr	r3, [pc, #312]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800515a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515c:	4a4d      	ldr	r2, [pc, #308]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800515e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005164:	e00f      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xfd2>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800516a:	3328      	adds	r3, #40	@ 0x28
 800516c:	2101      	movs	r1, #1
 800516e:	4618      	mov	r0, r3
 8005170:	f001 fc50 	bl	8006a14 <RCCEx_PLL3_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800517a:	e004      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005182:	e000      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        break;
 8005184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005186:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10b      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xff2>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800518e:	4b41      	ldr	r3, [pc, #260]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8005190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005192:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005196:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519e:	4a3d      	ldr	r2, [pc, #244]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80051a0:	430b      	orrs	r3, r1
 80051a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80051a4:	e003      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xffa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80051ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80051ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051bc:	2300      	movs	r3, #0
 80051be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80051c4:	460b      	mov	r3, r1
 80051c6:	4313      	orrs	r3, r2
 80051c8:	d031      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x107a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80051ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x1028>
 80051d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d8:	d007      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1036>
 80051da:	e011      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x104c>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80051de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80051e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80051e8:	e00e      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051ee:	3308      	adds	r3, #8
 80051f0:	2102      	movs	r1, #2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f001 fb5c 	bl	80068b0 <RCCEx_PLL2_Config>
 80051f8:	4603      	mov	r3, r0
 80051fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80051fe:	e003      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      default:
        ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005208:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x1072>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005210:	4b20      	ldr	r3, [pc, #128]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8005212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005214:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800521c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800521e:	4a1d      	ldr	r2, [pc, #116]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8005220:	430b      	orrs	r3, r1
 8005222:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005224:	e003      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x107a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005226:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800522a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800522e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005236:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800523a:	663b      	str	r3, [r7, #96]	@ 0x60
 800523c:	2300      	movs	r3, #0
 800523e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005240:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005244:	460b      	mov	r3, r1
 8005246:	4313      	orrs	r3, r2
 8005248:	d03b      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
  {

    switch (PeriphClkInit->RngClockSelection)
 800524a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800524e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005252:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005256:	d018      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x10d6>
 8005258:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800525c:	d811      	bhi.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 800525e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005262:	d014      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x10da>
 8005264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005268:	d80b      	bhi.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d014      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x10e4>
 800526e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005272:	d106      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x10ce>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005274:	4b07      	ldr	r3, [pc, #28]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	4a06      	ldr	r2, [pc, #24]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800527a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800527e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005280:	e00b      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005288:	e007      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 800528a:	bf00      	nop
 800528c:	e005      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 800528e:	bf00      	nop
 8005290:	e003      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x10e6>
 8005292:	bf00      	nop
 8005294:	58024400 	.word	0x58024400
        break;
 8005298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800529a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10b      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x1106>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052a2:	4bba      	ldr	r3, [pc, #744]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80052a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80052aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052b2:	4ab6      	ldr	r2, [pc, #728]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80052b4:	430b      	orrs	r3, r1
 80052b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80052b8:	e003      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ca:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80052ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052d0:	2300      	movs	r3, #0
 80052d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052d4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80052d8:	460b      	mov	r3, r1
 80052da:	4313      	orrs	r3, r2
 80052dc:	d009      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052de:	4bab      	ldr	r3, [pc, #684]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80052e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e2:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80052e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ec:	4aa7      	ldr	r2, [pc, #668]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80052ee:	430b      	orrs	r3, r1
 80052f0:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80052f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80052fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005300:	2300      	movs	r3, #0
 8005302:	657b      	str	r3, [r7, #84]	@ 0x54
 8005304:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005308:	460b      	mov	r3, r1
 800530a:	4313      	orrs	r3, r2
 800530c:	d00a      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x1170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800530e:	4b9f      	ldr	r3, [pc, #636]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800531a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800531e:	4a9b      	ldr	r2, [pc, #620]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8005320:	430b      	orrs	r3, r1
 8005322:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005330:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005332:	2300      	movs	r3, #0
 8005334:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005336:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800533a:	460b      	mov	r3, r1
 800533c:	4313      	orrs	r3, r2
 800533e:	d009      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005340:	4b92      	ldr	r3, [pc, #584]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8005342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005344:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005348:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800534c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800534e:	4a8f      	ldr	r2, [pc, #572]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8005350:	430b      	orrs	r3, r1
 8005352:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005360:	643b      	str	r3, [r7, #64]	@ 0x40
 8005362:	2300      	movs	r3, #0
 8005364:	647b      	str	r3, [r7, #68]	@ 0x44
 8005366:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800536a:	460b      	mov	r3, r1
 800536c:	4313      	orrs	r3, r2
 800536e:	d00e      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005370:	4b86      	ldr	r3, [pc, #536]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	4a85      	ldr	r2, [pc, #532]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8005376:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800537a:	6113      	str	r3, [r2, #16]
 800537c:	4b83      	ldr	r3, [pc, #524]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800537e:	6919      	ldr	r1, [r3, #16]
 8005380:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005384:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005388:	4a80      	ldr	r2, [pc, #512]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800538a:	430b      	orrs	r3, r1
 800538c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800538e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005396:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800539a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800539c:	2300      	movs	r3, #0
 800539e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80053a4:	460b      	mov	r3, r1
 80053a6:	4313      	orrs	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x120a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80053aa:	4b78      	ldr	r3, [pc, #480]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80053ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80053b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b8:	4a74      	ldr	r2, [pc, #464]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80053ba:	430b      	orrs	r3, r1
 80053bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80053ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80053cc:	2300      	movs	r3, #0
 80053ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80053d4:	460b      	mov	r3, r1
 80053d6:	4313      	orrs	r3, r2
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x123c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053da:	4b6c      	ldr	r3, [pc, #432]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80053dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053de:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80053e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053ea:	4a68      	ldr	r2, [pc, #416]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80053ec:	430b      	orrs	r3, r1
 80053ee:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80053f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	2100      	movs	r1, #0
 80053fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005402:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005406:	460b      	mov	r3, r1
 8005408:	4313      	orrs	r3, r2
 800540a:	d011      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x127c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800540c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005410:	3308      	adds	r3, #8
 8005412:	2100      	movs	r1, #0
 8005414:	4618      	mov	r0, r3
 8005416:	f001 fa4b 	bl	80068b0 <RCCEx_PLL2_Config>
 800541a:	4603      	mov	r3, r0
 800541c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005420:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x127c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005428:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800542c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005430:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	2100      	movs	r1, #0
 800543a:	6239      	str	r1, [r7, #32]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	627b      	str	r3, [r7, #36]	@ 0x24
 8005442:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005446:	460b      	mov	r3, r1
 8005448:	4313      	orrs	r3, r2
 800544a:	d011      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800544c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005450:	3308      	adds	r3, #8
 8005452:	2101      	movs	r1, #1
 8005454:	4618      	mov	r0, r3
 8005456:	f001 fa2b 	bl	80068b0 <RCCEx_PLL2_Config>
 800545a:	4603      	mov	r3, r0
 800545c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005460:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005468:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800546c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	2100      	movs	r1, #0
 800547a:	61b9      	str	r1, [r7, #24]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	61fb      	str	r3, [r7, #28]
 8005482:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005486:	460b      	mov	r3, r1
 8005488:	4313      	orrs	r3, r2
 800548a:	d011      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800548c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005490:	3308      	adds	r3, #8
 8005492:	2102      	movs	r1, #2
 8005494:	4618      	mov	r0, r3
 8005496:	f001 fa0b 	bl	80068b0 <RCCEx_PLL2_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80054a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80054b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	2100      	movs	r1, #0
 80054ba:	6139      	str	r1, [r7, #16]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80054c6:	460b      	mov	r3, r1
 80054c8:	4313      	orrs	r3, r2
 80054ca:	d011      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054d0:	3328      	adds	r3, #40	@ 0x28
 80054d2:	2100      	movs	r1, #0
 80054d4:	4618      	mov	r0, r3
 80054d6:	f001 fa9d 	bl	8006a14 <RCCEx_PLL3_Config>
 80054da:	4603      	mov	r3, r0
 80054dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80054e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80054f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	2100      	movs	r1, #0
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005506:	460b      	mov	r3, r1
 8005508:	4313      	orrs	r3, r2
 800550a:	d011      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x137c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800550c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005510:	3328      	adds	r3, #40	@ 0x28
 8005512:	2101      	movs	r1, #1
 8005514:	4618      	mov	r0, r3
 8005516:	f001 fa7d 	bl	8006a14 <RCCEx_PLL3_Config>
 800551a:	4603      	mov	r3, r0
 800551c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005520:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x137c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005528:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800552c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	2100      	movs	r1, #0
 800553a:	6039      	str	r1, [r7, #0]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	607b      	str	r3, [r7, #4]
 8005542:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005546:	460b      	mov	r3, r1
 8005548:	4313      	orrs	r3, r2
 800554a:	d011      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800554c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005550:	3328      	adds	r3, #40	@ 0x28
 8005552:	2102      	movs	r1, #2
 8005554:	4618      	mov	r0, r3
 8005556:	f001 fa5d 	bl	8006a14 <RCCEx_PLL3_Config>
 800555a:	4603      	mov	r3, r0
 800555c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005560:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005568:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800556c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005570:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x13c8>
  {
    return HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	e000      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x13ca>
  }
  return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
}
 800557e:	4618      	mov	r0, r3
 8005580:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005584:	46bd      	mov	sp, r7
 8005586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800558a:	bf00      	nop
 800558c:	58024400 	.word	0x58024400

08005590 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b090      	sub	sp, #64	@ 0x40
 8005594:	af00      	add	r7, sp, #0
 8005596:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800559a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800559e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80055a2:	430b      	orrs	r3, r1
 80055a4:	f040 8094 	bne.w	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80055a8:	4b9e      	ldr	r3, [pc, #632]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80055b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	f200 8087 	bhi.w	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80055ba:	a201      	add	r2, pc, #4	@ (adr r2, 80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	080055d5 	.word	0x080055d5
 80055c4:	080055fd 	.word	0x080055fd
 80055c8:	08005625 	.word	0x08005625
 80055cc:	080056c1 	.word	0x080056c1
 80055d0:	0800564d 	.word	0x0800564d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055d4:	4b93      	ldr	r3, [pc, #588]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055e0:	d108      	bne.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 f810 	bl	800660c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055f0:	f000 bd45 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055f4:	2300      	movs	r3, #0
 80055f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055f8:	f000 bd41 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055fc:	4b89      	ldr	r3, [pc, #548]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005604:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005608:	d108      	bne.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800560a:	f107 0318 	add.w	r3, r7, #24
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fd54 	bl	80060bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005618:	f000 bd31 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005620:	f000 bd2d 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005624:	4b7f      	ldr	r3, [pc, #508]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800562c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005630:	d108      	bne.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005632:	f107 030c 	add.w	r3, r7, #12
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fe94 	bl	8006364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005640:	f000 bd1d 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005644:	2300      	movs	r3, #0
 8005646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005648:	f000 bd19 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800564c:	4b75      	ldr	r3, [pc, #468]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800564e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005650:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005654:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005656:	4b73      	ldr	r3, [pc, #460]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b04      	cmp	r3, #4
 8005660:	d10c      	bne.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005664:	2b00      	cmp	r3, #0
 8005666:	d109      	bne.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005668:	4b6e      	ldr	r3, [pc, #440]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	08db      	lsrs	r3, r3, #3
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	4a6d      	ldr	r2, [pc, #436]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005674:	fa22 f303 	lsr.w	r3, r2, r3
 8005678:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800567a:	e01f      	b.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800567c:	4b69      	ldr	r3, [pc, #420]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005688:	d106      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800568a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005690:	d102      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005692:	4b66      	ldr	r3, [pc, #408]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005696:	e011      	b.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005698:	4b62      	ldr	r3, [pc, #392]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056a4:	d106      	bne.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80056a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056ac:	d102      	bne.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80056ae:	4b60      	ldr	r3, [pc, #384]	@ (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80056b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056b2:	e003      	b.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80056b8:	f000 bce1 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80056bc:	f000 bcdf 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80056c0:	4b5c      	ldr	r3, [pc, #368]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80056c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056c4:	f000 bcdb 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056cc:	f000 bcd7 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80056d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056d4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80056d8:	430b      	orrs	r3, r1
 80056da:	f040 80ad 	bne.w	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80056de:	4b51      	ldr	r3, [pc, #324]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80056e6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80056e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056ee:	d056      	beq.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80056f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056f6:	f200 8090 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80056fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fc:	2bc0      	cmp	r3, #192	@ 0xc0
 80056fe:	f000 8088 	beq.w	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005704:	2bc0      	cmp	r3, #192	@ 0xc0
 8005706:	f200 8088 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800570a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570c:	2b80      	cmp	r3, #128	@ 0x80
 800570e:	d032      	beq.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005712:	2b80      	cmp	r3, #128	@ 0x80
 8005714:	f200 8081 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800571e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005720:	2b40      	cmp	r3, #64	@ 0x40
 8005722:	d014      	beq.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005724:	e079      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005726:	4b3f      	ldr	r3, [pc, #252]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800572e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005732:	d108      	bne.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005738:	4618      	mov	r0, r3
 800573a:	f000 ff67 	bl	800660c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005742:	f000 bc9c 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005746:	2300      	movs	r3, #0
 8005748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800574a:	f000 bc98 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800574e:	4b35      	ldr	r3, [pc, #212]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005756:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800575a:	d108      	bne.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800575c:	f107 0318 	add.w	r3, r7, #24
 8005760:	4618      	mov	r0, r3
 8005762:	f000 fcab 	bl	80060bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800576a:	f000 bc88 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005772:	f000 bc84 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005776:	4b2b      	ldr	r3, [pc, #172]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800577e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005782:	d108      	bne.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005784:	f107 030c 	add.w	r3, r7, #12
 8005788:	4618      	mov	r0, r3
 800578a:	f000 fdeb 	bl	8006364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005792:	f000 bc74 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800579a:	f000 bc70 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800579e:	4b21      	ldr	r3, [pc, #132]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80057a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d10c      	bne.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80057b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	08db      	lsrs	r3, r3, #3
 80057c0:	f003 0303 	and.w	r3, r3, #3
 80057c4:	4a18      	ldr	r2, [pc, #96]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80057c6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057cc:	e01f      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057ce:	4b15      	ldr	r3, [pc, #84]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057da:	d106      	bne.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80057dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057e2:	d102      	bne.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80057e4:	4b11      	ldr	r3, [pc, #68]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80057e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057e8:	e011      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057f6:	d106      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80057f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057fe:	d102      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005800:	4b0b      	ldr	r3, [pc, #44]	@ (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005804:	e003      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800580a:	f000 bc38 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800580e:	f000 bc36 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005812:	4b08      	ldr	r3, [pc, #32]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005816:	f000 bc32 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800581e:	f000 bc2e 	b.w	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005822:	bf00      	nop
 8005824:	58024400 	.word	0x58024400
 8005828:	03d09000 	.word	0x03d09000
 800582c:	003d0900 	.word	0x003d0900
 8005830:	017d7840 	.word	0x017d7840
 8005834:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800583c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005840:	430b      	orrs	r3, r1
 8005842:	f040 809c 	bne.w	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005846:	4b9e      	ldr	r3, [pc, #632]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800584a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800584e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005852:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005856:	d054      	beq.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800585e:	f200 808b 	bhi.w	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005864:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005868:	f000 8083 	beq.w	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800586c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005872:	f200 8081 	bhi.w	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005878:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800587c:	d02f      	beq.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005884:	d878      	bhi.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800588c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005892:	d012      	beq.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005894:	e070      	b.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005896:	4b8a      	ldr	r3, [pc, #552]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800589e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058a2:	d107      	bne.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 feaf 	bl	800660c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058b2:	e3e4      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058b8:	e3e1      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058ba:	4b81      	ldr	r3, [pc, #516]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058c6:	d107      	bne.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058c8:	f107 0318 	add.w	r3, r7, #24
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fbf5 	bl	80060bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058d6:	e3d2      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058d8:	2300      	movs	r3, #0
 80058da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058dc:	e3cf      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058de:	4b78      	ldr	r3, [pc, #480]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058ea:	d107      	bne.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058ec:	f107 030c 	add.w	r3, r7, #12
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fd37 	bl	8006364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058fa:	e3c0      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005900:	e3bd      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005902:	4b6f      	ldr	r3, [pc, #444]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005906:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800590a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800590c:	4b6c      	ldr	r3, [pc, #432]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b04      	cmp	r3, #4
 8005916:	d10c      	bne.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800591e:	4b68      	ldr	r3, [pc, #416]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	08db      	lsrs	r3, r3, #3
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	4a66      	ldr	r2, [pc, #408]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800592a:	fa22 f303 	lsr.w	r3, r2, r3
 800592e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005930:	e01e      	b.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005932:	4b63      	ldr	r3, [pc, #396]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800593a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800593e:	d106      	bne.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005942:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005946:	d102      	bne.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005948:	4b5f      	ldr	r3, [pc, #380]	@ (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800594a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800594c:	e010      	b.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800594e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005956:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800595a:	d106      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800595c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005962:	d102      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005964:	4b59      	ldr	r3, [pc, #356]	@ (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005966:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005968:	e002      	b.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800596e:	e386      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005970:	e385      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005972:	4b57      	ldr	r3, [pc, #348]	@ (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005976:	e382      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800597c:	e37f      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800597e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005982:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005986:	430b      	orrs	r3, r1
 8005988:	f040 80a7 	bne.w	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800598c:	4b4c      	ldr	r3, [pc, #304]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800598e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005990:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005994:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005998:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800599c:	d055      	beq.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800599e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059a4:	f200 8096 	bhi.w	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80059a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059ae:	f000 8084 	beq.w	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059b8:	f200 808c 	bhi.w	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80059bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059c2:	d030      	beq.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80059c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059ca:	f200 8083 	bhi.w	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80059ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d004      	beq.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80059d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059da:	d012      	beq.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80059dc:	e07a      	b.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059de:	4b38      	ldr	r3, [pc, #224]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059ea:	d107      	bne.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fe0b 	bl	800660c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059fa:	e340      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a00:	e33d      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a02:	4b2f      	ldr	r3, [pc, #188]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a0e:	d107      	bne.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a10:	f107 0318 	add.w	r3, r7, #24
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fb51 	bl	80060bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a1e:	e32e      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a20:	2300      	movs	r3, #0
 8005a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a24:	e32b      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a26:	4b26      	ldr	r3, [pc, #152]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a32:	d107      	bne.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a34:	f107 030c 	add.w	r3, r7, #12
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fc93 	bl	8006364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a42:	e31c      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a44:	2300      	movs	r3, #0
 8005a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a48:	e319      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a52:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a54:	4b1a      	ldr	r3, [pc, #104]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d10c      	bne.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d109      	bne.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a66:	4b16      	ldr	r3, [pc, #88]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	08db      	lsrs	r3, r3, #3
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	4a14      	ldr	r2, [pc, #80]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005a72:	fa22 f303 	lsr.w	r3, r2, r3
 8005a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a78:	e01e      	b.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a7a:	4b11      	ldr	r3, [pc, #68]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a86:	d106      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a8e:	d102      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a90:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a94:	e010      	b.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a96:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005aa2:	d106      	bne.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aaa:	d102      	bne.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005aac:	4b07      	ldr	r3, [pc, #28]	@ (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ab0:	e002      	b.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005ab6:	e2e2      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005ab8:	e2e1      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005aba:	4b05      	ldr	r3, [pc, #20]	@ (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005abe:	e2de      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005ac0:	58024400 	.word	0x58024400
 8005ac4:	03d09000 	.word	0x03d09000
 8005ac8:	003d0900 	.word	0x003d0900
 8005acc:	017d7840 	.word	0x017d7840
 8005ad0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ad8:	e2d1      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005ada:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ade:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005ae2:	430b      	orrs	r3, r1
 8005ae4:	f040 809c 	bne.w	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005ae8:	4b93      	ldr	r3, [pc, #588]	@ (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aec:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005af0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005af8:	d054      	beq.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b00:	f200 808b 	bhi.w	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b0a:	f000 8083 	beq.w	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b14:	f200 8081 	bhi.w	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b1e:	d02f      	beq.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b26:	d878      	bhi.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d004      	beq.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b34:	d012      	beq.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005b36:	e070      	b.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b38:	4b7f      	ldr	r3, [pc, #508]	@ (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b44:	d107      	bne.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fd5e 	bl	800660c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b54:	e293      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b5a:	e290      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b5c:	4b76      	ldr	r3, [pc, #472]	@ (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b68:	d107      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b6a:	f107 0318 	add.w	r3, r7, #24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 faa4 	bl	80060bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b78:	e281      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b7e:	e27e      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b80:	4b6d      	ldr	r3, [pc, #436]	@ (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b8c:	d107      	bne.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b8e:	f107 030c 	add.w	r3, r7, #12
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fbe6 	bl	8006364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b9c:	e26f      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ba2:	e26c      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ba4:	4b64      	ldr	r3, [pc, #400]	@ (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ba8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005bac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005bae:	4b62      	ldr	r3, [pc, #392]	@ (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bc0:	4b5d      	ldr	r3, [pc, #372]	@ (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	08db      	lsrs	r3, r3, #3
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	4a5c      	ldr	r2, [pc, #368]	@ (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bd2:	e01e      	b.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bd4:	4b58      	ldr	r3, [pc, #352]	@ (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005be0:	d106      	bne.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005be8:	d102      	bne.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005bea:	4b55      	ldr	r3, [pc, #340]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bee:	e010      	b.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bf0:	4b51      	ldr	r3, [pc, #324]	@ (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bfc:	d106      	bne.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c04:	d102      	bne.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c06:	4b4f      	ldr	r3, [pc, #316]	@ (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c0a:	e002      	b.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005c10:	e235      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c12:	e234      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005c14:	4b4c      	ldr	r3, [pc, #304]	@ (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c18:	e231      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c1e:	e22e      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c24:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005c28:	430b      	orrs	r3, r1
 8005c2a:	f040 808f 	bne.w	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005c2e:	4b42      	ldr	r3, [pc, #264]	@ (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c32:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005c36:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c3e:	d06b      	beq.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c46:	d874      	bhi.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c4e:	d056      	beq.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c56:	d86c      	bhi.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c5e:	d03b      	beq.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c66:	d864      	bhi.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c6e:	d021      	beq.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c76:	d85c      	bhi.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d004      	beq.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c84:	d004      	beq.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005c86:	e054      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005c88:	f7fe fa7e 	bl	8004188 <HAL_RCC_GetPCLK1Freq>
 8005c8c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c8e:	e1f6      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c90:	4b29      	ldr	r3, [pc, #164]	@ (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c9c:	d107      	bne.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c9e:	f107 0318 	add.w	r3, r7, #24
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fa0a 	bl	80060bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cac:	e1e7      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cb2:	e1e4      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cb4:	4b20      	ldr	r3, [pc, #128]	@ (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cc0:	d107      	bne.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cc2:	f107 030c 	add.w	r3, r7, #12
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fb4c 	bl	8006364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cd0:	e1d5      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cd6:	e1d2      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cd8:	4b17      	ldr	r3, [pc, #92]	@ (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d109      	bne.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ce4:	4b14      	ldr	r3, [pc, #80]	@ (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	08db      	lsrs	r3, r3, #3
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	4a13      	ldr	r2, [pc, #76]	@ (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cf6:	e1c2      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cfc:	e1bf      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d0a:	d102      	bne.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d10:	e1b5      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d16:	e1b2      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d18:	4b07      	ldr	r3, [pc, #28]	@ (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d24:	d102      	bne.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005d26:	4b07      	ldr	r3, [pc, #28]	@ (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d2a:	e1a8      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d30:	e1a5      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005d32:	2300      	movs	r3, #0
 8005d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d36:	e1a2      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005d38:	58024400 	.word	0x58024400
 8005d3c:	03d09000 	.word	0x03d09000
 8005d40:	003d0900 	.word	0x003d0900
 8005d44:	017d7840 	.word	0x017d7840
 8005d48:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d50:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005d54:	430b      	orrs	r3, r1
 8005d56:	d173      	bne.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005d58:	4b9c      	ldr	r3, [pc, #624]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d60:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d68:	d02f      	beq.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d70:	d863      	bhi.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d004      	beq.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d7e:	d012      	beq.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005d80:	e05b      	b.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d82:	4b92      	ldr	r3, [pc, #584]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d8e:	d107      	bne.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d90:	f107 0318 	add.w	r3, r7, #24
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 f991 	bl	80060bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d9e:	e16e      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005da4:	e16b      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005da6:	4b89      	ldr	r3, [pc, #548]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005dae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005db2:	d107      	bne.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005db4:	f107 030c 	add.w	r3, r7, #12
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fad3 	bl	8006364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dc2:	e15c      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dc8:	e159      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005dca:	4b80      	ldr	r3, [pc, #512]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005dd2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005dd4:	4b7d      	ldr	r3, [pc, #500]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d10c      	bne.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005de6:	4b79      	ldr	r3, [pc, #484]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	08db      	lsrs	r3, r3, #3
 8005dec:	f003 0303 	and.w	r3, r3, #3
 8005df0:	4a77      	ldr	r2, [pc, #476]	@ (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005df2:	fa22 f303 	lsr.w	r3, r2, r3
 8005df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005df8:	e01e      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005dfa:	4b74      	ldr	r3, [pc, #464]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e06:	d106      	bne.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e0e:	d102      	bne.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e10:	4b70      	ldr	r3, [pc, #448]	@ (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e14:	e010      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e16:	4b6d      	ldr	r3, [pc, #436]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e22:	d106      	bne.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e2a:	d102      	bne.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e30:	e002      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005e36:	e122      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005e38:	e121      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e3e:	e11e      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e44:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	d133      	bne.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005e4c:	4b5f      	ldr	r3, [pc, #380]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e54:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d004      	beq.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e62:	d012      	beq.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005e64:	e023      	b.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e66:	4b59      	ldr	r3, [pc, #356]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e72:	d107      	bne.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 fbc7 	bl	800660c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e82:	e0fc      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e88:	e0f9      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e8a:	4b50      	ldr	r3, [pc, #320]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e96:	d107      	bne.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e98:	f107 0318 	add.w	r3, r7, #24
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 f90d 	bl	80060bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ea6:	e0ea      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eac:	e0e7      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eb2:	e0e4      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005eb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eb8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	f040 808d 	bne.w	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005ec2:	4b42      	ldr	r3, [pc, #264]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005eca:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ed2:	d06b      	beq.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005eda:	d874      	bhi.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee2:	d056      	beq.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eea:	d86c      	bhi.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ef2:	d03b      	beq.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005efa:	d864      	bhi.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f02:	d021      	beq.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f0a:	d85c      	bhi.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d004      	beq.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f18:	d004      	beq.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005f1a:	e054      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005f1c:	f000 f8b8 	bl	8006090 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f20:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f22:	e0ac      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f24:	4b29      	ldr	r3, [pc, #164]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f30:	d107      	bne.n	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f32:	f107 0318 	add.w	r3, r7, #24
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 f8c0 	bl	80060bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f40:	e09d      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f42:	2300      	movs	r3, #0
 8005f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f46:	e09a      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f48:	4b20      	ldr	r3, [pc, #128]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f54:	d107      	bne.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f56:	f107 030c 	add.w	r3, r7, #12
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 fa02 	bl	8006364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f64:	e08b      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f6a:	e088      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f6c:	4b17      	ldr	r3, [pc, #92]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d109      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f78:	4b14      	ldr	r3, [pc, #80]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	08db      	lsrs	r3, r3, #3
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	4a13      	ldr	r2, [pc, #76]	@ (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
 8005f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f8a:	e078      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f90:	e075      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005f92:	4b0e      	ldr	r3, [pc, #56]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f9e:	d102      	bne.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fa4:	e06b      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005faa:	e068      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fac:	4b07      	ldr	r3, [pc, #28]	@ (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fb8:	d102      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005fba:	4b07      	ldr	r3, [pc, #28]	@ (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fbe:	e05e      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fc4:	e05b      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fca:	e058      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005fcc:	58024400 	.word	0x58024400
 8005fd0:	03d09000 	.word	0x03d09000
 8005fd4:	003d0900 	.word	0x003d0900
 8005fd8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fe0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005fe4:	430b      	orrs	r3, r1
 8005fe6:	d148      	bne.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005fe8:	4b27      	ldr	r3, [pc, #156]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ff0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ff8:	d02a      	beq.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006000:	d838      	bhi.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006004:	2b00      	cmp	r3, #0
 8006006:	d004      	beq.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800600e:	d00d      	beq.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006010:	e030      	b.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006012:	4b1d      	ldr	r3, [pc, #116]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800601a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800601e:	d102      	bne.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006020:	4b1a      	ldr	r3, [pc, #104]	@ (800608c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006024:	e02b      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800602a:	e028      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800602c:	4b16      	ldr	r3, [pc, #88]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006034:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006038:	d107      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800603a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fae4 	bl	800660c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006048:	e019      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800604e:	e016      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006050:	4b0d      	ldr	r3, [pc, #52]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006058:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800605c:	d107      	bne.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800605e:	f107 0318 	add.w	r3, r7, #24
 8006062:	4618      	mov	r0, r3
 8006064:	f000 f82a 	bl	80060bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800606c:	e007      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006072:	e004      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006078:	e001      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800607e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006080:	4618      	mov	r0, r3
 8006082:	3740      	adds	r7, #64	@ 0x40
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	58024400 	.word	0x58024400
 800608c:	017d7840 	.word	0x017d7840

08006090 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006094:	f7fe f848 	bl	8004128 <HAL_RCC_GetHCLKFreq>
 8006098:	4602      	mov	r2, r0
 800609a:	4b06      	ldr	r3, [pc, #24]	@ (80060b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	091b      	lsrs	r3, r3, #4
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	4904      	ldr	r1, [pc, #16]	@ (80060b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80060a6:	5ccb      	ldrb	r3, [r1, r3]
 80060a8:	f003 031f 	and.w	r3, r3, #31
 80060ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	58024400 	.word	0x58024400
 80060b8:	0800722c 	.word	0x0800722c

080060bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80060bc:	b480      	push	{r7}
 80060be:	b089      	sub	sp, #36	@ 0x24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060c4:	4ba1      	ldr	r3, [pc, #644]	@ (800634c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c8:	f003 0303 	and.w	r3, r3, #3
 80060cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80060ce:	4b9f      	ldr	r3, [pc, #636]	@ (800634c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d2:	0b1b      	lsrs	r3, r3, #12
 80060d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80060da:	4b9c      	ldr	r3, [pc, #624]	@ (800634c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060de:	091b      	lsrs	r3, r3, #4
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80060e6:	4b99      	ldr	r3, [pc, #612]	@ (800634c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ea:	08db      	lsrs	r3, r3, #3
 80060ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	fb02 f303 	mul.w	r3, r2, r3
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 8111 	beq.w	800632c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	2b02      	cmp	r3, #2
 800610e:	f000 8083 	beq.w	8006218 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	2b02      	cmp	r3, #2
 8006116:	f200 80a1 	bhi.w	800625c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d056      	beq.n	80061d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006126:	e099      	b.n	800625c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006128:	4b88      	ldr	r3, [pc, #544]	@ (800634c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	2b00      	cmp	r3, #0
 8006132:	d02d      	beq.n	8006190 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006134:	4b85      	ldr	r3, [pc, #532]	@ (800634c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	08db      	lsrs	r3, r3, #3
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	4a84      	ldr	r2, [pc, #528]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006140:	fa22 f303 	lsr.w	r3, r2, r3
 8006144:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	ee07 3a90 	vmov	s15, r3
 800614c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800615e:	4b7b      	ldr	r3, [pc, #492]	@ (800634c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800616e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006172:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800617a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800617e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800618e:	e087      	b.n	80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800619e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a2:	4b6a      	ldr	r3, [pc, #424]	@ (800634c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061d2:	e065      	b.n	80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800635c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061e6:	4b59      	ldr	r3, [pc, #356]	@ (800634c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800620a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800620e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006216:	e043      	b.n	80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006222:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800622a:	4b48      	ldr	r3, [pc, #288]	@ (800634c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800622c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623a:	ed97 6a03 	vldr	s12, [r7, #12]
 800623e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800624e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800625a:	e021      	b.n	80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006266:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800635c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800626a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800626e:	4b37      	ldr	r3, [pc, #220]	@ (800634c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006276:	ee07 3a90 	vmov	s15, r3
 800627a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006282:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800628a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800628e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800629e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80062a0:	4b2a      	ldr	r3, [pc, #168]	@ (800634c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a4:	0a5b      	lsrs	r3, r3, #9
 80062a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80062be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062c6:	ee17 2a90 	vmov	r2, s15
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80062ce:	4b1f      	ldr	r3, [pc, #124]	@ (800634c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d2:	0c1b      	lsrs	r3, r3, #16
 80062d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062d8:	ee07 3a90 	vmov	s15, r3
 80062dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80062ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f4:	ee17 2a90 	vmov	r2, s15
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80062fc:	4b13      	ldr	r3, [pc, #76]	@ (800634c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006300:	0e1b      	lsrs	r3, r3, #24
 8006302:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006312:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006316:	edd7 6a07 	vldr	s13, [r7, #28]
 800631a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800631e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006322:	ee17 2a90 	vmov	r2, s15
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800632a:	e008      	b.n	800633e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	609a      	str	r2, [r3, #8]
}
 800633e:	bf00      	nop
 8006340:	3724      	adds	r7, #36	@ 0x24
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	58024400 	.word	0x58024400
 8006350:	03d09000 	.word	0x03d09000
 8006354:	46000000 	.word	0x46000000
 8006358:	4c742400 	.word	0x4c742400
 800635c:	4a742400 	.word	0x4a742400
 8006360:	4bbebc20 	.word	0x4bbebc20

08006364 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006364:	b480      	push	{r7}
 8006366:	b089      	sub	sp, #36	@ 0x24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800636c:	4ba1      	ldr	r3, [pc, #644]	@ (80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800636e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006370:	f003 0303 	and.w	r3, r3, #3
 8006374:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006376:	4b9f      	ldr	r3, [pc, #636]	@ (80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637a:	0d1b      	lsrs	r3, r3, #20
 800637c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006380:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006382:	4b9c      	ldr	r3, [pc, #624]	@ (80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006386:	0a1b      	lsrs	r3, r3, #8
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800638e:	4b99      	ldr	r3, [pc, #612]	@ (80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006392:	08db      	lsrs	r3, r3, #3
 8006394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	fb02 f303 	mul.w	r3, r2, r3
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 8111 	beq.w	80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	f000 8083 	beq.w	80064c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	f200 80a1 	bhi.w	8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d056      	beq.n	800647c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80063ce:	e099      	b.n	8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063d0:	4b88      	ldr	r3, [pc, #544]	@ (80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0320 	and.w	r3, r3, #32
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d02d      	beq.n	8006438 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063dc:	4b85      	ldr	r3, [pc, #532]	@ (80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	08db      	lsrs	r3, r3, #3
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	4a84      	ldr	r2, [pc, #528]	@ (80065f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80063e8:	fa22 f303 	lsr.w	r3, r2, r3
 80063ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	ee07 3a90 	vmov	s15, r3
 80063f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006406:	4b7b      	ldr	r3, [pc, #492]	@ (80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800640e:	ee07 3a90 	vmov	s15, r3
 8006412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006416:	ed97 6a03 	vldr	s12, [r7, #12]
 800641a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800641e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800642a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800642e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006432:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006436:	e087      	b.n	8006548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006442:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800644a:	4b6a      	ldr	r3, [pc, #424]	@ (80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800644c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800645a:	ed97 6a03 	vldr	s12, [r7, #12]
 800645e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800646a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800646e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800647a:	e065      	b.n	8006548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006486:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800648a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800648e:	4b59      	ldr	r3, [pc, #356]	@ (80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006496:	ee07 3a90 	vmov	s15, r3
 800649a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800649e:	ed97 6a03 	vldr	s12, [r7, #12]
 80064a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064be:	e043      	b.n	8006548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80064ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064d2:	4b48      	ldr	r3, [pc, #288]	@ (80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064da:	ee07 3a90 	vmov	s15, r3
 80064de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80064e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006502:	e021      	b.n	8006548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006516:	4b37      	ldr	r3, [pc, #220]	@ (80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006526:	ed97 6a03 	vldr	s12, [r7, #12]
 800652a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800652e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800653a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800653e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006546:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006548:	4b2a      	ldr	r3, [pc, #168]	@ (80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800654a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654c:	0a5b      	lsrs	r3, r3, #9
 800654e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800655e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006562:	edd7 6a07 	vldr	s13, [r7, #28]
 8006566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800656a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800656e:	ee17 2a90 	vmov	r2, s15
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006576:	4b1f      	ldr	r3, [pc, #124]	@ (80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657a:	0c1b      	lsrs	r3, r3, #16
 800657c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006580:	ee07 3a90 	vmov	s15, r3
 8006584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006588:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800658c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006590:	edd7 6a07 	vldr	s13, [r7, #28]
 8006594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800659c:	ee17 2a90 	vmov	r2, s15
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80065a4:	4b13      	ldr	r3, [pc, #76]	@ (80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a8:	0e1b      	lsrs	r3, r3, #24
 80065aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ae:	ee07 3a90 	vmov	s15, r3
 80065b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065be:	edd7 6a07 	vldr	s13, [r7, #28]
 80065c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ca:	ee17 2a90 	vmov	r2, s15
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80065d2:	e008      	b.n	80065e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	609a      	str	r2, [r3, #8]
}
 80065e6:	bf00      	nop
 80065e8:	3724      	adds	r7, #36	@ 0x24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	58024400 	.word	0x58024400
 80065f8:	03d09000 	.word	0x03d09000
 80065fc:	46000000 	.word	0x46000000
 8006600:	4c742400 	.word	0x4c742400
 8006604:	4a742400 	.word	0x4a742400
 8006608:	4bbebc20 	.word	0x4bbebc20

0800660c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800660c:	b480      	push	{r7}
 800660e:	b089      	sub	sp, #36	@ 0x24
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006614:	4ba0      	ldr	r3, [pc, #640]	@ (8006898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006618:	f003 0303 	and.w	r3, r3, #3
 800661c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800661e:	4b9e      	ldr	r3, [pc, #632]	@ (8006898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006622:	091b      	lsrs	r3, r3, #4
 8006624:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006628:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800662a:	4b9b      	ldr	r3, [pc, #620]	@ (8006898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800662c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006634:	4b98      	ldr	r3, [pc, #608]	@ (8006898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006638:	08db      	lsrs	r3, r3, #3
 800663a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	fb02 f303 	mul.w	r3, r2, r3
 8006644:	ee07 3a90 	vmov	s15, r3
 8006648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 8111 	beq.w	800687a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b02      	cmp	r3, #2
 800665c:	f000 8083 	beq.w	8006766 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b02      	cmp	r3, #2
 8006664:	f200 80a1 	bhi.w	80067aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d056      	beq.n	8006722 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006674:	e099      	b.n	80067aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006676:	4b88      	ldr	r3, [pc, #544]	@ (8006898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b00      	cmp	r3, #0
 8006680:	d02d      	beq.n	80066de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006682:	4b85      	ldr	r3, [pc, #532]	@ (8006898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	08db      	lsrs	r3, r3, #3
 8006688:	f003 0303 	and.w	r3, r3, #3
 800668c:	4a83      	ldr	r2, [pc, #524]	@ (800689c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800668e:	fa22 f303 	lsr.w	r3, r2, r3
 8006692:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	ee07 3a90 	vmov	s15, r3
 800669a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	ee07 3a90 	vmov	s15, r3
 80066a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ac:	4b7a      	ldr	r3, [pc, #488]	@ (8006898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b4:	ee07 3a90 	vmov	s15, r3
 80066b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80066c0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80066dc:	e087      	b.n	80067ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	ee07 3a90 	vmov	s15, r3
 80066e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80068a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80066ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066f0:	4b69      	ldr	r3, [pc, #420]	@ (8006898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f8:	ee07 3a90 	vmov	s15, r3
 80066fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006700:	ed97 6a03 	vldr	s12, [r7, #12]
 8006704:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800670c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006710:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006720:	e065      	b.n	80067ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	ee07 3a90 	vmov	s15, r3
 8006728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006734:	4b58      	ldr	r3, [pc, #352]	@ (8006898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673c:	ee07 3a90 	vmov	s15, r3
 8006740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006744:	ed97 6a03 	vldr	s12, [r7, #12]
 8006748:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800674c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006754:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800675c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006760:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006764:	e043      	b.n	80067ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	ee07 3a90 	vmov	s15, r3
 800676c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006770:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80068ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006778:	4b47      	ldr	r3, [pc, #284]	@ (8006898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800677a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006780:	ee07 3a90 	vmov	s15, r3
 8006784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006788:	ed97 6a03 	vldr	s12, [r7, #12]
 800678c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006790:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006794:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006798:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800679c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067a8:	e021      	b.n	80067ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	ee07 3a90 	vmov	s15, r3
 80067b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80068a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80067b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067bc:	4b36      	ldr	r3, [pc, #216]	@ (8006898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c4:	ee07 3a90 	vmov	s15, r3
 80067c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80067d0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80067ee:	4b2a      	ldr	r3, [pc, #168]	@ (8006898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f2:	0a5b      	lsrs	r3, r3, #9
 80067f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067f8:	ee07 3a90 	vmov	s15, r3
 80067fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006800:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006804:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006808:	edd7 6a07 	vldr	s13, [r7, #28]
 800680c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006814:	ee17 2a90 	vmov	r2, s15
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800681c:	4b1e      	ldr	r3, [pc, #120]	@ (8006898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800681e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006820:	0c1b      	lsrs	r3, r3, #16
 8006822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006832:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006836:	edd7 6a07 	vldr	s13, [r7, #28]
 800683a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800683e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006842:	ee17 2a90 	vmov	r2, s15
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800684a:	4b13      	ldr	r3, [pc, #76]	@ (8006898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800684c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684e:	0e1b      	lsrs	r3, r3, #24
 8006850:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006854:	ee07 3a90 	vmov	s15, r3
 8006858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006860:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006864:	edd7 6a07 	vldr	s13, [r7, #28]
 8006868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800686c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006870:	ee17 2a90 	vmov	r2, s15
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006878:	e008      	b.n	800688c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	609a      	str	r2, [r3, #8]
}
 800688c:	bf00      	nop
 800688e:	3724      	adds	r7, #36	@ 0x24
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	58024400 	.word	0x58024400
 800689c:	03d09000 	.word	0x03d09000
 80068a0:	46000000 	.word	0x46000000
 80068a4:	4c742400 	.word	0x4c742400
 80068a8:	4a742400 	.word	0x4a742400
 80068ac:	4bbebc20 	.word	0x4bbebc20

080068b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068be:	4b53      	ldr	r3, [pc, #332]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 80068c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d101      	bne.n	80068ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e099      	b.n	8006a02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80068ce:	4b4f      	ldr	r3, [pc, #316]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a4e      	ldr	r2, [pc, #312]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 80068d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068da:	f7fa fc31 	bl	8001140 <HAL_GetTick>
 80068de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068e0:	e008      	b.n	80068f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068e2:	f7fa fc2d 	bl	8001140 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d901      	bls.n	80068f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e086      	b.n	8006a02 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068f4:	4b45      	ldr	r3, [pc, #276]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1f0      	bne.n	80068e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006900:	4b42      	ldr	r3, [pc, #264]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 8006902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006904:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	031b      	lsls	r3, r3, #12
 800690e:	493f      	ldr	r1, [pc, #252]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 8006910:	4313      	orrs	r3, r2
 8006912:	628b      	str	r3, [r1, #40]	@ 0x28
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	3b01      	subs	r3, #1
 800691a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	3b01      	subs	r3, #1
 8006924:	025b      	lsls	r3, r3, #9
 8006926:	b29b      	uxth	r3, r3
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	3b01      	subs	r3, #1
 8006930:	041b      	lsls	r3, r3, #16
 8006932:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006936:	431a      	orrs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	3b01      	subs	r3, #1
 800693e:	061b      	lsls	r3, r3, #24
 8006940:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006944:	4931      	ldr	r1, [pc, #196]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 8006946:	4313      	orrs	r3, r2
 8006948:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800694a:	4b30      	ldr	r3, [pc, #192]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 800694c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	492d      	ldr	r1, [pc, #180]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 8006958:	4313      	orrs	r3, r2
 800695a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800695c:	4b2b      	ldr	r3, [pc, #172]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 800695e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006960:	f023 0220 	bic.w	r2, r3, #32
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	4928      	ldr	r1, [pc, #160]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 800696a:	4313      	orrs	r3, r2
 800696c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800696e:	4b27      	ldr	r3, [pc, #156]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 8006970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006972:	4a26      	ldr	r2, [pc, #152]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 8006974:	f023 0310 	bic.w	r3, r3, #16
 8006978:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800697a:	4b24      	ldr	r3, [pc, #144]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 800697c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800697e:	4b24      	ldr	r3, [pc, #144]	@ (8006a10 <RCCEx_PLL2_Config+0x160>)
 8006980:	4013      	ands	r3, r2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	69d2      	ldr	r2, [r2, #28]
 8006986:	00d2      	lsls	r2, r2, #3
 8006988:	4920      	ldr	r1, [pc, #128]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 800698a:	4313      	orrs	r3, r2
 800698c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800698e:	4b1f      	ldr	r3, [pc, #124]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 8006990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006992:	4a1e      	ldr	r2, [pc, #120]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 8006994:	f043 0310 	orr.w	r3, r3, #16
 8006998:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d106      	bne.n	80069ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80069a0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 80069a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a4:	4a19      	ldr	r2, [pc, #100]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 80069a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80069aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80069ac:	e00f      	b.n	80069ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d106      	bne.n	80069c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80069b4:	4b15      	ldr	r3, [pc, #84]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 80069b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b8:	4a14      	ldr	r2, [pc, #80]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 80069ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80069c0:	e005      	b.n	80069ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80069c2:	4b12      	ldr	r3, [pc, #72]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 80069c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c6:	4a11      	ldr	r2, [pc, #68]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 80069c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80069cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80069ce:	4b0f      	ldr	r3, [pc, #60]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a0e      	ldr	r2, [pc, #56]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 80069d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069da:	f7fa fbb1 	bl	8001140 <HAL_GetTick>
 80069de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069e0:	e008      	b.n	80069f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80069e2:	f7fa fbad 	bl	8001140 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d901      	bls.n	80069f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e006      	b.n	8006a02 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069f4:	4b05      	ldr	r3, [pc, #20]	@ (8006a0c <RCCEx_PLL2_Config+0x15c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0f0      	beq.n	80069e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	58024400 	.word	0x58024400
 8006a10:	ffff0007 	.word	0xffff0007

08006a14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a22:	4b53      	ldr	r3, [pc, #332]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a26:	f003 0303 	and.w	r3, r3, #3
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d101      	bne.n	8006a32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e099      	b.n	8006b66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006a32:	4b4f      	ldr	r3, [pc, #316]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a4e      	ldr	r2, [pc, #312]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a3e:	f7fa fb7f 	bl	8001140 <HAL_GetTick>
 8006a42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a44:	e008      	b.n	8006a58 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a46:	f7fa fb7b 	bl	8001140 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e086      	b.n	8006b66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a58:	4b45      	ldr	r3, [pc, #276]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1f0      	bne.n	8006a46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006a64:	4b42      	ldr	r3, [pc, #264]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a68:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	051b      	lsls	r3, r3, #20
 8006a72:	493f      	ldr	r1, [pc, #252]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	025b      	lsls	r3, r3, #9
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	041b      	lsls	r3, r3, #16
 8006a96:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	061b      	lsls	r3, r3, #24
 8006aa4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006aa8:	4931      	ldr	r1, [pc, #196]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006aae:	4b30      	ldr	r3, [pc, #192]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	492d      	ldr	r1, [pc, #180]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	4928      	ldr	r1, [pc, #160]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006ad2:	4b27      	ldr	r3, [pc, #156]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad6:	4a26      	ldr	r2, [pc, #152]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006adc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ade:	4b24      	ldr	r3, [pc, #144]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006ae0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ae2:	4b24      	ldr	r3, [pc, #144]	@ (8006b74 <RCCEx_PLL3_Config+0x160>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	69d2      	ldr	r2, [r2, #28]
 8006aea:	00d2      	lsls	r2, r2, #3
 8006aec:	4920      	ldr	r1, [pc, #128]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006af2:	4b1f      	ldr	r3, [pc, #124]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af6:	4a1e      	ldr	r2, [pc, #120]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006afc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d106      	bne.n	8006b12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006b04:	4b1a      	ldr	r3, [pc, #104]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b08:	4a19      	ldr	r2, [pc, #100]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006b0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b10:	e00f      	b.n	8006b32 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d106      	bne.n	8006b26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006b18:	4b15      	ldr	r3, [pc, #84]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1c:	4a14      	ldr	r2, [pc, #80]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006b1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006b22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b24:	e005      	b.n	8006b32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006b26:	4b12      	ldr	r3, [pc, #72]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2a:	4a11      	ldr	r2, [pc, #68]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006b2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b30:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006b32:	4b0f      	ldr	r3, [pc, #60]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a0e      	ldr	r2, [pc, #56]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b3e:	f7fa faff 	bl	8001140 <HAL_GetTick>
 8006b42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b44:	e008      	b.n	8006b58 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b46:	f7fa fafb 	bl	8001140 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d901      	bls.n	8006b58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e006      	b.n	8006b66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b58:	4b05      	ldr	r3, [pc, #20]	@ (8006b70 <RCCEx_PLL3_Config+0x15c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0f0      	beq.n	8006b46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	58024400 	.word	0x58024400
 8006b74:	ffff0007 	.word	0xffff0007

08006b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e049      	b.n	8006c1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d106      	bne.n	8006ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7fa f946 	bl	8000e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	f000 f92e 	bl	8006e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_TIM_ConfigClockSource+0x1c>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e0dc      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x1d6>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8006e08 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006c60:	4013      	ands	r3, r2
 8006c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a64      	ldr	r2, [pc, #400]	@ (8006e0c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	f000 80a9 	beq.w	8006dd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c80:	4a62      	ldr	r2, [pc, #392]	@ (8006e0c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	f200 80ae 	bhi.w	8006de4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c88:	4a61      	ldr	r2, [pc, #388]	@ (8006e10 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	f000 80a1 	beq.w	8006dd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c90:	4a5f      	ldr	r2, [pc, #380]	@ (8006e10 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	f200 80a6 	bhi.w	8006de4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c98:	4a5e      	ldr	r2, [pc, #376]	@ (8006e14 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	f000 8099 	beq.w	8006dd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006ca0:	4a5c      	ldr	r2, [pc, #368]	@ (8006e14 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	f200 809e 	bhi.w	8006de4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ca8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006cac:	f000 8091 	beq.w	8006dd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006cb0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006cb4:	f200 8096 	bhi.w	8006de4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006cb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cbc:	f000 8089 	beq.w	8006dd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006cc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cc4:	f200 808e 	bhi.w	8006de4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ccc:	d03e      	beq.n	8006d4c <HAL_TIM_ConfigClockSource+0x124>
 8006cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cd2:	f200 8087 	bhi.w	8006de4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cda:	f000 8086 	beq.w	8006dea <HAL_TIM_ConfigClockSource+0x1c2>
 8006cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ce2:	d87f      	bhi.n	8006de4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ce4:	2b70      	cmp	r3, #112	@ 0x70
 8006ce6:	d01a      	beq.n	8006d1e <HAL_TIM_ConfigClockSource+0xf6>
 8006ce8:	2b70      	cmp	r3, #112	@ 0x70
 8006cea:	d87b      	bhi.n	8006de4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006cec:	2b60      	cmp	r3, #96	@ 0x60
 8006cee:	d050      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x16a>
 8006cf0:	2b60      	cmp	r3, #96	@ 0x60
 8006cf2:	d877      	bhi.n	8006de4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006cf4:	2b50      	cmp	r3, #80	@ 0x50
 8006cf6:	d03c      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x14a>
 8006cf8:	2b50      	cmp	r3, #80	@ 0x50
 8006cfa:	d873      	bhi.n	8006de4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006cfc:	2b40      	cmp	r3, #64	@ 0x40
 8006cfe:	d058      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0x18a>
 8006d00:	2b40      	cmp	r3, #64	@ 0x40
 8006d02:	d86f      	bhi.n	8006de4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006d04:	2b30      	cmp	r3, #48	@ 0x30
 8006d06:	d064      	beq.n	8006dd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006d08:	2b30      	cmp	r3, #48	@ 0x30
 8006d0a:	d86b      	bhi.n	8006de4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006d0c:	2b20      	cmp	r3, #32
 8006d0e:	d060      	beq.n	8006dd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	d867      	bhi.n	8006de4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d05c      	beq.n	8006dd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006d18:	2b10      	cmp	r3, #16
 8006d1a:	d05a      	beq.n	8006dd2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006d1c:	e062      	b.n	8006de4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d2e:	f000 f997 	bl	8007060 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	609a      	str	r2, [r3, #8]
      break;
 8006d4a:	e04f      	b.n	8006dec <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d5c:	f000 f980 	bl	8007060 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d6e:	609a      	str	r2, [r3, #8]
      break;
 8006d70:	e03c      	b.n	8006dec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f000 f8f0 	bl	8006f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2150      	movs	r1, #80	@ 0x50
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 f94a 	bl	8007024 <TIM_ITRx_SetConfig>
      break;
 8006d90:	e02c      	b.n	8006dec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f000 f90f 	bl	8006fc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2160      	movs	r1, #96	@ 0x60
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 f93a 	bl	8007024 <TIM_ITRx_SetConfig>
      break;
 8006db0:	e01c      	b.n	8006dec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f000 f8d0 	bl	8006f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2140      	movs	r1, #64	@ 0x40
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 f92a 	bl	8007024 <TIM_ITRx_SetConfig>
      break;
 8006dd0:	e00c      	b.n	8006dec <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4610      	mov	r0, r2
 8006dde:	f000 f921 	bl	8007024 <TIM_ITRx_SetConfig>
      break;
 8006de2:	e003      	b.n	8006dec <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	73fb      	strb	r3, [r7, #15]
      break;
 8006de8:	e000      	b.n	8006dec <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006dea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	ffceff88 	.word	0xffceff88
 8006e0c:	00100040 	.word	0x00100040
 8006e10:	00100030 	.word	0x00100030
 8006e14:	00100020 	.word	0x00100020

08006e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a46      	ldr	r2, [pc, #280]	@ (8006f44 <TIM_Base_SetConfig+0x12c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d013      	beq.n	8006e58 <TIM_Base_SetConfig+0x40>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e36:	d00f      	beq.n	8006e58 <TIM_Base_SetConfig+0x40>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a43      	ldr	r2, [pc, #268]	@ (8006f48 <TIM_Base_SetConfig+0x130>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00b      	beq.n	8006e58 <TIM_Base_SetConfig+0x40>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a42      	ldr	r2, [pc, #264]	@ (8006f4c <TIM_Base_SetConfig+0x134>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d007      	beq.n	8006e58 <TIM_Base_SetConfig+0x40>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a41      	ldr	r2, [pc, #260]	@ (8006f50 <TIM_Base_SetConfig+0x138>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_Base_SetConfig+0x40>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a40      	ldr	r2, [pc, #256]	@ (8006f54 <TIM_Base_SetConfig+0x13c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d108      	bne.n	8006e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a35      	ldr	r2, [pc, #212]	@ (8006f44 <TIM_Base_SetConfig+0x12c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d01f      	beq.n	8006eb2 <TIM_Base_SetConfig+0x9a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e78:	d01b      	beq.n	8006eb2 <TIM_Base_SetConfig+0x9a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a32      	ldr	r2, [pc, #200]	@ (8006f48 <TIM_Base_SetConfig+0x130>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d017      	beq.n	8006eb2 <TIM_Base_SetConfig+0x9a>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a31      	ldr	r2, [pc, #196]	@ (8006f4c <TIM_Base_SetConfig+0x134>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d013      	beq.n	8006eb2 <TIM_Base_SetConfig+0x9a>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a30      	ldr	r2, [pc, #192]	@ (8006f50 <TIM_Base_SetConfig+0x138>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d00f      	beq.n	8006eb2 <TIM_Base_SetConfig+0x9a>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a2f      	ldr	r2, [pc, #188]	@ (8006f54 <TIM_Base_SetConfig+0x13c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d00b      	beq.n	8006eb2 <TIM_Base_SetConfig+0x9a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8006f58 <TIM_Base_SetConfig+0x140>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d007      	beq.n	8006eb2 <TIM_Base_SetConfig+0x9a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8006f5c <TIM_Base_SetConfig+0x144>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d003      	beq.n	8006eb2 <TIM_Base_SetConfig+0x9a>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a2c      	ldr	r2, [pc, #176]	@ (8006f60 <TIM_Base_SetConfig+0x148>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d108      	bne.n	8006ec4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a16      	ldr	r2, [pc, #88]	@ (8006f44 <TIM_Base_SetConfig+0x12c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d00f      	beq.n	8006f10 <TIM_Base_SetConfig+0xf8>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a18      	ldr	r2, [pc, #96]	@ (8006f54 <TIM_Base_SetConfig+0x13c>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d00b      	beq.n	8006f10 <TIM_Base_SetConfig+0xf8>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a17      	ldr	r2, [pc, #92]	@ (8006f58 <TIM_Base_SetConfig+0x140>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d007      	beq.n	8006f10 <TIM_Base_SetConfig+0xf8>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a16      	ldr	r2, [pc, #88]	@ (8006f5c <TIM_Base_SetConfig+0x144>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d003      	beq.n	8006f10 <TIM_Base_SetConfig+0xf8>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a15      	ldr	r2, [pc, #84]	@ (8006f60 <TIM_Base_SetConfig+0x148>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d103      	bne.n	8006f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	691a      	ldr	r2, [r3, #16]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d105      	bne.n	8006f36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	f023 0201 	bic.w	r2, r3, #1
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	611a      	str	r2, [r3, #16]
  }
}
 8006f36:	bf00      	nop
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	40010000 	.word	0x40010000
 8006f48:	40000400 	.word	0x40000400
 8006f4c:	40000800 	.word	0x40000800
 8006f50:	40000c00 	.word	0x40000c00
 8006f54:	40010400 	.word	0x40010400
 8006f58:	40014000 	.word	0x40014000
 8006f5c:	40014400 	.word	0x40014400
 8006f60:	40014800 	.word	0x40014800

08006f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	f023 0201 	bic.w	r2, r3, #1
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f023 030a 	bic.w	r3, r3, #10
 8006fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	621a      	str	r2, [r3, #32]
}
 8006fb6:	bf00      	nop
 8006fb8:	371c      	adds	r7, #28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b087      	sub	sp, #28
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	f023 0210 	bic.w	r2, r3, #16
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	031b      	lsls	r3, r3, #12
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ffe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	4313      	orrs	r3, r2
 8007008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	621a      	str	r2, [r3, #32]
}
 8007016:	bf00      	nop
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
	...

08007024 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4b09      	ldr	r3, [pc, #36]	@ (800705c <TIM_ITRx_SetConfig+0x38>)
 8007038:	4013      	ands	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4313      	orrs	r3, r2
 8007042:	f043 0307 	orr.w	r3, r3, #7
 8007046:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	609a      	str	r2, [r3, #8]
}
 800704e:	bf00      	nop
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	ffcfff8f 	.word	0xffcfff8f

08007060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800707a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	021a      	lsls	r2, r3, #8
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	431a      	orrs	r2, r3
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4313      	orrs	r3, r2
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	4313      	orrs	r3, r2
 800708c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	609a      	str	r2, [r3, #8]
}
 8007094:	bf00      	nop
 8007096:	371c      	adds	r7, #28
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d101      	bne.n	80070b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070b4:	2302      	movs	r3, #2
 80070b6:	e06d      	b.n	8007194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a30      	ldr	r2, [pc, #192]	@ (80071a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d004      	beq.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a2f      	ldr	r2, [pc, #188]	@ (80071a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d108      	bne.n	80070fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80070f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007104:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a20      	ldr	r2, [pc, #128]	@ (80071a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d022      	beq.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800712a:	d01d      	beq.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a1d      	ldr	r2, [pc, #116]	@ (80071a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d018      	beq.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a1c      	ldr	r2, [pc, #112]	@ (80071ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d013      	beq.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a1a      	ldr	r2, [pc, #104]	@ (80071b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00e      	beq.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a15      	ldr	r2, [pc, #84]	@ (80071a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d009      	beq.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a16      	ldr	r2, [pc, #88]	@ (80071b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d004      	beq.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a15      	ldr	r2, [pc, #84]	@ (80071b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d10c      	bne.n	8007182 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800716e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	4313      	orrs	r3, r2
 8007178:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	40010000 	.word	0x40010000
 80071a4:	40010400 	.word	0x40010400
 80071a8:	40000400 	.word	0x40000400
 80071ac:	40000800 	.word	0x40000800
 80071b0:	40000c00 	.word	0x40000c00
 80071b4:	40001800 	.word	0x40001800
 80071b8:	40014000 	.word	0x40014000

080071bc <memset>:
 80071bc:	4402      	add	r2, r0
 80071be:	4603      	mov	r3, r0
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d100      	bne.n	80071c6 <memset+0xa>
 80071c4:	4770      	bx	lr
 80071c6:	f803 1b01 	strb.w	r1, [r3], #1
 80071ca:	e7f9      	b.n	80071c0 <memset+0x4>

080071cc <__libc_init_array>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	4d0d      	ldr	r5, [pc, #52]	@ (8007204 <__libc_init_array+0x38>)
 80071d0:	4c0d      	ldr	r4, [pc, #52]	@ (8007208 <__libc_init_array+0x3c>)
 80071d2:	1b64      	subs	r4, r4, r5
 80071d4:	10a4      	asrs	r4, r4, #2
 80071d6:	2600      	movs	r6, #0
 80071d8:	42a6      	cmp	r6, r4
 80071da:	d109      	bne.n	80071f0 <__libc_init_array+0x24>
 80071dc:	4d0b      	ldr	r5, [pc, #44]	@ (800720c <__libc_init_array+0x40>)
 80071de:	4c0c      	ldr	r4, [pc, #48]	@ (8007210 <__libc_init_array+0x44>)
 80071e0:	f000 f818 	bl	8007214 <_init>
 80071e4:	1b64      	subs	r4, r4, r5
 80071e6:	10a4      	asrs	r4, r4, #2
 80071e8:	2600      	movs	r6, #0
 80071ea:	42a6      	cmp	r6, r4
 80071ec:	d105      	bne.n	80071fa <__libc_init_array+0x2e>
 80071ee:	bd70      	pop	{r4, r5, r6, pc}
 80071f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f4:	4798      	blx	r3
 80071f6:	3601      	adds	r6, #1
 80071f8:	e7ee      	b.n	80071d8 <__libc_init_array+0xc>
 80071fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80071fe:	4798      	blx	r3
 8007200:	3601      	adds	r6, #1
 8007202:	e7f2      	b.n	80071ea <__libc_init_array+0x1e>
 8007204:	0800723c 	.word	0x0800723c
 8007208:	0800723c 	.word	0x0800723c
 800720c:	0800723c 	.word	0x0800723c
 8007210:	08007240 	.word	0x08007240

08007214 <_init>:
 8007214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007216:	bf00      	nop
 8007218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721a:	bc08      	pop	{r3}
 800721c:	469e      	mov	lr, r3
 800721e:	4770      	bx	lr

08007220 <_fini>:
 8007220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007222:	bf00      	nop
 8007224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007226:	bc08      	pop	{r3}
 8007228:	469e      	mov	lr, r3
 800722a:	4770      	bx	lr
