
PODEJSCIE3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019040  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000838  080192e0  080192e0  0001a2e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019b18  08019b18  0001ab18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019b20  08019b20  0001ab20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019b24  08019b24  0001ab24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000220  24000000  08019b28  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00028d08  24000220  08019d48  0001b220  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24028f28  08019d48  0001bf28  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001b220  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b964  00000000  00000000  0001b24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006e3e  00000000  00000000  00056bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002af0  00000000  00000000  0005d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002134  00000000  00000000  000604e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00041160  00000000  00000000  00062614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037e29  00000000  00000000  000a3774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001902f5  00000000  00000000  000db59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0026b892  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c2a8  00000000  00000000  0026b8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  00277b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000220 	.word	0x24000220
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080192c8 	.word	0x080192c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000224 	.word	0x24000224
 80002dc:	080192c8 	.word	0x080192c8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <_DoInit>:
    if (pRTTCBInit->acID[0] != 'S') {                                     \
      _DoInit();                                                          \
    }                                                                     \
  } while (0)

static void _DoInit(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
                                 // no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT +
 8000686:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <_DoInit+0xa0>)
 8000688:	603b      	str	r3, [r7, #0]
                                                           // the cache ever
                                                           // becomes dirty and
                                                           // all changes are
                                                           // visible in HW
                                                           // directly
  memset((SEGGER_RTT_CB*)p, 0,
 800068a:	22a8      	movs	r2, #168	@ 0xa8
 800068c:	2100      	movs	r1, #0
 800068e:	6838      	ldr	r0, [r7, #0]
 8000690:	f017 fd2b 	bl	80180ea <memset>
         sizeof(_SEGGER_RTT));  // Make sure that the RTT CB is always zero
                                // initialized.
  p->MaxNumUpBuffers = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	2203      	movs	r2, #3
 8000698:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	2203      	movs	r2, #3
 800069e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName = "Terminal";
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	4a20      	ldr	r2, [pc, #128]	@ (8000724 <_DoInit+0xa4>)
 80006a4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer = _acUpBuffer;
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	4a1f      	ldr	r2, [pc, #124]	@ (8000728 <_DoInit+0xa8>)
 80006aa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer = BUFFER_SIZE_UP;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006b2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff = 0u;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff = 0u;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	2200      	movs	r2, #0
 80006be:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags = SEGGER_RTT_MODE_DEFAULT;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	2200      	movs	r2, #0
 80006c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName = "Terminal";
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	4a16      	ldr	r2, [pc, #88]	@ (8000724 <_DoInit+0xa4>)
 80006ca:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer = _acDownBuffer;
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	4a17      	ldr	r2, [pc, #92]	@ (800072c <_DoInit+0xac>)
 80006d0:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer = BUFFER_SIZE_DOWN;
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	2210      	movs	r2, #16
 80006d6:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff = 0u;
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	2200      	movs	r2, #0
 80006dc:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff = 0u;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2200      	movs	r2, #0
 80006e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags = SEGGER_RTT_MODE_DEFAULT;
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	2200      	movs	r2, #0
 80006e8:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in
  // initializer memory (usually flash), as this would cause J-Link to "find"
  // the control block at a wrong address.
  //
  RTT__DMB();  // Force order of memory accesses for cores that may perform
 80006ea:	f3bf 8f5f 	dmb	sy
               // out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	e00c      	b.n	800070e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 -
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f1c3 030f 	rsb	r3, r3, #15
 80006fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000730 <_DoInit+0xb0>)
 80006fc:	5cd1      	ldrb	r1, [r2, r3]
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	460a      	mov	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3301      	adds	r3, #1
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d9ef      	bls.n	80006f4 <_DoInit+0x74>
                           i];  // Skip terminating \0 at the end of the array
  }
  RTT__DMB();  // Force order of memory accesses for cores that may perform
 8000714:	f3bf 8f5f 	dmb	sy
               // out-of-order memory accesses
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	24000000 	.word	0x24000000
 8000724:	080192e0 	.word	0x080192e0
 8000728:	2400023c 	.word	0x2400023c
 800072c:	2400063c 	.word	0x2400063c
 8000730:	0801960c 	.word	0x0801960c

08000734 <_WriteBlocking>:
 *
 *  Return value
 *    >= 0 - Number of bytes written into buffer.
 */
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer,
                               unsigned NumBytes) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	61fb      	str	r3, [r7, #28]
  do {
    RdOff =
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	691b      	ldr	r3, [r3, #16]
 800074e:	61bb      	str	r3, [r7, #24]
        pRing->RdOff;  // May be changed by host (debug probe) in the meantime
    if (RdOff > WrOff) {
 8000750:	69ba      	ldr	r2, [r7, #24]
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	429a      	cmp	r2, r3
 8000756:	d905      	bls.n	8000764 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000758:	69ba      	ldr	r2, [r7, #24]
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	3b01      	subs	r3, #1
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
 8000762:	e007      	b.n	8000774 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	689a      	ldr	r2, [r3, #8]
 8000768:	69b9      	ldr	r1, [r7, #24]
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	1acb      	subs	r3, r1, r3
 800076e:	4413      	add	r3, r2
 8000770:	3b01      	subs	r3, #1
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite =
        MIN(NumBytesToWrite,
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	689a      	ldr	r2, [r3, #8]
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	1ad3      	subs	r3, r2, r3
    NumBytesToWrite =
 800077c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800077e:	4293      	cmp	r3, r2
 8000780:	bf28      	it	cs
 8000782:	4613      	movcs	r3, r2
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
            (pRing->SizeOfBuffer - WrOff));  // Number of bytes that can be
                                             // written until buffer wrap-around
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4293      	cmp	r3, r2
 800078c:	bf28      	it	cs
 800078e:	4613      	movcs	r3, r2
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	685a      	ldr	r2, [r3, #4]
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	4413      	add	r3, r2
 800079a:	617b      	str	r3, [r7, #20]
    WrOff += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800079c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800079e:	68b9      	ldr	r1, [r7, #8]
 80007a0:	6978      	ldr	r0, [r7, #20]
 80007a2:	f017 fd74 	bl	801828e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80007a6:	6a3a      	ldr	r2, [r7, #32]
 80007a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007aa:	4413      	add	r3, r2
 80007ac:	623b      	str	r3, [r7, #32]
    pBuffer += NumBytesToWrite;
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b2:	4413      	add	r3, r2
 80007b4:	60bb      	str	r3, [r7, #8]
    NumBytes -= NumBytesToWrite;
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	607b      	str	r3, [r7, #4]
    WrOff += NumBytesToWrite;
 80007be:	69fa      	ldr	r2, [r7, #28]
 80007c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c2:	4413      	add	r3, r2
 80007c4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	69fa      	ldr	r2, [r7, #28]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d101      	bne.n	80007d4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
 80007d4:	f3bf 8f5f 	dmb	sy
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = WrOff;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	69fa      	ldr	r2, [r7, #28]
 80007dc:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1b2      	bne.n	800074a <_WriteBlocking+0x16>
  return NumBytesWritten;
 80007e4:	6a3b      	ldr	r3, [r7, #32]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3728      	adds	r7, #40	@ 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <_WriteNoCheck>:
 *  Notes
 *    (1) If there might not be enough space in the "Up"-buffer, call
 * _WriteBlocking
 */
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData,
                          unsigned NumBytes) {
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b088      	sub	sp, #32
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	60f8      	str	r0, [r7, #12]
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	689a      	ldr	r2, [r3, #8]
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800080a:	69ba      	ldr	r2, [r7, #24]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	d911      	bls.n	8000836 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	4413      	add	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	68b9      	ldr	r1, [r7, #8]
 8000820:	6938      	ldr	r0, [r7, #16]
 8000822:	f017 fd34 	bl	801828e <memcpy>
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
 8000826:	f3bf 8f5f 	dmb	sy
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = WrOff + NumBytes;
 800082a:	69fa      	ldr	r2, [r7, #28]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	441a      	add	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	60da      	str	r2, [r3, #12]
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8000834:	e01f      	b.n	8000876 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	685a      	ldr	r2, [r3, #4]
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	4413      	add	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	68b9      	ldr	r1, [r7, #8]
 8000848:	6938      	ldr	r0, [r7, #16]
 800084a:	f017 fd20 	bl	801828e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	4413      	add	r3, r2
 8000862:	697a      	ldr	r2, [r7, #20]
 8000864:	4619      	mov	r1, r3
 8000866:	6938      	ldr	r0, [r7, #16]
 8000868:	f017 fd11 	bl	801828e <memcpy>
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
 800086c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	697a      	ldr	r2, [r7, #20]
 8000874:	60da      	str	r2, [r3, #12]
}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_GetAvailWriteSpace>:
 *    pRing        Ring buffer to check.
 *
 *  Return value
 *    Number of bytes that are free in the buffer.
 */
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800087e:	b480      	push	{r7}
 8000880:	b087      	sub	sp, #28
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	429a      	cmp	r2, r3
 8000898:	d808      	bhi.n	80008ac <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	1ad2      	subs	r2, r2, r3
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	4413      	add	r3, r2
 80008a6:	3b01      	subs	r3, #1
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	e004      	b.n	80008b6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	3b01      	subs	r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80008b6:	697b      	ldr	r3, [r7, #20]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	371c      	adds	r7, #28
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <SEGGER_RTT_WriteNoLock>:
 *        and may only be called after RTT has been initialized.
 *        Either by calling SEGGER_RTT_Init() or calling another RTT API
 * function first.
 */
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer,
                                unsigned NumBytes) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  const char* pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char*)pBuffer;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	61bb      	str	r3, [r7, #24]
  pRing =
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	1c5a      	adds	r2, r3, #1
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000960 <SEGGER_RTT_WriteNoLock+0x9c>)
 80008e2:	4413      	add	r3, r2
 80008e4:	617b      	str	r3, [r7, #20]
                                                         // of our changes go
                                                         // into HW directly
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d029      	beq.n	8000942 <SEGGER_RTT_WriteNoLock+0x7e>
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d82e      	bhi.n	8000950 <SEGGER_RTT_WriteNoLock+0x8c>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d002      	beq.n	80008fc <SEGGER_RTT_WriteNoLock+0x38>
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d013      	beq.n	8000922 <SEGGER_RTT_WriteNoLock+0x5e>
 80008fa:	e029      	b.n	8000950 <SEGGER_RTT_WriteNoLock+0x8c>
    case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
      //
      // If we are in skip mode and there is no space for the whole
      // of this output, don't bother.
      //
      Avail = _GetAvailWriteSpace(pRing);
 80008fc:	6978      	ldr	r0, [r7, #20]
 80008fe:	f7ff ffbe 	bl	800087e <_GetAvailWriteSpace>
 8000902:	6138      	str	r0, [r7, #16]
      if (Avail < NumBytes) {
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	d202      	bcs.n	8000912 <SEGGER_RTT_WriteNoLock+0x4e>
        Status = 0u;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
      } else {
        Status = NumBytes;
        _WriteNoCheck(pRing, pData, NumBytes);
      }
      break;
 8000910:	e021      	b.n	8000956 <SEGGER_RTT_WriteNoLock+0x92>
        Status = NumBytes;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	61fb      	str	r3, [r7, #28]
        _WriteNoCheck(pRing, pData, NumBytes);
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	69b9      	ldr	r1, [r7, #24]
 800091a:	6978      	ldr	r0, [r7, #20]
 800091c:	f7ff ff67 	bl	80007ee <_WriteNoCheck>
      break;
 8000920:	e019      	b.n	8000956 <SEGGER_RTT_WriteNoLock+0x92>
    case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
      //
      // If we are in trim mode, trim to what we can output without blocking.
      //
      Avail = _GetAvailWriteSpace(pRing);
 8000922:	6978      	ldr	r0, [r7, #20]
 8000924:	f7ff ffab 	bl	800087e <_GetAvailWriteSpace>
 8000928:	6138      	str	r0, [r7, #16]
      Status = Avail < NumBytes ? Avail : NumBytes;
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	4293      	cmp	r3, r2
 8000930:	bf28      	it	cs
 8000932:	4613      	movcs	r3, r2
 8000934:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, Status);
 8000936:	69fa      	ldr	r2, [r7, #28]
 8000938:	69b9      	ldr	r1, [r7, #24]
 800093a:	6978      	ldr	r0, [r7, #20]
 800093c:	f7ff ff57 	bl	80007ee <_WriteNoCheck>
      break;
 8000940:	e009      	b.n	8000956 <SEGGER_RTT_WriteNoLock+0x92>
    case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
      //
      // If we are in blocking mode, output everything.
      //
      Status = _WriteBlocking(pRing, pData, NumBytes);
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	69b9      	ldr	r1, [r7, #24]
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f7ff fef4 	bl	8000734 <_WriteBlocking>
 800094c:	61f8      	str	r0, [r7, #28]
      break;
 800094e:	e002      	b.n	8000956 <SEGGER_RTT_WriteNoLock+0x92>
    default:
      Status = 0u;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
      break;
 8000954:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8000956:	69fb      	ldr	r3, [r7, #28]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3720      	adds	r7, #32
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	24000000 	.word	0x24000000

08000964 <SEGGER_RTT_Write>:
 *
 *  Notes
 *    (1) Data is stored according to buffer flags.
 */
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer,
                          unsigned NumBytes) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8000970:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <SEGGER_RTT_Write+0x48>)
 8000972:	61fb      	str	r3, [r7, #28]
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b53      	cmp	r3, #83	@ 0x53
 800097c:	d001      	beq.n	8000982 <SEGGER_RTT_Write+0x1e>
 800097e:	f7ff fe7f 	bl	8000680 <_DoInit>
  SEGGER_RTT_LOCK();
 8000982:	f3ef 8311 	mrs	r3, BASEPRI
 8000986:	f04f 0120 	mov.w	r1, #32
 800098a:	f381 8811 	msr	BASEPRI, r1
 800098e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	68b9      	ldr	r1, [r7, #8]
 8000994:	68f8      	ldr	r0, [r7, #12]
 8000996:	f7ff ff95 	bl	80008c4 <SEGGER_RTT_WriteNoLock>
 800099a:	6178      	str	r0, [r7, #20]
      BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
  SEGGER_RTT_UNLOCK();
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80009a2:	697b      	ldr	r3, [r7, #20]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3720      	adds	r7, #32
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	24000000 	.word	0x24000000

080009b0 <_StoreChar>:
 */
/*********************************************************************
 *
 *       _StoreChar
 */
static void _StoreChar(SEGGER_RTT_PRINTF_DESC* p, char c) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d80e      	bhi.n	80009ec <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4413      	add	r3, r2
 80009d6:	78fa      	ldrb	r2, [r7, #3]
 80009d8:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d115      	bne.n	8000a24 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6918      	ldr	r0, [r3, #16]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6819      	ldr	r1, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	461a      	mov	r2, r3
 8000a06:	f7ff ffad 	bl	8000964 <SEGGER_RTT_Write>
 8000a0a:	4602      	mov	r2, r0
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d004      	beq.n	8000a1e <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1a:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8000a1c:	e002      	b.n	8000a24 <_StoreChar+0x74>
      p->Cnt = 0u;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_PrintUnsigned>:
 *
 *       _PrintUnsigned
 */
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC* pBufferDesc, unsigned v,
                           unsigned Base, unsigned NumDigits,
                           unsigned FieldWidth, unsigned FormatFlags) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	@ 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
 8000a38:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000a46:	e007      	b.n	8000a58 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8000a48:	6a3a      	ldr	r2, [r7, #32]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a50:	623b      	str	r3, [r7, #32]
    Width++;
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3301      	adds	r3, #1
 8000a56:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000a58:	6a3a      	ldr	r2, [r7, #32]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d2f3      	bcs.n	8000a48 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8000a60:	683a      	ldr	r2, [r7, #0]
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d901      	bls.n	8000a6c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8000a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d125      	bne.n	8000ac2 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d022      	beq.n	8000ac2 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) &&
 8000a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d005      	beq.n	8000a92 <_PrintUnsigned+0x66>
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <_PrintUnsigned+0x66>
          (NumDigits == 0u)) {
        c = '0';
 8000a8c:	2330      	movs	r3, #48	@ 0x30
 8000a8e:	76fb      	strb	r3, [r7, #27]
 8000a90:	e001      	b.n	8000a96 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8000a92:	2320      	movs	r3, #32
 8000a94:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a96:	e00b      	b.n	8000ab0 <_PrintUnsigned+0x84>
        FieldWidth--;
 8000a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8000a9e:	7efb      	ldrb	r3, [r7, #27]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f7ff ff84 	bl	80009b0 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db07      	blt.n	8000ac0 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d005      	beq.n	8000ac2 <_PrintUnsigned+0x96>
 8000ab6:	69fa      	ldr	r2, [r7, #28]
 8000ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d3ec      	bcc.n	8000a98 <_PrintUnsigned+0x6c>
 8000abe:	e000      	b.n	8000ac2 <_PrintUnsigned+0x96>
          break;
 8000ac0:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db55      	blt.n	8000b76 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {  // User specified a min number of digits to print?
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d903      	bls.n	8000ad8 <_PrintUnsigned+0xac>
                             // => Make sure we loop at least that often, before
                             // checking anything else (> 1 check avoids
                             // problems with NumDigits being signed / unsigned)
        NumDigits--;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	e009      	b.n	8000aec <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000ad8:	68ba      	ldr	r2, [r7, #8]
 8000ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae0:	617b      	str	r3, [r7, #20]
        if (Div < Base) {  // Is our divider big enough to extract the highest
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d200      	bcs.n	8000aec <_PrintUnsigned+0xc0>
                           // digit from value? => Done
          break;
 8000aea:	e005      	b.n	8000af8 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	fb02 f303 	mul.w	r3, r2, r3
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {  // User specified a min number of digits to print?
 8000af6:	e7e8      	b.n	8000aca <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000af8:	68ba      	ldr	r2, [r7, #8]
 8000afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b00:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b06:	fb02 f303 	mul.w	r3, r2, r3
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8000b10:	4a1b      	ldr	r2, [pc, #108]	@ (8000b80 <_PrintUnsigned+0x154>)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff ff48 	bl	80009b0 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db08      	blt.n	8000b3a <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 8000b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1df      	bne.n	8000af8 <_PrintUnsigned+0xcc>
 8000b38:	e000      	b.n	8000b3c <_PrintUnsigned+0x110>
        break;
 8000b3a:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8000b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d017      	beq.n	8000b76 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8000b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d014      	beq.n	8000b76 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b4c:	e00a      	b.n	8000b64 <_PrintUnsigned+0x138>
          FieldWidth--;
 8000b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b50:	3b01      	subs	r3, #1
 8000b52:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 8000b54:	2120      	movs	r1, #32
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f7ff ff2a 	bl	80009b0 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db07      	blt.n	8000b74 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d005      	beq.n	8000b76 <_PrintUnsigned+0x14a>
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d3ed      	bcc.n	8000b4e <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000b72:	e000      	b.n	8000b76 <_PrintUnsigned+0x14a>
            break;
 8000b74:	bf00      	nop
}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	@ 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	08019620 	.word	0x08019620

08000b84 <_PrintInt>:
 *
 *       _PrintInt
 */
static void _PrintInt(SEGGER_RTT_PRINTF_DESC* pBufferDesc, int v, unsigned Base,
                      unsigned NumDigits, unsigned FieldWidth,
                      unsigned FormatFlags) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bfb8      	it	lt
 8000b98:	425b      	neglt	r3, r3
 8000b9a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000ba0:	e007      	b.n	8000bb2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000baa:	613b      	str	r3, [r7, #16]
    Width++;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	daf3      	bge.n	8000ba2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d901      	bls.n	8000bc6 <_PrintInt+0x42>
    Width = NumDigits;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) &&
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00a      	beq.n	8000be2 <_PrintInt+0x5e>
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db04      	blt.n	8000bdc <_PrintInt+0x58>
      ((v < 0) ||
       ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd4:	f003 0304 	and.w	r3, r3, #4
      ((v < 0) ||
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <_PrintInt+0x5e>
    FieldWidth--;
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) &&
 8000be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d002      	beq.n	8000bf2 <_PrintInt+0x6e>
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d01c      	beq.n	8000c2c <_PrintInt+0xa8>
      ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf4:	f003 0301 	and.w	r3, r3, #1
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) &&
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d117      	bne.n	8000c2c <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d014      	beq.n	8000c2c <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c02:	e00a      	b.n	8000c1a <_PrintInt+0x96>
        FieldWidth--;
 8000c04:	6a3b      	ldr	r3, [r7, #32]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000c0a:	2120      	movs	r1, #32
 8000c0c:	68f8      	ldr	r0, [r7, #12]
 8000c0e:	f7ff fecf 	bl	80009b0 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db07      	blt.n	8000c2a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c1a:	6a3b      	ldr	r3, [r7, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d005      	beq.n	8000c2c <_PrintInt+0xa8>
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d3ed      	bcc.n	8000c04 <_PrintInt+0x80>
 8000c28:	e000      	b.n	8000c2c <_PrintInt+0xa8>
          break;
 8000c2a:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db4a      	blt.n	8000cca <_PrintInt+0x146>
    if (v < 0) {
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	da07      	bge.n	8000c4a <_PrintInt+0xc6>
      v = -v;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	425b      	negs	r3, r3
 8000c3e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000c40:	212d      	movs	r1, #45	@ 0x2d
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f7ff feb4 	bl	80009b0 <_StoreChar>
 8000c48:	e008      	b.n	8000c5c <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) ==
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <_PrintInt+0xd8>
               FORMAT_FLAG_PRINT_SIGN) {
      _StoreChar(pBufferDesc, '+');
 8000c54:	212b      	movs	r1, #43	@ 0x2b
 8000c56:	68f8      	ldr	r0, [r7, #12]
 8000c58:	f7ff feaa 	bl	80009b0 <_StoreChar>
    } else {
    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db32      	blt.n	8000cca <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) &&
 8000c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d01f      	beq.n	8000cae <_PrintInt+0x12a>
          ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) &&
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c70:	f003 0301 	and.w	r3, r3, #1
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) &&
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d11a      	bne.n	8000cae <_PrintInt+0x12a>
          ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) &&
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d117      	bne.n	8000cae <_PrintInt+0x12a>
          (NumDigits == 0u)) {
        if (FieldWidth != 0u) {
 8000c7e:	6a3b      	ldr	r3, [r7, #32]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d014      	beq.n	8000cae <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c84:	e00a      	b.n	8000c9c <_PrintInt+0x118>
            FieldWidth--;
 8000c86:	6a3b      	ldr	r3, [r7, #32]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000c8c:	2130      	movs	r1, #48	@ 0x30
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff fe8e 	bl	80009b0 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db07      	blt.n	8000cac <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d005      	beq.n	8000cae <_PrintInt+0x12a>
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d3ed      	bcc.n	8000c86 <_PrintInt+0x102>
 8000caa:	e000      	b.n	8000cae <_PrintInt+0x12a>
              break;
 8000cac:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db09      	blt.n	8000cca <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth,
 8000cb6:	68b9      	ldr	r1, [r7, #8]
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cba:	9301      	str	r3, [sp, #4]
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68f8      	ldr	r0, [r7, #12]
 8000cc6:	f7ff feb1 	bl	8000a2c <_PrintUnsigned>
                       FormatFlags);
      }
    }
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <SEGGER_RTT_vprintf>:
 *  Return values
 *    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
 *     < 0:  Error
 */
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char* sFormat,
                       va_list* pParamList) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0a2      	sub	sp, #136	@ 0x88
 8000cd8:	af02      	add	r7, sp, #8
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer = acBuffer;
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	653b      	str	r3, [r7, #80]	@ 0x50
  BufferDesc.BufferSize = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000ce6:	2340      	movs	r3, #64	@ 0x40
 8000ce8:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.Cnt = 0u;
 8000cea:	2300      	movs	r3, #0
 8000cec:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	663b      	str	r3, [r7, #96]	@ 0x60
  BufferDesc.ReturnValue = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c

  do {
    c = *sFormat;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    sFormat++;
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	3301      	adds	r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8000d04:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f000 81a4 	beq.w	8001056 <SEGGER_RTT_vprintf+0x382>
      break;
    }
    if (c == '%') {
 8000d0e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d12:	2b25      	cmp	r3, #37	@ 0x25
 8000d14:	f040 8192 	bne.w	800103c <SEGGER_RTT_vprintf+0x368>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	673b      	str	r3, [r7, #112]	@ 0x70
      v = 1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	67bb      	str	r3, [r7, #120]	@ 0x78
      do {
        c = *sFormat;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        switch (c) {
 8000d28:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d2c:	3b23      	subs	r3, #35	@ 0x23
 8000d2e:	2b0d      	cmp	r3, #13
 8000d30:	d83e      	bhi.n	8000db0 <SEGGER_RTT_vprintf+0xdc>
 8000d32:	a201      	add	r2, pc, #4	@ (adr r2, 8000d38 <SEGGER_RTT_vprintf+0x64>)
 8000d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d38:	08000da1 	.word	0x08000da1
 8000d3c:	08000db1 	.word	0x08000db1
 8000d40:	08000db1 	.word	0x08000db1
 8000d44:	08000db1 	.word	0x08000db1
 8000d48:	08000db1 	.word	0x08000db1
 8000d4c:	08000db1 	.word	0x08000db1
 8000d50:	08000db1 	.word	0x08000db1
 8000d54:	08000db1 	.word	0x08000db1
 8000d58:	08000d91 	.word	0x08000d91
 8000d5c:	08000db1 	.word	0x08000db1
 8000d60:	08000d71 	.word	0x08000d71
 8000d64:	08000db1 	.word	0x08000db1
 8000d68:	08000db1 	.word	0x08000db1
 8000d6c:	08000d81 	.word	0x08000d81
          case '-':
            FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY;
 8000d70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	60bb      	str	r3, [r7, #8]
            break;
 8000d7e:	e01a      	b.n	8000db6 <SEGGER_RTT_vprintf+0xe2>
          case '0':
            FormatFlags |= FORMAT_FLAG_PAD_ZERO;
 8000d80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
            break;
 8000d8e:	e012      	b.n	8000db6 <SEGGER_RTT_vprintf+0xe2>
          case '+':
            FormatFlags |= FORMAT_FLAG_PRINT_SIGN;
 8000d90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
            break;
 8000d9e:	e00a      	b.n	8000db6 <SEGGER_RTT_vprintf+0xe2>
          case '#':
            FormatFlags |= FORMAT_FLAG_ALTERNATE;
 8000da0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000da2:	f043 0308 	orr.w	r3, r3, #8
 8000da6:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	3301      	adds	r3, #1
 8000dac:	60bb      	str	r3, [r7, #8]
            break;
 8000dae:	e002      	b.n	8000db6 <SEGGER_RTT_vprintf+0xe2>
          default:
            v = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	67bb      	str	r3, [r7, #120]	@ 0x78
            break;
 8000db4:	bf00      	nop
        }
      } while (v);
 8000db6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1b1      	bne.n	8000d20 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
      do {
        c = *sFormat;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c < '0') || (c > '9')) {
 8000dc8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000dcc:	2b2f      	cmp	r3, #47	@ 0x2f
 8000dce:	d912      	bls.n	8000df6 <SEGGER_RTT_vprintf+0x122>
 8000dd0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000dd4:	2b39      	cmp	r3, #57	@ 0x39
 8000dd6:	d80e      	bhi.n	8000df6 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000dde:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	461a      	mov	r2, r3
 8000dea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000dee:	4413      	add	r3, r2
 8000df0:	3b30      	subs	r3, #48	@ 0x30
 8000df2:	66fb      	str	r3, [r7, #108]	@ 0x6c
        c = *sFormat;
 8000df4:	e7e4      	b.n	8000dc0 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8000df6:	2300      	movs	r3, #0
 8000df8:	677b      	str	r3, [r7, #116]	@ 0x74
      c = *sFormat;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (c == '.') {
 8000e02:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e06:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e08:	d11d      	bne.n	8000e46 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          if ((c < '0') || (c > '9')) {
 8000e18:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e1e:	d912      	bls.n	8000e46 <SEGGER_RTT_vprintf+0x172>
 8000e20:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e24:	2b39      	cmp	r3, #57	@ 0x39
 8000e26:	d80e      	bhi.n	8000e46 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8000e2e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	461a      	mov	r2, r3
 8000e3a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e3e:	4413      	add	r3, r2
 8000e40:	3b30      	subs	r3, #48	@ 0x30
 8000e42:	677b      	str	r3, [r7, #116]	@ 0x74
          c = *sFormat;
 8000e44:	e7e4      	b.n	8000e10 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8000e4e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e52:	2b6c      	cmp	r3, #108	@ 0x6c
 8000e54:	d003      	beq.n	8000e5e <SEGGER_RTT_vprintf+0x18a>
 8000e56:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e5a:	2b68      	cmp	r3, #104	@ 0x68
 8000e5c:	d107      	bne.n	8000e6e <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	3301      	adds	r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c == 'l') || (c == 'h')) {
 8000e6c:	e7ef      	b.n	8000e4e <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000e6e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e72:	2b25      	cmp	r3, #37	@ 0x25
 8000e74:	f000 80d6 	beq.w	8001024 <SEGGER_RTT_vprintf+0x350>
 8000e78:	2b25      	cmp	r3, #37	@ 0x25
 8000e7a:	f2c0 80da 	blt.w	8001032 <SEGGER_RTT_vprintf+0x35e>
 8000e7e:	2b78      	cmp	r3, #120	@ 0x78
 8000e80:	f300 80d7 	bgt.w	8001032 <SEGGER_RTT_vprintf+0x35e>
 8000e84:	2b58      	cmp	r3, #88	@ 0x58
 8000e86:	f2c0 80d4 	blt.w	8001032 <SEGGER_RTT_vprintf+0x35e>
 8000e8a:	3b58      	subs	r3, #88	@ 0x58
 8000e8c:	2b20      	cmp	r3, #32
 8000e8e:	f200 80d0 	bhi.w	8001032 <SEGGER_RTT_vprintf+0x35e>
 8000e92:	a201      	add	r2, pc, #4	@ (adr r2, 8000e98 <SEGGER_RTT_vprintf+0x1c4>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000f8f 	.word	0x08000f8f
 8000e9c:	08001033 	.word	0x08001033
 8000ea0:	08001033 	.word	0x08001033
 8000ea4:	08001033 	.word	0x08001033
 8000ea8:	08001033 	.word	0x08001033
 8000eac:	08001033 	.word	0x08001033
 8000eb0:	08001033 	.word	0x08001033
 8000eb4:	08001033 	.word	0x08001033
 8000eb8:	08001033 	.word	0x08001033
 8000ebc:	08001033 	.word	0x08001033
 8000ec0:	08001033 	.word	0x08001033
 8000ec4:	08000f1d 	.word	0x08000f1d
 8000ec8:	08000f43 	.word	0x08000f43
 8000ecc:	08001033 	.word	0x08001033
 8000ed0:	08001033 	.word	0x08001033
 8000ed4:	08001033 	.word	0x08001033
 8000ed8:	08001033 	.word	0x08001033
 8000edc:	08001033 	.word	0x08001033
 8000ee0:	08001033 	.word	0x08001033
 8000ee4:	08001033 	.word	0x08001033
 8000ee8:	08001033 	.word	0x08001033
 8000eec:	08001033 	.word	0x08001033
 8000ef0:	08001033 	.word	0x08001033
 8000ef4:	08001033 	.word	0x08001033
 8000ef8:	08000fff 	.word	0x08000fff
 8000efc:	08001033 	.word	0x08001033
 8000f00:	08001033 	.word	0x08001033
 8000f04:	08000fb5 	.word	0x08000fb5
 8000f08:	08001033 	.word	0x08001033
 8000f0c:	08000f69 	.word	0x08000f69
 8000f10:	08001033 	.word	0x08001033
 8000f14:	08001033 	.word	0x08001033
 8000f18:	08000f8f 	.word	0x08000f8f
        case 'c': {
          char c0;
          v = va_arg(*pParamList, int);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	1d19      	adds	r1, r3, #4
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	6011      	str	r1, [r2, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	67bb      	str	r3, [r7, #120]	@ 0x78
          c0 = (char)v;
 8000f2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          _StoreChar(&BufferDesc, c0);
 8000f30:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000f34:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fd38 	bl	80009b0 <_StoreChar>
          break;
 8000f40:	e078      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        }
        case 'd':
          v = va_arg(*pParamList, int);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	1d19      	adds	r1, r3, #4
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	6011      	str	r1, [r2, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000f50:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000f54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f5e:	220a      	movs	r2, #10
 8000f60:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000f62:	f7ff fe0f 	bl	8000b84 <_PrintInt>
          break;
 8000f66:	e065      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        case 'u':
          v = va_arg(*pParamList, int);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	1d19      	adds	r1, r3, #4
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	6011      	str	r1, [r2, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth,
 8000f76:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000f78:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000f7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f86:	220a      	movs	r2, #10
 8000f88:	f7ff fd50 	bl	8000a2c <_PrintUnsigned>
                         FormatFlags);
          break;
 8000f8c:	e052      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        case 'x':
        case 'X':
          v = va_arg(*pParamList, int);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1d19      	adds	r1, r3, #4
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	6011      	str	r1, [r2, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth,
 8000f9c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000f9e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000fa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fac:	2210      	movs	r2, #16
 8000fae:	f7ff fd3d 	bl	8000a2c <_PrintUnsigned>
                         FormatFlags);
          break;
 8000fb2:	e03f      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        case 's': {
          const char* s = va_arg(*pParamList, const char*);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	1d19      	adds	r1, r3, #4
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6011      	str	r1, [r2, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
          if (s == NULL) {
 8000fc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d101      	bne.n	8000fcc <SEGGER_RTT_vprintf+0x2f8>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as
 8000fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001084 <SEGGER_RTT_vprintf+0x3b0>)
 8000fca:	66bb      	str	r3, [r7, #104]	@ 0x68
                           // it is more informative to the user.
          }
          do {
            c = *s;
 8000fcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            s++;
 8000fd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (c == '\0') {
 8000fda:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00b      	beq.n	8000ffa <SEGGER_RTT_vprintf+0x326>
              break;
            }
            _StoreChar(&BufferDesc, c);
 8000fe2:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8000fe6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fcdf 	bl	80009b0 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8000ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	dae9      	bge.n	8000fcc <SEGGER_RTT_vprintf+0x2f8>
        } break;
 8000ff8:	e01c      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
              break;
 8000ffa:	bf00      	nop
        } break;
 8000ffc:	e01a      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        case 'p':
          v = va_arg(*pParamList, int);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	1d19      	adds	r1, r3, #4
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6011      	str	r1, [r2, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800100c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800100e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001012:	2300      	movs	r3, #0
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	2308      	movs	r3, #8
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2308      	movs	r3, #8
 800101c:	2210      	movs	r2, #16
 800101e:	f7ff fd05 	bl	8000a2c <_PrintUnsigned>
          break;
 8001022:	e007      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        case '%':
          _StoreChar(&BufferDesc, '%');
 8001024:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001028:	2125      	movs	r1, #37	@ 0x25
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fcc0 	bl	80009b0 <_StoreChar>
          break;
 8001030:	e000      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        default:
          break;
 8001032:	bf00      	nop
      }
      sFormat++;
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	3301      	adds	r3, #1
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	e007      	b.n	800104c <SEGGER_RTT_vprintf+0x378>
    } else {
      _StoreChar(&BufferDesc, c);
 800103c:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8001040:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fcb2 	bl	80009b0 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 800104c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800104e:	2b00      	cmp	r3, #0
 8001050:	f6bf ae51 	bge.w	8000cf6 <SEGGER_RTT_vprintf+0x22>
 8001054:	e000      	b.n	8001058 <SEGGER_RTT_vprintf+0x384>
      break;
 8001056:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8001058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800105a:	2b00      	cmp	r3, #0
 800105c:	dd0d      	ble.n	800107a <SEGGER_RTT_vprintf+0x3a6>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 800105e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <SEGGER_RTT_vprintf+0x39e>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8001064:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4619      	mov	r1, r3
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff fc79 	bl	8000964 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8001072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001074:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001076:	4413      	add	r3, r2
 8001078:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }
  return BufferDesc.ReturnValue;
 800107a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800107c:	4618      	mov	r0, r3
 800107e:	3780      	adds	r7, #128	@ 0x80
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	080192ec 	.word	0x080192ec

08001088 <SEGGER_RTT_printf>:
 *          x: Print the argument as an hexadecimal integer
 *          s: Print the string pointed to by the argument
 *          p: Print the argument as an 8-digit hexadecimal integer. (Argument
 * shall be a pointer to void.)
 */
int SEGGER_RTT_printf(unsigned BufferIndex, const char* sFormat, ...) {
 8001088:	b40e      	push	{r1, r2, r3}
 800108a:	b580      	push	{r7, lr}
 800108c:	b085      	sub	sp, #20
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	461a      	mov	r2, r3
 800109e:	69f9      	ldr	r1, [r7, #28]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fe17 	bl	8000cd4 <SEGGER_RTT_vprintf>
 80010a6:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 80010a8:	68fb      	ldr	r3, [r7, #12]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010b4:	b003      	add	sp, #12
 80010b6:	4770      	bx	lr

080010b8 <bq79600_construct_command>:
#include <main.h>
#define MAX_INSTANCE 1
static bq79600_t instance_list[MAX_INSTANCE] = {0};

void bq79600_construct_command(bq79600_t *instance, REQ_TYPE req_type, uint8_t addr, uint16_t reg_addr,
                               uint8_t data_len, uint8_t *data) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	4608      	mov	r0, r1
 80010c2:	4611      	mov	r1, r2
 80010c4:	461a      	mov	r2, r3
 80010c6:	4603      	mov	r3, r0
 80010c8:	70fb      	strb	r3, [r7, #3]
 80010ca:	460b      	mov	r3, r1
 80010cc:	70bb      	strb	r3, [r7, #2]
 80010ce:	4613      	mov	r3, r2
 80010d0:	803b      	strh	r3, [r7, #0]
  uint8_t *tx_buf = instance->tx_buf;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	330c      	adds	r3, #12
 80010d6:	617b      	str	r3, [r7, #20]
  *tx_buf++ = 0x80 | (req_type << 4) | ((req_type & 1) ? ((data_len - 1) & 0x0F) : 0);
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010e2:	b25a      	sxtb	r2, r3
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d008      	beq.n	8001100 <bq79600_construct_command+0x48>
 80010ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	f003 030f 	and.w	r3, r3, #15
 80010fc:	b25b      	sxtb	r3, r3
 80010fe:	e000      	b.n	8001102 <bq79600_construct_command+0x4a>
 8001100:	2300      	movs	r3, #0
 8001102:	4313      	orrs	r3, r2
 8001104:	b259      	sxtb	r1, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	617a      	str	r2, [r7, #20]
 800110c:	b2ca      	uxtb	r2, r1
 800110e:	701a      	strb	r2, [r3, #0]
  if (req_type < 2) *tx_buf++ = addr & 0x3F;
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d807      	bhi.n	8001126 <bq79600_construct_command+0x6e>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	617a      	str	r2, [r7, #20]
 800111c:	78ba      	ldrb	r2, [r7, #2]
 800111e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	701a      	strb	r2, [r3, #0]
  *tx_buf++ = (reg_addr >> 8) & 0xFF;
 8001126:	883b      	ldrh	r3, [r7, #0]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b299      	uxth	r1, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	617a      	str	r2, [r7, #20]
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
  *tx_buf++ = reg_addr & 0xFF;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	617a      	str	r2, [r7, #20]
 800113c:	883a      	ldrh	r2, [r7, #0]
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]
  if (data)
 8001142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001144:	2b00      	cmp	r3, #0
 8001146:	d013      	beq.n	8001170 <bq79600_construct_command+0xb8>
    for (int i = 0; i < data_len; i++) *tx_buf++ = data[i];
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	e00a      	b.n	8001164 <bq79600_construct_command+0xac>
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001152:	441a      	add	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	1c59      	adds	r1, r3, #1
 8001158:	6179      	str	r1, [r7, #20]
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	3301      	adds	r3, #1
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	429a      	cmp	r2, r3
 800116c:	dbef      	blt.n	800114e <bq79600_construct_command+0x96>
 800116e:	e007      	b.n	8001180 <bq79600_construct_command+0xc8>
  else
    *tx_buf++ = data_len - 1;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	617a      	str	r2, [r7, #20]
 8001176:	f897 2020 	ldrb.w	r2, [r7, #32]
 800117a:	3a01      	subs	r2, #1
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	701a      	strb	r2, [r3, #0]
  if (req_type >= 2) data_len = 0;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d902      	bls.n	800118c <bq79600_construct_command+0xd4>
 8001186:	2300      	movs	r3, #0
 8001188:	f887 3020 	strb.w	r3, [r7, #32]
  uint16_t crc = bq79600_bsp_crc(instance->tx_buf, 4 + data_len);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f103 020c 	add.w	r2, r3, #12
 8001192:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001196:	3304      	adds	r3, #4
 8001198:	4619      	mov	r1, r3
 800119a:	4610      	mov	r0, r2
 800119c:	f000 fa80 	bl	80016a0 <bq79600_bsp_crc>
 80011a0:	4603      	mov	r3, r0
 80011a2:	81fb      	strh	r3, [r7, #14]
  *tx_buf++ = crc & 0xFF;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	617a      	str	r2, [r7, #20]
 80011aa:	89fa      	ldrh	r2, [r7, #14]
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	701a      	strb	r2, [r3, #0]
  *tx_buf++ = (crc >> 8) & 0xFF;
 80011b0:	89fb      	ldrh	r3, [r7, #14]
 80011b2:	0a1b      	lsrs	r3, r3, #8
 80011b4:	b299      	uxth	r1, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	617a      	str	r2, [r7, #20]
 80011bc:	b2ca      	uxtb	r2, r1
 80011be:	701a      	strb	r2, [r3, #0]
  instance->tx_len = tx_buf - instance->tx_buf;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	330c      	adds	r3, #12
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f883 281a 	strb.w	r2, [r3, #2074]	@ 0x81a
}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <bq79600_tx>:

void bq79600_tx(bq79600_t *instance) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  instance->ready = 0;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 281d 	strb.w	r2, [r3, #2077]	@ 0x81d
  SEGGER_RTT_printf(0, "[BQ79600] TX: ");
 80011e8:	4915      	ldr	r1, [pc, #84]	@ (8001240 <bq79600_tx+0x68>)
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff ff4c 	bl	8001088 <SEGGER_RTT_printf>
  for (int i = 0; i < instance->tx_len; i++) SEGGER_RTT_printf(0, "%02X ", instance->tx_buf[i]);
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e00c      	b.n	8001210 <bq79600_tx+0x38>
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	330c      	adds	r3, #12
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4910      	ldr	r1, [pc, #64]	@ (8001244 <bq79600_tx+0x6c>)
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff ff3f 	bl	8001088 <SEGGER_RTT_printf>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3301      	adds	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4293      	cmp	r3, r2
 800121c:	dbeb      	blt.n	80011f6 <bq79600_tx+0x1e>
  SEGGER_RTT_printf(0, "\n");
 800121e:	490a      	ldr	r1, [pc, #40]	@ (8001248 <bq79600_tx+0x70>)
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff ff31 	bl	8001088 <SEGGER_RTT_printf>
  switch (instance->mode) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7a9b      	ldrb	r3, [r3, #10]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d103      	bne.n	8001236 <bq79600_tx+0x5e>
    case BQ_UART:
      bq79600_bsp_uart_tx(instance);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 fa1e 	bl	8001670 <bq79600_bsp_uart_tx>
      break;
 8001234:	e000      	b.n	8001238 <bq79600_tx+0x60>
    default:
      break;
 8001236:	bf00      	nop
  }
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	080192f4 	.word	0x080192f4
 8001244:	08019304 	.word	0x08019304
 8001248:	0801930c 	.word	0x0801930c

0800124c <bq79600_rx_callback>:

void bq79600_rx_callback(bq79600_t *instance) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b0aa      	sub	sp, #168	@ 0xa8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if (instance->rx_len < 6) return;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 800125a:	2b05      	cmp	r3, #5
 800125c:	f240 80d8 	bls.w	8001410 <bq79600_rx_callback+0x1c4>
  SEGGER_RTT_printf(0, "[BQ79600] RX[%d]: ", instance->rx_len);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 8001266:	461a      	mov	r2, r3
 8001268:	496b      	ldr	r1, [pc, #428]	@ (8001418 <bq79600_rx_callback+0x1cc>)
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff ff0c 	bl	8001088 <SEGGER_RTT_printf>
  for (int i = 0; i < instance->rx_len; i++) SEGGER_RTT_printf(0, "%02X ", instance->rx_buf[i]);
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001276:	e00f      	b.n	8001298 <bq79600_rx_callback+0x4c>
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800127e:	4413      	add	r3, r2
 8001280:	331a      	adds	r3, #26
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4965      	ldr	r1, [pc, #404]	@ (800141c <bq79600_rx_callback+0x1d0>)
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fefd 	bl	8001088 <SEGGER_RTT_printf>
 800128e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001292:	3301      	adds	r3, #1
 8001294:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 800129e:	461a      	mov	r2, r3
 80012a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012a4:	4293      	cmp	r3, r2
 80012a6:	dbe7      	blt.n	8001278 <bq79600_rx_callback+0x2c>
  SEGGER_RTT_printf(0, "\n");
 80012a8:	495d      	ldr	r1, [pc, #372]	@ (8001420 <bq79600_rx_callback+0x1d4>)
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff feec 	bl	8001088 <SEGGER_RTT_printf>

  size_t idx = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  uint8_t crc_buf[128 + 6];
  while (idx < instance->rx_len) {
 80012b6:	e099      	b.n	80013ec <bq79600_rx_callback+0x1a0>
    for (int i = 0; i < 4; i++) crc_buf[i] = instance->rx_buf[idx++];
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80012be:	e013      	b.n	80012e8 <bq79600_rx_callback+0x9c>
 80012c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	7e99      	ldrb	r1, [r3, #26]
 80012d0:	f107 020c 	add.w	r2, r7, #12
 80012d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80012d8:	4413      	add	r3, r2
 80012da:	460a      	mov	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80012e2:	3301      	adds	r3, #1
 80012e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80012e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	dde7      	ble.n	80012c0 <bq79600_rx_callback+0x74>
    uint8_t len = (crc_buf[0] & 0x7F) + 1;
 80012f0:	7b3b      	ldrb	r3, [r7, #12]
 80012f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	3301      	adds	r3, #1
 80012fa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    for (int i = 0; i < len; i++) crc_buf[4 + i] = instance->rx_buf[idx++];
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001304:	e015      	b.n	8001332 <bq79600_rx_callback+0xe6>
 8001306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001310:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001314:	3204      	adds	r2, #4
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	440b      	add	r3, r1
 800131a:	7e99      	ldrb	r1, [r3, #26]
 800131c:	f102 03a8 	add.w	r3, r2, #168	@ 0xa8
 8001320:	443b      	add	r3, r7
 8001322:	460a      	mov	r2, r1
 8001324:	f803 2c9c 	strb.w	r2, [r3, #-156]
 8001328:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800132c:	3301      	adds	r3, #1
 800132e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001332:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001336:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800133a:	429a      	cmp	r2, r3
 800133c:	dbe3      	blt.n	8001306 <bq79600_rx_callback+0xba>
    crc_buf[4 + len] = instance->rx_buf[idx++];
 800133e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001348:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800134c:	3204      	adds	r2, #4
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	440b      	add	r3, r1
 8001352:	7e99      	ldrb	r1, [r3, #26]
 8001354:	f102 03a8 	add.w	r3, r2, #168	@ 0xa8
 8001358:	443b      	add	r3, r7
 800135a:	460a      	mov	r2, r1
 800135c:	f803 2c9c 	strb.w	r2, [r3, #-156]
    crc_buf[5 + len] = instance->rx_buf[idx++];
 8001360:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800136a:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800136e:	3205      	adds	r2, #5
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	440b      	add	r3, r1
 8001374:	7e99      	ldrb	r1, [r3, #26]
 8001376:	f102 03a8 	add.w	r3, r2, #168	@ 0xa8
 800137a:	443b      	add	r3, r7
 800137c:	460a      	mov	r2, r1
 800137e:	f803 2c9c 	strb.w	r2, [r3, #-156]
    uint16_t crc = bq79600_bsp_crc(crc_buf, len + 4);
 8001382:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001386:	3304      	adds	r3, #4
 8001388:	461a      	mov	r2, r3
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f985 	bl	80016a0 <bq79600_bsp_crc>
 8001396:	4603      	mov	r3, r0
 8001398:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    uint16_t crc_rx = (crc_buf[4 + len] << 8) | crc_buf[5 + len];
 800139c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80013a0:	3304      	adds	r3, #4
 80013a2:	33a8      	adds	r3, #168	@ 0xa8
 80013a4:	443b      	add	r3, r7
 80013a6:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80013b2:	3305      	adds	r3, #5
 80013b4:	33a8      	adds	r3, #168	@ 0xa8
 80013b6:	443b      	add	r3, r7
 80013b8:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    if (!(crc ^ crc_rx)) {
 80013c6:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 80013ca:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d10c      	bne.n	80013ec <bq79600_rx_callback+0x1a0>
      SEGGER_RTT_printf(0, "[BQ79600] CRC error: %04X %04X\n", crc, crc_rx);
 80013d2:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 80013d6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80013da:	4912      	ldr	r1, [pc, #72]	@ (8001424 <bq79600_rx_callback+0x1d8>)
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff fe53 	bl	8001088 <SEGGER_RTT_printf>
      instance->fault = 1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
      return;
 80013ea:	e012      	b.n	8001412 <bq79600_rx_callback+0x1c6>
  while (idx < instance->rx_len) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 80013f2:	461a      	mov	r2, r3
 80013f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80013f8:	4293      	cmp	r3, r2
 80013fa:	f4ff af5d 	bcc.w	80012b8 <bq79600_rx_callback+0x6c>
    }
  }
  instance->fault = 0;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
  instance->ready = 1;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 281d 	strb.w	r2, [r3, #2077]	@ 0x81d
 800140e:	e000      	b.n	8001412 <bq79600_rx_callback+0x1c6>
  if (instance->rx_len < 6) return;
 8001410:	bf00      	nop
}
 8001412:	37a8      	adds	r7, #168	@ 0xa8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	08019310 	.word	0x08019310
 800141c:	08019304 	.word	0x08019304
 8001420:	0801930c 	.word	0x0801930c
 8001424:	08019324 	.word	0x08019324

08001428 <bq79600_write_reg>:
  bq79600_bsp_ready(instance);
  *data = instance->rx_buf[4];
}
extern UART_HandleTypeDef huart4;
void bq79600_write_reg(bq79600_t *instance, uint8_t dev_addr, uint16_t reg_addr, uint8_t *data,
                       uint8_t data_len) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af02      	add	r7, sp, #8
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	72fb      	strb	r3, [r7, #11]
 8001436:	4613      	mov	r3, r2
 8001438:	813b      	strh	r3, [r7, #8]
  bq79600_construct_command(instance, SINGLE_DEVICE_WRITE, dev_addr, reg_addr, data_len, data);
 800143a:	8939      	ldrh	r1, [r7, #8]
 800143c:	7afa      	ldrb	r2, [r7, #11]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	7e3b      	ldrb	r3, [r7, #24]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	460b      	mov	r3, r1
 8001448:	2101      	movs	r1, #1
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7ff fe34 	bl	80010b8 <bq79600_construct_command>
  //bq79600_tx(instance);
  HAL_UART_Transmit(&huart4, instance->tx_buf , instance->tx_len,100);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f103 010c 	add.w	r1, r3, #12
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 800145c:	461a      	mov	r2, r3
 800145e:	2364      	movs	r3, #100	@ 0x64
 8001460:	4803      	ldr	r0, [pc, #12]	@ (8001470 <bq79600_write_reg+0x48>)
 8001462:	f00c fd86 	bl	800df72 <HAL_UART_Transmit>
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	24001008 	.word	0x24001008

08001474 <open_bq79600_instance>:

bq79600_t *open_bq79600_instance(uint32_t id) {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if (id >= MAX_INSTANCE) return NULL;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <open_bq79600_instance+0x12>
 8001482:	2300      	movs	r3, #0
 8001484:	e006      	b.n	8001494 <open_bq79600_instance+0x20>
  return &instance_list[id];
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	019b      	lsls	r3, r3, #6
 800148c:	4413      	add	r3, r2
 800148e:	015b      	lsls	r3, r3, #5
 8001490:	4a03      	ldr	r2, [pc, #12]	@ (80014a0 <open_bq79600_instance+0x2c>)
 8001492:	4413      	add	r3, r2
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	2400064c 	.word	0x2400064c

080014a4 <bq79600_auto_addressing>:
  }
  instance->state = BQ_ACTIVATE;
  SEGGER_RTT_printf(0, "[BQ79600] wakeup.\n");
}

bq79600_error_t bq79600_auto_addressing(bq79600_t *instance, const size_t n_devices) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint8_t buf = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]
  for (int addr = 0x343; addr < 0x34B; addr++) {
 80014b2:	f240 3343 	movw	r3, #835	@ 0x343
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	e012      	b.n	80014e0 <bq79600_auto_addressing+0x3c>
    bq79600_construct_command(instance, STACK_WRITE, 0, addr, 1, &buf);
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	f107 030f 	add.w	r3, r7, #15
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	2301      	movs	r3, #1
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	4613      	mov	r3, r2
 80014ca:	2200      	movs	r2, #0
 80014cc:	2103      	movs	r1, #3
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fdf2 	bl	80010b8 <bq79600_construct_command>
    bq79600_tx(instance);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fe7f 	bl	80011d8 <bq79600_tx>
  for (int addr = 0x343; addr < 0x34B; addr++) {
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f240 324a 	movw	r2, #842	@ 0x34a
 80014e6:	4293      	cmp	r3, r2
 80014e8:	dde7      	ble.n	80014ba <bq79600_auto_addressing+0x16>
  }
  instance->fault = 0 ;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
  // Enable auto addressing
  buf = 0x01;
 80014f2:	2301      	movs	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
  bq79600_construct_command(instance, BROADCAST_WRITE, 0, CONTROL1, 1, &buf);
 80014f6:	f107 030f 	add.w	r3, r7, #15
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	2301      	movs	r3, #1
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	f240 3309 	movw	r3, #777	@ 0x309
 8001504:	2200      	movs	r2, #0
 8001506:	2105      	movs	r1, #5
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fdd5 	bl	80010b8 <bq79600_construct_command>
  bq79600_tx(instance);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fe62 	bl	80011d8 <bq79600_tx>
  // brdcast write consecutively to 0x306
  for (size_t i = 0; i < n_devices; i++) {
 8001514:	2300      	movs	r3, #0
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	e014      	b.n	8001544 <bq79600_auto_addressing+0xa0>
    buf = i;
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	73fb      	strb	r3, [r7, #15]
    bq79600_construct_command(instance, BROADCAST_WRITE, 0, DIR0_ADDR, 1, &buf);
 8001520:	f107 030f 	add.w	r3, r7, #15
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	2301      	movs	r3, #1
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	f240 3306 	movw	r3, #774	@ 0x306
 800152e:	2200      	movs	r2, #0
 8001530:	2105      	movs	r1, #5
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff fdc0 	bl	80010b8 <bq79600_construct_command>
    bq79600_tx(instance);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff fe4d 	bl	80011d8 <bq79600_tx>
  for (size_t i = 0; i < n_devices; i++) {
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	3301      	adds	r3, #1
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d3e6      	bcc.n	800151a <bq79600_auto_addressing+0x76>
  }
  // brdcast write 0x02 to address 0x308 (set BQ7961X-Q1 as stack device )
  buf = 0x02;
 800154c:	2302      	movs	r3, #2
 800154e:	73fb      	strb	r3, [r7, #15]
  bq79600_construct_command(instance, BROADCAST_WRITE, 0, COMM_CTRL, 1, &buf);
 8001550:	f107 030f 	add.w	r3, r7, #15
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	2301      	movs	r3, #1
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	f44f 7342 	mov.w	r3, #776	@ 0x308
 800155e:	2200      	movs	r2, #0
 8001560:	2105      	movs	r1, #5
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fda8 	bl	80010b8 <bq79600_construct_command>
  bq79600_tx(instance);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fe35 	bl	80011d8 <bq79600_tx>

  buf = 0x03;
 800156e:	2303      	movs	r3, #3
 8001570:	73fb      	strb	r3, [r7, #15]
  bq79600_construct_command(instance, SINGLE_DEVICE_WRITE, n_devices - 1, COMM_CTRL, 1, &buf);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	3b01      	subs	r3, #1
 8001578:	b2da      	uxtb	r2, r3
 800157a:	f107 030f 	add.w	r3, r7, #15
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	2301      	movs	r3, #1
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8001588:	2101      	movs	r1, #1
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff fd94 	bl	80010b8 <bq79600_construct_command>
  bq79600_tx(instance);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fe21 	bl	80011d8 <bq79600_tx>

  for (int addr = 0x343; addr < 0x34B; addr++) {
 8001596:	f240 3343 	movw	r3, #835	@ 0x343
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e01a      	b.n	80015d4 <bq79600_auto_addressing+0x130>
    bq79600_construct_command(instance, STACK_READ, 0, addr, 1, NULL);
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2200      	movs	r2, #0
 80015a4:	9201      	str	r2, [sp, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	9200      	str	r2, [sp, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	2102      	movs	r1, #2
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fd82 	bl	80010b8 <bq79600_construct_command>
    bq79600_tx(instance);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fe0f 	bl	80011d8 <bq79600_tx>
    bq79600_bsp_ready(instance);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f837 	bl	800162e <bq79600_bsp_ready>
   // uint8_t comm_ctrl[6] = {0};
    //if (HAL_UART_Receive(&huart4, instance->rx_buf , instance->rx_len ,100) != HAL_OK)  return BQ_ERROR  ;
   // HAL_UART_Receive(&huart4, comm_ctrl , 6 ,100);
   if (instance->fault)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <bq79600_auto_addressing+0x12a>
	   return BQ_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e02b      	b.n	8001626 <bq79600_auto_addressing+0x182>
  for (int addr = 0x343; addr < 0x34B; addr++) {
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3301      	adds	r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f240 324a 	movw	r2, #842	@ 0x34a
 80015da:	4293      	cmp	r3, r2
 80015dc:	dddf      	ble.n	800159e <bq79600_auto_addressing+0xfa>



  }

  for (size_t i = 0; i < n_devices; i++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	e01b      	b.n	800161c <bq79600_auto_addressing+0x178>
    bq79600_construct_command(instance, SINGLE_DEVICE_READ, i, DIR0_ADDR, 1, NULL);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	2300      	movs	r3, #0
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	2301      	movs	r3, #1
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	f240 3306 	movw	r3, #774	@ 0x306
 80015f4:	2100      	movs	r1, #0
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fd5e 	bl	80010b8 <bq79600_construct_command>
    bq79600_tx(instance);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fdeb 	bl	80011d8 <bq79600_tx>
   // if (HAL_UART_Receive(&huart4, instance->rx_buf , instance->rx_len ,100) != HAL_OK)  return BQ_ERROR  ;
     bq79600_bsp_ready(instance);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f813 	bl	800162e <bq79600_bsp_ready>
    if (instance->fault)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <bq79600_auto_addressing+0x172>
    	return BQ_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e007      	b.n	8001626 <bq79600_auto_addressing+0x182>
  for (size_t i = 0; i < n_devices; i++) {
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	3301      	adds	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d3df      	bcc.n	80015e4 <bq79600_auto_addressing+0x140>
  }
  return BQ_SUCCESS;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <bq79600_bsp_ready>:
  HAL_GPIO_Init((GPIO_TypeDef *)instance->rx_port, &GPIO_InitStruct);
  HAL_UART_DeInit(&huart4);
  MX_UART4_Init(1000000);
}

void bq79600_bsp_ready(bq79600_t *instance) {
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  /* Change here to non-blocking mode if using RTOS */
  const uint32_t timeout = 1000;  // 1 second timeout
 8001636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163a:	60fb      	str	r3, [r7, #12]
  uint32_t now = HAL_GetTick();
 800163c:	f002 f8d2 	bl	80037e4 <HAL_GetTick>
 8001640:	60b8      	str	r0, [r7, #8]
  while (instance->ready == 0) {
 8001642:	e00c      	b.n	800165e <bq79600_bsp_ready+0x30>
    if (now - HAL_GetTick() > timeout) {
 8001644:	f002 f8ce 	bl	80037e4 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d204      	bcs.n	800165e <bq79600_bsp_ready+0x30>
      instance->fault = 1;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
      return;
 800165c:	e004      	b.n	8001668 <bq79600_bsp_ready+0x3a>
  while (instance->ready == 0) {
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 381d 	ldrb.w	r3, [r3, #2077]	@ 0x81d
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0ed      	beq.n	8001644 <bq79600_bsp_ready+0x16>
    }
  }
}
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <bq79600_bsp_uart_tx>:

extern UART_HandleTypeDef huart4;
void bq79600_bsp_uart_tx(bq79600_t *instance) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4, instance->tx_buf, instance->tx_len , 100);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f103 010c 	add.w	r1, r3, #12
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 8001684:	461a      	mov	r2, r3
 8001686:	2364      	movs	r3, #100	@ 0x64
 8001688:	4804      	ldr	r0, [pc, #16]	@ (800169c <bq79600_bsp_uart_tx+0x2c>)
 800168a:	f00c fc72 	bl	800df72 <HAL_UART_Transmit>
  HAL_Delay(1);
 800168e:	2001      	movs	r0, #1
 8001690:	f002 f8b4 	bl	80037fc <HAL_Delay>
  //uint8_t UART1_rxBuffer[12] = {0};//
  //HAL_UART_Transmit_DMA(&huart4, UART1_rxBuffer, 12);//
 // huart4.gState = HAL_UART_STATE_READY;
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	24001008 	.word	0x24001008

080016a0 <bq79600_bsp_crc>:

uint32_t bq79600_bsp_crc(uint8_t *buf, size_t len) {
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0xFFFF;
 80016aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016ae:	60fb      	str	r3, [r7, #12]
  for (size_t i = 0; i < len; i++) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	e014      	b.n	80016e0 <bq79600_bsp_crc+0x40>
    crc ^= (uint16_t)(*buf++) & 0x00FF;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4053      	eors	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
    crc = crc16_table[crc & 0x00FF] ^ (crc >> 8);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4a0b      	ldr	r2, [pc, #44]	@ (80016f8 <bq79600_bsp_crc+0x58>)
 80016cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016d0:	461a      	mov	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	4053      	eors	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
  for (size_t i = 0; i < len; i++) {
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	3301      	adds	r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d3e6      	bcc.n	80016b6 <bq79600_bsp_crc+0x16>
  }
  return crc;
 80016e8:	68fb      	ldr	r3, [r7, #12]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	08019630 	.word	0x08019630

080016fc <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
return 0;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <gpio_ratio_to_celsius>:
  float R0 ;     // 10k at 25°C
  float B ;       // e.g., 3380
} ntc_cfg_t;

float gpio_ratio_to_celsius(float gpio_meas, float tsref_meas, ntc_cfg_t cfg)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	ed2d 8b02 	vpush	{d8}
 8001722:	b08e      	sub	sp, #56	@ 0x38
 8001724:	af00      	add	r7, sp, #0
 8001726:	ed87 0a05 	vstr	s0, [r7, #20]
 800172a:	edc7 0a04 	vstr	s1, [r7, #16]
 800172e:	eeb0 6a41 	vmov.f32	s12, s2
 8001732:	eef0 6a61 	vmov.f32	s13, s3
 8001736:	eeb0 7a42 	vmov.f32	s14, s4
 800173a:	eef0 7a62 	vmov.f32	s15, s5
 800173e:	ed87 6a00 	vstr	s12, [r7]
 8001742:	edc7 6a01 	vstr	s13, [r7, #4]
 8001746:	ed87 7a02 	vstr	s14, [r7, #8]
 800174a:	edc7 7a03 	vstr	s15, [r7, #12]
    // 1) ratiometric ratio g = Vgpio / Vtsref
    float g = gpio_meas / tsref_meas;
 800174e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001752:	ed97 7a04 	vldr	s14, [r7, #16]
 8001756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800175a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (g <= 0.0f) return -273.15f;        // out-of-range guard
 800175e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001762:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	d802      	bhi.n	8001772 <gpio_ratio_to_celsius+0x56>
 800176c:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8001850 <gpio_ratio_to_celsius+0x134>
 8001770:	e067      	b.n	8001842 <gpio_ratio_to_celsius+0x126>
    if (g >= 0.9999f) g = 0.9999f;         // avoid div-by-zero
 8001772:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001776:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001854 <gpio_ratio_to_celsius+0x138>
 800177a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	db01      	blt.n	8001788 <gpio_ratio_to_celsius+0x6c>
 8001784:	4b34      	ldr	r3, [pc, #208]	@ (8001858 <gpio_ratio_to_celsius+0x13c>)
 8001786:	637b      	str	r3, [r7, #52]	@ 0x34

    // 2) Equivalent bottom resistance from ratio
    float Req = (g * cfg.R_top) / (1.0f - g);
 8001788:	ed97 7a00 	vldr	s14, [r7]
 800178c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001790:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001794:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001798:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800179c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // 3) Solve NTC resistance from Req = (Rntc || R_bias)
    float denom = cfg.R_bias - Req;
 80017a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80017ac:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80017b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    if (denom <= 1e-6f) denom = 1e-6f;     // guard
 80017b8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80017bc:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800185c <gpio_ratio_to_celsius+0x140>
 80017c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c8:	d801      	bhi.n	80017ce <gpio_ratio_to_celsius+0xb2>
 80017ca:	4b25      	ldr	r3, [pc, #148]	@ (8001860 <gpio_ratio_to_celsius+0x144>)
 80017cc:	633b      	str	r3, [r7, #48]	@ 0x30
    float Rntc = (Req * cfg.R_bias) / denom;
 80017ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80017d2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80017d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80017da:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80017de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // 4) Beta model -> temperature
    const float T0 = 298.15f;              // 25°C in Kelvin
 80017e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001864 <gpio_ratio_to_celsius+0x148>)
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
    float invT = (1.0f / T0) + (1.0f / cfg.B) * logf(Rntc / cfg.R0);
 80017ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017ee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017f2:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80017f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017fe:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8001802:	edd7 7a02 	vldr	s15, [r7, #8]
 8001806:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800180a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800180e:	eeb0 0a66 	vmov.f32	s0, s13
 8001812:	f017 fcc3 	bl	801919c <logf>
 8001816:	eef0 7a40 	vmov.f32	s15, s0
 800181a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800181e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001822:	edc7 7a08 	vstr	s15, [r7, #32]
    float T_K = 1.0f / invT;
 8001826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800182a:	ed97 7a08 	vldr	s14, [r7, #32]
 800182e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001832:	edc7 7a07 	vstr	s15, [r7, #28]
    return T_K - 273.15f;
 8001836:	edd7 7a07 	vldr	s15, [r7, #28]
 800183a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001868 <gpio_ratio_to_celsius+0x14c>
 800183e:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8001842:	eeb0 0a67 	vmov.f32	s0, s15
 8001846:	3738      	adds	r7, #56	@ 0x38
 8001848:	46bd      	mov	sp, r7
 800184a:	ecbd 8b02 	vpop	{d8}
 800184e:	bd80      	pop	{r7, pc}
 8001850:	c3889333 	.word	0xc3889333
 8001854:	3f7ff972 	.word	0x3f7ff972
 8001858:	3f7ff972 	.word	0x3f7ff972
 800185c:	358637bd 	.word	0x358637bd
 8001860:	358637bd 	.word	0x358637bd
 8001864:	43951333 	.word	0x43951333
 8001868:	43889333 	.word	0x43889333

0800186c <raw_to_float>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


float raw_to_float(void *raw) {
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return (float)(int16_t)(((*(uint16_t *)raw & 0xFF) << 8) | ((*(uint16_t *)raw & 0xFF00) >> 8));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	b21a      	sxth	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	b29b      	uxth	r3, r3
 8001884:	b21b      	sxth	r3, r3
 8001886:	4313      	orrs	r3, r2
 8001888:	b21b      	sxth	r3, r3
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
  static bq79600_t *instance = NULL;
  instance = open_bq79600_instance(0);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f7ff fde1 	bl	8001474 <open_bq79600_instance>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4a11      	ldr	r2, [pc, #68]	@ (80018fc <HAL_UARTEx_RxEventCallback+0x5c>)
 80018b6:	6013      	str	r3, [r2, #0]
  if (instance == NULL) instance = open_bq79600_instance(0);
 80018b8:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <HAL_UARTEx_RxEventCallback+0x5c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d105      	bne.n	80018cc <HAL_UARTEx_RxEventCallback+0x2c>
 80018c0:	2000      	movs	r0, #0
 80018c2:	f7ff fdd7 	bl	8001474 <open_bq79600_instance>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a0c      	ldr	r2, [pc, #48]	@ (80018fc <HAL_UARTEx_RxEventCallback+0x5c>)
 80018ca:	6013      	str	r3, [r2, #0]
  instance->rx_len = size;
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <HAL_UARTEx_RxEventCallback+0x5c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	887a      	ldrh	r2, [r7, #2]
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	f883 281b 	strb.w	r2, [r3, #2075]	@ 0x81b
  bq79600_rx_callback(instance);
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <HAL_UARTEx_RxEventCallback+0x5c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fcb5 	bl	800124c <bq79600_rx_callback>
  HAL_UARTEx_ReceiveToIdle_IT(&huart4, instance->rx_buf, sizeof(instance->rx_buf));
 80018e2:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_UARTEx_RxEventCallback+0x5c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	331a      	adds	r3, #26
 80018e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018ec:	4619      	mov	r1, r3
 80018ee:	4804      	ldr	r0, [pc, #16]	@ (8001900 <HAL_UARTEx_RxEventCallback+0x60>)
 80018f0:	f00f f8b7 	bl	8010a62 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	24001850 	.word	0x24001850
 8001900:	24001008 	.word	0x24001008

08001904 <USB_RXCallback>:
void USB_RXCallback(uint8_t* Buf, uint32_t *Len)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
	memcpy(usbRxBuf, Buf, *Len);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4807      	ldr	r0, [pc, #28]	@ (8001934 <USB_RXCallback+0x30>)
 8001918:	f016 fcb9 	bl	801828e <memcpy>
	usbRxBufLen = *Len;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	b29a      	uxth	r2, r3
 8001922:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <USB_RXCallback+0x34>)
 8001924:	801a      	strh	r2, [r3, #0]
	usbRxFlag = 1;
 8001926:	4b05      	ldr	r3, [pc, #20]	@ (800193c <USB_RXCallback+0x38>)
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	240017cc 	.word	0x240017cc
 8001938:	2400184c 	.word	0x2400184c
 800193c:	2400184e 	.word	0x2400184e

08001940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001944:	f001 fa50 	bl	8002de8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001948:	f001 fefc 	bl	8003744 <HAL_Init>
  /* USER CODE BEGIN Init */
  //SEGGER_RTT_Init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800194c:	f000 f8b4 	bl	8001ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001950:	f000 fb6a 	bl	8002028 <MX_GPIO_Init>
  MX_DMA_Init();
 8001954:	f000 fb40 	bl	8001fd8 <MX_DMA_Init>
  MX_UART4_Init(1000000);
 8001958:	4838      	ldr	r0, [pc, #224]	@ (8001a3c <main+0xfc>)
 800195a:	f000 fab7 	bl	8001ecc <MX_UART4_Init>
  MX_TIM1_Init();
 800195e:	f000 fa11 	bl	8001d84 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001962:	f000 fa63 	bl	8001e2c <MX_TIM2_Init>
  MX_ADC1_Init();
 8001966:	f000 f925 	bl	8001bb4 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 800196a:	f000 f9a7 	bl	8001cbc <MX_FDCAN1_Init>
  MX_USB_OTG_HS_PCD_Init();
 800196e:	f000 fb01 	bl	8001f74 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001972:	4833      	ldr	r0, [pc, #204]	@ (8001a40 <main+0x100>)
 8001974:	f00b fc42 	bl	800d1fc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8001978:	4832      	ldr	r0, [pc, #200]	@ (8001a44 <main+0x104>)
 800197a:	f00b fc3f 	bl	800d1fc <HAL_TIM_Base_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800197e:	f012 fcbf 	bl	8014300 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of BQ79614_Queue */
  BQ79614_QueueHandle = osMessageQueueNew (10, sizeof(BQ_Data), &BQ79614_Queue_attributes);
 8001982:	4a31      	ldr	r2, [pc, #196]	@ (8001a48 <main+0x108>)
 8001984:	2170      	movs	r1, #112	@ 0x70
 8001986:	200a      	movs	r0, #10
 8001988:	f012 fdb1 	bl	80144ee <osMessageQueueNew>
 800198c:	4603      	mov	r3, r0
 800198e:	4a2f      	ldr	r2, [pc, #188]	@ (8001a4c <main+0x10c>)
 8001990:	6013      	str	r3, [r2, #0]

  /* creation of BQ79600_Queue */
  BQ79600_QueueHandle = osMessageQueueNew (10, sizeof(Message), &BQ79600_Queue_attributes);
 8001992:	4a2f      	ldr	r2, [pc, #188]	@ (8001a50 <main+0x110>)
 8001994:	2144      	movs	r1, #68	@ 0x44
 8001996:	200a      	movs	r0, #10
 8001998:	f012 fda9 	bl	80144ee <osMessageQueueNew>
 800199c:	4603      	mov	r3, r0
 800199e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a54 <main+0x114>)
 80019a0:	6013      	str	r3, [r2, #0]

  /* creation of Messages_Queue */
  Messages_QueueHandle = osMessageQueueNew (16, sizeof(char), &Messages_Queue_attributes);
 80019a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001a58 <main+0x118>)
 80019a4:	2101      	movs	r1, #1
 80019a6:	2010      	movs	r0, #16
 80019a8:	f012 fda1 	bl	80144ee <osMessageQueueNew>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a2b      	ldr	r2, [pc, #172]	@ (8001a5c <main+0x11c>)
 80019b0:	6013      	str	r3, [r2, #0]

  /* creation of BQ_Safety_Status_Queue */
  BQ_Safety_Status_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &BQ_Safety_Status_Queue_attributes);
 80019b2:	4a2b      	ldr	r2, [pc, #172]	@ (8001a60 <main+0x120>)
 80019b4:	2102      	movs	r1, #2
 80019b6:	2010      	movs	r0, #16
 80019b8:	f012 fd99 	bl	80144ee <osMessageQueueNew>
 80019bc:	4603      	mov	r3, r0
 80019be:	4a29      	ldr	r2, [pc, #164]	@ (8001a64 <main+0x124>)
 80019c0:	6013      	str	r3, [r2, #0]

  /* creation of Other_Safety_Status_Queue */
  Other_Safety_Status_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &Other_Safety_Status_Queue_attributes);
 80019c2:	4a29      	ldr	r2, [pc, #164]	@ (8001a68 <main+0x128>)
 80019c4:	2102      	movs	r1, #2
 80019c6:	2010      	movs	r0, #16
 80019c8:	f012 fd91 	bl	80144ee <osMessageQueueNew>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a27      	ldr	r2, [pc, #156]	@ (8001a6c <main+0x12c>)
 80019d0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Default_task */
  Default_taskHandle = osThreadNew(Default, NULL, &Default_task_attributes);
 80019d2:	4a27      	ldr	r2, [pc, #156]	@ (8001a70 <main+0x130>)
 80019d4:	2100      	movs	r1, #0
 80019d6:	4827      	ldr	r0, [pc, #156]	@ (8001a74 <main+0x134>)
 80019d8:	f012 fcdc 	bl	8014394 <osThreadNew>
 80019dc:	4603      	mov	r3, r0
 80019de:	4a26      	ldr	r2, [pc, #152]	@ (8001a78 <main+0x138>)
 80019e0:	6013      	str	r3, [r2, #0]

  /* creation of BQ_comm_task */
  BQ_comm_taskHandle = osThreadNew(Bq_comm, NULL, &BQ_comm_task_attributes);
 80019e2:	4a26      	ldr	r2, [pc, #152]	@ (8001a7c <main+0x13c>)
 80019e4:	2100      	movs	r1, #0
 80019e6:	4826      	ldr	r0, [pc, #152]	@ (8001a80 <main+0x140>)
 80019e8:	f012 fcd4 	bl	8014394 <osThreadNew>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4a25      	ldr	r2, [pc, #148]	@ (8001a84 <main+0x144>)
 80019f0:	6013      	str	r3, [r2, #0]

  /* creation of Safety_task */
  Safety_taskHandle = osThreadNew(Safety, NULL, &Safety_task_attributes);
 80019f2:	4a25      	ldr	r2, [pc, #148]	@ (8001a88 <main+0x148>)
 80019f4:	2100      	movs	r1, #0
 80019f6:	4825      	ldr	r0, [pc, #148]	@ (8001a8c <main+0x14c>)
 80019f8:	f012 fccc 	bl	8014394 <osThreadNew>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4a24      	ldr	r2, [pc, #144]	@ (8001a90 <main+0x150>)
 8001a00:	6013      	str	r3, [r2, #0]

  /* creation of Led_task */
  Led_taskHandle = osThreadNew(Led, NULL, &Led_task_attributes);
 8001a02:	4a24      	ldr	r2, [pc, #144]	@ (8001a94 <main+0x154>)
 8001a04:	2100      	movs	r1, #0
 8001a06:	4824      	ldr	r0, [pc, #144]	@ (8001a98 <main+0x158>)
 8001a08:	f012 fcc4 	bl	8014394 <osThreadNew>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4a23      	ldr	r2, [pc, #140]	@ (8001a9c <main+0x15c>)
 8001a10:	6013      	str	r3, [r2, #0]

  /* creation of Can_task */
  Can_taskHandle = osThreadNew(StartTask05, NULL, &Can_task_attributes);
 8001a12:	4a23      	ldr	r2, [pc, #140]	@ (8001aa0 <main+0x160>)
 8001a14:	2100      	movs	r1, #0
 8001a16:	4823      	ldr	r0, [pc, #140]	@ (8001aa4 <main+0x164>)
 8001a18:	f012 fcbc 	bl	8014394 <osThreadNew>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4a22      	ldr	r2, [pc, #136]	@ (8001aa8 <main+0x168>)
 8001a20:	6013      	str	r3, [r2, #0]

  /* creation of Usb_task */
  Usb_taskHandle = osThreadNew(Usb, NULL, &Usb_task_attributes);
 8001a22:	4a22      	ldr	r2, [pc, #136]	@ (8001aac <main+0x16c>)
 8001a24:	2100      	movs	r1, #0
 8001a26:	4822      	ldr	r0, [pc, #136]	@ (8001ab0 <main+0x170>)
 8001a28:	f012 fcb4 	bl	8014394 <osThreadNew>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4a21      	ldr	r2, [pc, #132]	@ (8001ab4 <main+0x174>)
 8001a30:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a32:	f012 fc89 	bl	8014348 <osKernelStart>
 8001a36:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	000f4240 	.word	0x000f4240
 8001a40:	24000fbc 	.word	0x24000fbc
 8001a44:	24000f70 	.word	0x24000f70
 8001a48:	08019908 	.word	0x08019908
 8001a4c:	24001688 	.word	0x24001688
 8001a50:	08019920 	.word	0x08019920
 8001a54:	2400168c 	.word	0x2400168c
 8001a58:	08019938 	.word	0x08019938
 8001a5c:	24001690 	.word	0x24001690
 8001a60:	08019950 	.word	0x08019950
 8001a64:	24001694 	.word	0x24001694
 8001a68:	08019968 	.word	0x08019968
 8001a6c:	24001698 	.word	0x24001698
 8001a70:	08019830 	.word	0x08019830
 8001a74:	0800219d 	.word	0x0800219d
 8001a78:	24001670 	.word	0x24001670
 8001a7c:	08019854 	.word	0x08019854
 8001a80:	080021b1 	.word	0x080021b1
 8001a84:	24001674 	.word	0x24001674
 8001a88:	08019878 	.word	0x08019878
 8001a8c:	08002971 	.word	0x08002971
 8001a90:	24001678 	.word	0x24001678
 8001a94:	0801989c 	.word	0x0801989c
 8001a98:	080029dd 	.word	0x080029dd
 8001a9c:	2400167c 	.word	0x2400167c
 8001aa0:	080198c0 	.word	0x080198c0
 8001aa4:	08002a81 	.word	0x08002a81
 8001aa8:	24001680 	.word	0x24001680
 8001aac:	080198e4 	.word	0x080198e4
 8001ab0:	08002acd 	.word	0x08002acd
 8001ab4:	24001684 	.word	0x24001684

08001ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b09c      	sub	sp, #112	@ 0x70
 8001abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac2:	224c      	movs	r2, #76	@ 0x4c
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f016 fb0f 	bl	80180ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2220      	movs	r2, #32
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f016 fb09 	bl	80180ea <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f007 fde3 	bl	80096a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ade:	2300      	movs	r3, #0
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	4b32      	ldr	r3, [pc, #200]	@ (8001bac <SystemClock_Config+0xf4>)
 8001ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae6:	4a31      	ldr	r2, [pc, #196]	@ (8001bac <SystemClock_Config+0xf4>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001aee:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <SystemClock_Config+0xf4>)
 8001af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb0 <SystemClock_Config+0xf8>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b00:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb0 <SystemClock_Config+0xf8>)
 8001b02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <SystemClock_Config+0xf8>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b14:	bf00      	nop
 8001b16:	4b26      	ldr	r3, [pc, #152]	@ (8001bb0 <SystemClock_Config+0xf8>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b22:	d1f8      	bne.n	8001b16 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 8001b24:	2330      	movs	r3, #48	@ 0x30
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001b2c:	2380      	movs	r3, #128	@ 0x80
 8001b2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001b30:	2320      	movs	r3, #32
 8001b32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b34:	2302      	movs	r3, #2
 8001b36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 150;
 8001b40:	2396      	movs	r3, #150	@ 0x96
 8001b42:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b44:	2302      	movs	r3, #2
 8001b46:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001b54:	2302      	movs	r3, #2
 8001b56:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b60:	4618      	mov	r0, r3
 8001b62:	f007 fde9 	bl	8009738 <HAL_RCC_OscConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001b6c:	f001 f97a 	bl	8002e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b70:	233f      	movs	r3, #63	@ 0x3f
 8001b72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b74:	2303      	movs	r3, #3
 8001b76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b84:	2340      	movs	r3, #64	@ 0x40
 8001b86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2101      	movs	r1, #1
 8001b94:	4618      	mov	r0, r3
 8001b96:	f008 fa29 	bl	8009fec <HAL_RCC_ClockConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001ba0:	f001 f960 	bl	8002e64 <Error_Handler>
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3770      	adds	r7, #112	@ 0x70
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	58000400 	.word	0x58000400
 8001bb0:	58024800 	.word	0x58024800

08001bb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	@ 0x28
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bba:	f107 031c 	add.w	r3, r7, #28
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
 8001bd4:	615a      	str	r2, [r3, #20]
 8001bd6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bd8:	4b35      	ldr	r3, [pc, #212]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001bda:	4a36      	ldr	r2, [pc, #216]	@ (8001cb4 <MX_ADC1_Init+0x100>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bde:	4b34      	ldr	r3, [pc, #208]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001be4:	4b32      	ldr	r3, [pc, #200]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001be6:	2204      	movs	r2, #4
 8001be8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bea:	4b31      	ldr	r3, [pc, #196]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c02:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c08:	4b29      	ldr	r3, [pc, #164]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001c0e:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c14:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c1a:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001c20:	4b23      	ldr	r3, [pc, #140]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8001c28:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c2e:	4820      	ldr	r0, [pc, #128]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001c30:	f001 ffa0 	bl	8003b74 <HAL_ADC_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001c3a:	f001 f913 	bl	8002e64 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001c40:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001c44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c4c:	4818      	ldr	r0, [pc, #96]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001c4e:	f001 ff91 	bl	8003b74 <HAL_ADC_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001c58:	f001 f904 	bl	8002e64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	4619      	mov	r1, r3
 8001c66:	4812      	ldr	r0, [pc, #72]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001c68:	f002 fdb4 	bl	80047d4 <HAL_ADCEx_MultiModeConfigChannel>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001c72:	f001 f8f7 	bl	8002e64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <MX_ADC1_Init+0x104>)
 8001c78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c7a:	2306      	movs	r3, #6
 8001c7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c82:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001c86:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c88:	2304      	movs	r3, #4
 8001c8a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c94:	463b      	mov	r3, r7
 8001c96:	4619      	mov	r1, r3
 8001c98:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <MX_ADC1_Init+0xfc>)
 8001c9a:	f002 f90d 	bl	8003eb8 <HAL_ADC_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001ca4:	f001 f8de 	bl	8002e64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	3728      	adds	r7, #40	@ 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	24000e6c 	.word	0x24000e6c
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	10c00010 	.word	0x10c00010

08001cbc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001cc2:	4a2f      	ldr	r2, [pc, #188]	@ (8001d80 <MX_FDCAN1_Init+0xc4>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001cd8:	4b28      	ldr	r3, [pc, #160]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001cde:	4b27      	ldr	r3, [pc, #156]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001ce4:	4b25      	ldr	r3, [pc, #148]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001ce6:	2210      	movs	r2, #16
 8001ce8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001cea:	4b24      	ldr	r3, [pc, #144]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001cf0:	4b22      	ldr	r3, [pc, #136]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001cf6:	4b21      	ldr	r3, [pc, #132]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001d02:	4b1e      	ldr	r3, [pc, #120]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001d08:	4b1c      	ldr	r3, [pc, #112]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001d14:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001d1a:	4b18      	ldr	r3, [pc, #96]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001d20:	4b16      	ldr	r3, [pc, #88]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001d2c:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d2e:	2204      	movs	r2, #4
 8001d30:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001d32:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001d38:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d3a:	2204      	movs	r2, #4
 8001d3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001d44:	4b0d      	ldr	r3, [pc, #52]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d46:	2204      	movs	r2, #4
 8001d48:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001d50:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001d56:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001d5c:	4b07      	ldr	r3, [pc, #28]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001d62:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d64:	2204      	movs	r2, #4
 8001d66:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001d68:	4804      	ldr	r0, [pc, #16]	@ (8001d7c <MX_FDCAN1_Init+0xc0>)
 8001d6a:	f005 fb93 	bl	8007494 <HAL_FDCAN_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001d74:	f001 f876 	bl	8002e64 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	24000ed0 	.word	0x24000ed0
 8001d80:	4000a000 	.word	0x4000a000

08001d84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8a:	f107 0310 	add.w	r3, r7, #16
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001da2:	4b20      	ldr	r3, [pc, #128]	@ (8001e24 <MX_TIM1_Init+0xa0>)
 8001da4:	4a20      	ldr	r2, [pc, #128]	@ (8001e28 <MX_TIM1_Init+0xa4>)
 8001da6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001da8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e24 <MX_TIM1_Init+0xa0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dae:	4b1d      	ldr	r3, [pc, #116]	@ (8001e24 <MX_TIM1_Init+0xa0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001db4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e24 <MX_TIM1_Init+0xa0>)
 8001db6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <MX_TIM1_Init+0xa0>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dc2:	4b18      	ldr	r3, [pc, #96]	@ (8001e24 <MX_TIM1_Init+0xa0>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc8:	4b16      	ldr	r3, [pc, #88]	@ (8001e24 <MX_TIM1_Init+0xa0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dce:	4815      	ldr	r0, [pc, #84]	@ (8001e24 <MX_TIM1_Init+0xa0>)
 8001dd0:	f00b f9bc 	bl	800d14c <HAL_TIM_Base_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001dda:	f001 f843 	bl	8002e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001de4:	f107 0310 	add.w	r3, r7, #16
 8001de8:	4619      	mov	r1, r3
 8001dea:	480e      	ldr	r0, [pc, #56]	@ (8001e24 <MX_TIM1_Init+0xa0>)
 8001dec:	f00b fbf6 	bl	800d5dc <HAL_TIM_ConfigClockSource>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001df6:	f001 f835 	bl	8002e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4806      	ldr	r0, [pc, #24]	@ (8001e24 <MX_TIM1_Init+0xa0>)
 8001e0c:	f00b ff76 	bl	800dcfc <HAL_TIMEx_MasterConfigSynchronization>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e16:	f001 f825 	bl	8002e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	3720      	adds	r7, #32
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	24000f70 	.word	0x24000f70
 8001e28:	40010000 	.word	0x40010000

08001e2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e32:	f107 030c 	add.w	r3, r7, #12
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
 8001e40:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e42:	463b      	mov	r3, r7
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <MX_TIM2_Init+0x9c>)
 8001e4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <MX_TIM2_Init+0x9c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <MX_TIM2_Init+0x9c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e60:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <MX_TIM2_Init+0x9c>)
 8001e62:	f04f 32ff 	mov.w	r2, #4294967295
 8001e66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e68:	4b17      	ldr	r3, [pc, #92]	@ (8001ec8 <MX_TIM2_Init+0x9c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <MX_TIM2_Init+0x9c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e74:	4814      	ldr	r0, [pc, #80]	@ (8001ec8 <MX_TIM2_Init+0x9c>)
 8001e76:	f00b f969 	bl	800d14c <HAL_TIM_Base_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001e80:	f000 fff0 	bl	8002e64 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001e88:	2330      	movs	r3, #48	@ 0x30
 8001e8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	4619      	mov	r1, r3
 8001e92:	480d      	ldr	r0, [pc, #52]	@ (8001ec8 <MX_TIM2_Init+0x9c>)
 8001e94:	f00b fc9a 	bl	800d7cc <HAL_TIM_SlaveConfigSynchro>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001e9e:	f000 ffe1 	bl	8002e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eaa:	463b      	mov	r3, r7
 8001eac:	4619      	mov	r1, r3
 8001eae:	4806      	ldr	r0, [pc, #24]	@ (8001ec8 <MX_TIM2_Init+0x9c>)
 8001eb0:	f00b ff24 	bl	800dcfc <HAL_TIMEx_MasterConfigSynchronization>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001eba:	f000 ffd3 	bl	8002e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	3720      	adds	r7, #32
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	24000fbc 	.word	0x24000fbc

08001ecc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART4_Init(int boudrate)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ed4:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <MX_UART4_Init+0xa0>)
 8001ed6:	4a26      	ldr	r2, [pc, #152]	@ (8001f70 <MX_UART4_Init+0xa4>)
 8001ed8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = boudrate;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a23      	ldr	r2, [pc, #140]	@ (8001f6c <MX_UART4_Init+0xa0>)
 8001ede:	6053      	str	r3, [r2, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee0:	4b22      	ldr	r3, [pc, #136]	@ (8001f6c <MX_UART4_Init+0xa0>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ee6:	4b21      	ldr	r3, [pc, #132]	@ (8001f6c <MX_UART4_Init+0xa0>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001eec:	4b1f      	ldr	r3, [pc, #124]	@ (8001f6c <MX_UART4_Init+0xa0>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f6c <MX_UART4_Init+0xa0>)
 8001ef4:	220c      	movs	r2, #12
 8001ef6:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <MX_UART4_Init+0xa0>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efe:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <MX_UART4_Init+0xa0>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f04:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <MX_UART4_Init+0xa0>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f0a:	4b18      	ldr	r3, [pc, #96]	@ (8001f6c <MX_UART4_Init+0xa0>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001f10:	4b16      	ldr	r3, [pc, #88]	@ (8001f6c <MX_UART4_Init+0xa0>)
 8001f12:	2208      	movs	r2, #8
 8001f14:	629a      	str	r2, [r3, #40]	@ 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <MX_UART4_Init+0xa0>)
 8001f18:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f1c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f1e:	4813      	ldr	r0, [pc, #76]	@ (8001f6c <MX_UART4_Init+0xa0>)
 8001f20:	f00b ff98 	bl	800de54 <HAL_UART_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_UART4_Init+0x62>
  {
    Error_Handler();
 8001f2a:	f000 ff9b 	bl	8002e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f2e:	2100      	movs	r1, #0
 8001f30:	480e      	ldr	r0, [pc, #56]	@ (8001f6c <MX_UART4_Init+0xa0>)
 8001f32:	f00e fd1a 	bl	801096a <HAL_UARTEx_SetTxFifoThreshold>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_UART4_Init+0x74>
  {
    Error_Handler();
 8001f3c:	f000 ff92 	bl	8002e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f40:	2100      	movs	r1, #0
 8001f42:	480a      	ldr	r0, [pc, #40]	@ (8001f6c <MX_UART4_Init+0xa0>)
 8001f44:	f00e fd4f 	bl	80109e6 <HAL_UARTEx_SetRxFifoThreshold>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8001f4e:	f000 ff89 	bl	8002e64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001f52:	4806      	ldr	r0, [pc, #24]	@ (8001f6c <MX_UART4_Init+0xa0>)
 8001f54:	f00e fcd0 	bl	80108f8 <HAL_UARTEx_DisableFifoMode>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8001f5e:	f000 ff81 	bl	8002e64 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	24001008 	.word	0x24001008
 8001f70:	40004c00 	.word	0x40004c00

08001f74 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001f78:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f7a:	4a16      	ldr	r2, [pc, #88]	@ (8001fd4 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001f7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001f7e:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f80:	2209      	movs	r2, #9
 8001f82:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8001f84:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f86:	2202      	movs	r2, #2
 8001f88:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001f8a:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f92:	2202      	movs	r2, #2
 8001f94:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001fae:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001fba:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001fbc:	f006 f8d3 	bl	8008166 <HAL_PCD_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8001fc6:	f000 ff4d 	bl	8002e64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2400118c 	.word	0x2400118c
 8001fd4:	40040000 	.word	0x40040000

08001fd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fde:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <MX_DMA_Init+0x4c>)
 8001fe0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8002024 <MX_DMA_Init+0x4c>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001fee:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <MX_DMA_Init+0x4c>)
 8001ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2105      	movs	r1, #5
 8002000:	200f      	movs	r0, #15
 8002002:	f002 fdb8 	bl	8004b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002006:	200f      	movs	r0, #15
 8002008:	f002 fdcf 	bl	8004baa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2105      	movs	r1, #5
 8002010:	2010      	movs	r0, #16
 8002012:	f002 fdb0 	bl	8004b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002016:	2010      	movs	r0, #16
 8002018:	f002 fdc7 	bl	8004baa <HAL_NVIC_EnableIRQ>

}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	58024400 	.word	0x58024400

08002028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	@ 0x28
 800202c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800203e:	4b52      	ldr	r3, [pc, #328]	@ (8002188 <MX_GPIO_Init+0x160>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002044:	4a50      	ldr	r2, [pc, #320]	@ (8002188 <MX_GPIO_Init+0x160>)
 8002046:	f043 0310 	orr.w	r3, r3, #16
 800204a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800204e:	4b4e      	ldr	r3, [pc, #312]	@ (8002188 <MX_GPIO_Init+0x160>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	4b4a      	ldr	r3, [pc, #296]	@ (8002188 <MX_GPIO_Init+0x160>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002062:	4a49      	ldr	r2, [pc, #292]	@ (8002188 <MX_GPIO_Init+0x160>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800206c:	4b46      	ldr	r3, [pc, #280]	@ (8002188 <MX_GPIO_Init+0x160>)
 800206e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800207a:	4b43      	ldr	r3, [pc, #268]	@ (8002188 <MX_GPIO_Init+0x160>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002080:	4a41      	ldr	r2, [pc, #260]	@ (8002188 <MX_GPIO_Init+0x160>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800208a:	4b3f      	ldr	r3, [pc, #252]	@ (8002188 <MX_GPIO_Init+0x160>)
 800208c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002098:	4b3b      	ldr	r3, [pc, #236]	@ (8002188 <MX_GPIO_Init+0x160>)
 800209a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800209e:	4a3a      	ldr	r2, [pc, #232]	@ (8002188 <MX_GPIO_Init+0x160>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020a8:	4b37      	ldr	r3, [pc, #220]	@ (8002188 <MX_GPIO_Init+0x160>)
 80020aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b6:	4b34      	ldr	r3, [pc, #208]	@ (8002188 <MX_GPIO_Init+0x160>)
 80020b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020bc:	4a32      	ldr	r2, [pc, #200]	@ (8002188 <MX_GPIO_Init+0x160>)
 80020be:	f043 0308 	orr.w	r3, r3, #8
 80020c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020c6:	4b30      	ldr	r3, [pc, #192]	@ (8002188 <MX_GPIO_Init+0x160>)
 80020c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80020d4:	2200      	movs	r2, #0
 80020d6:	213c      	movs	r1, #60	@ 0x3c
 80020d8:	482c      	ldr	r0, [pc, #176]	@ (800218c <MX_GPIO_Init+0x164>)
 80020da:	f006 f811 	bl	8008100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80020de:	2200      	movs	r2, #0
 80020e0:	2120      	movs	r1, #32
 80020e2:	482b      	ldr	r0, [pc, #172]	@ (8002190 <MX_GPIO_Init+0x168>)
 80020e4:	f006 f80c 	bl	8008100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80020e8:	2200      	movs	r2, #0
 80020ea:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80020ee:	4829      	ldr	r0, [pc, #164]	@ (8002194 <MX_GPIO_Init+0x16c>)
 80020f0:	f006 f806 	bl	8008100 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80020f4:	233c      	movs	r3, #60	@ 0x3c
 80020f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f8:	2301      	movs	r3, #1
 80020fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	4619      	mov	r1, r3
 800210a:	4820      	ldr	r0, [pc, #128]	@ (800218c <MX_GPIO_Init+0x164>)
 800210c:	f005 fd26 	bl	8007b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002110:	2320      	movs	r3, #32
 8002112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002114:	2301      	movs	r3, #1
 8002116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	4619      	mov	r1, r3
 8002126:	481a      	ldr	r0, [pc, #104]	@ (8002190 <MX_GPIO_Init+0x168>)
 8002128:	f005 fd18 	bl	8007b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800212c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	4619      	mov	r1, r3
 8002140:	4812      	ldr	r0, [pc, #72]	@ (800218c <MX_GPIO_Init+0x164>)
 8002142:	f005 fd0b 	bl	8007b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002146:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800214a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214c:	2300      	movs	r3, #0
 800214e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	4619      	mov	r1, r3
 800215a:	480f      	ldr	r0, [pc, #60]	@ (8002198 <MX_GPIO_Init+0x170>)
 800215c:	f005 fcfe 	bl	8007b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002160:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002166:	2301      	movs	r3, #1
 8002168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4619      	mov	r1, r3
 8002178:	4806      	ldr	r0, [pc, #24]	@ (8002194 <MX_GPIO_Init+0x16c>)
 800217a:	f005 fcef 	bl	8007b5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	@ 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	58024400 	.word	0x58024400
 800218c:	58021000 	.word	0x58021000
 8002190:	58020000 	.word	0x58020000
 8002194:	58020800 	.word	0x58020800
 8002198:	58020400 	.word	0x58020400

0800219c <Default>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Default */
void Default(void *argument)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80021a4:	f015 f86a 	bl	801727c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80021a8:	2001      	movs	r0, #1
 80021aa:	f012 f985 	bl	80144b8 <osDelay>
 80021ae:	e7fb      	b.n	80021a8 <Default+0xc>

080021b0 <Bq_comm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Bq_comm */
void Bq_comm(void *argument)
{
 80021b0:	b5b0      	push	{r4, r5, r7, lr}
 80021b2:	b0c6      	sub	sp, #280	@ 0x118
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021be:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Bq_comm */

	bq79600_t *bms_instance = open_bq79600_instance(0);
 80021c0:	2000      	movs	r0, #0
 80021c2:	f7ff f957 	bl	8001474 <open_bq79600_instance>
 80021c6:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8

	    bms_instance->mode = BQ_UART;
 80021ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021ce:	2201      	movs	r2, #1
 80021d0:	729a      	strb	r2, [r3, #10]
	    bms_instance->state = BQ_SHUTDOWN;
 80021d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021d6:	2201      	movs	r2, #1
 80021d8:	72da      	strb	r2, [r3, #11]
	    bms_instance->rx_port = GPIOA;
 80021da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021de:	4ad6      	ldr	r2, [pc, #856]	@ (8002538 <Bq_comm+0x388>)
 80021e0:	601a      	str	r2, [r3, #0]
	    bms_instance->tx_port = GPIOA;
 80021e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021e6:	4ad4      	ldr	r2, [pc, #848]	@ (8002538 <Bq_comm+0x388>)
 80021e8:	605a      	str	r2, [r3, #4]
	    bms_instance->rx_pin = 1;
 80021ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021ee:	2201      	movs	r2, #1
 80021f0:	721a      	strb	r2, [r3, #8]
	    bms_instance->tx_pin = 0;
 80021f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021f6:	2200      	movs	r2, #0
 80021f8:	725a      	strb	r2, [r3, #9]

	    // wake up ping using slowed uart communication
	    HAL_UART_DeInit(&huart4);
 80021fa:	48d0      	ldr	r0, [pc, #832]	@ (800253c <Bq_comm+0x38c>)
 80021fc:	f00b fe7a 	bl	800def4 <HAL_UART_DeInit>
	    MX_UART4_Init(3250);
 8002200:	f640 40b2 	movw	r0, #3250	@ 0xcb2
 8002204:	f7ff fe62 	bl	8001ecc <MX_UART4_Init>
	    osDelay(10);
 8002208:	200a      	movs	r0, #10
 800220a:	f012 f955 	bl	80144b8 <osDelay>
	    uint8_t zero=0x00;
 800220e:	2300      	movs	r3, #0
 8002210:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
	    HAL_UART_Transmit(&huart4,&zero,1,100);
 8002214:	f107 01d2 	add.w	r1, r7, #210	@ 0xd2
 8002218:	2364      	movs	r3, #100	@ 0x64
 800221a:	2201      	movs	r2, #1
 800221c:	48c7      	ldr	r0, [pc, #796]	@ (800253c <Bq_comm+0x38c>)
 800221e:	f00b fea8 	bl	800df72 <HAL_UART_Transmit>
	    osDelay(13);
 8002222:	200d      	movs	r0, #13
 8002224:	f012 f948 	bl	80144b8 <osDelay>
	   HAL_UART_Transmit(&huart4,&zero,1,100);
 8002228:	f107 01d2 	add.w	r1, r7, #210	@ 0xd2
 800222c:	2364      	movs	r3, #100	@ 0x64
 800222e:	2201      	movs	r2, #1
 8002230:	48c2      	ldr	r0, [pc, #776]	@ (800253c <Bq_comm+0x38c>)
 8002232:	f00b fe9e 	bl	800df72 <HAL_UART_Transmit>
	   osDelay(50);
 8002236:	2032      	movs	r0, #50	@ 0x32
 8002238:	f012 f93e 	bl	80144b8 <osDelay>
	   HAL_UART_DeInit(&huart4);
 800223c:	48bf      	ldr	r0, [pc, #764]	@ (800253c <Bq_comm+0x38c>)
 800223e:	f00b fe59 	bl	800def4 <HAL_UART_DeInit>
	    MX_UART4_Init(1000000);
 8002242:	48bf      	ldr	r0, [pc, #764]	@ (8002540 <Bq_comm+0x390>)
 8002244:	f7ff fe42 	bl	8001ecc <MX_UART4_Init>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002248:	2201      	movs	r2, #1
 800224a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800224e:	48ba      	ldr	r0, [pc, #744]	@ (8002538 <Bq_comm+0x388>)
 8002250:	f005 ff56 	bl	8008100 <HAL_GPIO_WritePin>


	     if( HAL_UARTEx_ReceiveToIdle_IT(&huart4, bms_instance->rx_buf, sizeof(bms_instance->rx_buf)) == HAL_ERROR)
 8002254:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002258:	331a      	adds	r3, #26
 800225a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800225e:	4619      	mov	r1, r3
 8002260:	48b6      	ldr	r0, [pc, #728]	@ (800253c <Bq_comm+0x38c>)
 8002262:	f00e fbfe 	bl	8010a62 <HAL_UARTEx_ReceiveToIdle_IT>
 8002266:	4603      	mov	r3, r0
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <Bq_comm+0xc0>
	     {
	    	 while (1);
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <Bq_comm+0xbc>
	     }
	      HAL_Delay(10);
 8002270:	200a      	movs	r0, #10
 8002272:	f001 fac3 	bl	80037fc <HAL_Delay>

	       if( HAL_UART_Transmit_IT(&huart4, bms_instance->tx_buf, bms_instance->tx_len) == HAL_BUSY)
 8002276:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800227a:	f103 010c 	add.w	r1, r3, #12
 800227e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002282:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 8002286:	461a      	mov	r2, r3
 8002288:	48ac      	ldr	r0, [pc, #688]	@ (800253c <Bq_comm+0x38c>)
 800228a:	f00b ff01 	bl	800e090 <HAL_UART_Transmit_IT>
 800228e:	4603      	mov	r3, r0
 8002290:	2b02      	cmp	r3, #2
 8002292:	d101      	bne.n	8002298 <Bq_comm+0xe8>
	       {
	    	   while (1);
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <Bq_comm+0xe4>
	       }


	      uint8_t buf = 0x20;
 8002298:	2320      	movs	r3, #32
 800229a:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
	      bq79600_write_reg(bms_instance, 0x00, CONTROL1, &buf, 1);
 800229e:	f107 03d1 	add.w	r3, r7, #209	@ 0xd1
 80022a2:	2201      	movs	r2, #1
 80022a4:	9200      	str	r2, [sp, #0]
 80022a6:	f240 3209 	movw	r2, #777	@ 0x309
 80022aa:	2100      	movs	r1, #0
 80022ac:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80022b0:	f7ff f8ba 	bl	8001428 <bq79600_write_reg>
	      osDelay(12 * n_devices);
 80022b4:	2024      	movs	r0, #36	@ 0x24
 80022b6:	f012 f8ff 	bl	80144b8 <osDelay>

	      bq79600_error_t err = bq79600_auto_addressing(bms_instance, n_devices);
 80022ba:	2103      	movs	r1, #3
 80022bc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80022c0:	f7ff f8f0 	bl	80014a4 <bq79600_auto_addressing>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	      if (err) {
 80022ca:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d01f      	beq.n	8002312 <Bq_comm+0x162>
	    	  Message autoadress = {0};
 80022d2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80022d6:	2244      	movs	r2, #68	@ 0x44
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f015 ff05 	bl	80180ea <memset>
	    	  strcpy(autoadress.Buf, "Autoadressing failed!\n0");
 80022e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80022e4:	4a97      	ldr	r2, [pc, #604]	@ (8002544 <Bq_comm+0x394>)
 80022e6:	461c      	mov	r4, r3
 80022e8:	4615      	mov	r5, r2
 80022ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022f2:	e884 0003 	stmia.w	r4, {r0, r1}
	    	  autoadress.Timestamp = HAL_GetTick();
 80022f6:	f001 fa75 	bl	80037e4 <HAL_GetTick>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	    	  osMessageQueuePut(Messages_QueueHandle, &autoadress, 0, 50);
 8002300:	4b91      	ldr	r3, [pc, #580]	@ (8002548 <Bq_comm+0x398>)
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8002308:	2332      	movs	r3, #50	@ 0x32
 800230a:	2200      	movs	r2, #0
 800230c:	f012 f962 	bl	80145d4 <osMessageQueuePut>
 8002310:	e021      	b.n	8002356 <Bq_comm+0x1a6>
	    	  }
	      else
	      {
	    	  Message autoadress = {0};
 8002312:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002316:	2244      	movs	r2, #68	@ 0x44
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f015 fee5 	bl	80180ea <memset>
	    	  strcpy(autoadress.Buf, "Autoadressing succesful!\n0");
 8002320:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002324:	4a89      	ldr	r2, [pc, #548]	@ (800254c <Bq_comm+0x39c>)
 8002326:	461c      	mov	r4, r3
 8002328:	4615      	mov	r5, r2
 800232a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800232c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800232e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002332:	c403      	stmia	r4!, {r0, r1}
 8002334:	8022      	strh	r2, [r4, #0]
 8002336:	3402      	adds	r4, #2
 8002338:	0c13      	lsrs	r3, r2, #16
 800233a:	7023      	strb	r3, [r4, #0]
	    	  autoadress.Timestamp = HAL_GetTick();
 800233c:	f001 fa52 	bl	80037e4 <HAL_GetTick>
 8002340:	4603      	mov	r3, r0
 8002342:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	    	  osMessageQueuePut(Messages_QueueHandle, &autoadress, 0, 50);
 8002346:	4b80      	ldr	r3, [pc, #512]	@ (8002548 <Bq_comm+0x398>)
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800234e:	2332      	movs	r3, #50	@ 0x32
 8002350:	2200      	movs	r2, #0
 8002352:	f012 f93f 	bl	80145d4 <osMessageQueuePut>
	      }

	      /* Set long communication timeout */
	      buf = 0x0A;  // CTL_ACT=1 | CTL_TIME=010 (2s)
 8002356:	230a      	movs	r3, #10
 8002358:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, COMM_TIMEOUT_CONF, 5, &buf);
 800235c:	f107 03d1 	add.w	r3, r7, #209	@ 0xd1
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	2305      	movs	r3, #5
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2319      	movs	r3, #25
 8002368:	2200      	movs	r2, #0
 800236a:	2103      	movs	r1, #3
 800236c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8002370:	f7fe fea2 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 8002374:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8002378:	f7fe ff2e 	bl	80011d8 <bq79600_tx>
	      osDelay(1);
 800237c:	2001      	movs	r0, #1
 800237e:	f012 f89b 	bl	80144b8 <osDelay>

	      /* Config stack device ADCs */
	      buf = n_cells_per_device - 6;
 8002382:	2307      	movs	r3, #7
 8002384:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, ACTIVE_CELL, 1, &buf);
 8002388:	f107 03d1 	add.w	r3, r7, #209	@ 0xd1
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	2301      	movs	r3, #1
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	2303      	movs	r3, #3
 8002394:	2200      	movs	r2, #0
 8002396:	2103      	movs	r1, #3
 8002398:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 800239c:	f7fe fe8c 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 80023a0:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80023a4:	f7fe ff18 	bl	80011d8 <bq79600_tx>

	      buf = 0x06;
 80023a8:	2306      	movs	r3, #6
 80023aa:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, ADC_CTRL1, 1, &buf);
 80023ae:	f107 03d1 	add.w	r3, r7, #209	@ 0xd1
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	2301      	movs	r3, #1
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	f240 330d 	movw	r3, #781	@ 0x30d
 80023bc:	2200      	movs	r2, #0
 80023be:	2103      	movs	r1, #3
 80023c0:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80023c4:	f7fe fe78 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 80023c8:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80023cc:	f7fe ff04 	bl	80011d8 <bq79600_tx>
	      osDelay(1 * n_devices);
 80023d0:	2003      	movs	r0, #3
 80023d2:	f012 f871 	bl	80144b8 <osDelay>
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, ADC_CTRL3, 1, &buf);
	      bq79600_tx(bms_instance);
	      osDelay(1 * n_devices);

	      /*  Setup OV, UV for balancing  */
	      uint8_t ov_threshold = 0x22; // 4175 mV threshold value
 80023d6:	2322      	movs	r3, #34	@ 0x22
 80023d8:	f887 30d0 	strb.w	r3, [r7, #208]	@ 0xd0
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, OV_THRESH, 1, &ov_threshold);
 80023dc:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	2301      	movs	r3, #1
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	2309      	movs	r3, #9
 80023e8:	2200      	movs	r2, #0
 80023ea:	2103      	movs	r1, #3
 80023ec:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80023f0:	f7fe fe62 	bl	80010b8 <bq79600_construct_command>

	      uint8_t uv_threshold = 0x26; // 3100 mV threshold value
 80023f4:	2326      	movs	r3, #38	@ 0x26
 80023f6:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, UV_THRESH, 1, &uv_threshold);
 80023fa:	f107 03cf 	add.w	r3, r7, #207	@ 0xcf
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	2301      	movs	r3, #1
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	230a      	movs	r3, #10
 8002406:	2200      	movs	r2, #0
 8002408:	2103      	movs	r1, #3
 800240a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 800240e:	f7fe fe53 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 8002412:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8002416:	f7fe fedf 	bl	80011d8 <bq79600_tx>
	      uint8_t OV_UV_MODE = 0x01; // Set mode to run OV and UV round robin on all cells
 800241a:	2301      	movs	r3, #1
 800241c:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
	      uint8_t OV_UV_GO = 0x01; // Start OV UV comparators
 8002420:	2301      	movs	r3, #1
 8002422:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
	      uint8_t OV_UV_CONTROL_DATA[] = {OV_UV_MODE,OV_UV_GO};
 8002426:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 800242a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 800242e:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 8002432:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
	      buf = 0x3;
 8002436:	2303      	movs	r3, #3
 8002438:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, OVUV_CTRL, 1, &buf); // 0x26 = 3100mV
 800243c:	f107 03d1 	add.w	r3, r7, #209	@ 0xd1
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	2301      	movs	r3, #1
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	f44f 734b 	mov.w	r3, #812	@ 0x32c
 800244a:	2200      	movs	r2, #0
 800244c:	2103      	movs	r1, #3
 800244e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8002452:	f7fe fe31 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 8002456:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 800245a:	f7fe febd 	bl	80011d8 <bq79600_tx>
	      osDelay(1 * n_devices); // wait for stack write
 800245e:	2003      	movs	r0, #3
 8002460:	f012 f82a 	bl	80144b8 <osDelay>

  /* Infinite loop */
	  while (1) {


	         bq79600_construct_command(bms_instance, STACK_READ, 0, DIETEMP1_HI, 2, NULL);
 8002464:	2300      	movs	r3, #0
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	2302      	movs	r3, #2
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f240 53ae 	movw	r3, #1454	@ 0x5ae
 8002470:	2200      	movs	r2, #0
 8002472:	2102      	movs	r1, #2
 8002474:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8002478:	f7fe fe1e 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 800247c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8002480:	f7fe feaa 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 8002484:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8002488:	f7ff f8d1 	bl	800162e <bq79600_bsp_ready>

	         for (int i = 0; i < n_devices - 1; i++)
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002492:	e025      	b.n	80024e0 <Bq_comm+0x330>
	         {
	           modules[i].dietemp = raw_to_float(&bms_instance->rx_buf[4 + i * 8]) * 0.025;
 8002494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	3304      	adds	r3, #4
 800249c:	3318      	adds	r3, #24
 800249e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80024a2:	4413      	add	r3, r2
 80024a4:	3302      	adds	r3, #2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff f9e0 	bl	800186c <raw_to_float>
 80024ac:	eef0 7a40 	vmov.f32	s15, s0
 80024b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024b4:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8002530 <Bq_comm+0x380>
 80024b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024c0:	4923      	ldr	r1, [pc, #140]	@ (8002550 <Bq_comm+0x3a0>)
 80024c2:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80024c6:	4613      	mov	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	015b      	lsls	r3, r3, #5
 80024ce:	440b      	add	r3, r1
 80024d0:	3358      	adds	r3, #88	@ 0x58
 80024d2:	edc3 7a00 	vstr	s15, [r3]
	         for (int i = 0; i < n_devices - 1; i++)
 80024d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024da:	3301      	adds	r3, #1
 80024dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80024e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	ddd5      	ble.n	8002494 <Bq_comm+0x2e4>
	         }
	         uint32_t start_vcells = VCELL1_HI - n_cells_per_device * 2 + 2;
 80024e8:	f240 536e 	movw	r3, #1390	@ 0x56e
 80024ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	         bq79600_construct_command(bms_instance, STACK_READ, 0, start_vcells, n_cells_per_device * 2, NULL);
 80024f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2200      	movs	r2, #0
 80024f8:	9201      	str	r2, [sp, #4]
 80024fa:	221a      	movs	r2, #26
 80024fc:	9200      	str	r2, [sp, #0]
 80024fe:	2200      	movs	r2, #0
 8002500:	2102      	movs	r1, #2
 8002502:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8002506:	f7fe fdd7 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 800250a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 800250e:	f7fe fe63 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 8002512:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8002516:	f7ff f88a 	bl	800162e <bq79600_bsp_ready>

	         for (int i = 0; i < n_devices - 1; i++)
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002520:	e04f      	b.n	80025c2 <Bq_comm+0x412>
	         {
	           for (int j = 0; j < n_cells_per_device; j++)
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002528:	e042      	b.n	80025b0 <Bq_comm+0x400>
 800252a:	bf00      	nop
 800252c:	f3af 8000 	nop.w
 8002530:	9999999a 	.word	0x9999999a
 8002534:	3f999999 	.word	0x3f999999
 8002538:	58020000 	.word	0x58020000
 800253c:	24001008 	.word	0x24001008
 8002540:	000f4240 	.word	0x000f4240
 8002544:	0801940c 	.word	0x0801940c
 8002548:	24001690 	.word	0x24001690
 800254c:	08019424 	.word	0x08019424
 8002550:	2400169c 	.word	0x2400169c
	           {
	             modules[i].vcells[j] =
	                 raw_to_float(&bms_instance->rx_buf[4 + i * (n_cells_per_device * 2 + 6) + 2 * j]) * 0.19073;
 8002554:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002558:	015b      	lsls	r3, r3, #5
 800255a:	1d1a      	adds	r2, r3, #4
 800255c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	3318      	adds	r3, #24
 8002566:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800256a:	4413      	add	r3, r2
 800256c:	3302      	adds	r3, #2
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff f97c 	bl	800186c <raw_to_float>
 8002574:	eef0 7a40 	vmov.f32	s15, s0
 8002578:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800257c:	ed9f 6b9c 	vldr	d6, [pc, #624]	@ 80027f0 <Bq_comm+0x640>
 8002580:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002584:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	             modules[i].vcells[j] =
 8002588:	499f      	ldr	r1, [pc, #636]	@ (8002808 <Bq_comm+0x658>)
 800258a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800258e:	4613      	mov	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4413      	add	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800259a:	4413      	add	r3, r2
 800259c:	3308      	adds	r3, #8
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	edc3 7a00 	vstr	s15, [r3]
	           for (int j = 0; j < n_cells_per_device; j++)
 80025a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025aa:	3301      	adds	r3, #1
 80025ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80025b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025b4:	2b0c      	cmp	r3, #12
 80025b6:	ddcd      	ble.n	8002554 <Bq_comm+0x3a4>
	         for (int i = 0; i < n_devices - 1; i++)
 80025b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80025bc:	3301      	adds	r3, #1
 80025be:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80025c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	ddab      	ble.n	8002522 <Bq_comm+0x372>
	           }
	         }
	         memset(&bms_instance->rx_buf, 0 , sizeof(&bms_instance->rx_buf));
 80025ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80025ce:	331a      	adds	r3, #26
 80025d0:	2204      	movs	r2, #4
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f015 fd88 	bl	80180ea <memset>
	         uint32_t start_temp = GPIO1_HI; // GPIO8_HI ;
 80025da:	f240 538e 	movw	r3, #1422	@ 0x58e
 80025de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	         bq79600_construct_command(bms_instance, STACK_READ, 0, start_temp, n_temp_pre_device  * 2, NULL);
 80025e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	2200      	movs	r2, #0
 80025ea:	9201      	str	r2, [sp, #4]
 80025ec:	2210      	movs	r2, #16
 80025ee:	9200      	str	r2, [sp, #0]
 80025f0:	2200      	movs	r2, #0
 80025f2:	2102      	movs	r1, #2
 80025f4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80025f8:	f7fe fd5e 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 80025fc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8002600:	f7fe fdea 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 8002604:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8002608:	f7ff f811 	bl	800162e <bq79600_bsp_ready>

	         for (int i = 0; i < n_devices - 1; i++)
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002612:	e03b      	b.n	800268c <Bq_comm+0x4dc>
	         {
	           for (int j = 0; j < n_temp_pre_device; j++)
 8002614:	2300      	movs	r3, #0
 8002616:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800261a:	e02e      	b.n	800267a <Bq_comm+0x4ca>
	           {
	             modules[i].temperature[j] =
	                 raw_to_float(&bms_instance->rx_buf[4 + i * (n_temp_pre_device * 2 + 6) + 2 * j]) * 0.15259;
 800261c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002620:	2216      	movs	r2, #22
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	1d1a      	adds	r2, r3, #4
 8002628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	3318      	adds	r3, #24
 8002632:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002636:	4413      	add	r3, r2
 8002638:	3302      	adds	r3, #2
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff f916 	bl	800186c <raw_to_float>
 8002640:	eef0 7a40 	vmov.f32	s15, s0
 8002644:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002648:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 80027f8 <Bq_comm+0x648>
 800264c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002650:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	             modules[i].temperature[j] =
 8002654:	496c      	ldr	r1, [pc, #432]	@ (8002808 <Bq_comm+0x658>)
 8002656:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800265a:	4613      	mov	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	edc3 7a00 	vstr	s15, [r3]
	           for (int j = 0; j < n_temp_pre_device; j++)
 8002670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002674:	3301      	adds	r3, #1
 8002676:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800267a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800267e:	2b07      	cmp	r3, #7
 8002680:	ddcc      	ble.n	800261c <Bq_comm+0x46c>
	         for (int i = 0; i < n_devices - 1; i++)
 8002682:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002686:	3301      	adds	r3, #1
 8002688:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800268c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002690:	2b01      	cmp	r3, #1
 8002692:	ddbf      	ble.n	8002614 <Bq_comm+0x464>
	           }
	         }
	         uint32_t start_temp_ref = TSREF_HI ;
 8002694:	f240 538c 	movw	r3, #1420	@ 0x58c
 8002698:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	         bq79600_construct_command(bms_instance, STACK_READ, 0, start_temp_ref, 2, NULL);
 800269c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2200      	movs	r2, #0
 80026a4:	9201      	str	r2, [sp, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	9200      	str	r2, [sp, #0]
 80026aa:	2200      	movs	r2, #0
 80026ac:	2102      	movs	r1, #2
 80026ae:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80026b2:	f7fe fd01 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 80026b6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80026ba:	f7fe fd8d 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 80026be:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80026c2:	f7fe ffb4 	bl	800162e <bq79600_bsp_ready>

	         for (int i = 0; i < n_devices - 1; i++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80026cc:	e025      	b.n	800271a <Bq_comm+0x56a>
	             modules[i].t_ref =
	                 raw_to_float(&bms_instance->rx_buf[4 + i * 8]) * 0.16954;
 80026ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	3304      	adds	r3, #4
 80026d6:	3318      	adds	r3, #24
 80026d8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80026dc:	4413      	add	r3, r2
 80026de:	3302      	adds	r3, #2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff f8c3 	bl	800186c <raw_to_float>
 80026e6:	eef0 7a40 	vmov.f32	s15, s0
 80026ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026ee:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8002800 <Bq_comm+0x650>
 80026f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80026f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	             modules[i].t_ref =
 80026fa:	4943      	ldr	r1, [pc, #268]	@ (8002808 <Bq_comm+0x658>)
 80026fc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	015b      	lsls	r3, r3, #5
 8002708:	440b      	add	r3, r1
 800270a:	3354      	adds	r3, #84	@ 0x54
 800270c:	edc3 7a00 	vstr	s15, [r3]
	         for (int i = 0; i < n_devices - 1; i++)
 8002710:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002714:	3301      	adds	r3, #1
 8002716:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800271a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800271e:	2b01      	cmp	r3, #1
 8002720:	ddd5      	ble.n	80026ce <Bq_comm+0x51e>

	         ntc_cfg_t cfg = {
 8002722:	4b3a      	ldr	r3, [pc, #232]	@ (800280c <Bq_comm+0x65c>)
 8002724:	f107 04bc 	add.w	r4, r7, #188	@ 0xbc
 8002728:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800272a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	           .R_top  = 10000.0f,   // R100
	           .R_bias = 100000.0f,  // R101
	           .R0     = 10000.0f,
	           .B      = 3380.0f     // or 3000 if that’s your actual NTC
	         };
	         float t_c   = gpio_ratio_to_celsius( (modules[1].temperature[0] * -1), modules[1].t_ref ,cfg );
 800272e:	4b36      	ldr	r3, [pc, #216]	@ (8002808 <Bq_comm+0x658>)
 8002730:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8002734:	eef1 7a67 	vneg.f32	s15, s15
 8002738:	4b33      	ldr	r3, [pc, #204]	@ (8002808 <Bq_comm+0x658>)
 800273a:	ed93 7a2d 	vldr	s14, [r3, #180]	@ 0xb4
 800273e:	ed97 5a2f 	vldr	s10, [r7, #188]	@ 0xbc
 8002742:	edd7 5a30 	vldr	s11, [r7, #192]	@ 0xc0
 8002746:	ed97 6a31 	vldr	s12, [r7, #196]	@ 0xc4
 800274a:	edd7 6a32 	vldr	s13, [r7, #200]	@ 0xc8
 800274e:	eeb0 1a45 	vmov.f32	s2, s10
 8002752:	eef0 1a65 	vmov.f32	s3, s11
 8002756:	eeb0 2a46 	vmov.f32	s4, s12
 800275a:	eef0 2a66 	vmov.f32	s5, s13
 800275e:	eef0 0a47 	vmov.f32	s1, s14
 8002762:	eeb0 0a67 	vmov.f32	s0, s15
 8002766:	f7fe ffd9 	bl	800171c <gpio_ratio_to_celsius>
 800276a:	ed87 0a35 	vstr	s0, [r7, #212]	@ 0xd4



	         for (int i = 0; i < n_devices - 1; i++) modules[i].timestamp = HAL_GetTick();
 800276e:	2300      	movs	r3, #0
 8002770:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002774:	e012      	b.n	800279c <Bq_comm+0x5ec>
 8002776:	f001 f835 	bl	80037e4 <HAL_GetTick>
 800277a:	4603      	mov	r3, r0
 800277c:	4618      	mov	r0, r3
 800277e:	4922      	ldr	r1, [pc, #136]	@ (8002808 <Bq_comm+0x658>)
 8002780:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	015b      	lsls	r3, r3, #5
 800278c:	440b      	add	r3, r1
 800278e:	335c      	adds	r3, #92	@ 0x5c
 8002790:	6018      	str	r0, [r3, #0]
 8002792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002796:	3301      	adds	r3, #1
 8002798:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	dde8      	ble.n	8002776 <Bq_comm+0x5c6>
	         bq79600_construct_command(bms_instance, STACK_READ, 0, DEV_STAT, 1, NULL); // DEV_STAT READ.
 80027a4:	2300      	movs	r3, #0
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	2301      	movs	r3, #1
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	f240 532c 	movw	r3, #1324	@ 0x52c
 80027b0:	2200      	movs	r2, #0
 80027b2:	2102      	movs	r1, #2
 80027b4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80027b8:	f7fe fc7e 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 80027bc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80027c0:	f7fe fd0a 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 80027c4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80027c8:	f7fe ff31 	bl	800162e <bq79600_bsp_ready>

	         // end of reading data from BQ79600

	         for (int i = 0; i < n_devices - 1; i++) // send data from bq to different tasks.
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80027d2:	e0ad      	b.n	8002930 <Bq_comm+0x780>
	         {
		     BQ_Data Data_to_send = {0}; // struct to send to queue
 80027d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027d8:	2270      	movs	r2, #112	@ 0x70
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f015 fc84 	bl	80180ea <memset>
		     Data_to_send.BQ_Number = i ;
 80027e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80027e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		     for (int j = 0; j < n_cells_per_device; j++)
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80027ee:	e02b      	b.n	8002848 <Bq_comm+0x698>
 80027f0:	342edbb6 	.word	0x342edbb6
 80027f4:	3fc869d7 	.word	0x3fc869d7
 80027f8:	b1d92b80 	.word	0xb1d92b80
 80027fc:	3fc38811 	.word	0x3fc38811
 8002800:	99ae924f 	.word	0x99ae924f
 8002804:	3fc5b37c 	.word	0x3fc5b37c
 8002808:	2400169c 	.word	0x2400169c
 800280c:	08019460 	.word	0x08019460
		     Data_to_send.Bq_Voltages[j] = modules[i].vcells[j];
 8002810:	4952      	ldr	r1, [pc, #328]	@ (800295c <Bq_comm+0x7ac>)
 8002812:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002822:	4413      	add	r3, r2
 8002824:	3308      	adds	r3, #8
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002830:	3306      	adds	r3, #6
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002838:	443b      	add	r3, r7
 800283a:	3bc4      	subs	r3, #196	@ 0xc4
 800283c:	601a      	str	r2, [r3, #0]
		     for (int j = 0; j < n_cells_per_device; j++)
 800283e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002842:	3301      	adds	r3, #1
 8002844:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002848:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800284c:	2b0c      	cmp	r3, #12
 800284e:	dddf      	ble.n	8002810 <Bq_comm+0x660>
		   //  Data_to_send.Bq_Temperatures[j] = modules[i].temperature;
		     Data_to_send.dietemp =  modules[i].dietemp;
 8002850:	4942      	ldr	r1, [pc, #264]	@ (800295c <Bq_comm+0x7ac>)
 8002852:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	015b      	lsls	r3, r3, #5
 800285e:	440b      	add	r3, r1
 8002860:	3358      	adds	r3, #88	@ 0x58
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		     Data_to_send.Bq_Timestamp = modules[i].timestamp;
 8002868:	493c      	ldr	r1, [pc, #240]	@ (800295c <Bq_comm+0x7ac>)
 800286a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	015b      	lsls	r3, r3, #5
 8002876:	440b      	add	r3, r1
 8002878:	335c      	adds	r3, #92	@ 0x5c
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	663b      	str	r3, [r7, #96]	@ 0x60

		     uint8_t dev_stat =  bms_instance->rx_buf[4 + i];
 800287e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002882:	3304      	adds	r3, #4
 8002884:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002888:	4413      	add	r3, r2
 800288a:	7e9b      	ldrb	r3, [r3, #26]
 800288c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
		     if (dev_stat & (1 << 6))
 8002890:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <Bq_comm+0x6f0>
		    	 Data_to_send.BQ_Undervoltage_Error = 1;
 800289c:	2301      	movs	r3, #1
 800289e:	657b      	str	r3, [r7, #84]	@ 0x54
		     if (dev_stat & (1 << 5))
 80028a0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <Bq_comm+0x700>
		    	 Data_to_send.BQ_Overvoltage_Error = 1;
 80028ac:	2301      	movs	r3, #1
 80028ae:	653b      	str	r3, [r7, #80]	@ 0x50
		     if (dev_stat & (1 << 4))
 80028b0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <Bq_comm+0x710>
		    	 Data_to_send.BQ_Communication_Error = 1;
 80028bc:	2301      	movs	r3, #1
 80028be:	65fb      	str	r3, [r7, #92]	@ 0x5c
            if( osMessageQueuePut(BQ79614_QueueHandle, &Data_to_send, 5, 5) == osOK)
 80028c0:	4b27      	ldr	r3, [pc, #156]	@ (8002960 <Bq_comm+0x7b0>)
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80028c8:	2305      	movs	r3, #5
 80028ca:	2205      	movs	r2, #5
 80028cc:	f011 fe82 	bl	80145d4 <osMessageQueuePut>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d127      	bne.n	8002926 <Bq_comm+0x776>
            	 {
           	 Message bq_mes = {0};
 80028d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80028de:	4618      	mov	r0, r3
 80028e0:	2344      	movs	r3, #68	@ 0x44
 80028e2:	461a      	mov	r2, r3
 80028e4:	2100      	movs	r1, #0
 80028e6:	f015 fc00 	bl	80180ea <memset>
             strcpy(bq_mes.Buf, "BQ_Message succesfully sent!\n0");
 80028ea:	f107 0308 	add.w	r3, r7, #8
 80028ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002964 <Bq_comm+0x7b4>)
 80028f0:	461c      	mov	r4, r3
 80028f2:	4615      	mov	r5, r2
 80028f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80028fc:	c407      	stmia	r4!, {r0, r1, r2}
 80028fe:	8023      	strh	r3, [r4, #0]
 8002900:	3402      	adds	r4, #2
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	7023      	strb	r3, [r4, #0]
           	 bq_mes.Timestamp = HAL_GetTick();
 8002906:	f000 ff6d 	bl	80037e4 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002914:	641a      	str	r2, [r3, #64]	@ 0x40
           	 osMessageQueuePut(Messages_QueueHandle, &bq_mes, 0, 5);
 8002916:	4b14      	ldr	r3, [pc, #80]	@ (8002968 <Bq_comm+0x7b8>)
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	f107 0108 	add.w	r1, r7, #8
 800291e:	2305      	movs	r3, #5
 8002920:	2200      	movs	r2, #0
 8002922:	f011 fe57 	bl	80145d4 <osMessageQueuePut>
	         for (int i = 0; i < n_devices - 1; i++) // send data from bq to different tasks.
 8002926:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800292a:	3301      	adds	r3, #1
 800292c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002930:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002934:	2b01      	cmp	r3, #1
 8002936:	f77f af4d 	ble.w	80027d4 <Bq_comm+0x624>
           	 }
	         }
	         HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2) ;
 800293a:	2104      	movs	r1, #4
 800293c:	480b      	ldr	r0, [pc, #44]	@ (800296c <Bq_comm+0x7bc>)
 800293e:	f005 fbf8 	bl	8008132 <HAL_GPIO_TogglePin>
	         memset(&bms_instance->rx_buf, 0 , sizeof(&bms_instance->rx_buf));
 8002942:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002946:	331a      	adds	r3, #26
 8002948:	2204      	movs	r2, #4
 800294a:	2100      	movs	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f015 fbcc 	bl	80180ea <memset>
	         vTaskDelay(100);
 8002952:	2064      	movs	r0, #100	@ 0x64
 8002954:	f012 ff5c 	bl	8015810 <vTaskDelay>
	  while (1) {
 8002958:	e584      	b.n	8002464 <Bq_comm+0x2b4>
 800295a:	bf00      	nop
 800295c:	2400169c 	.word	0x2400169c
 8002960:	24001688 	.word	0x24001688
 8002964:	08019440 	.word	0x08019440
 8002968:	24001690 	.word	0x24001690
 800296c:	58021000 	.word	0x58021000

08002970 <Safety>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Safety */
void Safety(void *argument)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Safety */
	// this task is responsible for enabling the relay responsible for supplying power to the inverter.
	int overvoltage = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
    int undervoltage = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	613b      	str	r3, [r7, #16]
    int comm_err = 0 ;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
    int autoadressing_error = 0 ;
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]
	  	    overvoltage = Data_received.BQ_Overvoltage_Error ;
	  	    comm_err = Data_received.BQ_Communication_Error ;
	  	    autoadressing_error = Data_received.BQ_Autoadressing_Error;
	  	 } */

	  if(!autoadressing_error && !comm_err && !overvoltage && !undervoltage)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10f      	bne.n	80029ae <Safety+0x3e>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10c      	bne.n	80029ae <Safety+0x3e>
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <Safety+0x3e>
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d106      	bne.n	80029ae <Safety+0x3e>
	  	{
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  1);
 80029a0:	2201      	movs	r2, #1
 80029a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029a6:	480b      	ldr	r0, [pc, #44]	@ (80029d4 <Safety+0x64>)
 80029a8:	f005 fbaa 	bl	8008100 <HAL_GPIO_WritePin>
 80029ac:	e00a      	b.n	80029c4 <Safety+0x54>
	  	}
	  	else
	  	{
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029b4:	4807      	ldr	r0, [pc, #28]	@ (80029d4 <Safety+0x64>)
 80029b6:	f005 fba3 	bl	8008100 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4,  0);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2110      	movs	r1, #16
 80029be:	4806      	ldr	r0, [pc, #24]	@ (80029d8 <Safety+0x68>)
 80029c0:	f005 fb9e 	bl	8008100 <HAL_GPIO_WritePin>
	  	}
	      osDelay(10);
 80029c4:	200a      	movs	r0, #10
 80029c6:	f011 fd77 	bl	80144b8 <osDelay>
    osDelay(1);
 80029ca:	2001      	movs	r0, #1
 80029cc:	f011 fd74 	bl	80144b8 <osDelay>
	  if(!autoadressing_error && !comm_err && !overvoltage && !undervoltage)
 80029d0:	e7da      	b.n	8002988 <Safety+0x18>
 80029d2:	bf00      	nop
 80029d4:	58020800 	.word	0x58020800
 80029d8:	58021000 	.word	0x58021000

080029dc <Led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Led */
void Led(void *argument)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b0a2      	sub	sp, #136	@ 0x88
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Led */

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 80029e4:	2201      	movs	r2, #1
 80029e6:	213c      	movs	r1, #60	@ 0x3c
 80029e8:	4823      	ldr	r0, [pc, #140]	@ (8002a78 <Led+0x9c>)
 80029ea:	f005 fb89 	bl	8008100 <HAL_GPIO_WritePin>
	int overvoltage = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	int undervoltage = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	int comm_err = 0 ;
 80029fa:	2300      	movs	r3, #0
 80029fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  /* Infinite loop */
  for(;;)
  {

	  BQ_Data Data_received = {0};
 80029fe:	f107 030c 	add.w	r3, r7, #12
 8002a02:	2270      	movs	r2, #112	@ 0x70
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f015 fb6f 	bl	80180ea <memset>
	  if (osMessageQueueGet(BQ79614_QueueHandle, &Data_received, NULL, 10) == osOK)
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a7c <Led+0xa0>)
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	f107 010c 	add.w	r1, r7, #12
 8002a14:	230a      	movs	r3, #10
 8002a16:	2200      	movs	r2, #0
 8002a18:	f011 fe3c 	bl	8014694 <osMessageQueueGet>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d107      	bne.n	8002a32 <Led+0x56>
	  {
		  undervoltage = Data_received.BQ_Undervoltage_Error ;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	      overvoltage = Data_received.BQ_Overvoltage_Error ;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	      comm_err = Data_received.BQ_Communication_Error ;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  }


	 if( undervoltage || overvoltage )
 8002a32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d103      	bne.n	8002a42 <Led+0x66>
 8002a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d004      	beq.n	8002a4c <Led+0x70>
	  {
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2) ;
 8002a42:	2104      	movs	r1, #4
 8002a44:	480c      	ldr	r0, [pc, #48]	@ (8002a78 <Led+0x9c>)
 8002a46:	f005 fb74 	bl	8008132 <HAL_GPIO_TogglePin>
 8002a4a:	e004      	b.n	8002a56 <Led+0x7a>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2,1); // led pins serve as a pulldown thats why the led-off is to set pin high.
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	2104      	movs	r1, #4
 8002a50:	4809      	ldr	r0, [pc, #36]	@ (8002a78 <Led+0x9c>)
 8002a52:	f005 fb55 	bl	8008100 <HAL_GPIO_WritePin>

	  }
	  if( comm_err )
 8002a56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d004      	beq.n	8002a66 <Led+0x8a>
	  {
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3) ;
 8002a5c:	2108      	movs	r1, #8
 8002a5e:	4806      	ldr	r0, [pc, #24]	@ (8002a78 <Led+0x9c>)
 8002a60:	f005 fb67 	bl	8008132 <HAL_GPIO_TogglePin>
 8002a64:	e004      	b.n	8002a70 <Led+0x94>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3 ,1);
 8002a66:	2201      	movs	r2, #1
 8002a68:	2108      	movs	r1, #8
 8002a6a:	4803      	ldr	r0, [pc, #12]	@ (8002a78 <Led+0x9c>)
 8002a6c:	f005 fb48 	bl	8008100 <HAL_GPIO_WritePin>
	  }

	  osDelay(250);
 8002a70:	20fa      	movs	r0, #250	@ 0xfa
 8002a72:	f011 fd21 	bl	80144b8 <osDelay>
  {
 8002a76:	e7c2      	b.n	80029fe <Led+0x22>
 8002a78:	58021000 	.word	0x58021000
 8002a7c:	24001688 	.word	0x24001688

08002a80 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	  if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) // for debugging the button resets all the errors; pressed state is zero
 8002a88:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a8c:	480d      	ldr	r0, [pc, #52]	@ (8002ac4 <StartTask05+0x44>)
 8002a8e:	f005 fb1f 	bl	80080d0 <HAL_GPIO_ReadPin>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d110      	bne.n	8002aba <StartTask05+0x3a>
		{
		  Data_Receaved.BQ_Autoadressing_Error = Data_Receaved.BQ_Overvoltage_Error = Data_Receaved.BQ_Communication_Error = 0;
 8002a98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <StartTask05+0x48>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac8 <StartTask05+0x48>)
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	4a09      	ldr	r2, [pc, #36]	@ (8002ac8 <StartTask05+0x48>)
 8002aa4:	6053      	str	r3, [r2, #4]
 8002aa6:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <StartTask05+0x48>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4a07      	ldr	r2, [pc, #28]	@ (8002ac8 <StartTask05+0x48>)
 8002aac:	60d3      	str	r3, [r2, #12]
		  osDelay(2000);
 8002aae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ab2:	f011 fd01 	bl	80144b8 <osDelay>
		  HAL_NVIC_SystemReset();
 8002ab6:	f002 f894 	bl	8004be2 <HAL_NVIC_SystemReset>

		}
	  osDelay(100);
 8002aba:	2064      	movs	r0, #100	@ 0x64
 8002abc:	f011 fcfc 	bl	80144b8 <osDelay>
	  if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) // for debugging the button resets all the errors; pressed state is zero
 8002ac0:	e7e2      	b.n	8002a88 <StartTask05+0x8>
 8002ac2:	bf00      	nop
 8002ac4:	58020400 	.word	0x58020400
 8002ac8:	2400175c 	.word	0x2400175c

08002acc <Usb>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Usb */
void Usb(void *argument)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b0cc      	sub	sp, #304	@ 0x130
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ad6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ada:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Usb */
  /* Infinite loop */
	uint8_t priority = 5 ;
 8002adc:	2305      	movs	r3, #5
 8002ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
	BQ_Data Data_received = {0};
 8002ae2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002ae6:	2270      	movs	r2, #112	@ 0x70
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f015 fafd 	bl	80180ea <memset>
	Message Message_received = {0};
 8002af0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002af4:	2244      	movs	r2, #68	@ 0x44
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f015 faf6 	bl	80180ea <memset>
	char message[32]={0};
 8002afe:	2300      	movs	r3, #0
 8002b00:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b02:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	60da      	str	r2, [r3, #12]
 8002b10:	611a      	str	r2, [r3, #16]
 8002b12:	615a      	str	r2, [r3, #20]
 8002b14:	619a      	str	r2, [r3, #24]
  for(;;)
  {   //   (Messages_QueueHandle

	       if (osMessageQueueGet(Messages_QueueHandle, &Message_received, &priority, 1) == osOK)
 8002b16:	4ba8      	ldr	r3, [pc, #672]	@ (8002db8 <Usb+0x2ec>)
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	f207 1227 	addw	r2, r7, #295	@ 0x127
 8002b1e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8002b22:	2301      	movs	r3, #1
 8002b24:	f011 fdb6 	bl	8014694 <osMessageQueueGet>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d113      	bne.n	8002b56 <Usb+0x8a>
	           {

		         while (CDC_Transmit_FS((uint8_t*)Message_received.Buf, strlen(Message_received.Buf)) == USBD_BUSY){
 8002b2e:	e002      	b.n	8002b36 <Usb+0x6a>
		        	 vTaskDelay(10);
 8002b30:	200a      	movs	r0, #10
 8002b32:	f012 fe6d 	bl	8015810 <vTaskDelay>
		         while (CDC_Transmit_FS((uint8_t*)Message_received.Buf, strlen(Message_received.Buf)) == USBD_BUSY){
 8002b36:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fbd0 	bl	80002e0 <strlen>
 8002b40:	4603      	mov	r3, r0
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f014 fcaa 	bl	80174a4 <CDC_Transmit_FS>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d0ec      	beq.n	8002b30 <Usb+0x64>
		         }

	           }

	       if (osMessageQueueGet(BQ79614_QueueHandle, &Data_received, &priority, 1) == osOK)
 8002b56:	4b99      	ldr	r3, [pc, #612]	@ (8002dbc <Usb+0x2f0>)
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	f207 1227 	addw	r2, r7, #295	@ 0x127
 8002b5e:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8002b62:	2301      	movs	r3, #1
 8002b64:	f011 fd96 	bl	8014694 <osMessageQueueGet>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f040 8102 	bne.w	8002d74 <Usb+0x2a8>
	  		{
	    	   for(int i = 0 ; i< n_cells_per_device; i++ )
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002b76:	e03a      	b.n	8002bee <Usb+0x122>
	    	                 {
	    	                 char message[64] = {0};
 8002b78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002b7c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	3304      	adds	r3, #4
 8002b86:	223c      	movs	r2, #60	@ 0x3c
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f015 faad 	bl	80180ea <memset>
	    	                 sprintf(message  , "BQ Number:%d bq voltage value:%d [mV] \n" ,Data_received.BQ_Number+1 , (int)Data_received.Bq_Voltages[i] );
 8002b90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002b9a:	3306      	adds	r3, #6
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002ba2:	443b      	add	r3, r7
 8002ba4:	3b7c      	subs	r3, #124	@ 0x7c
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bae:	f107 0008 	add.w	r0, r7, #8
 8002bb2:	ee17 3a90 	vmov	r3, s15
 8002bb6:	4982      	ldr	r1, [pc, #520]	@ (8002dc0 <Usb+0x2f4>)
 8002bb8:	f015 fa34 	bl	8018024 <siprintf>
	    	                // CDC_Transmit_FS((uint8_t*)message, strlen(message));
	    	                 while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002bbc:	e002      	b.n	8002bc4 <Usb+0xf8>
	    	                	 	 	 vTaskDelay(1); // Delay to allow USB stack to process
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	f012 fe26 	bl	8015810 <vTaskDelay>
	    	                 while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002bc4:	f107 0308 	add.w	r3, r7, #8
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fb89 	bl	80002e0 <strlen>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	f107 0308 	add.w	r3, r7, #8
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f014 fc63 	bl	80174a4 <CDC_Transmit_FS>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d0ec      	beq.n	8002bbe <Usb+0xf2>
	    	   for(int i = 0 ; i< n_cells_per_device; i++ )
 8002be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002be8:	3301      	adds	r3, #1
 8002bea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002bf2:	2b0c      	cmp	r3, #12
 8002bf4:	ddc0      	ble.n	8002b78 <Usb+0xac>
	    	                 	    	   }
	    	                 }

	    	   	   	   	   	if(Data_received.BQ_Overvoltage_Error)
 8002bf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d019      	beq.n	8002c32 <Usb+0x166>
	    	   	   	   	   	{
	    	   	   	   	   		sprintf(message  , "BQ OVERVOLTAGE ERROR! \n" );
 8002bfe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c02:	4970      	ldr	r1, [pc, #448]	@ (8002dc4 <Usb+0x2f8>)
 8002c04:	4618      	mov	r0, r3
 8002c06:	f015 fa0d 	bl	8018024 <siprintf>
	    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002c0a:	e002      	b.n	8002c12 <Usb+0x146>
	    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	f012 fdff 	bl	8015810 <vTaskDelay>
	    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002c12:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fb62 	bl	80002e0 <strlen>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f014 fc3c 	bl	80174a4 <CDC_Transmit_FS>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d0ec      	beq.n	8002c0c <Usb+0x140>
	    	   	   	   	          	}
	    	   	   	   	   	}
		    	   	   	   	   	if(Data_received.BQ_Undervoltage_Error)
 8002c32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <Usb+0x1a2>
		    	   	   	   	   	{
		    	   	   	   	   		sprintf(message  , "BQ UNDERVOLTAGE ERROR! \n" );
 8002c3a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c3e:	4962      	ldr	r1, [pc, #392]	@ (8002dc8 <Usb+0x2fc>)
 8002c40:	4618      	mov	r0, r3
 8002c42:	f015 f9ef 	bl	8018024 <siprintf>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002c46:	e002      	b.n	8002c4e <Usb+0x182>
		    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 8002c48:	2001      	movs	r0, #1
 8002c4a:	f012 fde1 	bl	8015810 <vTaskDelay>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002c4e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fd fb44 	bl	80002e0 <strlen>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f014 fc1e 	bl	80174a4 <CDC_Transmit_FS>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d0ec      	beq.n	8002c48 <Usb+0x17c>
		    	   	   	   	   	         }
	    	        	    	   }
		    	   	   	   	   	if(Data_received.BQ_Communication_Error)
 8002c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d019      	beq.n	8002caa <Usb+0x1de>
		    	   	   	   	   	{
		    	   	   	   	   		sprintf(message  , "BQ COMM ERROR! \n" );
 8002c76:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c7a:	4954      	ldr	r1, [pc, #336]	@ (8002dcc <Usb+0x300>)
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f015 f9d1 	bl	8018024 <siprintf>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002c82:	e002      	b.n	8002c8a <Usb+0x1be>
		    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 8002c84:	2001      	movs	r0, #1
 8002c86:	f012 fdc3 	bl	8015810 <vTaskDelay>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002c8a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fd fb26 	bl	80002e0 <strlen>
 8002c94:	4603      	mov	r3, r0
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f014 fc00 	bl	80174a4 <CDC_Transmit_FS>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d0ec      	beq.n	8002c84 <Usb+0x1b8>
		    	   	   	   	   	         }
	    	        	    	   }
		    	   	   	   	   	   sprintf(message  , "Temperature of BQ: %d  [deg C]\n" , (int)Data_received.dietemp );
 8002caa:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8002cae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cb2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002cb6:	ee17 2a90 	vmov	r2, s15
 8002cba:	4945      	ldr	r1, [pc, #276]	@ (8002dd0 <Usb+0x304>)
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f015 f9b1 	bl	8018024 <siprintf>
		    	   	   	   	   	   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002cc2:	e002      	b.n	8002cca <Usb+0x1fe>
		    	   	   	   	   	   		   	   vTaskDelay(1); // Delay to allow USB stack to process
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f012 fda3 	bl	8015810 <vTaskDelay>
		    	   	   	   	   	   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002cca:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fb06 	bl	80002e0 <strlen>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f014 fbe0 	bl	80174a4 <CDC_Transmit_FS>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d0ec      	beq.n	8002cc4 <Usb+0x1f8>
		    	   	   	   	   }
		    	   	   	   	   	   sprintf(message  , "Timestamp: %d \n" , Data_received.Bq_Timestamp );
 8002cea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002cee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002cf2:	4938      	ldr	r1, [pc, #224]	@ (8002dd4 <Usb+0x308>)
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f015 f995 	bl	8018024 <siprintf>
		    	   	   	   	   	   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002cfa:	e002      	b.n	8002d02 <Usb+0x236>
		    	   	   	   	   		   	   vTaskDelay(1); // Delay to allow USB stack to process
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f012 fd87 	bl	8015810 <vTaskDelay>
		    	   	   	   	   	   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002d02:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd faea 	bl	80002e0 <strlen>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f014 fbc4 	bl	80174a4 <CDC_Transmit_FS>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d0ec      	beq.n	8002cfc <Usb+0x230>
		    	   	   	   	   	   }
	    	                 //CDC_Transmit_FS((uint8_t*)message2, strlen(message2));
	    	                 osDelay(5);
 8002d22:	2005      	movs	r0, #5
 8002d24:	f011 fbc8 	bl	80144b8 <osDelay>
	    	                 char message[6] = " \n";
 8002d28:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8002d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	    	                 for(int i = 0 ; i< 3; i++ )
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002d3a:	e017      	b.n	8002d6c <Usb+0x2a0>
	    	                while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
	    	                			vTaskDelay(10); // Delay to allow USB stack to process
 8002d3c:	200a      	movs	r0, #10
 8002d3e:	f012 fd67 	bl	8015810 <vTaskDelay>
	    	                while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002d42:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd faca 	bl	80002e0 <strlen>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f014 fba4 	bl	80174a4 <CDC_Transmit_FS>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d0ec      	beq.n	8002d3c <Usb+0x270>
	    	                 for(int i = 0 ; i< 3; i++ )
 8002d62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002d66:	3301      	adds	r3, #1
 8002d68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002d6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	dde6      	ble.n	8002d42 <Usb+0x276>




	  		}
	       HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3) ;
 8002d74:	2108      	movs	r1, #8
 8002d76:	4818      	ldr	r0, [pc, #96]	@ (8002dd8 <Usb+0x30c>)
 8002d78:	f005 f9db 	bl	8008132 <HAL_GPIO_TogglePin>

	  if(usbRxFlag && usbRxBufLen)
 8002d7c:	4b17      	ldr	r3, [pc, #92]	@ (8002ddc <Usb+0x310>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d015      	beq.n	8002db0 <Usb+0x2e4>
 8002d84:	4b16      	ldr	r3, [pc, #88]	@ (8002de0 <Usb+0x314>)
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d011      	beq.n	8002db0 <Usb+0x2e4>
		  case '4' :
			  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
			   break;
		  }
		  flag_usb = 0 ; */
		  CDC_Transmit_FS((uint8_t*)buffer_usb1, strlen(buffer_usb1));
 8002d8c:	4815      	ldr	r0, [pc, #84]	@ (8002de4 <Usb+0x318>)
 8002d8e:	f7fd faa7 	bl	80002e0 <strlen>
 8002d92:	4603      	mov	r3, r0
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	4619      	mov	r1, r3
 8002d98:	4812      	ldr	r0, [pc, #72]	@ (8002de4 <Usb+0x318>)
 8002d9a:	f014 fb83 	bl	80174a4 <CDC_Transmit_FS>
		  usbRxFlag = 0 ;
 8002d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ddc <Usb+0x310>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
		  usbRxBufLen = 0 ;
 8002da4:	4b0e      	ldr	r3, [pc, #56]	@ (8002de0 <Usb+0x314>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	801a      	strh	r2, [r3, #0]
		  vTaskDelay(100);
 8002daa:	2064      	movs	r0, #100	@ 0x64
 8002dac:	f012 fd30 	bl	8015810 <vTaskDelay>

	  }


	  vTaskDelay(1);
 8002db0:	2001      	movs	r0, #1
 8002db2:	f012 fd2d 	bl	8015810 <vTaskDelay>
	       if (osMessageQueueGet(Messages_QueueHandle, &Message_received, &priority, 1) == osOK)
 8002db6:	e6ae      	b.n	8002b16 <Usb+0x4a>
 8002db8:	24001690 	.word	0x24001690
 8002dbc:	24001688 	.word	0x24001688
 8002dc0:	08019470 	.word	0x08019470
 8002dc4:	08019498 	.word	0x08019498
 8002dc8:	080194b0 	.word	0x080194b0
 8002dcc:	080194cc 	.word	0x080194cc
 8002dd0:	080194e0 	.word	0x080194e0
 8002dd4:	08019500 	.word	0x08019500
 8002dd8:	58021000 	.word	0x58021000
 8002ddc:	2400184e 	.word	0x2400184e
 8002de0:	2400184c 	.word	0x2400184c
 8002de4:	240000a8 	.word	0x240000a8

08002de8 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002dee:	463b      	mov	r3, r7
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002dfa:	f001 fef7 	bl	8004bec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002e0a:	231f      	movs	r3, #31
 8002e0c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002e0e:	2387      	movs	r3, #135	@ 0x87
 8002e10:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002e16:	2300      	movs	r3, #0
 8002e18:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002e2a:	463b      	mov	r3, r7
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f001 ff15 	bl	8004c5c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002e32:	2004      	movs	r0, #4
 8002e34:	f001 fef2 	bl	8004c1c <HAL_MPU_Enable>

}
 8002e38:	bf00      	nop
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d101      	bne.n	8002e56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e52:	f000 fcb3 	bl	80037bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40000c00 	.word	0x40000c00

08002e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e68:	b672      	cpsid	i
}
 8002e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e6c:	bf00      	nop
 8002e6e:	e7fd      	b.n	8002e6c <Error_Handler+0x8>

08002e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea8 <HAL_MspInit+0x38>)
 8002e78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea8 <HAL_MspInit+0x38>)
 8002e7e:	f043 0302 	orr.w	r3, r3, #2
 8002e82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002e86:	4b08      	ldr	r3, [pc, #32]	@ (8002ea8 <HAL_MspInit+0x38>)
 8002e88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e94:	2200      	movs	r2, #0
 8002e96:	210f      	movs	r1, #15
 8002e98:	f06f 0001 	mvn.w	r0, #1
 8002e9c:	f001 fe6b 	bl	8004b76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	58024400 	.word	0x58024400

08002eac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b0ba      	sub	sp, #232	@ 0xe8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ec4:	f107 0310 	add.w	r3, r7, #16
 8002ec8:	22c0      	movs	r2, #192	@ 0xc0
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f015 f90c 	bl	80180ea <memset>
  if(hadc->Instance==ADC1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a2b      	ldr	r2, [pc, #172]	@ (8002f84 <HAL_ADC_MspInit+0xd8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d14f      	bne.n	8002f7c <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002edc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 38;
 8002eec:	2326      	movs	r3, #38	@ 0x26
 8002eee:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 6;
 8002ef4:	2306      	movs	r3, #6
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8002efc:	2380      	movs	r3, #128	@ 0x80
 8002efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002f00:	2320      	movs	r3, #32
 8002f02:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f0e:	f107 0310 	add.w	r3, r7, #16
 8002f12:	4618      	mov	r0, r3
 8002f14:	f007 fc38 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8002f1e:	f7ff ffa1 	bl	8002e64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f22:	4b19      	ldr	r3, [pc, #100]	@ (8002f88 <HAL_ADC_MspInit+0xdc>)
 8002f24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f28:	4a17      	ldr	r2, [pc, #92]	@ (8002f88 <HAL_ADC_MspInit+0xdc>)
 8002f2a:	f043 0320 	orr.w	r3, r3, #32
 8002f2e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002f32:	4b15      	ldr	r3, [pc, #84]	@ (8002f88 <HAL_ADC_MspInit+0xdc>)
 8002f34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f40:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <HAL_ADC_MspInit+0xdc>)
 8002f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f46:	4a10      	ldr	r2, [pc, #64]	@ (8002f88 <HAL_ADC_MspInit+0xdc>)
 8002f48:	f043 0304 	orr.w	r3, r3, #4
 8002f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f50:	4b0d      	ldr	r3, [pc, #52]	@ (8002f88 <HAL_ADC_MspInit+0xdc>)
 8002f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f5e:	2310      	movs	r3, #16
 8002f60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f64:	2303      	movs	r3, #3
 8002f66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002f74:	4619      	mov	r1, r3
 8002f76:	4805      	ldr	r0, [pc, #20]	@ (8002f8c <HAL_ADC_MspInit+0xe0>)
 8002f78:	f004 fdf0 	bl	8007b5c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002f7c:	bf00      	nop
 8002f7e:	37e8      	adds	r7, #232	@ 0xe8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40022000 	.word	0x40022000
 8002f88:	58024400 	.word	0x58024400
 8002f8c:	58020800 	.word	0x58020800

08002f90 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b0ba      	sub	sp, #232	@ 0xe8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fa8:	f107 0310 	add.w	r3, r7, #16
 8002fac:	22c0      	movs	r2, #192	@ 0xc0
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f015 f89a 	bl	80180ea <memset>
  if(hfdcan->Instance==FDCAN1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a27      	ldr	r2, [pc, #156]	@ (8003058 <HAL_FDCAN_MspInit+0xc8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d146      	bne.n	800304e <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002fc0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002fcc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002fd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fd4:	f107 0310 	add.w	r3, r7, #16
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f007 fbd5 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8002fe4:	f7ff ff3e 	bl	8002e64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800305c <HAL_FDCAN_MspInit+0xcc>)
 8002fea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002fee:	4a1b      	ldr	r2, [pc, #108]	@ (800305c <HAL_FDCAN_MspInit+0xcc>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff4:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002ff8:	4b18      	ldr	r3, [pc, #96]	@ (800305c <HAL_FDCAN_MspInit+0xcc>)
 8002ffa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003006:	4b15      	ldr	r3, [pc, #84]	@ (800305c <HAL_FDCAN_MspInit+0xcc>)
 8003008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800300c:	4a13      	ldr	r2, [pc, #76]	@ (800305c <HAL_FDCAN_MspInit+0xcc>)
 800300e:	f043 0308 	orr.w	r3, r3, #8
 8003012:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003016:	4b11      	ldr	r3, [pc, #68]	@ (800305c <HAL_FDCAN_MspInit+0xcc>)
 8003018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003024:	2303      	movs	r3, #3
 8003026:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003036:	2300      	movs	r3, #0
 8003038:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800303c:	2309      	movs	r3, #9
 800303e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003042:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003046:	4619      	mov	r1, r3
 8003048:	4805      	ldr	r0, [pc, #20]	@ (8003060 <HAL_FDCAN_MspInit+0xd0>)
 800304a:	f004 fd87 	bl	8007b5c <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800304e:	bf00      	nop
 8003050:	37e8      	adds	r7, #232	@ 0xe8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	4000a000 	.word	0x4000a000
 800305c:	58024400 	.word	0x58024400
 8003060:	58020c00 	.word	0x58020c00

08003064 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a16      	ldr	r2, [pc, #88]	@ (80030cc <HAL_TIM_Base_MspInit+0x68>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d10f      	bne.n	8003096 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003076:	4b16      	ldr	r3, [pc, #88]	@ (80030d0 <HAL_TIM_Base_MspInit+0x6c>)
 8003078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800307c:	4a14      	ldr	r2, [pc, #80]	@ (80030d0 <HAL_TIM_Base_MspInit+0x6c>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003086:	4b12      	ldr	r3, [pc, #72]	@ (80030d0 <HAL_TIM_Base_MspInit+0x6c>)
 8003088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003094:	e013      	b.n	80030be <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800309e:	d10e      	bne.n	80030be <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_TIM_Base_MspInit+0x6c>)
 80030a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030a6:	4a0a      	ldr	r2, [pc, #40]	@ (80030d0 <HAL_TIM_Base_MspInit+0x6c>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030b0:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <HAL_TIM_Base_MspInit+0x6c>)
 80030b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]
}
 80030be:	bf00      	nop
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40010000 	.word	0x40010000
 80030d0:	58024400 	.word	0x58024400

080030d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b0ba      	sub	sp, #232	@ 0xe8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030ec:	f107 0310 	add.w	r3, r7, #16
 80030f0:	22c0      	movs	r2, #192	@ 0xc0
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f014 fff8 	bl	80180ea <memset>
  if(huart->Instance==UART4)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a61      	ldr	r2, [pc, #388]	@ (8003284 <HAL_UART_MspInit+0x1b0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	f040 80bb 	bne.w	800327c <HAL_UART_MspInit+0x1a8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003106:	f04f 0202 	mov.w	r2, #2
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003112:	2300      	movs	r3, #0
 8003114:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003118:	f107 0310 	add.w	r3, r7, #16
 800311c:	4618      	mov	r0, r3
 800311e:	f007 fb33 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003128:	f7ff fe9c 	bl	8002e64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800312c:	4b56      	ldr	r3, [pc, #344]	@ (8003288 <HAL_UART_MspInit+0x1b4>)
 800312e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003132:	4a55      	ldr	r2, [pc, #340]	@ (8003288 <HAL_UART_MspInit+0x1b4>)
 8003134:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003138:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800313c:	4b52      	ldr	r3, [pc, #328]	@ (8003288 <HAL_UART_MspInit+0x1b4>)
 800313e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003142:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314a:	4b4f      	ldr	r3, [pc, #316]	@ (8003288 <HAL_UART_MspInit+0x1b4>)
 800314c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003150:	4a4d      	ldr	r2, [pc, #308]	@ (8003288 <HAL_UART_MspInit+0x1b4>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800315a:	4b4b      	ldr	r3, [pc, #300]	@ (8003288 <HAL_UART_MspInit+0x1b4>)
 800315c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003168:	2303      	movs	r3, #3
 800316a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003180:	2308      	movs	r3, #8
 8003182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003186:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800318a:	4619      	mov	r1, r3
 800318c:	483f      	ldr	r0, [pc, #252]	@ (800328c <HAL_UART_MspInit+0x1b8>)
 800318e:	f004 fce5 	bl	8007b5c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003192:	4b3f      	ldr	r3, [pc, #252]	@ (8003290 <HAL_UART_MspInit+0x1bc>)
 8003194:	4a3f      	ldr	r2, [pc, #252]	@ (8003294 <HAL_UART_MspInit+0x1c0>)
 8003196:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8003198:	4b3d      	ldr	r3, [pc, #244]	@ (8003290 <HAL_UART_MspInit+0x1bc>)
 800319a:	2240      	movs	r2, #64	@ 0x40
 800319c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800319e:	4b3c      	ldr	r3, [pc, #240]	@ (8003290 <HAL_UART_MspInit+0x1bc>)
 80031a0:	2240      	movs	r2, #64	@ 0x40
 80031a2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003290 <HAL_UART_MspInit+0x1bc>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031aa:	4b39      	ldr	r3, [pc, #228]	@ (8003290 <HAL_UART_MspInit+0x1bc>)
 80031ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031b0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031b2:	4b37      	ldr	r3, [pc, #220]	@ (8003290 <HAL_UART_MspInit+0x1bc>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031b8:	4b35      	ldr	r3, [pc, #212]	@ (8003290 <HAL_UART_MspInit+0x1bc>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80031be:	4b34      	ldr	r3, [pc, #208]	@ (8003290 <HAL_UART_MspInit+0x1bc>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031c4:	4b32      	ldr	r3, [pc, #200]	@ (8003290 <HAL_UART_MspInit+0x1bc>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80031ca:	4b31      	ldr	r3, [pc, #196]	@ (8003290 <HAL_UART_MspInit+0x1bc>)
 80031cc:	2204      	movs	r2, #4
 80031ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80031d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003290 <HAL_UART_MspInit+0x1bc>)
 80031d2:	2203      	movs	r2, #3
 80031d4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80031d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003290 <HAL_UART_MspInit+0x1bc>)
 80031d8:	2200      	movs	r2, #0
 80031da:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80031dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003290 <HAL_UART_MspInit+0x1bc>)
 80031de:	2200      	movs	r2, #0
 80031e0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80031e2:	482b      	ldr	r0, [pc, #172]	@ (8003290 <HAL_UART_MspInit+0x1bc>)
 80031e4:	f001 fd7a 	bl	8004cdc <HAL_DMA_Init>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_UART_MspInit+0x11e>
    {
      Error_Handler();
 80031ee:	f7ff fe39 	bl	8002e64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a26      	ldr	r2, [pc, #152]	@ (8003290 <HAL_UART_MspInit+0x1bc>)
 80031f6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80031f8:	4a25      	ldr	r2, [pc, #148]	@ (8003290 <HAL_UART_MspInit+0x1bc>)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream5;
 80031fe:	4b26      	ldr	r3, [pc, #152]	@ (8003298 <HAL_UART_MspInit+0x1c4>)
 8003200:	4a26      	ldr	r2, [pc, #152]	@ (800329c <HAL_UART_MspInit+0x1c8>)
 8003202:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8003204:	4b24      	ldr	r3, [pc, #144]	@ (8003298 <HAL_UART_MspInit+0x1c4>)
 8003206:	223f      	movs	r2, #63	@ 0x3f
 8003208:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800320a:	4b23      	ldr	r3, [pc, #140]	@ (8003298 <HAL_UART_MspInit+0x1c4>)
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003210:	4b21      	ldr	r3, [pc, #132]	@ (8003298 <HAL_UART_MspInit+0x1c4>)
 8003212:	2200      	movs	r2, #0
 8003214:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003216:	4b20      	ldr	r3, [pc, #128]	@ (8003298 <HAL_UART_MspInit+0x1c4>)
 8003218:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800321c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800321e:	4b1e      	ldr	r3, [pc, #120]	@ (8003298 <HAL_UART_MspInit+0x1c4>)
 8003220:	2200      	movs	r2, #0
 8003222:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003224:	4b1c      	ldr	r3, [pc, #112]	@ (8003298 <HAL_UART_MspInit+0x1c4>)
 8003226:	2200      	movs	r2, #0
 8003228:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800322a:	4b1b      	ldr	r3, [pc, #108]	@ (8003298 <HAL_UART_MspInit+0x1c4>)
 800322c:	2200      	movs	r2, #0
 800322e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003230:	4b19      	ldr	r3, [pc, #100]	@ (8003298 <HAL_UART_MspInit+0x1c4>)
 8003232:	2200      	movs	r2, #0
 8003234:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003236:	4b18      	ldr	r3, [pc, #96]	@ (8003298 <HAL_UART_MspInit+0x1c4>)
 8003238:	2204      	movs	r2, #4
 800323a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800323c:	4b16      	ldr	r3, [pc, #88]	@ (8003298 <HAL_UART_MspInit+0x1c4>)
 800323e:	2203      	movs	r2, #3
 8003240:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003242:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <HAL_UART_MspInit+0x1c4>)
 8003244:	2200      	movs	r2, #0
 8003246:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003248:	4b13      	ldr	r3, [pc, #76]	@ (8003298 <HAL_UART_MspInit+0x1c4>)
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800324e:	4812      	ldr	r0, [pc, #72]	@ (8003298 <HAL_UART_MspInit+0x1c4>)
 8003250:	f001 fd44 	bl	8004cdc <HAL_DMA_Init>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_UART_MspInit+0x18a>
    {
      Error_Handler();
 800325a:	f7ff fe03 	bl	8002e64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a0d      	ldr	r2, [pc, #52]	@ (8003298 <HAL_UART_MspInit+0x1c4>)
 8003262:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003266:	4a0c      	ldr	r2, [pc, #48]	@ (8003298 <HAL_UART_MspInit+0x1c4>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800326c:	2200      	movs	r2, #0
 800326e:	2105      	movs	r1, #5
 8003270:	2034      	movs	r0, #52	@ 0x34
 8003272:	f001 fc80 	bl	8004b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003276:	2034      	movs	r0, #52	@ 0x34
 8003278:	f001 fc97 	bl	8004baa <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 800327c:	bf00      	nop
 800327e:	37e8      	adds	r7, #232	@ 0xe8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40004c00 	.word	0x40004c00
 8003288:	58024400 	.word	0x58024400
 800328c:	58020000 	.word	0x58020000
 8003290:	2400109c 	.word	0x2400109c
 8003294:	40020070 	.word	0x40020070
 8003298:	24001114 	.word	0x24001114
 800329c:	40020088 	.word	0x40020088

080032a0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a10      	ldr	r2, [pc, #64]	@ (80032f0 <HAL_UART_MspDeInit+0x50>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d119      	bne.n	80032e6 <HAL_UART_MspDeInit+0x46>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80032b2:	4b10      	ldr	r3, [pc, #64]	@ (80032f4 <HAL_UART_MspDeInit+0x54>)
 80032b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032b8:	4a0e      	ldr	r2, [pc, #56]	@ (80032f4 <HAL_UART_MspDeInit+0x54>)
 80032ba:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80032be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 80032c2:	2103      	movs	r1, #3
 80032c4:	480c      	ldr	r0, [pc, #48]	@ (80032f8 <HAL_UART_MspDeInit+0x58>)
 80032c6:	f004 fdf9 	bl	8007ebc <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032ce:	4618      	mov	r0, r3
 80032d0:	f002 f860 	bl	8005394 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032da:	4618      	mov	r0, r3
 80032dc:	f002 f85a 	bl	8005394 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 80032e0:	2034      	movs	r0, #52	@ 0x34
 80032e2:	f001 fc70 	bl	8004bc6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }

}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40004c00 	.word	0x40004c00
 80032f4:	58024400 	.word	0x58024400
 80032f8:	58020000 	.word	0x58020000

080032fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b090      	sub	sp, #64	@ 0x40
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b0f      	cmp	r3, #15
 8003308:	d827      	bhi.n	800335a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 800330a:	2200      	movs	r2, #0
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	2032      	movs	r0, #50	@ 0x32
 8003310:	f001 fc31 	bl	8004b76 <HAL_NVIC_SetPriority>

     /* Enable the TIM5 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003314:	2032      	movs	r0, #50	@ 0x32
 8003316:	f001 fc48 	bl	8004baa <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800331a:	4a29      	ldr	r2, [pc, #164]	@ (80033c0 <HAL_InitTick+0xc4>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8003320:	4b28      	ldr	r3, [pc, #160]	@ (80033c4 <HAL_InitTick+0xc8>)
 8003322:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003326:	4a27      	ldr	r2, [pc, #156]	@ (80033c4 <HAL_InitTick+0xc8>)
 8003328:	f043 0308 	orr.w	r3, r3, #8
 800332c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003330:	4b24      	ldr	r3, [pc, #144]	@ (80033c4 <HAL_InitTick+0xc8>)
 8003332:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800333e:	f107 0210 	add.w	r2, r7, #16
 8003342:	f107 0314 	add.w	r3, r7, #20
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f007 f9db 	bl	800a704 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800334e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003350:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003354:	2b00      	cmp	r3, #0
 8003356:	d106      	bne.n	8003366 <HAL_InitTick+0x6a>
 8003358:	e001      	b.n	800335e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e02b      	b.n	80033b6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800335e:	f007 f9a5 	bl	800a6ac <HAL_RCC_GetPCLK1Freq>
 8003362:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8003364:	e004      	b.n	8003370 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003366:	f007 f9a1 	bl	800a6ac <HAL_RCC_GetPCLK1Freq>
 800336a:	4603      	mov	r3, r0
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003372:	4a15      	ldr	r2, [pc, #84]	@ (80033c8 <HAL_InitTick+0xcc>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	0c9b      	lsrs	r3, r3, #18
 800337a:	3b01      	subs	r3, #1
 800337c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800337e:	4b13      	ldr	r3, [pc, #76]	@ (80033cc <HAL_InitTick+0xd0>)
 8003380:	4a13      	ldr	r2, [pc, #76]	@ (80033d0 <HAL_InitTick+0xd4>)
 8003382:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8003384:	4b11      	ldr	r3, [pc, #68]	@ (80033cc <HAL_InitTick+0xd0>)
 8003386:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800338a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800338c:	4a0f      	ldr	r2, [pc, #60]	@ (80033cc <HAL_InitTick+0xd0>)
 800338e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003390:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8003392:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <HAL_InitTick+0xd0>)
 8003394:	2200      	movs	r2, #0
 8003396:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003398:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <HAL_InitTick+0xd0>)
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 800339e:	480b      	ldr	r0, [pc, #44]	@ (80033cc <HAL_InitTick+0xd0>)
 80033a0:	f009 fed4 	bl	800d14c <HAL_TIM_Base_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d104      	bne.n	80033b4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80033aa:	4808      	ldr	r0, [pc, #32]	@ (80033cc <HAL_InitTick+0xd0>)
 80033ac:	f009 ff96 	bl	800d2dc <HAL_TIM_Base_Start_IT>
 80033b0:	4603      	mov	r3, r0
 80033b2:	e000      	b.n	80033b6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3740      	adds	r7, #64	@ 0x40
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	240000bc 	.word	0x240000bc
 80033c4:	58024400 	.word	0x58024400
 80033c8:	431bde83 	.word	0x431bde83
 80033cc:	24001854 	.word	0x24001854
 80033d0:	40000c00 	.word	0x40000c00

080033d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033d8:	bf00      	nop
 80033da:	e7fd      	b.n	80033d8 <NMI_Handler+0x4>

080033dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033e0:	bf00      	nop
 80033e2:	e7fd      	b.n	80033e0 <HardFault_Handler+0x4>

080033e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033e8:	bf00      	nop
 80033ea:	e7fd      	b.n	80033e8 <MemManage_Handler+0x4>

080033ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033f0:	bf00      	nop
 80033f2:	e7fd      	b.n	80033f0 <BusFault_Handler+0x4>

080033f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033f8:	bf00      	nop
 80033fa:	e7fd      	b.n	80033f8 <UsageFault_Handler+0x4>

080033fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003410:	4802      	ldr	r0, [pc, #8]	@ (800341c <DMA1_Stream4_IRQHandler+0x10>)
 8003412:	f002 fed9 	bl	80061c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	2400109c 	.word	0x2400109c

08003420 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003424:	4802      	ldr	r0, [pc, #8]	@ (8003430 <DMA1_Stream5_IRQHandler+0x10>)
 8003426:	f002 fecf 	bl	80061c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	24001114 	.word	0x24001114

08003434 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003438:	4802      	ldr	r0, [pc, #8]	@ (8003444 <TIM5_IRQHandler+0x10>)
 800343a:	f009 ffc7 	bl	800d3cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	24001854 	.word	0x24001854

08003448 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800344c:	4802      	ldr	r0, [pc, #8]	@ (8003458 <UART4_IRQHandler+0x10>)
 800344e:	f00a feb3 	bl	800e1b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	24001008 	.word	0x24001008

0800345c <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003460:	4802      	ldr	r0, [pc, #8]	@ (800346c <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8003462:	f004 ffc1 	bl	80083e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	2400118c 	.word	0x2400118c

08003470 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003474:	4802      	ldr	r0, [pc, #8]	@ (8003480 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8003476:	f004 ffb7 	bl	80083e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	2400118c 	.word	0x2400118c

08003484 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003488:	4802      	ldr	r0, [pc, #8]	@ (8003494 <OTG_FS_IRQHandler+0x10>)
 800348a:	f004 ffad 	bl	80083e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	240286d8 	.word	0x240286d8

08003498 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	e00a      	b.n	80034c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034aa:	f3af 8000 	nop.w
 80034ae:	4601      	mov	r1, r0
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	60ba      	str	r2, [r7, #8]
 80034b6:	b2ca      	uxtb	r2, r1
 80034b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	3301      	adds	r3, #1
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	dbf0      	blt.n	80034aa <_read+0x12>
  }

  return len;
 80034c8:	687b      	ldr	r3, [r7, #4]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b086      	sub	sp, #24
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	e009      	b.n	80034f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	60ba      	str	r2, [r7, #8]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	3301      	adds	r3, #1
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	dbf1      	blt.n	80034e4 <_write+0x12>
  }
  return len;
 8003500:	687b      	ldr	r3, [r7, #4]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <_close>:

int _close(int file)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003532:	605a      	str	r2, [r3, #4]
  return 0;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <_isatty>:

int _isatty(int file)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800354a:	2301      	movs	r3, #1
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800357c:	4a14      	ldr	r2, [pc, #80]	@ (80035d0 <_sbrk+0x5c>)
 800357e:	4b15      	ldr	r3, [pc, #84]	@ (80035d4 <_sbrk+0x60>)
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003588:	4b13      	ldr	r3, [pc, #76]	@ (80035d8 <_sbrk+0x64>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d102      	bne.n	8003596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003590:	4b11      	ldr	r3, [pc, #68]	@ (80035d8 <_sbrk+0x64>)
 8003592:	4a12      	ldr	r2, [pc, #72]	@ (80035dc <_sbrk+0x68>)
 8003594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003596:	4b10      	ldr	r3, [pc, #64]	@ (80035d8 <_sbrk+0x64>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d207      	bcs.n	80035b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035a4:	f014 fe46 	bl	8018234 <__errno>
 80035a8:	4603      	mov	r3, r0
 80035aa:	220c      	movs	r2, #12
 80035ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035ae:	f04f 33ff 	mov.w	r3, #4294967295
 80035b2:	e009      	b.n	80035c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035b4:	4b08      	ldr	r3, [pc, #32]	@ (80035d8 <_sbrk+0x64>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035ba:	4b07      	ldr	r3, [pc, #28]	@ (80035d8 <_sbrk+0x64>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	4a05      	ldr	r2, [pc, #20]	@ (80035d8 <_sbrk+0x64>)
 80035c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035c6:	68fb      	ldr	r3, [r7, #12]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	24060000 	.word	0x24060000
 80035d4:	00000400 	.word	0x00000400
 80035d8:	240018a0 	.word	0x240018a0
 80035dc:	24028f28 	.word	0x24028f28

080035e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80035e4:	4b37      	ldr	r3, [pc, #220]	@ (80036c4 <SystemInit+0xe4>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ea:	4a36      	ldr	r2, [pc, #216]	@ (80036c4 <SystemInit+0xe4>)
 80035ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80035f4:	4b34      	ldr	r3, [pc, #208]	@ (80036c8 <SystemInit+0xe8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	2b06      	cmp	r3, #6
 80035fe:	d807      	bhi.n	8003610 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003600:	4b31      	ldr	r3, [pc, #196]	@ (80036c8 <SystemInit+0xe8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f023 030f 	bic.w	r3, r3, #15
 8003608:	4a2f      	ldr	r2, [pc, #188]	@ (80036c8 <SystemInit+0xe8>)
 800360a:	f043 0307 	orr.w	r3, r3, #7
 800360e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003610:	4b2e      	ldr	r3, [pc, #184]	@ (80036cc <SystemInit+0xec>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2d      	ldr	r2, [pc, #180]	@ (80036cc <SystemInit+0xec>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800361c:	4b2b      	ldr	r3, [pc, #172]	@ (80036cc <SystemInit+0xec>)
 800361e:	2200      	movs	r2, #0
 8003620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003622:	4b2a      	ldr	r3, [pc, #168]	@ (80036cc <SystemInit+0xec>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	4929      	ldr	r1, [pc, #164]	@ (80036cc <SystemInit+0xec>)
 8003628:	4b29      	ldr	r3, [pc, #164]	@ (80036d0 <SystemInit+0xf0>)
 800362a:	4013      	ands	r3, r2
 800362c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800362e:	4b26      	ldr	r3, [pc, #152]	@ (80036c8 <SystemInit+0xe8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d007      	beq.n	800364a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800363a:	4b23      	ldr	r3, [pc, #140]	@ (80036c8 <SystemInit+0xe8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 030f 	bic.w	r3, r3, #15
 8003642:	4a21      	ldr	r2, [pc, #132]	@ (80036c8 <SystemInit+0xe8>)
 8003644:	f043 0307 	orr.w	r3, r3, #7
 8003648:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800364a:	4b20      	ldr	r3, [pc, #128]	@ (80036cc <SystemInit+0xec>)
 800364c:	2200      	movs	r2, #0
 800364e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003650:	4b1e      	ldr	r3, [pc, #120]	@ (80036cc <SystemInit+0xec>)
 8003652:	2200      	movs	r2, #0
 8003654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003656:	4b1d      	ldr	r3, [pc, #116]	@ (80036cc <SystemInit+0xec>)
 8003658:	2200      	movs	r2, #0
 800365a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800365c:	4b1b      	ldr	r3, [pc, #108]	@ (80036cc <SystemInit+0xec>)
 800365e:	4a1d      	ldr	r2, [pc, #116]	@ (80036d4 <SystemInit+0xf4>)
 8003660:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003662:	4b1a      	ldr	r3, [pc, #104]	@ (80036cc <SystemInit+0xec>)
 8003664:	4a1c      	ldr	r2, [pc, #112]	@ (80036d8 <SystemInit+0xf8>)
 8003666:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003668:	4b18      	ldr	r3, [pc, #96]	@ (80036cc <SystemInit+0xec>)
 800366a:	4a1c      	ldr	r2, [pc, #112]	@ (80036dc <SystemInit+0xfc>)
 800366c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800366e:	4b17      	ldr	r3, [pc, #92]	@ (80036cc <SystemInit+0xec>)
 8003670:	2200      	movs	r2, #0
 8003672:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003674:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <SystemInit+0xec>)
 8003676:	4a19      	ldr	r2, [pc, #100]	@ (80036dc <SystemInit+0xfc>)
 8003678:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800367a:	4b14      	ldr	r3, [pc, #80]	@ (80036cc <SystemInit+0xec>)
 800367c:	2200      	movs	r2, #0
 800367e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003680:	4b12      	ldr	r3, [pc, #72]	@ (80036cc <SystemInit+0xec>)
 8003682:	4a16      	ldr	r2, [pc, #88]	@ (80036dc <SystemInit+0xfc>)
 8003684:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003686:	4b11      	ldr	r3, [pc, #68]	@ (80036cc <SystemInit+0xec>)
 8003688:	2200      	movs	r2, #0
 800368a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800368c:	4b0f      	ldr	r3, [pc, #60]	@ (80036cc <SystemInit+0xec>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a0e      	ldr	r2, [pc, #56]	@ (80036cc <SystemInit+0xec>)
 8003692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003698:	4b0c      	ldr	r3, [pc, #48]	@ (80036cc <SystemInit+0xec>)
 800369a:	2200      	movs	r2, #0
 800369c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800369e:	4b10      	ldr	r3, [pc, #64]	@ (80036e0 <SystemInit+0x100>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4b10      	ldr	r3, [pc, #64]	@ (80036e4 <SystemInit+0x104>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036aa:	d202      	bcs.n	80036b2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80036ac:	4b0e      	ldr	r3, [pc, #56]	@ (80036e8 <SystemInit+0x108>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80036b2:	4b0e      	ldr	r3, [pc, #56]	@ (80036ec <SystemInit+0x10c>)
 80036b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80036b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80036ba:	bf00      	nop
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000ed00 	.word	0xe000ed00
 80036c8:	52002000 	.word	0x52002000
 80036cc:	58024400 	.word	0x58024400
 80036d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80036d4:	02020200 	.word	0x02020200
 80036d8:	01ff0000 	.word	0x01ff0000
 80036dc:	01010280 	.word	0x01010280
 80036e0:	5c001000 	.word	0x5c001000
 80036e4:	ffff0000 	.word	0xffff0000
 80036e8:	51008108 	.word	0x51008108
 80036ec:	52004000 	.word	0x52004000

080036f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80036f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003728 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80036f4:	f7ff ff74 	bl	80035e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036f8:	480c      	ldr	r0, [pc, #48]	@ (800372c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036fa:	490d      	ldr	r1, [pc, #52]	@ (8003730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003700:	e002      	b.n	8003708 <LoopCopyDataInit>

08003702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003706:	3304      	adds	r3, #4

08003708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800370a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800370c:	d3f9      	bcc.n	8003702 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800370e:	4a0a      	ldr	r2, [pc, #40]	@ (8003738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003710:	4c0a      	ldr	r4, [pc, #40]	@ (800373c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003714:	e001      	b.n	800371a <LoopFillZerobss>

08003716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003718:	3204      	adds	r2, #4

0800371a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800371a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800371c:	d3fb      	bcc.n	8003716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800371e:	f014 fd8f 	bl	8018240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003722:	f7fe f90d 	bl	8001940 <main>
  bx  lr
 8003726:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003728:	24060000 	.word	0x24060000
  ldr r0, =_sdata
 800372c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003730:	24000220 	.word	0x24000220
  ldr r2, =_sidata
 8003734:	08019b28 	.word	0x08019b28
  ldr r2, =_sbss
 8003738:	24000220 	.word	0x24000220
  ldr r4, =_ebss
 800373c:	24028f28 	.word	0x24028f28

08003740 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003740:	e7fe      	b.n	8003740 <ADC3_IRQHandler>
	...

08003744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800374a:	2003      	movs	r0, #3
 800374c:	f001 fa08 	bl	8004b60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003750:	f006 fe02 	bl	800a358 <HAL_RCC_GetSysClockFreq>
 8003754:	4602      	mov	r2, r0
 8003756:	4b15      	ldr	r3, [pc, #84]	@ (80037ac <HAL_Init+0x68>)
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	0a1b      	lsrs	r3, r3, #8
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	4913      	ldr	r1, [pc, #76]	@ (80037b0 <HAL_Init+0x6c>)
 8003762:	5ccb      	ldrb	r3, [r1, r3]
 8003764:	f003 031f 	and.w	r3, r3, #31
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
 800376c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800376e:	4b0f      	ldr	r3, [pc, #60]	@ (80037ac <HAL_Init+0x68>)
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	4a0e      	ldr	r2, [pc, #56]	@ (80037b0 <HAL_Init+0x6c>)
 8003778:	5cd3      	ldrb	r3, [r2, r3]
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
 8003784:	4a0b      	ldr	r2, [pc, #44]	@ (80037b4 <HAL_Init+0x70>)
 8003786:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003788:	4a0b      	ldr	r2, [pc, #44]	@ (80037b8 <HAL_Init+0x74>)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800378e:	200f      	movs	r0, #15
 8003790:	f7ff fdb4 	bl	80032fc <HAL_InitTick>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e002      	b.n	80037a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800379e:	f7ff fb67 	bl	8002e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	58024400 	.word	0x58024400
 80037b0:	08019980 	.word	0x08019980
 80037b4:	240000b8 	.word	0x240000b8
 80037b8:	240000b4 	.word	0x240000b4

080037bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037c0:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <HAL_IncTick+0x20>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <HAL_IncTick+0x24>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4413      	add	r3, r2
 80037cc:	4a04      	ldr	r2, [pc, #16]	@ (80037e0 <HAL_IncTick+0x24>)
 80037ce:	6013      	str	r3, [r2, #0]
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	240000c0 	.word	0x240000c0
 80037e0:	240018a4 	.word	0x240018a4

080037e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return uwTick;
 80037e8:	4b03      	ldr	r3, [pc, #12]	@ (80037f8 <HAL_GetTick+0x14>)
 80037ea:	681b      	ldr	r3, [r3, #0]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	240018a4 	.word	0x240018a4

080037fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003804:	f7ff ffee 	bl	80037e4 <HAL_GetTick>
 8003808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003814:	d005      	beq.n	8003822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003816:	4b0a      	ldr	r3, [pc, #40]	@ (8003840 <HAL_Delay+0x44>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4413      	add	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003822:	bf00      	nop
 8003824:	f7ff ffde 	bl	80037e4 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	429a      	cmp	r2, r3
 8003832:	d8f7      	bhi.n	8003824 <HAL_Delay+0x28>
  {
  }
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	240000c0 	.word	0x240000c0

08003844 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003848:	4b03      	ldr	r3, [pc, #12]	@ (8003858 <HAL_GetREVID+0x14>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0c1b      	lsrs	r3, r3, #16
}
 800384e:	4618      	mov	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	5c001000 	.word	0x5c001000

0800385c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	609a      	str	r2, [r3, #8]
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	609a      	str	r2, [r3, #8]
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3360      	adds	r3, #96	@ 0x60
 80038d6:	461a      	mov	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	430b      	orrs	r3, r1
 80038f2:	431a      	orrs	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80038f8:	bf00      	nop
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f003 031f 	and.w	r3, r3, #31
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	fa01 f303 	lsl.w	r3, r1, r3
 8003924:	431a      	orrs	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	611a      	str	r2, [r3, #16]
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003936:	b480      	push	{r7}
 8003938:	b087      	sub	sp, #28
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3360      	adds	r3, #96	@ 0x60
 8003946:	461a      	mov	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	431a      	orrs	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	601a      	str	r2, [r3, #0]
  }
}
 8003960:	bf00      	nop
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3330      	adds	r3, #48	@ 0x30
 800397c:	461a      	mov	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	0a1b      	lsrs	r3, r3, #8
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	f003 030c 	and.w	r3, r3, #12
 8003988:	4413      	add	r3, r2
 800398a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	211f      	movs	r1, #31
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	401a      	ands	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	0e9b      	lsrs	r3, r3, #26
 80039a4:	f003 011f 	and.w	r1, r3, #31
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	fa01 f303 	lsl.w	r3, r1, r3
 80039b2:	431a      	orrs	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039b8:	bf00      	nop
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3314      	adds	r3, #20
 80039d4:	461a      	mov	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	0e5b      	lsrs	r3, r3, #25
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	4413      	add	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	0d1b      	lsrs	r3, r3, #20
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	2107      	movs	r1, #7
 80039f2:	fa01 f303 	lsl.w	r3, r1, r3
 80039f6:	43db      	mvns	r3, r3
 80039f8:	401a      	ands	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	0d1b      	lsrs	r3, r3, #20
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	fa01 f303 	lsl.w	r3, r1, r3
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a0e:	bf00      	nop
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a34:	43db      	mvns	r3, r3
 8003a36:	401a      	ands	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f003 0318 	and.w	r3, r3, #24
 8003a3e:	4908      	ldr	r1, [pc, #32]	@ (8003a60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a40:	40d9      	lsrs	r1, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	400b      	ands	r3, r1
 8003a46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	000fffff 	.word	0x000fffff

08003a64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	4b04      	ldr	r3, [pc, #16]	@ (8003a84 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6093      	str	r3, [r2, #8]
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	5fffffc0 	.word	0x5fffffc0

08003a88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a9c:	d101      	bne.n	8003aa2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	4b05      	ldr	r3, [pc, #20]	@ (8003ad4 <LL_ADC_EnableInternalRegulator+0x24>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	6fffffc0 	.word	0x6fffffc0

08003ad8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aec:	d101      	bne.n	8003af2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <LL_ADC_IsEnabled+0x18>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <LL_ADC_IsEnabled+0x1a>
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d101      	bne.n	8003b3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d101      	bne.n	8003b64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b74:	b590      	push	{r4, r7, lr}
 8003b76:	b089      	sub	sp, #36	@ 0x24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e18f      	b.n	8003eae <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff f985 	bl	8002eac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff ff67 	bl	8003a88 <LL_ADC_IsDeepPowerDownEnabled>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d004      	beq.n	8003bca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff ff4d 	bl	8003a64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff ff82 	bl	8003ad8 <LL_ADC_IsInternalRegulatorEnabled>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d114      	bne.n	8003c04 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff ff66 	bl	8003ab0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003be4:	4b87      	ldr	r3, [pc, #540]	@ (8003e04 <HAL_ADC_Init+0x290>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	099b      	lsrs	r3, r3, #6
 8003bea:	4a87      	ldr	r2, [pc, #540]	@ (8003e08 <HAL_ADC_Init+0x294>)
 8003bec:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf0:	099b      	lsrs	r3, r3, #6
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003bf6:	e002      	b.n	8003bfe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f9      	bne.n	8003bf8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ff65 	bl	8003ad8 <LL_ADC_IsInternalRegulatorEnabled>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10d      	bne.n	8003c30 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c18:	f043 0210 	orr.w	r2, r3, #16
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c24:	f043 0201 	orr.w	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff ff76 	bl	8003b26 <LL_ADC_REG_IsConversionOngoing>
 8003c3a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f040 8129 	bne.w	8003e9c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f040 8125 	bne.w	8003e9c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c56:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003c5a:	f043 0202 	orr.w	r2, r3, #2
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff ff4a 	bl	8003b00 <LL_ADC_IsEnabled>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d136      	bne.n	8003ce0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a65      	ldr	r2, [pc, #404]	@ (8003e0c <HAL_ADC_Init+0x298>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d004      	beq.n	8003c86 <HAL_ADC_Init+0x112>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a63      	ldr	r2, [pc, #396]	@ (8003e10 <HAL_ADC_Init+0x29c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d10e      	bne.n	8003ca4 <HAL_ADC_Init+0x130>
 8003c86:	4861      	ldr	r0, [pc, #388]	@ (8003e0c <HAL_ADC_Init+0x298>)
 8003c88:	f7ff ff3a 	bl	8003b00 <LL_ADC_IsEnabled>
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	4860      	ldr	r0, [pc, #384]	@ (8003e10 <HAL_ADC_Init+0x29c>)
 8003c90:	f7ff ff36 	bl	8003b00 <LL_ADC_IsEnabled>
 8003c94:	4603      	mov	r3, r0
 8003c96:	4323      	orrs	r3, r4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e008      	b.n	8003cb6 <HAL_ADC_Init+0x142>
 8003ca4:	485b      	ldr	r0, [pc, #364]	@ (8003e14 <HAL_ADC_Init+0x2a0>)
 8003ca6:	f7ff ff2b 	bl	8003b00 <LL_ADC_IsEnabled>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d012      	beq.n	8003ce0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a53      	ldr	r2, [pc, #332]	@ (8003e0c <HAL_ADC_Init+0x298>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d004      	beq.n	8003cce <HAL_ADC_Init+0x15a>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a51      	ldr	r2, [pc, #324]	@ (8003e10 <HAL_ADC_Init+0x29c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d101      	bne.n	8003cd2 <HAL_ADC_Init+0x15e>
 8003cce:	4a52      	ldr	r2, [pc, #328]	@ (8003e18 <HAL_ADC_Init+0x2a4>)
 8003cd0:	e000      	b.n	8003cd4 <HAL_ADC_Init+0x160>
 8003cd2:	4a52      	ldr	r2, [pc, #328]	@ (8003e1c <HAL_ADC_Init+0x2a8>)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f7ff fdbe 	bl	800385c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003ce0:	f7ff fdb0 	bl	8003844 <HAL_GetREVID>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d914      	bls.n	8003d18 <HAL_ADC_Init+0x1a4>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b10      	cmp	r3, #16
 8003cf4:	d110      	bne.n	8003d18 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	7d5b      	ldrb	r3, [r3, #21]
 8003cfa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d00:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003d06:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	7f1b      	ldrb	r3, [r3, #28]
 8003d0c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003d0e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d10:	f043 030c 	orr.w	r3, r3, #12
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	e00d      	b.n	8003d34 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	7d5b      	ldrb	r3, [r3, #21]
 8003d1c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d22:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003d28:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	7f1b      	ldrb	r3, [r3, #28]
 8003d2e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	7f1b      	ldrb	r3, [r3, #28]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d106      	bne.n	8003d4a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	045b      	lsls	r3, r3, #17
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003e20 <HAL_ADC_Init+0x2ac>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	69b9      	ldr	r1, [r7, #24]
 8003d76:	430b      	orrs	r3, r1
 8003d78:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fed1 	bl	8003b26 <LL_ADC_REG_IsConversionOngoing>
 8003d84:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fede 	bl	8003b4c <LL_ADC_INJ_IsConversionOngoing>
 8003d90:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d15f      	bne.n	8003e58 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d15c      	bne.n	8003e58 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	7d1b      	ldrb	r3, [r3, #20]
 8003da2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e24 <HAL_ADC_Init+0x2b0>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	69b9      	ldr	r1, [r7, #24]
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d130      	bne.n	8003e2c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	4b14      	ldr	r3, [pc, #80]	@ (8003e28 <HAL_ADC_Init+0x2b4>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003dde:	3a01      	subs	r2, #1
 8003de0:	0411      	lsls	r1, r2, #16
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003de6:	4311      	orrs	r1, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003dec:	4311      	orrs	r1, r2
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003df2:	430a      	orrs	r2, r1
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	611a      	str	r2, [r3, #16]
 8003e00:	e01c      	b.n	8003e3c <HAL_ADC_Init+0x2c8>
 8003e02:	bf00      	nop
 8003e04:	240000b4 	.word	0x240000b4
 8003e08:	053e2d63 	.word	0x053e2d63
 8003e0c:	40022000 	.word	0x40022000
 8003e10:	40022100 	.word	0x40022100
 8003e14:	58026000 	.word	0x58026000
 8003e18:	40022300 	.word	0x40022300
 8003e1c:	58026300 	.word	0x58026300
 8003e20:	fff0c003 	.word	0xfff0c003
 8003e24:	ffffbffc 	.word	0xffffbffc
 8003e28:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fb8c 	bl	8004570 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d10c      	bne.n	8003e7a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	f023 010f 	bic.w	r1, r3, #15
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	1e5a      	subs	r2, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e78:	e007      	b.n	8003e8a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 020f 	bic.w	r2, r2, #15
 8003e88:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8e:	f023 0303 	bic.w	r3, r3, #3
 8003e92:	f043 0201 	orr.w	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	655a      	str	r2, [r3, #84]	@ 0x54
 8003e9a:	e007      	b.n	8003eac <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea0:	f043 0210 	orr.w	r2, r3, #16
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003eac:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3724      	adds	r7, #36	@ 0x24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd90      	pop	{r4, r7, pc}
 8003eb6:	bf00      	nop

08003eb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b0a1      	sub	sp, #132	@ 0x84
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4a65      	ldr	r2, [pc, #404]	@ (8004068 <HAL_ADC_ConfigChannel+0x1b0>)
 8003ed2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x2a>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e32e      	b.n	8004540 <HAL_ADC_ConfigChannel+0x688>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fe19 	bl	8003b26 <LL_ADC_REG_IsConversionOngoing>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f040 8313 	bne.w	8004522 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	db2c      	blt.n	8003f5e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d108      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x6a>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	0e9b      	lsrs	r3, r3, #26
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	e016      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x98>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f2a:	fa93 f3a3 	rbit	r3, r3
 8003f2e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f32:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	e003      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003f3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f40:	fab3 f383 	clz	r3, r3
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	69d1      	ldr	r1, [r2, #28]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6859      	ldr	r1, [r3, #4]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f7ff fcfe 	bl	800396c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fdd6 	bl	8003b26 <LL_ADC_REG_IsConversionOngoing>
 8003f7a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fde3 	bl	8003b4c <LL_ADC_INJ_IsConversionOngoing>
 8003f86:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f040 80b8 	bne.w	8004100 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f040 80b4 	bne.w	8004100 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	6819      	ldr	r1, [r3, #0]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	f7ff fd0d 	bl	80039c4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003faa:	4b30      	ldr	r3, [pc, #192]	@ (800406c <HAL_ADC_ConfigChannel+0x1b4>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003fb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fb6:	d10b      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x118>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	089b      	lsrs	r3, r3, #2
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	e01d      	b.n	800400c <HAL_ADC_ConfigChannel+0x154>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10b      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x13e>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	e00a      	b.n	800400c <HAL_ADC_ConfigChannel+0x154>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	089b      	lsrs	r3, r3, #2
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b04      	cmp	r3, #4
 8004014:	d02c      	beq.n	8004070 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6919      	ldr	r1, [r3, #16]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004024:	f7ff fc4e 	bl	80038c4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	6919      	ldr	r1, [r3, #16]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	7e5b      	ldrb	r3, [r3, #25]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d102      	bne.n	800403e <HAL_ADC_ConfigChannel+0x186>
 8004038:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800403c:	e000      	b.n	8004040 <HAL_ADC_ConfigChannel+0x188>
 800403e:	2300      	movs	r3, #0
 8004040:	461a      	mov	r2, r3
 8004042:	f7ff fc78 	bl	8003936 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6919      	ldr	r1, [r3, #16]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	7e1b      	ldrb	r3, [r3, #24]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d102      	bne.n	800405c <HAL_ADC_ConfigChannel+0x1a4>
 8004056:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800405a:	e000      	b.n	800405e <HAL_ADC_ConfigChannel+0x1a6>
 800405c:	2300      	movs	r3, #0
 800405e:	461a      	mov	r2, r3
 8004060:	f7ff fc50 	bl	8003904 <LL_ADC_SetDataRightShift>
 8004064:	e04c      	b.n	8004100 <HAL_ADC_ConfigChannel+0x248>
 8004066:	bf00      	nop
 8004068:	47ff0000 	.word	0x47ff0000
 800406c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004076:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	069b      	lsls	r3, r3, #26
 8004080:	429a      	cmp	r2, r3
 8004082:	d107      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004092:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800409a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	069b      	lsls	r3, r3, #26
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d107      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040b6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	069b      	lsls	r3, r3, #26
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d107      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040da:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	069b      	lsls	r3, r3, #26
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d107      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040fe:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fcfb 	bl	8003b00 <LL_ADC_IsEnabled>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	f040 8211 	bne.w	8004534 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	6819      	ldr	r1, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	461a      	mov	r2, r3
 8004120:	f7ff fc7c 	bl	8003a1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4aa1      	ldr	r2, [pc, #644]	@ (80043b0 <HAL_ADC_ConfigChannel+0x4f8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	f040 812e 	bne.w	800438c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10b      	bne.n	8004158 <HAL_ADC_ConfigChannel+0x2a0>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	0e9b      	lsrs	r3, r3, #26
 8004146:	3301      	adds	r3, #1
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	2b09      	cmp	r3, #9
 800414e:	bf94      	ite	ls
 8004150:	2301      	movls	r3, #1
 8004152:	2300      	movhi	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	e019      	b.n	800418c <HAL_ADC_ConfigChannel+0x2d4>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004160:	fa93 f3a3 	rbit	r3, r3
 8004164:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004168:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800416a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004170:	2320      	movs	r3, #32
 8004172:	e003      	b.n	800417c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004174:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004176:	fab3 f383 	clz	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	3301      	adds	r3, #1
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	2b09      	cmp	r3, #9
 8004184:	bf94      	ite	ls
 8004186:	2301      	movls	r3, #1
 8004188:	2300      	movhi	r3, #0
 800418a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800418c:	2b00      	cmp	r3, #0
 800418e:	d079      	beq.n	8004284 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004198:	2b00      	cmp	r3, #0
 800419a:	d107      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x2f4>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	0e9b      	lsrs	r3, r3, #26
 80041a2:	3301      	adds	r3, #1
 80041a4:	069b      	lsls	r3, r3, #26
 80041a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041aa:	e015      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x320>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80041ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041bc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80041be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80041c4:	2320      	movs	r3, #32
 80041c6:	e003      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80041c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	3301      	adds	r3, #1
 80041d2:	069b      	lsls	r3, r3, #26
 80041d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d109      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x340>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	0e9b      	lsrs	r3, r3, #26
 80041ea:	3301      	adds	r3, #1
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	2101      	movs	r1, #1
 80041f2:	fa01 f303 	lsl.w	r3, r1, r3
 80041f6:	e017      	b.n	8004228 <HAL_ADC_ConfigChannel+0x370>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004200:	fa93 f3a3 	rbit	r3, r3
 8004204:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004208:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800420a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004210:	2320      	movs	r3, #32
 8004212:	e003      	b.n	800421c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004216:	fab3 f383 	clz	r3, r3
 800421a:	b2db      	uxtb	r3, r3
 800421c:	3301      	adds	r3, #1
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	2101      	movs	r1, #1
 8004224:	fa01 f303 	lsl.w	r3, r1, r3
 8004228:	ea42 0103 	orr.w	r1, r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <HAL_ADC_ConfigChannel+0x396>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0e9b      	lsrs	r3, r3, #26
 800423e:	3301      	adds	r3, #1
 8004240:	f003 021f 	and.w	r2, r3, #31
 8004244:	4613      	mov	r3, r2
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4413      	add	r3, r2
 800424a:	051b      	lsls	r3, r3, #20
 800424c:	e018      	b.n	8004280 <HAL_ADC_ConfigChannel+0x3c8>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004256:	fa93 f3a3 	rbit	r3, r3
 800425a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004266:	2320      	movs	r3, #32
 8004268:	e003      	b.n	8004272 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800426a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426c:	fab3 f383 	clz	r3, r3
 8004270:	b2db      	uxtb	r3, r3
 8004272:	3301      	adds	r3, #1
 8004274:	f003 021f 	and.w	r2, r3, #31
 8004278:	4613      	mov	r3, r2
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	4413      	add	r3, r2
 800427e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004280:	430b      	orrs	r3, r1
 8004282:	e07e      	b.n	8004382 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800428c:	2b00      	cmp	r3, #0
 800428e:	d107      	bne.n	80042a0 <HAL_ADC_ConfigChannel+0x3e8>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	0e9b      	lsrs	r3, r3, #26
 8004296:	3301      	adds	r3, #1
 8004298:	069b      	lsls	r3, r3, #26
 800429a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800429e:	e015      	b.n	80042cc <HAL_ADC_ConfigChannel+0x414>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a8:	fa93 f3a3 	rbit	r3, r3
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80042b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80042b8:	2320      	movs	r3, #32
 80042ba:	e003      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80042bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042be:	fab3 f383 	clz	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	3301      	adds	r3, #1
 80042c6:	069b      	lsls	r3, r3, #26
 80042c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d109      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x434>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	0e9b      	lsrs	r3, r3, #26
 80042de:	3301      	adds	r3, #1
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	2101      	movs	r1, #1
 80042e6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ea:	e017      	b.n	800431c <HAL_ADC_ConfigChannel+0x464>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	fa93 f3a3 	rbit	r3, r3
 80042f8:	61bb      	str	r3, [r7, #24]
  return result;
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004304:	2320      	movs	r3, #32
 8004306:	e003      	b.n	8004310 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	fab3 f383 	clz	r3, r3
 800430e:	b2db      	uxtb	r3, r3
 8004310:	3301      	adds	r3, #1
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	2101      	movs	r1, #1
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	ea42 0103 	orr.w	r1, r2, r3
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10d      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x490>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	0e9b      	lsrs	r3, r3, #26
 8004332:	3301      	adds	r3, #1
 8004334:	f003 021f 	and.w	r2, r3, #31
 8004338:	4613      	mov	r3, r2
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	4413      	add	r3, r2
 800433e:	3b1e      	subs	r3, #30
 8004340:	051b      	lsls	r3, r3, #20
 8004342:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004346:	e01b      	b.n	8004380 <HAL_ADC_ConfigChannel+0x4c8>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	fa93 f3a3 	rbit	r3, r3
 8004354:	60fb      	str	r3, [r7, #12]
  return result;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004360:	2320      	movs	r3, #32
 8004362:	e003      	b.n	800436c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	fab3 f383 	clz	r3, r3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	3301      	adds	r3, #1
 800436e:	f003 021f 	and.w	r2, r3, #31
 8004372:	4613      	mov	r3, r2
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	4413      	add	r3, r2
 8004378:	3b1e      	subs	r3, #30
 800437a:	051b      	lsls	r3, r3, #20
 800437c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004380:	430b      	orrs	r3, r1
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	6892      	ldr	r2, [r2, #8]
 8004386:	4619      	mov	r1, r3
 8004388:	f7ff fb1c 	bl	80039c4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f280 80cf 	bge.w	8004534 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a06      	ldr	r2, [pc, #24]	@ (80043b4 <HAL_ADC_ConfigChannel+0x4fc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_ADC_ConfigChannel+0x4f2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a04      	ldr	r2, [pc, #16]	@ (80043b8 <HAL_ADC_ConfigChannel+0x500>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d10a      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x508>
 80043aa:	4b04      	ldr	r3, [pc, #16]	@ (80043bc <HAL_ADC_ConfigChannel+0x504>)
 80043ac:	e009      	b.n	80043c2 <HAL_ADC_ConfigChannel+0x50a>
 80043ae:	bf00      	nop
 80043b0:	47ff0000 	.word	0x47ff0000
 80043b4:	40022000 	.word	0x40022000
 80043b8:	40022100 	.word	0x40022100
 80043bc:	40022300 	.word	0x40022300
 80043c0:	4b61      	ldr	r3, [pc, #388]	@ (8004548 <HAL_ADC_ConfigChannel+0x690>)
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff fa70 	bl	80038a8 <LL_ADC_GetCommonPathInternalCh>
 80043c8:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a5f      	ldr	r2, [pc, #380]	@ (800454c <HAL_ADC_ConfigChannel+0x694>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d004      	beq.n	80043de <HAL_ADC_ConfigChannel+0x526>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a5d      	ldr	r2, [pc, #372]	@ (8004550 <HAL_ADC_ConfigChannel+0x698>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d10e      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x544>
 80043de:	485b      	ldr	r0, [pc, #364]	@ (800454c <HAL_ADC_ConfigChannel+0x694>)
 80043e0:	f7ff fb8e 	bl	8003b00 <LL_ADC_IsEnabled>
 80043e4:	4604      	mov	r4, r0
 80043e6:	485a      	ldr	r0, [pc, #360]	@ (8004550 <HAL_ADC_ConfigChannel+0x698>)
 80043e8:	f7ff fb8a 	bl	8003b00 <LL_ADC_IsEnabled>
 80043ec:	4603      	mov	r3, r0
 80043ee:	4323      	orrs	r3, r4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	e008      	b.n	800440e <HAL_ADC_ConfigChannel+0x556>
 80043fc:	4855      	ldr	r0, [pc, #340]	@ (8004554 <HAL_ADC_ConfigChannel+0x69c>)
 80043fe:	f7ff fb7f 	bl	8003b00 <LL_ADC_IsEnabled>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf0c      	ite	eq
 8004408:	2301      	moveq	r3, #1
 800440a:	2300      	movne	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d07d      	beq.n	800450e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a50      	ldr	r2, [pc, #320]	@ (8004558 <HAL_ADC_ConfigChannel+0x6a0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d130      	bne.n	800447e <HAL_ADC_ConfigChannel+0x5c6>
 800441c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800441e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d12b      	bne.n	800447e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a4a      	ldr	r2, [pc, #296]	@ (8004554 <HAL_ADC_ConfigChannel+0x69c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	f040 8081 	bne.w	8004534 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a45      	ldr	r2, [pc, #276]	@ (800454c <HAL_ADC_ConfigChannel+0x694>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d004      	beq.n	8004446 <HAL_ADC_ConfigChannel+0x58e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a43      	ldr	r2, [pc, #268]	@ (8004550 <HAL_ADC_ConfigChannel+0x698>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d101      	bne.n	800444a <HAL_ADC_ConfigChannel+0x592>
 8004446:	4a45      	ldr	r2, [pc, #276]	@ (800455c <HAL_ADC_ConfigChannel+0x6a4>)
 8004448:	e000      	b.n	800444c <HAL_ADC_ConfigChannel+0x594>
 800444a:	4a3f      	ldr	r2, [pc, #252]	@ (8004548 <HAL_ADC_ConfigChannel+0x690>)
 800444c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800444e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f7ff fa14 	bl	8003882 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800445a:	4b41      	ldr	r3, [pc, #260]	@ (8004560 <HAL_ADC_ConfigChannel+0x6a8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	099b      	lsrs	r3, r3, #6
 8004460:	4a40      	ldr	r2, [pc, #256]	@ (8004564 <HAL_ADC_ConfigChannel+0x6ac>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	099b      	lsrs	r3, r3, #6
 8004468:	3301      	adds	r3, #1
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800446e:	e002      	b.n	8004476 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	3b01      	subs	r3, #1
 8004474:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f9      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800447c:	e05a      	b.n	8004534 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a39      	ldr	r2, [pc, #228]	@ (8004568 <HAL_ADC_ConfigChannel+0x6b0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d11e      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x60e>
 8004488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800448a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d119      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a2f      	ldr	r2, [pc, #188]	@ (8004554 <HAL_ADC_ConfigChannel+0x69c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d14b      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a2a      	ldr	r2, [pc, #168]	@ (800454c <HAL_ADC_ConfigChannel+0x694>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <HAL_ADC_ConfigChannel+0x5f8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a29      	ldr	r2, [pc, #164]	@ (8004550 <HAL_ADC_ConfigChannel+0x698>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d101      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x5fc>
 80044b0:	4a2a      	ldr	r2, [pc, #168]	@ (800455c <HAL_ADC_ConfigChannel+0x6a4>)
 80044b2:	e000      	b.n	80044b6 <HAL_ADC_ConfigChannel+0x5fe>
 80044b4:	4a24      	ldr	r2, [pc, #144]	@ (8004548 <HAL_ADC_ConfigChannel+0x690>)
 80044b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044bc:	4619      	mov	r1, r3
 80044be:	4610      	mov	r0, r2
 80044c0:	f7ff f9df 	bl	8003882 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044c4:	e036      	b.n	8004534 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a28      	ldr	r2, [pc, #160]	@ (800456c <HAL_ADC_ConfigChannel+0x6b4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d131      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x67c>
 80044d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d12c      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1d      	ldr	r2, [pc, #116]	@ (8004554 <HAL_ADC_ConfigChannel+0x69c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d127      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a18      	ldr	r2, [pc, #96]	@ (800454c <HAL_ADC_ConfigChannel+0x694>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d004      	beq.n	80044f8 <HAL_ADC_ConfigChannel+0x640>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a17      	ldr	r2, [pc, #92]	@ (8004550 <HAL_ADC_ConfigChannel+0x698>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d101      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x644>
 80044f8:	4a18      	ldr	r2, [pc, #96]	@ (800455c <HAL_ADC_ConfigChannel+0x6a4>)
 80044fa:	e000      	b.n	80044fe <HAL_ADC_ConfigChannel+0x646>
 80044fc:	4a12      	ldr	r2, [pc, #72]	@ (8004548 <HAL_ADC_ConfigChannel+0x690>)
 80044fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004500:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004504:	4619      	mov	r1, r3
 8004506:	4610      	mov	r0, r2
 8004508:	f7ff f9bb 	bl	8003882 <LL_ADC_SetCommonPathInternalCh>
 800450c:	e012      	b.n	8004534 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004512:	f043 0220 	orr.w	r2, r3, #32
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004520:	e008      	b.n	8004534 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004526:	f043 0220 	orr.w	r2, r3, #32
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800453c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004540:	4618      	mov	r0, r3
 8004542:	3784      	adds	r7, #132	@ 0x84
 8004544:	46bd      	mov	sp, r7
 8004546:	bd90      	pop	{r4, r7, pc}
 8004548:	58026300 	.word	0x58026300
 800454c:	40022000 	.word	0x40022000
 8004550:	40022100 	.word	0x40022100
 8004554:	58026000 	.word	0x58026000
 8004558:	cb840000 	.word	0xcb840000
 800455c:	40022300 	.word	0x40022300
 8004560:	240000b4 	.word	0x240000b4
 8004564:	053e2d63 	.word	0x053e2d63
 8004568:	c7520000 	.word	0xc7520000
 800456c:	cfb80000 	.word	0xcfb80000

08004570 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a7a      	ldr	r2, [pc, #488]	@ (8004768 <ADC_ConfigureBoostMode+0x1f8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d004      	beq.n	800458c <ADC_ConfigureBoostMode+0x1c>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a79      	ldr	r2, [pc, #484]	@ (800476c <ADC_ConfigureBoostMode+0x1fc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d109      	bne.n	80045a0 <ADC_ConfigureBoostMode+0x30>
 800458c:	4b78      	ldr	r3, [pc, #480]	@ (8004770 <ADC_ConfigureBoostMode+0x200>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf14      	ite	ne
 8004598:	2301      	movne	r3, #1
 800459a:	2300      	moveq	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e008      	b.n	80045b2 <ADC_ConfigureBoostMode+0x42>
 80045a0:	4b74      	ldr	r3, [pc, #464]	@ (8004774 <ADC_ConfigureBoostMode+0x204>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	bf14      	ite	ne
 80045ac:	2301      	movne	r3, #1
 80045ae:	2300      	moveq	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01c      	beq.n	80045f0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80045b6:	f006 f849 	bl	800a64c <HAL_RCC_GetHCLKFreq>
 80045ba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045c4:	d010      	beq.n	80045e8 <ADC_ConfigureBoostMode+0x78>
 80045c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045ca:	d873      	bhi.n	80046b4 <ADC_ConfigureBoostMode+0x144>
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d0:	d002      	beq.n	80045d8 <ADC_ConfigureBoostMode+0x68>
 80045d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045d6:	d16d      	bne.n	80046b4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	60fb      	str	r3, [r7, #12]
        break;
 80045e6:	e068      	b.n	80046ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	089b      	lsrs	r3, r3, #2
 80045ec:	60fb      	str	r3, [r7, #12]
        break;
 80045ee:	e064      	b.n	80046ba <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80045f0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80045f4:	f04f 0100 	mov.w	r1, #0
 80045f8:	f007 fab4 	bl	800bb64 <HAL_RCCEx_GetPeriphCLKFreq>
 80045fc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004606:	d051      	beq.n	80046ac <ADC_ConfigureBoostMode+0x13c>
 8004608:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800460c:	d854      	bhi.n	80046b8 <ADC_ConfigureBoostMode+0x148>
 800460e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004612:	d047      	beq.n	80046a4 <ADC_ConfigureBoostMode+0x134>
 8004614:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004618:	d84e      	bhi.n	80046b8 <ADC_ConfigureBoostMode+0x148>
 800461a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800461e:	d03d      	beq.n	800469c <ADC_ConfigureBoostMode+0x12c>
 8004620:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004624:	d848      	bhi.n	80046b8 <ADC_ConfigureBoostMode+0x148>
 8004626:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800462a:	d033      	beq.n	8004694 <ADC_ConfigureBoostMode+0x124>
 800462c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004630:	d842      	bhi.n	80046b8 <ADC_ConfigureBoostMode+0x148>
 8004632:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004636:	d029      	beq.n	800468c <ADC_ConfigureBoostMode+0x11c>
 8004638:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800463c:	d83c      	bhi.n	80046b8 <ADC_ConfigureBoostMode+0x148>
 800463e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004642:	d01a      	beq.n	800467a <ADC_ConfigureBoostMode+0x10a>
 8004644:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004648:	d836      	bhi.n	80046b8 <ADC_ConfigureBoostMode+0x148>
 800464a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800464e:	d014      	beq.n	800467a <ADC_ConfigureBoostMode+0x10a>
 8004650:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004654:	d830      	bhi.n	80046b8 <ADC_ConfigureBoostMode+0x148>
 8004656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800465a:	d00e      	beq.n	800467a <ADC_ConfigureBoostMode+0x10a>
 800465c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004660:	d82a      	bhi.n	80046b8 <ADC_ConfigureBoostMode+0x148>
 8004662:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004666:	d008      	beq.n	800467a <ADC_ConfigureBoostMode+0x10a>
 8004668:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800466c:	d824      	bhi.n	80046b8 <ADC_ConfigureBoostMode+0x148>
 800466e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004672:	d002      	beq.n	800467a <ADC_ConfigureBoostMode+0x10a>
 8004674:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004678:	d11e      	bne.n	80046b8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	0c9b      	lsrs	r3, r3, #18
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	fbb2 f3f3 	udiv	r3, r2, r3
 8004688:	60fb      	str	r3, [r7, #12]
        break;
 800468a:	e016      	b.n	80046ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	091b      	lsrs	r3, r3, #4
 8004690:	60fb      	str	r3, [r7, #12]
        break;
 8004692:	e012      	b.n	80046ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	60fb      	str	r3, [r7, #12]
        break;
 800469a:	e00e      	b.n	80046ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	099b      	lsrs	r3, r3, #6
 80046a0:	60fb      	str	r3, [r7, #12]
        break;
 80046a2:	e00a      	b.n	80046ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	09db      	lsrs	r3, r3, #7
 80046a8:	60fb      	str	r3, [r7, #12]
        break;
 80046aa:	e006      	b.n	80046ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	0a1b      	lsrs	r3, r3, #8
 80046b0:	60fb      	str	r3, [r7, #12]
        break;
 80046b2:	e002      	b.n	80046ba <ADC_ConfigureBoostMode+0x14a>
        break;
 80046b4:	bf00      	nop
 80046b6:	e000      	b.n	80046ba <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80046b8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80046ba:	f7ff f8c3 	bl	8003844 <HAL_GetREVID>
 80046be:	4603      	mov	r3, r0
 80046c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d815      	bhi.n	80046f4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004778 <ADC_ConfigureBoostMode+0x208>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d908      	bls.n	80046e2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046de:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80046e0:	e03e      	b.n	8004760 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046f0:	609a      	str	r2, [r3, #8]
}
 80046f2:	e035      	b.n	8004760 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4a1f      	ldr	r2, [pc, #124]	@ (800477c <ADC_ConfigureBoostMode+0x20c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d808      	bhi.n	8004714 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004710:	609a      	str	r2, [r3, #8]
}
 8004712:	e025      	b.n	8004760 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a1a      	ldr	r2, [pc, #104]	@ (8004780 <ADC_ConfigureBoostMode+0x210>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d80a      	bhi.n	8004732 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800472e:	609a      	str	r2, [r3, #8]
}
 8004730:	e016      	b.n	8004760 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4a13      	ldr	r2, [pc, #76]	@ (8004784 <ADC_ConfigureBoostMode+0x214>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d80a      	bhi.n	8004750 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800474c:	609a      	str	r2, [r3, #8]
}
 800474e:	e007      	b.n	8004760 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800475e:	609a      	str	r2, [r3, #8]
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40022000 	.word	0x40022000
 800476c:	40022100 	.word	0x40022100
 8004770:	40022300 	.word	0x40022300
 8004774:	58026300 	.word	0x58026300
 8004778:	01312d00 	.word	0x01312d00
 800477c:	005f5e10 	.word	0x005f5e10
 8004780:	00bebc20 	.word	0x00bebc20
 8004784:	017d7840 	.word	0x017d7840

08004788 <LL_ADC_IsEnabled>:
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <LL_ADC_IsEnabled+0x18>
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <LL_ADC_IsEnabled+0x1a>
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <LL_ADC_REG_IsConversionOngoing>:
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d101      	bne.n	80047c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80047d4:	b590      	push	{r4, r7, lr}
 80047d6:	b09f      	sub	sp, #124	@ 0x7c
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d101      	bne.n	80047f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80047ee:	2302      	movs	r3, #2
 80047f0:	e0be      	b.n	8004970 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80047fa:	2300      	movs	r3, #0
 80047fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80047fe:	2300      	movs	r3, #0
 8004800:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a5c      	ldr	r2, [pc, #368]	@ (8004978 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d102      	bne.n	8004812 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800480c:	4b5b      	ldr	r3, [pc, #364]	@ (800497c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	e001      	b.n	8004816 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004812:	2300      	movs	r3, #0
 8004814:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10b      	bne.n	8004834 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004820:	f043 0220 	orr.w	r2, r3, #32
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e09d      	b.n	8004970 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff ffb9 	bl	80047ae <LL_ADC_REG_IsConversionOngoing>
 800483c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff ffb3 	bl	80047ae <LL_ADC_REG_IsConversionOngoing>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d17f      	bne.n	800494e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800484e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004850:	2b00      	cmp	r3, #0
 8004852:	d17c      	bne.n	800494e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a47      	ldr	r2, [pc, #284]	@ (8004978 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d004      	beq.n	8004868 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a46      	ldr	r2, [pc, #280]	@ (800497c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d101      	bne.n	800486c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004868:	4b45      	ldr	r3, [pc, #276]	@ (8004980 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800486a:	e000      	b.n	800486e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800486c:	4b45      	ldr	r3, [pc, #276]	@ (8004984 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800486e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d039      	beq.n	80048ec <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	431a      	orrs	r2, r3
 8004886:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004888:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a3a      	ldr	r2, [pc, #232]	@ (8004978 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a38      	ldr	r2, [pc, #224]	@ (800497c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d10e      	bne.n	80048bc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800489e:	4836      	ldr	r0, [pc, #216]	@ (8004978 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048a0:	f7ff ff72 	bl	8004788 <LL_ADC_IsEnabled>
 80048a4:	4604      	mov	r4, r0
 80048a6:	4835      	ldr	r0, [pc, #212]	@ (800497c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048a8:	f7ff ff6e 	bl	8004788 <LL_ADC_IsEnabled>
 80048ac:	4603      	mov	r3, r0
 80048ae:	4323      	orrs	r3, r4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	e008      	b.n	80048ce <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80048bc:	4832      	ldr	r0, [pc, #200]	@ (8004988 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80048be:	f7ff ff63 	bl	8004788 <LL_ADC_IsEnabled>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bf0c      	ite	eq
 80048c8:	2301      	moveq	r3, #1
 80048ca:	2300      	movne	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d047      	beq.n	8004962 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80048d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	4b2d      	ldr	r3, [pc, #180]	@ (800498c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80048d8:	4013      	ands	r3, r2
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	6811      	ldr	r1, [r2, #0]
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	6892      	ldr	r2, [r2, #8]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	431a      	orrs	r2, r3
 80048e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048e8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048ea:	e03a      	b.n	8004962 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80048ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048f6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004978 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d004      	beq.n	800490c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1d      	ldr	r2, [pc, #116]	@ (800497c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d10e      	bne.n	800492a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800490c:	481a      	ldr	r0, [pc, #104]	@ (8004978 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800490e:	f7ff ff3b 	bl	8004788 <LL_ADC_IsEnabled>
 8004912:	4604      	mov	r4, r0
 8004914:	4819      	ldr	r0, [pc, #100]	@ (800497c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004916:	f7ff ff37 	bl	8004788 <LL_ADC_IsEnabled>
 800491a:	4603      	mov	r3, r0
 800491c:	4323      	orrs	r3, r4
 800491e:	2b00      	cmp	r3, #0
 8004920:	bf0c      	ite	eq
 8004922:	2301      	moveq	r3, #1
 8004924:	2300      	movne	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	e008      	b.n	800493c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800492a:	4817      	ldr	r0, [pc, #92]	@ (8004988 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800492c:	f7ff ff2c 	bl	8004788 <LL_ADC_IsEnabled>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	bf0c      	ite	eq
 8004936:	2301      	moveq	r3, #1
 8004938:	2300      	movne	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d010      	beq.n	8004962 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004940:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	4b11      	ldr	r3, [pc, #68]	@ (800498c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004946:	4013      	ands	r3, r2
 8004948:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800494a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800494c:	e009      	b.n	8004962 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004952:	f043 0220 	orr.w	r2, r3, #32
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004960:	e000      	b.n	8004964 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004962:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800496c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004970:	4618      	mov	r0, r3
 8004972:	377c      	adds	r7, #124	@ 0x7c
 8004974:	46bd      	mov	sp, r7
 8004976:	bd90      	pop	{r4, r7, pc}
 8004978:	40022000 	.word	0x40022000
 800497c:	40022100 	.word	0x40022100
 8004980:	40022300 	.word	0x40022300
 8004984:	58026300 	.word	0x58026300
 8004988:	58026000 	.word	0x58026000
 800498c:	fffff0e0 	.word	0xfffff0e0

08004990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049a0:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <__NVIC_SetPriorityGrouping+0x40>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049ac:	4013      	ands	r3, r2
 80049ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049b8:	4b06      	ldr	r3, [pc, #24]	@ (80049d4 <__NVIC_SetPriorityGrouping+0x44>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049be:	4a04      	ldr	r2, [pc, #16]	@ (80049d0 <__NVIC_SetPriorityGrouping+0x40>)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	60d3      	str	r3, [r2, #12]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	e000ed00 	.word	0xe000ed00
 80049d4:	05fa0000 	.word	0x05fa0000

080049d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049dc:	4b04      	ldr	r3, [pc, #16]	@ (80049f0 <__NVIC_GetPriorityGrouping+0x18>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	0a1b      	lsrs	r3, r3, #8
 80049e2:	f003 0307 	and.w	r3, r3, #7
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	e000ed00 	.word	0xe000ed00

080049f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	db0b      	blt.n	8004a1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	f003 021f 	and.w	r2, r3, #31
 8004a0c:	4907      	ldr	r1, [pc, #28]	@ (8004a2c <__NVIC_EnableIRQ+0x38>)
 8004a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	2001      	movs	r0, #1
 8004a16:	fa00 f202 	lsl.w	r2, r0, r2
 8004a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	e000e100 	.word	0xe000e100

08004a30 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	db12      	blt.n	8004a68 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	f003 021f 	and.w	r2, r3, #31
 8004a48:	490a      	ldr	r1, [pc, #40]	@ (8004a74 <__NVIC_DisableIRQ+0x44>)
 8004a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	2001      	movs	r0, #1
 8004a52:	fa00 f202 	lsl.w	r2, r0, r2
 8004a56:	3320      	adds	r3, #32
 8004a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a5c:	f3bf 8f4f 	dsb	sy
}
 8004a60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a62:	f3bf 8f6f 	isb	sy
}
 8004a66:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	e000e100 	.word	0xe000e100

08004a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	6039      	str	r1, [r7, #0]
 8004a82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	db0a      	blt.n	8004aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	490c      	ldr	r1, [pc, #48]	@ (8004ac4 <__NVIC_SetPriority+0x4c>)
 8004a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a96:	0112      	lsls	r2, r2, #4
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	440b      	add	r3, r1
 8004a9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004aa0:	e00a      	b.n	8004ab8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	4908      	ldr	r1, [pc, #32]	@ (8004ac8 <__NVIC_SetPriority+0x50>)
 8004aa8:	88fb      	ldrh	r3, [r7, #6]
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	3b04      	subs	r3, #4
 8004ab0:	0112      	lsls	r2, r2, #4
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	761a      	strb	r2, [r3, #24]
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	e000e100 	.word	0xe000e100
 8004ac8:	e000ed00 	.word	0xe000ed00

08004acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b089      	sub	sp, #36	@ 0x24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f1c3 0307 	rsb	r3, r3, #7
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	bf28      	it	cs
 8004aea:	2304      	movcs	r3, #4
 8004aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	3304      	adds	r3, #4
 8004af2:	2b06      	cmp	r3, #6
 8004af4:	d902      	bls.n	8004afc <NVIC_EncodePriority+0x30>
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	3b03      	subs	r3, #3
 8004afa:	e000      	b.n	8004afe <NVIC_EncodePriority+0x32>
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b00:	f04f 32ff 	mov.w	r2, #4294967295
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43da      	mvns	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	401a      	ands	r2, r3
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b14:	f04f 31ff 	mov.w	r1, #4294967295
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1e:	43d9      	mvns	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b24:	4313      	orrs	r3, r2
         );
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3724      	adds	r7, #36	@ 0x24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
	...

08004b34 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004b38:	f3bf 8f4f 	dsb	sy
}
 8004b3c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004b3e:	4b06      	ldr	r3, [pc, #24]	@ (8004b58 <__NVIC_SystemReset+0x24>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004b46:	4904      	ldr	r1, [pc, #16]	@ (8004b58 <__NVIC_SystemReset+0x24>)
 8004b48:	4b04      	ldr	r3, [pc, #16]	@ (8004b5c <__NVIC_SystemReset+0x28>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b4e:	f3bf 8f4f 	dsb	sy
}
 8004b52:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004b54:	bf00      	nop
 8004b56:	e7fd      	b.n	8004b54 <__NVIC_SystemReset+0x20>
 8004b58:	e000ed00 	.word	0xe000ed00
 8004b5c:	05fa0004 	.word	0x05fa0004

08004b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff ff11 	bl	8004990 <__NVIC_SetPriorityGrouping>
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b086      	sub	sp, #24
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
 8004b82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b84:	f7ff ff28 	bl	80049d8 <__NVIC_GetPriorityGrouping>
 8004b88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	6978      	ldr	r0, [r7, #20]
 8004b90:	f7ff ff9c 	bl	8004acc <NVIC_EncodePriority>
 8004b94:	4602      	mov	r2, r0
 8004b96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff ff6b 	bl	8004a78 <__NVIC_SetPriority>
}
 8004ba2:	bf00      	nop
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff ff1b 	bl	80049f4 <__NVIC_EnableIRQ>
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b082      	sub	sp, #8
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	4603      	mov	r3, r0
 8004bce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004bd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff ff2b 	bl	8004a30 <__NVIC_DisableIRQ>
}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004be6:	f7ff ffa5 	bl	8004b34 <__NVIC_SystemReset>
	...

08004bec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004bf0:	f3bf 8f5f 	dmb	sy
}
 8004bf4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004bf6:	4b07      	ldr	r3, [pc, #28]	@ (8004c14 <HAL_MPU_Disable+0x28>)
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	4a06      	ldr	r2, [pc, #24]	@ (8004c14 <HAL_MPU_Disable+0x28>)
 8004bfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c00:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004c02:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <HAL_MPU_Disable+0x2c>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	605a      	str	r2, [r3, #4]
}
 8004c08:	bf00      	nop
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	e000ed00 	.word	0xe000ed00
 8004c18:	e000ed90 	.word	0xe000ed90

08004c1c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004c24:	4a0b      	ldr	r2, [pc, #44]	@ (8004c54 <HAL_MPU_Enable+0x38>)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c58 <HAL_MPU_Enable+0x3c>)
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	4a09      	ldr	r2, [pc, #36]	@ (8004c58 <HAL_MPU_Enable+0x3c>)
 8004c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c38:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004c3a:	f3bf 8f4f 	dsb	sy
}
 8004c3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c40:	f3bf 8f6f 	isb	sy
}
 8004c44:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	e000ed90 	.word	0xe000ed90
 8004c58:	e000ed00 	.word	0xe000ed00

08004c5c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	785a      	ldrb	r2, [r3, #1]
 8004c68:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd8 <HAL_MPU_ConfigRegion+0x7c>)
 8004c6a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd8 <HAL_MPU_ConfigRegion+0x7c>)
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	4a19      	ldr	r2, [pc, #100]	@ (8004cd8 <HAL_MPU_ConfigRegion+0x7c>)
 8004c72:	f023 0301 	bic.w	r3, r3, #1
 8004c76:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004c78:	4a17      	ldr	r2, [pc, #92]	@ (8004cd8 <HAL_MPU_ConfigRegion+0x7c>)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	7b1b      	ldrb	r3, [r3, #12]
 8004c84:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	7adb      	ldrb	r3, [r3, #11]
 8004c8a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	7a9b      	ldrb	r3, [r3, #10]
 8004c92:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004c94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	7b5b      	ldrb	r3, [r3, #13]
 8004c9a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004c9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	7b9b      	ldrb	r3, [r3, #14]
 8004ca2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004ca4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	7bdb      	ldrb	r3, [r3, #15]
 8004caa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004cac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	7a5b      	ldrb	r3, [r3, #9]
 8004cb2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004cb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	7a1b      	ldrb	r3, [r3, #8]
 8004cba:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004cbc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	7812      	ldrb	r2, [r2, #0]
 8004cc2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004cc4:	4a04      	ldr	r2, [pc, #16]	@ (8004cd8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004cc6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004cc8:	6113      	str	r3, [r2, #16]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	e000ed90 	.word	0xe000ed90

08004cdc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004ce4:	f7fe fd7e 	bl	80037e4 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e316      	b.n	8005322 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a66      	ldr	r2, [pc, #408]	@ (8004e94 <HAL_DMA_Init+0x1b8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d04a      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a65      	ldr	r2, [pc, #404]	@ (8004e98 <HAL_DMA_Init+0x1bc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d045      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a63      	ldr	r2, [pc, #396]	@ (8004e9c <HAL_DMA_Init+0x1c0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d040      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a62      	ldr	r2, [pc, #392]	@ (8004ea0 <HAL_DMA_Init+0x1c4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d03b      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a60      	ldr	r2, [pc, #384]	@ (8004ea4 <HAL_DMA_Init+0x1c8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d036      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a5f      	ldr	r2, [pc, #380]	@ (8004ea8 <HAL_DMA_Init+0x1cc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d031      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a5d      	ldr	r2, [pc, #372]	@ (8004eac <HAL_DMA_Init+0x1d0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d02c      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8004eb0 <HAL_DMA_Init+0x1d4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d027      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a5a      	ldr	r2, [pc, #360]	@ (8004eb4 <HAL_DMA_Init+0x1d8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d022      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a59      	ldr	r2, [pc, #356]	@ (8004eb8 <HAL_DMA_Init+0x1dc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d01d      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a57      	ldr	r2, [pc, #348]	@ (8004ebc <HAL_DMA_Init+0x1e0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d018      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a56      	ldr	r2, [pc, #344]	@ (8004ec0 <HAL_DMA_Init+0x1e4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d013      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a54      	ldr	r2, [pc, #336]	@ (8004ec4 <HAL_DMA_Init+0x1e8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00e      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a53      	ldr	r2, [pc, #332]	@ (8004ec8 <HAL_DMA_Init+0x1ec>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d009      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a51      	ldr	r2, [pc, #324]	@ (8004ecc <HAL_DMA_Init+0x1f0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d004      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a50      	ldr	r2, [pc, #320]	@ (8004ed0 <HAL_DMA_Init+0x1f4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d101      	bne.n	8004d98 <HAL_DMA_Init+0xbc>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <HAL_DMA_Init+0xbe>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 813b 	beq.w	8005016 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a37      	ldr	r2, [pc, #220]	@ (8004e94 <HAL_DMA_Init+0x1b8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d04a      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a36      	ldr	r2, [pc, #216]	@ (8004e98 <HAL_DMA_Init+0x1bc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d045      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a34      	ldr	r2, [pc, #208]	@ (8004e9c <HAL_DMA_Init+0x1c0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d040      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a33      	ldr	r2, [pc, #204]	@ (8004ea0 <HAL_DMA_Init+0x1c4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d03b      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a31      	ldr	r2, [pc, #196]	@ (8004ea4 <HAL_DMA_Init+0x1c8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d036      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a30      	ldr	r2, [pc, #192]	@ (8004ea8 <HAL_DMA_Init+0x1cc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d031      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a2e      	ldr	r2, [pc, #184]	@ (8004eac <HAL_DMA_Init+0x1d0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d02c      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb0 <HAL_DMA_Init+0x1d4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d027      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a2b      	ldr	r2, [pc, #172]	@ (8004eb4 <HAL_DMA_Init+0x1d8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d022      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8004eb8 <HAL_DMA_Init+0x1dc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d01d      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a28      	ldr	r2, [pc, #160]	@ (8004ebc <HAL_DMA_Init+0x1e0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d018      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a27      	ldr	r2, [pc, #156]	@ (8004ec0 <HAL_DMA_Init+0x1e4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d013      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a25      	ldr	r2, [pc, #148]	@ (8004ec4 <HAL_DMA_Init+0x1e8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00e      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a24      	ldr	r2, [pc, #144]	@ (8004ec8 <HAL_DMA_Init+0x1ec>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d009      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a22      	ldr	r2, [pc, #136]	@ (8004ecc <HAL_DMA_Init+0x1f0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a21      	ldr	r2, [pc, #132]	@ (8004ed0 <HAL_DMA_Init+0x1f4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d108      	bne.n	8004e62 <HAL_DMA_Init+0x186>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0201 	bic.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	e007      	b.n	8004e72 <HAL_DMA_Init+0x196>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0201 	bic.w	r2, r2, #1
 8004e70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e72:	e02f      	b.n	8004ed4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e74:	f7fe fcb6 	bl	80037e4 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b05      	cmp	r3, #5
 8004e80:	d928      	bls.n	8004ed4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2203      	movs	r2, #3
 8004e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e246      	b.n	8005322 <HAL_DMA_Init+0x646>
 8004e94:	40020010 	.word	0x40020010
 8004e98:	40020028 	.word	0x40020028
 8004e9c:	40020040 	.word	0x40020040
 8004ea0:	40020058 	.word	0x40020058
 8004ea4:	40020070 	.word	0x40020070
 8004ea8:	40020088 	.word	0x40020088
 8004eac:	400200a0 	.word	0x400200a0
 8004eb0:	400200b8 	.word	0x400200b8
 8004eb4:	40020410 	.word	0x40020410
 8004eb8:	40020428 	.word	0x40020428
 8004ebc:	40020440 	.word	0x40020440
 8004ec0:	40020458 	.word	0x40020458
 8004ec4:	40020470 	.word	0x40020470
 8004ec8:	40020488 	.word	0x40020488
 8004ecc:	400204a0 	.word	0x400204a0
 8004ed0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1c8      	bne.n	8004e74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4b83      	ldr	r3, [pc, #524]	@ (80050fc <HAL_DMA_Init+0x420>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004efa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d107      	bne.n	8004f38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f30:	4313      	orrs	r3, r2
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004f38:	4b71      	ldr	r3, [pc, #452]	@ (8005100 <HAL_DMA_Init+0x424>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b71      	ldr	r3, [pc, #452]	@ (8005104 <HAL_DMA_Init+0x428>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f44:	d328      	bcc.n	8004f98 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b28      	cmp	r3, #40	@ 0x28
 8004f4c:	d903      	bls.n	8004f56 <HAL_DMA_Init+0x27a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f54:	d917      	bls.n	8004f86 <HAL_DMA_Init+0x2aa>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f5c:	d903      	bls.n	8004f66 <HAL_DMA_Init+0x28a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b42      	cmp	r3, #66	@ 0x42
 8004f64:	d90f      	bls.n	8004f86 <HAL_DMA_Init+0x2aa>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b46      	cmp	r3, #70	@ 0x46
 8004f6c:	d903      	bls.n	8004f76 <HAL_DMA_Init+0x29a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b48      	cmp	r3, #72	@ 0x48
 8004f74:	d907      	bls.n	8004f86 <HAL_DMA_Init+0x2aa>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b4e      	cmp	r3, #78	@ 0x4e
 8004f7c:	d905      	bls.n	8004f8a <HAL_DMA_Init+0x2ae>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b52      	cmp	r3, #82	@ 0x52
 8004f84:	d801      	bhi.n	8004f8a <HAL_DMA_Init+0x2ae>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <HAL_DMA_Init+0x2b0>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f96:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f023 0307 	bic.w	r3, r3, #7
 8004fae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d117      	bne.n	8004ff2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00e      	beq.n	8004ff2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f002 f8d3 	bl	8007180 <DMA_CheckFifoParam>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2240      	movs	r2, #64	@ 0x40
 8004fe4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e197      	b.n	8005322 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f002 f80e 	bl	800701c <DMA_CalcBaseAndBitshift>
 8005000:	4603      	mov	r3, r0
 8005002:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005008:	f003 031f 	and.w	r3, r3, #31
 800500c:	223f      	movs	r2, #63	@ 0x3f
 800500e:	409a      	lsls	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	609a      	str	r2, [r3, #8]
 8005014:	e0cd      	b.n	80051b2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a3b      	ldr	r2, [pc, #236]	@ (8005108 <HAL_DMA_Init+0x42c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d022      	beq.n	8005066 <HAL_DMA_Init+0x38a>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a39      	ldr	r2, [pc, #228]	@ (800510c <HAL_DMA_Init+0x430>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d01d      	beq.n	8005066 <HAL_DMA_Init+0x38a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a38      	ldr	r2, [pc, #224]	@ (8005110 <HAL_DMA_Init+0x434>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d018      	beq.n	8005066 <HAL_DMA_Init+0x38a>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a36      	ldr	r2, [pc, #216]	@ (8005114 <HAL_DMA_Init+0x438>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d013      	beq.n	8005066 <HAL_DMA_Init+0x38a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a35      	ldr	r2, [pc, #212]	@ (8005118 <HAL_DMA_Init+0x43c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00e      	beq.n	8005066 <HAL_DMA_Init+0x38a>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a33      	ldr	r2, [pc, #204]	@ (800511c <HAL_DMA_Init+0x440>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d009      	beq.n	8005066 <HAL_DMA_Init+0x38a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a32      	ldr	r2, [pc, #200]	@ (8005120 <HAL_DMA_Init+0x444>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d004      	beq.n	8005066 <HAL_DMA_Init+0x38a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a30      	ldr	r2, [pc, #192]	@ (8005124 <HAL_DMA_Init+0x448>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d101      	bne.n	800506a <HAL_DMA_Init+0x38e>
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <HAL_DMA_Init+0x390>
 800506a:	2300      	movs	r3, #0
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8097 	beq.w	80051a0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a24      	ldr	r2, [pc, #144]	@ (8005108 <HAL_DMA_Init+0x42c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d021      	beq.n	80050c0 <HAL_DMA_Init+0x3e4>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a22      	ldr	r2, [pc, #136]	@ (800510c <HAL_DMA_Init+0x430>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01c      	beq.n	80050c0 <HAL_DMA_Init+0x3e4>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a21      	ldr	r2, [pc, #132]	@ (8005110 <HAL_DMA_Init+0x434>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d017      	beq.n	80050c0 <HAL_DMA_Init+0x3e4>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1f      	ldr	r2, [pc, #124]	@ (8005114 <HAL_DMA_Init+0x438>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d012      	beq.n	80050c0 <HAL_DMA_Init+0x3e4>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1e      	ldr	r2, [pc, #120]	@ (8005118 <HAL_DMA_Init+0x43c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00d      	beq.n	80050c0 <HAL_DMA_Init+0x3e4>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1c      	ldr	r2, [pc, #112]	@ (800511c <HAL_DMA_Init+0x440>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d008      	beq.n	80050c0 <HAL_DMA_Init+0x3e4>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1b      	ldr	r2, [pc, #108]	@ (8005120 <HAL_DMA_Init+0x444>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <HAL_DMA_Init+0x3e4>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a19      	ldr	r2, [pc, #100]	@ (8005124 <HAL_DMA_Init+0x448>)
 80050be:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4b13      	ldr	r3, [pc, #76]	@ (8005128 <HAL_DMA_Init+0x44c>)
 80050dc:	4013      	ands	r3, r2
 80050de:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b40      	cmp	r3, #64	@ 0x40
 80050e6:	d021      	beq.n	800512c <HAL_DMA_Init+0x450>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b80      	cmp	r3, #128	@ 0x80
 80050ee:	d102      	bne.n	80050f6 <HAL_DMA_Init+0x41a>
 80050f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80050f4:	e01b      	b.n	800512e <HAL_DMA_Init+0x452>
 80050f6:	2300      	movs	r3, #0
 80050f8:	e019      	b.n	800512e <HAL_DMA_Init+0x452>
 80050fa:	bf00      	nop
 80050fc:	fe10803f 	.word	0xfe10803f
 8005100:	5c001000 	.word	0x5c001000
 8005104:	ffff0000 	.word	0xffff0000
 8005108:	58025408 	.word	0x58025408
 800510c:	5802541c 	.word	0x5802541c
 8005110:	58025430 	.word	0x58025430
 8005114:	58025444 	.word	0x58025444
 8005118:	58025458 	.word	0x58025458
 800511c:	5802546c 	.word	0x5802546c
 8005120:	58025480 	.word	0x58025480
 8005124:	58025494 	.word	0x58025494
 8005128:	fffe000f 	.word	0xfffe000f
 800512c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68d2      	ldr	r2, [r2, #12]
 8005132:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005134:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800513c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005144:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800514c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800515c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	4b6e      	ldr	r3, [pc, #440]	@ (800532c <HAL_DMA_Init+0x650>)
 8005174:	4413      	add	r3, r2
 8005176:	4a6e      	ldr	r2, [pc, #440]	@ (8005330 <HAL_DMA_Init+0x654>)
 8005178:	fba2 2303 	umull	r2, r3, r2, r3
 800517c:	091b      	lsrs	r3, r3, #4
 800517e:	009a      	lsls	r2, r3, #2
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f001 ff49 	bl	800701c <DMA_CalcBaseAndBitshift>
 800518a:	4603      	mov	r3, r0
 800518c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	2201      	movs	r2, #1
 8005198:	409a      	lsls	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	e008      	b.n	80051b2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2240      	movs	r2, #64	@ 0x40
 80051a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2203      	movs	r2, #3
 80051aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e0b7      	b.n	8005322 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a5f      	ldr	r2, [pc, #380]	@ (8005334 <HAL_DMA_Init+0x658>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d072      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a5d      	ldr	r2, [pc, #372]	@ (8005338 <HAL_DMA_Init+0x65c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d06d      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a5c      	ldr	r2, [pc, #368]	@ (800533c <HAL_DMA_Init+0x660>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d068      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a5a      	ldr	r2, [pc, #360]	@ (8005340 <HAL_DMA_Init+0x664>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d063      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a59      	ldr	r2, [pc, #356]	@ (8005344 <HAL_DMA_Init+0x668>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d05e      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a57      	ldr	r2, [pc, #348]	@ (8005348 <HAL_DMA_Init+0x66c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d059      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a56      	ldr	r2, [pc, #344]	@ (800534c <HAL_DMA_Init+0x670>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d054      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a54      	ldr	r2, [pc, #336]	@ (8005350 <HAL_DMA_Init+0x674>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d04f      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a53      	ldr	r2, [pc, #332]	@ (8005354 <HAL_DMA_Init+0x678>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d04a      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a51      	ldr	r2, [pc, #324]	@ (8005358 <HAL_DMA_Init+0x67c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d045      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a50      	ldr	r2, [pc, #320]	@ (800535c <HAL_DMA_Init+0x680>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d040      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a4e      	ldr	r2, [pc, #312]	@ (8005360 <HAL_DMA_Init+0x684>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d03b      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a4d      	ldr	r2, [pc, #308]	@ (8005364 <HAL_DMA_Init+0x688>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d036      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a4b      	ldr	r2, [pc, #300]	@ (8005368 <HAL_DMA_Init+0x68c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d031      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a4a      	ldr	r2, [pc, #296]	@ (800536c <HAL_DMA_Init+0x690>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d02c      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a48      	ldr	r2, [pc, #288]	@ (8005370 <HAL_DMA_Init+0x694>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d027      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a47      	ldr	r2, [pc, #284]	@ (8005374 <HAL_DMA_Init+0x698>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d022      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a45      	ldr	r2, [pc, #276]	@ (8005378 <HAL_DMA_Init+0x69c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d01d      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a44      	ldr	r2, [pc, #272]	@ (800537c <HAL_DMA_Init+0x6a0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d018      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a42      	ldr	r2, [pc, #264]	@ (8005380 <HAL_DMA_Init+0x6a4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d013      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a41      	ldr	r2, [pc, #260]	@ (8005384 <HAL_DMA_Init+0x6a8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00e      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a3f      	ldr	r2, [pc, #252]	@ (8005388 <HAL_DMA_Init+0x6ac>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d009      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a3e      	ldr	r2, [pc, #248]	@ (800538c <HAL_DMA_Init+0x6b0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a3c      	ldr	r2, [pc, #240]	@ (8005390 <HAL_DMA_Init+0x6b4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d101      	bne.n	80052a6 <HAL_DMA_Init+0x5ca>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <HAL_DMA_Init+0x5cc>
 80052a6:	2300      	movs	r3, #0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d032      	beq.n	8005312 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f001 ffe3 	bl	8007278 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b80      	cmp	r3, #128	@ 0x80
 80052b8:	d102      	bne.n	80052c0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80052d4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d010      	beq.n	8005300 <HAL_DMA_Init+0x624>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d80c      	bhi.n	8005300 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f002 f860 	bl	80073ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80052fc:	605a      	str	r2, [r3, #4]
 80052fe:	e008      	b.n	8005312 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	a7fdabf8 	.word	0xa7fdabf8
 8005330:	cccccccd 	.word	0xcccccccd
 8005334:	40020010 	.word	0x40020010
 8005338:	40020028 	.word	0x40020028
 800533c:	40020040 	.word	0x40020040
 8005340:	40020058 	.word	0x40020058
 8005344:	40020070 	.word	0x40020070
 8005348:	40020088 	.word	0x40020088
 800534c:	400200a0 	.word	0x400200a0
 8005350:	400200b8 	.word	0x400200b8
 8005354:	40020410 	.word	0x40020410
 8005358:	40020428 	.word	0x40020428
 800535c:	40020440 	.word	0x40020440
 8005360:	40020458 	.word	0x40020458
 8005364:	40020470 	.word	0x40020470
 8005368:	40020488 	.word	0x40020488
 800536c:	400204a0 	.word	0x400204a0
 8005370:	400204b8 	.word	0x400204b8
 8005374:	58025408 	.word	0x58025408
 8005378:	5802541c 	.word	0x5802541c
 800537c:	58025430 	.word	0x58025430
 8005380:	58025444 	.word	0x58025444
 8005384:	58025458 	.word	0x58025458
 8005388:	5802546c 	.word	0x5802546c
 800538c:	58025480 	.word	0x58025480
 8005390:	58025494 	.word	0x58025494

08005394 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e1a8      	b.n	80056f8 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a82      	ldr	r2, [pc, #520]	@ (80055b4 <HAL_DMA_DeInit+0x220>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d04a      	beq.n	8005446 <HAL_DMA_DeInit+0xb2>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a80      	ldr	r2, [pc, #512]	@ (80055b8 <HAL_DMA_DeInit+0x224>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d045      	beq.n	8005446 <HAL_DMA_DeInit+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a7f      	ldr	r2, [pc, #508]	@ (80055bc <HAL_DMA_DeInit+0x228>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d040      	beq.n	8005446 <HAL_DMA_DeInit+0xb2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a7d      	ldr	r2, [pc, #500]	@ (80055c0 <HAL_DMA_DeInit+0x22c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d03b      	beq.n	8005446 <HAL_DMA_DeInit+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a7c      	ldr	r2, [pc, #496]	@ (80055c4 <HAL_DMA_DeInit+0x230>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d036      	beq.n	8005446 <HAL_DMA_DeInit+0xb2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a7a      	ldr	r2, [pc, #488]	@ (80055c8 <HAL_DMA_DeInit+0x234>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d031      	beq.n	8005446 <HAL_DMA_DeInit+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a79      	ldr	r2, [pc, #484]	@ (80055cc <HAL_DMA_DeInit+0x238>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d02c      	beq.n	8005446 <HAL_DMA_DeInit+0xb2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a77      	ldr	r2, [pc, #476]	@ (80055d0 <HAL_DMA_DeInit+0x23c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d027      	beq.n	8005446 <HAL_DMA_DeInit+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a76      	ldr	r2, [pc, #472]	@ (80055d4 <HAL_DMA_DeInit+0x240>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d022      	beq.n	8005446 <HAL_DMA_DeInit+0xb2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a74      	ldr	r2, [pc, #464]	@ (80055d8 <HAL_DMA_DeInit+0x244>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d01d      	beq.n	8005446 <HAL_DMA_DeInit+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a73      	ldr	r2, [pc, #460]	@ (80055dc <HAL_DMA_DeInit+0x248>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d018      	beq.n	8005446 <HAL_DMA_DeInit+0xb2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a71      	ldr	r2, [pc, #452]	@ (80055e0 <HAL_DMA_DeInit+0x24c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d013      	beq.n	8005446 <HAL_DMA_DeInit+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a70      	ldr	r2, [pc, #448]	@ (80055e4 <HAL_DMA_DeInit+0x250>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00e      	beq.n	8005446 <HAL_DMA_DeInit+0xb2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a6e      	ldr	r2, [pc, #440]	@ (80055e8 <HAL_DMA_DeInit+0x254>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d009      	beq.n	8005446 <HAL_DMA_DeInit+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a6d      	ldr	r2, [pc, #436]	@ (80055ec <HAL_DMA_DeInit+0x258>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d004      	beq.n	8005446 <HAL_DMA_DeInit+0xb2>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a6b      	ldr	r2, [pc, #428]	@ (80055f0 <HAL_DMA_DeInit+0x25c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d108      	bne.n	8005458 <HAL_DMA_DeInit+0xc4>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0201 	bic.w	r2, r2, #1
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	e007      	b.n	8005468 <HAL_DMA_DeInit+0xd4>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0201 	bic.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a51      	ldr	r2, [pc, #324]	@ (80055b4 <HAL_DMA_DeInit+0x220>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d04a      	beq.n	8005508 <HAL_DMA_DeInit+0x174>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a50      	ldr	r2, [pc, #320]	@ (80055b8 <HAL_DMA_DeInit+0x224>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d045      	beq.n	8005508 <HAL_DMA_DeInit+0x174>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a4e      	ldr	r2, [pc, #312]	@ (80055bc <HAL_DMA_DeInit+0x228>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d040      	beq.n	8005508 <HAL_DMA_DeInit+0x174>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a4d      	ldr	r2, [pc, #308]	@ (80055c0 <HAL_DMA_DeInit+0x22c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d03b      	beq.n	8005508 <HAL_DMA_DeInit+0x174>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a4b      	ldr	r2, [pc, #300]	@ (80055c4 <HAL_DMA_DeInit+0x230>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d036      	beq.n	8005508 <HAL_DMA_DeInit+0x174>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a4a      	ldr	r2, [pc, #296]	@ (80055c8 <HAL_DMA_DeInit+0x234>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d031      	beq.n	8005508 <HAL_DMA_DeInit+0x174>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a48      	ldr	r2, [pc, #288]	@ (80055cc <HAL_DMA_DeInit+0x238>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d02c      	beq.n	8005508 <HAL_DMA_DeInit+0x174>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a47      	ldr	r2, [pc, #284]	@ (80055d0 <HAL_DMA_DeInit+0x23c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d027      	beq.n	8005508 <HAL_DMA_DeInit+0x174>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a45      	ldr	r2, [pc, #276]	@ (80055d4 <HAL_DMA_DeInit+0x240>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d022      	beq.n	8005508 <HAL_DMA_DeInit+0x174>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a44      	ldr	r2, [pc, #272]	@ (80055d8 <HAL_DMA_DeInit+0x244>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d01d      	beq.n	8005508 <HAL_DMA_DeInit+0x174>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a42      	ldr	r2, [pc, #264]	@ (80055dc <HAL_DMA_DeInit+0x248>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d018      	beq.n	8005508 <HAL_DMA_DeInit+0x174>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a41      	ldr	r2, [pc, #260]	@ (80055e0 <HAL_DMA_DeInit+0x24c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d013      	beq.n	8005508 <HAL_DMA_DeInit+0x174>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a3f      	ldr	r2, [pc, #252]	@ (80055e4 <HAL_DMA_DeInit+0x250>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00e      	beq.n	8005508 <HAL_DMA_DeInit+0x174>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a3e      	ldr	r2, [pc, #248]	@ (80055e8 <HAL_DMA_DeInit+0x254>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d009      	beq.n	8005508 <HAL_DMA_DeInit+0x174>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a3c      	ldr	r2, [pc, #240]	@ (80055ec <HAL_DMA_DeInit+0x258>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d004      	beq.n	8005508 <HAL_DMA_DeInit+0x174>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a3b      	ldr	r2, [pc, #236]	@ (80055f0 <HAL_DMA_DeInit+0x25c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d101      	bne.n	800550c <HAL_DMA_DeInit+0x178>
 8005508:	2301      	movs	r3, #1
 800550a:	e000      	b.n	800550e <HAL_DMA_DeInit+0x17a>
 800550c:	2300      	movs	r3, #0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d025      	beq.n	800555e <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2200      	movs	r2, #0
 8005520:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2200      	movs	r2, #0
 8005528:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2200      	movs	r2, #0
 8005530:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2200      	movs	r2, #0
 8005538:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2221      	movs	r2, #33	@ 0x21
 8005540:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f001 fd6a 	bl	800701c <DMA_CalcBaseAndBitshift>
 8005548:	4603      	mov	r3, r0
 800554a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005550:	f003 031f 	and.w	r3, r3, #31
 8005554:	223f      	movs	r2, #63	@ 0x3f
 8005556:	409a      	lsls	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	609a      	str	r2, [r3, #8]
 800555c:	e081      	b.n	8005662 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a24      	ldr	r2, [pc, #144]	@ (80055f4 <HAL_DMA_DeInit+0x260>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d022      	beq.n	80055ae <HAL_DMA_DeInit+0x21a>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a22      	ldr	r2, [pc, #136]	@ (80055f8 <HAL_DMA_DeInit+0x264>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d01d      	beq.n	80055ae <HAL_DMA_DeInit+0x21a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a21      	ldr	r2, [pc, #132]	@ (80055fc <HAL_DMA_DeInit+0x268>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d018      	beq.n	80055ae <HAL_DMA_DeInit+0x21a>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1f      	ldr	r2, [pc, #124]	@ (8005600 <HAL_DMA_DeInit+0x26c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d013      	beq.n	80055ae <HAL_DMA_DeInit+0x21a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1e      	ldr	r2, [pc, #120]	@ (8005604 <HAL_DMA_DeInit+0x270>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00e      	beq.n	80055ae <HAL_DMA_DeInit+0x21a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1c      	ldr	r2, [pc, #112]	@ (8005608 <HAL_DMA_DeInit+0x274>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d009      	beq.n	80055ae <HAL_DMA_DeInit+0x21a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1b      	ldr	r2, [pc, #108]	@ (800560c <HAL_DMA_DeInit+0x278>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d004      	beq.n	80055ae <HAL_DMA_DeInit+0x21a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a19      	ldr	r2, [pc, #100]	@ (8005610 <HAL_DMA_DeInit+0x27c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d132      	bne.n	8005614 <HAL_DMA_DeInit+0x280>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e031      	b.n	8005616 <HAL_DMA_DeInit+0x282>
 80055b2:	bf00      	nop
 80055b4:	40020010 	.word	0x40020010
 80055b8:	40020028 	.word	0x40020028
 80055bc:	40020040 	.word	0x40020040
 80055c0:	40020058 	.word	0x40020058
 80055c4:	40020070 	.word	0x40020070
 80055c8:	40020088 	.word	0x40020088
 80055cc:	400200a0 	.word	0x400200a0
 80055d0:	400200b8 	.word	0x400200b8
 80055d4:	40020410 	.word	0x40020410
 80055d8:	40020428 	.word	0x40020428
 80055dc:	40020440 	.word	0x40020440
 80055e0:	40020458 	.word	0x40020458
 80055e4:	40020470 	.word	0x40020470
 80055e8:	40020488 	.word	0x40020488
 80055ec:	400204a0 	.word	0x400204a0
 80055f0:	400204b8 	.word	0x400204b8
 80055f4:	58025408 	.word	0x58025408
 80055f8:	5802541c 	.word	0x5802541c
 80055fc:	58025430 	.word	0x58025430
 8005600:	58025444 	.word	0x58025444
 8005604:	58025458 	.word	0x58025458
 8005608:	5802546c 	.word	0x5802546c
 800560c:	58025480 	.word	0x58025480
 8005610:	58025494 	.word	0x58025494
 8005614:	2300      	movs	r3, #0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d021      	beq.n	800565e <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2200      	movs	r2, #0
 8005628:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2200      	movs	r2, #0
 8005630:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2200      	movs	r2, #0
 8005638:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2200      	movs	r2, #0
 8005640:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f001 fcea 	bl	800701c <DMA_CalcBaseAndBitshift>
 8005648:	4603      	mov	r3, r0
 800564a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	2201      	movs	r2, #1
 8005656:	409a      	lsls	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	605a      	str	r2, [r3, #4]
 800565c:	e001      	b.n	8005662 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e04a      	b.n	80056f8 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f001 fe08 	bl	8007278 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005680:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00f      	beq.n	80056aa <HAL_DMA_DeInit+0x316>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b08      	cmp	r3, #8
 8005690:	d80b      	bhi.n	80056aa <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f001 fe8a 	bl	80073ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80056a8:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005708:	f7fe f86c 	bl	80037e4 <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e2dc      	b.n	8005cd2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d008      	beq.n	8005736 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2280      	movs	r2, #128	@ 0x80
 8005728:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e2cd      	b.n	8005cd2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a76      	ldr	r2, [pc, #472]	@ (8005914 <HAL_DMA_Abort+0x214>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d04a      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a74      	ldr	r2, [pc, #464]	@ (8005918 <HAL_DMA_Abort+0x218>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d045      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a73      	ldr	r2, [pc, #460]	@ (800591c <HAL_DMA_Abort+0x21c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d040      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a71      	ldr	r2, [pc, #452]	@ (8005920 <HAL_DMA_Abort+0x220>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d03b      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a70      	ldr	r2, [pc, #448]	@ (8005924 <HAL_DMA_Abort+0x224>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d036      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a6e      	ldr	r2, [pc, #440]	@ (8005928 <HAL_DMA_Abort+0x228>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d031      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a6d      	ldr	r2, [pc, #436]	@ (800592c <HAL_DMA_Abort+0x22c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d02c      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a6b      	ldr	r2, [pc, #428]	@ (8005930 <HAL_DMA_Abort+0x230>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d027      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a6a      	ldr	r2, [pc, #424]	@ (8005934 <HAL_DMA_Abort+0x234>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d022      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a68      	ldr	r2, [pc, #416]	@ (8005938 <HAL_DMA_Abort+0x238>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d01d      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a67      	ldr	r2, [pc, #412]	@ (800593c <HAL_DMA_Abort+0x23c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d018      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a65      	ldr	r2, [pc, #404]	@ (8005940 <HAL_DMA_Abort+0x240>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d013      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a64      	ldr	r2, [pc, #400]	@ (8005944 <HAL_DMA_Abort+0x244>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00e      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a62      	ldr	r2, [pc, #392]	@ (8005948 <HAL_DMA_Abort+0x248>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d009      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a61      	ldr	r2, [pc, #388]	@ (800594c <HAL_DMA_Abort+0x24c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d004      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a5f      	ldr	r2, [pc, #380]	@ (8005950 <HAL_DMA_Abort+0x250>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d101      	bne.n	80057da <HAL_DMA_Abort+0xda>
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <HAL_DMA_Abort+0xdc>
 80057da:	2300      	movs	r3, #0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d013      	beq.n	8005808 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 021e 	bic.w	r2, r2, #30
 80057ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695a      	ldr	r2, [r3, #20]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	e00a      	b.n	800581e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 020e 	bic.w	r2, r2, #14
 8005816:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a3c      	ldr	r2, [pc, #240]	@ (8005914 <HAL_DMA_Abort+0x214>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d072      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a3a      	ldr	r2, [pc, #232]	@ (8005918 <HAL_DMA_Abort+0x218>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d06d      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a39      	ldr	r2, [pc, #228]	@ (800591c <HAL_DMA_Abort+0x21c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d068      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a37      	ldr	r2, [pc, #220]	@ (8005920 <HAL_DMA_Abort+0x220>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d063      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a36      	ldr	r2, [pc, #216]	@ (8005924 <HAL_DMA_Abort+0x224>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d05e      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a34      	ldr	r2, [pc, #208]	@ (8005928 <HAL_DMA_Abort+0x228>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d059      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a33      	ldr	r2, [pc, #204]	@ (800592c <HAL_DMA_Abort+0x22c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d054      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a31      	ldr	r2, [pc, #196]	@ (8005930 <HAL_DMA_Abort+0x230>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d04f      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a30      	ldr	r2, [pc, #192]	@ (8005934 <HAL_DMA_Abort+0x234>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d04a      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a2e      	ldr	r2, [pc, #184]	@ (8005938 <HAL_DMA_Abort+0x238>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d045      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a2d      	ldr	r2, [pc, #180]	@ (800593c <HAL_DMA_Abort+0x23c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d040      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a2b      	ldr	r2, [pc, #172]	@ (8005940 <HAL_DMA_Abort+0x240>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d03b      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2a      	ldr	r2, [pc, #168]	@ (8005944 <HAL_DMA_Abort+0x244>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d036      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a28      	ldr	r2, [pc, #160]	@ (8005948 <HAL_DMA_Abort+0x248>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d031      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a27      	ldr	r2, [pc, #156]	@ (800594c <HAL_DMA_Abort+0x24c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d02c      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a25      	ldr	r2, [pc, #148]	@ (8005950 <HAL_DMA_Abort+0x250>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d027      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a24      	ldr	r2, [pc, #144]	@ (8005954 <HAL_DMA_Abort+0x254>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d022      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a22      	ldr	r2, [pc, #136]	@ (8005958 <HAL_DMA_Abort+0x258>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01d      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a21      	ldr	r2, [pc, #132]	@ (800595c <HAL_DMA_Abort+0x25c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d018      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005960 <HAL_DMA_Abort+0x260>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d013      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005964 <HAL_DMA_Abort+0x264>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00e      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005968 <HAL_DMA_Abort+0x268>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d009      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1b      	ldr	r2, [pc, #108]	@ (800596c <HAL_DMA_Abort+0x26c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d004      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a19      	ldr	r2, [pc, #100]	@ (8005970 <HAL_DMA_Abort+0x270>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d132      	bne.n	8005974 <HAL_DMA_Abort+0x274>
 800590e:	2301      	movs	r3, #1
 8005910:	e031      	b.n	8005976 <HAL_DMA_Abort+0x276>
 8005912:	bf00      	nop
 8005914:	40020010 	.word	0x40020010
 8005918:	40020028 	.word	0x40020028
 800591c:	40020040 	.word	0x40020040
 8005920:	40020058 	.word	0x40020058
 8005924:	40020070 	.word	0x40020070
 8005928:	40020088 	.word	0x40020088
 800592c:	400200a0 	.word	0x400200a0
 8005930:	400200b8 	.word	0x400200b8
 8005934:	40020410 	.word	0x40020410
 8005938:	40020428 	.word	0x40020428
 800593c:	40020440 	.word	0x40020440
 8005940:	40020458 	.word	0x40020458
 8005944:	40020470 	.word	0x40020470
 8005948:	40020488 	.word	0x40020488
 800594c:	400204a0 	.word	0x400204a0
 8005950:	400204b8 	.word	0x400204b8
 8005954:	58025408 	.word	0x58025408
 8005958:	5802541c 	.word	0x5802541c
 800595c:	58025430 	.word	0x58025430
 8005960:	58025444 	.word	0x58025444
 8005964:	58025458 	.word	0x58025458
 8005968:	5802546c 	.word	0x5802546c
 800596c:	58025480 	.word	0x58025480
 8005970:	58025494 	.word	0x58025494
 8005974:	2300      	movs	r3, #0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d007      	beq.n	800598a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005984:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005988:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a6d      	ldr	r2, [pc, #436]	@ (8005b44 <HAL_DMA_Abort+0x444>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d04a      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a6b      	ldr	r2, [pc, #428]	@ (8005b48 <HAL_DMA_Abort+0x448>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d045      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a6a      	ldr	r2, [pc, #424]	@ (8005b4c <HAL_DMA_Abort+0x44c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d040      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a68      	ldr	r2, [pc, #416]	@ (8005b50 <HAL_DMA_Abort+0x450>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d03b      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a67      	ldr	r2, [pc, #412]	@ (8005b54 <HAL_DMA_Abort+0x454>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d036      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a65      	ldr	r2, [pc, #404]	@ (8005b58 <HAL_DMA_Abort+0x458>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d031      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a64      	ldr	r2, [pc, #400]	@ (8005b5c <HAL_DMA_Abort+0x45c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d02c      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a62      	ldr	r2, [pc, #392]	@ (8005b60 <HAL_DMA_Abort+0x460>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d027      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a61      	ldr	r2, [pc, #388]	@ (8005b64 <HAL_DMA_Abort+0x464>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d022      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a5f      	ldr	r2, [pc, #380]	@ (8005b68 <HAL_DMA_Abort+0x468>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d01d      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a5e      	ldr	r2, [pc, #376]	@ (8005b6c <HAL_DMA_Abort+0x46c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d018      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a5c      	ldr	r2, [pc, #368]	@ (8005b70 <HAL_DMA_Abort+0x470>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a5b      	ldr	r2, [pc, #364]	@ (8005b74 <HAL_DMA_Abort+0x474>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00e      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a59      	ldr	r2, [pc, #356]	@ (8005b78 <HAL_DMA_Abort+0x478>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d009      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a58      	ldr	r2, [pc, #352]	@ (8005b7c <HAL_DMA_Abort+0x47c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d004      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a56      	ldr	r2, [pc, #344]	@ (8005b80 <HAL_DMA_Abort+0x480>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d108      	bne.n	8005a3c <HAL_DMA_Abort+0x33c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0201 	bic.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e007      	b.n	8005a4c <HAL_DMA_Abort+0x34c>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0201 	bic.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a4c:	e013      	b.n	8005a76 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a4e:	f7fd fec9 	bl	80037e4 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b05      	cmp	r3, #5
 8005a5a:	d90c      	bls.n	8005a76 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2203      	movs	r2, #3
 8005a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e12d      	b.n	8005cd2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e5      	bne.n	8005a4e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2f      	ldr	r2, [pc, #188]	@ (8005b44 <HAL_DMA_Abort+0x444>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d04a      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a2d      	ldr	r2, [pc, #180]	@ (8005b48 <HAL_DMA_Abort+0x448>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d045      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8005b4c <HAL_DMA_Abort+0x44c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d040      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a2a      	ldr	r2, [pc, #168]	@ (8005b50 <HAL_DMA_Abort+0x450>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d03b      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a29      	ldr	r2, [pc, #164]	@ (8005b54 <HAL_DMA_Abort+0x454>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d036      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a27      	ldr	r2, [pc, #156]	@ (8005b58 <HAL_DMA_Abort+0x458>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d031      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a26      	ldr	r2, [pc, #152]	@ (8005b5c <HAL_DMA_Abort+0x45c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d02c      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a24      	ldr	r2, [pc, #144]	@ (8005b60 <HAL_DMA_Abort+0x460>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d027      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a23      	ldr	r2, [pc, #140]	@ (8005b64 <HAL_DMA_Abort+0x464>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d022      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a21      	ldr	r2, [pc, #132]	@ (8005b68 <HAL_DMA_Abort+0x468>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d01d      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a20      	ldr	r2, [pc, #128]	@ (8005b6c <HAL_DMA_Abort+0x46c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d018      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1e      	ldr	r2, [pc, #120]	@ (8005b70 <HAL_DMA_Abort+0x470>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1d      	ldr	r2, [pc, #116]	@ (8005b74 <HAL_DMA_Abort+0x474>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00e      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1b      	ldr	r2, [pc, #108]	@ (8005b78 <HAL_DMA_Abort+0x478>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d009      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1a      	ldr	r2, [pc, #104]	@ (8005b7c <HAL_DMA_Abort+0x47c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d004      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a18      	ldr	r2, [pc, #96]	@ (8005b80 <HAL_DMA_Abort+0x480>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d101      	bne.n	8005b26 <HAL_DMA_Abort+0x426>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e000      	b.n	8005b28 <HAL_DMA_Abort+0x428>
 8005b26:	2300      	movs	r3, #0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d02b      	beq.n	8005b84 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b30:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	223f      	movs	r2, #63	@ 0x3f
 8005b3c:	409a      	lsls	r2, r3
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	609a      	str	r2, [r3, #8]
 8005b42:	e02a      	b.n	8005b9a <HAL_DMA_Abort+0x49a>
 8005b44:	40020010 	.word	0x40020010
 8005b48:	40020028 	.word	0x40020028
 8005b4c:	40020040 	.word	0x40020040
 8005b50:	40020058 	.word	0x40020058
 8005b54:	40020070 	.word	0x40020070
 8005b58:	40020088 	.word	0x40020088
 8005b5c:	400200a0 	.word	0x400200a0
 8005b60:	400200b8 	.word	0x400200b8
 8005b64:	40020410 	.word	0x40020410
 8005b68:	40020428 	.word	0x40020428
 8005b6c:	40020440 	.word	0x40020440
 8005b70:	40020458 	.word	0x40020458
 8005b74:	40020470 	.word	0x40020470
 8005b78:	40020488 	.word	0x40020488
 8005b7c:	400204a0 	.word	0x400204a0
 8005b80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b88:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	2201      	movs	r2, #1
 8005b94:	409a      	lsls	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a4f      	ldr	r2, [pc, #316]	@ (8005cdc <HAL_DMA_Abort+0x5dc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d072      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a4d      	ldr	r2, [pc, #308]	@ (8005ce0 <HAL_DMA_Abort+0x5e0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d06d      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a4c      	ldr	r2, [pc, #304]	@ (8005ce4 <HAL_DMA_Abort+0x5e4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d068      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a4a      	ldr	r2, [pc, #296]	@ (8005ce8 <HAL_DMA_Abort+0x5e8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d063      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a49      	ldr	r2, [pc, #292]	@ (8005cec <HAL_DMA_Abort+0x5ec>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d05e      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a47      	ldr	r2, [pc, #284]	@ (8005cf0 <HAL_DMA_Abort+0x5f0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d059      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a46      	ldr	r2, [pc, #280]	@ (8005cf4 <HAL_DMA_Abort+0x5f4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d054      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a44      	ldr	r2, [pc, #272]	@ (8005cf8 <HAL_DMA_Abort+0x5f8>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d04f      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a43      	ldr	r2, [pc, #268]	@ (8005cfc <HAL_DMA_Abort+0x5fc>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d04a      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a41      	ldr	r2, [pc, #260]	@ (8005d00 <HAL_DMA_Abort+0x600>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d045      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a40      	ldr	r2, [pc, #256]	@ (8005d04 <HAL_DMA_Abort+0x604>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d040      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a3e      	ldr	r2, [pc, #248]	@ (8005d08 <HAL_DMA_Abort+0x608>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d03b      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a3d      	ldr	r2, [pc, #244]	@ (8005d0c <HAL_DMA_Abort+0x60c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d036      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a3b      	ldr	r2, [pc, #236]	@ (8005d10 <HAL_DMA_Abort+0x610>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d031      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a3a      	ldr	r2, [pc, #232]	@ (8005d14 <HAL_DMA_Abort+0x614>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d02c      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a38      	ldr	r2, [pc, #224]	@ (8005d18 <HAL_DMA_Abort+0x618>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d027      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a37      	ldr	r2, [pc, #220]	@ (8005d1c <HAL_DMA_Abort+0x61c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d022      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a35      	ldr	r2, [pc, #212]	@ (8005d20 <HAL_DMA_Abort+0x620>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d01d      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a34      	ldr	r2, [pc, #208]	@ (8005d24 <HAL_DMA_Abort+0x624>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d018      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a32      	ldr	r2, [pc, #200]	@ (8005d28 <HAL_DMA_Abort+0x628>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d013      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a31      	ldr	r2, [pc, #196]	@ (8005d2c <HAL_DMA_Abort+0x62c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00e      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a2f      	ldr	r2, [pc, #188]	@ (8005d30 <HAL_DMA_Abort+0x630>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d009      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a2e      	ldr	r2, [pc, #184]	@ (8005d34 <HAL_DMA_Abort+0x634>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d004      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a2c      	ldr	r2, [pc, #176]	@ (8005d38 <HAL_DMA_Abort+0x638>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d101      	bne.n	8005c8e <HAL_DMA_Abort+0x58e>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <HAL_DMA_Abort+0x590>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d015      	beq.n	8005cc0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005c9c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00c      	beq.n	8005cc0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cb4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005cbe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40020010 	.word	0x40020010
 8005ce0:	40020028 	.word	0x40020028
 8005ce4:	40020040 	.word	0x40020040
 8005ce8:	40020058 	.word	0x40020058
 8005cec:	40020070 	.word	0x40020070
 8005cf0:	40020088 	.word	0x40020088
 8005cf4:	400200a0 	.word	0x400200a0
 8005cf8:	400200b8 	.word	0x400200b8
 8005cfc:	40020410 	.word	0x40020410
 8005d00:	40020428 	.word	0x40020428
 8005d04:	40020440 	.word	0x40020440
 8005d08:	40020458 	.word	0x40020458
 8005d0c:	40020470 	.word	0x40020470
 8005d10:	40020488 	.word	0x40020488
 8005d14:	400204a0 	.word	0x400204a0
 8005d18:	400204b8 	.word	0x400204b8
 8005d1c:	58025408 	.word	0x58025408
 8005d20:	5802541c 	.word	0x5802541c
 8005d24:	58025430 	.word	0x58025430
 8005d28:	58025444 	.word	0x58025444
 8005d2c:	58025458 	.word	0x58025458
 8005d30:	5802546c 	.word	0x5802546c
 8005d34:	58025480 	.word	0x58025480
 8005d38:	58025494 	.word	0x58025494

08005d3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e237      	b.n	80061be <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d004      	beq.n	8005d64 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2280      	movs	r2, #128	@ 0x80
 8005d5e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e22c      	b.n	80061be <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a5c      	ldr	r2, [pc, #368]	@ (8005edc <HAL_DMA_Abort_IT+0x1a0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d04a      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a5b      	ldr	r2, [pc, #364]	@ (8005ee0 <HAL_DMA_Abort_IT+0x1a4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d045      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a59      	ldr	r2, [pc, #356]	@ (8005ee4 <HAL_DMA_Abort_IT+0x1a8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d040      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a58      	ldr	r2, [pc, #352]	@ (8005ee8 <HAL_DMA_Abort_IT+0x1ac>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d03b      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a56      	ldr	r2, [pc, #344]	@ (8005eec <HAL_DMA_Abort_IT+0x1b0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d036      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a55      	ldr	r2, [pc, #340]	@ (8005ef0 <HAL_DMA_Abort_IT+0x1b4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d031      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a53      	ldr	r2, [pc, #332]	@ (8005ef4 <HAL_DMA_Abort_IT+0x1b8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d02c      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a52      	ldr	r2, [pc, #328]	@ (8005ef8 <HAL_DMA_Abort_IT+0x1bc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d027      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a50      	ldr	r2, [pc, #320]	@ (8005efc <HAL_DMA_Abort_IT+0x1c0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d022      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a4f      	ldr	r2, [pc, #316]	@ (8005f00 <HAL_DMA_Abort_IT+0x1c4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d01d      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a4d      	ldr	r2, [pc, #308]	@ (8005f04 <HAL_DMA_Abort_IT+0x1c8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d018      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a4c      	ldr	r2, [pc, #304]	@ (8005f08 <HAL_DMA_Abort_IT+0x1cc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d013      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a4a      	ldr	r2, [pc, #296]	@ (8005f0c <HAL_DMA_Abort_IT+0x1d0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00e      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a49      	ldr	r2, [pc, #292]	@ (8005f10 <HAL_DMA_Abort_IT+0x1d4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d009      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a47      	ldr	r2, [pc, #284]	@ (8005f14 <HAL_DMA_Abort_IT+0x1d8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d004      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a46      	ldr	r2, [pc, #280]	@ (8005f18 <HAL_DMA_Abort_IT+0x1dc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d101      	bne.n	8005e08 <HAL_DMA_Abort_IT+0xcc>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <HAL_DMA_Abort_IT+0xce>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8086 	beq.w	8005f1c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2204      	movs	r2, #4
 8005e14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a2f      	ldr	r2, [pc, #188]	@ (8005edc <HAL_DMA_Abort_IT+0x1a0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d04a      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a2e      	ldr	r2, [pc, #184]	@ (8005ee0 <HAL_DMA_Abort_IT+0x1a4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d045      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a2c      	ldr	r2, [pc, #176]	@ (8005ee4 <HAL_DMA_Abort_IT+0x1a8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d040      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a2b      	ldr	r2, [pc, #172]	@ (8005ee8 <HAL_DMA_Abort_IT+0x1ac>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d03b      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a29      	ldr	r2, [pc, #164]	@ (8005eec <HAL_DMA_Abort_IT+0x1b0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d036      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a28      	ldr	r2, [pc, #160]	@ (8005ef0 <HAL_DMA_Abort_IT+0x1b4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d031      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a26      	ldr	r2, [pc, #152]	@ (8005ef4 <HAL_DMA_Abort_IT+0x1b8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d02c      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a25      	ldr	r2, [pc, #148]	@ (8005ef8 <HAL_DMA_Abort_IT+0x1bc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d027      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a23      	ldr	r2, [pc, #140]	@ (8005efc <HAL_DMA_Abort_IT+0x1c0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d022      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a22      	ldr	r2, [pc, #136]	@ (8005f00 <HAL_DMA_Abort_IT+0x1c4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d01d      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a20      	ldr	r2, [pc, #128]	@ (8005f04 <HAL_DMA_Abort_IT+0x1c8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d018      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005f08 <HAL_DMA_Abort_IT+0x1cc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d013      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1d      	ldr	r2, [pc, #116]	@ (8005f0c <HAL_DMA_Abort_IT+0x1d0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00e      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005f10 <HAL_DMA_Abort_IT+0x1d4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d009      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8005f14 <HAL_DMA_Abort_IT+0x1d8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d004      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a19      	ldr	r2, [pc, #100]	@ (8005f18 <HAL_DMA_Abort_IT+0x1dc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d108      	bne.n	8005eca <HAL_DMA_Abort_IT+0x18e>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0201 	bic.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	e178      	b.n	80061bc <HAL_DMA_Abort_IT+0x480>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0201 	bic.w	r2, r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	e16f      	b.n	80061bc <HAL_DMA_Abort_IT+0x480>
 8005edc:	40020010 	.word	0x40020010
 8005ee0:	40020028 	.word	0x40020028
 8005ee4:	40020040 	.word	0x40020040
 8005ee8:	40020058 	.word	0x40020058
 8005eec:	40020070 	.word	0x40020070
 8005ef0:	40020088 	.word	0x40020088
 8005ef4:	400200a0 	.word	0x400200a0
 8005ef8:	400200b8 	.word	0x400200b8
 8005efc:	40020410 	.word	0x40020410
 8005f00:	40020428 	.word	0x40020428
 8005f04:	40020440 	.word	0x40020440
 8005f08:	40020458 	.word	0x40020458
 8005f0c:	40020470 	.word	0x40020470
 8005f10:	40020488 	.word	0x40020488
 8005f14:	400204a0 	.word	0x400204a0
 8005f18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 020e 	bic.w	r2, r2, #14
 8005f2a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a6c      	ldr	r2, [pc, #432]	@ (80060e4 <HAL_DMA_Abort_IT+0x3a8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d04a      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a6b      	ldr	r2, [pc, #428]	@ (80060e8 <HAL_DMA_Abort_IT+0x3ac>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d045      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a69      	ldr	r2, [pc, #420]	@ (80060ec <HAL_DMA_Abort_IT+0x3b0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d040      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a68      	ldr	r2, [pc, #416]	@ (80060f0 <HAL_DMA_Abort_IT+0x3b4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d03b      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a66      	ldr	r2, [pc, #408]	@ (80060f4 <HAL_DMA_Abort_IT+0x3b8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d036      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a65      	ldr	r2, [pc, #404]	@ (80060f8 <HAL_DMA_Abort_IT+0x3bc>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d031      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a63      	ldr	r2, [pc, #396]	@ (80060fc <HAL_DMA_Abort_IT+0x3c0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d02c      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a62      	ldr	r2, [pc, #392]	@ (8006100 <HAL_DMA_Abort_IT+0x3c4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d027      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a60      	ldr	r2, [pc, #384]	@ (8006104 <HAL_DMA_Abort_IT+0x3c8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d022      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a5f      	ldr	r2, [pc, #380]	@ (8006108 <HAL_DMA_Abort_IT+0x3cc>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d01d      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a5d      	ldr	r2, [pc, #372]	@ (800610c <HAL_DMA_Abort_IT+0x3d0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d018      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a5c      	ldr	r2, [pc, #368]	@ (8006110 <HAL_DMA_Abort_IT+0x3d4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d013      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a5a      	ldr	r2, [pc, #360]	@ (8006114 <HAL_DMA_Abort_IT+0x3d8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00e      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a59      	ldr	r2, [pc, #356]	@ (8006118 <HAL_DMA_Abort_IT+0x3dc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d009      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a57      	ldr	r2, [pc, #348]	@ (800611c <HAL_DMA_Abort_IT+0x3e0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d004      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a56      	ldr	r2, [pc, #344]	@ (8006120 <HAL_DMA_Abort_IT+0x3e4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d108      	bne.n	8005fde <HAL_DMA_Abort_IT+0x2a2>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0201 	bic.w	r2, r2, #1
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	e007      	b.n	8005fee <HAL_DMA_Abort_IT+0x2b2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0201 	bic.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a3c      	ldr	r2, [pc, #240]	@ (80060e4 <HAL_DMA_Abort_IT+0x3a8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d072      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a3a      	ldr	r2, [pc, #232]	@ (80060e8 <HAL_DMA_Abort_IT+0x3ac>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d06d      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a39      	ldr	r2, [pc, #228]	@ (80060ec <HAL_DMA_Abort_IT+0x3b0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d068      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a37      	ldr	r2, [pc, #220]	@ (80060f0 <HAL_DMA_Abort_IT+0x3b4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d063      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a36      	ldr	r2, [pc, #216]	@ (80060f4 <HAL_DMA_Abort_IT+0x3b8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d05e      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a34      	ldr	r2, [pc, #208]	@ (80060f8 <HAL_DMA_Abort_IT+0x3bc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d059      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a33      	ldr	r2, [pc, #204]	@ (80060fc <HAL_DMA_Abort_IT+0x3c0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d054      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a31      	ldr	r2, [pc, #196]	@ (8006100 <HAL_DMA_Abort_IT+0x3c4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d04f      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a30      	ldr	r2, [pc, #192]	@ (8006104 <HAL_DMA_Abort_IT+0x3c8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d04a      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a2e      	ldr	r2, [pc, #184]	@ (8006108 <HAL_DMA_Abort_IT+0x3cc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d045      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a2d      	ldr	r2, [pc, #180]	@ (800610c <HAL_DMA_Abort_IT+0x3d0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d040      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a2b      	ldr	r2, [pc, #172]	@ (8006110 <HAL_DMA_Abort_IT+0x3d4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d03b      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a2a      	ldr	r2, [pc, #168]	@ (8006114 <HAL_DMA_Abort_IT+0x3d8>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d036      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a28      	ldr	r2, [pc, #160]	@ (8006118 <HAL_DMA_Abort_IT+0x3dc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d031      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a27      	ldr	r2, [pc, #156]	@ (800611c <HAL_DMA_Abort_IT+0x3e0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d02c      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a25      	ldr	r2, [pc, #148]	@ (8006120 <HAL_DMA_Abort_IT+0x3e4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d027      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a24      	ldr	r2, [pc, #144]	@ (8006124 <HAL_DMA_Abort_IT+0x3e8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d022      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a22      	ldr	r2, [pc, #136]	@ (8006128 <HAL_DMA_Abort_IT+0x3ec>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d01d      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a21      	ldr	r2, [pc, #132]	@ (800612c <HAL_DMA_Abort_IT+0x3f0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d018      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1f      	ldr	r2, [pc, #124]	@ (8006130 <HAL_DMA_Abort_IT+0x3f4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d013      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006134 <HAL_DMA_Abort_IT+0x3f8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00e      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006138 <HAL_DMA_Abort_IT+0x3fc>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d009      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1b      	ldr	r2, [pc, #108]	@ (800613c <HAL_DMA_Abort_IT+0x400>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d004      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a19      	ldr	r2, [pc, #100]	@ (8006140 <HAL_DMA_Abort_IT+0x404>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d132      	bne.n	8006144 <HAL_DMA_Abort_IT+0x408>
 80060de:	2301      	movs	r3, #1
 80060e0:	e031      	b.n	8006146 <HAL_DMA_Abort_IT+0x40a>
 80060e2:	bf00      	nop
 80060e4:	40020010 	.word	0x40020010
 80060e8:	40020028 	.word	0x40020028
 80060ec:	40020040 	.word	0x40020040
 80060f0:	40020058 	.word	0x40020058
 80060f4:	40020070 	.word	0x40020070
 80060f8:	40020088 	.word	0x40020088
 80060fc:	400200a0 	.word	0x400200a0
 8006100:	400200b8 	.word	0x400200b8
 8006104:	40020410 	.word	0x40020410
 8006108:	40020428 	.word	0x40020428
 800610c:	40020440 	.word	0x40020440
 8006110:	40020458 	.word	0x40020458
 8006114:	40020470 	.word	0x40020470
 8006118:	40020488 	.word	0x40020488
 800611c:	400204a0 	.word	0x400204a0
 8006120:	400204b8 	.word	0x400204b8
 8006124:	58025408 	.word	0x58025408
 8006128:	5802541c 	.word	0x5802541c
 800612c:	58025430 	.word	0x58025430
 8006130:	58025444 	.word	0x58025444
 8006134:	58025458 	.word	0x58025458
 8006138:	5802546c 	.word	0x5802546c
 800613c:	58025480 	.word	0x58025480
 8006140:	58025494 	.word	0x58025494
 8006144:	2300      	movs	r3, #0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d028      	beq.n	800619c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006154:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006158:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800615e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	2201      	movs	r2, #1
 800616a:	409a      	lsls	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006178:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00c      	beq.n	800619c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800618c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006190:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800619a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop

080061c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08a      	sub	sp, #40	@ 0x28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80061d4:	4b67      	ldr	r3, [pc, #412]	@ (8006374 <HAL_DMA_IRQHandler+0x1ac>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a67      	ldr	r2, [pc, #412]	@ (8006378 <HAL_DMA_IRQHandler+0x1b0>)
 80061da:	fba2 2303 	umull	r2, r3, r2, r3
 80061de:	0a9b      	lsrs	r3, r3, #10
 80061e0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a5f      	ldr	r2, [pc, #380]	@ (800637c <HAL_DMA_IRQHandler+0x1b4>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d04a      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a5d      	ldr	r2, [pc, #372]	@ (8006380 <HAL_DMA_IRQHandler+0x1b8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d045      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a5c      	ldr	r2, [pc, #368]	@ (8006384 <HAL_DMA_IRQHandler+0x1bc>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d040      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a5a      	ldr	r2, [pc, #360]	@ (8006388 <HAL_DMA_IRQHandler+0x1c0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d03b      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a59      	ldr	r2, [pc, #356]	@ (800638c <HAL_DMA_IRQHandler+0x1c4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d036      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a57      	ldr	r2, [pc, #348]	@ (8006390 <HAL_DMA_IRQHandler+0x1c8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d031      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a56      	ldr	r2, [pc, #344]	@ (8006394 <HAL_DMA_IRQHandler+0x1cc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d02c      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a54      	ldr	r2, [pc, #336]	@ (8006398 <HAL_DMA_IRQHandler+0x1d0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d027      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a53      	ldr	r2, [pc, #332]	@ (800639c <HAL_DMA_IRQHandler+0x1d4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d022      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a51      	ldr	r2, [pc, #324]	@ (80063a0 <HAL_DMA_IRQHandler+0x1d8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d01d      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a50      	ldr	r2, [pc, #320]	@ (80063a4 <HAL_DMA_IRQHandler+0x1dc>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d018      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a4e      	ldr	r2, [pc, #312]	@ (80063a8 <HAL_DMA_IRQHandler+0x1e0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a4d      	ldr	r2, [pc, #308]	@ (80063ac <HAL_DMA_IRQHandler+0x1e4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00e      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a4b      	ldr	r2, [pc, #300]	@ (80063b0 <HAL_DMA_IRQHandler+0x1e8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d009      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a4a      	ldr	r2, [pc, #296]	@ (80063b4 <HAL_DMA_IRQHandler+0x1ec>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a48      	ldr	r2, [pc, #288]	@ (80063b8 <HAL_DMA_IRQHandler+0x1f0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d101      	bne.n	800629e <HAL_DMA_IRQHandler+0xd6>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <HAL_DMA_IRQHandler+0xd8>
 800629e:	2300      	movs	r3, #0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 842b 	beq.w	8006afc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062aa:	f003 031f 	and.w	r3, r3, #31
 80062ae:	2208      	movs	r2, #8
 80062b0:	409a      	lsls	r2, r3
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	4013      	ands	r3, r2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80a2 	beq.w	8006400 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a2e      	ldr	r2, [pc, #184]	@ (800637c <HAL_DMA_IRQHandler+0x1b4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d04a      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006380 <HAL_DMA_IRQHandler+0x1b8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d045      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a2b      	ldr	r2, [pc, #172]	@ (8006384 <HAL_DMA_IRQHandler+0x1bc>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d040      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2a      	ldr	r2, [pc, #168]	@ (8006388 <HAL_DMA_IRQHandler+0x1c0>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d03b      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a28      	ldr	r2, [pc, #160]	@ (800638c <HAL_DMA_IRQHandler+0x1c4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d036      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a27      	ldr	r2, [pc, #156]	@ (8006390 <HAL_DMA_IRQHandler+0x1c8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d031      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a25      	ldr	r2, [pc, #148]	@ (8006394 <HAL_DMA_IRQHandler+0x1cc>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d02c      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a24      	ldr	r2, [pc, #144]	@ (8006398 <HAL_DMA_IRQHandler+0x1d0>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d027      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a22      	ldr	r2, [pc, #136]	@ (800639c <HAL_DMA_IRQHandler+0x1d4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d022      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a21      	ldr	r2, [pc, #132]	@ (80063a0 <HAL_DMA_IRQHandler+0x1d8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d01d      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a1f      	ldr	r2, [pc, #124]	@ (80063a4 <HAL_DMA_IRQHandler+0x1dc>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d018      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a1e      	ldr	r2, [pc, #120]	@ (80063a8 <HAL_DMA_IRQHandler+0x1e0>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d013      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a1c      	ldr	r2, [pc, #112]	@ (80063ac <HAL_DMA_IRQHandler+0x1e4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00e      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a1b      	ldr	r2, [pc, #108]	@ (80063b0 <HAL_DMA_IRQHandler+0x1e8>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d009      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a19      	ldr	r2, [pc, #100]	@ (80063b4 <HAL_DMA_IRQHandler+0x1ec>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d004      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a18      	ldr	r2, [pc, #96]	@ (80063b8 <HAL_DMA_IRQHandler+0x1f0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d12f      	bne.n	80063bc <HAL_DMA_IRQHandler+0x1f4>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	bf14      	ite	ne
 800636a:	2301      	movne	r3, #1
 800636c:	2300      	moveq	r3, #0
 800636e:	b2db      	uxtb	r3, r3
 8006370:	e02e      	b.n	80063d0 <HAL_DMA_IRQHandler+0x208>
 8006372:	bf00      	nop
 8006374:	240000b4 	.word	0x240000b4
 8006378:	1b4e81b5 	.word	0x1b4e81b5
 800637c:	40020010 	.word	0x40020010
 8006380:	40020028 	.word	0x40020028
 8006384:	40020040 	.word	0x40020040
 8006388:	40020058 	.word	0x40020058
 800638c:	40020070 	.word	0x40020070
 8006390:	40020088 	.word	0x40020088
 8006394:	400200a0 	.word	0x400200a0
 8006398:	400200b8 	.word	0x400200b8
 800639c:	40020410 	.word	0x40020410
 80063a0:	40020428 	.word	0x40020428
 80063a4:	40020440 	.word	0x40020440
 80063a8:	40020458 	.word	0x40020458
 80063ac:	40020470 	.word	0x40020470
 80063b0:	40020488 	.word	0x40020488
 80063b4:	400204a0 	.word	0x400204a0
 80063b8:	400204b8 	.word	0x400204b8
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	bf14      	ite	ne
 80063ca:	2301      	movne	r3, #1
 80063cc:	2300      	moveq	r3, #0
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d015      	beq.n	8006400 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0204 	bic.w	r2, r2, #4
 80063e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063e8:	f003 031f 	and.w	r3, r3, #31
 80063ec:	2208      	movs	r2, #8
 80063ee:	409a      	lsls	r2, r3
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063f8:	f043 0201 	orr.w	r2, r3, #1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006404:	f003 031f 	and.w	r3, r3, #31
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	fa22 f303 	lsr.w	r3, r2, r3
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d06e      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a69      	ldr	r2, [pc, #420]	@ (80065c0 <HAL_DMA_IRQHandler+0x3f8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d04a      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a67      	ldr	r2, [pc, #412]	@ (80065c4 <HAL_DMA_IRQHandler+0x3fc>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d045      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a66      	ldr	r2, [pc, #408]	@ (80065c8 <HAL_DMA_IRQHandler+0x400>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d040      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a64      	ldr	r2, [pc, #400]	@ (80065cc <HAL_DMA_IRQHandler+0x404>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d03b      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a63      	ldr	r2, [pc, #396]	@ (80065d0 <HAL_DMA_IRQHandler+0x408>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d036      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a61      	ldr	r2, [pc, #388]	@ (80065d4 <HAL_DMA_IRQHandler+0x40c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d031      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a60      	ldr	r2, [pc, #384]	@ (80065d8 <HAL_DMA_IRQHandler+0x410>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d02c      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a5e      	ldr	r2, [pc, #376]	@ (80065dc <HAL_DMA_IRQHandler+0x414>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d027      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a5d      	ldr	r2, [pc, #372]	@ (80065e0 <HAL_DMA_IRQHandler+0x418>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d022      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a5b      	ldr	r2, [pc, #364]	@ (80065e4 <HAL_DMA_IRQHandler+0x41c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01d      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a5a      	ldr	r2, [pc, #360]	@ (80065e8 <HAL_DMA_IRQHandler+0x420>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d018      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a58      	ldr	r2, [pc, #352]	@ (80065ec <HAL_DMA_IRQHandler+0x424>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a57      	ldr	r2, [pc, #348]	@ (80065f0 <HAL_DMA_IRQHandler+0x428>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a55      	ldr	r2, [pc, #340]	@ (80065f4 <HAL_DMA_IRQHandler+0x42c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a54      	ldr	r2, [pc, #336]	@ (80065f8 <HAL_DMA_IRQHandler+0x430>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a52      	ldr	r2, [pc, #328]	@ (80065fc <HAL_DMA_IRQHandler+0x434>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d10a      	bne.n	80064cc <HAL_DMA_IRQHandler+0x304>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	bf14      	ite	ne
 80064c4:	2301      	movne	r3, #1
 80064c6:	2300      	moveq	r3, #0
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	e003      	b.n	80064d4 <HAL_DMA_IRQHandler+0x30c>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2300      	movs	r3, #0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00d      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	2201      	movs	r2, #1
 80064e2:	409a      	lsls	r2, r3
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ec:	f043 0202 	orr.w	r2, r3, #2
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064f8:	f003 031f 	and.w	r3, r3, #31
 80064fc:	2204      	movs	r2, #4
 80064fe:	409a      	lsls	r2, r3
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	4013      	ands	r3, r2
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 808f 	beq.w	8006628 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a2c      	ldr	r2, [pc, #176]	@ (80065c0 <HAL_DMA_IRQHandler+0x3f8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d04a      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a2a      	ldr	r2, [pc, #168]	@ (80065c4 <HAL_DMA_IRQHandler+0x3fc>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d045      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a29      	ldr	r2, [pc, #164]	@ (80065c8 <HAL_DMA_IRQHandler+0x400>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d040      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a27      	ldr	r2, [pc, #156]	@ (80065cc <HAL_DMA_IRQHandler+0x404>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d03b      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a26      	ldr	r2, [pc, #152]	@ (80065d0 <HAL_DMA_IRQHandler+0x408>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d036      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a24      	ldr	r2, [pc, #144]	@ (80065d4 <HAL_DMA_IRQHandler+0x40c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d031      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a23      	ldr	r2, [pc, #140]	@ (80065d8 <HAL_DMA_IRQHandler+0x410>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d02c      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a21      	ldr	r2, [pc, #132]	@ (80065dc <HAL_DMA_IRQHandler+0x414>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d027      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a20      	ldr	r2, [pc, #128]	@ (80065e0 <HAL_DMA_IRQHandler+0x418>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d022      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1e      	ldr	r2, [pc, #120]	@ (80065e4 <HAL_DMA_IRQHandler+0x41c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d01d      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1d      	ldr	r2, [pc, #116]	@ (80065e8 <HAL_DMA_IRQHandler+0x420>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d018      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a1b      	ldr	r2, [pc, #108]	@ (80065ec <HAL_DMA_IRQHandler+0x424>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d013      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1a      	ldr	r2, [pc, #104]	@ (80065f0 <HAL_DMA_IRQHandler+0x428>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d00e      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a18      	ldr	r2, [pc, #96]	@ (80065f4 <HAL_DMA_IRQHandler+0x42c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d009      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a17      	ldr	r2, [pc, #92]	@ (80065f8 <HAL_DMA_IRQHandler+0x430>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d004      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a15      	ldr	r2, [pc, #84]	@ (80065fc <HAL_DMA_IRQHandler+0x434>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d12a      	bne.n	8006600 <HAL_DMA_IRQHandler+0x438>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	bf14      	ite	ne
 80065b8:	2301      	movne	r3, #1
 80065ba:	2300      	moveq	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	e023      	b.n	8006608 <HAL_DMA_IRQHandler+0x440>
 80065c0:	40020010 	.word	0x40020010
 80065c4:	40020028 	.word	0x40020028
 80065c8:	40020040 	.word	0x40020040
 80065cc:	40020058 	.word	0x40020058
 80065d0:	40020070 	.word	0x40020070
 80065d4:	40020088 	.word	0x40020088
 80065d8:	400200a0 	.word	0x400200a0
 80065dc:	400200b8 	.word	0x400200b8
 80065e0:	40020410 	.word	0x40020410
 80065e4:	40020428 	.word	0x40020428
 80065e8:	40020440 	.word	0x40020440
 80065ec:	40020458 	.word	0x40020458
 80065f0:	40020470 	.word	0x40020470
 80065f4:	40020488 	.word	0x40020488
 80065f8:	400204a0 	.word	0x400204a0
 80065fc:	400204b8 	.word	0x400204b8
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2300      	movs	r3, #0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00d      	beq.n	8006628 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006610:	f003 031f 	and.w	r3, r3, #31
 8006614:	2204      	movs	r2, #4
 8006616:	409a      	lsls	r2, r3
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006620:	f043 0204 	orr.w	r2, r3, #4
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	2210      	movs	r2, #16
 8006632:	409a      	lsls	r2, r3
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	4013      	ands	r3, r2
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 80a6 	beq.w	800678a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a85      	ldr	r2, [pc, #532]	@ (8006858 <HAL_DMA_IRQHandler+0x690>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d04a      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a83      	ldr	r2, [pc, #524]	@ (800685c <HAL_DMA_IRQHandler+0x694>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d045      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a82      	ldr	r2, [pc, #520]	@ (8006860 <HAL_DMA_IRQHandler+0x698>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d040      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a80      	ldr	r2, [pc, #512]	@ (8006864 <HAL_DMA_IRQHandler+0x69c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d03b      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a7f      	ldr	r2, [pc, #508]	@ (8006868 <HAL_DMA_IRQHandler+0x6a0>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d036      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a7d      	ldr	r2, [pc, #500]	@ (800686c <HAL_DMA_IRQHandler+0x6a4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d031      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a7c      	ldr	r2, [pc, #496]	@ (8006870 <HAL_DMA_IRQHandler+0x6a8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d02c      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a7a      	ldr	r2, [pc, #488]	@ (8006874 <HAL_DMA_IRQHandler+0x6ac>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d027      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a79      	ldr	r2, [pc, #484]	@ (8006878 <HAL_DMA_IRQHandler+0x6b0>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d022      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a77      	ldr	r2, [pc, #476]	@ (800687c <HAL_DMA_IRQHandler+0x6b4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d01d      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a76      	ldr	r2, [pc, #472]	@ (8006880 <HAL_DMA_IRQHandler+0x6b8>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d018      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a74      	ldr	r2, [pc, #464]	@ (8006884 <HAL_DMA_IRQHandler+0x6bc>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d013      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a73      	ldr	r2, [pc, #460]	@ (8006888 <HAL_DMA_IRQHandler+0x6c0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00e      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a71      	ldr	r2, [pc, #452]	@ (800688c <HAL_DMA_IRQHandler+0x6c4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d009      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a70      	ldr	r2, [pc, #448]	@ (8006890 <HAL_DMA_IRQHandler+0x6c8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d004      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a6e      	ldr	r2, [pc, #440]	@ (8006894 <HAL_DMA_IRQHandler+0x6cc>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d10a      	bne.n	80066f4 <HAL_DMA_IRQHandler+0x52c>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	bf14      	ite	ne
 80066ec:	2301      	movne	r3, #1
 80066ee:	2300      	moveq	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	e009      	b.n	8006708 <HAL_DMA_IRQHandler+0x540>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0304 	and.w	r3, r3, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bf14      	ite	ne
 8006702:	2301      	movne	r3, #1
 8006704:	2300      	moveq	r3, #0
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d03e      	beq.n	800678a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006710:	f003 031f 	and.w	r3, r3, #31
 8006714:	2210      	movs	r2, #16
 8006716:	409a      	lsls	r2, r3
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d018      	beq.n	800675c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d108      	bne.n	800674a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673c:	2b00      	cmp	r3, #0
 800673e:	d024      	beq.n	800678a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	4798      	blx	r3
 8006748:	e01f      	b.n	800678a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800674e:	2b00      	cmp	r3, #0
 8006750:	d01b      	beq.n	800678a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
 800675a:	e016      	b.n	800678a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006766:	2b00      	cmp	r3, #0
 8006768:	d107      	bne.n	800677a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0208 	bic.w	r2, r2, #8
 8006778:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800678e:	f003 031f 	and.w	r3, r3, #31
 8006792:	2220      	movs	r2, #32
 8006794:	409a      	lsls	r2, r3
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	4013      	ands	r3, r2
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 8110 	beq.w	80069c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006858 <HAL_DMA_IRQHandler+0x690>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d04a      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a2b      	ldr	r2, [pc, #172]	@ (800685c <HAL_DMA_IRQHandler+0x694>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d045      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a29      	ldr	r2, [pc, #164]	@ (8006860 <HAL_DMA_IRQHandler+0x698>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d040      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a28      	ldr	r2, [pc, #160]	@ (8006864 <HAL_DMA_IRQHandler+0x69c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d03b      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a26      	ldr	r2, [pc, #152]	@ (8006868 <HAL_DMA_IRQHandler+0x6a0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d036      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a25      	ldr	r2, [pc, #148]	@ (800686c <HAL_DMA_IRQHandler+0x6a4>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d031      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a23      	ldr	r2, [pc, #140]	@ (8006870 <HAL_DMA_IRQHandler+0x6a8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d02c      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a22      	ldr	r2, [pc, #136]	@ (8006874 <HAL_DMA_IRQHandler+0x6ac>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d027      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a20      	ldr	r2, [pc, #128]	@ (8006878 <HAL_DMA_IRQHandler+0x6b0>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d022      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1f      	ldr	r2, [pc, #124]	@ (800687c <HAL_DMA_IRQHandler+0x6b4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d01d      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1d      	ldr	r2, [pc, #116]	@ (8006880 <HAL_DMA_IRQHandler+0x6b8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d018      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a1c      	ldr	r2, [pc, #112]	@ (8006884 <HAL_DMA_IRQHandler+0x6bc>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d013      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a1a      	ldr	r2, [pc, #104]	@ (8006888 <HAL_DMA_IRQHandler+0x6c0>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00e      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a19      	ldr	r2, [pc, #100]	@ (800688c <HAL_DMA_IRQHandler+0x6c4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d009      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a17      	ldr	r2, [pc, #92]	@ (8006890 <HAL_DMA_IRQHandler+0x6c8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d004      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a16      	ldr	r2, [pc, #88]	@ (8006894 <HAL_DMA_IRQHandler+0x6cc>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d12b      	bne.n	8006898 <HAL_DMA_IRQHandler+0x6d0>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0310 	and.w	r3, r3, #16
 800684a:	2b00      	cmp	r3, #0
 800684c:	bf14      	ite	ne
 800684e:	2301      	movne	r3, #1
 8006850:	2300      	moveq	r3, #0
 8006852:	b2db      	uxtb	r3, r3
 8006854:	e02a      	b.n	80068ac <HAL_DMA_IRQHandler+0x6e4>
 8006856:	bf00      	nop
 8006858:	40020010 	.word	0x40020010
 800685c:	40020028 	.word	0x40020028
 8006860:	40020040 	.word	0x40020040
 8006864:	40020058 	.word	0x40020058
 8006868:	40020070 	.word	0x40020070
 800686c:	40020088 	.word	0x40020088
 8006870:	400200a0 	.word	0x400200a0
 8006874:	400200b8 	.word	0x400200b8
 8006878:	40020410 	.word	0x40020410
 800687c:	40020428 	.word	0x40020428
 8006880:	40020440 	.word	0x40020440
 8006884:	40020458 	.word	0x40020458
 8006888:	40020470 	.word	0x40020470
 800688c:	40020488 	.word	0x40020488
 8006890:	400204a0 	.word	0x400204a0
 8006894:	400204b8 	.word	0x400204b8
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	bf14      	ite	ne
 80068a6:	2301      	movne	r3, #1
 80068a8:	2300      	moveq	r3, #0
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 8087 	beq.w	80069c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068b6:	f003 031f 	and.w	r3, r3, #31
 80068ba:	2220      	movs	r2, #32
 80068bc:	409a      	lsls	r2, r3
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d139      	bne.n	8006942 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 0216 	bic.w	r2, r2, #22
 80068dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	695a      	ldr	r2, [r3, #20]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d103      	bne.n	80068fe <HAL_DMA_IRQHandler+0x736>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d007      	beq.n	800690e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0208 	bic.w	r2, r2, #8
 800690c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006912:	f003 031f 	and.w	r3, r3, #31
 8006916:	223f      	movs	r2, #63	@ 0x3f
 8006918:	409a      	lsls	r2, r3
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 834a 	beq.w	8006fcc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	4798      	blx	r3
          }
          return;
 8006940:	e344      	b.n	8006fcc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d018      	beq.n	8006982 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d108      	bne.n	8006970 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006962:	2b00      	cmp	r3, #0
 8006964:	d02c      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	4798      	blx	r3
 800696e:	e027      	b.n	80069c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006974:	2b00      	cmp	r3, #0
 8006976:	d023      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	4798      	blx	r3
 8006980:	e01e      	b.n	80069c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10f      	bne.n	80069b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 0210 	bic.w	r2, r2, #16
 800699e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8306 	beq.w	8006fd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 8088 	beq.w	8006ae8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2204      	movs	r2, #4
 80069dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a7a      	ldr	r2, [pc, #488]	@ (8006bd0 <HAL_DMA_IRQHandler+0xa08>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d04a      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a79      	ldr	r2, [pc, #484]	@ (8006bd4 <HAL_DMA_IRQHandler+0xa0c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d045      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a77      	ldr	r2, [pc, #476]	@ (8006bd8 <HAL_DMA_IRQHandler+0xa10>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d040      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a76      	ldr	r2, [pc, #472]	@ (8006bdc <HAL_DMA_IRQHandler+0xa14>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d03b      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a74      	ldr	r2, [pc, #464]	@ (8006be0 <HAL_DMA_IRQHandler+0xa18>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d036      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a73      	ldr	r2, [pc, #460]	@ (8006be4 <HAL_DMA_IRQHandler+0xa1c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d031      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a71      	ldr	r2, [pc, #452]	@ (8006be8 <HAL_DMA_IRQHandler+0xa20>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d02c      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a70      	ldr	r2, [pc, #448]	@ (8006bec <HAL_DMA_IRQHandler+0xa24>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d027      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a6e      	ldr	r2, [pc, #440]	@ (8006bf0 <HAL_DMA_IRQHandler+0xa28>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d022      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a6d      	ldr	r2, [pc, #436]	@ (8006bf4 <HAL_DMA_IRQHandler+0xa2c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d01d      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a6b      	ldr	r2, [pc, #428]	@ (8006bf8 <HAL_DMA_IRQHandler+0xa30>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d018      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a6a      	ldr	r2, [pc, #424]	@ (8006bfc <HAL_DMA_IRQHandler+0xa34>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d013      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a68      	ldr	r2, [pc, #416]	@ (8006c00 <HAL_DMA_IRQHandler+0xa38>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00e      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a67      	ldr	r2, [pc, #412]	@ (8006c04 <HAL_DMA_IRQHandler+0xa3c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d009      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a65      	ldr	r2, [pc, #404]	@ (8006c08 <HAL_DMA_IRQHandler+0xa40>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d004      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a64      	ldr	r2, [pc, #400]	@ (8006c0c <HAL_DMA_IRQHandler+0xa44>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d108      	bne.n	8006a92 <HAL_DMA_IRQHandler+0x8ca>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0201 	bic.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	e007      	b.n	8006aa2 <HAL_DMA_IRQHandler+0x8da>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0201 	bic.w	r2, r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d307      	bcc.n	8006abe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1f2      	bne.n	8006aa2 <HAL_DMA_IRQHandler+0x8da>
 8006abc:	e000      	b.n	8006ac0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006abe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d004      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2203      	movs	r2, #3
 8006ad2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006ad6:	e003      	b.n	8006ae0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 8272 	beq.w	8006fd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	4798      	blx	r3
 8006afa:	e26c      	b.n	8006fd6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a43      	ldr	r2, [pc, #268]	@ (8006c10 <HAL_DMA_IRQHandler+0xa48>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d022      	beq.n	8006b4c <HAL_DMA_IRQHandler+0x984>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a42      	ldr	r2, [pc, #264]	@ (8006c14 <HAL_DMA_IRQHandler+0xa4c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d01d      	beq.n	8006b4c <HAL_DMA_IRQHandler+0x984>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a40      	ldr	r2, [pc, #256]	@ (8006c18 <HAL_DMA_IRQHandler+0xa50>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d018      	beq.n	8006b4c <HAL_DMA_IRQHandler+0x984>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8006c1c <HAL_DMA_IRQHandler+0xa54>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d013      	beq.n	8006b4c <HAL_DMA_IRQHandler+0x984>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a3d      	ldr	r2, [pc, #244]	@ (8006c20 <HAL_DMA_IRQHandler+0xa58>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00e      	beq.n	8006b4c <HAL_DMA_IRQHandler+0x984>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a3c      	ldr	r2, [pc, #240]	@ (8006c24 <HAL_DMA_IRQHandler+0xa5c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d009      	beq.n	8006b4c <HAL_DMA_IRQHandler+0x984>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a3a      	ldr	r2, [pc, #232]	@ (8006c28 <HAL_DMA_IRQHandler+0xa60>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d004      	beq.n	8006b4c <HAL_DMA_IRQHandler+0x984>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a39      	ldr	r2, [pc, #228]	@ (8006c2c <HAL_DMA_IRQHandler+0xa64>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d101      	bne.n	8006b50 <HAL_DMA_IRQHandler+0x988>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e000      	b.n	8006b52 <HAL_DMA_IRQHandler+0x98a>
 8006b50:	2300      	movs	r3, #0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 823f 	beq.w	8006fd6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b64:	f003 031f 	and.w	r3, r3, #31
 8006b68:	2204      	movs	r2, #4
 8006b6a:	409a      	lsls	r2, r3
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	4013      	ands	r3, r2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 80cd 	beq.w	8006d10 <HAL_DMA_IRQHandler+0xb48>
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 80c7 	beq.w	8006d10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b86:	f003 031f 	and.w	r3, r3, #31
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	409a      	lsls	r2, r3
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d049      	beq.n	8006c30 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d109      	bne.n	8006bba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 8210 	beq.w	8006fd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bb8:	e20a      	b.n	8006fd0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 8206 	beq.w	8006fd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bcc:	e200      	b.n	8006fd0 <HAL_DMA_IRQHandler+0xe08>
 8006bce:	bf00      	nop
 8006bd0:	40020010 	.word	0x40020010
 8006bd4:	40020028 	.word	0x40020028
 8006bd8:	40020040 	.word	0x40020040
 8006bdc:	40020058 	.word	0x40020058
 8006be0:	40020070 	.word	0x40020070
 8006be4:	40020088 	.word	0x40020088
 8006be8:	400200a0 	.word	0x400200a0
 8006bec:	400200b8 	.word	0x400200b8
 8006bf0:	40020410 	.word	0x40020410
 8006bf4:	40020428 	.word	0x40020428
 8006bf8:	40020440 	.word	0x40020440
 8006bfc:	40020458 	.word	0x40020458
 8006c00:	40020470 	.word	0x40020470
 8006c04:	40020488 	.word	0x40020488
 8006c08:	400204a0 	.word	0x400204a0
 8006c0c:	400204b8 	.word	0x400204b8
 8006c10:	58025408 	.word	0x58025408
 8006c14:	5802541c 	.word	0x5802541c
 8006c18:	58025430 	.word	0x58025430
 8006c1c:	58025444 	.word	0x58025444
 8006c20:	58025458 	.word	0x58025458
 8006c24:	5802546c 	.word	0x5802546c
 8006c28:	58025480 	.word	0x58025480
 8006c2c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f003 0320 	and.w	r3, r3, #32
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d160      	bne.n	8006cfc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a7f      	ldr	r2, [pc, #508]	@ (8006e3c <HAL_DMA_IRQHandler+0xc74>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d04a      	beq.n	8006cda <HAL_DMA_IRQHandler+0xb12>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a7d      	ldr	r2, [pc, #500]	@ (8006e40 <HAL_DMA_IRQHandler+0xc78>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d045      	beq.n	8006cda <HAL_DMA_IRQHandler+0xb12>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a7c      	ldr	r2, [pc, #496]	@ (8006e44 <HAL_DMA_IRQHandler+0xc7c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d040      	beq.n	8006cda <HAL_DMA_IRQHandler+0xb12>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a7a      	ldr	r2, [pc, #488]	@ (8006e48 <HAL_DMA_IRQHandler+0xc80>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d03b      	beq.n	8006cda <HAL_DMA_IRQHandler+0xb12>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a79      	ldr	r2, [pc, #484]	@ (8006e4c <HAL_DMA_IRQHandler+0xc84>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d036      	beq.n	8006cda <HAL_DMA_IRQHandler+0xb12>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a77      	ldr	r2, [pc, #476]	@ (8006e50 <HAL_DMA_IRQHandler+0xc88>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d031      	beq.n	8006cda <HAL_DMA_IRQHandler+0xb12>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a76      	ldr	r2, [pc, #472]	@ (8006e54 <HAL_DMA_IRQHandler+0xc8c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d02c      	beq.n	8006cda <HAL_DMA_IRQHandler+0xb12>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a74      	ldr	r2, [pc, #464]	@ (8006e58 <HAL_DMA_IRQHandler+0xc90>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d027      	beq.n	8006cda <HAL_DMA_IRQHandler+0xb12>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a73      	ldr	r2, [pc, #460]	@ (8006e5c <HAL_DMA_IRQHandler+0xc94>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d022      	beq.n	8006cda <HAL_DMA_IRQHandler+0xb12>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a71      	ldr	r2, [pc, #452]	@ (8006e60 <HAL_DMA_IRQHandler+0xc98>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d01d      	beq.n	8006cda <HAL_DMA_IRQHandler+0xb12>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a70      	ldr	r2, [pc, #448]	@ (8006e64 <HAL_DMA_IRQHandler+0xc9c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d018      	beq.n	8006cda <HAL_DMA_IRQHandler+0xb12>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a6e      	ldr	r2, [pc, #440]	@ (8006e68 <HAL_DMA_IRQHandler+0xca0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d013      	beq.n	8006cda <HAL_DMA_IRQHandler+0xb12>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a6d      	ldr	r2, [pc, #436]	@ (8006e6c <HAL_DMA_IRQHandler+0xca4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00e      	beq.n	8006cda <HAL_DMA_IRQHandler+0xb12>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a6b      	ldr	r2, [pc, #428]	@ (8006e70 <HAL_DMA_IRQHandler+0xca8>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d009      	beq.n	8006cda <HAL_DMA_IRQHandler+0xb12>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a6a      	ldr	r2, [pc, #424]	@ (8006e74 <HAL_DMA_IRQHandler+0xcac>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d004      	beq.n	8006cda <HAL_DMA_IRQHandler+0xb12>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a68      	ldr	r2, [pc, #416]	@ (8006e78 <HAL_DMA_IRQHandler+0xcb0>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d108      	bne.n	8006cec <HAL_DMA_IRQHandler+0xb24>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0208 	bic.w	r2, r2, #8
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	e007      	b.n	8006cfc <HAL_DMA_IRQHandler+0xb34>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0204 	bic.w	r2, r2, #4
 8006cfa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 8165 	beq.w	8006fd0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d0e:	e15f      	b.n	8006fd0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d14:	f003 031f 	and.w	r3, r3, #31
 8006d18:	2202      	movs	r2, #2
 8006d1a:	409a      	lsls	r2, r3
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 80c5 	beq.w	8006eb0 <HAL_DMA_IRQHandler+0xce8>
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 80bf 	beq.w	8006eb0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d36:	f003 031f 	and.w	r3, r3, #31
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	409a      	lsls	r2, r3
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d018      	beq.n	8006d7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d109      	bne.n	8006d6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 813a 	beq.w	8006fd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d68:	e134      	b.n	8006fd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 8130 	beq.w	8006fd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d7c:	e12a      	b.n	8006fd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f003 0320 	and.w	r3, r3, #32
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f040 8089 	bne.w	8006e9c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8006e3c <HAL_DMA_IRQHandler+0xc74>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d04a      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xc62>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a29      	ldr	r2, [pc, #164]	@ (8006e40 <HAL_DMA_IRQHandler+0xc78>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d045      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xc62>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a28      	ldr	r2, [pc, #160]	@ (8006e44 <HAL_DMA_IRQHandler+0xc7c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d040      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xc62>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a26      	ldr	r2, [pc, #152]	@ (8006e48 <HAL_DMA_IRQHandler+0xc80>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d03b      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xc62>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a25      	ldr	r2, [pc, #148]	@ (8006e4c <HAL_DMA_IRQHandler+0xc84>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d036      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xc62>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a23      	ldr	r2, [pc, #140]	@ (8006e50 <HAL_DMA_IRQHandler+0xc88>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d031      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xc62>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a22      	ldr	r2, [pc, #136]	@ (8006e54 <HAL_DMA_IRQHandler+0xc8c>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d02c      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xc62>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a20      	ldr	r2, [pc, #128]	@ (8006e58 <HAL_DMA_IRQHandler+0xc90>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d027      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xc62>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a1f      	ldr	r2, [pc, #124]	@ (8006e5c <HAL_DMA_IRQHandler+0xc94>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d022      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xc62>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e60 <HAL_DMA_IRQHandler+0xc98>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d01d      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xc62>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1c      	ldr	r2, [pc, #112]	@ (8006e64 <HAL_DMA_IRQHandler+0xc9c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d018      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xc62>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8006e68 <HAL_DMA_IRQHandler+0xca0>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xc62>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a19      	ldr	r2, [pc, #100]	@ (8006e6c <HAL_DMA_IRQHandler+0xca4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00e      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xc62>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a17      	ldr	r2, [pc, #92]	@ (8006e70 <HAL_DMA_IRQHandler+0xca8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d009      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xc62>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a16      	ldr	r2, [pc, #88]	@ (8006e74 <HAL_DMA_IRQHandler+0xcac>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xc62>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a14      	ldr	r2, [pc, #80]	@ (8006e78 <HAL_DMA_IRQHandler+0xcb0>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d128      	bne.n	8006e7c <HAL_DMA_IRQHandler+0xcb4>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0214 	bic.w	r2, r2, #20
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	e027      	b.n	8006e8c <HAL_DMA_IRQHandler+0xcc4>
 8006e3c:	40020010 	.word	0x40020010
 8006e40:	40020028 	.word	0x40020028
 8006e44:	40020040 	.word	0x40020040
 8006e48:	40020058 	.word	0x40020058
 8006e4c:	40020070 	.word	0x40020070
 8006e50:	40020088 	.word	0x40020088
 8006e54:	400200a0 	.word	0x400200a0
 8006e58:	400200b8 	.word	0x400200b8
 8006e5c:	40020410 	.word	0x40020410
 8006e60:	40020428 	.word	0x40020428
 8006e64:	40020440 	.word	0x40020440
 8006e68:	40020458 	.word	0x40020458
 8006e6c:	40020470 	.word	0x40020470
 8006e70:	40020488 	.word	0x40020488
 8006e74:	400204a0 	.word	0x400204a0
 8006e78:	400204b8 	.word	0x400204b8
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 020a 	bic.w	r2, r2, #10
 8006e8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8097 	beq.w	8006fd4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eae:	e091      	b.n	8006fd4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eb4:	f003 031f 	and.w	r3, r3, #31
 8006eb8:	2208      	movs	r2, #8
 8006eba:	409a      	lsls	r2, r3
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 8088 	beq.w	8006fd6 <HAL_DMA_IRQHandler+0xe0e>
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 8082 	beq.w	8006fd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a41      	ldr	r2, [pc, #260]	@ (8006fdc <HAL_DMA_IRQHandler+0xe14>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d04a      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xdaa>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a3f      	ldr	r2, [pc, #252]	@ (8006fe0 <HAL_DMA_IRQHandler+0xe18>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d045      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xdaa>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a3e      	ldr	r2, [pc, #248]	@ (8006fe4 <HAL_DMA_IRQHandler+0xe1c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d040      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xdaa>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a3c      	ldr	r2, [pc, #240]	@ (8006fe8 <HAL_DMA_IRQHandler+0xe20>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d03b      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xdaa>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a3b      	ldr	r2, [pc, #236]	@ (8006fec <HAL_DMA_IRQHandler+0xe24>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d036      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xdaa>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a39      	ldr	r2, [pc, #228]	@ (8006ff0 <HAL_DMA_IRQHandler+0xe28>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d031      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xdaa>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a38      	ldr	r2, [pc, #224]	@ (8006ff4 <HAL_DMA_IRQHandler+0xe2c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d02c      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xdaa>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a36      	ldr	r2, [pc, #216]	@ (8006ff8 <HAL_DMA_IRQHandler+0xe30>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d027      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xdaa>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a35      	ldr	r2, [pc, #212]	@ (8006ffc <HAL_DMA_IRQHandler+0xe34>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d022      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xdaa>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a33      	ldr	r2, [pc, #204]	@ (8007000 <HAL_DMA_IRQHandler+0xe38>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d01d      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xdaa>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a32      	ldr	r2, [pc, #200]	@ (8007004 <HAL_DMA_IRQHandler+0xe3c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d018      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xdaa>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a30      	ldr	r2, [pc, #192]	@ (8007008 <HAL_DMA_IRQHandler+0xe40>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xdaa>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a2f      	ldr	r2, [pc, #188]	@ (800700c <HAL_DMA_IRQHandler+0xe44>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00e      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xdaa>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a2d      	ldr	r2, [pc, #180]	@ (8007010 <HAL_DMA_IRQHandler+0xe48>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d009      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xdaa>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a2c      	ldr	r2, [pc, #176]	@ (8007014 <HAL_DMA_IRQHandler+0xe4c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d004      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xdaa>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a2a      	ldr	r2, [pc, #168]	@ (8007018 <HAL_DMA_IRQHandler+0xe50>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d108      	bne.n	8006f84 <HAL_DMA_IRQHandler+0xdbc>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 021c 	bic.w	r2, r2, #28
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	e007      	b.n	8006f94 <HAL_DMA_IRQHandler+0xdcc>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 020e 	bic.w	r2, r2, #14
 8006f92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f98:	f003 031f 	and.w	r3, r3, #31
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	409a      	lsls	r2, r3
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d009      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	4798      	blx	r3
 8006fca:	e004      	b.n	8006fd6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006fcc:	bf00      	nop
 8006fce:	e002      	b.n	8006fd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fd0:	bf00      	nop
 8006fd2:	e000      	b.n	8006fd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fd4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006fd6:	3728      	adds	r7, #40	@ 0x28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	40020010 	.word	0x40020010
 8006fe0:	40020028 	.word	0x40020028
 8006fe4:	40020040 	.word	0x40020040
 8006fe8:	40020058 	.word	0x40020058
 8006fec:	40020070 	.word	0x40020070
 8006ff0:	40020088 	.word	0x40020088
 8006ff4:	400200a0 	.word	0x400200a0
 8006ff8:	400200b8 	.word	0x400200b8
 8006ffc:	40020410 	.word	0x40020410
 8007000:	40020428 	.word	0x40020428
 8007004:	40020440 	.word	0x40020440
 8007008:	40020458 	.word	0x40020458
 800700c:	40020470 	.word	0x40020470
 8007010:	40020488 	.word	0x40020488
 8007014:	400204a0 	.word	0x400204a0
 8007018:	400204b8 	.word	0x400204b8

0800701c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a42      	ldr	r2, [pc, #264]	@ (8007134 <DMA_CalcBaseAndBitshift+0x118>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d04a      	beq.n	80070c4 <DMA_CalcBaseAndBitshift+0xa8>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a41      	ldr	r2, [pc, #260]	@ (8007138 <DMA_CalcBaseAndBitshift+0x11c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d045      	beq.n	80070c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a3f      	ldr	r2, [pc, #252]	@ (800713c <DMA_CalcBaseAndBitshift+0x120>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d040      	beq.n	80070c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a3e      	ldr	r2, [pc, #248]	@ (8007140 <DMA_CalcBaseAndBitshift+0x124>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d03b      	beq.n	80070c4 <DMA_CalcBaseAndBitshift+0xa8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a3c      	ldr	r2, [pc, #240]	@ (8007144 <DMA_CalcBaseAndBitshift+0x128>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d036      	beq.n	80070c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a3b      	ldr	r2, [pc, #236]	@ (8007148 <DMA_CalcBaseAndBitshift+0x12c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d031      	beq.n	80070c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a39      	ldr	r2, [pc, #228]	@ (800714c <DMA_CalcBaseAndBitshift+0x130>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d02c      	beq.n	80070c4 <DMA_CalcBaseAndBitshift+0xa8>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a38      	ldr	r2, [pc, #224]	@ (8007150 <DMA_CalcBaseAndBitshift+0x134>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d027      	beq.n	80070c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a36      	ldr	r2, [pc, #216]	@ (8007154 <DMA_CalcBaseAndBitshift+0x138>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d022      	beq.n	80070c4 <DMA_CalcBaseAndBitshift+0xa8>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a35      	ldr	r2, [pc, #212]	@ (8007158 <DMA_CalcBaseAndBitshift+0x13c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d01d      	beq.n	80070c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a33      	ldr	r2, [pc, #204]	@ (800715c <DMA_CalcBaseAndBitshift+0x140>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d018      	beq.n	80070c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a32      	ldr	r2, [pc, #200]	@ (8007160 <DMA_CalcBaseAndBitshift+0x144>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d013      	beq.n	80070c4 <DMA_CalcBaseAndBitshift+0xa8>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a30      	ldr	r2, [pc, #192]	@ (8007164 <DMA_CalcBaseAndBitshift+0x148>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d00e      	beq.n	80070c4 <DMA_CalcBaseAndBitshift+0xa8>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a2f      	ldr	r2, [pc, #188]	@ (8007168 <DMA_CalcBaseAndBitshift+0x14c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d009      	beq.n	80070c4 <DMA_CalcBaseAndBitshift+0xa8>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a2d      	ldr	r2, [pc, #180]	@ (800716c <DMA_CalcBaseAndBitshift+0x150>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d004      	beq.n	80070c4 <DMA_CalcBaseAndBitshift+0xa8>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a2c      	ldr	r2, [pc, #176]	@ (8007170 <DMA_CalcBaseAndBitshift+0x154>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d101      	bne.n	80070c8 <DMA_CalcBaseAndBitshift+0xac>
 80070c4:	2301      	movs	r3, #1
 80070c6:	e000      	b.n	80070ca <DMA_CalcBaseAndBitshift+0xae>
 80070c8:	2300      	movs	r3, #0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d024      	beq.n	8007118 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	3b10      	subs	r3, #16
 80070d6:	4a27      	ldr	r2, [pc, #156]	@ (8007174 <DMA_CalcBaseAndBitshift+0x158>)
 80070d8:	fba2 2303 	umull	r2, r3, r2, r3
 80070dc:	091b      	lsrs	r3, r3, #4
 80070de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	4a24      	ldr	r2, [pc, #144]	@ (8007178 <DMA_CalcBaseAndBitshift+0x15c>)
 80070e8:	5cd3      	ldrb	r3, [r2, r3]
 80070ea:	461a      	mov	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	d908      	bls.n	8007108 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	4b1f      	ldr	r3, [pc, #124]	@ (800717c <DMA_CalcBaseAndBitshift+0x160>)
 80070fe:	4013      	ands	r3, r2
 8007100:	1d1a      	adds	r2, r3, #4
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	659a      	str	r2, [r3, #88]	@ 0x58
 8007106:	e00d      	b.n	8007124 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	461a      	mov	r2, r3
 800710e:	4b1b      	ldr	r3, [pc, #108]	@ (800717c <DMA_CalcBaseAndBitshift+0x160>)
 8007110:	4013      	ands	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6593      	str	r3, [r2, #88]	@ 0x58
 8007116:	e005      	b.n	8007124 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007128:	4618      	mov	r0, r3
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	40020010 	.word	0x40020010
 8007138:	40020028 	.word	0x40020028
 800713c:	40020040 	.word	0x40020040
 8007140:	40020058 	.word	0x40020058
 8007144:	40020070 	.word	0x40020070
 8007148:	40020088 	.word	0x40020088
 800714c:	400200a0 	.word	0x400200a0
 8007150:	400200b8 	.word	0x400200b8
 8007154:	40020410 	.word	0x40020410
 8007158:	40020428 	.word	0x40020428
 800715c:	40020440 	.word	0x40020440
 8007160:	40020458 	.word	0x40020458
 8007164:	40020470 	.word	0x40020470
 8007168:	40020488 	.word	0x40020488
 800716c:	400204a0 	.word	0x400204a0
 8007170:	400204b8 	.word	0x400204b8
 8007174:	aaaaaaab 	.word	0xaaaaaaab
 8007178:	08019990 	.word	0x08019990
 800717c:	fffffc00 	.word	0xfffffc00

08007180 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d120      	bne.n	80071d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007198:	2b03      	cmp	r3, #3
 800719a:	d858      	bhi.n	800724e <DMA_CheckFifoParam+0xce>
 800719c:	a201      	add	r2, pc, #4	@ (adr r2, 80071a4 <DMA_CheckFifoParam+0x24>)
 800719e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a2:	bf00      	nop
 80071a4:	080071b5 	.word	0x080071b5
 80071a8:	080071c7 	.word	0x080071c7
 80071ac:	080071b5 	.word	0x080071b5
 80071b0:	0800724f 	.word	0x0800724f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d048      	beq.n	8007252 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071c4:	e045      	b.n	8007252 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80071ce:	d142      	bne.n	8007256 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071d4:	e03f      	b.n	8007256 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071de:	d123      	bne.n	8007228 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d838      	bhi.n	800725a <DMA_CheckFifoParam+0xda>
 80071e8:	a201      	add	r2, pc, #4	@ (adr r2, 80071f0 <DMA_CheckFifoParam+0x70>)
 80071ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ee:	bf00      	nop
 80071f0:	08007201 	.word	0x08007201
 80071f4:	08007207 	.word	0x08007207
 80071f8:	08007201 	.word	0x08007201
 80071fc:	08007219 	.word	0x08007219
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	73fb      	strb	r3, [r7, #15]
        break;
 8007204:	e030      	b.n	8007268 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d025      	beq.n	800725e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007216:	e022      	b.n	800725e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007220:	d11f      	bne.n	8007262 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007226:	e01c      	b.n	8007262 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722c:	2b02      	cmp	r3, #2
 800722e:	d902      	bls.n	8007236 <DMA_CheckFifoParam+0xb6>
 8007230:	2b03      	cmp	r3, #3
 8007232:	d003      	beq.n	800723c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007234:	e018      	b.n	8007268 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	73fb      	strb	r3, [r7, #15]
        break;
 800723a:	e015      	b.n	8007268 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007240:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00e      	beq.n	8007266 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	73fb      	strb	r3, [r7, #15]
    break;
 800724c:	e00b      	b.n	8007266 <DMA_CheckFifoParam+0xe6>
        break;
 800724e:	bf00      	nop
 8007250:	e00a      	b.n	8007268 <DMA_CheckFifoParam+0xe8>
        break;
 8007252:	bf00      	nop
 8007254:	e008      	b.n	8007268 <DMA_CheckFifoParam+0xe8>
        break;
 8007256:	bf00      	nop
 8007258:	e006      	b.n	8007268 <DMA_CheckFifoParam+0xe8>
        break;
 800725a:	bf00      	nop
 800725c:	e004      	b.n	8007268 <DMA_CheckFifoParam+0xe8>
        break;
 800725e:	bf00      	nop
 8007260:	e002      	b.n	8007268 <DMA_CheckFifoParam+0xe8>
        break;
 8007262:	bf00      	nop
 8007264:	e000      	b.n	8007268 <DMA_CheckFifoParam+0xe8>
    break;
 8007266:	bf00      	nop
    }
  }

  return status;
 8007268:	7bfb      	ldrb	r3, [r7, #15]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop

08007278 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a38      	ldr	r2, [pc, #224]	@ (800736c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d022      	beq.n	80072d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a36      	ldr	r2, [pc, #216]	@ (8007370 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d01d      	beq.n	80072d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a35      	ldr	r2, [pc, #212]	@ (8007374 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d018      	beq.n	80072d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a33      	ldr	r2, [pc, #204]	@ (8007378 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d013      	beq.n	80072d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a32      	ldr	r2, [pc, #200]	@ (800737c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d00e      	beq.n	80072d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a30      	ldr	r2, [pc, #192]	@ (8007380 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d009      	beq.n	80072d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a2f      	ldr	r2, [pc, #188]	@ (8007384 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d004      	beq.n	80072d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007388 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d101      	bne.n	80072da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e000      	b.n	80072dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80072da:	2300      	movs	r3, #0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01a      	beq.n	8007316 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	3b08      	subs	r3, #8
 80072e8:	4a28      	ldr	r2, [pc, #160]	@ (800738c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80072ea:	fba2 2303 	umull	r2, r3, r2, r3
 80072ee:	091b      	lsrs	r3, r3, #4
 80072f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4b26      	ldr	r3, [pc, #152]	@ (8007390 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80072f6:	4413      	add	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	461a      	mov	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a24      	ldr	r2, [pc, #144]	@ (8007394 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007304:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f003 031f 	and.w	r3, r3, #31
 800730c:	2201      	movs	r2, #1
 800730e:	409a      	lsls	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007314:	e024      	b.n	8007360 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	3b10      	subs	r3, #16
 800731e:	4a1e      	ldr	r2, [pc, #120]	@ (8007398 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007320:	fba2 2303 	umull	r2, r3, r2, r3
 8007324:	091b      	lsrs	r3, r3, #4
 8007326:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	4a1c      	ldr	r2, [pc, #112]	@ (800739c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d806      	bhi.n	800733e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4a1b      	ldr	r2, [pc, #108]	@ (80073a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d902      	bls.n	800733e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3308      	adds	r3, #8
 800733c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4b18      	ldr	r3, [pc, #96]	@ (80073a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	461a      	mov	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a16      	ldr	r2, [pc, #88]	@ (80073a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007350:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f003 031f 	and.w	r3, r3, #31
 8007358:	2201      	movs	r2, #1
 800735a:	409a      	lsls	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007360:	bf00      	nop
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	58025408 	.word	0x58025408
 8007370:	5802541c 	.word	0x5802541c
 8007374:	58025430 	.word	0x58025430
 8007378:	58025444 	.word	0x58025444
 800737c:	58025458 	.word	0x58025458
 8007380:	5802546c 	.word	0x5802546c
 8007384:	58025480 	.word	0x58025480
 8007388:	58025494 	.word	0x58025494
 800738c:	cccccccd 	.word	0xcccccccd
 8007390:	16009600 	.word	0x16009600
 8007394:	58025880 	.word	0x58025880
 8007398:	aaaaaaab 	.word	0xaaaaaaab
 800739c:	400204b8 	.word	0x400204b8
 80073a0:	4002040f 	.word	0x4002040f
 80073a4:	10008200 	.word	0x10008200
 80073a8:	40020880 	.word	0x40020880

080073ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d04a      	beq.n	8007458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d847      	bhi.n	8007458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a25      	ldr	r2, [pc, #148]	@ (8007464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d022      	beq.n	8007418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a24      	ldr	r2, [pc, #144]	@ (8007468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d01d      	beq.n	8007418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a22      	ldr	r2, [pc, #136]	@ (800746c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d018      	beq.n	8007418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a21      	ldr	r2, [pc, #132]	@ (8007470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d013      	beq.n	8007418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d00e      	beq.n	8007418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a1e      	ldr	r2, [pc, #120]	@ (8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d009      	beq.n	8007418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a1c      	ldr	r2, [pc, #112]	@ (800747c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d004      	beq.n	8007418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a1b      	ldr	r2, [pc, #108]	@ (8007480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d101      	bne.n	800741c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007418:	2301      	movs	r3, #1
 800741a:	e000      	b.n	800741e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800741c:	2300      	movs	r3, #0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	4b17      	ldr	r3, [pc, #92]	@ (8007484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007426:	4413      	add	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	461a      	mov	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a15      	ldr	r2, [pc, #84]	@ (8007488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007434:	671a      	str	r2, [r3, #112]	@ 0x70
 8007436:	e009      	b.n	800744c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4b14      	ldr	r3, [pc, #80]	@ (800748c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	461a      	mov	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a11      	ldr	r2, [pc, #68]	@ (8007490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800744a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3b01      	subs	r3, #1
 8007450:	2201      	movs	r2, #1
 8007452:	409a      	lsls	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007458:	bf00      	nop
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	58025408 	.word	0x58025408
 8007468:	5802541c 	.word	0x5802541c
 800746c:	58025430 	.word	0x58025430
 8007470:	58025444 	.word	0x58025444
 8007474:	58025458 	.word	0x58025458
 8007478:	5802546c 	.word	0x5802546c
 800747c:	58025480 	.word	0x58025480
 8007480:	58025494 	.word	0x58025494
 8007484:	1600963f 	.word	0x1600963f
 8007488:	58025940 	.word	0x58025940
 800748c:	1000823f 	.word	0x1000823f
 8007490:	40020940 	.word	0x40020940

08007494 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b098      	sub	sp, #96	@ 0x60
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800749c:	4a84      	ldr	r2, [pc, #528]	@ (80076b0 <HAL_FDCAN_Init+0x21c>)
 800749e:	f107 030c 	add.w	r3, r7, #12
 80074a2:	4611      	mov	r1, r2
 80074a4:	224c      	movs	r2, #76	@ 0x4c
 80074a6:	4618      	mov	r0, r3
 80074a8:	f010 fef1 	bl	801828e <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e1c6      	b.n	8007844 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a7e      	ldr	r2, [pc, #504]	@ (80076b4 <HAL_FDCAN_Init+0x220>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d106      	bne.n	80074ce <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80074c8:	461a      	mov	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d106      	bne.n	80074e8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7fb fd54 	bl	8002f90 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	699a      	ldr	r2, [r3, #24]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0210 	bic.w	r2, r2, #16
 80074f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074f8:	f7fc f974 	bl	80037e4 <HAL_GetTick>
 80074fc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80074fe:	e014      	b.n	800752a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007500:	f7fc f970 	bl	80037e4 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b0a      	cmp	r3, #10
 800750c:	d90d      	bls.n	800752a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007514:	f043 0201 	orr.w	r2, r3, #1
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2203      	movs	r2, #3
 8007522:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e18c      	b.n	8007844 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	f003 0308 	and.w	r3, r3, #8
 8007534:	2b08      	cmp	r3, #8
 8007536:	d0e3      	beq.n	8007500 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	699a      	ldr	r2, [r3, #24]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f042 0201 	orr.w	r2, r2, #1
 8007546:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007548:	f7fc f94c 	bl	80037e4 <HAL_GetTick>
 800754c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800754e:	e014      	b.n	800757a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007550:	f7fc f948 	bl	80037e4 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b0a      	cmp	r3, #10
 800755c:	d90d      	bls.n	800757a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007564:	f043 0201 	orr.w	r2, r3, #1
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2203      	movs	r2, #3
 8007572:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e164      	b.n	8007844 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0e3      	beq.n	8007550 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	699a      	ldr	r2, [r3, #24]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 0202 	orr.w	r2, r2, #2
 8007596:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	7c1b      	ldrb	r3, [r3, #16]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d108      	bne.n	80075b2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699a      	ldr	r2, [r3, #24]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075ae:	619a      	str	r2, [r3, #24]
 80075b0:	e007      	b.n	80075c2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	699a      	ldr	r2, [r3, #24]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	7c5b      	ldrb	r3, [r3, #17]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d108      	bne.n	80075dc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	699a      	ldr	r2, [r3, #24]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075d8:	619a      	str	r2, [r3, #24]
 80075da:	e007      	b.n	80075ec <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	699a      	ldr	r2, [r3, #24]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80075ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	7c9b      	ldrb	r3, [r3, #18]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d108      	bne.n	8007606 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007602:	619a      	str	r2, [r3, #24]
 8007604:	e007      	b.n	8007616 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007614:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	430a      	orrs	r2, r1
 800762a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	699a      	ldr	r2, [r3, #24]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800763a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0210 	bic.w	r2, r2, #16
 800764a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d108      	bne.n	8007666 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	699a      	ldr	r2, [r3, #24]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0204 	orr.w	r2, r2, #4
 8007662:	619a      	str	r2, [r3, #24]
 8007664:	e030      	b.n	80076c8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d02c      	beq.n	80076c8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	2b02      	cmp	r3, #2
 8007674:	d020      	beq.n	80076b8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	699a      	ldr	r2, [r3, #24]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007684:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691a      	ldr	r2, [r3, #16]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0210 	orr.w	r2, r2, #16
 8007694:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	2b03      	cmp	r3, #3
 800769c:	d114      	bne.n	80076c8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	699a      	ldr	r2, [r3, #24]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f042 0220 	orr.w	r2, r2, #32
 80076ac:	619a      	str	r2, [r3, #24]
 80076ae:	e00b      	b.n	80076c8 <HAL_FDCAN_Init+0x234>
 80076b0:	08019510 	.word	0x08019510
 80076b4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0220 	orr.w	r2, r2, #32
 80076c6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80076d8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80076e0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	3b01      	subs	r3, #1
 80076ea:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80076f0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80076f2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076fc:	d115      	bne.n	800772a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007702:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007708:	3b01      	subs	r3, #1
 800770a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800770c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007712:	3b01      	subs	r3, #1
 8007714:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007716:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771e:	3b01      	subs	r3, #1
 8007720:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007726:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007728:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00a      	beq.n	8007748 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007750:	4413      	add	r3, r2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d011      	beq.n	800777a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800775e:	f023 0107 	bic.w	r1, r3, #7
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	3360      	adds	r3, #96	@ 0x60
 800776a:	443b      	add	r3, r7
 800776c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	d011      	beq.n	80077a6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800778a:	f023 0107 	bic.w	r1, r3, #7
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	3360      	adds	r3, #96	@ 0x60
 8007796:	443b      	add	r3, r7
 8007798:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d012      	beq.n	80077d4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80077b6:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	3360      	adds	r3, #96	@ 0x60
 80077c2:	443b      	add	r3, r7
 80077c4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80077c8:	011a      	lsls	r2, r3, #4
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d012      	beq.n	8007802 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80077e4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	3360      	adds	r3, #96	@ 0x60
 80077f0:	443b      	add	r3, r7
 80077f2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80077f6:	021a      	lsls	r2, r3, #8
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a11      	ldr	r2, [pc, #68]	@ (800784c <HAL_FDCAN_Init+0x3b8>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d107      	bne.n	800781c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f022 0203 	bic.w	r2, r2, #3
 800781a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f80b 	bl	8007850 <FDCAN_CalcultateRamBlockAddresses>
 800783a:	4603      	mov	r3, r0
 800783c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8007840:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8007844:	4618      	mov	r0, r3
 8007846:	3760      	adds	r7, #96	@ 0x60
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	4000a000 	.word	0x4000a000

08007850 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800785c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007866:	4ba7      	ldr	r3, [pc, #668]	@ (8007b04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007868:	4013      	ands	r3, r2
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	0091      	lsls	r1, r2, #2
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6812      	ldr	r2, [r2, #0]
 8007872:	430b      	orrs	r3, r1
 8007874:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007880:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007888:	041a      	lsls	r2, r3, #16
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	4413      	add	r3, r2
 800789c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80078a6:	4b97      	ldr	r3, [pc, #604]	@ (8007b04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078a8:	4013      	ands	r3, r2
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	0091      	lsls	r1, r2, #2
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	6812      	ldr	r2, [r2, #0]
 80078b2:	430b      	orrs	r3, r1
 80078b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078c0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c8:	041a      	lsls	r2, r3, #16
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	4413      	add	r3, r2
 80078de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80078e8:	4b86      	ldr	r3, [pc, #536]	@ (8007b04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078ea:	4013      	ands	r3, r2
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	0091      	lsls	r1, r2, #2
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	6812      	ldr	r2, [r2, #0]
 80078f4:	430b      	orrs	r3, r1
 80078f6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007902:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790a:	041a      	lsls	r2, r3, #16
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	430a      	orrs	r2, r1
 8007912:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800791e:	fb02 f303 	mul.w	r3, r2, r3
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	4413      	add	r3, r2
 8007926:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007930:	4b74      	ldr	r3, [pc, #464]	@ (8007b04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007932:	4013      	ands	r3, r2
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	0091      	lsls	r1, r2, #2
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	6812      	ldr	r2, [r2, #0]
 800793c:	430b      	orrs	r3, r1
 800793e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800794a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007952:	041a      	lsls	r2, r3, #16
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007966:	fb02 f303 	mul.w	r3, r2, r3
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	4413      	add	r3, r2
 800796e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8007978:	4b62      	ldr	r3, [pc, #392]	@ (8007b04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800797a:	4013      	ands	r3, r2
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	0091      	lsls	r1, r2, #2
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	6812      	ldr	r2, [r2, #0]
 8007984:	430b      	orrs	r3, r1
 8007986:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007992:	fb02 f303 	mul.w	r3, r2, r3
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	4413      	add	r3, r2
 800799a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80079a4:	4b57      	ldr	r3, [pc, #348]	@ (8007b04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079a6:	4013      	ands	r3, r2
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	0091      	lsls	r1, r2, #2
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6812      	ldr	r2, [r2, #0]
 80079b0:	430b      	orrs	r3, r1
 80079b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079be:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c6:	041a      	lsls	r2, r3, #16
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	4413      	add	r3, r2
 80079dc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80079e6:	4b47      	ldr	r3, [pc, #284]	@ (8007b04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079e8:	4013      	ands	r3, r2
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	0091      	lsls	r1, r2, #2
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	430b      	orrs	r3, r1
 80079f4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007a00:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a08:	041a      	lsls	r2, r3, #16
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007a1c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a24:	061a      	lsls	r2, r3, #24
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a34:	4b34      	ldr	r3, [pc, #208]	@ (8007b08 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007a36:	4413      	add	r3, r2
 8007a38:	009a      	lsls	r2, r3, #2
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	441a      	add	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a56:	00db      	lsls	r3, r3, #3
 8007a58:	441a      	add	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8007a6a:	fb01 f303 	mul.w	r3, r1, r3
 8007a6e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007a70:	441a      	add	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a7e:	6879      	ldr	r1, [r7, #4]
 8007a80:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8007a82:	fb01 f303 	mul.w	r3, r1, r3
 8007a86:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007a88:	441a      	add	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a96:	6879      	ldr	r1, [r7, #4]
 8007a98:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8007a9a:	fb01 f303 	mul.w	r3, r1, r3
 8007a9e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007aa0:	441a      	add	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	441a      	add	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007aca:	fb01 f303 	mul.w	r3, r1, r3
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	441a      	add	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ae2:	6879      	ldr	r1, [r7, #4]
 8007ae4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007ae6:	fb01 f303 	mul.w	r3, r1, r3
 8007aea:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007aec:	441a      	add	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007afa:	4a04      	ldr	r2, [pc, #16]	@ (8007b0c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d915      	bls.n	8007b2c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007b00:	e006      	b.n	8007b10 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007b02:	bf00      	nop
 8007b04:	ffff0003 	.word	0xffff0003
 8007b08:	10002b00 	.word	0x10002b00
 8007b0c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b16:	f043 0220 	orr.w	r2, r3, #32
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2203      	movs	r2, #3
 8007b24:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e010      	b.n	8007b4e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	e005      	b.n	8007b40 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d3f3      	bcc.n	8007b34 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop

08007b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b089      	sub	sp, #36	@ 0x24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007b6a:	4b89      	ldr	r3, [pc, #548]	@ (8007d90 <HAL_GPIO_Init+0x234>)
 8007b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b6e:	e194      	b.n	8007e9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	2101      	movs	r1, #1
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	fa01 f303 	lsl.w	r3, r1, r3
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 8186 	beq.w	8007e94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f003 0303 	and.w	r3, r3, #3
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d005      	beq.n	8007ba0 <HAL_GPIO_Init+0x44>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f003 0303 	and.w	r3, r3, #3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d130      	bne.n	8007c02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	005b      	lsls	r3, r3, #1
 8007baa:	2203      	movs	r2, #3
 8007bac:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb0:	43db      	mvns	r3, r3
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	005b      	lsls	r3, r3, #1
 8007bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc4:	69ba      	ldr	r2, [r7, #24]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	fa02 f303 	lsl.w	r3, r2, r3
 8007bde:	43db      	mvns	r3, r3
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	4013      	ands	r3, r2
 8007be4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	091b      	lsrs	r3, r3, #4
 8007bec:	f003 0201 	and.w	r2, r3, #1
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	f003 0303 	and.w	r3, r3, #3
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d017      	beq.n	8007c3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	2203      	movs	r2, #3
 8007c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1e:	43db      	mvns	r3, r3
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	4013      	ands	r3, r2
 8007c24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f003 0303 	and.w	r3, r3, #3
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d123      	bne.n	8007c92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	08da      	lsrs	r2, r3, #3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3208      	adds	r2, #8
 8007c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	f003 0307 	and.w	r3, r3, #7
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	220f      	movs	r2, #15
 8007c62:	fa02 f303 	lsl.w	r3, r2, r3
 8007c66:	43db      	mvns	r3, r3
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	691a      	ldr	r2, [r3, #16]
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	f003 0307 	and.w	r3, r3, #7
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	08da      	lsrs	r2, r3, #3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3208      	adds	r2, #8
 8007c8c:	69b9      	ldr	r1, [r7, #24]
 8007c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	2203      	movs	r2, #3
 8007c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca2:	43db      	mvns	r3, r3
 8007ca4:	69ba      	ldr	r2, [r7, #24]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f003 0203 	and.w	r2, r3, #3
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 80e0 	beq.w	8007e94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8007d94 <HAL_GPIO_Init+0x238>)
 8007cd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007cda:	4a2e      	ldr	r2, [pc, #184]	@ (8007d94 <HAL_GPIO_Init+0x238>)
 8007cdc:	f043 0302 	orr.w	r3, r3, #2
 8007ce0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8007d94 <HAL_GPIO_Init+0x238>)
 8007ce6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007cf2:	4a29      	ldr	r2, [pc, #164]	@ (8007d98 <HAL_GPIO_Init+0x23c>)
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	089b      	lsrs	r3, r3, #2
 8007cf8:	3302      	adds	r3, #2
 8007cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	f003 0303 	and.w	r3, r3, #3
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	220f      	movs	r2, #15
 8007d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0e:	43db      	mvns	r3, r3
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	4013      	ands	r3, r2
 8007d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a20      	ldr	r2, [pc, #128]	@ (8007d9c <HAL_GPIO_Init+0x240>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d052      	beq.n	8007dc4 <HAL_GPIO_Init+0x268>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a1f      	ldr	r2, [pc, #124]	@ (8007da0 <HAL_GPIO_Init+0x244>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d031      	beq.n	8007d8a <HAL_GPIO_Init+0x22e>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a1e      	ldr	r2, [pc, #120]	@ (8007da4 <HAL_GPIO_Init+0x248>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d02b      	beq.n	8007d86 <HAL_GPIO_Init+0x22a>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a1d      	ldr	r2, [pc, #116]	@ (8007da8 <HAL_GPIO_Init+0x24c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d025      	beq.n	8007d82 <HAL_GPIO_Init+0x226>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a1c      	ldr	r2, [pc, #112]	@ (8007dac <HAL_GPIO_Init+0x250>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d01f      	beq.n	8007d7e <HAL_GPIO_Init+0x222>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a1b      	ldr	r2, [pc, #108]	@ (8007db0 <HAL_GPIO_Init+0x254>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d019      	beq.n	8007d7a <HAL_GPIO_Init+0x21e>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a1a      	ldr	r2, [pc, #104]	@ (8007db4 <HAL_GPIO_Init+0x258>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d013      	beq.n	8007d76 <HAL_GPIO_Init+0x21a>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a19      	ldr	r2, [pc, #100]	@ (8007db8 <HAL_GPIO_Init+0x25c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d00d      	beq.n	8007d72 <HAL_GPIO_Init+0x216>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a18      	ldr	r2, [pc, #96]	@ (8007dbc <HAL_GPIO_Init+0x260>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d007      	beq.n	8007d6e <HAL_GPIO_Init+0x212>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a17      	ldr	r2, [pc, #92]	@ (8007dc0 <HAL_GPIO_Init+0x264>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d101      	bne.n	8007d6a <HAL_GPIO_Init+0x20e>
 8007d66:	2309      	movs	r3, #9
 8007d68:	e02d      	b.n	8007dc6 <HAL_GPIO_Init+0x26a>
 8007d6a:	230a      	movs	r3, #10
 8007d6c:	e02b      	b.n	8007dc6 <HAL_GPIO_Init+0x26a>
 8007d6e:	2308      	movs	r3, #8
 8007d70:	e029      	b.n	8007dc6 <HAL_GPIO_Init+0x26a>
 8007d72:	2307      	movs	r3, #7
 8007d74:	e027      	b.n	8007dc6 <HAL_GPIO_Init+0x26a>
 8007d76:	2306      	movs	r3, #6
 8007d78:	e025      	b.n	8007dc6 <HAL_GPIO_Init+0x26a>
 8007d7a:	2305      	movs	r3, #5
 8007d7c:	e023      	b.n	8007dc6 <HAL_GPIO_Init+0x26a>
 8007d7e:	2304      	movs	r3, #4
 8007d80:	e021      	b.n	8007dc6 <HAL_GPIO_Init+0x26a>
 8007d82:	2303      	movs	r3, #3
 8007d84:	e01f      	b.n	8007dc6 <HAL_GPIO_Init+0x26a>
 8007d86:	2302      	movs	r3, #2
 8007d88:	e01d      	b.n	8007dc6 <HAL_GPIO_Init+0x26a>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e01b      	b.n	8007dc6 <HAL_GPIO_Init+0x26a>
 8007d8e:	bf00      	nop
 8007d90:	58000080 	.word	0x58000080
 8007d94:	58024400 	.word	0x58024400
 8007d98:	58000400 	.word	0x58000400
 8007d9c:	58020000 	.word	0x58020000
 8007da0:	58020400 	.word	0x58020400
 8007da4:	58020800 	.word	0x58020800
 8007da8:	58020c00 	.word	0x58020c00
 8007dac:	58021000 	.word	0x58021000
 8007db0:	58021400 	.word	0x58021400
 8007db4:	58021800 	.word	0x58021800
 8007db8:	58021c00 	.word	0x58021c00
 8007dbc:	58022000 	.word	0x58022000
 8007dc0:	58022400 	.word	0x58022400
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	69fa      	ldr	r2, [r7, #28]
 8007dc8:	f002 0203 	and.w	r2, r2, #3
 8007dcc:	0092      	lsls	r2, r2, #2
 8007dce:	4093      	lsls	r3, r2
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007dd6:	4938      	ldr	r1, [pc, #224]	@ (8007eb8 <HAL_GPIO_Init+0x35c>)
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	089b      	lsrs	r3, r3, #2
 8007ddc:	3302      	adds	r3, #2
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	43db      	mvns	r3, r3
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	4013      	ands	r3, r2
 8007df4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007e0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	43db      	mvns	r3, r3
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	4013      	ands	r3, r2
 8007e22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007e38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	43db      	mvns	r3, r3
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	69ba      	ldr	r2, [r7, #24]
 8007e68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	43db      	mvns	r3, r3
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	4013      	ands	r3, r2
 8007e78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	3301      	adds	r3, #1
 8007e98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f47f ae63 	bne.w	8007b70 <HAL_GPIO_Init+0x14>
  }
}
 8007eaa:	bf00      	nop
 8007eac:	bf00      	nop
 8007eae:	3724      	adds	r7, #36	@ 0x24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	58000400 	.word	0x58000400

08007ebc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007eca:	4b75      	ldr	r3, [pc, #468]	@ (80080a0 <HAL_GPIO_DeInit+0x1e4>)
 8007ecc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8007ece:	e0d9      	b.n	8008084 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	4013      	ands	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 80cc 	beq.w	800807e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007ee6:	4a6f      	ldr	r2, [pc, #444]	@ (80080a4 <HAL_GPIO_DeInit+0x1e8>)
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	089b      	lsrs	r3, r3, #2
 8007eec:	3302      	adds	r3, #2
 8007eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f003 0303 	and.w	r3, r3, #3
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	220f      	movs	r2, #15
 8007efe:	fa02 f303 	lsl.w	r3, r2, r3
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	4013      	ands	r3, r2
 8007f06:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a67      	ldr	r2, [pc, #412]	@ (80080a8 <HAL_GPIO_DeInit+0x1ec>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d037      	beq.n	8007f80 <HAL_GPIO_DeInit+0xc4>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a66      	ldr	r2, [pc, #408]	@ (80080ac <HAL_GPIO_DeInit+0x1f0>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d031      	beq.n	8007f7c <HAL_GPIO_DeInit+0xc0>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a65      	ldr	r2, [pc, #404]	@ (80080b0 <HAL_GPIO_DeInit+0x1f4>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d02b      	beq.n	8007f78 <HAL_GPIO_DeInit+0xbc>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a64      	ldr	r2, [pc, #400]	@ (80080b4 <HAL_GPIO_DeInit+0x1f8>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d025      	beq.n	8007f74 <HAL_GPIO_DeInit+0xb8>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a63      	ldr	r2, [pc, #396]	@ (80080b8 <HAL_GPIO_DeInit+0x1fc>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d01f      	beq.n	8007f70 <HAL_GPIO_DeInit+0xb4>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a62      	ldr	r2, [pc, #392]	@ (80080bc <HAL_GPIO_DeInit+0x200>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d019      	beq.n	8007f6c <HAL_GPIO_DeInit+0xb0>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a61      	ldr	r2, [pc, #388]	@ (80080c0 <HAL_GPIO_DeInit+0x204>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d013      	beq.n	8007f68 <HAL_GPIO_DeInit+0xac>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a60      	ldr	r2, [pc, #384]	@ (80080c4 <HAL_GPIO_DeInit+0x208>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d00d      	beq.n	8007f64 <HAL_GPIO_DeInit+0xa8>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a5f      	ldr	r2, [pc, #380]	@ (80080c8 <HAL_GPIO_DeInit+0x20c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d007      	beq.n	8007f60 <HAL_GPIO_DeInit+0xa4>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a5e      	ldr	r2, [pc, #376]	@ (80080cc <HAL_GPIO_DeInit+0x210>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d101      	bne.n	8007f5c <HAL_GPIO_DeInit+0xa0>
 8007f58:	2309      	movs	r3, #9
 8007f5a:	e012      	b.n	8007f82 <HAL_GPIO_DeInit+0xc6>
 8007f5c:	230a      	movs	r3, #10
 8007f5e:	e010      	b.n	8007f82 <HAL_GPIO_DeInit+0xc6>
 8007f60:	2308      	movs	r3, #8
 8007f62:	e00e      	b.n	8007f82 <HAL_GPIO_DeInit+0xc6>
 8007f64:	2307      	movs	r3, #7
 8007f66:	e00c      	b.n	8007f82 <HAL_GPIO_DeInit+0xc6>
 8007f68:	2306      	movs	r3, #6
 8007f6a:	e00a      	b.n	8007f82 <HAL_GPIO_DeInit+0xc6>
 8007f6c:	2305      	movs	r3, #5
 8007f6e:	e008      	b.n	8007f82 <HAL_GPIO_DeInit+0xc6>
 8007f70:	2304      	movs	r3, #4
 8007f72:	e006      	b.n	8007f82 <HAL_GPIO_DeInit+0xc6>
 8007f74:	2303      	movs	r3, #3
 8007f76:	e004      	b.n	8007f82 <HAL_GPIO_DeInit+0xc6>
 8007f78:	2302      	movs	r3, #2
 8007f7a:	e002      	b.n	8007f82 <HAL_GPIO_DeInit+0xc6>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e000      	b.n	8007f82 <HAL_GPIO_DeInit+0xc6>
 8007f80:	2300      	movs	r3, #0
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	f002 0203 	and.w	r2, r2, #3
 8007f88:	0092      	lsls	r2, r2, #2
 8007f8a:	4093      	lsls	r3, r2
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d136      	bne.n	8008000 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	43db      	mvns	r3, r3
 8007f9a:	401a      	ands	r2, r3
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	43db      	mvns	r3, r3
 8007fa8:	401a      	ands	r2, r3
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	43db      	mvns	r3, r3
 8007fb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	43db      	mvns	r3, r3
 8007fca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007fce:	4013      	ands	r3, r2
 8007fd0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f003 0303 	and.w	r3, r3, #3
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	220f      	movs	r2, #15
 8007fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007fe2:	4a30      	ldr	r2, [pc, #192]	@ (80080a4 <HAL_GPIO_DeInit+0x1e8>)
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	089b      	lsrs	r3, r3, #2
 8007fe8:	3302      	adds	r3, #2
 8007fea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	43da      	mvns	r2, r3
 8007ff2:	482c      	ldr	r0, [pc, #176]	@ (80080a4 <HAL_GPIO_DeInit+0x1e8>)
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	089b      	lsrs	r3, r3, #2
 8007ff8:	400a      	ands	r2, r1
 8007ffa:	3302      	adds	r3, #2
 8007ffc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	005b      	lsls	r3, r3, #1
 8008008:	2103      	movs	r1, #3
 800800a:	fa01 f303 	lsl.w	r3, r1, r3
 800800e:	431a      	orrs	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	08da      	lsrs	r2, r3, #3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3208      	adds	r2, #8
 800801c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	220f      	movs	r2, #15
 800802a:	fa02 f303 	lsl.w	r3, r2, r3
 800802e:	43db      	mvns	r3, r3
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	08d2      	lsrs	r2, r2, #3
 8008034:	4019      	ands	r1, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	3208      	adds	r2, #8
 800803a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	2103      	movs	r1, #3
 8008048:	fa01 f303 	lsl.w	r3, r1, r3
 800804c:	43db      	mvns	r3, r3
 800804e:	401a      	ands	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	2101      	movs	r1, #1
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	fa01 f303 	lsl.w	r3, r1, r3
 8008060:	43db      	mvns	r3, r3
 8008062:	401a      	ands	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689a      	ldr	r2, [r3, #8]
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	2103      	movs	r1, #3
 8008072:	fa01 f303 	lsl.w	r3, r1, r3
 8008076:	43db      	mvns	r3, r3
 8008078:	401a      	ands	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	3301      	adds	r3, #1
 8008082:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	fa22 f303 	lsr.w	r3, r2, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	f47f af1f 	bne.w	8007ed0 <HAL_GPIO_DeInit+0x14>
  }
}
 8008092:	bf00      	nop
 8008094:	bf00      	nop
 8008096:	371c      	adds	r7, #28
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	58000080 	.word	0x58000080
 80080a4:	58000400 	.word	0x58000400
 80080a8:	58020000 	.word	0x58020000
 80080ac:	58020400 	.word	0x58020400
 80080b0:	58020800 	.word	0x58020800
 80080b4:	58020c00 	.word	0x58020c00
 80080b8:	58021000 	.word	0x58021000
 80080bc:	58021400 	.word	0x58021400
 80080c0:	58021800 	.word	0x58021800
 80080c4:	58021c00 	.word	0x58021c00
 80080c8:	58022000 	.word	0x58022000
 80080cc:	58022400 	.word	0x58022400

080080d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	691a      	ldr	r2, [r3, #16]
 80080e0:	887b      	ldrh	r3, [r7, #2]
 80080e2:	4013      	ands	r3, r2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d002      	beq.n	80080ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80080e8:	2301      	movs	r3, #1
 80080ea:	73fb      	strb	r3, [r7, #15]
 80080ec:	e001      	b.n	80080f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080ee:	2300      	movs	r3, #0
 80080f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	807b      	strh	r3, [r7, #2]
 800810c:	4613      	mov	r3, r2
 800810e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008110:	787b      	ldrb	r3, [r7, #1]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008116:	887a      	ldrh	r2, [r7, #2]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800811c:	e003      	b.n	8008126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800811e:	887b      	ldrh	r3, [r7, #2]
 8008120:	041a      	lsls	r2, r3, #16
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	619a      	str	r2, [r3, #24]
}
 8008126:	bf00      	nop
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008132:	b480      	push	{r7}
 8008134:	b085      	sub	sp, #20
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	460b      	mov	r3, r1
 800813c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008144:	887a      	ldrh	r2, [r7, #2]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	4013      	ands	r3, r2
 800814a:	041a      	lsls	r2, r3, #16
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	43d9      	mvns	r1, r3
 8008150:	887b      	ldrh	r3, [r7, #2]
 8008152:	400b      	ands	r3, r1
 8008154:	431a      	orrs	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	619a      	str	r2, [r3, #24]
}
 800815a:	bf00      	nop
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b086      	sub	sp, #24
 800816a:	af02      	add	r7, sp, #8
 800816c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d101      	bne.n	8008178 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e0fe      	b.n	8008376 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	d106      	bne.n	8008192 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f00f fad1 	bl	8017734 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2203      	movs	r2, #3
 8008196:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4618      	mov	r0, r3
 80081a0:	f008 fe23 	bl	8010dea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6818      	ldr	r0, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	7c1a      	ldrb	r2, [r3, #16]
 80081ac:	f88d 2000 	strb.w	r2, [sp]
 80081b0:	3304      	adds	r3, #4
 80081b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081b4:	f008 fcf4 	bl	8010ba0 <USB_CoreInit>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d005      	beq.n	80081ca <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2202      	movs	r2, #2
 80081c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e0d5      	b.n	8008376 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2100      	movs	r1, #0
 80081d0:	4618      	mov	r0, r3
 80081d2:	f008 fe1b 	bl	8010e0c <USB_SetCurrentMode>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d005      	beq.n	80081e8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e0c6      	b.n	8008376 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081e8:	2300      	movs	r3, #0
 80081ea:	73fb      	strb	r3, [r7, #15]
 80081ec:	e04a      	b.n	8008284 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80081ee:	7bfa      	ldrb	r2, [r7, #15]
 80081f0:	6879      	ldr	r1, [r7, #4]
 80081f2:	4613      	mov	r3, r2
 80081f4:	00db      	lsls	r3, r3, #3
 80081f6:	4413      	add	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	440b      	add	r3, r1
 80081fc:	3315      	adds	r3, #21
 80081fe:	2201      	movs	r2, #1
 8008200:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008202:	7bfa      	ldrb	r2, [r7, #15]
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	4613      	mov	r3, r2
 8008208:	00db      	lsls	r3, r3, #3
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	440b      	add	r3, r1
 8008210:	3314      	adds	r3, #20
 8008212:	7bfa      	ldrb	r2, [r7, #15]
 8008214:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008216:	7bfa      	ldrb	r2, [r7, #15]
 8008218:	7bfb      	ldrb	r3, [r7, #15]
 800821a:	b298      	uxth	r0, r3
 800821c:	6879      	ldr	r1, [r7, #4]
 800821e:	4613      	mov	r3, r2
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	4413      	add	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	440b      	add	r3, r1
 8008228:	332e      	adds	r3, #46	@ 0x2e
 800822a:	4602      	mov	r2, r0
 800822c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800822e:	7bfa      	ldrb	r2, [r7, #15]
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	4613      	mov	r3, r2
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	4413      	add	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	440b      	add	r3, r1
 800823c:	3318      	adds	r3, #24
 800823e:	2200      	movs	r2, #0
 8008240:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008242:	7bfa      	ldrb	r2, [r7, #15]
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	4613      	mov	r3, r2
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	4413      	add	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	440b      	add	r3, r1
 8008250:	331c      	adds	r3, #28
 8008252:	2200      	movs	r2, #0
 8008254:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008256:	7bfa      	ldrb	r2, [r7, #15]
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	4613      	mov	r3, r2
 800825c:	00db      	lsls	r3, r3, #3
 800825e:	4413      	add	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	440b      	add	r3, r1
 8008264:	3320      	adds	r3, #32
 8008266:	2200      	movs	r2, #0
 8008268:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800826a:	7bfa      	ldrb	r2, [r7, #15]
 800826c:	6879      	ldr	r1, [r7, #4]
 800826e:	4613      	mov	r3, r2
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	4413      	add	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	440b      	add	r3, r1
 8008278:	3324      	adds	r3, #36	@ 0x24
 800827a:	2200      	movs	r2, #0
 800827c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800827e:	7bfb      	ldrb	r3, [r7, #15]
 8008280:	3301      	adds	r3, #1
 8008282:	73fb      	strb	r3, [r7, #15]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	791b      	ldrb	r3, [r3, #4]
 8008288:	7bfa      	ldrb	r2, [r7, #15]
 800828a:	429a      	cmp	r2, r3
 800828c:	d3af      	bcc.n	80081ee <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800828e:	2300      	movs	r3, #0
 8008290:	73fb      	strb	r3, [r7, #15]
 8008292:	e044      	b.n	800831e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008294:	7bfa      	ldrb	r2, [r7, #15]
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	4613      	mov	r3, r2
 800829a:	00db      	lsls	r3, r3, #3
 800829c:	4413      	add	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	440b      	add	r3, r1
 80082a2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80082a6:	2200      	movs	r2, #0
 80082a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80082aa:	7bfa      	ldrb	r2, [r7, #15]
 80082ac:	6879      	ldr	r1, [r7, #4]
 80082ae:	4613      	mov	r3, r2
 80082b0:	00db      	lsls	r3, r3, #3
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	440b      	add	r3, r1
 80082b8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80082bc:	7bfa      	ldrb	r2, [r7, #15]
 80082be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80082c0:	7bfa      	ldrb	r2, [r7, #15]
 80082c2:	6879      	ldr	r1, [r7, #4]
 80082c4:	4613      	mov	r3, r2
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	4413      	add	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	440b      	add	r3, r1
 80082ce:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80082d2:	2200      	movs	r2, #0
 80082d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80082d6:	7bfa      	ldrb	r2, [r7, #15]
 80082d8:	6879      	ldr	r1, [r7, #4]
 80082da:	4613      	mov	r3, r2
 80082dc:	00db      	lsls	r3, r3, #3
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	440b      	add	r3, r1
 80082e4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80082ec:	7bfa      	ldrb	r2, [r7, #15]
 80082ee:	6879      	ldr	r1, [r7, #4]
 80082f0:	4613      	mov	r3, r2
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	4413      	add	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	440b      	add	r3, r1
 80082fa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80082fe:	2200      	movs	r2, #0
 8008300:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008302:	7bfa      	ldrb	r2, [r7, #15]
 8008304:	6879      	ldr	r1, [r7, #4]
 8008306:	4613      	mov	r3, r2
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	440b      	add	r3, r1
 8008310:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008318:	7bfb      	ldrb	r3, [r7, #15]
 800831a:	3301      	adds	r3, #1
 800831c:	73fb      	strb	r3, [r7, #15]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	791b      	ldrb	r3, [r3, #4]
 8008322:	7bfa      	ldrb	r2, [r7, #15]
 8008324:	429a      	cmp	r2, r3
 8008326:	d3b5      	bcc.n	8008294 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6818      	ldr	r0, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	7c1a      	ldrb	r2, [r3, #16]
 8008330:	f88d 2000 	strb.w	r2, [sp]
 8008334:	3304      	adds	r3, #4
 8008336:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008338:	f008 fdb4 	bl	8010ea4 <USB_DevInit>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d005      	beq.n	800834e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2202      	movs	r2, #2
 8008346:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e013      	b.n	8008376 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	7b1b      	ldrb	r3, [r3, #12]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d102      	bne.n	800836a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 f96d 	bl	8009644 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4618      	mov	r0, r3
 8008370:	f009 fdf3 	bl	8011f5a <USB_DevDisconnect>

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008392:	2b01      	cmp	r3, #1
 8008394:	d101      	bne.n	800839a <HAL_PCD_Start+0x1c>
 8008396:	2302      	movs	r3, #2
 8008398:	e022      	b.n	80083e0 <HAL_PCD_Start+0x62>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d009      	beq.n	80083c2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d105      	bne.n	80083c2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f008 fcfe 	bl	8010dc8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f009 fda1 	bl	8011f18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80083e8:	b590      	push	{r4, r7, lr}
 80083ea:	b08d      	sub	sp, #52	@ 0x34
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4618      	mov	r0, r3
 8008400:	f009 fe5f 	bl	80120c2 <USB_GetMode>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	f040 84b9 	bne.w	8008d7e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f009 fdc3 	bl	8011f9c <USB_ReadInterrupts>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 84af 	beq.w	8008d7c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	0a1b      	lsrs	r3, r3, #8
 8008428:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4618      	mov	r0, r3
 8008438:	f009 fdb0 	bl	8011f9c <USB_ReadInterrupts>
 800843c:	4603      	mov	r3, r0
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b02      	cmp	r3, #2
 8008444:	d107      	bne.n	8008456 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	695a      	ldr	r2, [r3, #20]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f002 0202 	and.w	r2, r2, #2
 8008454:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4618      	mov	r0, r3
 800845c:	f009 fd9e 	bl	8011f9c <USB_ReadInterrupts>
 8008460:	4603      	mov	r3, r0
 8008462:	f003 0310 	and.w	r3, r3, #16
 8008466:	2b10      	cmp	r3, #16
 8008468:	d161      	bne.n	800852e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	699a      	ldr	r2, [r3, #24]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0210 	bic.w	r2, r2, #16
 8008478:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	f003 020f 	and.w	r2, r3, #15
 8008486:	4613      	mov	r3, r2
 8008488:	00db      	lsls	r3, r3, #3
 800848a:	4413      	add	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	4413      	add	r3, r2
 8008496:	3304      	adds	r3, #4
 8008498:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	0c5b      	lsrs	r3, r3, #17
 800849e:	f003 030f 	and.w	r3, r3, #15
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d124      	bne.n	80084f0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80084a6:	69ba      	ldr	r2, [r7, #24]
 80084a8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80084ac:	4013      	ands	r3, r2
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d035      	beq.n	800851e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	091b      	lsrs	r3, r3, #4
 80084ba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80084bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	461a      	mov	r2, r3
 80084c4:	6a38      	ldr	r0, [r7, #32]
 80084c6:	f009 fbd5 	bl	8011c74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	68da      	ldr	r2, [r3, #12]
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	091b      	lsrs	r3, r3, #4
 80084d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084d6:	441a      	add	r2, r3
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	695a      	ldr	r2, [r3, #20]
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	091b      	lsrs	r3, r3, #4
 80084e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084e8:	441a      	add	r2, r3
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	615a      	str	r2, [r3, #20]
 80084ee:	e016      	b.n	800851e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	0c5b      	lsrs	r3, r3, #17
 80084f4:	f003 030f 	and.w	r3, r3, #15
 80084f8:	2b06      	cmp	r3, #6
 80084fa:	d110      	bne.n	800851e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008502:	2208      	movs	r2, #8
 8008504:	4619      	mov	r1, r3
 8008506:	6a38      	ldr	r0, [r7, #32]
 8008508:	f009 fbb4 	bl	8011c74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	695a      	ldr	r2, [r3, #20]
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	091b      	lsrs	r3, r3, #4
 8008514:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008518:	441a      	add	r2, r3
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	699a      	ldr	r2, [r3, #24]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f042 0210 	orr.w	r2, r2, #16
 800852c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4618      	mov	r0, r3
 8008534:	f009 fd32 	bl	8011f9c <USB_ReadInterrupts>
 8008538:	4603      	mov	r3, r0
 800853a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800853e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008542:	f040 80a7 	bne.w	8008694 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4618      	mov	r0, r3
 8008550:	f009 fd37 	bl	8011fc2 <USB_ReadDevAllOutEpInterrupt>
 8008554:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8008556:	e099      	b.n	800868c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 808e 	beq.w	8008680 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800856a:	b2d2      	uxtb	r2, r2
 800856c:	4611      	mov	r1, r2
 800856e:	4618      	mov	r0, r3
 8008570:	f009 fd5b 	bl	801202a <USB_ReadDevOutEPInterrupt>
 8008574:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00c      	beq.n	800859a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800858c:	461a      	mov	r2, r3
 800858e:	2301      	movs	r3, #1
 8008590:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008592:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fecf 	bl	8009338 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	f003 0308 	and.w	r3, r3, #8
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00c      	beq.n	80085be <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80085a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b0:	461a      	mov	r2, r3
 80085b2:	2308      	movs	r3, #8
 80085b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80085b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 ffa5 	bl	8009508 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f003 0310 	and.w	r3, r3, #16
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d008      	beq.n	80085da <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80085c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d4:	461a      	mov	r2, r3
 80085d6:	2310      	movs	r3, #16
 80085d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	f003 0302 	and.w	r3, r3, #2
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d030      	beq.n	8008646 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ec:	2b80      	cmp	r3, #128	@ 0x80
 80085ee:	d109      	bne.n	8008604 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	69fa      	ldr	r2, [r7, #28]
 80085fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008602:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008606:	4613      	mov	r3, r2
 8008608:	00db      	lsls	r3, r3, #3
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	4413      	add	r3, r2
 8008616:	3304      	adds	r3, #4
 8008618:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	78db      	ldrb	r3, [r3, #3]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d108      	bne.n	8008634 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2200      	movs	r2, #0
 8008626:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862a:	b2db      	uxtb	r3, r3
 800862c:	4619      	mov	r1, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f00f fa0a 	bl	8017a48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008640:	461a      	mov	r2, r3
 8008642:	2302      	movs	r3, #2
 8008644:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	d008      	beq.n	8008662 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800865c:	461a      	mov	r2, r3
 800865e:	2320      	movs	r3, #32
 8008660:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d009      	beq.n	8008680 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800866c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008678:	461a      	mov	r2, r3
 800867a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800867e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008682:	3301      	adds	r3, #1
 8008684:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008688:	085b      	lsrs	r3, r3, #1
 800868a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800868c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868e:	2b00      	cmp	r3, #0
 8008690:	f47f af62 	bne.w	8008558 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4618      	mov	r0, r3
 800869a:	f009 fc7f 	bl	8011f9c <USB_ReadInterrupts>
 800869e:	4603      	mov	r3, r0
 80086a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086a8:	f040 80db 	bne.w	8008862 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f009 fca0 	bl	8011ff6 <USB_ReadDevAllInEpInterrupt>
 80086b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80086bc:	e0cd      	b.n	800885a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80086be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 80c2 	beq.w	800884e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086d0:	b2d2      	uxtb	r2, r2
 80086d2:	4611      	mov	r1, r2
 80086d4:	4618      	mov	r0, r3
 80086d6:	f009 fcc6 	bl	8012066 <USB_ReadDevInEPInterrupt>
 80086da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d057      	beq.n	8008796 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80086e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e8:	f003 030f 	and.w	r3, r3, #15
 80086ec:	2201      	movs	r2, #1
 80086ee:	fa02 f303 	lsl.w	r3, r2, r3
 80086f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	43db      	mvns	r3, r3
 8008700:	69f9      	ldr	r1, [r7, #28]
 8008702:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008706:	4013      	ands	r3, r2
 8008708:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800870a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870c:	015a      	lsls	r2, r3, #5
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	4413      	add	r3, r2
 8008712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008716:	461a      	mov	r2, r3
 8008718:	2301      	movs	r3, #1
 800871a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	799b      	ldrb	r3, [r3, #6]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d132      	bne.n	800878a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008728:	4613      	mov	r3, r2
 800872a:	00db      	lsls	r3, r3, #3
 800872c:	4413      	add	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	440b      	add	r3, r1
 8008732:	3320      	adds	r3, #32
 8008734:	6819      	ldr	r1, [r3, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800873a:	4613      	mov	r3, r2
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	4413      	add	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4403      	add	r3, r0
 8008744:	331c      	adds	r3, #28
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4419      	add	r1, r3
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800874e:	4613      	mov	r3, r2
 8008750:	00db      	lsls	r3, r3, #3
 8008752:	4413      	add	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4403      	add	r3, r0
 8008758:	3320      	adds	r3, #32
 800875a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800875c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875e:	2b00      	cmp	r3, #0
 8008760:	d113      	bne.n	800878a <HAL_PCD_IRQHandler+0x3a2>
 8008762:	6879      	ldr	r1, [r7, #4]
 8008764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008766:	4613      	mov	r3, r2
 8008768:	00db      	lsls	r3, r3, #3
 800876a:	4413      	add	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	440b      	add	r3, r1
 8008770:	3324      	adds	r3, #36	@ 0x24
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d108      	bne.n	800878a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6818      	ldr	r0, [r3, #0]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008782:	461a      	mov	r2, r3
 8008784:	2101      	movs	r1, #1
 8008786:	f009 fccf 	bl	8012128 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800878a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878c:	b2db      	uxtb	r3, r3
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f00f f8d4 	bl	801793e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f003 0308 	and.w	r3, r3, #8
 800879c:	2b00      	cmp	r3, #0
 800879e:	d008      	beq.n	80087b2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80087a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ac:	461a      	mov	r2, r3
 80087ae:	2308      	movs	r3, #8
 80087b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f003 0310 	and.w	r3, r3, #16
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d008      	beq.n	80087ce <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80087bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c8:	461a      	mov	r2, r3
 80087ca:	2310      	movs	r3, #16
 80087cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d008      	beq.n	80087ea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80087d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087e4:	461a      	mov	r2, r3
 80087e6:	2340      	movs	r3, #64	@ 0x40
 80087e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f003 0302 	and.w	r3, r3, #2
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d023      	beq.n	800883c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80087f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80087f6:	6a38      	ldr	r0, [r7, #32]
 80087f8:	f008 fcb2 	bl	8011160 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80087fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087fe:	4613      	mov	r3, r2
 8008800:	00db      	lsls	r3, r3, #3
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	3310      	adds	r3, #16
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	4413      	add	r3, r2
 800880c:	3304      	adds	r3, #4
 800880e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	78db      	ldrb	r3, [r3, #3]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d108      	bne.n	800882a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	2200      	movs	r2, #0
 800881c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800881e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008820:	b2db      	uxtb	r3, r3
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f00f f921 	bl	8017a6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800882a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882c:	015a      	lsls	r2, r3, #5
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	4413      	add	r3, r2
 8008832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008836:	461a      	mov	r2, r3
 8008838:	2302      	movs	r3, #2
 800883a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008842:	2b00      	cmp	r3, #0
 8008844:	d003      	beq.n	800884e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008846:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fce8 	bl	800921e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800884e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008850:	3301      	adds	r3, #1
 8008852:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008856:	085b      	lsrs	r3, r3, #1
 8008858:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800885a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885c:	2b00      	cmp	r3, #0
 800885e:	f47f af2e 	bne.w	80086be <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4618      	mov	r0, r3
 8008868:	f009 fb98 	bl	8011f9c <USB_ReadInterrupts>
 800886c:	4603      	mov	r3, r0
 800886e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008872:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008876:	d122      	bne.n	80088be <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	69fa      	ldr	r2, [r7, #28]
 8008882:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008886:	f023 0301 	bic.w	r3, r3, #1
 800888a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008892:	2b01      	cmp	r3, #1
 8008894:	d108      	bne.n	80088a8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800889e:	2100      	movs	r1, #0
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fef3 	bl	800968c <HAL_PCDEx_LPM_Callback>
 80088a6:	e002      	b.n	80088ae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f00f f8bf 	bl	8017a2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	695a      	ldr	r2, [r3, #20]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80088bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f009 fb6a 	bl	8011f9c <USB_ReadInterrupts>
 80088c8:	4603      	mov	r3, r0
 80088ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088d2:	d112      	bne.n	80088fa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d102      	bne.n	80088ea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f00f f87b 	bl	80179e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	695a      	ldr	r2, [r3, #20]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80088f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4618      	mov	r0, r3
 8008900:	f009 fb4c 	bl	8011f9c <USB_ReadInterrupts>
 8008904:	4603      	mov	r3, r0
 8008906:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800890a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800890e:	d121      	bne.n	8008954 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	695a      	ldr	r2, [r3, #20]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800891e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008926:	2b00      	cmp	r3, #0
 8008928:	d111      	bne.n	800894e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008938:	089b      	lsrs	r3, r3, #2
 800893a:	f003 020f 	and.w	r2, r3, #15
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008944:	2101      	movs	r1, #1
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fea0 	bl	800968c <HAL_PCDEx_LPM_Callback>
 800894c:	e002      	b.n	8008954 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f00f f846 	bl	80179e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4618      	mov	r0, r3
 800895a:	f009 fb1f 	bl	8011f9c <USB_ReadInterrupts>
 800895e:	4603      	mov	r3, r0
 8008960:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008964:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008968:	f040 80b7 	bne.w	8008ada <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	69fa      	ldr	r2, [r7, #28]
 8008976:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800897a:	f023 0301 	bic.w	r3, r3, #1
 800897e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2110      	movs	r1, #16
 8008986:	4618      	mov	r0, r3
 8008988:	f008 fbea 	bl	8011160 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800898c:	2300      	movs	r3, #0
 800898e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008990:	e046      	b.n	8008a20 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	4413      	add	r3, r2
 800899a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800899e:	461a      	mov	r2, r3
 80089a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80089a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80089a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a8:	015a      	lsls	r2, r3, #5
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089b6:	0151      	lsls	r1, r2, #5
 80089b8:	69fa      	ldr	r2, [r7, #28]
 80089ba:	440a      	add	r2, r1
 80089bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80089c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80089c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089d2:	461a      	mov	r2, r3
 80089d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80089d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80089da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089dc:	015a      	lsls	r2, r3, #5
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089ea:	0151      	lsls	r1, r2, #5
 80089ec:	69fa      	ldr	r2, [r7, #28]
 80089ee:	440a      	add	r2, r1
 80089f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80089f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80089fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a0a:	0151      	lsls	r1, r2, #5
 8008a0c:	69fa      	ldr	r2, [r7, #28]
 8008a0e:	440a      	add	r2, r1
 8008a10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008a18:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	791b      	ldrb	r3, [r3, #4]
 8008a24:	461a      	mov	r2, r3
 8008a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d3b2      	bcc.n	8008992 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a32:	69db      	ldr	r3, [r3, #28]
 8008a34:	69fa      	ldr	r2, [r7, #28]
 8008a36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a3a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008a3e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	7bdb      	ldrb	r3, [r3, #15]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d016      	beq.n	8008a76 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a52:	69fa      	ldr	r2, [r7, #28]
 8008a54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a58:	f043 030b 	orr.w	r3, r3, #11
 8008a5c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a68:	69fa      	ldr	r2, [r7, #28]
 8008a6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a6e:	f043 030b 	orr.w	r3, r3, #11
 8008a72:	6453      	str	r3, [r2, #68]	@ 0x44
 8008a74:	e015      	b.n	8008aa2 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a7c:	695a      	ldr	r2, [r3, #20]
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a84:	4619      	mov	r1, r3
 8008a86:	f242 032b 	movw	r3, #8235	@ 0x202b
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	69fa      	ldr	r2, [r7, #28]
 8008a98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a9c:	f043 030b 	orr.w	r3, r3, #11
 8008aa0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	69fa      	ldr	r2, [r7, #28]
 8008aac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ab0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008ab4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6818      	ldr	r0, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	f009 fb2f 	bl	8012128 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	695a      	ldr	r2, [r3, #20]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8008ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f009 fa5c 	bl	8011f9c <USB_ReadInterrupts>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008aea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aee:	d123      	bne.n	8008b38 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f009 faf3 	bl	80120e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f008 fba7 	bl	8011252 <USB_GetDevSpeed>
 8008b04:	4603      	mov	r3, r0
 8008b06:	461a      	mov	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681c      	ldr	r4, [r3, #0]
 8008b10:	f001 fd9c 	bl	800a64c <HAL_RCC_GetHCLKFreq>
 8008b14:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f008 f8b1 	bl	8010c84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f00e ff33 	bl	801798e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	695a      	ldr	r2, [r3, #20]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f009 fa2d 	bl	8011f9c <USB_ReadInterrupts>
 8008b42:	4603      	mov	r3, r0
 8008b44:	f003 0308 	and.w	r3, r3, #8
 8008b48:	2b08      	cmp	r3, #8
 8008b4a:	d10a      	bne.n	8008b62 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f00e ff10 	bl	8017972 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	695a      	ldr	r2, [r3, #20]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f002 0208 	and.w	r2, r2, #8
 8008b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f009 fa18 	bl	8011f9c <USB_ReadInterrupts>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b72:	2b80      	cmp	r3, #128	@ 0x80
 8008b74:	d123      	bne.n	8008bbe <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b82:	2301      	movs	r3, #1
 8008b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b86:	e014      	b.n	8008bb2 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	4413      	add	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	440b      	add	r3, r1
 8008b96:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d105      	bne.n	8008bac <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fb08 	bl	80091bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bae:	3301      	adds	r3, #1
 8008bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	791b      	ldrb	r3, [r3, #4]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d3e4      	bcc.n	8008b88 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f009 f9ea 	bl	8011f9c <USB_ReadInterrupts>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bd2:	d13c      	bne.n	8008c4e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bd8:	e02b      	b.n	8008c32 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008bea:	6879      	ldr	r1, [r7, #4]
 8008bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bee:	4613      	mov	r3, r2
 8008bf0:	00db      	lsls	r3, r3, #3
 8008bf2:	4413      	add	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	440b      	add	r3, r1
 8008bf8:	3318      	adds	r3, #24
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d115      	bne.n	8008c2c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008c00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	da12      	bge.n	8008c2c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008c06:	6879      	ldr	r1, [r7, #4]
 8008c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	00db      	lsls	r3, r3, #3
 8008c0e:	4413      	add	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	440b      	add	r3, r1
 8008c14:	3317      	adds	r3, #23
 8008c16:	2201      	movs	r2, #1
 8008c18:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	4619      	mov	r1, r3
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fac8 	bl	80091bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2e:	3301      	adds	r3, #1
 8008c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	791b      	ldrb	r3, [r3, #4]
 8008c36:	461a      	mov	r2, r3
 8008c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d3cd      	bcc.n	8008bda <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	695a      	ldr	r2, [r3, #20]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8008c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f009 f9a2 	bl	8011f9c <USB_ReadInterrupts>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c62:	d156      	bne.n	8008d12 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c64:	2301      	movs	r3, #1
 8008c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c68:	e045      	b.n	8008cf6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6c:	015a      	lsls	r2, r3, #5
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	4413      	add	r3, r2
 8008c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c7a:	6879      	ldr	r1, [r7, #4]
 8008c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c7e:	4613      	mov	r3, r2
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	440b      	add	r3, r1
 8008c88:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d12e      	bne.n	8008cf0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008c92:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	da2b      	bge.n	8008cf0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8008ca4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d121      	bne.n	8008cf0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008cac:	6879      	ldr	r1, [r7, #4]
 8008cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	00db      	lsls	r3, r3, #3
 8008cb4:	4413      	add	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	440b      	add	r3, r1
 8008cba:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10a      	bne.n	8008cf0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	69fa      	ldr	r2, [r7, #28]
 8008ce4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ce8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008cec:	6053      	str	r3, [r2, #4]
            break;
 8008cee:	e008      	b.n	8008d02 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	791b      	ldrb	r3, [r3, #4]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d3b3      	bcc.n	8008c6a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	695a      	ldr	r2, [r3, #20]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008d10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f009 f940 	bl	8011f9c <USB_ReadInterrupts>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d26:	d10a      	bne.n	8008d3e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f00e feb1 	bl	8017a90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	695a      	ldr	r2, [r3, #20]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f009 f92a 	bl	8011f9c <USB_ReadInterrupts>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	f003 0304 	and.w	r3, r3, #4
 8008d4e:	2b04      	cmp	r3, #4
 8008d50:	d115      	bne.n	8008d7e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	f003 0304 	and.w	r3, r3, #4
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d002      	beq.n	8008d6a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f00e fea1 	bl	8017aac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6859      	ldr	r1, [r3, #4]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	605a      	str	r2, [r3, #4]
 8008d7a:	e000      	b.n	8008d7e <HAL_PCD_IRQHandler+0x996>
      return;
 8008d7c:	bf00      	nop
    }
  }
}
 8008d7e:	3734      	adds	r7, #52	@ 0x34
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd90      	pop	{r4, r7, pc}

08008d84 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d101      	bne.n	8008d9e <HAL_PCD_SetAddress+0x1a>
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	e012      	b.n	8008dc4 <HAL_PCD_SetAddress+0x40>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	78fa      	ldrb	r2, [r7, #3]
 8008daa:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	78fa      	ldrb	r2, [r7, #3]
 8008db2:	4611      	mov	r1, r2
 8008db4:	4618      	mov	r0, r3
 8008db6:	f009 f889 	bl	8011ecc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	4608      	mov	r0, r1
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	461a      	mov	r2, r3
 8008dda:	4603      	mov	r3, r0
 8008ddc:	70fb      	strb	r3, [r7, #3]
 8008dde:	460b      	mov	r3, r1
 8008de0:	803b      	strh	r3, [r7, #0]
 8008de2:	4613      	mov	r3, r2
 8008de4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	da0f      	bge.n	8008e12 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	f003 020f 	and.w	r2, r3, #15
 8008df8:	4613      	mov	r3, r2
 8008dfa:	00db      	lsls	r3, r3, #3
 8008dfc:	4413      	add	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	3310      	adds	r3, #16
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	4413      	add	r3, r2
 8008e06:	3304      	adds	r3, #4
 8008e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	705a      	strb	r2, [r3, #1]
 8008e10:	e00f      	b.n	8008e32 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e12:	78fb      	ldrb	r3, [r7, #3]
 8008e14:	f003 020f 	and.w	r2, r3, #15
 8008e18:	4613      	mov	r3, r2
 8008e1a:	00db      	lsls	r3, r3, #3
 8008e1c:	4413      	add	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	4413      	add	r3, r2
 8008e28:	3304      	adds	r3, #4
 8008e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008e32:	78fb      	ldrb	r3, [r7, #3]
 8008e34:	f003 030f 	and.w	r3, r3, #15
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008e3e:	883a      	ldrh	r2, [r7, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	78ba      	ldrb	r2, [r7, #2]
 8008e48:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	785b      	ldrb	r3, [r3, #1]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d004      	beq.n	8008e5c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008e5c:	78bb      	ldrb	r3, [r7, #2]
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d102      	bne.n	8008e68 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d101      	bne.n	8008e76 <HAL_PCD_EP_Open+0xaa>
 8008e72:	2302      	movs	r3, #2
 8008e74:	e00e      	b.n	8008e94 <HAL_PCD_EP_Open+0xc8>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68f9      	ldr	r1, [r7, #12]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f008 fa09 	bl	801129c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008e92:	7afb      	ldrb	r3, [r7, #11]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	da0f      	bge.n	8008ed0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008eb0:	78fb      	ldrb	r3, [r7, #3]
 8008eb2:	f003 020f 	and.w	r2, r3, #15
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	00db      	lsls	r3, r3, #3
 8008eba:	4413      	add	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	3310      	adds	r3, #16
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	705a      	strb	r2, [r3, #1]
 8008ece:	e00f      	b.n	8008ef0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	f003 020f 	and.w	r2, r3, #15
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	00db      	lsls	r3, r3, #3
 8008eda:	4413      	add	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	f003 030f 	and.w	r3, r3, #15
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d101      	bne.n	8008f0a <HAL_PCD_EP_Close+0x6e>
 8008f06:	2302      	movs	r3, #2
 8008f08:	e00e      	b.n	8008f28 <HAL_PCD_EP_Close+0x8c>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68f9      	ldr	r1, [r7, #12]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f008 fa47 	bl	80113ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	607a      	str	r2, [r7, #4]
 8008f3a:	603b      	str	r3, [r7, #0]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f40:	7afb      	ldrb	r3, [r7, #11]
 8008f42:	f003 020f 	and.w	r2, r3, #15
 8008f46:	4613      	mov	r3, r2
 8008f48:	00db      	lsls	r3, r3, #3
 8008f4a:	4413      	add	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	4413      	add	r3, r2
 8008f56:	3304      	adds	r3, #4
 8008f58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f72:	7afb      	ldrb	r3, [r7, #11]
 8008f74:	f003 030f 	and.w	r3, r3, #15
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	799b      	ldrb	r3, [r3, #6]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d102      	bne.n	8008f8c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6818      	ldr	r0, [r3, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	799b      	ldrb	r3, [r3, #6]
 8008f94:	461a      	mov	r2, r3
 8008f96:	6979      	ldr	r1, [r7, #20]
 8008f98:	f008 fae4 	bl	8011564 <USB_EPStartXfer>

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3718      	adds	r7, #24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b083      	sub	sp, #12
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	460b      	mov	r3, r1
 8008fb0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008fb2:	78fb      	ldrb	r3, [r7, #3]
 8008fb4:	f003 020f 	and.w	r2, r3, #15
 8008fb8:	6879      	ldr	r1, [r7, #4]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	00db      	lsls	r3, r3, #3
 8008fbe:	4413      	add	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	440b      	add	r3, r1
 8008fc4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008fc8:	681b      	ldr	r3, [r3, #0]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b086      	sub	sp, #24
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	607a      	str	r2, [r7, #4]
 8008fe0:	603b      	str	r3, [r7, #0]
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fe6:	7afb      	ldrb	r3, [r7, #11]
 8008fe8:	f003 020f 	and.w	r2, r3, #15
 8008fec:	4613      	mov	r3, r2
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	4413      	add	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	3310      	adds	r3, #16
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2200      	movs	r2, #0
 800900e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	2201      	movs	r2, #1
 8009014:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009016:	7afb      	ldrb	r3, [r7, #11]
 8009018:	f003 030f 	and.w	r3, r3, #15
 800901c:	b2da      	uxtb	r2, r3
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	799b      	ldrb	r3, [r3, #6]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d102      	bne.n	8009030 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	799b      	ldrb	r3, [r3, #6]
 8009038:	461a      	mov	r2, r3
 800903a:	6979      	ldr	r1, [r7, #20]
 800903c:	f008 fa92 	bl	8011564 <USB_EPStartXfer>

  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3718      	adds	r7, #24
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b084      	sub	sp, #16
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
 8009052:	460b      	mov	r3, r1
 8009054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009056:	78fb      	ldrb	r3, [r7, #3]
 8009058:	f003 030f 	and.w	r3, r3, #15
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	7912      	ldrb	r2, [r2, #4]
 8009060:	4293      	cmp	r3, r2
 8009062:	d901      	bls.n	8009068 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e04f      	b.n	8009108 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800906c:	2b00      	cmp	r3, #0
 800906e:	da0f      	bge.n	8009090 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009070:	78fb      	ldrb	r3, [r7, #3]
 8009072:	f003 020f 	and.w	r2, r3, #15
 8009076:	4613      	mov	r3, r2
 8009078:	00db      	lsls	r3, r3, #3
 800907a:	4413      	add	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	3310      	adds	r3, #16
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	4413      	add	r3, r2
 8009084:	3304      	adds	r3, #4
 8009086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2201      	movs	r2, #1
 800908c:	705a      	strb	r2, [r3, #1]
 800908e:	e00d      	b.n	80090ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009090:	78fa      	ldrb	r2, [r7, #3]
 8009092:	4613      	mov	r3, r2
 8009094:	00db      	lsls	r3, r3, #3
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	4413      	add	r3, r2
 80090a2:	3304      	adds	r3, #4
 80090a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2201      	movs	r2, #1
 80090b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090b2:	78fb      	ldrb	r3, [r7, #3]
 80090b4:	f003 030f 	and.w	r3, r3, #15
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d101      	bne.n	80090cc <HAL_PCD_EP_SetStall+0x82>
 80090c8:	2302      	movs	r3, #2
 80090ca:	e01d      	b.n	8009108 <HAL_PCD_EP_SetStall+0xbe>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68f9      	ldr	r1, [r7, #12]
 80090da:	4618      	mov	r0, r3
 80090dc:	f008 fe22 	bl	8011d24 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80090e0:	78fb      	ldrb	r3, [r7, #3]
 80090e2:	f003 030f 	and.w	r3, r3, #15
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d109      	bne.n	80090fe <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6818      	ldr	r0, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	7999      	ldrb	r1, [r3, #6]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80090f8:	461a      	mov	r2, r3
 80090fa:	f009 f815 	bl	8012128 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800911c:	78fb      	ldrb	r3, [r7, #3]
 800911e:	f003 030f 	and.w	r3, r3, #15
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	7912      	ldrb	r2, [r2, #4]
 8009126:	4293      	cmp	r3, r2
 8009128:	d901      	bls.n	800912e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e042      	b.n	80091b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800912e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009132:	2b00      	cmp	r3, #0
 8009134:	da0f      	bge.n	8009156 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009136:	78fb      	ldrb	r3, [r7, #3]
 8009138:	f003 020f 	and.w	r2, r3, #15
 800913c:	4613      	mov	r3, r2
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	3310      	adds	r3, #16
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	4413      	add	r3, r2
 800914a:	3304      	adds	r3, #4
 800914c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2201      	movs	r2, #1
 8009152:	705a      	strb	r2, [r3, #1]
 8009154:	e00f      	b.n	8009176 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009156:	78fb      	ldrb	r3, [r7, #3]
 8009158:	f003 020f 	and.w	r2, r3, #15
 800915c:	4613      	mov	r3, r2
 800915e:	00db      	lsls	r3, r3, #3
 8009160:	4413      	add	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	4413      	add	r3, r2
 800916c:	3304      	adds	r3, #4
 800916e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	f003 030f 	and.w	r3, r3, #15
 8009182:	b2da      	uxtb	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800918e:	2b01      	cmp	r3, #1
 8009190:	d101      	bne.n	8009196 <HAL_PCD_EP_ClrStall+0x86>
 8009192:	2302      	movs	r3, #2
 8009194:	e00e      	b.n	80091b4 <HAL_PCD_EP_ClrStall+0xa4>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68f9      	ldr	r1, [r7, #12]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f008 fe2b 	bl	8011e00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	460b      	mov	r3, r1
 80091c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80091c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	da0c      	bge.n	80091ea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091d0:	78fb      	ldrb	r3, [r7, #3]
 80091d2:	f003 020f 	and.w	r2, r3, #15
 80091d6:	4613      	mov	r3, r2
 80091d8:	00db      	lsls	r3, r3, #3
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	3310      	adds	r3, #16
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	4413      	add	r3, r2
 80091e4:	3304      	adds	r3, #4
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	e00c      	b.n	8009204 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091ea:	78fb      	ldrb	r3, [r7, #3]
 80091ec:	f003 020f 	and.w	r2, r3, #15
 80091f0:	4613      	mov	r3, r2
 80091f2:	00db      	lsls	r3, r3, #3
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	4413      	add	r3, r2
 8009200:	3304      	adds	r3, #4
 8009202:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68f9      	ldr	r1, [r7, #12]
 800920a:	4618      	mov	r0, r3
 800920c:	f008 fc4a 	bl	8011aa4 <USB_EPStopXfer>
 8009210:	4603      	mov	r3, r0
 8009212:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009214:	7afb      	ldrb	r3, [r7, #11]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b08a      	sub	sp, #40	@ 0x28
 8009222:	af02      	add	r7, sp, #8
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	4613      	mov	r3, r2
 8009236:	00db      	lsls	r3, r3, #3
 8009238:	4413      	add	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	3310      	adds	r3, #16
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	4413      	add	r3, r2
 8009242:	3304      	adds	r3, #4
 8009244:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	695a      	ldr	r2, [r3, #20]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	429a      	cmp	r2, r3
 8009250:	d901      	bls.n	8009256 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e06b      	b.n	800932e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	691a      	ldr	r2, [r3, #16]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	695b      	ldr	r3, [r3, #20]
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	69fa      	ldr	r2, [r7, #28]
 8009268:	429a      	cmp	r2, r3
 800926a:	d902      	bls.n	8009272 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	3303      	adds	r3, #3
 8009276:	089b      	lsrs	r3, r3, #2
 8009278:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800927a:	e02a      	b.n	80092d2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	691a      	ldr	r2, [r3, #16]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	695b      	ldr	r3, [r3, #20]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	69fa      	ldr	r2, [r7, #28]
 800928e:	429a      	cmp	r2, r3
 8009290:	d902      	bls.n	8009298 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	3303      	adds	r3, #3
 800929c:	089b      	lsrs	r3, r3, #2
 800929e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	68d9      	ldr	r1, [r3, #12]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	4603      	mov	r3, r0
 80092b4:	6978      	ldr	r0, [r7, #20]
 80092b6:	f008 fc9f 	bl	8011bf8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	68da      	ldr	r2, [r3, #12]
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	441a      	add	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	695a      	ldr	r2, [r3, #20]
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	441a      	add	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	015a      	lsls	r2, r3, #5
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	4413      	add	r3, r2
 80092da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80092e2:	69ba      	ldr	r2, [r7, #24]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d809      	bhi.n	80092fc <PCD_WriteEmptyTxFifo+0xde>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	695a      	ldr	r2, [r3, #20]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d203      	bcs.n	80092fc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1bf      	bne.n	800927c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	691a      	ldr	r2, [r3, #16]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	429a      	cmp	r2, r3
 8009306:	d811      	bhi.n	800932c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	f003 030f 	and.w	r3, r3, #15
 800930e:	2201      	movs	r2, #1
 8009310:	fa02 f303 	lsl.w	r3, r2, r3
 8009314:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800931c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	43db      	mvns	r3, r3
 8009322:	6939      	ldr	r1, [r7, #16]
 8009324:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009328:	4013      	ands	r3, r2
 800932a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3720      	adds	r7, #32
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
	...

08009338 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b088      	sub	sp, #32
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	333c      	adds	r3, #60	@ 0x3c
 8009350:	3304      	adds	r3, #4
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	015a      	lsls	r2, r3, #5
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	4413      	add	r3, r2
 800935e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	799b      	ldrb	r3, [r3, #6]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d17b      	bne.n	8009466 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	f003 0308 	and.w	r3, r3, #8
 8009374:	2b00      	cmp	r3, #0
 8009376:	d015      	beq.n	80093a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	4a61      	ldr	r2, [pc, #388]	@ (8009500 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800937c:	4293      	cmp	r3, r2
 800937e:	f240 80b9 	bls.w	80094f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 80b3 	beq.w	80094f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	4413      	add	r3, r2
 8009396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800939a:	461a      	mov	r2, r3
 800939c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093a0:	6093      	str	r3, [r2, #8]
 80093a2:	e0a7      	b.n	80094f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	f003 0320 	and.w	r3, r3, #32
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d009      	beq.n	80093c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	015a      	lsls	r2, r3, #5
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	4413      	add	r3, r2
 80093b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ba:	461a      	mov	r2, r3
 80093bc:	2320      	movs	r3, #32
 80093be:	6093      	str	r3, [r2, #8]
 80093c0:	e098      	b.n	80094f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f040 8093 	bne.w	80094f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	4a4b      	ldr	r2, [pc, #300]	@ (8009500 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d90f      	bls.n	80093f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00a      	beq.n	80093f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ec:	461a      	mov	r2, r3
 80093ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093f2:	6093      	str	r3, [r2, #8]
 80093f4:	e07e      	b.n	80094f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	4613      	mov	r3, r2
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	4413      	add	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	4413      	add	r3, r2
 8009408:	3304      	adds	r3, #4
 800940a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6a1a      	ldr	r2, [r3, #32]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	0159      	lsls	r1, r3, #5
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	440b      	add	r3, r1
 8009418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009422:	1ad2      	subs	r2, r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d114      	bne.n	8009458 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d109      	bne.n	800944a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009440:	461a      	mov	r2, r3
 8009442:	2101      	movs	r1, #1
 8009444:	f008 fe70 	bl	8012128 <USB_EP0_OutStart>
 8009448:	e006      	b.n	8009458 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	68da      	ldr	r2, [r3, #12]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	441a      	add	r2, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f00e fa52 	bl	8017908 <HAL_PCD_DataOutStageCallback>
 8009464:	e046      	b.n	80094f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	4a26      	ldr	r2, [pc, #152]	@ (8009504 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d124      	bne.n	80094b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00a      	beq.n	800948e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	015a      	lsls	r2, r3, #5
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	4413      	add	r3, r2
 8009480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009484:	461a      	mov	r2, r3
 8009486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800948a:	6093      	str	r3, [r2, #8]
 800948c:	e032      	b.n	80094f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	f003 0320 	and.w	r3, r3, #32
 8009494:	2b00      	cmp	r3, #0
 8009496:	d008      	beq.n	80094aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	015a      	lsls	r2, r3, #5
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	4413      	add	r3, r2
 80094a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094a4:	461a      	mov	r2, r3
 80094a6:	2320      	movs	r3, #32
 80094a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f00e fa29 	bl	8017908 <HAL_PCD_DataOutStageCallback>
 80094b6:	e01d      	b.n	80094f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d114      	bne.n	80094e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80094be:	6879      	ldr	r1, [r7, #4]
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	4613      	mov	r3, r2
 80094c4:	00db      	lsls	r3, r3, #3
 80094c6:	4413      	add	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	440b      	add	r3, r1
 80094cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d108      	bne.n	80094e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6818      	ldr	r0, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80094e0:	461a      	mov	r2, r3
 80094e2:	2100      	movs	r1, #0
 80094e4:	f008 fe20 	bl	8012128 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	4619      	mov	r1, r3
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f00e fa0a 	bl	8017908 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3720      	adds	r7, #32
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	4f54300a 	.word	0x4f54300a
 8009504:	4f54310a 	.word	0x4f54310a

08009508 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	333c      	adds	r3, #60	@ 0x3c
 8009520:	3304      	adds	r3, #4
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	4413      	add	r3, r2
 800952e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	4a15      	ldr	r2, [pc, #84]	@ (8009590 <PCD_EP_OutSetupPacket_int+0x88>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d90e      	bls.n	800955c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009544:	2b00      	cmp	r3, #0
 8009546:	d009      	beq.n	800955c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	015a      	lsls	r2, r3, #5
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	4413      	add	r3, r2
 8009550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009554:	461a      	mov	r2, r3
 8009556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800955a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f00e f9c1 	bl	80178e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	4a0a      	ldr	r2, [pc, #40]	@ (8009590 <PCD_EP_OutSetupPacket_int+0x88>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d90c      	bls.n	8009584 <PCD_EP_OutSetupPacket_int+0x7c>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	799b      	ldrb	r3, [r3, #6]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d108      	bne.n	8009584 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6818      	ldr	r0, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800957c:	461a      	mov	r2, r3
 800957e:	2101      	movs	r1, #1
 8009580:	f008 fdd2 	bl	8012128 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	4f54300a 	.word	0x4f54300a

08009594 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	460b      	mov	r3, r1
 800959e:	70fb      	strb	r3, [r7, #3]
 80095a0:	4613      	mov	r3, r2
 80095a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80095ac:	78fb      	ldrb	r3, [r7, #3]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d107      	bne.n	80095c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80095b2:	883b      	ldrh	r3, [r7, #0]
 80095b4:	0419      	lsls	r1, r3, #16
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	430a      	orrs	r2, r1
 80095be:	629a      	str	r2, [r3, #40]	@ 0x28
 80095c0:	e028      	b.n	8009614 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c8:	0c1b      	lsrs	r3, r3, #16
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	4413      	add	r3, r2
 80095ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80095d0:	2300      	movs	r3, #0
 80095d2:	73fb      	strb	r3, [r7, #15]
 80095d4:	e00d      	b.n	80095f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	3340      	adds	r3, #64	@ 0x40
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	0c1b      	lsrs	r3, r3, #16
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	4413      	add	r3, r2
 80095ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80095ec:	7bfb      	ldrb	r3, [r7, #15]
 80095ee:	3301      	adds	r3, #1
 80095f0:	73fb      	strb	r3, [r7, #15]
 80095f2:	7bfa      	ldrb	r2, [r7, #15]
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d3ec      	bcc.n	80095d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80095fc:	883b      	ldrh	r3, [r7, #0]
 80095fe:	0418      	lsls	r0, r3, #16
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6819      	ldr	r1, [r3, #0]
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	3b01      	subs	r3, #1
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	4302      	orrs	r2, r0
 800960c:	3340      	adds	r3, #64	@ 0x40
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	440b      	add	r3, r1
 8009612:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	460b      	mov	r3, r1
 800962c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	887a      	ldrh	r2, [r7, #2]
 8009634:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009672:	4b05      	ldr	r3, [pc, #20]	@ (8009688 <HAL_PCDEx_ActivateLPM+0x44>)
 8009674:	4313      	orrs	r3, r2
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	10000003 	.word	0x10000003

0800968c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80096ac:	4b19      	ldr	r3, [pc, #100]	@ (8009714 <HAL_PWREx_ConfigSupply+0x70>)
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f003 0304 	and.w	r3, r3, #4
 80096b4:	2b04      	cmp	r3, #4
 80096b6:	d00a      	beq.n	80096ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80096b8:	4b16      	ldr	r3, [pc, #88]	@ (8009714 <HAL_PWREx_ConfigSupply+0x70>)
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d001      	beq.n	80096ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e01f      	b.n	800970a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	e01d      	b.n	800970a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80096ce:	4b11      	ldr	r3, [pc, #68]	@ (8009714 <HAL_PWREx_ConfigSupply+0x70>)
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	f023 0207 	bic.w	r2, r3, #7
 80096d6:	490f      	ldr	r1, [pc, #60]	@ (8009714 <HAL_PWREx_ConfigSupply+0x70>)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4313      	orrs	r3, r2
 80096dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80096de:	f7fa f881 	bl	80037e4 <HAL_GetTick>
 80096e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80096e4:	e009      	b.n	80096fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80096e6:	f7fa f87d 	bl	80037e4 <HAL_GetTick>
 80096ea:	4602      	mov	r2, r0
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80096f4:	d901      	bls.n	80096fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e007      	b.n	800970a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80096fa:	4b06      	ldr	r3, [pc, #24]	@ (8009714 <HAL_PWREx_ConfigSupply+0x70>)
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009706:	d1ee      	bne.n	80096e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	58024800 	.word	0x58024800

08009718 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009718:	b480      	push	{r7}
 800971a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800971c:	4b05      	ldr	r3, [pc, #20]	@ (8009734 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	4a04      	ldr	r2, [pc, #16]	@ (8009734 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009722:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009726:	60d3      	str	r3, [r2, #12]
}
 8009728:	bf00      	nop
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	58024800 	.word	0x58024800

08009738 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08c      	sub	sp, #48	@ 0x30
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d102      	bne.n	800974c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	f000 bc48 	b.w	8009fdc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 0301 	and.w	r3, r3, #1
 8009754:	2b00      	cmp	r3, #0
 8009756:	f000 8088 	beq.w	800986a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800975a:	4b99      	ldr	r3, [pc, #612]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009762:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009764:	4b96      	ldr	r3, [pc, #600]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009768:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800976a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976c:	2b10      	cmp	r3, #16
 800976e:	d007      	beq.n	8009780 <HAL_RCC_OscConfig+0x48>
 8009770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009772:	2b18      	cmp	r3, #24
 8009774:	d111      	bne.n	800979a <HAL_RCC_OscConfig+0x62>
 8009776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009778:	f003 0303 	and.w	r3, r3, #3
 800977c:	2b02      	cmp	r3, #2
 800977e:	d10c      	bne.n	800979a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009780:	4b8f      	ldr	r3, [pc, #572]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d06d      	beq.n	8009868 <HAL_RCC_OscConfig+0x130>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d169      	bne.n	8009868 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	f000 bc21 	b.w	8009fdc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097a2:	d106      	bne.n	80097b2 <HAL_RCC_OscConfig+0x7a>
 80097a4:	4b86      	ldr	r3, [pc, #536]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a85      	ldr	r2, [pc, #532]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	e02e      	b.n	8009810 <HAL_RCC_OscConfig+0xd8>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10c      	bne.n	80097d4 <HAL_RCC_OscConfig+0x9c>
 80097ba:	4b81      	ldr	r3, [pc, #516]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a80      	ldr	r2, [pc, #512]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097c4:	6013      	str	r3, [r2, #0]
 80097c6:	4b7e      	ldr	r3, [pc, #504]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a7d      	ldr	r2, [pc, #500]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80097d0:	6013      	str	r3, [r2, #0]
 80097d2:	e01d      	b.n	8009810 <HAL_RCC_OscConfig+0xd8>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80097dc:	d10c      	bne.n	80097f8 <HAL_RCC_OscConfig+0xc0>
 80097de:	4b78      	ldr	r3, [pc, #480]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a77      	ldr	r2, [pc, #476]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80097e8:	6013      	str	r3, [r2, #0]
 80097ea:	4b75      	ldr	r3, [pc, #468]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a74      	ldr	r2, [pc, #464]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097f4:	6013      	str	r3, [r2, #0]
 80097f6:	e00b      	b.n	8009810 <HAL_RCC_OscConfig+0xd8>
 80097f8:	4b71      	ldr	r3, [pc, #452]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a70      	ldr	r2, [pc, #448]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009802:	6013      	str	r3, [r2, #0]
 8009804:	4b6e      	ldr	r3, [pc, #440]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a6d      	ldr	r2, [pc, #436]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 800980a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800980e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d013      	beq.n	8009840 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009818:	f7f9 ffe4 	bl	80037e4 <HAL_GetTick>
 800981c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800981e:	e008      	b.n	8009832 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009820:	f7f9 ffe0 	bl	80037e4 <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	2b64      	cmp	r3, #100	@ 0x64
 800982c:	d901      	bls.n	8009832 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e3d4      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009832:	4b63      	ldr	r3, [pc, #396]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800983a:	2b00      	cmp	r3, #0
 800983c:	d0f0      	beq.n	8009820 <HAL_RCC_OscConfig+0xe8>
 800983e:	e014      	b.n	800986a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009840:	f7f9 ffd0 	bl	80037e4 <HAL_GetTick>
 8009844:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009846:	e008      	b.n	800985a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009848:	f7f9 ffcc 	bl	80037e4 <HAL_GetTick>
 800984c:	4602      	mov	r2, r0
 800984e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	2b64      	cmp	r3, #100	@ 0x64
 8009854:	d901      	bls.n	800985a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	e3c0      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800985a:	4b59      	ldr	r3, [pc, #356]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1f0      	bne.n	8009848 <HAL_RCC_OscConfig+0x110>
 8009866:	e000      	b.n	800986a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 0302 	and.w	r3, r3, #2
 8009872:	2b00      	cmp	r3, #0
 8009874:	f000 80ca 	beq.w	8009a0c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009878:	4b51      	ldr	r3, [pc, #324]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009880:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009882:	4b4f      	ldr	r3, [pc, #316]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009886:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009888:	6a3b      	ldr	r3, [r7, #32]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d007      	beq.n	800989e <HAL_RCC_OscConfig+0x166>
 800988e:	6a3b      	ldr	r3, [r7, #32]
 8009890:	2b18      	cmp	r3, #24
 8009892:	d156      	bne.n	8009942 <HAL_RCC_OscConfig+0x20a>
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	f003 0303 	and.w	r3, r3, #3
 800989a:	2b00      	cmp	r3, #0
 800989c:	d151      	bne.n	8009942 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800989e:	4b48      	ldr	r3, [pc, #288]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 0304 	and.w	r3, r3, #4
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d005      	beq.n	80098b6 <HAL_RCC_OscConfig+0x17e>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e392      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80098b6:	4b42      	ldr	r3, [pc, #264]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f023 0219 	bic.w	r2, r3, #25
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	493f      	ldr	r1, [pc, #252]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80098c4:	4313      	orrs	r3, r2
 80098c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c8:	f7f9 ff8c 	bl	80037e4 <HAL_GetTick>
 80098cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098ce:	e008      	b.n	80098e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098d0:	f7f9 ff88 	bl	80037e4 <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d901      	bls.n	80098e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80098de:	2303      	movs	r3, #3
 80098e0:	e37c      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098e2:	4b37      	ldr	r3, [pc, #220]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 0304 	and.w	r3, r3, #4
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d0f0      	beq.n	80098d0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098ee:	f7f9 ffa9 	bl	8003844 <HAL_GetREVID>
 80098f2:	4603      	mov	r3, r0
 80098f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d817      	bhi.n	800992c <HAL_RCC_OscConfig+0x1f4>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	2b40      	cmp	r3, #64	@ 0x40
 8009902:	d108      	bne.n	8009916 <HAL_RCC_OscConfig+0x1de>
 8009904:	4b2e      	ldr	r3, [pc, #184]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800990c:	4a2c      	ldr	r2, [pc, #176]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 800990e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009912:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009914:	e07a      	b.n	8009a0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009916:	4b2a      	ldr	r3, [pc, #168]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	031b      	lsls	r3, r3, #12
 8009924:	4926      	ldr	r1, [pc, #152]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009926:	4313      	orrs	r3, r2
 8009928:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800992a:	e06f      	b.n	8009a0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800992c:	4b24      	ldr	r3, [pc, #144]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	061b      	lsls	r3, r3, #24
 800993a:	4921      	ldr	r1, [pc, #132]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 800993c:	4313      	orrs	r3, r2
 800993e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009940:	e064      	b.n	8009a0c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d047      	beq.n	80099da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800994a:	4b1d      	ldr	r3, [pc, #116]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f023 0219 	bic.w	r2, r3, #25
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	491a      	ldr	r1, [pc, #104]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009958:	4313      	orrs	r3, r2
 800995a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800995c:	f7f9 ff42 	bl	80037e4 <HAL_GetTick>
 8009960:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009962:	e008      	b.n	8009976 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009964:	f7f9 ff3e 	bl	80037e4 <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	2b02      	cmp	r3, #2
 8009970:	d901      	bls.n	8009976 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e332      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009976:	4b12      	ldr	r3, [pc, #72]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0304 	and.w	r3, r3, #4
 800997e:	2b00      	cmp	r3, #0
 8009980:	d0f0      	beq.n	8009964 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009982:	f7f9 ff5f 	bl	8003844 <HAL_GetREVID>
 8009986:	4603      	mov	r3, r0
 8009988:	f241 0203 	movw	r2, #4099	@ 0x1003
 800998c:	4293      	cmp	r3, r2
 800998e:	d819      	bhi.n	80099c4 <HAL_RCC_OscConfig+0x28c>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	2b40      	cmp	r3, #64	@ 0x40
 8009996:	d108      	bne.n	80099aa <HAL_RCC_OscConfig+0x272>
 8009998:	4b09      	ldr	r3, [pc, #36]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80099a0:	4a07      	ldr	r2, [pc, #28]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80099a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099a6:	6053      	str	r3, [r2, #4]
 80099a8:	e030      	b.n	8009a0c <HAL_RCC_OscConfig+0x2d4>
 80099aa:	4b05      	ldr	r3, [pc, #20]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	031b      	lsls	r3, r3, #12
 80099b8:	4901      	ldr	r1, [pc, #4]	@ (80099c0 <HAL_RCC_OscConfig+0x288>)
 80099ba:	4313      	orrs	r3, r2
 80099bc:	604b      	str	r3, [r1, #4]
 80099be:	e025      	b.n	8009a0c <HAL_RCC_OscConfig+0x2d4>
 80099c0:	58024400 	.word	0x58024400
 80099c4:	4b9a      	ldr	r3, [pc, #616]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	061b      	lsls	r3, r3, #24
 80099d2:	4997      	ldr	r1, [pc, #604]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 80099d4:	4313      	orrs	r3, r2
 80099d6:	604b      	str	r3, [r1, #4]
 80099d8:	e018      	b.n	8009a0c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099da:	4b95      	ldr	r3, [pc, #596]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a94      	ldr	r2, [pc, #592]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 80099e0:	f023 0301 	bic.w	r3, r3, #1
 80099e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099e6:	f7f9 fefd 	bl	80037e4 <HAL_GetTick>
 80099ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099ec:	e008      	b.n	8009a00 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099ee:	f7f9 fef9 	bl	80037e4 <HAL_GetTick>
 80099f2:	4602      	mov	r2, r0
 80099f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d901      	bls.n	8009a00 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80099fc:	2303      	movs	r3, #3
 80099fe:	e2ed      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a00:	4b8b      	ldr	r3, [pc, #556]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1f0      	bne.n	80099ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0310 	and.w	r3, r3, #16
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f000 80a9 	beq.w	8009b6c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a1a:	4b85      	ldr	r3, [pc, #532]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a24:	4b82      	ldr	r3, [pc, #520]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a28:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	2b08      	cmp	r3, #8
 8009a2e:	d007      	beq.n	8009a40 <HAL_RCC_OscConfig+0x308>
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	2b18      	cmp	r3, #24
 8009a34:	d13a      	bne.n	8009aac <HAL_RCC_OscConfig+0x374>
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f003 0303 	and.w	r3, r3, #3
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d135      	bne.n	8009aac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a40:	4b7b      	ldr	r3, [pc, #492]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d005      	beq.n	8009a58 <HAL_RCC_OscConfig+0x320>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	69db      	ldr	r3, [r3, #28]
 8009a50:	2b80      	cmp	r3, #128	@ 0x80
 8009a52:	d001      	beq.n	8009a58 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e2c1      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a58:	f7f9 fef4 	bl	8003844 <HAL_GetREVID>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d817      	bhi.n	8009a96 <HAL_RCC_OscConfig+0x35e>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	2b20      	cmp	r3, #32
 8009a6c:	d108      	bne.n	8009a80 <HAL_RCC_OscConfig+0x348>
 8009a6e:	4b70      	ldr	r3, [pc, #448]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009a76:	4a6e      	ldr	r2, [pc, #440]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009a78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a7c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a7e:	e075      	b.n	8009b6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a80:	4b6b      	ldr	r3, [pc, #428]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a1b      	ldr	r3, [r3, #32]
 8009a8c:	069b      	lsls	r3, r3, #26
 8009a8e:	4968      	ldr	r1, [pc, #416]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009a90:	4313      	orrs	r3, r2
 8009a92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a94:	e06a      	b.n	8009b6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a96:	4b66      	ldr	r3, [pc, #408]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	061b      	lsls	r3, r3, #24
 8009aa4:	4962      	ldr	r1, [pc, #392]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009aaa:	e05f      	b.n	8009b6c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d042      	beq.n	8009b3a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009ab4:	4b5e      	ldr	r3, [pc, #376]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a5d      	ldr	r2, [pc, #372]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac0:	f7f9 fe90 	bl	80037e4 <HAL_GetTick>
 8009ac4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ac6:	e008      	b.n	8009ada <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009ac8:	f7f9 fe8c 	bl	80037e4 <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d901      	bls.n	8009ada <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e280      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ada:	4b55      	ldr	r3, [pc, #340]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d0f0      	beq.n	8009ac8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ae6:	f7f9 fead 	bl	8003844 <HAL_GetREVID>
 8009aea:	4603      	mov	r3, r0
 8009aec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d817      	bhi.n	8009b24 <HAL_RCC_OscConfig+0x3ec>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a1b      	ldr	r3, [r3, #32]
 8009af8:	2b20      	cmp	r3, #32
 8009afa:	d108      	bne.n	8009b0e <HAL_RCC_OscConfig+0x3d6>
 8009afc:	4b4c      	ldr	r3, [pc, #304]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009b04:	4a4a      	ldr	r2, [pc, #296]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009b06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b0a:	6053      	str	r3, [r2, #4]
 8009b0c:	e02e      	b.n	8009b6c <HAL_RCC_OscConfig+0x434>
 8009b0e:	4b48      	ldr	r3, [pc, #288]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	069b      	lsls	r3, r3, #26
 8009b1c:	4944      	ldr	r1, [pc, #272]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	604b      	str	r3, [r1, #4]
 8009b22:	e023      	b.n	8009b6c <HAL_RCC_OscConfig+0x434>
 8009b24:	4b42      	ldr	r3, [pc, #264]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a1b      	ldr	r3, [r3, #32]
 8009b30:	061b      	lsls	r3, r3, #24
 8009b32:	493f      	ldr	r1, [pc, #252]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009b34:	4313      	orrs	r3, r2
 8009b36:	60cb      	str	r3, [r1, #12]
 8009b38:	e018      	b.n	8009b6c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a3c      	ldr	r2, [pc, #240]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009b40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b46:	f7f9 fe4d 	bl	80037e4 <HAL_GetTick>
 8009b4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b4c:	e008      	b.n	8009b60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009b4e:	f7f9 fe49 	bl	80037e4 <HAL_GetTick>
 8009b52:	4602      	mov	r2, r0
 8009b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d901      	bls.n	8009b60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	e23d      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b60:	4b33      	ldr	r3, [pc, #204]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1f0      	bne.n	8009b4e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 0308 	and.w	r3, r3, #8
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d036      	beq.n	8009be6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d019      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b80:	4b2b      	ldr	r3, [pc, #172]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b84:	4a2a      	ldr	r2, [pc, #168]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009b86:	f043 0301 	orr.w	r3, r3, #1
 8009b8a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b8c:	f7f9 fe2a 	bl	80037e4 <HAL_GetTick>
 8009b90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b92:	e008      	b.n	8009ba6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b94:	f7f9 fe26 	bl	80037e4 <HAL_GetTick>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d901      	bls.n	8009ba6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e21a      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ba6:	4b22      	ldr	r3, [pc, #136]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0f0      	beq.n	8009b94 <HAL_RCC_OscConfig+0x45c>
 8009bb2:	e018      	b.n	8009be6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009bba:	f023 0301 	bic.w	r3, r3, #1
 8009bbe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bc0:	f7f9 fe10 	bl	80037e4 <HAL_GetTick>
 8009bc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009bc6:	e008      	b.n	8009bda <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bc8:	f7f9 fe0c 	bl	80037e4 <HAL_GetTick>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d901      	bls.n	8009bda <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e200      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009bda:	4b15      	ldr	r3, [pc, #84]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bde:	f003 0302 	and.w	r3, r3, #2
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1f0      	bne.n	8009bc8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f003 0320 	and.w	r3, r3, #32
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d039      	beq.n	8009c66 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d01c      	beq.n	8009c34 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009c00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009c04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c06:	f7f9 fded 	bl	80037e4 <HAL_GetTick>
 8009c0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c0c:	e008      	b.n	8009c20 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c0e:	f7f9 fde9 	bl	80037e4 <HAL_GetTick>
 8009c12:	4602      	mov	r2, r0
 8009c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d901      	bls.n	8009c20 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e1dd      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c20:	4b03      	ldr	r3, [pc, #12]	@ (8009c30 <HAL_RCC_OscConfig+0x4f8>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d0f0      	beq.n	8009c0e <HAL_RCC_OscConfig+0x4d6>
 8009c2c:	e01b      	b.n	8009c66 <HAL_RCC_OscConfig+0x52e>
 8009c2e:	bf00      	nop
 8009c30:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c34:	4b9b      	ldr	r3, [pc, #620]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a9a      	ldr	r2, [pc, #616]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009c3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c40:	f7f9 fdd0 	bl	80037e4 <HAL_GetTick>
 8009c44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c46:	e008      	b.n	8009c5a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c48:	f7f9 fdcc 	bl	80037e4 <HAL_GetTick>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d901      	bls.n	8009c5a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009c56:	2303      	movs	r3, #3
 8009c58:	e1c0      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c5a:	4b92      	ldr	r3, [pc, #584]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1f0      	bne.n	8009c48 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 0304 	and.w	r3, r3, #4
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f000 8081 	beq.w	8009d76 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009c74:	4b8c      	ldr	r3, [pc, #560]	@ (8009ea8 <HAL_RCC_OscConfig+0x770>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a8b      	ldr	r2, [pc, #556]	@ (8009ea8 <HAL_RCC_OscConfig+0x770>)
 8009c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c80:	f7f9 fdb0 	bl	80037e4 <HAL_GetTick>
 8009c84:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c86:	e008      	b.n	8009c9a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c88:	f7f9 fdac 	bl	80037e4 <HAL_GetTick>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	2b64      	cmp	r3, #100	@ 0x64
 8009c94:	d901      	bls.n	8009c9a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009c96:	2303      	movs	r3, #3
 8009c98:	e1a0      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c9a:	4b83      	ldr	r3, [pc, #524]	@ (8009ea8 <HAL_RCC_OscConfig+0x770>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d0f0      	beq.n	8009c88 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d106      	bne.n	8009cbc <HAL_RCC_OscConfig+0x584>
 8009cae:	4b7d      	ldr	r3, [pc, #500]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cb2:	4a7c      	ldr	r2, [pc, #496]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009cb4:	f043 0301 	orr.w	r3, r3, #1
 8009cb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cba:	e02d      	b.n	8009d18 <HAL_RCC_OscConfig+0x5e0>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10c      	bne.n	8009cde <HAL_RCC_OscConfig+0x5a6>
 8009cc4:	4b77      	ldr	r3, [pc, #476]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cc8:	4a76      	ldr	r2, [pc, #472]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009cca:	f023 0301 	bic.w	r3, r3, #1
 8009cce:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cd0:	4b74      	ldr	r3, [pc, #464]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cd4:	4a73      	ldr	r2, [pc, #460]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009cd6:	f023 0304 	bic.w	r3, r3, #4
 8009cda:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cdc:	e01c      	b.n	8009d18 <HAL_RCC_OscConfig+0x5e0>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	2b05      	cmp	r3, #5
 8009ce4:	d10c      	bne.n	8009d00 <HAL_RCC_OscConfig+0x5c8>
 8009ce6:	4b6f      	ldr	r3, [pc, #444]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cea:	4a6e      	ldr	r2, [pc, #440]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009cec:	f043 0304 	orr.w	r3, r3, #4
 8009cf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cf2:	4b6c      	ldr	r3, [pc, #432]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cf6:	4a6b      	ldr	r2, [pc, #428]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009cf8:	f043 0301 	orr.w	r3, r3, #1
 8009cfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cfe:	e00b      	b.n	8009d18 <HAL_RCC_OscConfig+0x5e0>
 8009d00:	4b68      	ldr	r3, [pc, #416]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d04:	4a67      	ldr	r2, [pc, #412]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009d06:	f023 0301 	bic.w	r3, r3, #1
 8009d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d0c:	4b65      	ldr	r3, [pc, #404]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d10:	4a64      	ldr	r2, [pc, #400]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009d12:	f023 0304 	bic.w	r3, r3, #4
 8009d16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d015      	beq.n	8009d4c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d20:	f7f9 fd60 	bl	80037e4 <HAL_GetTick>
 8009d24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d26:	e00a      	b.n	8009d3e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d28:	f7f9 fd5c 	bl	80037e4 <HAL_GetTick>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d901      	bls.n	8009d3e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	e14e      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d3e:	4b59      	ldr	r3, [pc, #356]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d42:	f003 0302 	and.w	r3, r3, #2
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d0ee      	beq.n	8009d28 <HAL_RCC_OscConfig+0x5f0>
 8009d4a:	e014      	b.n	8009d76 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d4c:	f7f9 fd4a 	bl	80037e4 <HAL_GetTick>
 8009d50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d52:	e00a      	b.n	8009d6a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d54:	f7f9 fd46 	bl	80037e4 <HAL_GetTick>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5c:	1ad3      	subs	r3, r2, r3
 8009d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d901      	bls.n	8009d6a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e138      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d6a:	4b4e      	ldr	r3, [pc, #312]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d6e:	f003 0302 	and.w	r3, r3, #2
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1ee      	bne.n	8009d54 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f000 812d 	beq.w	8009fda <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009d80:	4b48      	ldr	r3, [pc, #288]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d88:	2b18      	cmp	r3, #24
 8009d8a:	f000 80bd 	beq.w	8009f08 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	f040 809e 	bne.w	8009ed4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d98:	4b42      	ldr	r3, [pc, #264]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a41      	ldr	r2, [pc, #260]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009da4:	f7f9 fd1e 	bl	80037e4 <HAL_GetTick>
 8009da8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009daa:	e008      	b.n	8009dbe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009dac:	f7f9 fd1a 	bl	80037e4 <HAL_GetTick>
 8009db0:	4602      	mov	r2, r0
 8009db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d901      	bls.n	8009dbe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	e10e      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009dbe:	4b39      	ldr	r3, [pc, #228]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1f0      	bne.n	8009dac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009dca:	4b36      	ldr	r3, [pc, #216]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009dcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009dce:	4b37      	ldr	r3, [pc, #220]	@ (8009eac <HAL_RCC_OscConfig+0x774>)
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009dda:	0112      	lsls	r2, r2, #4
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	4931      	ldr	r1, [pc, #196]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009de0:	4313      	orrs	r3, r2
 8009de2:	628b      	str	r3, [r1, #40]	@ 0x28
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009de8:	3b01      	subs	r3, #1
 8009dea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009df2:	3b01      	subs	r3, #1
 8009df4:	025b      	lsls	r3, r3, #9
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	431a      	orrs	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	041b      	lsls	r3, r3, #16
 8009e02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009e06:	431a      	orrs	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	061b      	lsls	r3, r3, #24
 8009e10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009e14:	4923      	ldr	r1, [pc, #140]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e16:	4313      	orrs	r3, r2
 8009e18:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009e1a:	4b22      	ldr	r3, [pc, #136]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1e:	4a21      	ldr	r2, [pc, #132]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e20:	f023 0301 	bic.w	r3, r3, #1
 8009e24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009e26:	4b1f      	ldr	r3, [pc, #124]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e2a:	4b21      	ldr	r3, [pc, #132]	@ (8009eb0 <HAL_RCC_OscConfig+0x778>)
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009e32:	00d2      	lsls	r2, r2, #3
 8009e34:	491b      	ldr	r1, [pc, #108]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e3e:	f023 020c 	bic.w	r2, r3, #12
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e46:	4917      	ldr	r1, [pc, #92]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009e4c:	4b15      	ldr	r3, [pc, #84]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e50:	f023 0202 	bic.w	r2, r3, #2
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e58:	4912      	ldr	r1, [pc, #72]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e5e:	4b11      	ldr	r3, [pc, #68]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e62:	4a10      	ldr	r2, [pc, #64]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6e:	4a0d      	ldr	r2, [pc, #52]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009e76:	4b0b      	ldr	r3, [pc, #44]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009e80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009e82:	4b08      	ldr	r3, [pc, #32]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e86:	4a07      	ldr	r2, [pc, #28]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e88:	f043 0301 	orr.w	r3, r3, #1
 8009e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e8e:	4b05      	ldr	r3, [pc, #20]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a04      	ldr	r2, [pc, #16]	@ (8009ea4 <HAL_RCC_OscConfig+0x76c>)
 8009e94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e9a:	f7f9 fca3 	bl	80037e4 <HAL_GetTick>
 8009e9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ea0:	e011      	b.n	8009ec6 <HAL_RCC_OscConfig+0x78e>
 8009ea2:	bf00      	nop
 8009ea4:	58024400 	.word	0x58024400
 8009ea8:	58024800 	.word	0x58024800
 8009eac:	fffffc0c 	.word	0xfffffc0c
 8009eb0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009eb4:	f7f9 fc96 	bl	80037e4 <HAL_GetTick>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d901      	bls.n	8009ec6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e08a      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ec6:	4b47      	ldr	r3, [pc, #284]	@ (8009fe4 <HAL_RCC_OscConfig+0x8ac>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d0f0      	beq.n	8009eb4 <HAL_RCC_OscConfig+0x77c>
 8009ed2:	e082      	b.n	8009fda <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ed4:	4b43      	ldr	r3, [pc, #268]	@ (8009fe4 <HAL_RCC_OscConfig+0x8ac>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a42      	ldr	r2, [pc, #264]	@ (8009fe4 <HAL_RCC_OscConfig+0x8ac>)
 8009eda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ee0:	f7f9 fc80 	bl	80037e4 <HAL_GetTick>
 8009ee4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ee6:	e008      	b.n	8009efa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ee8:	f7f9 fc7c 	bl	80037e4 <HAL_GetTick>
 8009eec:	4602      	mov	r2, r0
 8009eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d901      	bls.n	8009efa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e070      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009efa:	4b3a      	ldr	r3, [pc, #232]	@ (8009fe4 <HAL_RCC_OscConfig+0x8ac>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1f0      	bne.n	8009ee8 <HAL_RCC_OscConfig+0x7b0>
 8009f06:	e068      	b.n	8009fda <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009f08:	4b36      	ldr	r3, [pc, #216]	@ (8009fe4 <HAL_RCC_OscConfig+0x8ac>)
 8009f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009f0e:	4b35      	ldr	r3, [pc, #212]	@ (8009fe4 <HAL_RCC_OscConfig+0x8ac>)
 8009f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d031      	beq.n	8009f80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	f003 0203 	and.w	r2, r3, #3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d12a      	bne.n	8009f80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	091b      	lsrs	r3, r3, #4
 8009f2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d122      	bne.n	8009f80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d11a      	bne.n	8009f80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	0a5b      	lsrs	r3, r3, #9
 8009f4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d111      	bne.n	8009f80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	0c1b      	lsrs	r3, r3, #16
 8009f60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d108      	bne.n	8009f80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	0e1b      	lsrs	r3, r3, #24
 8009f72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d001      	beq.n	8009f84 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e02b      	b.n	8009fdc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009f84:	4b17      	ldr	r3, [pc, #92]	@ (8009fe4 <HAL_RCC_OscConfig+0x8ac>)
 8009f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f88:	08db      	lsrs	r3, r3, #3
 8009f8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d01f      	beq.n	8009fda <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009f9a:	4b12      	ldr	r3, [pc, #72]	@ (8009fe4 <HAL_RCC_OscConfig+0x8ac>)
 8009f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f9e:	4a11      	ldr	r2, [pc, #68]	@ (8009fe4 <HAL_RCC_OscConfig+0x8ac>)
 8009fa0:	f023 0301 	bic.w	r3, r3, #1
 8009fa4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009fa6:	f7f9 fc1d 	bl	80037e4 <HAL_GetTick>
 8009faa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009fac:	bf00      	nop
 8009fae:	f7f9 fc19 	bl	80037e4 <HAL_GetTick>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d0f9      	beq.n	8009fae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009fba:	4b0a      	ldr	r3, [pc, #40]	@ (8009fe4 <HAL_RCC_OscConfig+0x8ac>)
 8009fbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8009fe8 <HAL_RCC_OscConfig+0x8b0>)
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009fc6:	00d2      	lsls	r2, r2, #3
 8009fc8:	4906      	ldr	r1, [pc, #24]	@ (8009fe4 <HAL_RCC_OscConfig+0x8ac>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009fce:	4b05      	ldr	r3, [pc, #20]	@ (8009fe4 <HAL_RCC_OscConfig+0x8ac>)
 8009fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd2:	4a04      	ldr	r2, [pc, #16]	@ (8009fe4 <HAL_RCC_OscConfig+0x8ac>)
 8009fd4:	f043 0301 	orr.w	r3, r3, #1
 8009fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3730      	adds	r7, #48	@ 0x30
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	58024400 	.word	0x58024400
 8009fe8:	ffff0007 	.word	0xffff0007

08009fec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e19c      	b.n	800a33a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a000:	4b8a      	ldr	r3, [pc, #552]	@ (800a22c <HAL_RCC_ClockConfig+0x240>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 030f 	and.w	r3, r3, #15
 800a008:	683a      	ldr	r2, [r7, #0]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d910      	bls.n	800a030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a00e:	4b87      	ldr	r3, [pc, #540]	@ (800a22c <HAL_RCC_ClockConfig+0x240>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f023 020f 	bic.w	r2, r3, #15
 800a016:	4985      	ldr	r1, [pc, #532]	@ (800a22c <HAL_RCC_ClockConfig+0x240>)
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a01e:	4b83      	ldr	r3, [pc, #524]	@ (800a22c <HAL_RCC_ClockConfig+0x240>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f003 030f 	and.w	r3, r3, #15
 800a026:	683a      	ldr	r2, [r7, #0]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d001      	beq.n	800a030 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e184      	b.n	800a33a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 0304 	and.w	r3, r3, #4
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d010      	beq.n	800a05e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	691a      	ldr	r2, [r3, #16]
 800a040:	4b7b      	ldr	r3, [pc, #492]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a048:	429a      	cmp	r2, r3
 800a04a:	d908      	bls.n	800a05e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a04c:	4b78      	ldr	r3, [pc, #480]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	4975      	ldr	r1, [pc, #468]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a05a:	4313      	orrs	r3, r2
 800a05c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 0308 	and.w	r3, r3, #8
 800a066:	2b00      	cmp	r3, #0
 800a068:	d010      	beq.n	800a08c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	695a      	ldr	r2, [r3, #20]
 800a06e:	4b70      	ldr	r3, [pc, #448]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a070:	69db      	ldr	r3, [r3, #28]
 800a072:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a076:	429a      	cmp	r2, r3
 800a078:	d908      	bls.n	800a08c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a07a:	4b6d      	ldr	r3, [pc, #436]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	496a      	ldr	r1, [pc, #424]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a088:	4313      	orrs	r3, r2
 800a08a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 0310 	and.w	r3, r3, #16
 800a094:	2b00      	cmp	r3, #0
 800a096:	d010      	beq.n	800a0ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	699a      	ldr	r2, [r3, #24]
 800a09c:	4b64      	ldr	r3, [pc, #400]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a09e:	69db      	ldr	r3, [r3, #28]
 800a0a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d908      	bls.n	800a0ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a0a8:	4b61      	ldr	r3, [pc, #388]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a0aa:	69db      	ldr	r3, [r3, #28]
 800a0ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	495e      	ldr	r1, [pc, #376]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 0320 	and.w	r3, r3, #32
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d010      	beq.n	800a0e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	69da      	ldr	r2, [r3, #28]
 800a0ca:	4b59      	ldr	r3, [pc, #356]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d908      	bls.n	800a0e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a0d6:	4b56      	ldr	r3, [pc, #344]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	69db      	ldr	r3, [r3, #28]
 800a0e2:	4953      	ldr	r1, [pc, #332]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 0302 	and.w	r3, r3, #2
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d010      	beq.n	800a116 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	68da      	ldr	r2, [r3, #12]
 800a0f8:	4b4d      	ldr	r3, [pc, #308]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a0fa:	699b      	ldr	r3, [r3, #24]
 800a0fc:	f003 030f 	and.w	r3, r3, #15
 800a100:	429a      	cmp	r2, r3
 800a102:	d908      	bls.n	800a116 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a104:	4b4a      	ldr	r3, [pc, #296]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	f023 020f 	bic.w	r2, r3, #15
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	4947      	ldr	r1, [pc, #284]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a112:	4313      	orrs	r3, r2
 800a114:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d055      	beq.n	800a1ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a122:	4b43      	ldr	r3, [pc, #268]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	4940      	ldr	r1, [pc, #256]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a130:	4313      	orrs	r3, r2
 800a132:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d107      	bne.n	800a14c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a13c:	4b3c      	ldr	r3, [pc, #240]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d121      	bne.n	800a18c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	e0f6      	b.n	800a33a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	2b03      	cmp	r3, #3
 800a152:	d107      	bne.n	800a164 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a154:	4b36      	ldr	r3, [pc, #216]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d115      	bne.n	800a18c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	e0ea      	b.n	800a33a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d107      	bne.n	800a17c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a16c:	4b30      	ldr	r3, [pc, #192]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a174:	2b00      	cmp	r3, #0
 800a176:	d109      	bne.n	800a18c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e0de      	b.n	800a33a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a17c:	4b2c      	ldr	r3, [pc, #176]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0304 	and.w	r3, r3, #4
 800a184:	2b00      	cmp	r3, #0
 800a186:	d101      	bne.n	800a18c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e0d6      	b.n	800a33a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a18c:	4b28      	ldr	r3, [pc, #160]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	f023 0207 	bic.w	r2, r3, #7
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	4925      	ldr	r1, [pc, #148]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a19a:	4313      	orrs	r3, r2
 800a19c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a19e:	f7f9 fb21 	bl	80037e4 <HAL_GetTick>
 800a1a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1a4:	e00a      	b.n	800a1bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1a6:	f7f9 fb1d 	bl	80037e4 <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d901      	bls.n	800a1bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e0be      	b.n	800a33a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1bc:	4b1c      	ldr	r3, [pc, #112]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	00db      	lsls	r3, r3, #3
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d1eb      	bne.n	800a1a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 0302 	and.w	r3, r3, #2
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d010      	beq.n	800a1fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	68da      	ldr	r2, [r3, #12]
 800a1de:	4b14      	ldr	r3, [pc, #80]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a1e0:	699b      	ldr	r3, [r3, #24]
 800a1e2:	f003 030f 	and.w	r3, r3, #15
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d208      	bcs.n	800a1fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1ea:	4b11      	ldr	r3, [pc, #68]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a1ec:	699b      	ldr	r3, [r3, #24]
 800a1ee:	f023 020f 	bic.w	r2, r3, #15
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	490e      	ldr	r1, [pc, #56]	@ (800a230 <HAL_RCC_ClockConfig+0x244>)
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a1fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a22c <HAL_RCC_ClockConfig+0x240>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 030f 	and.w	r3, r3, #15
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	429a      	cmp	r2, r3
 800a208:	d214      	bcs.n	800a234 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a20a:	4b08      	ldr	r3, [pc, #32]	@ (800a22c <HAL_RCC_ClockConfig+0x240>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f023 020f 	bic.w	r2, r3, #15
 800a212:	4906      	ldr	r1, [pc, #24]	@ (800a22c <HAL_RCC_ClockConfig+0x240>)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	4313      	orrs	r3, r2
 800a218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a21a:	4b04      	ldr	r3, [pc, #16]	@ (800a22c <HAL_RCC_ClockConfig+0x240>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 030f 	and.w	r3, r3, #15
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	429a      	cmp	r2, r3
 800a226:	d005      	beq.n	800a234 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	e086      	b.n	800a33a <HAL_RCC_ClockConfig+0x34e>
 800a22c:	52002000 	.word	0x52002000
 800a230:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d010      	beq.n	800a262 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	691a      	ldr	r2, [r3, #16]
 800a244:	4b3f      	ldr	r3, [pc, #252]	@ (800a344 <HAL_RCC_ClockConfig+0x358>)
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d208      	bcs.n	800a262 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a250:	4b3c      	ldr	r3, [pc, #240]	@ (800a344 <HAL_RCC_ClockConfig+0x358>)
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	4939      	ldr	r1, [pc, #228]	@ (800a344 <HAL_RCC_ClockConfig+0x358>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 0308 	and.w	r3, r3, #8
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d010      	beq.n	800a290 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	695a      	ldr	r2, [r3, #20]
 800a272:	4b34      	ldr	r3, [pc, #208]	@ (800a344 <HAL_RCC_ClockConfig+0x358>)
 800a274:	69db      	ldr	r3, [r3, #28]
 800a276:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d208      	bcs.n	800a290 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a27e:	4b31      	ldr	r3, [pc, #196]	@ (800a344 <HAL_RCC_ClockConfig+0x358>)
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	492e      	ldr	r1, [pc, #184]	@ (800a344 <HAL_RCC_ClockConfig+0x358>)
 800a28c:	4313      	orrs	r3, r2
 800a28e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 0310 	and.w	r3, r3, #16
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d010      	beq.n	800a2be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	699a      	ldr	r2, [r3, #24]
 800a2a0:	4b28      	ldr	r3, [pc, #160]	@ (800a344 <HAL_RCC_ClockConfig+0x358>)
 800a2a2:	69db      	ldr	r3, [r3, #28]
 800a2a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d208      	bcs.n	800a2be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a2ac:	4b25      	ldr	r3, [pc, #148]	@ (800a344 <HAL_RCC_ClockConfig+0x358>)
 800a2ae:	69db      	ldr	r3, [r3, #28]
 800a2b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	4922      	ldr	r1, [pc, #136]	@ (800a344 <HAL_RCC_ClockConfig+0x358>)
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 0320 	and.w	r3, r3, #32
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d010      	beq.n	800a2ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	69da      	ldr	r2, [r3, #28]
 800a2ce:	4b1d      	ldr	r3, [pc, #116]	@ (800a344 <HAL_RCC_ClockConfig+0x358>)
 800a2d0:	6a1b      	ldr	r3, [r3, #32]
 800a2d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d208      	bcs.n	800a2ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a2da:	4b1a      	ldr	r3, [pc, #104]	@ (800a344 <HAL_RCC_ClockConfig+0x358>)
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	69db      	ldr	r3, [r3, #28]
 800a2e6:	4917      	ldr	r1, [pc, #92]	@ (800a344 <HAL_RCC_ClockConfig+0x358>)
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a2ec:	f000 f834 	bl	800a358 <HAL_RCC_GetSysClockFreq>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	4b14      	ldr	r3, [pc, #80]	@ (800a344 <HAL_RCC_ClockConfig+0x358>)
 800a2f4:	699b      	ldr	r3, [r3, #24]
 800a2f6:	0a1b      	lsrs	r3, r3, #8
 800a2f8:	f003 030f 	and.w	r3, r3, #15
 800a2fc:	4912      	ldr	r1, [pc, #72]	@ (800a348 <HAL_RCC_ClockConfig+0x35c>)
 800a2fe:	5ccb      	ldrb	r3, [r1, r3]
 800a300:	f003 031f 	and.w	r3, r3, #31
 800a304:	fa22 f303 	lsr.w	r3, r2, r3
 800a308:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a30a:	4b0e      	ldr	r3, [pc, #56]	@ (800a344 <HAL_RCC_ClockConfig+0x358>)
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	f003 030f 	and.w	r3, r3, #15
 800a312:	4a0d      	ldr	r2, [pc, #52]	@ (800a348 <HAL_RCC_ClockConfig+0x35c>)
 800a314:	5cd3      	ldrb	r3, [r2, r3]
 800a316:	f003 031f 	and.w	r3, r3, #31
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	fa22 f303 	lsr.w	r3, r2, r3
 800a320:	4a0a      	ldr	r2, [pc, #40]	@ (800a34c <HAL_RCC_ClockConfig+0x360>)
 800a322:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a324:	4a0a      	ldr	r2, [pc, #40]	@ (800a350 <HAL_RCC_ClockConfig+0x364>)
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a32a:	4b0a      	ldr	r3, [pc, #40]	@ (800a354 <HAL_RCC_ClockConfig+0x368>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4618      	mov	r0, r3
 800a330:	f7f8 ffe4 	bl	80032fc <HAL_InitTick>
 800a334:	4603      	mov	r3, r0
 800a336:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a338:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3718      	adds	r7, #24
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	58024400 	.word	0x58024400
 800a348:	08019980 	.word	0x08019980
 800a34c:	240000b8 	.word	0x240000b8
 800a350:	240000b4 	.word	0x240000b4
 800a354:	240000bc 	.word	0x240000bc

0800a358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a358:	b480      	push	{r7}
 800a35a:	b089      	sub	sp, #36	@ 0x24
 800a35c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a35e:	4bb3      	ldr	r3, [pc, #716]	@ (800a62c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a366:	2b18      	cmp	r3, #24
 800a368:	f200 8155 	bhi.w	800a616 <HAL_RCC_GetSysClockFreq+0x2be>
 800a36c:	a201      	add	r2, pc, #4	@ (adr r2, 800a374 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a372:	bf00      	nop
 800a374:	0800a3d9 	.word	0x0800a3d9
 800a378:	0800a617 	.word	0x0800a617
 800a37c:	0800a617 	.word	0x0800a617
 800a380:	0800a617 	.word	0x0800a617
 800a384:	0800a617 	.word	0x0800a617
 800a388:	0800a617 	.word	0x0800a617
 800a38c:	0800a617 	.word	0x0800a617
 800a390:	0800a617 	.word	0x0800a617
 800a394:	0800a3ff 	.word	0x0800a3ff
 800a398:	0800a617 	.word	0x0800a617
 800a39c:	0800a617 	.word	0x0800a617
 800a3a0:	0800a617 	.word	0x0800a617
 800a3a4:	0800a617 	.word	0x0800a617
 800a3a8:	0800a617 	.word	0x0800a617
 800a3ac:	0800a617 	.word	0x0800a617
 800a3b0:	0800a617 	.word	0x0800a617
 800a3b4:	0800a405 	.word	0x0800a405
 800a3b8:	0800a617 	.word	0x0800a617
 800a3bc:	0800a617 	.word	0x0800a617
 800a3c0:	0800a617 	.word	0x0800a617
 800a3c4:	0800a617 	.word	0x0800a617
 800a3c8:	0800a617 	.word	0x0800a617
 800a3cc:	0800a617 	.word	0x0800a617
 800a3d0:	0800a617 	.word	0x0800a617
 800a3d4:	0800a40b 	.word	0x0800a40b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3d8:	4b94      	ldr	r3, [pc, #592]	@ (800a62c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 0320 	and.w	r3, r3, #32
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d009      	beq.n	800a3f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3e4:	4b91      	ldr	r3, [pc, #580]	@ (800a62c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	08db      	lsrs	r3, r3, #3
 800a3ea:	f003 0303 	and.w	r3, r3, #3
 800a3ee:	4a90      	ldr	r2, [pc, #576]	@ (800a630 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a3f6:	e111      	b.n	800a61c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a3f8:	4b8d      	ldr	r3, [pc, #564]	@ (800a630 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a3fa:	61bb      	str	r3, [r7, #24]
      break;
 800a3fc:	e10e      	b.n	800a61c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a3fe:	4b8d      	ldr	r3, [pc, #564]	@ (800a634 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a400:	61bb      	str	r3, [r7, #24]
      break;
 800a402:	e10b      	b.n	800a61c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a404:	4b8c      	ldr	r3, [pc, #560]	@ (800a638 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a406:	61bb      	str	r3, [r7, #24]
      break;
 800a408:	e108      	b.n	800a61c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a40a:	4b88      	ldr	r3, [pc, #544]	@ (800a62c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a40e:	f003 0303 	and.w	r3, r3, #3
 800a412:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a414:	4b85      	ldr	r3, [pc, #532]	@ (800a62c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a418:	091b      	lsrs	r3, r3, #4
 800a41a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a41e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a420:	4b82      	ldr	r3, [pc, #520]	@ (800a62c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a424:	f003 0301 	and.w	r3, r3, #1
 800a428:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a42a:	4b80      	ldr	r3, [pc, #512]	@ (800a62c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a42c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a42e:	08db      	lsrs	r3, r3, #3
 800a430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	fb02 f303 	mul.w	r3, r2, r3
 800a43a:	ee07 3a90 	vmov	s15, r3
 800a43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a442:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f000 80e1 	beq.w	800a610 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	2b02      	cmp	r3, #2
 800a452:	f000 8083 	beq.w	800a55c <HAL_RCC_GetSysClockFreq+0x204>
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	2b02      	cmp	r3, #2
 800a45a:	f200 80a1 	bhi.w	800a5a0 <HAL_RCC_GetSysClockFreq+0x248>
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d003      	beq.n	800a46c <HAL_RCC_GetSysClockFreq+0x114>
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d056      	beq.n	800a518 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a46a:	e099      	b.n	800a5a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a46c:	4b6f      	ldr	r3, [pc, #444]	@ (800a62c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f003 0320 	and.w	r3, r3, #32
 800a474:	2b00      	cmp	r3, #0
 800a476:	d02d      	beq.n	800a4d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a478:	4b6c      	ldr	r3, [pc, #432]	@ (800a62c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	08db      	lsrs	r3, r3, #3
 800a47e:	f003 0303 	and.w	r3, r3, #3
 800a482:	4a6b      	ldr	r2, [pc, #428]	@ (800a630 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a484:	fa22 f303 	lsr.w	r3, r2, r3
 800a488:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	ee07 3a90 	vmov	s15, r3
 800a490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	ee07 3a90 	vmov	s15, r3
 800a49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a49e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4a2:	4b62      	ldr	r3, [pc, #392]	@ (800a62c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4aa:	ee07 3a90 	vmov	s15, r3
 800a4ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a63c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a4d2:	e087      	b.n	800a5e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	ee07 3a90 	vmov	s15, r3
 800a4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a640 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a4e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4e6:	4b51      	ldr	r3, [pc, #324]	@ (800a62c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ee:	ee07 3a90 	vmov	s15, r3
 800a4f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a63c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a50a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a50e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a512:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a516:	e065      	b.n	800a5e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	ee07 3a90 	vmov	s15, r3
 800a51e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a522:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a644 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a52a:	4b40      	ldr	r3, [pc, #256]	@ (800a62c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a52e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a532:	ee07 3a90 	vmov	s15, r3
 800a536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a53a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a53e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a63c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a54a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a54e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a552:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a556:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a55a:	e043      	b.n	800a5e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	ee07 3a90 	vmov	s15, r3
 800a562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a566:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a648 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a56a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a56e:	4b2f      	ldr	r3, [pc, #188]	@ (800a62c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a576:	ee07 3a90 	vmov	s15, r3
 800a57a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a57e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a582:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a63c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a58a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a58e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a59a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a59e:	e021      	b.n	800a5e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	ee07 3a90 	vmov	s15, r3
 800a5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a644 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5b2:	4b1e      	ldr	r3, [pc, #120]	@ (800a62c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ba:	ee07 3a90 	vmov	s15, r3
 800a5be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a63c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a5e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a5e4:	4b11      	ldr	r3, [pc, #68]	@ (800a62c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e8:	0a5b      	lsrs	r3, r3, #9
 800a5ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	ee07 3a90 	vmov	s15, r3
 800a5f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a5fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a608:	ee17 3a90 	vmov	r3, s15
 800a60c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a60e:	e005      	b.n	800a61c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a610:	2300      	movs	r3, #0
 800a612:	61bb      	str	r3, [r7, #24]
      break;
 800a614:	e002      	b.n	800a61c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a616:	4b07      	ldr	r3, [pc, #28]	@ (800a634 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a618:	61bb      	str	r3, [r7, #24]
      break;
 800a61a:	bf00      	nop
  }

  return sysclockfreq;
 800a61c:	69bb      	ldr	r3, [r7, #24]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3724      	adds	r7, #36	@ 0x24
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	58024400 	.word	0x58024400
 800a630:	03d09000 	.word	0x03d09000
 800a634:	003d0900 	.word	0x003d0900
 800a638:	017d7840 	.word	0x017d7840
 800a63c:	46000000 	.word	0x46000000
 800a640:	4c742400 	.word	0x4c742400
 800a644:	4a742400 	.word	0x4a742400
 800a648:	4bbebc20 	.word	0x4bbebc20

0800a64c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a652:	f7ff fe81 	bl	800a358 <HAL_RCC_GetSysClockFreq>
 800a656:	4602      	mov	r2, r0
 800a658:	4b10      	ldr	r3, [pc, #64]	@ (800a69c <HAL_RCC_GetHCLKFreq+0x50>)
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	0a1b      	lsrs	r3, r3, #8
 800a65e:	f003 030f 	and.w	r3, r3, #15
 800a662:	490f      	ldr	r1, [pc, #60]	@ (800a6a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800a664:	5ccb      	ldrb	r3, [r1, r3]
 800a666:	f003 031f 	and.w	r3, r3, #31
 800a66a:	fa22 f303 	lsr.w	r3, r2, r3
 800a66e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a670:	4b0a      	ldr	r3, [pc, #40]	@ (800a69c <HAL_RCC_GetHCLKFreq+0x50>)
 800a672:	699b      	ldr	r3, [r3, #24]
 800a674:	f003 030f 	and.w	r3, r3, #15
 800a678:	4a09      	ldr	r2, [pc, #36]	@ (800a6a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800a67a:	5cd3      	ldrb	r3, [r2, r3]
 800a67c:	f003 031f 	and.w	r3, r3, #31
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	fa22 f303 	lsr.w	r3, r2, r3
 800a686:	4a07      	ldr	r2, [pc, #28]	@ (800a6a4 <HAL_RCC_GetHCLKFreq+0x58>)
 800a688:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a68a:	4a07      	ldr	r2, [pc, #28]	@ (800a6a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a690:	4b04      	ldr	r3, [pc, #16]	@ (800a6a4 <HAL_RCC_GetHCLKFreq+0x58>)
 800a692:	681b      	ldr	r3, [r3, #0]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	58024400 	.word	0x58024400
 800a6a0:	08019980 	.word	0x08019980
 800a6a4:	240000b8 	.word	0x240000b8
 800a6a8:	240000b4 	.word	0x240000b4

0800a6ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a6b0:	f7ff ffcc 	bl	800a64c <HAL_RCC_GetHCLKFreq>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	4b06      	ldr	r3, [pc, #24]	@ (800a6d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a6b8:	69db      	ldr	r3, [r3, #28]
 800a6ba:	091b      	lsrs	r3, r3, #4
 800a6bc:	f003 0307 	and.w	r3, r3, #7
 800a6c0:	4904      	ldr	r1, [pc, #16]	@ (800a6d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a6c2:	5ccb      	ldrb	r3, [r1, r3]
 800a6c4:	f003 031f 	and.w	r3, r3, #31
 800a6c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	58024400 	.word	0x58024400
 800a6d4:	08019980 	.word	0x08019980

0800a6d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a6dc:	f7ff ffb6 	bl	800a64c <HAL_RCC_GetHCLKFreq>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	4b06      	ldr	r3, [pc, #24]	@ (800a6fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a6e4:	69db      	ldr	r3, [r3, #28]
 800a6e6:	0a1b      	lsrs	r3, r3, #8
 800a6e8:	f003 0307 	and.w	r3, r3, #7
 800a6ec:	4904      	ldr	r1, [pc, #16]	@ (800a700 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a6ee:	5ccb      	ldrb	r3, [r1, r3]
 800a6f0:	f003 031f 	and.w	r3, r3, #31
 800a6f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	58024400 	.word	0x58024400
 800a700:	08019980 	.word	0x08019980

0800a704 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	223f      	movs	r2, #63	@ 0x3f
 800a712:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a714:	4b1a      	ldr	r3, [pc, #104]	@ (800a780 <HAL_RCC_GetClockConfig+0x7c>)
 800a716:	691b      	ldr	r3, [r3, #16]
 800a718:	f003 0207 	and.w	r2, r3, #7
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a720:	4b17      	ldr	r3, [pc, #92]	@ (800a780 <HAL_RCC_GetClockConfig+0x7c>)
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a72c:	4b14      	ldr	r3, [pc, #80]	@ (800a780 <HAL_RCC_GetClockConfig+0x7c>)
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	f003 020f 	and.w	r2, r3, #15
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a738:	4b11      	ldr	r3, [pc, #68]	@ (800a780 <HAL_RCC_GetClockConfig+0x7c>)
 800a73a:	699b      	ldr	r3, [r3, #24]
 800a73c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a744:	4b0e      	ldr	r3, [pc, #56]	@ (800a780 <HAL_RCC_GetClockConfig+0x7c>)
 800a746:	69db      	ldr	r3, [r3, #28]
 800a748:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a750:	4b0b      	ldr	r3, [pc, #44]	@ (800a780 <HAL_RCC_GetClockConfig+0x7c>)
 800a752:	69db      	ldr	r3, [r3, #28]
 800a754:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a75c:	4b08      	ldr	r3, [pc, #32]	@ (800a780 <HAL_RCC_GetClockConfig+0x7c>)
 800a75e:	6a1b      	ldr	r3, [r3, #32]
 800a760:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a768:	4b06      	ldr	r3, [pc, #24]	@ (800a784 <HAL_RCC_GetClockConfig+0x80>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 020f 	and.w	r2, r3, #15
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	601a      	str	r2, [r3, #0]
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr
 800a780:	58024400 	.word	0x58024400
 800a784:	52002000 	.word	0x52002000

0800a788 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a78c:	b0c8      	sub	sp, #288	@ 0x120
 800a78e:	af00      	add	r7, sp, #0
 800a790:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a794:	2300      	movs	r3, #0
 800a796:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a79a:	2300      	movs	r3, #0
 800a79c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a7a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a7ac:	2500      	movs	r5, #0
 800a7ae:	ea54 0305 	orrs.w	r3, r4, r5
 800a7b2:	d049      	beq.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a7be:	d02f      	beq.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a7c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a7c4:	d828      	bhi.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a7c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a7ca:	d01a      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a7cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a7d0:	d822      	bhi.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d003      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a7d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7da:	d007      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a7dc:	e01c      	b.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7de:	4bb8      	ldr	r3, [pc, #736]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7e2:	4ab7      	ldr	r2, [pc, #732]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a7e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7ea:	e01a      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	2102      	movs	r1, #2
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f002 fb45 	bl	800ce84 <RCCEx_PLL2_Config>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a800:	e00f      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a806:	3328      	adds	r3, #40	@ 0x28
 800a808:	2102      	movs	r1, #2
 800a80a:	4618      	mov	r0, r3
 800a80c:	f002 fbec 	bl	800cfe8 <RCCEx_PLL3_Config>
 800a810:	4603      	mov	r3, r0
 800a812:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a816:	e004      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a81e:	e000      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a820:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a822:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10a      	bne.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a82a:	4ba5      	ldr	r3, [pc, #660]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a82c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a82e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a836:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a838:	4aa1      	ldr	r2, [pc, #644]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a83a:	430b      	orrs	r3, r1
 800a83c:	6513      	str	r3, [r2, #80]	@ 0x50
 800a83e:	e003      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a840:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a844:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a850:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a854:	f04f 0900 	mov.w	r9, #0
 800a858:	ea58 0309 	orrs.w	r3, r8, r9
 800a85c:	d047      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a85e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a864:	2b04      	cmp	r3, #4
 800a866:	d82a      	bhi.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a868:	a201      	add	r2, pc, #4	@ (adr r2, 800a870 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86e:	bf00      	nop
 800a870:	0800a885 	.word	0x0800a885
 800a874:	0800a893 	.word	0x0800a893
 800a878:	0800a8a9 	.word	0x0800a8a9
 800a87c:	0800a8c7 	.word	0x0800a8c7
 800a880:	0800a8c7 	.word	0x0800a8c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a884:	4b8e      	ldr	r3, [pc, #568]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a888:	4a8d      	ldr	r2, [pc, #564]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a88a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a88e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a890:	e01a      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a896:	3308      	adds	r3, #8
 800a898:	2100      	movs	r1, #0
 800a89a:	4618      	mov	r0, r3
 800a89c:	f002 faf2 	bl	800ce84 <RCCEx_PLL2_Config>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8a6:	e00f      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8ac:	3328      	adds	r3, #40	@ 0x28
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f002 fb99 	bl	800cfe8 <RCCEx_PLL3_Config>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8bc:	e004      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a8c4:	e000      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a8c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8d0:	4b7b      	ldr	r3, [pc, #492]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8d4:	f023 0107 	bic.w	r1, r3, #7
 800a8d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8de:	4a78      	ldr	r2, [pc, #480]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8e0:	430b      	orrs	r3, r1
 800a8e2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a8e4:	e003      	b.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a8ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a8fa:	f04f 0b00 	mov.w	fp, #0
 800a8fe:	ea5a 030b 	orrs.w	r3, sl, fp
 800a902:	d04c      	beq.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a90a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a90e:	d030      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a910:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a914:	d829      	bhi.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a916:	2bc0      	cmp	r3, #192	@ 0xc0
 800a918:	d02d      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a91a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a91c:	d825      	bhi.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a91e:	2b80      	cmp	r3, #128	@ 0x80
 800a920:	d018      	beq.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a922:	2b80      	cmp	r3, #128	@ 0x80
 800a924:	d821      	bhi.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a926:	2b00      	cmp	r3, #0
 800a928:	d002      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a92a:	2b40      	cmp	r3, #64	@ 0x40
 800a92c:	d007      	beq.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a92e:	e01c      	b.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a930:	4b63      	ldr	r3, [pc, #396]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a934:	4a62      	ldr	r2, [pc, #392]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a93a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a93c:	e01c      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a93e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a942:	3308      	adds	r3, #8
 800a944:	2100      	movs	r1, #0
 800a946:	4618      	mov	r0, r3
 800a948:	f002 fa9c 	bl	800ce84 <RCCEx_PLL2_Config>
 800a94c:	4603      	mov	r3, r0
 800a94e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a952:	e011      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a954:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a958:	3328      	adds	r3, #40	@ 0x28
 800a95a:	2100      	movs	r1, #0
 800a95c:	4618      	mov	r0, r3
 800a95e:	f002 fb43 	bl	800cfe8 <RCCEx_PLL3_Config>
 800a962:	4603      	mov	r3, r0
 800a964:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a968:	e006      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a970:	e002      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a972:	bf00      	nop
 800a974:	e000      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a976:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a978:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d10a      	bne.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a980:	4b4f      	ldr	r3, [pc, #316]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a984:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a98c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a98e:	4a4c      	ldr	r2, [pc, #304]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a990:	430b      	orrs	r3, r1
 800a992:	6513      	str	r3, [r2, #80]	@ 0x50
 800a994:	e003      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a996:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a99a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a99e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a9aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a9b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	d053      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a9be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a9c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a9ca:	d035      	beq.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a9cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a9d0:	d82e      	bhi.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a9d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a9d6:	d031      	beq.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a9d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a9dc:	d828      	bhi.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a9de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a9e2:	d01a      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a9e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a9e8:	d822      	bhi.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a9ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9f2:	d007      	beq.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a9f4:	e01c      	b.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9f6:	4b32      	ldr	r3, [pc, #200]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9fa:	4a31      	ldr	r2, [pc, #196]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa02:	e01c      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa08:	3308      	adds	r3, #8
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f002 fa39 	bl	800ce84 <RCCEx_PLL2_Config>
 800aa12:	4603      	mov	r3, r0
 800aa14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa18:	e011      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa1e:	3328      	adds	r3, #40	@ 0x28
 800aa20:	2100      	movs	r1, #0
 800aa22:	4618      	mov	r0, r3
 800aa24:	f002 fae0 	bl	800cfe8 <RCCEx_PLL3_Config>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa2e:	e006      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aa36:	e002      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800aa38:	bf00      	nop
 800aa3a:	e000      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800aa3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d10b      	bne.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aa46:	4b1e      	ldr	r3, [pc, #120]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa4a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800aa4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800aa56:	4a1a      	ldr	r2, [pc, #104]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa58:	430b      	orrs	r3, r1
 800aa5a:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa5c:	e003      	b.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa62:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aa66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800aa72:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800aa76:	2300      	movs	r3, #0
 800aa78:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800aa7c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800aa80:	460b      	mov	r3, r1
 800aa82:	4313      	orrs	r3, r2
 800aa84:	d056      	beq.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aa86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800aa8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa92:	d038      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800aa94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa98:	d831      	bhi.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aa9e:	d034      	beq.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800aaa0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aaa4:	d82b      	bhi.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aaa6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aaaa:	d01d      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800aaac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aab0:	d825      	bhi.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d006      	beq.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800aab6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aaba:	d00a      	beq.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800aabc:	e01f      	b.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aabe:	bf00      	nop
 800aac0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aac4:	4ba2      	ldr	r3, [pc, #648]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac8:	4aa1      	ldr	r2, [pc, #644]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aaca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aace:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aad0:	e01c      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aad6:	3308      	adds	r3, #8
 800aad8:	2100      	movs	r1, #0
 800aada:	4618      	mov	r0, r3
 800aadc:	f002 f9d2 	bl	800ce84 <RCCEx_PLL2_Config>
 800aae0:	4603      	mov	r3, r0
 800aae2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aae6:	e011      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aaec:	3328      	adds	r3, #40	@ 0x28
 800aaee:	2100      	movs	r1, #0
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f002 fa79 	bl	800cfe8 <RCCEx_PLL3_Config>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aafc:	e006      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ab04:	e002      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ab06:	bf00      	nop
 800ab08:	e000      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ab0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d10b      	bne.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab14:	4b8e      	ldr	r3, [pc, #568]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab18:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800ab1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ab24:	4a8a      	ldr	r2, [pc, #552]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab26:	430b      	orrs	r3, r1
 800ab28:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab2a:	e003      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab30:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ab34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800ab40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ab44:	2300      	movs	r3, #0
 800ab46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ab4a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	4313      	orrs	r3, r2
 800ab52:	d03a      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ab54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab5a:	2b30      	cmp	r3, #48	@ 0x30
 800ab5c:	d01f      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ab5e:	2b30      	cmp	r3, #48	@ 0x30
 800ab60:	d819      	bhi.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ab62:	2b20      	cmp	r3, #32
 800ab64:	d00c      	beq.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ab66:	2b20      	cmp	r3, #32
 800ab68:	d815      	bhi.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d019      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ab6e:	2b10      	cmp	r3, #16
 800ab70:	d111      	bne.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab72:	4b77      	ldr	r3, [pc, #476]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab76:	4a76      	ldr	r2, [pc, #472]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ab7e:	e011      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab84:	3308      	adds	r3, #8
 800ab86:	2102      	movs	r1, #2
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f002 f97b 	bl	800ce84 <RCCEx_PLL2_Config>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ab94:	e006      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ab9c:	e002      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ab9e:	bf00      	nop
 800aba0:	e000      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800aba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aba4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10a      	bne.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800abac:	4b68      	ldr	r3, [pc, #416]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800abae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abb0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800abb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abba:	4a65      	ldr	r2, [pc, #404]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800abbc:	430b      	orrs	r3, r1
 800abbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800abc0:	e003      	b.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abc2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abc6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800abca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800abd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800abda:	2300      	movs	r3, #0
 800abdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800abe0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800abe4:	460b      	mov	r3, r1
 800abe6:	4313      	orrs	r3, r2
 800abe8:	d051      	beq.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800abea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abf4:	d035      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800abf6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abfa:	d82e      	bhi.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800abfc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac00:	d031      	beq.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ac02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac06:	d828      	bhi.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ac08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac0c:	d01a      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ac0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac12:	d822      	bhi.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d003      	beq.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ac18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac1c:	d007      	beq.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ac1e:	e01c      	b.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac20:	4b4b      	ldr	r3, [pc, #300]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac24:	4a4a      	ldr	r2, [pc, #296]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac2c:	e01c      	b.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac32:	3308      	adds	r3, #8
 800ac34:	2100      	movs	r1, #0
 800ac36:	4618      	mov	r0, r3
 800ac38:	f002 f924 	bl	800ce84 <RCCEx_PLL2_Config>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac42:	e011      	b.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac48:	3328      	adds	r3, #40	@ 0x28
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f002 f9cb 	bl	800cfe8 <RCCEx_PLL3_Config>
 800ac52:	4603      	mov	r3, r0
 800ac54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac58:	e006      	b.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ac60:	e002      	b.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ac62:	bf00      	nop
 800ac64:	e000      	b.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ac66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10a      	bne.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ac70:	4b37      	ldr	r3, [pc, #220]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac74:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ac78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac7e:	4a34      	ldr	r2, [pc, #208]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac80:	430b      	orrs	r3, r1
 800ac82:	6513      	str	r3, [r2, #80]	@ 0x50
 800ac84:	e003      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac8a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ac8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac96:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ac9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aca4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800aca8:	460b      	mov	r3, r1
 800acaa:	4313      	orrs	r3, r2
 800acac:	d056      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800acae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800acb8:	d033      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800acba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800acbe:	d82c      	bhi.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800acc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800acc4:	d02f      	beq.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800acc6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800acca:	d826      	bhi.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800accc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800acd0:	d02b      	beq.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800acd2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800acd6:	d820      	bhi.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800acd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acdc:	d012      	beq.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800acde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ace2:	d81a      	bhi.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d022      	beq.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ace8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acec:	d115      	bne.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acf2:	3308      	adds	r3, #8
 800acf4:	2101      	movs	r1, #1
 800acf6:	4618      	mov	r0, r3
 800acf8:	f002 f8c4 	bl	800ce84 <RCCEx_PLL2_Config>
 800acfc:	4603      	mov	r3, r0
 800acfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad02:	e015      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad08:	3328      	adds	r3, #40	@ 0x28
 800ad0a:	2101      	movs	r1, #1
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f002 f96b 	bl	800cfe8 <RCCEx_PLL3_Config>
 800ad12:	4603      	mov	r3, r0
 800ad14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad18:	e00a      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ad20:	e006      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ad22:	bf00      	nop
 800ad24:	e004      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ad26:	bf00      	nop
 800ad28:	e002      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ad2a:	bf00      	nop
 800ad2c:	e000      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ad2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10d      	bne.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ad38:	4b05      	ldr	r3, [pc, #20]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad3c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800ad40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad46:	4a02      	ldr	r2, [pc, #8]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad48:	430b      	orrs	r3, r1
 800ad4a:	6513      	str	r3, [r2, #80]	@ 0x50
 800ad4c:	e006      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ad4e:	bf00      	nop
 800ad50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ad5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad64:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800ad68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ad72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ad76:	460b      	mov	r3, r1
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	d055      	beq.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ad7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ad84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad88:	d033      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ad8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad8e:	d82c      	bhi.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ad90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad94:	d02f      	beq.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ad96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad9a:	d826      	bhi.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ad9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ada0:	d02b      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ada2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ada6:	d820      	bhi.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ada8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adac:	d012      	beq.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800adae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adb2:	d81a      	bhi.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d022      	beq.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0x676>
 800adb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adbc:	d115      	bne.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800adbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adc2:	3308      	adds	r3, #8
 800adc4:	2101      	movs	r1, #1
 800adc6:	4618      	mov	r0, r3
 800adc8:	f002 f85c 	bl	800ce84 <RCCEx_PLL2_Config>
 800adcc:	4603      	mov	r3, r0
 800adce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800add2:	e015      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800add4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800add8:	3328      	adds	r3, #40	@ 0x28
 800adda:	2101      	movs	r1, #1
 800addc:	4618      	mov	r0, r3
 800adde:	f002 f903 	bl	800cfe8 <RCCEx_PLL3_Config>
 800ade2:	4603      	mov	r3, r0
 800ade4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ade8:	e00a      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800adf0:	e006      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800adf2:	bf00      	nop
 800adf4:	e004      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800adf6:	bf00      	nop
 800adf8:	e002      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800adfa:	bf00      	nop
 800adfc:	e000      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800adfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10b      	bne.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ae08:	4ba3      	ldr	r3, [pc, #652]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae0c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ae10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ae18:	4a9f      	ldr	r2, [pc, #636]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae1a:	430b      	orrs	r3, r1
 800ae1c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ae1e:	e003      	b.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae24:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae30:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ae34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ae38:	2300      	movs	r3, #0
 800ae3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ae3e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ae42:	460b      	mov	r3, r1
 800ae44:	4313      	orrs	r3, r2
 800ae46:	d037      	beq.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ae48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae52:	d00e      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800ae54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae58:	d816      	bhi.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d018      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800ae5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae62:	d111      	bne.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae64:	4b8c      	ldr	r3, [pc, #560]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae68:	4a8b      	ldr	r2, [pc, #556]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ae70:	e00f      	b.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae76:	3308      	adds	r3, #8
 800ae78:	2101      	movs	r1, #1
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f002 f802 	bl	800ce84 <RCCEx_PLL2_Config>
 800ae80:	4603      	mov	r3, r0
 800ae82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ae86:	e004      	b.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ae8e:	e000      	b.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800ae90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10a      	bne.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ae9a:	4b7f      	ldr	r3, [pc, #508]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae9e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800aea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aea8:	4a7b      	ldr	r2, [pc, #492]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aeaa:	430b      	orrs	r3, r1
 800aeac:	6513      	str	r3, [r2, #80]	@ 0x50
 800aeae:	e003      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aeb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aeb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800aec4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aec8:	2300      	movs	r3, #0
 800aeca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aece:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800aed2:	460b      	mov	r3, r1
 800aed4:	4313      	orrs	r3, r2
 800aed6:	d039      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800aed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aedc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aede:	2b03      	cmp	r3, #3
 800aee0:	d81c      	bhi.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800aee2:	a201      	add	r2, pc, #4	@ (adr r2, 800aee8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800aee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee8:	0800af25 	.word	0x0800af25
 800aeec:	0800aef9 	.word	0x0800aef9
 800aef0:	0800af07 	.word	0x0800af07
 800aef4:	0800af25 	.word	0x0800af25
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aef8:	4b67      	ldr	r3, [pc, #412]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aefa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aefc:	4a66      	ldr	r2, [pc, #408]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aefe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af04:	e00f      	b.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af0a:	3308      	adds	r3, #8
 800af0c:	2102      	movs	r1, #2
 800af0e:	4618      	mov	r0, r3
 800af10:	f001 ffb8 	bl	800ce84 <RCCEx_PLL2_Config>
 800af14:	4603      	mov	r3, r0
 800af16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af1a:	e004      	b.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800af22:	e000      	b.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800af24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d10a      	bne.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800af2e:	4b5a      	ldr	r3, [pc, #360]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af32:	f023 0103 	bic.w	r1, r3, #3
 800af36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af3c:	4a56      	ldr	r2, [pc, #344]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af3e:	430b      	orrs	r3, r1
 800af40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800af42:	e003      	b.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800af58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800af5c:	2300      	movs	r3, #0
 800af5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800af62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800af66:	460b      	mov	r3, r1
 800af68:	4313      	orrs	r3, r2
 800af6a:	f000 809f 	beq.w	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af6e:	4b4b      	ldr	r3, [pc, #300]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a4a      	ldr	r2, [pc, #296]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800af74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af7a:	f7f8 fc33 	bl	80037e4 <HAL_GetTick>
 800af7e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af82:	e00b      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af84:	f7f8 fc2e 	bl	80037e4 <HAL_GetTick>
 800af88:	4602      	mov	r2, r0
 800af8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800af8e:	1ad3      	subs	r3, r2, r3
 800af90:	2b64      	cmp	r3, #100	@ 0x64
 800af92:	d903      	bls.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800af94:	2303      	movs	r3, #3
 800af96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800af9a:	e005      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af9c:	4b3f      	ldr	r3, [pc, #252]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d0ed      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800afa8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800afac:	2b00      	cmp	r3, #0
 800afae:	d179      	bne.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800afb0:	4b39      	ldr	r3, [pc, #228]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afb2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800afb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800afbc:	4053      	eors	r3, r2
 800afbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d015      	beq.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800afc6:	4b34      	ldr	r3, [pc, #208]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800afd2:	4b31      	ldr	r3, [pc, #196]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afd6:	4a30      	ldr	r2, [pc, #192]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800afdc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800afde:	4b2e      	ldr	r3, [pc, #184]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afe2:	4a2d      	ldr	r2, [pc, #180]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800afe8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800afea:	4a2b      	ldr	r2, [pc, #172]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aff0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aff6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800affa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800affe:	d118      	bne.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b000:	f7f8 fbf0 	bl	80037e4 <HAL_GetTick>
 800b004:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b008:	e00d      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b00a:	f7f8 fbeb 	bl	80037e4 <HAL_GetTick>
 800b00e:	4602      	mov	r2, r0
 800b010:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b014:	1ad2      	subs	r2, r2, r3
 800b016:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d903      	bls.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b01e:	2303      	movs	r3, #3
 800b020:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800b024:	e005      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b026:	4b1c      	ldr	r3, [pc, #112]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b02a:	f003 0302 	and.w	r3, r3, #2
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0eb      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b032:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b036:	2b00      	cmp	r3, #0
 800b038:	d129      	bne.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b03a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b03e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b046:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b04a:	d10e      	bne.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b04c:	4b12      	ldr	r3, [pc, #72]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b054:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b058:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b05c:	091a      	lsrs	r2, r3, #4
 800b05e:	4b10      	ldr	r3, [pc, #64]	@ (800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b060:	4013      	ands	r3, r2
 800b062:	4a0d      	ldr	r2, [pc, #52]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b064:	430b      	orrs	r3, r1
 800b066:	6113      	str	r3, [r2, #16]
 800b068:	e005      	b.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b06a:	4b0b      	ldr	r3, [pc, #44]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	4a0a      	ldr	r2, [pc, #40]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b070:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b074:	6113      	str	r3, [r2, #16]
 800b076:	4b08      	ldr	r3, [pc, #32]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b078:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b07a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b07e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b086:	4a04      	ldr	r2, [pc, #16]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b088:	430b      	orrs	r3, r1
 800b08a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b08c:	e00e      	b.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b08e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b092:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800b096:	e009      	b.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b098:	58024400 	.word	0x58024400
 800b09c:	58024800 	.word	0x58024800
 800b0a0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b0a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b0ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	f002 0301 	and.w	r3, r2, #1
 800b0b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b0c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	f000 8089 	beq.w	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b0ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b0d4:	2b28      	cmp	r3, #40	@ 0x28
 800b0d6:	d86b      	bhi.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b0d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0de:	bf00      	nop
 800b0e0:	0800b1b9 	.word	0x0800b1b9
 800b0e4:	0800b1b1 	.word	0x0800b1b1
 800b0e8:	0800b1b1 	.word	0x0800b1b1
 800b0ec:	0800b1b1 	.word	0x0800b1b1
 800b0f0:	0800b1b1 	.word	0x0800b1b1
 800b0f4:	0800b1b1 	.word	0x0800b1b1
 800b0f8:	0800b1b1 	.word	0x0800b1b1
 800b0fc:	0800b1b1 	.word	0x0800b1b1
 800b100:	0800b185 	.word	0x0800b185
 800b104:	0800b1b1 	.word	0x0800b1b1
 800b108:	0800b1b1 	.word	0x0800b1b1
 800b10c:	0800b1b1 	.word	0x0800b1b1
 800b110:	0800b1b1 	.word	0x0800b1b1
 800b114:	0800b1b1 	.word	0x0800b1b1
 800b118:	0800b1b1 	.word	0x0800b1b1
 800b11c:	0800b1b1 	.word	0x0800b1b1
 800b120:	0800b19b 	.word	0x0800b19b
 800b124:	0800b1b1 	.word	0x0800b1b1
 800b128:	0800b1b1 	.word	0x0800b1b1
 800b12c:	0800b1b1 	.word	0x0800b1b1
 800b130:	0800b1b1 	.word	0x0800b1b1
 800b134:	0800b1b1 	.word	0x0800b1b1
 800b138:	0800b1b1 	.word	0x0800b1b1
 800b13c:	0800b1b1 	.word	0x0800b1b1
 800b140:	0800b1b9 	.word	0x0800b1b9
 800b144:	0800b1b1 	.word	0x0800b1b1
 800b148:	0800b1b1 	.word	0x0800b1b1
 800b14c:	0800b1b1 	.word	0x0800b1b1
 800b150:	0800b1b1 	.word	0x0800b1b1
 800b154:	0800b1b1 	.word	0x0800b1b1
 800b158:	0800b1b1 	.word	0x0800b1b1
 800b15c:	0800b1b1 	.word	0x0800b1b1
 800b160:	0800b1b9 	.word	0x0800b1b9
 800b164:	0800b1b1 	.word	0x0800b1b1
 800b168:	0800b1b1 	.word	0x0800b1b1
 800b16c:	0800b1b1 	.word	0x0800b1b1
 800b170:	0800b1b1 	.word	0x0800b1b1
 800b174:	0800b1b1 	.word	0x0800b1b1
 800b178:	0800b1b1 	.word	0x0800b1b1
 800b17c:	0800b1b1 	.word	0x0800b1b1
 800b180:	0800b1b9 	.word	0x0800b1b9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b184:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b188:	3308      	adds	r3, #8
 800b18a:	2101      	movs	r1, #1
 800b18c:	4618      	mov	r0, r3
 800b18e:	f001 fe79 	bl	800ce84 <RCCEx_PLL2_Config>
 800b192:	4603      	mov	r3, r0
 800b194:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b198:	e00f      	b.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b19a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b19e:	3328      	adds	r3, #40	@ 0x28
 800b1a0:	2101      	movs	r1, #1
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f001 ff20 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1ae:	e004      	b.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b1b6:	e000      	b.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b1b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d10a      	bne.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b1c2:	4bbf      	ldr	r3, [pc, #764]	@ (800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b1c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1c6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b1ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1d0:	4abb      	ldr	r2, [pc, #748]	@ (800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b1d2:	430b      	orrs	r3, r1
 800b1d4:	6553      	str	r3, [r2, #84]	@ 0x54
 800b1d6:	e003      	b.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b1e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e8:	f002 0302 	and.w	r3, r2, #2
 800b1ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b1f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	d041      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b204:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b206:	2b05      	cmp	r3, #5
 800b208:	d824      	bhi.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b20a:	a201      	add	r2, pc, #4	@ (adr r2, 800b210 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b210:	0800b25d 	.word	0x0800b25d
 800b214:	0800b229 	.word	0x0800b229
 800b218:	0800b23f 	.word	0x0800b23f
 800b21c:	0800b25d 	.word	0x0800b25d
 800b220:	0800b25d 	.word	0x0800b25d
 800b224:	0800b25d 	.word	0x0800b25d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b228:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b22c:	3308      	adds	r3, #8
 800b22e:	2101      	movs	r1, #1
 800b230:	4618      	mov	r0, r3
 800b232:	f001 fe27 	bl	800ce84 <RCCEx_PLL2_Config>
 800b236:	4603      	mov	r3, r0
 800b238:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b23c:	e00f      	b.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b23e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b242:	3328      	adds	r3, #40	@ 0x28
 800b244:	2101      	movs	r1, #1
 800b246:	4618      	mov	r0, r3
 800b248:	f001 fece 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b24c:	4603      	mov	r3, r0
 800b24e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b252:	e004      	b.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b25a:	e000      	b.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b25c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b25e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b262:	2b00      	cmp	r3, #0
 800b264:	d10a      	bne.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b266:	4b96      	ldr	r3, [pc, #600]	@ (800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b26a:	f023 0107 	bic.w	r1, r3, #7
 800b26e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b272:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b274:	4a92      	ldr	r2, [pc, #584]	@ (800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b276:	430b      	orrs	r3, r1
 800b278:	6553      	str	r3, [r2, #84]	@ 0x54
 800b27a:	e003      	b.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b27c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b280:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28c:	f002 0304 	and.w	r3, r2, #4
 800b290:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b294:	2300      	movs	r3, #0
 800b296:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b29a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b29e:	460b      	mov	r3, r1
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	d044      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b2a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b2ac:	2b05      	cmp	r3, #5
 800b2ae:	d825      	bhi.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b2b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b6:	bf00      	nop
 800b2b8:	0800b305 	.word	0x0800b305
 800b2bc:	0800b2d1 	.word	0x0800b2d1
 800b2c0:	0800b2e7 	.word	0x0800b2e7
 800b2c4:	0800b305 	.word	0x0800b305
 800b2c8:	0800b305 	.word	0x0800b305
 800b2cc:	0800b305 	.word	0x0800b305
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2d4:	3308      	adds	r3, #8
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f001 fdd3 	bl	800ce84 <RCCEx_PLL2_Config>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b2e4:	e00f      	b.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ea:	3328      	adds	r3, #40	@ 0x28
 800b2ec:	2101      	movs	r1, #1
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f001 fe7a 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b2fa:	e004      	b.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b302:	e000      	b.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b304:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b306:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10b      	bne.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b30e:	4b6c      	ldr	r3, [pc, #432]	@ (800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b312:	f023 0107 	bic.w	r1, r3, #7
 800b316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b31a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b31e:	4a68      	ldr	r2, [pc, #416]	@ (800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b320:	430b      	orrs	r3, r1
 800b322:	6593      	str	r3, [r2, #88]	@ 0x58
 800b324:	e003      	b.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b326:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b32a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b32e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b336:	f002 0320 	and.w	r3, r2, #32
 800b33a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b33e:	2300      	movs	r3, #0
 800b340:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b344:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b348:	460b      	mov	r3, r1
 800b34a:	4313      	orrs	r3, r2
 800b34c:	d055      	beq.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b34e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b356:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b35a:	d033      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b35c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b360:	d82c      	bhi.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b366:	d02f      	beq.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b36c:	d826      	bhi.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b36e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b372:	d02b      	beq.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b374:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b378:	d820      	bhi.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b37a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b37e:	d012      	beq.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b380:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b384:	d81a      	bhi.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b386:	2b00      	cmp	r3, #0
 800b388:	d022      	beq.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b38a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b38e:	d115      	bne.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b394:	3308      	adds	r3, #8
 800b396:	2100      	movs	r1, #0
 800b398:	4618      	mov	r0, r3
 800b39a:	f001 fd73 	bl	800ce84 <RCCEx_PLL2_Config>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3a4:	e015      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3aa:	3328      	adds	r3, #40	@ 0x28
 800b3ac:	2102      	movs	r1, #2
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f001 fe1a 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3ba:	e00a      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b3c2:	e006      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b3c4:	bf00      	nop
 800b3c6:	e004      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b3c8:	bf00      	nop
 800b3ca:	e002      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b3cc:	bf00      	nop
 800b3ce:	e000      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b3d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d10b      	bne.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b3da:	4b39      	ldr	r3, [pc, #228]	@ (800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3de:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b3e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3ea:	4a35      	ldr	r2, [pc, #212]	@ (800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3ec:	430b      	orrs	r3, r1
 800b3ee:	6553      	str	r3, [r2, #84]	@ 0x54
 800b3f0:	e003      	b.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b3f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b3fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b406:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b40a:	2300      	movs	r3, #0
 800b40c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b410:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b414:	460b      	mov	r3, r1
 800b416:	4313      	orrs	r3, r2
 800b418:	d058      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b41a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b41e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b422:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b426:	d033      	beq.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b428:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b42c:	d82c      	bhi.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b42e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b432:	d02f      	beq.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b438:	d826      	bhi.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b43a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b43e:	d02b      	beq.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b440:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b444:	d820      	bhi.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b446:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b44a:	d012      	beq.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b44c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b450:	d81a      	bhi.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b452:	2b00      	cmp	r3, #0
 800b454:	d022      	beq.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b45a:	d115      	bne.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b45c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b460:	3308      	adds	r3, #8
 800b462:	2100      	movs	r1, #0
 800b464:	4618      	mov	r0, r3
 800b466:	f001 fd0d 	bl	800ce84 <RCCEx_PLL2_Config>
 800b46a:	4603      	mov	r3, r0
 800b46c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b470:	e015      	b.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b476:	3328      	adds	r3, #40	@ 0x28
 800b478:	2102      	movs	r1, #2
 800b47a:	4618      	mov	r0, r3
 800b47c:	f001 fdb4 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b480:	4603      	mov	r3, r0
 800b482:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b486:	e00a      	b.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b488:	2301      	movs	r3, #1
 800b48a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b48e:	e006      	b.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b490:	bf00      	nop
 800b492:	e004      	b.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b494:	bf00      	nop
 800b496:	e002      	b.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b498:	bf00      	nop
 800b49a:	e000      	b.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b49c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b49e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d10e      	bne.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b4a6:	4b06      	ldr	r3, [pc, #24]	@ (800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b4a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4aa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b4ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b4b6:	4a02      	ldr	r2, [pc, #8]	@ (800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b4b8:	430b      	orrs	r3, r1
 800b4ba:	6593      	str	r3, [r2, #88]	@ 0x58
 800b4bc:	e006      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b4be:	bf00      	nop
 800b4c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b4cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b4d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b4e2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	d055      	beq.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b4ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b4f4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b4f8:	d033      	beq.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b4fa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b4fe:	d82c      	bhi.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b504:	d02f      	beq.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b506:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b50a:	d826      	bhi.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b50c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b510:	d02b      	beq.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b512:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b516:	d820      	bhi.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b518:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b51c:	d012      	beq.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b51e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b522:	d81a      	bhi.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b524:	2b00      	cmp	r3, #0
 800b526:	d022      	beq.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b528:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b52c:	d115      	bne.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b52e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b532:	3308      	adds	r3, #8
 800b534:	2100      	movs	r1, #0
 800b536:	4618      	mov	r0, r3
 800b538:	f001 fca4 	bl	800ce84 <RCCEx_PLL2_Config>
 800b53c:	4603      	mov	r3, r0
 800b53e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b542:	e015      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b548:	3328      	adds	r3, #40	@ 0x28
 800b54a:	2102      	movs	r1, #2
 800b54c:	4618      	mov	r0, r3
 800b54e:	f001 fd4b 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b552:	4603      	mov	r3, r0
 800b554:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b558:	e00a      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b560:	e006      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b562:	bf00      	nop
 800b564:	e004      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b566:	bf00      	nop
 800b568:	e002      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b56a:	bf00      	nop
 800b56c:	e000      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b56e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b570:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10b      	bne.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b578:	4bbb      	ldr	r3, [pc, #748]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b57a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b57c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b580:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b584:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b588:	4ab7      	ldr	r2, [pc, #732]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b58a:	430b      	orrs	r3, r1
 800b58c:	6593      	str	r3, [r2, #88]	@ 0x58
 800b58e:	e003      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b590:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b594:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a0:	f002 0308 	and.w	r3, r2, #8
 800b5a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b5ae:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	d01e      	beq.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b5b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5c4:	d10c      	bne.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b5c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ca:	3328      	adds	r3, #40	@ 0x28
 800b5cc:	2102      	movs	r1, #2
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f001 fd0a 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d002      	beq.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b5e0:	4ba1      	ldr	r3, [pc, #644]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b5e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5e4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b5e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5f0:	4a9d      	ldr	r2, [pc, #628]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b5f2:	430b      	orrs	r3, r1
 800b5f4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b5f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fe:	f002 0310 	and.w	r3, r2, #16
 800b602:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b606:	2300      	movs	r3, #0
 800b608:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b60c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b610:	460b      	mov	r3, r1
 800b612:	4313      	orrs	r3, r2
 800b614:	d01e      	beq.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b61a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b61e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b622:	d10c      	bne.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b624:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b628:	3328      	adds	r3, #40	@ 0x28
 800b62a:	2102      	movs	r1, #2
 800b62c:	4618      	mov	r0, r3
 800b62e:	f001 fcdb 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d002      	beq.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b63e:	4b8a      	ldr	r3, [pc, #552]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b642:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b646:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b64a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b64e:	4a86      	ldr	r2, [pc, #536]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b650:	430b      	orrs	r3, r1
 800b652:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b660:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b662:	2300      	movs	r3, #0
 800b664:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b666:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b66a:	460b      	mov	r3, r1
 800b66c:	4313      	orrs	r3, r2
 800b66e:	d03e      	beq.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b670:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b674:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b678:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b67c:	d022      	beq.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800b67e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b682:	d81b      	bhi.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b684:	2b00      	cmp	r3, #0
 800b686:	d003      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b68c:	d00b      	beq.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800b68e:	e015      	b.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b694:	3308      	adds	r3, #8
 800b696:	2100      	movs	r1, #0
 800b698:	4618      	mov	r0, r3
 800b69a:	f001 fbf3 	bl	800ce84 <RCCEx_PLL2_Config>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6a4:	e00f      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6aa:	3328      	adds	r3, #40	@ 0x28
 800b6ac:	2102      	movs	r1, #2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f001 fc9a 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6ba:	e004      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b6c2:	e000      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800b6c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d10b      	bne.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b6ce:	4b66      	ldr	r3, [pc, #408]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b6d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6d2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b6d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b6de:	4a62      	ldr	r2, [pc, #392]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b6e0:	430b      	orrs	r3, r1
 800b6e2:	6593      	str	r3, [r2, #88]	@ 0x58
 800b6e4:	e003      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b6ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b6fa:	673b      	str	r3, [r7, #112]	@ 0x70
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	677b      	str	r3, [r7, #116]	@ 0x74
 800b700:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b704:	460b      	mov	r3, r1
 800b706:	4313      	orrs	r3, r2
 800b708:	d03b      	beq.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b70a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b70e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b712:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b716:	d01f      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
 800b718:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b71c:	d818      	bhi.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
 800b71e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b722:	d003      	beq.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0xfa4>
 800b724:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b728:	d007      	beq.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0xfb2>
 800b72a:	e011      	b.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b72c:	4b4e      	ldr	r3, [pc, #312]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b730:	4a4d      	ldr	r2, [pc, #308]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b732:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b736:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b738:	e00f      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xfd2>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b73a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b73e:	3328      	adds	r3, #40	@ 0x28
 800b740:	2101      	movs	r1, #1
 800b742:	4618      	mov	r0, r3
 800b744:	f001 fc50 	bl	800cfe8 <RCCEx_PLL3_Config>
 800b748:	4603      	mov	r3, r0
 800b74a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800b74e:	e004      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b756:	e000      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        break;
 800b758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b75a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10b      	bne.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0xff2>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b762:	4b41      	ldr	r3, [pc, #260]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b766:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b76a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b76e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b772:	4a3d      	ldr	r2, [pc, #244]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b774:	430b      	orrs	r3, r1
 800b776:	6553      	str	r3, [r2, #84]	@ 0x54
 800b778:	e003      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0xffa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b77a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b77e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b782:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b78e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b790:	2300      	movs	r3, #0
 800b792:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b794:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b798:	460b      	mov	r3, r1
 800b79a:	4313      	orrs	r3, r2
 800b79c:	d031      	beq.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x107a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b79e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d003      	beq.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1028>
 800b7a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7ac:	d007      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x1036>
 800b7ae:	e011      	b.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x104c>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7b0:	4b2d      	ldr	r3, [pc, #180]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b4:	4a2c      	ldr	r2, [pc, #176]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b7b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7bc:	e00e      	b.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x1054>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7c2:	3308      	adds	r3, #8
 800b7c4:	2102      	movs	r1, #2
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f001 fb5c 	bl	800ce84 <RCCEx_PLL2_Config>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7d2:	e003      	b.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x1054>

      default:
        ret = HAL_ERROR;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b7da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10a      	bne.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x1072>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b7e4:	4b20      	ldr	r3, [pc, #128]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b7e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b7ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7f2:	4a1d      	ldr	r2, [pc, #116]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b7f4:	430b      	orrs	r3, r1
 800b7f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b7f8:	e003      	b.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x107a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b80e:	663b      	str	r3, [r7, #96]	@ 0x60
 800b810:	2300      	movs	r3, #0
 800b812:	667b      	str	r3, [r7, #100]	@ 0x64
 800b814:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b818:	460b      	mov	r3, r1
 800b81a:	4313      	orrs	r3, r2
 800b81c:	d03b      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x110e>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b81e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b826:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b82a:	d018      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x10d6>
 800b82c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b830:	d811      	bhi.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 800b832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b836:	d014      	beq.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x10da>
 800b838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b83c:	d80b      	bhi.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d014      	beq.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x10e4>
 800b842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b846:	d106      	bne.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x10ce>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b848:	4b07      	ldr	r3, [pc, #28]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b84c:	4a06      	ldr	r2, [pc, #24]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800b84e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b854:	e00b      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b85c:	e007      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 800b85e:	bf00      	nop
 800b860:	e005      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 800b862:	bf00      	nop
 800b864:	e003      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x10e6>
 800b866:	bf00      	nop
 800b868:	58024400 	.word	0x58024400
        break;
 800b86c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b86e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b872:	2b00      	cmp	r3, #0
 800b874:	d10b      	bne.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x1106>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b876:	4bba      	ldr	r3, [pc, #744]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b87a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b87e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b886:	4ab6      	ldr	r2, [pc, #728]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b888:	430b      	orrs	r3, r1
 800b88a:	6553      	str	r3, [r2, #84]	@ 0x54
 800b88c:	e003      	b.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b88e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b892:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b8a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8a8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	d009      	beq.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b8b2:	4bab      	ldr	r3, [pc, #684]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b8b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8b6:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b8ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8c0:	4aa7      	ldr	r2, [pc, #668]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b8c2:	430b      	orrs	r3, r1
 800b8c4:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b8c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b8d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8d8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b8dc:	460b      	mov	r3, r1
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	d00a      	beq.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x1170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b8e2:	4b9f      	ldr	r3, [pc, #636]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b8ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b8f2:	4a9b      	ldr	r2, [pc, #620]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b8f4:	430b      	orrs	r3, r1
 800b8f6:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b8f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b900:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b904:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b906:	2300      	movs	r3, #0
 800b908:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b90a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b90e:	460b      	mov	r3, r1
 800b910:	4313      	orrs	r3, r2
 800b912:	d009      	beq.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b914:	4b92      	ldr	r3, [pc, #584]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b918:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b91c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b922:	4a8f      	ldr	r2, [pc, #572]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b924:	430b      	orrs	r3, r1
 800b926:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b930:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b934:	643b      	str	r3, [r7, #64]	@ 0x40
 800b936:	2300      	movs	r3, #0
 800b938:	647b      	str	r3, [r7, #68]	@ 0x44
 800b93a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b93e:	460b      	mov	r3, r1
 800b940:	4313      	orrs	r3, r2
 800b942:	d00e      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b944:	4b86      	ldr	r3, [pc, #536]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	4a85      	ldr	r2, [pc, #532]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b94a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b94e:	6113      	str	r3, [r2, #16]
 800b950:	4b83      	ldr	r3, [pc, #524]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b952:	6919      	ldr	r1, [r3, #16]
 800b954:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b958:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b95c:	4a80      	ldr	r2, [pc, #512]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b95e:	430b      	orrs	r3, r1
 800b960:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b96e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b970:	2300      	movs	r3, #0
 800b972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b974:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b978:	460b      	mov	r3, r1
 800b97a:	4313      	orrs	r3, r2
 800b97c:	d009      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x120a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b97e:	4b78      	ldr	r3, [pc, #480]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b982:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b98a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b98c:	4a74      	ldr	r2, [pc, #464]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b98e:	430b      	orrs	r3, r1
 800b990:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b992:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b99e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9a4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	d00a      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x123c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b9ae:	4b6c      	ldr	r3, [pc, #432]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b9b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9b2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b9b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b9be:	4a68      	ldr	r2, [pc, #416]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800b9c0:	430b      	orrs	r3, r1
 800b9c2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b9c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b9d0:	f003 0301 	and.w	r3, r3, #1
 800b9d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9d6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b9da:	460b      	mov	r3, r1
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	d011      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x127c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f001 fa4b 	bl	800ce84 <RCCEx_PLL2_Config>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b9f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d003      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x127c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ba04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	6239      	str	r1, [r7, #32]
 800ba10:	f003 0302 	and.w	r3, r3, #2
 800ba14:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba16:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	d011      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba24:	3308      	adds	r3, #8
 800ba26:	2101      	movs	r1, #1
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f001 fa2b 	bl	800ce84 <RCCEx_PLL2_Config>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800ba34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d003      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ba44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	61b9      	str	r1, [r7, #24]
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	61fb      	str	r3, [r7, #28]
 800ba56:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	d011      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba64:	3308      	adds	r3, #8
 800ba66:	2102      	movs	r1, #2
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f001 fa0b 	bl	800ce84 <RCCEx_PLL2_Config>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800ba74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d003      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ba84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	6139      	str	r1, [r7, #16]
 800ba90:	f003 0308 	and.w	r3, r3, #8
 800ba94:	617b      	str	r3, [r7, #20]
 800ba96:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	d011      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x133c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800baa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baa4:	3328      	adds	r3, #40	@ 0x28
 800baa6:	2100      	movs	r1, #0
 800baa8:	4618      	mov	r0, r3
 800baaa:	f001 fa9d 	bl	800cfe8 <RCCEx_PLL3_Config>
 800baae:	4603      	mov	r3, r0
 800bab0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800bab4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d003      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x133c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800babc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bac0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bacc:	2100      	movs	r1, #0
 800bace:	60b9      	str	r1, [r7, #8]
 800bad0:	f003 0310 	and.w	r3, r3, #16
 800bad4:	60fb      	str	r3, [r7, #12]
 800bad6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bada:	460b      	mov	r3, r1
 800badc:	4313      	orrs	r3, r2
 800bade:	d011      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x137c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bae4:	3328      	adds	r3, #40	@ 0x28
 800bae6:	2101      	movs	r1, #1
 800bae8:	4618      	mov	r0, r3
 800baea:	f001 fa7d 	bl	800cfe8 <RCCEx_PLL3_Config>
 800baee:	4603      	mov	r3, r0
 800baf0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800baf4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d003      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x137c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bafc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bb04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	6039      	str	r1, [r7, #0]
 800bb10:	f003 0320 	and.w	r3, r3, #32
 800bb14:	607b      	str	r3, [r7, #4]
 800bb16:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	d011      	beq.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb24:	3328      	adds	r3, #40	@ 0x28
 800bb26:	2102      	movs	r1, #2
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f001 fa5d 	bl	800cfe8 <RCCEx_PLL3_Config>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bb34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d003      	beq.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800bb44:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d101      	bne.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x13c8>
  {
    return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	e000      	b.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0x13ca>
  }
  return HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb5e:	bf00      	nop
 800bb60:	58024400 	.word	0x58024400

0800bb64 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b090      	sub	sp, #64	@ 0x40
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bb6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb72:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800bb76:	430b      	orrs	r3, r1
 800bb78:	f040 8094 	bne.w	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bb7c:	4b9e      	ldr	r3, [pc, #632]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb80:	f003 0307 	and.w	r3, r3, #7
 800bb84:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb88:	2b04      	cmp	r3, #4
 800bb8a:	f200 8087 	bhi.w	800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bb8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb94:	0800bba9 	.word	0x0800bba9
 800bb98:	0800bbd1 	.word	0x0800bbd1
 800bb9c:	0800bbf9 	.word	0x0800bbf9
 800bba0:	0800bc95 	.word	0x0800bc95
 800bba4:	0800bc21 	.word	0x0800bc21
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bba8:	4b93      	ldr	r3, [pc, #588]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bbb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bbb4:	d108      	bne.n	800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f001 f810 	bl	800cbe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbc4:	f000 bd45 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbcc:	f000 bd41 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbd0:	4b89      	ldr	r3, [pc, #548]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bbdc:	d108      	bne.n	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbde:	f107 0318 	add.w	r3, r7, #24
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f000 fd54 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbec:	f000 bd31 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbf4:	f000 bd2d 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbf8:	4b7f      	ldr	r3, [pc, #508]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc04:	d108      	bne.n	800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc06:	f107 030c 	add.w	r3, r7, #12
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f000 fe94 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc14:	f000 bd1d 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc1c:	f000 bd19 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc20:	4b75      	ldr	r3, [pc, #468]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bc28:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc2a:	4b73      	ldr	r3, [pc, #460]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 0304 	and.w	r3, r3, #4
 800bc32:	2b04      	cmp	r3, #4
 800bc34:	d10c      	bne.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bc36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d109      	bne.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc3c:	4b6e      	ldr	r3, [pc, #440]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	08db      	lsrs	r3, r3, #3
 800bc42:	f003 0303 	and.w	r3, r3, #3
 800bc46:	4a6d      	ldr	r2, [pc, #436]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bc48:	fa22 f303 	lsr.w	r3, r2, r3
 800bc4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc4e:	e01f      	b.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc50:	4b69      	ldr	r3, [pc, #420]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc5c:	d106      	bne.n	800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bc5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc64:	d102      	bne.n	800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc66:	4b66      	ldr	r3, [pc, #408]	@ (800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bc68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc6a:	e011      	b.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc6c:	4b62      	ldr	r3, [pc, #392]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc78:	d106      	bne.n	800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bc7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc80:	d102      	bne.n	800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc82:	4b60      	ldr	r3, [pc, #384]	@ (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bc84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc86:	e003      	b.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bc8c:	f000 bce1 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc90:	f000 bcdf 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc94:	4b5c      	ldr	r3, [pc, #368]	@ (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc98:	f000 bcdb 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bca0:	f000 bcd7 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bca8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800bcac:	430b      	orrs	r3, r1
 800bcae:	f040 80ad 	bne.w	800be0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bcb2:	4b51      	ldr	r3, [pc, #324]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcb6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800bcba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcc2:	d056      	beq.n	800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcca:	f200 8090 	bhi.w	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bcce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd0:	2bc0      	cmp	r3, #192	@ 0xc0
 800bcd2:	f000 8088 	beq.w	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd8:	2bc0      	cmp	r3, #192	@ 0xc0
 800bcda:	f200 8088 	bhi.w	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bcde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce0:	2b80      	cmp	r3, #128	@ 0x80
 800bce2:	d032      	beq.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce6:	2b80      	cmp	r3, #128	@ 0x80
 800bce8:	f200 8081 	bhi.w	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bcec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d003      	beq.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf4:	2b40      	cmp	r3, #64	@ 0x40
 800bcf6:	d014      	beq.n	800bd22 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bcf8:	e079      	b.n	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bcfa:	4b3f      	ldr	r3, [pc, #252]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd06:	d108      	bne.n	800bd1a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f000 ff67 	bl	800cbe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd16:	f000 bc9c 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd1e:	f000 bc98 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd22:	4b35      	ldr	r3, [pc, #212]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd2e:	d108      	bne.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd30:	f107 0318 	add.w	r3, r7, #24
 800bd34:	4618      	mov	r0, r3
 800bd36:	f000 fcab 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd3e:	f000 bc88 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd46:	f000 bc84 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd4a:	4b2b      	ldr	r3, [pc, #172]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd56:	d108      	bne.n	800bd6a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd58:	f107 030c 	add.w	r3, r7, #12
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f000 fdeb 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd66:	f000 bc74 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd6e:	f000 bc70 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd72:	4b21      	ldr	r3, [pc, #132]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bd7a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd7c:	4b1e      	ldr	r3, [pc, #120]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f003 0304 	and.w	r3, r3, #4
 800bd84:	2b04      	cmp	r3, #4
 800bd86:	d10c      	bne.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800bd88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d109      	bne.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd8e:	4b1a      	ldr	r3, [pc, #104]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	08db      	lsrs	r3, r3, #3
 800bd94:	f003 0303 	and.w	r3, r3, #3
 800bd98:	4a18      	ldr	r2, [pc, #96]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bd9a:	fa22 f303 	lsr.w	r3, r2, r3
 800bd9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bda0:	e01f      	b.n	800bde2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bda2:	4b15      	ldr	r3, [pc, #84]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdae:	d106      	bne.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800bdb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bdb6:	d102      	bne.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bdb8:	4b11      	ldr	r3, [pc, #68]	@ (800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bdba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdbc:	e011      	b.n	800bde2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdbe:	4b0e      	ldr	r3, [pc, #56]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bdca:	d106      	bne.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800bdcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdd2:	d102      	bne.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bdd4:	4b0b      	ldr	r3, [pc, #44]	@ (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bdd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdd8:	e003      	b.n	800bde2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bdde:	f000 bc38 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bde2:	f000 bc36 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bde6:	4b08      	ldr	r3, [pc, #32]	@ (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bde8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdea:	f000 bc32 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdf2:	f000 bc2e 	b.w	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bdf6:	bf00      	nop
 800bdf8:	58024400 	.word	0x58024400
 800bdfc:	03d09000 	.word	0x03d09000
 800be00:	003d0900 	.word	0x003d0900
 800be04:	017d7840 	.word	0x017d7840
 800be08:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800be0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be10:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800be14:	430b      	orrs	r3, r1
 800be16:	f040 809c 	bne.w	800bf52 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800be1a:	4b9e      	ldr	r3, [pc, #632]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be1e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800be22:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800be24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800be2a:	d054      	beq.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800be2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800be32:	f200 808b 	bhi.w	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800be36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be38:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800be3c:	f000 8083 	beq.w	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800be40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be42:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800be46:	f200 8081 	bhi.w	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800be4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800be50:	d02f      	beq.n	800beb2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800be52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800be58:	d878      	bhi.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800be5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d004      	beq.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800be60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800be66:	d012      	beq.n	800be8e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800be68:	e070      	b.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be6a:	4b8a      	ldr	r3, [pc, #552]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be76:	d107      	bne.n	800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be7c:	4618      	mov	r0, r3
 800be7e:	f000 feaf 	bl	800cbe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be86:	e3e4      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be88:	2300      	movs	r3, #0
 800be8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be8c:	e3e1      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be8e:	4b81      	ldr	r3, [pc, #516]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be9a:	d107      	bne.n	800beac <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be9c:	f107 0318 	add.w	r3, r7, #24
 800bea0:	4618      	mov	r0, r3
 800bea2:	f000 fbf5 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beaa:	e3d2      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800beac:	2300      	movs	r3, #0
 800beae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beb0:	e3cf      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800beb2:	4b78      	ldr	r3, [pc, #480]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800beba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bebe:	d107      	bne.n	800bed0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bec0:	f107 030c 	add.w	r3, r7, #12
 800bec4:	4618      	mov	r0, r3
 800bec6:	f000 fd37 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bece:	e3c0      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bed0:	2300      	movs	r3, #0
 800bed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bed4:	e3bd      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bed6:	4b6f      	ldr	r3, [pc, #444]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800beda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bede:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bee0:	4b6c      	ldr	r3, [pc, #432]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f003 0304 	and.w	r3, r3, #4
 800bee8:	2b04      	cmp	r3, #4
 800beea:	d10c      	bne.n	800bf06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800beec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d109      	bne.n	800bf06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bef2:	4b68      	ldr	r3, [pc, #416]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	08db      	lsrs	r3, r3, #3
 800bef8:	f003 0303 	and.w	r3, r3, #3
 800befc:	4a66      	ldr	r2, [pc, #408]	@ (800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800befe:	fa22 f303 	lsr.w	r3, r2, r3
 800bf02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf04:	e01e      	b.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf06:	4b63      	ldr	r3, [pc, #396]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf12:	d106      	bne.n	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800bf14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf1a:	d102      	bne.n	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf1c:	4b5f      	ldr	r3, [pc, #380]	@ (800c09c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bf1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf20:	e010      	b.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf22:	4b5c      	ldr	r3, [pc, #368]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf2e:	d106      	bne.n	800bf3e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800bf30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf36:	d102      	bne.n	800bf3e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf38:	4b59      	ldr	r3, [pc, #356]	@ (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bf3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf3c:	e002      	b.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bf42:	e386      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf44:	e385      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf46:	4b57      	ldr	r3, [pc, #348]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bf48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf4a:	e382      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf50:	e37f      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bf52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf56:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800bf5a:	430b      	orrs	r3, r1
 800bf5c:	f040 80a7 	bne.w	800c0ae <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bf60:	4b4c      	ldr	r3, [pc, #304]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf64:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800bf68:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bf70:	d055      	beq.n	800c01e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800bf72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bf78:	f200 8096 	bhi.w	800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bf82:	f000 8084 	beq.w	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800bf86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bf8c:	f200 808c 	bhi.w	800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bf90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bf96:	d030      	beq.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800bf98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bf9e:	f200 8083 	bhi.w	800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d004      	beq.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800bfa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bfae:	d012      	beq.n	800bfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800bfb0:	e07a      	b.n	800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfb2:	4b38      	ldr	r3, [pc, #224]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bfba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bfbe:	d107      	bne.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f000 fe0b 	bl	800cbe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfce:	e340      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfd4:	e33d      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfd6:	4b2f      	ldr	r3, [pc, #188]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bfde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bfe2:	d107      	bne.n	800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfe4:	f107 0318 	add.w	r3, r7, #24
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f000 fb51 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bff2:	e32e      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bff8:	e32b      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bffa:	4b26      	ldr	r3, [pc, #152]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c006:	d107      	bne.n	800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c008:	f107 030c 	add.w	r3, r7, #12
 800c00c:	4618      	mov	r0, r3
 800c00e:	f000 fc93 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c016:	e31c      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c018:	2300      	movs	r3, #0
 800c01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c01c:	e319      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c01e:	4b1d      	ldr	r3, [pc, #116]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c022:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c026:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c028:	4b1a      	ldr	r3, [pc, #104]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f003 0304 	and.w	r3, r3, #4
 800c030:	2b04      	cmp	r3, #4
 800c032:	d10c      	bne.n	800c04e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c036:	2b00      	cmp	r3, #0
 800c038:	d109      	bne.n	800c04e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c03a:	4b16      	ldr	r3, [pc, #88]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	08db      	lsrs	r3, r3, #3
 800c040:	f003 0303 	and.w	r3, r3, #3
 800c044:	4a14      	ldr	r2, [pc, #80]	@ (800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c046:	fa22 f303 	lsr.w	r3, r2, r3
 800c04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c04c:	e01e      	b.n	800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c04e:	4b11      	ldr	r3, [pc, #68]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c05a:	d106      	bne.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c05c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c05e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c062:	d102      	bne.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c064:	4b0d      	ldr	r3, [pc, #52]	@ (800c09c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c068:	e010      	b.n	800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c06a:	4b0a      	ldr	r3, [pc, #40]	@ (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c072:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c076:	d106      	bne.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c07a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c07e:	d102      	bne.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c080:	4b07      	ldr	r3, [pc, #28]	@ (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c084:	e002      	b.n	800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c086:	2300      	movs	r3, #0
 800c088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c08a:	e2e2      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c08c:	e2e1      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c08e:	4b05      	ldr	r3, [pc, #20]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c092:	e2de      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c094:	58024400 	.word	0x58024400
 800c098:	03d09000 	.word	0x03d09000
 800c09c:	003d0900 	.word	0x003d0900
 800c0a0:	017d7840 	.word	0x017d7840
 800c0a4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0ac:	e2d1      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c0ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0b2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c0b6:	430b      	orrs	r3, r1
 800c0b8:	f040 809c 	bne.w	800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c0bc:	4b93      	ldr	r3, [pc, #588]	@ (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0c0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c0c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c0cc:	d054      	beq.n	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c0d4:	f200 808b 	bhi.w	800c1ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c0de:	f000 8083 	beq.w	800c1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c0e8:	f200 8081 	bhi.w	800c1ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c0f2:	d02f      	beq.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c0fa:	d878      	bhi.n	800c1ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d004      	beq.n	800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c108:	d012      	beq.n	800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c10a:	e070      	b.n	800c1ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c10c:	4b7f      	ldr	r3, [pc, #508]	@ (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c114:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c118:	d107      	bne.n	800c12a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c11a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c11e:	4618      	mov	r0, r3
 800c120:	f000 fd5e 	bl	800cbe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c128:	e293      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c12a:	2300      	movs	r3, #0
 800c12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c12e:	e290      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c130:	4b76      	ldr	r3, [pc, #472]	@ (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c138:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c13c:	d107      	bne.n	800c14e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c13e:	f107 0318 	add.w	r3, r7, #24
 800c142:	4618      	mov	r0, r3
 800c144:	f000 faa4 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c14c:	e281      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c14e:	2300      	movs	r3, #0
 800c150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c152:	e27e      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c154:	4b6d      	ldr	r3, [pc, #436]	@ (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c15c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c160:	d107      	bne.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c162:	f107 030c 	add.w	r3, r7, #12
 800c166:	4618      	mov	r0, r3
 800c168:	f000 fbe6 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c170:	e26f      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c172:	2300      	movs	r3, #0
 800c174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c176:	e26c      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c178:	4b64      	ldr	r3, [pc, #400]	@ (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c17a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c17c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c180:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c182:	4b62      	ldr	r3, [pc, #392]	@ (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 0304 	and.w	r3, r3, #4
 800c18a:	2b04      	cmp	r3, #4
 800c18c:	d10c      	bne.n	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c18e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c190:	2b00      	cmp	r3, #0
 800c192:	d109      	bne.n	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c194:	4b5d      	ldr	r3, [pc, #372]	@ (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	08db      	lsrs	r3, r3, #3
 800c19a:	f003 0303 	and.w	r3, r3, #3
 800c19e:	4a5c      	ldr	r2, [pc, #368]	@ (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c1a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c1a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1a6:	e01e      	b.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1a8:	4b58      	ldr	r3, [pc, #352]	@ (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1b4:	d106      	bne.n	800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1bc:	d102      	bne.n	800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1be:	4b55      	ldr	r3, [pc, #340]	@ (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1c2:	e010      	b.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1c4:	4b51      	ldr	r3, [pc, #324]	@ (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1d0:	d106      	bne.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c1d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1d8:	d102      	bne.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c1da:	4b4f      	ldr	r3, [pc, #316]	@ (800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1de:	e002      	b.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c1e4:	e235      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c1e6:	e234      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c1e8:	4b4c      	ldr	r3, [pc, #304]	@ (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1ec:	e231      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1f2:	e22e      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c1f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1f8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c1fc:	430b      	orrs	r3, r1
 800c1fe:	f040 808f 	bne.w	800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c202:	4b42      	ldr	r3, [pc, #264]	@ (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c206:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c20a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800c20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c20e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c212:	d06b      	beq.n	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c216:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c21a:	d874      	bhi.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c21e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c222:	d056      	beq.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c226:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c22a:	d86c      	bhi.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c22e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c232:	d03b      	beq.n	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c236:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c23a:	d864      	bhi.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c23e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c242:	d021      	beq.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c246:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c24a:	d85c      	bhi.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d004      	beq.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c258:	d004      	beq.n	800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c25a:	e054      	b.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c25c:	f7fe fa26 	bl	800a6ac <HAL_RCC_GetPCLK1Freq>
 800c260:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c262:	e1f6      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c264:	4b29      	ldr	r3, [pc, #164]	@ (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c26c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c270:	d107      	bne.n	800c282 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c272:	f107 0318 	add.w	r3, r7, #24
 800c276:	4618      	mov	r0, r3
 800c278:	f000 fa0a 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c280:	e1e7      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c282:	2300      	movs	r3, #0
 800c284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c286:	e1e4      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c288:	4b20      	ldr	r3, [pc, #128]	@ (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c294:	d107      	bne.n	800c2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c296:	f107 030c 	add.w	r3, r7, #12
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 fb4c 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2a4:	e1d5      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2aa:	e1d2      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c2ac:	4b17      	ldr	r3, [pc, #92]	@ (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f003 0304 	and.w	r3, r3, #4
 800c2b4:	2b04      	cmp	r3, #4
 800c2b6:	d109      	bne.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2b8:	4b14      	ldr	r3, [pc, #80]	@ (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	08db      	lsrs	r3, r3, #3
 800c2be:	f003 0303 	and.w	r3, r3, #3
 800c2c2:	4a13      	ldr	r2, [pc, #76]	@ (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c2c4:	fa22 f303 	lsr.w	r3, r2, r3
 800c2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ca:	e1c2      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2d0:	e1bf      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c2d2:	4b0e      	ldr	r3, [pc, #56]	@ (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2de:	d102      	bne.n	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c2e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2e4:	e1b5      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2ea:	e1b2      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c2ec:	4b07      	ldr	r3, [pc, #28]	@ (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2f8:	d102      	bne.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c2fa:	4b07      	ldr	r3, [pc, #28]	@ (800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2fe:	e1a8      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c300:	2300      	movs	r3, #0
 800c302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c304:	e1a5      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c306:	2300      	movs	r3, #0
 800c308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c30a:	e1a2      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c30c:	58024400 	.word	0x58024400
 800c310:	03d09000 	.word	0x03d09000
 800c314:	003d0900 	.word	0x003d0900
 800c318:	017d7840 	.word	0x017d7840
 800c31c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c320:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c324:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800c328:	430b      	orrs	r3, r1
 800c32a:	d173      	bne.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c32c:	4b9c      	ldr	r3, [pc, #624]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c32e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c330:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c334:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c338:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c33c:	d02f      	beq.n	800c39e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c344:	d863      	bhi.n	800c40e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d004      	beq.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c34e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c352:	d012      	beq.n	800c37a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c354:	e05b      	b.n	800c40e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c356:	4b92      	ldr	r3, [pc, #584]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c35e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c362:	d107      	bne.n	800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c364:	f107 0318 	add.w	r3, r7, #24
 800c368:	4618      	mov	r0, r3
 800c36a:	f000 f991 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c372:	e16e      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c374:	2300      	movs	r3, #0
 800c376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c378:	e16b      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c37a:	4b89      	ldr	r3, [pc, #548]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c382:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c386:	d107      	bne.n	800c398 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c388:	f107 030c 	add.w	r3, r7, #12
 800c38c:	4618      	mov	r0, r3
 800c38e:	f000 fad3 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c396:	e15c      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c398:	2300      	movs	r3, #0
 800c39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c39c:	e159      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c39e:	4b80      	ldr	r3, [pc, #512]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c3a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c3a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3a8:	4b7d      	ldr	r3, [pc, #500]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f003 0304 	and.w	r3, r3, #4
 800c3b0:	2b04      	cmp	r3, #4
 800c3b2:	d10c      	bne.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c3b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d109      	bne.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3ba:	4b79      	ldr	r3, [pc, #484]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	08db      	lsrs	r3, r3, #3
 800c3c0:	f003 0303 	and.w	r3, r3, #3
 800c3c4:	4a77      	ldr	r2, [pc, #476]	@ (800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c3c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3cc:	e01e      	b.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3ce:	4b74      	ldr	r3, [pc, #464]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3da:	d106      	bne.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c3dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3e2:	d102      	bne.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c3e4:	4b70      	ldr	r3, [pc, #448]	@ (800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3e8:	e010      	b.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3ea:	4b6d      	ldr	r3, [pc, #436]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c3f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c3f6:	d106      	bne.n	800c406 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c3f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3fe:	d102      	bne.n	800c406 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c400:	4b6a      	ldr	r3, [pc, #424]	@ (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c404:	e002      	b.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c406:	2300      	movs	r3, #0
 800c408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c40a:	e122      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c40c:	e121      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c40e:	2300      	movs	r3, #0
 800c410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c412:	e11e      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c414:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c418:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c41c:	430b      	orrs	r3, r1
 800c41e:	d133      	bne.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c420:	4b5f      	ldr	r3, [pc, #380]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c428:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d004      	beq.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c432:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c436:	d012      	beq.n	800c45e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c438:	e023      	b.n	800c482 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c43a:	4b59      	ldr	r3, [pc, #356]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c442:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c446:	d107      	bne.n	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c448:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c44c:	4618      	mov	r0, r3
 800c44e:	f000 fbc7 	bl	800cbe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c456:	e0fc      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c458:	2300      	movs	r3, #0
 800c45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c45c:	e0f9      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c45e:	4b50      	ldr	r3, [pc, #320]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c466:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c46a:	d107      	bne.n	800c47c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c46c:	f107 0318 	add.w	r3, r7, #24
 800c470:	4618      	mov	r0, r3
 800c472:	f000 f90d 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c476:	6a3b      	ldr	r3, [r7, #32]
 800c478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c47a:	e0ea      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c47c:	2300      	movs	r3, #0
 800c47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c480:	e0e7      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c482:	2300      	movs	r3, #0
 800c484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c486:	e0e4      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c48c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c490:	430b      	orrs	r3, r1
 800c492:	f040 808d 	bne.w	800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c496:	4b42      	ldr	r3, [pc, #264]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c49a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800c49e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c4a6:	d06b      	beq.n	800c580 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c4ae:	d874      	bhi.n	800c59a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4b6:	d056      	beq.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4be:	d86c      	bhi.n	800c59a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c4c6:	d03b      	beq.n	800c540 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c4ce:	d864      	bhi.n	800c59a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c4d6:	d021      	beq.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c4de:	d85c      	bhi.n	800c59a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d004      	beq.n	800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c4ec:	d004      	beq.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c4ee:	e054      	b.n	800c59a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c4f0:	f000 f8b8 	bl	800c664 <HAL_RCCEx_GetD3PCLK1Freq>
 800c4f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c4f6:	e0ac      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4f8:	4b29      	ldr	r3, [pc, #164]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c500:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c504:	d107      	bne.n	800c516 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c506:	f107 0318 	add.w	r3, r7, #24
 800c50a:	4618      	mov	r0, r3
 800c50c:	f000 f8c0 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c514:	e09d      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c51a:	e09a      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c51c:	4b20      	ldr	r3, [pc, #128]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c528:	d107      	bne.n	800c53a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c52a:	f107 030c 	add.w	r3, r7, #12
 800c52e:	4618      	mov	r0, r3
 800c530:	f000 fa02 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c538:	e08b      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c53a:	2300      	movs	r3, #0
 800c53c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c53e:	e088      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c540:	4b17      	ldr	r3, [pc, #92]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f003 0304 	and.w	r3, r3, #4
 800c548:	2b04      	cmp	r3, #4
 800c54a:	d109      	bne.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c54c:	4b14      	ldr	r3, [pc, #80]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	08db      	lsrs	r3, r3, #3
 800c552:	f003 0303 	and.w	r3, r3, #3
 800c556:	4a13      	ldr	r2, [pc, #76]	@ (800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c558:	fa22 f303 	lsr.w	r3, r2, r3
 800c55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c55e:	e078      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c560:	2300      	movs	r3, #0
 800c562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c564:	e075      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c566:	4b0e      	ldr	r3, [pc, #56]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c56e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c572:	d102      	bne.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c574:	4b0c      	ldr	r3, [pc, #48]	@ (800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c578:	e06b      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c57a:	2300      	movs	r3, #0
 800c57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c57e:	e068      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c580:	4b07      	ldr	r3, [pc, #28]	@ (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c588:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c58c:	d102      	bne.n	800c594 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c58e:	4b07      	ldr	r3, [pc, #28]	@ (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c592:	e05e      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c594:	2300      	movs	r3, #0
 800c596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c598:	e05b      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c59e:	e058      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5a0:	58024400 	.word	0x58024400
 800c5a4:	03d09000 	.word	0x03d09000
 800c5a8:	003d0900 	.word	0x003d0900
 800c5ac:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c5b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5b4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c5b8:	430b      	orrs	r3, r1
 800c5ba:	d148      	bne.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c5bc:	4b27      	ldr	r3, [pc, #156]	@ (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c5be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c5c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c5cc:	d02a      	beq.n	800c624 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c5d4:	d838      	bhi.n	800c648 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d004      	beq.n	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5e2:	d00d      	beq.n	800c600 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c5e4:	e030      	b.n	800c648 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c5e6:	4b1d      	ldr	r3, [pc, #116]	@ (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5f2:	d102      	bne.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c5f4:	4b1a      	ldr	r3, [pc, #104]	@ (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5f8:	e02b      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5fe:	e028      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c600:	4b16      	ldr	r3, [pc, #88]	@ (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c608:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c60c:	d107      	bne.n	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c60e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c612:	4618      	mov	r0, r3
 800c614:	f000 fae4 	bl	800cbe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c61c:	e019      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c61e:	2300      	movs	r3, #0
 800c620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c622:	e016      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c624:	4b0d      	ldr	r3, [pc, #52]	@ (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c62c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c630:	d107      	bne.n	800c642 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c632:	f107 0318 	add.w	r3, r7, #24
 800c636:	4618      	mov	r0, r3
 800c638:	f000 f82a 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c640:	e007      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c642:	2300      	movs	r3, #0
 800c644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c646:	e004      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c648:	2300      	movs	r3, #0
 800c64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c64c:	e001      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c64e:	2300      	movs	r3, #0
 800c650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800c652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c654:	4618      	mov	r0, r3
 800c656:	3740      	adds	r7, #64	@ 0x40
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	58024400 	.word	0x58024400
 800c660:	017d7840 	.word	0x017d7840

0800c664 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c668:	f7fd fff0 	bl	800a64c <HAL_RCC_GetHCLKFreq>
 800c66c:	4602      	mov	r2, r0
 800c66e:	4b06      	ldr	r3, [pc, #24]	@ (800c688 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c670:	6a1b      	ldr	r3, [r3, #32]
 800c672:	091b      	lsrs	r3, r3, #4
 800c674:	f003 0307 	and.w	r3, r3, #7
 800c678:	4904      	ldr	r1, [pc, #16]	@ (800c68c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c67a:	5ccb      	ldrb	r3, [r1, r3]
 800c67c:	f003 031f 	and.w	r3, r3, #31
 800c680:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c684:	4618      	mov	r0, r3
 800c686:	bd80      	pop	{r7, pc}
 800c688:	58024400 	.word	0x58024400
 800c68c:	08019980 	.word	0x08019980

0800c690 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c690:	b480      	push	{r7}
 800c692:	b089      	sub	sp, #36	@ 0x24
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c698:	4ba1      	ldr	r3, [pc, #644]	@ (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c69a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c69c:	f003 0303 	and.w	r3, r3, #3
 800c6a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c6a2:	4b9f      	ldr	r3, [pc, #636]	@ (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6a6:	0b1b      	lsrs	r3, r3, #12
 800c6a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c6ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c6ae:	4b9c      	ldr	r3, [pc, #624]	@ (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b2:	091b      	lsrs	r3, r3, #4
 800c6b4:	f003 0301 	and.w	r3, r3, #1
 800c6b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c6ba:	4b99      	ldr	r3, [pc, #612]	@ (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6be:	08db      	lsrs	r3, r3, #3
 800c6c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c6c4:	693a      	ldr	r2, [r7, #16]
 800c6c6:	fb02 f303 	mul.w	r3, r2, r3
 800c6ca:	ee07 3a90 	vmov	s15, r3
 800c6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f000 8111 	beq.w	800c900 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	2b02      	cmp	r3, #2
 800c6e2:	f000 8083 	beq.w	800c7ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	f200 80a1 	bhi.w	800c830 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d003      	beq.n	800c6fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d056      	beq.n	800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c6fa:	e099      	b.n	800c830 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6fc:	4b88      	ldr	r3, [pc, #544]	@ (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f003 0320 	and.w	r3, r3, #32
 800c704:	2b00      	cmp	r3, #0
 800c706:	d02d      	beq.n	800c764 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c708:	4b85      	ldr	r3, [pc, #532]	@ (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	08db      	lsrs	r3, r3, #3
 800c70e:	f003 0303 	and.w	r3, r3, #3
 800c712:	4a84      	ldr	r2, [pc, #528]	@ (800c924 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c714:	fa22 f303 	lsr.w	r3, r2, r3
 800c718:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	ee07 3a90 	vmov	s15, r3
 800c720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	ee07 3a90 	vmov	s15, r3
 800c72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c72e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c732:	4b7b      	ldr	r3, [pc, #492]	@ (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c73a:	ee07 3a90 	vmov	s15, r3
 800c73e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c742:	ed97 6a03 	vldr	s12, [r7, #12]
 800c746:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c928 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c74a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c74e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c75a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c75e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c762:	e087      	b.n	800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	ee07 3a90 	vmov	s15, r3
 800c76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c76e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c776:	4b6a      	ldr	r3, [pc, #424]	@ (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c77e:	ee07 3a90 	vmov	s15, r3
 800c782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c786:	ed97 6a03 	vldr	s12, [r7, #12]
 800c78a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c928 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c78e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c79a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c79e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7a6:	e065      	b.n	800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	ee07 3a90 	vmov	s15, r3
 800c7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c930 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7ba:	4b59      	ldr	r3, [pc, #356]	@ (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c2:	ee07 3a90 	vmov	s15, r3
 800c7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c928 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7ea:	e043      	b.n	800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	ee07 3a90 	vmov	s15, r3
 800c7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7fe:	4b48      	ldr	r3, [pc, #288]	@ (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c806:	ee07 3a90 	vmov	s15, r3
 800c80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c80e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c812:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c928 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c81e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c82a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c82e:	e021      	b.n	800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	ee07 3a90 	vmov	s15, r3
 800c836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c83a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c930 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c83e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c842:	4b37      	ldr	r3, [pc, #220]	@ (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c84a:	ee07 3a90 	vmov	s15, r3
 800c84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c852:	ed97 6a03 	vldr	s12, [r7, #12]
 800c856:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c928 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c85a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c85e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c86e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c872:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c874:	4b2a      	ldr	r3, [pc, #168]	@ (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c878:	0a5b      	lsrs	r3, r3, #9
 800c87a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c87e:	ee07 3a90 	vmov	s15, r3
 800c882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c886:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c88a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c88e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c89a:	ee17 2a90 	vmov	r2, s15
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c8a2:	4b1f      	ldr	r3, [pc, #124]	@ (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8a6:	0c1b      	lsrs	r3, r3, #16
 800c8a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8ac:	ee07 3a90 	vmov	s15, r3
 800c8b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c8b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8c8:	ee17 2a90 	vmov	r2, s15
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c8d0:	4b13      	ldr	r3, [pc, #76]	@ (800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8d4:	0e1b      	lsrs	r3, r3, #24
 800c8d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8da:	ee07 3a90 	vmov	s15, r3
 800c8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c8e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8f6:	ee17 2a90 	vmov	r2, s15
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c8fe:	e008      	b.n	800c912 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	609a      	str	r2, [r3, #8]
}
 800c912:	bf00      	nop
 800c914:	3724      	adds	r7, #36	@ 0x24
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	58024400 	.word	0x58024400
 800c924:	03d09000 	.word	0x03d09000
 800c928:	46000000 	.word	0x46000000
 800c92c:	4c742400 	.word	0x4c742400
 800c930:	4a742400 	.word	0x4a742400
 800c934:	4bbebc20 	.word	0x4bbebc20

0800c938 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c938:	b480      	push	{r7}
 800c93a:	b089      	sub	sp, #36	@ 0x24
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c940:	4ba1      	ldr	r3, [pc, #644]	@ (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c944:	f003 0303 	and.w	r3, r3, #3
 800c948:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c94a:	4b9f      	ldr	r3, [pc, #636]	@ (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c94e:	0d1b      	lsrs	r3, r3, #20
 800c950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c954:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c956:	4b9c      	ldr	r3, [pc, #624]	@ (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c95a:	0a1b      	lsrs	r3, r3, #8
 800c95c:	f003 0301 	and.w	r3, r3, #1
 800c960:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c962:	4b99      	ldr	r3, [pc, #612]	@ (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c966:	08db      	lsrs	r3, r3, #3
 800c968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	fb02 f303 	mul.w	r3, r2, r3
 800c972:	ee07 3a90 	vmov	s15, r3
 800c976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c97a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	2b00      	cmp	r3, #0
 800c982:	f000 8111 	beq.w	800cba8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	2b02      	cmp	r3, #2
 800c98a:	f000 8083 	beq.w	800ca94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	2b02      	cmp	r3, #2
 800c992:	f200 80a1 	bhi.w	800cad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d003      	beq.n	800c9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	d056      	beq.n	800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c9a2:	e099      	b.n	800cad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9a4:	4b88      	ldr	r3, [pc, #544]	@ (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 0320 	and.w	r3, r3, #32
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d02d      	beq.n	800ca0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9b0:	4b85      	ldr	r3, [pc, #532]	@ (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	08db      	lsrs	r3, r3, #3
 800c9b6:	f003 0303 	and.w	r3, r3, #3
 800c9ba:	4a84      	ldr	r2, [pc, #528]	@ (800cbcc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c9bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c9c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	ee07 3a90 	vmov	s15, r3
 800c9c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	ee07 3a90 	vmov	s15, r3
 800c9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9da:	4b7b      	ldr	r3, [pc, #492]	@ (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9e2:	ee07 3a90 	vmov	s15, r3
 800c9e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c9fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca0a:	e087      	b.n	800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	ee07 3a90 	vmov	s15, r3
 800ca12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca16:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ca1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca1e:	4b6a      	ldr	r3, [pc, #424]	@ (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca26:	ee07 3a90 	vmov	s15, r3
 800ca2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca32:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca4e:	e065      	b.n	800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	ee07 3a90 	vmov	s15, r3
 800ca56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca5a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ca5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca62:	4b59      	ldr	r3, [pc, #356]	@ (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca6a:	ee07 3a90 	vmov	s15, r3
 800ca6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca76:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca92:	e043      	b.n	800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	ee07 3a90 	vmov	s15, r3
 800ca9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca9e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cbdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800caa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caa6:	4b48      	ldr	r3, [pc, #288]	@ (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caae:	ee07 3a90 	vmov	s15, r3
 800cab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cab6:	ed97 6a03 	vldr	s12, [r7, #12]
 800caba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cabe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800caca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cace:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cad6:	e021      	b.n	800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	ee07 3a90 	vmov	s15, r3
 800cade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cae2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caea:	4b37      	ldr	r3, [pc, #220]	@ (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caf2:	ee07 3a90 	vmov	s15, r3
 800caf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cafa:	ed97 6a03 	vldr	s12, [r7, #12]
 800cafe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cb1c:	4b2a      	ldr	r3, [pc, #168]	@ (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb20:	0a5b      	lsrs	r3, r3, #9
 800cb22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb26:	ee07 3a90 	vmov	s15, r3
 800cb2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb36:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb42:	ee17 2a90 	vmov	r2, s15
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cb4a:	4b1f      	ldr	r3, [pc, #124]	@ (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb4e:	0c1b      	lsrs	r3, r3, #16
 800cb50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb54:	ee07 3a90 	vmov	s15, r3
 800cb58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb60:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb64:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb70:	ee17 2a90 	vmov	r2, s15
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cb78:	4b13      	ldr	r3, [pc, #76]	@ (800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb7c:	0e1b      	lsrs	r3, r3, #24
 800cb7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb82:	ee07 3a90 	vmov	s15, r3
 800cb86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb92:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb9e:	ee17 2a90 	vmov	r2, s15
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cba6:	e008      	b.n	800cbba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	609a      	str	r2, [r3, #8]
}
 800cbba:	bf00      	nop
 800cbbc:	3724      	adds	r7, #36	@ 0x24
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop
 800cbc8:	58024400 	.word	0x58024400
 800cbcc:	03d09000 	.word	0x03d09000
 800cbd0:	46000000 	.word	0x46000000
 800cbd4:	4c742400 	.word	0x4c742400
 800cbd8:	4a742400 	.word	0x4a742400
 800cbdc:	4bbebc20 	.word	0x4bbebc20

0800cbe0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b089      	sub	sp, #36	@ 0x24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cbe8:	4ba0      	ldr	r3, [pc, #640]	@ (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbec:	f003 0303 	and.w	r3, r3, #3
 800cbf0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cbf2:	4b9e      	ldr	r3, [pc, #632]	@ (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbf6:	091b      	lsrs	r3, r3, #4
 800cbf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cbfc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cbfe:	4b9b      	ldr	r3, [pc, #620]	@ (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc02:	f003 0301 	and.w	r3, r3, #1
 800cc06:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cc08:	4b98      	ldr	r3, [pc, #608]	@ (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc0c:	08db      	lsrs	r3, r3, #3
 800cc0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc12:	693a      	ldr	r2, [r7, #16]
 800cc14:	fb02 f303 	mul.w	r3, r2, r3
 800cc18:	ee07 3a90 	vmov	s15, r3
 800cc1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc20:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f000 8111 	beq.w	800ce4e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cc2c:	69bb      	ldr	r3, [r7, #24]
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	f000 8083 	beq.w	800cd3a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	2b02      	cmp	r3, #2
 800cc38:	f200 80a1 	bhi.w	800cd7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cc3c:	69bb      	ldr	r3, [r7, #24]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d003      	beq.n	800cc4a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d056      	beq.n	800ccf6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cc48:	e099      	b.n	800cd7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc4a:	4b88      	ldr	r3, [pc, #544]	@ (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f003 0320 	and.w	r3, r3, #32
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d02d      	beq.n	800ccb2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc56:	4b85      	ldr	r3, [pc, #532]	@ (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	08db      	lsrs	r3, r3, #3
 800cc5c:	f003 0303 	and.w	r3, r3, #3
 800cc60:	4a83      	ldr	r2, [pc, #524]	@ (800ce70 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cc62:	fa22 f303 	lsr.w	r3, r2, r3
 800cc66:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	ee07 3a90 	vmov	s15, r3
 800cc6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	ee07 3a90 	vmov	s15, r3
 800cc78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc80:	4b7a      	ldr	r3, [pc, #488]	@ (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc88:	ee07 3a90 	vmov	s15, r3
 800cc8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc90:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc94:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ce74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cca0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ccb0:	e087      	b.n	800cdc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	ee07 3a90 	vmov	s15, r3
 800ccb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccbc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ccc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccc4:	4b69      	ldr	r3, [pc, #420]	@ (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cccc:	ee07 3a90 	vmov	s15, r3
 800ccd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccd4:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccd8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ce74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ccdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cce0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cce4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccf0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccf4:	e065      	b.n	800cdc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	ee07 3a90 	vmov	s15, r3
 800ccfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd00:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ce7c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cd04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd08:	4b58      	ldr	r3, [pc, #352]	@ (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd10:	ee07 3a90 	vmov	s15, r3
 800cd14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd18:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd1c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ce74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd38:	e043      	b.n	800cdc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	ee07 3a90 	vmov	s15, r3
 800cd40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd44:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ce80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cd48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd4c:	4b47      	ldr	r3, [pc, #284]	@ (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd54:	ee07 3a90 	vmov	s15, r3
 800cd58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd60:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ce74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd7c:	e021      	b.n	800cdc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	ee07 3a90 	vmov	s15, r3
 800cd84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd88:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cd8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd90:	4b36      	ldr	r3, [pc, #216]	@ (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd98:	ee07 3a90 	vmov	s15, r3
 800cd9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cda0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cda4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ce74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cda8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cdb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdc0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cdc2:	4b2a      	ldr	r3, [pc, #168]	@ (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdc6:	0a5b      	lsrs	r3, r3, #9
 800cdc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cdcc:	ee07 3a90 	vmov	s15, r3
 800cdd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cdd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cddc:	edd7 6a07 	vldr	s13, [r7, #28]
 800cde0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cde4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cde8:	ee17 2a90 	vmov	r2, s15
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cdf0:	4b1e      	ldr	r3, [pc, #120]	@ (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdf4:	0c1b      	lsrs	r3, r3, #16
 800cdf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cdfa:	ee07 3a90 	vmov	s15, r3
 800cdfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce16:	ee17 2a90 	vmov	r2, s15
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ce1e:	4b13      	ldr	r3, [pc, #76]	@ (800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce22:	0e1b      	lsrs	r3, r3, #24
 800ce24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce28:	ee07 3a90 	vmov	s15, r3
 800ce2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce38:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce44:	ee17 2a90 	vmov	r2, s15
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ce4c:	e008      	b.n	800ce60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	609a      	str	r2, [r3, #8]
}
 800ce60:	bf00      	nop
 800ce62:	3724      	adds	r7, #36	@ 0x24
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr
 800ce6c:	58024400 	.word	0x58024400
 800ce70:	03d09000 	.word	0x03d09000
 800ce74:	46000000 	.word	0x46000000
 800ce78:	4c742400 	.word	0x4c742400
 800ce7c:	4a742400 	.word	0x4a742400
 800ce80:	4bbebc20 	.word	0x4bbebc20

0800ce84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce92:	4b53      	ldr	r3, [pc, #332]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800ce94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce96:	f003 0303 	and.w	r3, r3, #3
 800ce9a:	2b03      	cmp	r3, #3
 800ce9c:	d101      	bne.n	800cea2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e099      	b.n	800cfd6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cea2:	4b4f      	ldr	r3, [pc, #316]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4a4e      	ldr	r2, [pc, #312]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cea8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ceac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ceae:	f7f6 fc99 	bl	80037e4 <HAL_GetTick>
 800ceb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ceb4:	e008      	b.n	800cec8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ceb6:	f7f6 fc95 	bl	80037e4 <HAL_GetTick>
 800ceba:	4602      	mov	r2, r0
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	1ad3      	subs	r3, r2, r3
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	d901      	bls.n	800cec8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cec4:	2303      	movs	r3, #3
 800cec6:	e086      	b.n	800cfd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cec8:	4b45      	ldr	r3, [pc, #276]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1f0      	bne.n	800ceb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ced4:	4b42      	ldr	r3, [pc, #264]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800ced6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ced8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	031b      	lsls	r3, r3, #12
 800cee2:	493f      	ldr	r1, [pc, #252]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cee4:	4313      	orrs	r3, r2
 800cee6:	628b      	str	r3, [r1, #40]	@ 0x28
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	3b01      	subs	r3, #1
 800ceee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	689b      	ldr	r3, [r3, #8]
 800cef6:	3b01      	subs	r3, #1
 800cef8:	025b      	lsls	r3, r3, #9
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	431a      	orrs	r2, r3
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	68db      	ldr	r3, [r3, #12]
 800cf02:	3b01      	subs	r3, #1
 800cf04:	041b      	lsls	r3, r3, #16
 800cf06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cf0a:	431a      	orrs	r2, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	691b      	ldr	r3, [r3, #16]
 800cf10:	3b01      	subs	r3, #1
 800cf12:	061b      	lsls	r3, r3, #24
 800cf14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cf18:	4931      	ldr	r1, [pc, #196]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cf1e:	4b30      	ldr	r3, [pc, #192]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf22:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	695b      	ldr	r3, [r3, #20]
 800cf2a:	492d      	ldr	r1, [pc, #180]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cf30:	4b2b      	ldr	r3, [pc, #172]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf34:	f023 0220 	bic.w	r2, r3, #32
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	699b      	ldr	r3, [r3, #24]
 800cf3c:	4928      	ldr	r1, [pc, #160]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cf42:	4b27      	ldr	r3, [pc, #156]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf46:	4a26      	ldr	r2, [pc, #152]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf48:	f023 0310 	bic.w	r3, r3, #16
 800cf4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cf4e:	4b24      	ldr	r3, [pc, #144]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cf52:	4b24      	ldr	r3, [pc, #144]	@ (800cfe4 <RCCEx_PLL2_Config+0x160>)
 800cf54:	4013      	ands	r3, r2
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	69d2      	ldr	r2, [r2, #28]
 800cf5a:	00d2      	lsls	r2, r2, #3
 800cf5c:	4920      	ldr	r1, [pc, #128]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cf62:	4b1f      	ldr	r3, [pc, #124]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf66:	4a1e      	ldr	r2, [pc, #120]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf68:	f043 0310 	orr.w	r3, r3, #16
 800cf6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d106      	bne.n	800cf82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cf74:	4b1a      	ldr	r3, [pc, #104]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf78:	4a19      	ldr	r2, [pc, #100]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cf7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cf80:	e00f      	b.n	800cfa2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d106      	bne.n	800cf96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cf88:	4b15      	ldr	r3, [pc, #84]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf8c:	4a14      	ldr	r2, [pc, #80]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cf92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cf94:	e005      	b.n	800cfa2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cf96:	4b12      	ldr	r3, [pc, #72]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf9a:	4a11      	ldr	r2, [pc, #68]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cf9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cfa0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cfa2:	4b0f      	ldr	r3, [pc, #60]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4a0e      	ldr	r2, [pc, #56]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cfa8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cfac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfae:	f7f6 fc19 	bl	80037e4 <HAL_GetTick>
 800cfb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cfb4:	e008      	b.n	800cfc8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cfb6:	f7f6 fc15 	bl	80037e4 <HAL_GetTick>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	1ad3      	subs	r3, r2, r3
 800cfc0:	2b02      	cmp	r3, #2
 800cfc2:	d901      	bls.n	800cfc8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cfc4:	2303      	movs	r3, #3
 800cfc6:	e006      	b.n	800cfd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cfc8:	4b05      	ldr	r3, [pc, #20]	@ (800cfe0 <RCCEx_PLL2_Config+0x15c>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d0f0      	beq.n	800cfb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cfd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3710      	adds	r7, #16
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	58024400 	.word	0x58024400
 800cfe4:	ffff0007 	.word	0xffff0007

0800cfe8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cff2:	2300      	movs	r3, #0
 800cff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cff6:	4b53      	ldr	r3, [pc, #332]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800cff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cffa:	f003 0303 	and.w	r3, r3, #3
 800cffe:	2b03      	cmp	r3, #3
 800d000:	d101      	bne.n	800d006 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d002:	2301      	movs	r3, #1
 800d004:	e099      	b.n	800d13a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d006:	4b4f      	ldr	r3, [pc, #316]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a4e      	ldr	r2, [pc, #312]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d00c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d012:	f7f6 fbe7 	bl	80037e4 <HAL_GetTick>
 800d016:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d018:	e008      	b.n	800d02c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d01a:	f7f6 fbe3 	bl	80037e4 <HAL_GetTick>
 800d01e:	4602      	mov	r2, r0
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	1ad3      	subs	r3, r2, r3
 800d024:	2b02      	cmp	r3, #2
 800d026:	d901      	bls.n	800d02c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d028:	2303      	movs	r3, #3
 800d02a:	e086      	b.n	800d13a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d02c:	4b45      	ldr	r3, [pc, #276]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1f0      	bne.n	800d01a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d038:	4b42      	ldr	r3, [pc, #264]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d03c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	051b      	lsls	r3, r3, #20
 800d046:	493f      	ldr	r1, [pc, #252]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d048:	4313      	orrs	r3, r2
 800d04a:	628b      	str	r3, [r1, #40]	@ 0x28
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	3b01      	subs	r3, #1
 800d052:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	3b01      	subs	r3, #1
 800d05c:	025b      	lsls	r3, r3, #9
 800d05e:	b29b      	uxth	r3, r3
 800d060:	431a      	orrs	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	3b01      	subs	r3, #1
 800d068:	041b      	lsls	r3, r3, #16
 800d06a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d06e:	431a      	orrs	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	3b01      	subs	r3, #1
 800d076:	061b      	lsls	r3, r3, #24
 800d078:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d07c:	4931      	ldr	r1, [pc, #196]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d07e:	4313      	orrs	r3, r2
 800d080:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d082:	4b30      	ldr	r3, [pc, #192]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d086:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	695b      	ldr	r3, [r3, #20]
 800d08e:	492d      	ldr	r1, [pc, #180]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d090:	4313      	orrs	r3, r2
 800d092:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d094:	4b2b      	ldr	r3, [pc, #172]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d098:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	699b      	ldr	r3, [r3, #24]
 800d0a0:	4928      	ldr	r1, [pc, #160]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d0a6:	4b27      	ldr	r3, [pc, #156]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0aa:	4a26      	ldr	r2, [pc, #152]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d0b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d0b2:	4b24      	ldr	r3, [pc, #144]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d0b6:	4b24      	ldr	r3, [pc, #144]	@ (800d148 <RCCEx_PLL3_Config+0x160>)
 800d0b8:	4013      	ands	r3, r2
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	69d2      	ldr	r2, [r2, #28]
 800d0be:	00d2      	lsls	r2, r2, #3
 800d0c0:	4920      	ldr	r1, [pc, #128]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d0c6:	4b1f      	ldr	r3, [pc, #124]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ca:	4a1e      	ldr	r2, [pc, #120]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d0d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d106      	bne.n	800d0e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d0d8:	4b1a      	ldr	r3, [pc, #104]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0dc:	4a19      	ldr	r2, [pc, #100]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d0e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d0e4:	e00f      	b.n	800d106 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d106      	bne.n	800d0fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d0ec:	4b15      	ldr	r3, [pc, #84]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0f0:	4a14      	ldr	r2, [pc, #80]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d0f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d0f8:	e005      	b.n	800d106 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d0fa:	4b12      	ldr	r3, [pc, #72]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d0fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0fe:	4a11      	ldr	r2, [pc, #68]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d100:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d104:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d106:	4b0f      	ldr	r3, [pc, #60]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a0e      	ldr	r2, [pc, #56]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d10c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d112:	f7f6 fb67 	bl	80037e4 <HAL_GetTick>
 800d116:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d118:	e008      	b.n	800d12c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d11a:	f7f6 fb63 	bl	80037e4 <HAL_GetTick>
 800d11e:	4602      	mov	r2, r0
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	1ad3      	subs	r3, r2, r3
 800d124:	2b02      	cmp	r3, #2
 800d126:	d901      	bls.n	800d12c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d128:	2303      	movs	r3, #3
 800d12a:	e006      	b.n	800d13a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d12c:	4b05      	ldr	r3, [pc, #20]	@ (800d144 <RCCEx_PLL3_Config+0x15c>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d134:	2b00      	cmp	r3, #0
 800d136:	d0f0      	beq.n	800d11a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d138:	7bfb      	ldrb	r3, [r7, #15]
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3710      	adds	r7, #16
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	58024400 	.word	0x58024400
 800d148:	ffff0007 	.word	0xffff0007

0800d14c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d101      	bne.n	800d15e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d15a:	2301      	movs	r3, #1
 800d15c:	e049      	b.n	800d1f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d164:	b2db      	uxtb	r3, r3
 800d166:	2b00      	cmp	r3, #0
 800d168:	d106      	bne.n	800d178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2200      	movs	r2, #0
 800d16e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f7f5 ff76 	bl	8003064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2202      	movs	r2, #2
 800d17c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	3304      	adds	r3, #4
 800d188:	4619      	mov	r1, r3
 800d18a:	4610      	mov	r0, r2
 800d18c:	f000 fb88 	bl	800d8a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2201      	movs	r2, #1
 800d1dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d1f0:	2300      	movs	r3, #0
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3708      	adds	r7, #8
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
	...

0800d1fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b085      	sub	sp, #20
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d001      	beq.n	800d214 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d210:	2301      	movs	r3, #1
 800d212:	e04c      	b.n	800d2ae <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2202      	movs	r2, #2
 800d218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a26      	ldr	r2, [pc, #152]	@ (800d2bc <HAL_TIM_Base_Start+0xc0>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d022      	beq.n	800d26c <HAL_TIM_Base_Start+0x70>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d22e:	d01d      	beq.n	800d26c <HAL_TIM_Base_Start+0x70>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a22      	ldr	r2, [pc, #136]	@ (800d2c0 <HAL_TIM_Base_Start+0xc4>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d018      	beq.n	800d26c <HAL_TIM_Base_Start+0x70>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	4a21      	ldr	r2, [pc, #132]	@ (800d2c4 <HAL_TIM_Base_Start+0xc8>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d013      	beq.n	800d26c <HAL_TIM_Base_Start+0x70>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a1f      	ldr	r2, [pc, #124]	@ (800d2c8 <HAL_TIM_Base_Start+0xcc>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d00e      	beq.n	800d26c <HAL_TIM_Base_Start+0x70>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4a1e      	ldr	r2, [pc, #120]	@ (800d2cc <HAL_TIM_Base_Start+0xd0>)
 800d254:	4293      	cmp	r3, r2
 800d256:	d009      	beq.n	800d26c <HAL_TIM_Base_Start+0x70>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a1c      	ldr	r2, [pc, #112]	@ (800d2d0 <HAL_TIM_Base_Start+0xd4>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d004      	beq.n	800d26c <HAL_TIM_Base_Start+0x70>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a1b      	ldr	r2, [pc, #108]	@ (800d2d4 <HAL_TIM_Base_Start+0xd8>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d115      	bne.n	800d298 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	689a      	ldr	r2, [r3, #8]
 800d272:	4b19      	ldr	r3, [pc, #100]	@ (800d2d8 <HAL_TIM_Base_Start+0xdc>)
 800d274:	4013      	ands	r3, r2
 800d276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	2b06      	cmp	r3, #6
 800d27c:	d015      	beq.n	800d2aa <HAL_TIM_Base_Start+0xae>
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d284:	d011      	beq.n	800d2aa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f042 0201 	orr.w	r2, r2, #1
 800d294:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d296:	e008      	b.n	800d2aa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f042 0201 	orr.w	r2, r2, #1
 800d2a6:	601a      	str	r2, [r3, #0]
 800d2a8:	e000      	b.n	800d2ac <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3714      	adds	r7, #20
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	40010000 	.word	0x40010000
 800d2c0:	40000400 	.word	0x40000400
 800d2c4:	40000800 	.word	0x40000800
 800d2c8:	40000c00 	.word	0x40000c00
 800d2cc:	40010400 	.word	0x40010400
 800d2d0:	40001800 	.word	0x40001800
 800d2d4:	40014000 	.word	0x40014000
 800d2d8:	00010007 	.word	0x00010007

0800d2dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b085      	sub	sp, #20
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d001      	beq.n	800d2f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e054      	b.n	800d39e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2202      	movs	r2, #2
 800d2f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68da      	ldr	r2, [r3, #12]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f042 0201 	orr.w	r2, r2, #1
 800d30a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a26      	ldr	r2, [pc, #152]	@ (800d3ac <HAL_TIM_Base_Start_IT+0xd0>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d022      	beq.n	800d35c <HAL_TIM_Base_Start_IT+0x80>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d31e:	d01d      	beq.n	800d35c <HAL_TIM_Base_Start_IT+0x80>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a22      	ldr	r2, [pc, #136]	@ (800d3b0 <HAL_TIM_Base_Start_IT+0xd4>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d018      	beq.n	800d35c <HAL_TIM_Base_Start_IT+0x80>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4a21      	ldr	r2, [pc, #132]	@ (800d3b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d013      	beq.n	800d35c <HAL_TIM_Base_Start_IT+0x80>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a1f      	ldr	r2, [pc, #124]	@ (800d3b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d00e      	beq.n	800d35c <HAL_TIM_Base_Start_IT+0x80>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a1e      	ldr	r2, [pc, #120]	@ (800d3bc <HAL_TIM_Base_Start_IT+0xe0>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d009      	beq.n	800d35c <HAL_TIM_Base_Start_IT+0x80>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a1c      	ldr	r2, [pc, #112]	@ (800d3c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d004      	beq.n	800d35c <HAL_TIM_Base_Start_IT+0x80>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4a1b      	ldr	r2, [pc, #108]	@ (800d3c4 <HAL_TIM_Base_Start_IT+0xe8>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d115      	bne.n	800d388 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	689a      	ldr	r2, [r3, #8]
 800d362:	4b19      	ldr	r3, [pc, #100]	@ (800d3c8 <HAL_TIM_Base_Start_IT+0xec>)
 800d364:	4013      	ands	r3, r2
 800d366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2b06      	cmp	r3, #6
 800d36c:	d015      	beq.n	800d39a <HAL_TIM_Base_Start_IT+0xbe>
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d374:	d011      	beq.n	800d39a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f042 0201 	orr.w	r2, r2, #1
 800d384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d386:	e008      	b.n	800d39a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f042 0201 	orr.w	r2, r2, #1
 800d396:	601a      	str	r2, [r3, #0]
 800d398:	e000      	b.n	800d39c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d39a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d39c:	2300      	movs	r3, #0
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3714      	adds	r7, #20
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop
 800d3ac:	40010000 	.word	0x40010000
 800d3b0:	40000400 	.word	0x40000400
 800d3b4:	40000800 	.word	0x40000800
 800d3b8:	40000c00 	.word	0x40000c00
 800d3bc:	40010400 	.word	0x40010400
 800d3c0:	40001800 	.word	0x40001800
 800d3c4:	40014000 	.word	0x40014000
 800d3c8:	00010007 	.word	0x00010007

0800d3cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	691b      	ldr	r3, [r3, #16]
 800d3e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	f003 0302 	and.w	r3, r3, #2
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d020      	beq.n	800d430 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f003 0302 	and.w	r3, r3, #2
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d01b      	beq.n	800d430 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f06f 0202 	mvn.w	r2, #2
 800d400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2201      	movs	r2, #1
 800d406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	699b      	ldr	r3, [r3, #24]
 800d40e:	f003 0303 	and.w	r3, r3, #3
 800d412:	2b00      	cmp	r3, #0
 800d414:	d003      	beq.n	800d41e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f000 fa24 	bl	800d864 <HAL_TIM_IC_CaptureCallback>
 800d41c:	e005      	b.n	800d42a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 fa16 	bl	800d850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f000 fa27 	bl	800d878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2200      	movs	r2, #0
 800d42e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	f003 0304 	and.w	r3, r3, #4
 800d436:	2b00      	cmp	r3, #0
 800d438:	d020      	beq.n	800d47c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f003 0304 	and.w	r3, r3, #4
 800d440:	2b00      	cmp	r3, #0
 800d442:	d01b      	beq.n	800d47c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f06f 0204 	mvn.w	r2, #4
 800d44c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2202      	movs	r2, #2
 800d452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	699b      	ldr	r3, [r3, #24]
 800d45a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d003      	beq.n	800d46a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 f9fe 	bl	800d864 <HAL_TIM_IC_CaptureCallback>
 800d468:	e005      	b.n	800d476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f9f0 	bl	800d850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fa01 	bl	800d878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	f003 0308 	and.w	r3, r3, #8
 800d482:	2b00      	cmp	r3, #0
 800d484:	d020      	beq.n	800d4c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f003 0308 	and.w	r3, r3, #8
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d01b      	beq.n	800d4c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f06f 0208 	mvn.w	r2, #8
 800d498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2204      	movs	r2, #4
 800d49e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	69db      	ldr	r3, [r3, #28]
 800d4a6:	f003 0303 	and.w	r3, r3, #3
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d003      	beq.n	800d4b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 f9d8 	bl	800d864 <HAL_TIM_IC_CaptureCallback>
 800d4b4:	e005      	b.n	800d4c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 f9ca 	bl	800d850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f9db 	bl	800d878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	f003 0310 	and.w	r3, r3, #16
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d020      	beq.n	800d514 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f003 0310 	and.w	r3, r3, #16
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d01b      	beq.n	800d514 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f06f 0210 	mvn.w	r2, #16
 800d4e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2208      	movs	r2, #8
 800d4ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	69db      	ldr	r3, [r3, #28]
 800d4f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d003      	beq.n	800d502 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 f9b2 	bl	800d864 <HAL_TIM_IC_CaptureCallback>
 800d500:	e005      	b.n	800d50e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 f9a4 	bl	800d850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 f9b5 	bl	800d878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	f003 0301 	and.w	r3, r3, #1
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00c      	beq.n	800d538 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f003 0301 	and.w	r3, r3, #1
 800d524:	2b00      	cmp	r3, #0
 800d526:	d007      	beq.n	800d538 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f06f 0201 	mvn.w	r2, #1
 800d530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f7f5 fc84 	bl	8002e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d104      	bne.n	800d54c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00c      	beq.n	800d566 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d552:	2b00      	cmp	r3, #0
 800d554:	d007      	beq.n	800d566 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d55e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f000 fc63 	bl	800de2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00c      	beq.n	800d58a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d576:	2b00      	cmp	r3, #0
 800d578:	d007      	beq.n	800d58a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 fc5b 	bl	800de40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d590:	2b00      	cmp	r3, #0
 800d592:	d00c      	beq.n	800d5ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d007      	beq.n	800d5ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d5a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f000 f96f 	bl	800d88c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	f003 0320 	and.w	r3, r3, #32
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00c      	beq.n	800d5d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f003 0320 	and.w	r3, r3, #32
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d007      	beq.n	800d5d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f06f 0220 	mvn.w	r2, #32
 800d5ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 fc23 	bl	800de18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d5d2:	bf00      	nop
 800d5d4:	3710      	adds	r7, #16
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
	...

0800d5dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	d101      	bne.n	800d5f8 <HAL_TIM_ConfigClockSource+0x1c>
 800d5f4:	2302      	movs	r3, #2
 800d5f6:	e0dc      	b.n	800d7b2 <HAL_TIM_ConfigClockSource+0x1d6>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2202      	movs	r2, #2
 800d604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d610:	68ba      	ldr	r2, [r7, #8]
 800d612:	4b6a      	ldr	r3, [pc, #424]	@ (800d7bc <HAL_TIM_ConfigClockSource+0x1e0>)
 800d614:	4013      	ands	r3, r2
 800d616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d61e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	68ba      	ldr	r2, [r7, #8]
 800d626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a64      	ldr	r2, [pc, #400]	@ (800d7c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	f000 80a9 	beq.w	800d786 <HAL_TIM_ConfigClockSource+0x1aa>
 800d634:	4a62      	ldr	r2, [pc, #392]	@ (800d7c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d636:	4293      	cmp	r3, r2
 800d638:	f200 80ae 	bhi.w	800d798 <HAL_TIM_ConfigClockSource+0x1bc>
 800d63c:	4a61      	ldr	r2, [pc, #388]	@ (800d7c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	f000 80a1 	beq.w	800d786 <HAL_TIM_ConfigClockSource+0x1aa>
 800d644:	4a5f      	ldr	r2, [pc, #380]	@ (800d7c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d646:	4293      	cmp	r3, r2
 800d648:	f200 80a6 	bhi.w	800d798 <HAL_TIM_ConfigClockSource+0x1bc>
 800d64c:	4a5e      	ldr	r2, [pc, #376]	@ (800d7c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	f000 8099 	beq.w	800d786 <HAL_TIM_ConfigClockSource+0x1aa>
 800d654:	4a5c      	ldr	r2, [pc, #368]	@ (800d7c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d656:	4293      	cmp	r3, r2
 800d658:	f200 809e 	bhi.w	800d798 <HAL_TIM_ConfigClockSource+0x1bc>
 800d65c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d660:	f000 8091 	beq.w	800d786 <HAL_TIM_ConfigClockSource+0x1aa>
 800d664:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d668:	f200 8096 	bhi.w	800d798 <HAL_TIM_ConfigClockSource+0x1bc>
 800d66c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d670:	f000 8089 	beq.w	800d786 <HAL_TIM_ConfigClockSource+0x1aa>
 800d674:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d678:	f200 808e 	bhi.w	800d798 <HAL_TIM_ConfigClockSource+0x1bc>
 800d67c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d680:	d03e      	beq.n	800d700 <HAL_TIM_ConfigClockSource+0x124>
 800d682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d686:	f200 8087 	bhi.w	800d798 <HAL_TIM_ConfigClockSource+0x1bc>
 800d68a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d68e:	f000 8086 	beq.w	800d79e <HAL_TIM_ConfigClockSource+0x1c2>
 800d692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d696:	d87f      	bhi.n	800d798 <HAL_TIM_ConfigClockSource+0x1bc>
 800d698:	2b70      	cmp	r3, #112	@ 0x70
 800d69a:	d01a      	beq.n	800d6d2 <HAL_TIM_ConfigClockSource+0xf6>
 800d69c:	2b70      	cmp	r3, #112	@ 0x70
 800d69e:	d87b      	bhi.n	800d798 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6a0:	2b60      	cmp	r3, #96	@ 0x60
 800d6a2:	d050      	beq.n	800d746 <HAL_TIM_ConfigClockSource+0x16a>
 800d6a4:	2b60      	cmp	r3, #96	@ 0x60
 800d6a6:	d877      	bhi.n	800d798 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6a8:	2b50      	cmp	r3, #80	@ 0x50
 800d6aa:	d03c      	beq.n	800d726 <HAL_TIM_ConfigClockSource+0x14a>
 800d6ac:	2b50      	cmp	r3, #80	@ 0x50
 800d6ae:	d873      	bhi.n	800d798 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6b0:	2b40      	cmp	r3, #64	@ 0x40
 800d6b2:	d058      	beq.n	800d766 <HAL_TIM_ConfigClockSource+0x18a>
 800d6b4:	2b40      	cmp	r3, #64	@ 0x40
 800d6b6:	d86f      	bhi.n	800d798 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6b8:	2b30      	cmp	r3, #48	@ 0x30
 800d6ba:	d064      	beq.n	800d786 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6bc:	2b30      	cmp	r3, #48	@ 0x30
 800d6be:	d86b      	bhi.n	800d798 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6c0:	2b20      	cmp	r3, #32
 800d6c2:	d060      	beq.n	800d786 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6c4:	2b20      	cmp	r3, #32
 800d6c6:	d867      	bhi.n	800d798 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d05c      	beq.n	800d786 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6cc:	2b10      	cmp	r3, #16
 800d6ce:	d05a      	beq.n	800d786 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6d0:	e062      	b.n	800d798 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d6e2:	f000 faeb 	bl	800dcbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	689b      	ldr	r3, [r3, #8]
 800d6ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d6f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	609a      	str	r2, [r3, #8]
      break;
 800d6fe:	e04f      	b.n	800d7a0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d710:	f000 fad4 	bl	800dcbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	689a      	ldr	r2, [r3, #8]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d722:	609a      	str	r2, [r3, #8]
      break;
 800d724:	e03c      	b.n	800d7a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d732:	461a      	mov	r2, r3
 800d734:	f000 fa44 	bl	800dbc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2150      	movs	r1, #80	@ 0x50
 800d73e:	4618      	mov	r0, r3
 800d740:	f000 fa9e 	bl	800dc80 <TIM_ITRx_SetConfig>
      break;
 800d744:	e02c      	b.n	800d7a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d752:	461a      	mov	r2, r3
 800d754:	f000 fa63 	bl	800dc1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2160      	movs	r1, #96	@ 0x60
 800d75e:	4618      	mov	r0, r3
 800d760:	f000 fa8e 	bl	800dc80 <TIM_ITRx_SetConfig>
      break;
 800d764:	e01c      	b.n	800d7a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d772:	461a      	mov	r2, r3
 800d774:	f000 fa24 	bl	800dbc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2140      	movs	r1, #64	@ 0x40
 800d77e:	4618      	mov	r0, r3
 800d780:	f000 fa7e 	bl	800dc80 <TIM_ITRx_SetConfig>
      break;
 800d784:	e00c      	b.n	800d7a0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4619      	mov	r1, r3
 800d790:	4610      	mov	r0, r2
 800d792:	f000 fa75 	bl	800dc80 <TIM_ITRx_SetConfig>
      break;
 800d796:	e003      	b.n	800d7a0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d798:	2301      	movs	r3, #1
 800d79a:	73fb      	strb	r3, [r7, #15]
      break;
 800d79c:	e000      	b.n	800d7a0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d79e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	ffceff88 	.word	0xffceff88
 800d7c0:	00100040 	.word	0x00100040
 800d7c4:	00100030 	.word	0x00100030
 800d7c8:	00100020 	.word	0x00100020

0800d7cc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d101      	bne.n	800d7e4 <HAL_TIM_SlaveConfigSynchro+0x18>
 800d7e0:	2302      	movs	r3, #2
 800d7e2:	e031      	b.n	800d848 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2202      	movs	r2, #2
 800d7f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d7f4:	6839      	ldr	r1, [r7, #0]
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 f8f8 	bl	800d9ec <TIM_SlaveTimer_SetConfig>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d009      	beq.n	800d816 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2201      	movs	r2, #1
 800d806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800d812:	2301      	movs	r3, #1
 800d814:	e018      	b.n	800d848 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	68da      	ldr	r2, [r3, #12]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d824:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	68da      	ldr	r2, [r3, #12]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d834:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2200      	movs	r2, #0
 800d842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d846:	2300      	movs	r3, #0
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3708      	adds	r7, #8
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d858:	bf00      	nop
 800d85a:	370c      	adds	r7, #12
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d86c:	bf00      	nop
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr

0800d878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d880:	bf00      	nop
 800d882:	370c      	adds	r7, #12
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr

0800d88c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d894:	bf00      	nop
 800d896:	370c      	adds	r7, #12
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b085      	sub	sp, #20
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	4a46      	ldr	r2, [pc, #280]	@ (800d9cc <TIM_Base_SetConfig+0x12c>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d013      	beq.n	800d8e0 <TIM_Base_SetConfig+0x40>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8be:	d00f      	beq.n	800d8e0 <TIM_Base_SetConfig+0x40>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	4a43      	ldr	r2, [pc, #268]	@ (800d9d0 <TIM_Base_SetConfig+0x130>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d00b      	beq.n	800d8e0 <TIM_Base_SetConfig+0x40>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4a42      	ldr	r2, [pc, #264]	@ (800d9d4 <TIM_Base_SetConfig+0x134>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d007      	beq.n	800d8e0 <TIM_Base_SetConfig+0x40>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4a41      	ldr	r2, [pc, #260]	@ (800d9d8 <TIM_Base_SetConfig+0x138>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d003      	beq.n	800d8e0 <TIM_Base_SetConfig+0x40>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	4a40      	ldr	r2, [pc, #256]	@ (800d9dc <TIM_Base_SetConfig+0x13c>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d108      	bne.n	800d8f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	68fa      	ldr	r2, [r7, #12]
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	4a35      	ldr	r2, [pc, #212]	@ (800d9cc <TIM_Base_SetConfig+0x12c>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d01f      	beq.n	800d93a <TIM_Base_SetConfig+0x9a>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d900:	d01b      	beq.n	800d93a <TIM_Base_SetConfig+0x9a>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	4a32      	ldr	r2, [pc, #200]	@ (800d9d0 <TIM_Base_SetConfig+0x130>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d017      	beq.n	800d93a <TIM_Base_SetConfig+0x9a>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	4a31      	ldr	r2, [pc, #196]	@ (800d9d4 <TIM_Base_SetConfig+0x134>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d013      	beq.n	800d93a <TIM_Base_SetConfig+0x9a>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4a30      	ldr	r2, [pc, #192]	@ (800d9d8 <TIM_Base_SetConfig+0x138>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d00f      	beq.n	800d93a <TIM_Base_SetConfig+0x9a>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	4a2f      	ldr	r2, [pc, #188]	@ (800d9dc <TIM_Base_SetConfig+0x13c>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d00b      	beq.n	800d93a <TIM_Base_SetConfig+0x9a>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	4a2e      	ldr	r2, [pc, #184]	@ (800d9e0 <TIM_Base_SetConfig+0x140>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d007      	beq.n	800d93a <TIM_Base_SetConfig+0x9a>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	4a2d      	ldr	r2, [pc, #180]	@ (800d9e4 <TIM_Base_SetConfig+0x144>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d003      	beq.n	800d93a <TIM_Base_SetConfig+0x9a>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	4a2c      	ldr	r2, [pc, #176]	@ (800d9e8 <TIM_Base_SetConfig+0x148>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d108      	bne.n	800d94c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	68fa      	ldr	r2, [r7, #12]
 800d948:	4313      	orrs	r3, r2
 800d94a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	695b      	ldr	r3, [r3, #20]
 800d956:	4313      	orrs	r3, r2
 800d958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	689a      	ldr	r2, [r3, #8]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	4a16      	ldr	r2, [pc, #88]	@ (800d9cc <TIM_Base_SetConfig+0x12c>)
 800d974:	4293      	cmp	r3, r2
 800d976:	d00f      	beq.n	800d998 <TIM_Base_SetConfig+0xf8>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	4a18      	ldr	r2, [pc, #96]	@ (800d9dc <TIM_Base_SetConfig+0x13c>)
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d00b      	beq.n	800d998 <TIM_Base_SetConfig+0xf8>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	4a17      	ldr	r2, [pc, #92]	@ (800d9e0 <TIM_Base_SetConfig+0x140>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d007      	beq.n	800d998 <TIM_Base_SetConfig+0xf8>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	4a16      	ldr	r2, [pc, #88]	@ (800d9e4 <TIM_Base_SetConfig+0x144>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d003      	beq.n	800d998 <TIM_Base_SetConfig+0xf8>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4a15      	ldr	r2, [pc, #84]	@ (800d9e8 <TIM_Base_SetConfig+0x148>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d103      	bne.n	800d9a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	691a      	ldr	r2, [r3, #16]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	691b      	ldr	r3, [r3, #16]
 800d9aa:	f003 0301 	and.w	r3, r3, #1
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d105      	bne.n	800d9be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	691b      	ldr	r3, [r3, #16]
 800d9b6:	f023 0201 	bic.w	r2, r3, #1
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	611a      	str	r2, [r3, #16]
  }
}
 800d9be:	bf00      	nop
 800d9c0:	3714      	adds	r7, #20
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr
 800d9ca:	bf00      	nop
 800d9cc:	40010000 	.word	0x40010000
 800d9d0:	40000400 	.word	0x40000400
 800d9d4:	40000800 	.word	0x40000800
 800d9d8:	40000c00 	.word	0x40000c00
 800d9dc:	40010400 	.word	0x40010400
 800d9e0:	40014000 	.word	0x40014000
 800d9e4:	40014400 	.word	0x40014400
 800d9e8:	40014800 	.word	0x40014800

0800d9ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b086      	sub	sp, #24
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	689b      	ldr	r3, [r3, #8]
 800da00:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800da02:	693a      	ldr	r2, [r7, #16]
 800da04:	4b65      	ldr	r3, [pc, #404]	@ (800db9c <TIM_SlaveTimer_SetConfig+0x1b0>)
 800da06:	4013      	ands	r3, r2
 800da08:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	693a      	ldr	r2, [r7, #16]
 800da10:	4313      	orrs	r3, r2
 800da12:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800da14:	693a      	ldr	r2, [r7, #16]
 800da16:	4b62      	ldr	r3, [pc, #392]	@ (800dba0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800da18:	4013      	ands	r3, r2
 800da1a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	693a      	ldr	r2, [r7, #16]
 800da22:	4313      	orrs	r3, r2
 800da24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	693a      	ldr	r2, [r7, #16]
 800da2c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	4a5c      	ldr	r2, [pc, #368]	@ (800dba4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800da34:	4293      	cmp	r3, r2
 800da36:	f000 80ab 	beq.w	800db90 <TIM_SlaveTimer_SetConfig+0x1a4>
 800da3a:	4a5a      	ldr	r2, [pc, #360]	@ (800dba4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	f200 80a4 	bhi.w	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
 800da42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da46:	f000 80a3 	beq.w	800db90 <TIM_SlaveTimer_SetConfig+0x1a4>
 800da4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da4e:	f200 809c 	bhi.w	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
 800da52:	4a55      	ldr	r2, [pc, #340]	@ (800dba8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800da54:	4293      	cmp	r3, r2
 800da56:	f000 809b 	beq.w	800db90 <TIM_SlaveTimer_SetConfig+0x1a4>
 800da5a:	4a53      	ldr	r2, [pc, #332]	@ (800dba8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	f200 8094 	bhi.w	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
 800da62:	4a52      	ldr	r2, [pc, #328]	@ (800dbac <TIM_SlaveTimer_SetConfig+0x1c0>)
 800da64:	4293      	cmp	r3, r2
 800da66:	f000 8093 	beq.w	800db90 <TIM_SlaveTimer_SetConfig+0x1a4>
 800da6a:	4a50      	ldr	r2, [pc, #320]	@ (800dbac <TIM_SlaveTimer_SetConfig+0x1c0>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	f200 808c 	bhi.w	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
 800da72:	4a4f      	ldr	r2, [pc, #316]	@ (800dbb0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800da74:	4293      	cmp	r3, r2
 800da76:	f000 808b 	beq.w	800db90 <TIM_SlaveTimer_SetConfig+0x1a4>
 800da7a:	4a4d      	ldr	r2, [pc, #308]	@ (800dbb0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	f200 8084 	bhi.w	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
 800da82:	4a4c      	ldr	r2, [pc, #304]	@ (800dbb4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800da84:	4293      	cmp	r3, r2
 800da86:	f000 8083 	beq.w	800db90 <TIM_SlaveTimer_SetConfig+0x1a4>
 800da8a:	4a4a      	ldr	r2, [pc, #296]	@ (800dbb4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d87c      	bhi.n	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
 800da90:	4a49      	ldr	r2, [pc, #292]	@ (800dbb8 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d07c      	beq.n	800db90 <TIM_SlaveTimer_SetConfig+0x1a4>
 800da96:	4a48      	ldr	r2, [pc, #288]	@ (800dbb8 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d876      	bhi.n	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
 800da9c:	4a47      	ldr	r2, [pc, #284]	@ (800dbbc <TIM_SlaveTimer_SetConfig+0x1d0>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d076      	beq.n	800db90 <TIM_SlaveTimer_SetConfig+0x1a4>
 800daa2:	4a46      	ldr	r2, [pc, #280]	@ (800dbbc <TIM_SlaveTimer_SetConfig+0x1d0>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d870      	bhi.n	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
 800daa8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800daac:	d070      	beq.n	800db90 <TIM_SlaveTimer_SetConfig+0x1a4>
 800daae:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dab2:	d86a      	bhi.n	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
 800dab4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dab8:	d06a      	beq.n	800db90 <TIM_SlaveTimer_SetConfig+0x1a4>
 800daba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dabe:	d864      	bhi.n	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
 800dac0:	2b70      	cmp	r3, #112	@ 0x70
 800dac2:	d01a      	beq.n	800dafa <TIM_SlaveTimer_SetConfig+0x10e>
 800dac4:	2b70      	cmp	r3, #112	@ 0x70
 800dac6:	d860      	bhi.n	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
 800dac8:	2b60      	cmp	r3, #96	@ 0x60
 800daca:	d054      	beq.n	800db76 <TIM_SlaveTimer_SetConfig+0x18a>
 800dacc:	2b60      	cmp	r3, #96	@ 0x60
 800dace:	d85c      	bhi.n	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
 800dad0:	2b50      	cmp	r3, #80	@ 0x50
 800dad2:	d046      	beq.n	800db62 <TIM_SlaveTimer_SetConfig+0x176>
 800dad4:	2b50      	cmp	r3, #80	@ 0x50
 800dad6:	d858      	bhi.n	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
 800dad8:	2b40      	cmp	r3, #64	@ 0x40
 800dada:	d019      	beq.n	800db10 <TIM_SlaveTimer_SetConfig+0x124>
 800dadc:	2b40      	cmp	r3, #64	@ 0x40
 800dade:	d854      	bhi.n	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
 800dae0:	2b30      	cmp	r3, #48	@ 0x30
 800dae2:	d055      	beq.n	800db90 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dae4:	2b30      	cmp	r3, #48	@ 0x30
 800dae6:	d850      	bhi.n	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
 800dae8:	2b20      	cmp	r3, #32
 800daea:	d051      	beq.n	800db90 <TIM_SlaveTimer_SetConfig+0x1a4>
 800daec:	2b20      	cmp	r3, #32
 800daee:	d84c      	bhi.n	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d04d      	beq.n	800db90 <TIM_SlaveTimer_SetConfig+0x1a4>
 800daf4:	2b10      	cmp	r3, #16
 800daf6:	d04b      	beq.n	800db90 <TIM_SlaveTimer_SetConfig+0x1a4>
 800daf8:	e047      	b.n	800db8a <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800db0a:	f000 f8d7 	bl	800dcbc <TIM_ETR_SetConfig>
      break;
 800db0e:	e040      	b.n	800db92 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2b05      	cmp	r3, #5
 800db16:	d101      	bne.n	800db1c <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800db18:	2301      	movs	r3, #1
 800db1a:	e03b      	b.n	800db94 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	6a1b      	ldr	r3, [r3, #32]
 800db22:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	6a1a      	ldr	r2, [r3, #32]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f022 0201 	bic.w	r2, r2, #1
 800db32:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	699b      	ldr	r3, [r3, #24]
 800db3a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800db42:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	691b      	ldr	r3, [r3, #16]
 800db48:	011b      	lsls	r3, r3, #4
 800db4a:	68ba      	ldr	r2, [r7, #8]
 800db4c:	4313      	orrs	r3, r2
 800db4e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	68ba      	ldr	r2, [r7, #8]
 800db56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	68fa      	ldr	r2, [r7, #12]
 800db5e:	621a      	str	r2, [r3, #32]
      break;
 800db60:	e017      	b.n	800db92 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db6e:	461a      	mov	r2, r3
 800db70:	f000 f826 	bl	800dbc0 <TIM_TI1_ConfigInputStage>
      break;
 800db74:	e00d      	b.n	800db92 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800db82:	461a      	mov	r2, r3
 800db84:	f000 f84b 	bl	800dc1e <TIM_TI2_ConfigInputStage>
      break;
 800db88:	e003      	b.n	800db92 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800db8a:	2301      	movs	r3, #1
 800db8c:	75fb      	strb	r3, [r7, #23]
      break;
 800db8e:	e000      	b.n	800db92 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800db90:	bf00      	nop
  }

  return status;
 800db92:	7dfb      	ldrb	r3, [r7, #23]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3718      	adds	r7, #24
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	ffcfff8f 	.word	0xffcfff8f
 800dba0:	fffefff8 	.word	0xfffefff8
 800dba4:	00200010 	.word	0x00200010
 800dba8:	00100070 	.word	0x00100070
 800dbac:	00100060 	.word	0x00100060
 800dbb0:	00100050 	.word	0x00100050
 800dbb4:	00100040 	.word	0x00100040
 800dbb8:	00100030 	.word	0x00100030
 800dbbc:	00100020 	.word	0x00100020

0800dbc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b087      	sub	sp, #28
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6a1b      	ldr	r3, [r3, #32]
 800dbd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	6a1b      	ldr	r3, [r3, #32]
 800dbd6:	f023 0201 	bic.w	r2, r3, #1
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	699b      	ldr	r3, [r3, #24]
 800dbe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dbea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	011b      	lsls	r3, r3, #4
 800dbf0:	693a      	ldr	r2, [r7, #16]
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	f023 030a 	bic.w	r3, r3, #10
 800dbfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dbfe:	697a      	ldr	r2, [r7, #20]
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	4313      	orrs	r3, r2
 800dc04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	693a      	ldr	r2, [r7, #16]
 800dc0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	697a      	ldr	r2, [r7, #20]
 800dc10:	621a      	str	r2, [r3, #32]
}
 800dc12:	bf00      	nop
 800dc14:	371c      	adds	r7, #28
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr

0800dc1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc1e:	b480      	push	{r7}
 800dc20:	b087      	sub	sp, #28
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	60f8      	str	r0, [r7, #12]
 800dc26:	60b9      	str	r1, [r7, #8]
 800dc28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	6a1b      	ldr	r3, [r3, #32]
 800dc2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	6a1b      	ldr	r3, [r3, #32]
 800dc34:	f023 0210 	bic.w	r2, r3, #16
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	699b      	ldr	r3, [r3, #24]
 800dc40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800dc48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	031b      	lsls	r3, r3, #12
 800dc4e:	693a      	ldr	r2, [r7, #16]
 800dc50:	4313      	orrs	r3, r2
 800dc52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800dc5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	011b      	lsls	r3, r3, #4
 800dc60:	697a      	ldr	r2, [r7, #20]
 800dc62:	4313      	orrs	r3, r2
 800dc64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	693a      	ldr	r2, [r7, #16]
 800dc6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	697a      	ldr	r2, [r7, #20]
 800dc70:	621a      	str	r2, [r3, #32]
}
 800dc72:	bf00      	nop
 800dc74:	371c      	adds	r7, #28
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
	...

0800dc80 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b085      	sub	sp, #20
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dc90:	68fa      	ldr	r2, [r7, #12]
 800dc92:	4b09      	ldr	r3, [pc, #36]	@ (800dcb8 <TIM_ITRx_SetConfig+0x38>)
 800dc94:	4013      	ands	r3, r2
 800dc96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dc98:	683a      	ldr	r2, [r7, #0]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	4313      	orrs	r3, r2
 800dc9e:	f043 0307 	orr.w	r3, r3, #7
 800dca2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	68fa      	ldr	r2, [r7, #12]
 800dca8:	609a      	str	r2, [r3, #8]
}
 800dcaa:	bf00      	nop
 800dcac:	3714      	adds	r7, #20
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr
 800dcb6:	bf00      	nop
 800dcb8:	ffcfff8f 	.word	0xffcfff8f

0800dcbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b087      	sub	sp, #28
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	607a      	str	r2, [r7, #4]
 800dcc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dcd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	021a      	lsls	r2, r3, #8
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	431a      	orrs	r2, r3
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	4313      	orrs	r3, r2
 800dce4:	697a      	ldr	r2, [r7, #20]
 800dce6:	4313      	orrs	r3, r2
 800dce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	697a      	ldr	r2, [r7, #20]
 800dcee:	609a      	str	r2, [r3, #8]
}
 800dcf0:	bf00      	nop
 800dcf2:	371c      	adds	r7, #28
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b085      	sub	sp, #20
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d101      	bne.n	800dd14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dd10:	2302      	movs	r3, #2
 800dd12:	e06d      	b.n	800ddf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2201      	movs	r2, #1
 800dd18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2202      	movs	r2, #2
 800dd20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4a30      	ldr	r2, [pc, #192]	@ (800ddfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d004      	beq.n	800dd48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4a2f      	ldr	r2, [pc, #188]	@ (800de00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d108      	bne.n	800dd5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800dd4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	68fa      	ldr	r2, [r7, #12]
 800dd56:	4313      	orrs	r3, r2
 800dd58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	68fa      	ldr	r2, [r7, #12]
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	68fa      	ldr	r2, [r7, #12]
 800dd72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a20      	ldr	r2, [pc, #128]	@ (800ddfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d022      	beq.n	800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd86:	d01d      	beq.n	800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4a1d      	ldr	r2, [pc, #116]	@ (800de04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d018      	beq.n	800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	4a1c      	ldr	r2, [pc, #112]	@ (800de08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d013      	beq.n	800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a1a      	ldr	r2, [pc, #104]	@ (800de0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d00e      	beq.n	800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4a15      	ldr	r2, [pc, #84]	@ (800de00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d009      	beq.n	800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a16      	ldr	r2, [pc, #88]	@ (800de10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d004      	beq.n	800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4a15      	ldr	r2, [pc, #84]	@ (800de14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d10c      	bne.n	800ddde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ddca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	689b      	ldr	r3, [r3, #8]
 800ddd0:	68ba      	ldr	r2, [r7, #8]
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	68ba      	ldr	r2, [r7, #8]
 800dddc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2201      	movs	r2, #1
 800dde2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ddee:	2300      	movs	r3, #0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3714      	adds	r7, #20
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr
 800ddfc:	40010000 	.word	0x40010000
 800de00:	40010400 	.word	0x40010400
 800de04:	40000400 	.word	0x40000400
 800de08:	40000800 	.word	0x40000800
 800de0c:	40000c00 	.word	0x40000c00
 800de10:	40001800 	.word	0x40001800
 800de14:	40014000 	.word	0x40014000

0800de18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800de20:	bf00      	nop
 800de22:	370c      	adds	r7, #12
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr

0800de2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800de34:	bf00      	nop
 800de36:	370c      	adds	r7, #12
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800de48:	bf00      	nop
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d101      	bne.n	800de66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de62:	2301      	movs	r3, #1
 800de64:	e042      	b.n	800deec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d106      	bne.n	800de7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2200      	movs	r2, #0
 800de74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f7f5 f92b 	bl	80030d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2224      	movs	r2, #36	@ 0x24
 800de82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f022 0201 	bic.w	r2, r2, #1
 800de94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d002      	beq.n	800dea4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f001 faca 	bl	800f438 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fd5f 	bl	800e968 <UART_SetConfig>
 800deaa:	4603      	mov	r3, r0
 800deac:	2b01      	cmp	r3, #1
 800deae:	d101      	bne.n	800deb4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800deb0:	2301      	movs	r3, #1
 800deb2:	e01b      	b.n	800deec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	685a      	ldr	r2, [r3, #4]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800dec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	689a      	ldr	r2, [r3, #8]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ded2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f042 0201 	orr.w	r2, r2, #1
 800dee2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f001 fb49 	bl	800f57c <UART_CheckIdleState>
 800deea:	4603      	mov	r3, r0
}
 800deec:	4618      	mov	r0, r3
 800deee:	3708      	adds	r7, #8
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d101      	bne.n	800df06 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800df02:	2301      	movs	r3, #1
 800df04:	e031      	b.n	800df6a <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2224      	movs	r2, #36	@ 0x24
 800df0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f022 0201 	bic.w	r2, r2, #1
 800df1c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2200      	movs	r2, #0
 800df24:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2200      	movs	r2, #0
 800df2c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	2200      	movs	r2, #0
 800df34:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7f5 f9b2 	bl	80032a0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2200      	movs	r2, #0
 800df40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2200      	movs	r2, #0
 800df48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2200      	movs	r2, #0
 800df5e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2200      	movs	r2, #0
 800df64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3708      	adds	r7, #8
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}

0800df72 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df72:	b580      	push	{r7, lr}
 800df74:	b08a      	sub	sp, #40	@ 0x28
 800df76:	af02      	add	r7, sp, #8
 800df78:	60f8      	str	r0, [r7, #12]
 800df7a:	60b9      	str	r1, [r7, #8]
 800df7c:	603b      	str	r3, [r7, #0]
 800df7e:	4613      	mov	r3, r2
 800df80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df88:	2b20      	cmp	r3, #32
 800df8a:	d17b      	bne.n	800e084 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d002      	beq.n	800df98 <HAL_UART_Transmit+0x26>
 800df92:	88fb      	ldrh	r3, [r7, #6]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d101      	bne.n	800df9c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800df98:	2301      	movs	r3, #1
 800df9a:	e074      	b.n	800e086 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2221      	movs	r2, #33	@ 0x21
 800dfa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dfac:	f7f5 fc1a 	bl	80037e4 <HAL_GetTick>
 800dfb0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	88fa      	ldrh	r2, [r7, #6]
 800dfb6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	88fa      	ldrh	r2, [r7, #6]
 800dfbe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	689b      	ldr	r3, [r3, #8]
 800dfc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfca:	d108      	bne.n	800dfde <HAL_UART_Transmit+0x6c>
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	691b      	ldr	r3, [r3, #16]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d104      	bne.n	800dfde <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	61bb      	str	r3, [r7, #24]
 800dfdc:	e003      	b.n	800dfe6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dfe6:	e030      	b.n	800e04a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	9300      	str	r3, [sp, #0]
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	2200      	movs	r2, #0
 800dff0:	2180      	movs	r1, #128	@ 0x80
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f001 fb6c 	bl	800f6d0 <UART_WaitOnFlagUntilTimeout>
 800dff8:	4603      	mov	r3, r0
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d005      	beq.n	800e00a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2220      	movs	r2, #32
 800e002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e006:	2303      	movs	r3, #3
 800e008:	e03d      	b.n	800e086 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e00a:	69fb      	ldr	r3, [r7, #28]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d10b      	bne.n	800e028 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	881b      	ldrh	r3, [r3, #0]
 800e014:	461a      	mov	r2, r3
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e01e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	3302      	adds	r3, #2
 800e024:	61bb      	str	r3, [r7, #24]
 800e026:	e007      	b.n	800e038 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	781a      	ldrb	r2, [r3, #0]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	3301      	adds	r3, #1
 800e036:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e03e:	b29b      	uxth	r3, r3
 800e040:	3b01      	subs	r3, #1
 800e042:	b29a      	uxth	r2, r3
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e050:	b29b      	uxth	r3, r3
 800e052:	2b00      	cmp	r3, #0
 800e054:	d1c8      	bne.n	800dfe8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	9300      	str	r3, [sp, #0]
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	2200      	movs	r2, #0
 800e05e:	2140      	movs	r1, #64	@ 0x40
 800e060:	68f8      	ldr	r0, [r7, #12]
 800e062:	f001 fb35 	bl	800f6d0 <UART_WaitOnFlagUntilTimeout>
 800e066:	4603      	mov	r3, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d005      	beq.n	800e078 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2220      	movs	r2, #32
 800e070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e074:	2303      	movs	r3, #3
 800e076:	e006      	b.n	800e086 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2220      	movs	r2, #32
 800e07c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e080:	2300      	movs	r3, #0
 800e082:	e000      	b.n	800e086 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e084:	2302      	movs	r3, #2
  }
}
 800e086:	4618      	mov	r0, r3
 800e088:	3720      	adds	r7, #32
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
	...

0800e090 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e090:	b480      	push	{r7}
 800e092:	b091      	sub	sp, #68	@ 0x44
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
 800e09a:	4613      	mov	r3, r2
 800e09c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e0a4:	2b20      	cmp	r3, #32
 800e0a6:	d178      	bne.n	800e19a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d002      	beq.n	800e0b4 <HAL_UART_Transmit_IT+0x24>
 800e0ae:	88fb      	ldrh	r3, [r7, #6]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d101      	bne.n	800e0b8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e071      	b.n	800e19c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	68ba      	ldr	r2, [r7, #8]
 800e0bc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	88fa      	ldrh	r2, [r7, #6]
 800e0c2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	88fa      	ldrh	r2, [r7, #6]
 800e0ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2221      	movs	r2, #33	@ 0x21
 800e0e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e0e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e0ec:	d12a      	bne.n	800e144 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	689b      	ldr	r3, [r3, #8]
 800e0f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e0f6:	d107      	bne.n	800e108 <HAL_UART_Transmit_IT+0x78>
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	691b      	ldr	r3, [r3, #16]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d103      	bne.n	800e108 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	4a29      	ldr	r2, [pc, #164]	@ (800e1a8 <HAL_UART_Transmit_IT+0x118>)
 800e104:	679a      	str	r2, [r3, #120]	@ 0x78
 800e106:	e002      	b.n	800e10e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	4a28      	ldr	r2, [pc, #160]	@ (800e1ac <HAL_UART_Transmit_IT+0x11c>)
 800e10c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	3308      	adds	r3, #8
 800e114:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e118:	e853 3f00 	ldrex	r3, [r3]
 800e11c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e120:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e124:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	3308      	adds	r3, #8
 800e12c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e12e:	637a      	str	r2, [r7, #52]	@ 0x34
 800e130:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e132:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e134:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e136:	e841 2300 	strex	r3, r2, [r1]
 800e13a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d1e5      	bne.n	800e10e <HAL_UART_Transmit_IT+0x7e>
 800e142:	e028      	b.n	800e196 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	689b      	ldr	r3, [r3, #8]
 800e148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e14c:	d107      	bne.n	800e15e <HAL_UART_Transmit_IT+0xce>
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	691b      	ldr	r3, [r3, #16]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d103      	bne.n	800e15e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	4a15      	ldr	r2, [pc, #84]	@ (800e1b0 <HAL_UART_Transmit_IT+0x120>)
 800e15a:	679a      	str	r2, [r3, #120]	@ 0x78
 800e15c:	e002      	b.n	800e164 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	4a14      	ldr	r2, [pc, #80]	@ (800e1b4 <HAL_UART_Transmit_IT+0x124>)
 800e162:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	e853 3f00 	ldrex	r3, [r3]
 800e170:	613b      	str	r3, [r7, #16]
   return(result);
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e178:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	461a      	mov	r2, r3
 800e180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e182:	623b      	str	r3, [r7, #32]
 800e184:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e186:	69f9      	ldr	r1, [r7, #28]
 800e188:	6a3a      	ldr	r2, [r7, #32]
 800e18a:	e841 2300 	strex	r3, r2, [r1]
 800e18e:	61bb      	str	r3, [r7, #24]
   return(result);
 800e190:	69bb      	ldr	r3, [r7, #24]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d1e6      	bne.n	800e164 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800e196:	2300      	movs	r3, #0
 800e198:	e000      	b.n	800e19c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800e19a:	2302      	movs	r3, #2
  }
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3744      	adds	r7, #68	@ 0x44
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr
 800e1a8:	0800fd43 	.word	0x0800fd43
 800e1ac:	0800fc63 	.word	0x0800fc63
 800e1b0:	0800fba1 	.word	0x0800fba1
 800e1b4:	0800fae9 	.word	0x0800fae9

0800e1b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b0ba      	sub	sp, #232	@ 0xe8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	69db      	ldr	r3, [r3, #28]
 800e1c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	689b      	ldr	r3, [r3, #8]
 800e1da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e1de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e1e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e1e6:	4013      	ands	r3, r2
 800e1e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e1ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d11b      	bne.n	800e22c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e1f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1f8:	f003 0320 	and.w	r3, r3, #32
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d015      	beq.n	800e22c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e204:	f003 0320 	and.w	r3, r3, #32
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d105      	bne.n	800e218 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e20c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e214:	2b00      	cmp	r3, #0
 800e216:	d009      	beq.n	800e22c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	f000 8377 	beq.w	800e910 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	4798      	blx	r3
      }
      return;
 800e22a:	e371      	b.n	800e910 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e22c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e230:	2b00      	cmp	r3, #0
 800e232:	f000 8123 	beq.w	800e47c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e236:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e23a:	4b8d      	ldr	r3, [pc, #564]	@ (800e470 <HAL_UART_IRQHandler+0x2b8>)
 800e23c:	4013      	ands	r3, r2
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d106      	bne.n	800e250 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e242:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e246:	4b8b      	ldr	r3, [pc, #556]	@ (800e474 <HAL_UART_IRQHandler+0x2bc>)
 800e248:	4013      	ands	r3, r2
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	f000 8116 	beq.w	800e47c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e254:	f003 0301 	and.w	r3, r3, #1
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d011      	beq.n	800e280 <HAL_UART_IRQHandler+0xc8>
 800e25c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e264:	2b00      	cmp	r3, #0
 800e266:	d00b      	beq.n	800e280 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2201      	movs	r2, #1
 800e26e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e276:	f043 0201 	orr.w	r2, r3, #1
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e284:	f003 0302 	and.w	r3, r3, #2
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d011      	beq.n	800e2b0 <HAL_UART_IRQHandler+0xf8>
 800e28c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e290:	f003 0301 	and.w	r3, r3, #1
 800e294:	2b00      	cmp	r3, #0
 800e296:	d00b      	beq.n	800e2b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2202      	movs	r2, #2
 800e29e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2a6:	f043 0204 	orr.w	r2, r3, #4
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e2b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e2b4:	f003 0304 	and.w	r3, r3, #4
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d011      	beq.n	800e2e0 <HAL_UART_IRQHandler+0x128>
 800e2bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e2c0:	f003 0301 	and.w	r3, r3, #1
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d00b      	beq.n	800e2e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2204      	movs	r2, #4
 800e2ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2d6:	f043 0202 	orr.w	r2, r3, #2
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e2e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e2e4:	f003 0308 	and.w	r3, r3, #8
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d017      	beq.n	800e31c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e2ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2f0:	f003 0320 	and.w	r3, r3, #32
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d105      	bne.n	800e304 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e2f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e2fc:	4b5c      	ldr	r3, [pc, #368]	@ (800e470 <HAL_UART_IRQHandler+0x2b8>)
 800e2fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00b      	beq.n	800e31c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	2208      	movs	r2, #8
 800e30a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e312:	f043 0208 	orr.w	r2, r3, #8
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e31c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e324:	2b00      	cmp	r3, #0
 800e326:	d012      	beq.n	800e34e <HAL_UART_IRQHandler+0x196>
 800e328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e32c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e330:	2b00      	cmp	r3, #0
 800e332:	d00c      	beq.n	800e34e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e33c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e344:	f043 0220 	orr.w	r2, r3, #32
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e354:	2b00      	cmp	r3, #0
 800e356:	f000 82dd 	beq.w	800e914 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e35a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e35e:	f003 0320 	and.w	r3, r3, #32
 800e362:	2b00      	cmp	r3, #0
 800e364:	d013      	beq.n	800e38e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e36a:	f003 0320 	and.w	r3, r3, #32
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d105      	bne.n	800e37e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d007      	beq.n	800e38e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e382:	2b00      	cmp	r3, #0
 800e384:	d003      	beq.n	800e38e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e394:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	689b      	ldr	r3, [r3, #8]
 800e39e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3a2:	2b40      	cmp	r3, #64	@ 0x40
 800e3a4:	d005      	beq.n	800e3b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e3a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e3aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d054      	beq.n	800e45c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f001 fb1c 	bl	800f9f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	689b      	ldr	r3, [r3, #8]
 800e3be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3c2:	2b40      	cmp	r3, #64	@ 0x40
 800e3c4:	d146      	bne.n	800e454 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	3308      	adds	r3, #8
 800e3cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e3d4:	e853 3f00 	ldrex	r3, [r3]
 800e3d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e3dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e3e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e3e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	3308      	adds	r3, #8
 800e3ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e3f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e3f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e3fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e402:	e841 2300 	strex	r3, r2, [r1]
 800e406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e40a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1d9      	bne.n	800e3c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d017      	beq.n	800e44c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e422:	4a15      	ldr	r2, [pc, #84]	@ (800e478 <HAL_UART_IRQHandler+0x2c0>)
 800e424:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7f7 fc85 	bl	8005d3c <HAL_DMA_Abort_IT>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d019      	beq.n	800e46c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e43e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e446:	4610      	mov	r0, r2
 800e448:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e44a:	e00f      	b.n	800e46c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f000 fa81 	bl	800e954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e452:	e00b      	b.n	800e46c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 fa7d 	bl	800e954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e45a:	e007      	b.n	800e46c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f000 fa79 	bl	800e954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2200      	movs	r2, #0
 800e466:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e46a:	e253      	b.n	800e914 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e46c:	bf00      	nop
    return;
 800e46e:	e251      	b.n	800e914 <HAL_UART_IRQHandler+0x75c>
 800e470:	10000001 	.word	0x10000001
 800e474:	04000120 	.word	0x04000120
 800e478:	0800fabd 	.word	0x0800fabd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e480:	2b01      	cmp	r3, #1
 800e482:	f040 81e7 	bne.w	800e854 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e48a:	f003 0310 	and.w	r3, r3, #16
 800e48e:	2b00      	cmp	r3, #0
 800e490:	f000 81e0 	beq.w	800e854 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e498:	f003 0310 	and.w	r3, r3, #16
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	f000 81d9 	beq.w	800e854 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2210      	movs	r2, #16
 800e4a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	689b      	ldr	r3, [r3, #8]
 800e4b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4b4:	2b40      	cmp	r3, #64	@ 0x40
 800e4b6:	f040 8151 	bne.w	800e75c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	4a96      	ldr	r2, [pc, #600]	@ (800e71c <HAL_UART_IRQHandler+0x564>)
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d068      	beq.n	800e59a <HAL_UART_IRQHandler+0x3e2>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	4a93      	ldr	r2, [pc, #588]	@ (800e720 <HAL_UART_IRQHandler+0x568>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d061      	beq.n	800e59a <HAL_UART_IRQHandler+0x3e2>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4a91      	ldr	r2, [pc, #580]	@ (800e724 <HAL_UART_IRQHandler+0x56c>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d05a      	beq.n	800e59a <HAL_UART_IRQHandler+0x3e2>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a8e      	ldr	r2, [pc, #568]	@ (800e728 <HAL_UART_IRQHandler+0x570>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d053      	beq.n	800e59a <HAL_UART_IRQHandler+0x3e2>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	4a8c      	ldr	r2, [pc, #560]	@ (800e72c <HAL_UART_IRQHandler+0x574>)
 800e4fc:	4293      	cmp	r3, r2
 800e4fe:	d04c      	beq.n	800e59a <HAL_UART_IRQHandler+0x3e2>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4a89      	ldr	r2, [pc, #548]	@ (800e730 <HAL_UART_IRQHandler+0x578>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d045      	beq.n	800e59a <HAL_UART_IRQHandler+0x3e2>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	4a87      	ldr	r2, [pc, #540]	@ (800e734 <HAL_UART_IRQHandler+0x57c>)
 800e518:	4293      	cmp	r3, r2
 800e51a:	d03e      	beq.n	800e59a <HAL_UART_IRQHandler+0x3e2>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4a84      	ldr	r2, [pc, #528]	@ (800e738 <HAL_UART_IRQHandler+0x580>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d037      	beq.n	800e59a <HAL_UART_IRQHandler+0x3e2>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	4a82      	ldr	r2, [pc, #520]	@ (800e73c <HAL_UART_IRQHandler+0x584>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d030      	beq.n	800e59a <HAL_UART_IRQHandler+0x3e2>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a7f      	ldr	r2, [pc, #508]	@ (800e740 <HAL_UART_IRQHandler+0x588>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d029      	beq.n	800e59a <HAL_UART_IRQHandler+0x3e2>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4a7d      	ldr	r2, [pc, #500]	@ (800e744 <HAL_UART_IRQHandler+0x58c>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d022      	beq.n	800e59a <HAL_UART_IRQHandler+0x3e2>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4a7a      	ldr	r2, [pc, #488]	@ (800e748 <HAL_UART_IRQHandler+0x590>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d01b      	beq.n	800e59a <HAL_UART_IRQHandler+0x3e2>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4a78      	ldr	r2, [pc, #480]	@ (800e74c <HAL_UART_IRQHandler+0x594>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d014      	beq.n	800e59a <HAL_UART_IRQHandler+0x3e2>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4a75      	ldr	r2, [pc, #468]	@ (800e750 <HAL_UART_IRQHandler+0x598>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d00d      	beq.n	800e59a <HAL_UART_IRQHandler+0x3e2>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	4a73      	ldr	r2, [pc, #460]	@ (800e754 <HAL_UART_IRQHandler+0x59c>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d006      	beq.n	800e59a <HAL_UART_IRQHandler+0x3e2>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4a70      	ldr	r2, [pc, #448]	@ (800e758 <HAL_UART_IRQHandler+0x5a0>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d106      	bne.n	800e5a8 <HAL_UART_IRQHandler+0x3f0>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	e005      	b.n	800e5b4 <HAL_UART_IRQHandler+0x3fc>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e5b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	f000 81ab 	beq.w	800e918 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e5c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	f080 81a3 	bcs.w	800e918 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e5d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5e2:	69db      	ldr	r3, [r3, #28]
 800e5e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5e8:	f000 8087 	beq.w	800e6fa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e5f8:	e853 3f00 	ldrex	r3, [r3]
 800e5fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e600:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e608:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	461a      	mov	r2, r3
 800e612:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e616:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e61a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e61e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e622:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e626:	e841 2300 	strex	r3, r2, [r1]
 800e62a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e62e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e632:	2b00      	cmp	r3, #0
 800e634:	d1da      	bne.n	800e5ec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	3308      	adds	r3, #8
 800e63c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e63e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e640:	e853 3f00 	ldrex	r3, [r3]
 800e644:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e646:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e648:	f023 0301 	bic.w	r3, r3, #1
 800e64c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	3308      	adds	r3, #8
 800e656:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e65a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e65e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e660:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e662:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e666:	e841 2300 	strex	r3, r2, [r1]
 800e66a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e66c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d1e1      	bne.n	800e636 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	3308      	adds	r3, #8
 800e678:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e67a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e67c:	e853 3f00 	ldrex	r3, [r3]
 800e680:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e688:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	3308      	adds	r3, #8
 800e692:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e696:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e698:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e69a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e69c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e69e:	e841 2300 	strex	r3, r2, [r1]
 800e6a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e6a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d1e3      	bne.n	800e672 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2220      	movs	r2, #32
 800e6ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6c0:	e853 3f00 	ldrex	r3, [r3]
 800e6c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e6c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6c8:	f023 0310 	bic.w	r3, r3, #16
 800e6cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e6da:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e6dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e6e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e6e2:	e841 2300 	strex	r3, r2, [r1]
 800e6e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e6e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d1e4      	bne.n	800e6b8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7f7 f803 	bl	8005700 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2202      	movs	r2, #2
 800e6fe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	1ad3      	subs	r3, r2, r3
 800e710:	b29b      	uxth	r3, r3
 800e712:	4619      	mov	r1, r3
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f7f3 f8c3 	bl	80018a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e71a:	e0fd      	b.n	800e918 <HAL_UART_IRQHandler+0x760>
 800e71c:	40020010 	.word	0x40020010
 800e720:	40020028 	.word	0x40020028
 800e724:	40020040 	.word	0x40020040
 800e728:	40020058 	.word	0x40020058
 800e72c:	40020070 	.word	0x40020070
 800e730:	40020088 	.word	0x40020088
 800e734:	400200a0 	.word	0x400200a0
 800e738:	400200b8 	.word	0x400200b8
 800e73c:	40020410 	.word	0x40020410
 800e740:	40020428 	.word	0x40020428
 800e744:	40020440 	.word	0x40020440
 800e748:	40020458 	.word	0x40020458
 800e74c:	40020470 	.word	0x40020470
 800e750:	40020488 	.word	0x40020488
 800e754:	400204a0 	.word	0x400204a0
 800e758:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e768:	b29b      	uxth	r3, r3
 800e76a:	1ad3      	subs	r3, r2, r3
 800e76c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e776:	b29b      	uxth	r3, r3
 800e778:	2b00      	cmp	r3, #0
 800e77a:	f000 80cf 	beq.w	800e91c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e77e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e782:	2b00      	cmp	r3, #0
 800e784:	f000 80ca 	beq.w	800e91c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e790:	e853 3f00 	ldrex	r3, [r3]
 800e794:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e798:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e79c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e7aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800e7ac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e7b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e7b2:	e841 2300 	strex	r3, r2, [r1]
 800e7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e7b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d1e4      	bne.n	800e788 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	3308      	adds	r3, #8
 800e7c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7c8:	e853 3f00 	ldrex	r3, [r3]
 800e7cc:	623b      	str	r3, [r7, #32]
   return(result);
 800e7ce:	6a3a      	ldr	r2, [r7, #32]
 800e7d0:	4b55      	ldr	r3, [pc, #340]	@ (800e928 <HAL_UART_IRQHandler+0x770>)
 800e7d2:	4013      	ands	r3, r2
 800e7d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	3308      	adds	r3, #8
 800e7de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e7e2:	633a      	str	r2, [r7, #48]	@ 0x30
 800e7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e7e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7ea:	e841 2300 	strex	r3, r2, [r1]
 800e7ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d1e3      	bne.n	800e7be <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2220      	movs	r2, #32
 800e7fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2200      	movs	r2, #0
 800e802:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2200      	movs	r2, #0
 800e808:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	e853 3f00 	ldrex	r3, [r3]
 800e816:	60fb      	str	r3, [r7, #12]
   return(result);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f023 0310 	bic.w	r3, r3, #16
 800e81e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	461a      	mov	r2, r3
 800e828:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e82c:	61fb      	str	r3, [r7, #28]
 800e82e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e830:	69b9      	ldr	r1, [r7, #24]
 800e832:	69fa      	ldr	r2, [r7, #28]
 800e834:	e841 2300 	strex	r3, r2, [r1]
 800e838:	617b      	str	r3, [r7, #20]
   return(result);
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d1e4      	bne.n	800e80a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2202      	movs	r2, #2
 800e844:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e846:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e84a:	4619      	mov	r1, r3
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f7f3 f827 	bl	80018a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e852:	e063      	b.n	800e91c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e858:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d00e      	beq.n	800e87e <HAL_UART_IRQHandler+0x6c6>
 800e860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e864:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d008      	beq.n	800e87e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e874:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f002 f820 	bl	80108bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e87c:	e051      	b.n	800e922 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e87e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e886:	2b00      	cmp	r3, #0
 800e888:	d014      	beq.n	800e8b4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e88a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e88e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e892:	2b00      	cmp	r3, #0
 800e894:	d105      	bne.n	800e8a2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e89a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d008      	beq.n	800e8b4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d03a      	beq.n	800e920 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	4798      	blx	r3
    }
    return;
 800e8b2:	e035      	b.n	800e920 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e8b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d009      	beq.n	800e8d4 <HAL_UART_IRQHandler+0x71c>
 800e8c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e8c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d003      	beq.n	800e8d4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f001 faad 	bl	800fe2c <UART_EndTransmit_IT>
    return;
 800e8d2:	e026      	b.n	800e922 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e8d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d009      	beq.n	800e8f4 <HAL_UART_IRQHandler+0x73c>
 800e8e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e8e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d003      	beq.n	800e8f4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f001 fff9 	bl	80108e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e8f2:	e016      	b.n	800e922 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e8f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d010      	beq.n	800e922 <HAL_UART_IRQHandler+0x76a>
 800e900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e904:	2b00      	cmp	r3, #0
 800e906:	da0c      	bge.n	800e922 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f001 ffe1 	bl	80108d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e90e:	e008      	b.n	800e922 <HAL_UART_IRQHandler+0x76a>
      return;
 800e910:	bf00      	nop
 800e912:	e006      	b.n	800e922 <HAL_UART_IRQHandler+0x76a>
    return;
 800e914:	bf00      	nop
 800e916:	e004      	b.n	800e922 <HAL_UART_IRQHandler+0x76a>
      return;
 800e918:	bf00      	nop
 800e91a:	e002      	b.n	800e922 <HAL_UART_IRQHandler+0x76a>
      return;
 800e91c:	bf00      	nop
 800e91e:	e000      	b.n	800e922 <HAL_UART_IRQHandler+0x76a>
    return;
 800e920:	bf00      	nop
  }
}
 800e922:	37e8      	adds	r7, #232	@ 0xe8
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}
 800e928:	effffffe 	.word	0xeffffffe

0800e92c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e934:	bf00      	nop
 800e936:	370c      	adds	r7, #12
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr

0800e940 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e940:	b480      	push	{r7}
 800e942:	b083      	sub	sp, #12
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e948:	bf00      	nop
 800e94a:	370c      	adds	r7, #12
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr

0800e954 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e954:	b480      	push	{r7}
 800e956:	b083      	sub	sp, #12
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e95c:	bf00      	nop
 800e95e:	370c      	adds	r7, #12
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr

0800e968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e96c:	b092      	sub	sp, #72	@ 0x48
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e972:	2300      	movs	r3, #0
 800e974:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	689a      	ldr	r2, [r3, #8]
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	691b      	ldr	r3, [r3, #16]
 800e980:	431a      	orrs	r2, r3
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	695b      	ldr	r3, [r3, #20]
 800e986:	431a      	orrs	r2, r3
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	69db      	ldr	r3, [r3, #28]
 800e98c:	4313      	orrs	r3, r2
 800e98e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	4bbe      	ldr	r3, [pc, #760]	@ (800ec90 <UART_SetConfig+0x328>)
 800e998:	4013      	ands	r3, r2
 800e99a:	697a      	ldr	r2, [r7, #20]
 800e99c:	6812      	ldr	r2, [r2, #0]
 800e99e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e9a0:	430b      	orrs	r3, r1
 800e9a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	68da      	ldr	r2, [r3, #12]
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	430a      	orrs	r2, r1
 800e9b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	699b      	ldr	r3, [r3, #24]
 800e9be:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4ab3      	ldr	r2, [pc, #716]	@ (800ec94 <UART_SetConfig+0x32c>)
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d004      	beq.n	800e9d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	6a1b      	ldr	r3, [r3, #32]
 800e9ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	689a      	ldr	r2, [r3, #8]
 800e9da:	4baf      	ldr	r3, [pc, #700]	@ (800ec98 <UART_SetConfig+0x330>)
 800e9dc:	4013      	ands	r3, r2
 800e9de:	697a      	ldr	r2, [r7, #20]
 800e9e0:	6812      	ldr	r2, [r2, #0]
 800e9e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e9e4:	430b      	orrs	r3, r1
 800e9e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9ee:	f023 010f 	bic.w	r1, r3, #15
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	430a      	orrs	r2, r1
 800e9fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	4aa6      	ldr	r2, [pc, #664]	@ (800ec9c <UART_SetConfig+0x334>)
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d177      	bne.n	800eaf8 <UART_SetConfig+0x190>
 800ea08:	4ba5      	ldr	r3, [pc, #660]	@ (800eca0 <UART_SetConfig+0x338>)
 800ea0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ea10:	2b28      	cmp	r3, #40	@ 0x28
 800ea12:	d86d      	bhi.n	800eaf0 <UART_SetConfig+0x188>
 800ea14:	a201      	add	r2, pc, #4	@ (adr r2, 800ea1c <UART_SetConfig+0xb4>)
 800ea16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea1a:	bf00      	nop
 800ea1c:	0800eac1 	.word	0x0800eac1
 800ea20:	0800eaf1 	.word	0x0800eaf1
 800ea24:	0800eaf1 	.word	0x0800eaf1
 800ea28:	0800eaf1 	.word	0x0800eaf1
 800ea2c:	0800eaf1 	.word	0x0800eaf1
 800ea30:	0800eaf1 	.word	0x0800eaf1
 800ea34:	0800eaf1 	.word	0x0800eaf1
 800ea38:	0800eaf1 	.word	0x0800eaf1
 800ea3c:	0800eac9 	.word	0x0800eac9
 800ea40:	0800eaf1 	.word	0x0800eaf1
 800ea44:	0800eaf1 	.word	0x0800eaf1
 800ea48:	0800eaf1 	.word	0x0800eaf1
 800ea4c:	0800eaf1 	.word	0x0800eaf1
 800ea50:	0800eaf1 	.word	0x0800eaf1
 800ea54:	0800eaf1 	.word	0x0800eaf1
 800ea58:	0800eaf1 	.word	0x0800eaf1
 800ea5c:	0800ead1 	.word	0x0800ead1
 800ea60:	0800eaf1 	.word	0x0800eaf1
 800ea64:	0800eaf1 	.word	0x0800eaf1
 800ea68:	0800eaf1 	.word	0x0800eaf1
 800ea6c:	0800eaf1 	.word	0x0800eaf1
 800ea70:	0800eaf1 	.word	0x0800eaf1
 800ea74:	0800eaf1 	.word	0x0800eaf1
 800ea78:	0800eaf1 	.word	0x0800eaf1
 800ea7c:	0800ead9 	.word	0x0800ead9
 800ea80:	0800eaf1 	.word	0x0800eaf1
 800ea84:	0800eaf1 	.word	0x0800eaf1
 800ea88:	0800eaf1 	.word	0x0800eaf1
 800ea8c:	0800eaf1 	.word	0x0800eaf1
 800ea90:	0800eaf1 	.word	0x0800eaf1
 800ea94:	0800eaf1 	.word	0x0800eaf1
 800ea98:	0800eaf1 	.word	0x0800eaf1
 800ea9c:	0800eae1 	.word	0x0800eae1
 800eaa0:	0800eaf1 	.word	0x0800eaf1
 800eaa4:	0800eaf1 	.word	0x0800eaf1
 800eaa8:	0800eaf1 	.word	0x0800eaf1
 800eaac:	0800eaf1 	.word	0x0800eaf1
 800eab0:	0800eaf1 	.word	0x0800eaf1
 800eab4:	0800eaf1 	.word	0x0800eaf1
 800eab8:	0800eaf1 	.word	0x0800eaf1
 800eabc:	0800eae9 	.word	0x0800eae9
 800eac0:	2301      	movs	r3, #1
 800eac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eac6:	e222      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eac8:	2304      	movs	r3, #4
 800eaca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eace:	e21e      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ead0:	2308      	movs	r3, #8
 800ead2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ead6:	e21a      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ead8:	2310      	movs	r3, #16
 800eada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eade:	e216      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eae0:	2320      	movs	r3, #32
 800eae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eae6:	e212      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eae8:	2340      	movs	r3, #64	@ 0x40
 800eaea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaee:	e20e      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eaf0:	2380      	movs	r3, #128	@ 0x80
 800eaf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaf6:	e20a      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4a69      	ldr	r2, [pc, #420]	@ (800eca4 <UART_SetConfig+0x33c>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d130      	bne.n	800eb64 <UART_SetConfig+0x1fc>
 800eb02:	4b67      	ldr	r3, [pc, #412]	@ (800eca0 <UART_SetConfig+0x338>)
 800eb04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb06:	f003 0307 	and.w	r3, r3, #7
 800eb0a:	2b05      	cmp	r3, #5
 800eb0c:	d826      	bhi.n	800eb5c <UART_SetConfig+0x1f4>
 800eb0e:	a201      	add	r2, pc, #4	@ (adr r2, 800eb14 <UART_SetConfig+0x1ac>)
 800eb10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb14:	0800eb2d 	.word	0x0800eb2d
 800eb18:	0800eb35 	.word	0x0800eb35
 800eb1c:	0800eb3d 	.word	0x0800eb3d
 800eb20:	0800eb45 	.word	0x0800eb45
 800eb24:	0800eb4d 	.word	0x0800eb4d
 800eb28:	0800eb55 	.word	0x0800eb55
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb32:	e1ec      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eb34:	2304      	movs	r3, #4
 800eb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb3a:	e1e8      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eb3c:	2308      	movs	r3, #8
 800eb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb42:	e1e4      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eb44:	2310      	movs	r3, #16
 800eb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb4a:	e1e0      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eb4c:	2320      	movs	r3, #32
 800eb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb52:	e1dc      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eb54:	2340      	movs	r3, #64	@ 0x40
 800eb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb5a:	e1d8      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eb5c:	2380      	movs	r3, #128	@ 0x80
 800eb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb62:	e1d4      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4a4f      	ldr	r2, [pc, #316]	@ (800eca8 <UART_SetConfig+0x340>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d130      	bne.n	800ebd0 <UART_SetConfig+0x268>
 800eb6e:	4b4c      	ldr	r3, [pc, #304]	@ (800eca0 <UART_SetConfig+0x338>)
 800eb70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb72:	f003 0307 	and.w	r3, r3, #7
 800eb76:	2b05      	cmp	r3, #5
 800eb78:	d826      	bhi.n	800ebc8 <UART_SetConfig+0x260>
 800eb7a:	a201      	add	r2, pc, #4	@ (adr r2, 800eb80 <UART_SetConfig+0x218>)
 800eb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb80:	0800eb99 	.word	0x0800eb99
 800eb84:	0800eba1 	.word	0x0800eba1
 800eb88:	0800eba9 	.word	0x0800eba9
 800eb8c:	0800ebb1 	.word	0x0800ebb1
 800eb90:	0800ebb9 	.word	0x0800ebb9
 800eb94:	0800ebc1 	.word	0x0800ebc1
 800eb98:	2300      	movs	r3, #0
 800eb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb9e:	e1b6      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eba0:	2304      	movs	r3, #4
 800eba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eba6:	e1b2      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eba8:	2308      	movs	r3, #8
 800ebaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebae:	e1ae      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ebb0:	2310      	movs	r3, #16
 800ebb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebb6:	e1aa      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ebb8:	2320      	movs	r3, #32
 800ebba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebbe:	e1a6      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ebc0:	2340      	movs	r3, #64	@ 0x40
 800ebc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebc6:	e1a2      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ebc8:	2380      	movs	r3, #128	@ 0x80
 800ebca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebce:	e19e      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	4a35      	ldr	r2, [pc, #212]	@ (800ecac <UART_SetConfig+0x344>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d130      	bne.n	800ec3c <UART_SetConfig+0x2d4>
 800ebda:	4b31      	ldr	r3, [pc, #196]	@ (800eca0 <UART_SetConfig+0x338>)
 800ebdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebde:	f003 0307 	and.w	r3, r3, #7
 800ebe2:	2b05      	cmp	r3, #5
 800ebe4:	d826      	bhi.n	800ec34 <UART_SetConfig+0x2cc>
 800ebe6:	a201      	add	r2, pc, #4	@ (adr r2, 800ebec <UART_SetConfig+0x284>)
 800ebe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebec:	0800ec05 	.word	0x0800ec05
 800ebf0:	0800ec0d 	.word	0x0800ec0d
 800ebf4:	0800ec15 	.word	0x0800ec15
 800ebf8:	0800ec1d 	.word	0x0800ec1d
 800ebfc:	0800ec25 	.word	0x0800ec25
 800ec00:	0800ec2d 	.word	0x0800ec2d
 800ec04:	2300      	movs	r3, #0
 800ec06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec0a:	e180      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ec0c:	2304      	movs	r3, #4
 800ec0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec12:	e17c      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ec14:	2308      	movs	r3, #8
 800ec16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec1a:	e178      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ec1c:	2310      	movs	r3, #16
 800ec1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec22:	e174      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ec24:	2320      	movs	r3, #32
 800ec26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec2a:	e170      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ec2c:	2340      	movs	r3, #64	@ 0x40
 800ec2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec32:	e16c      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ec34:	2380      	movs	r3, #128	@ 0x80
 800ec36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec3a:	e168      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4a1b      	ldr	r2, [pc, #108]	@ (800ecb0 <UART_SetConfig+0x348>)
 800ec42:	4293      	cmp	r3, r2
 800ec44:	d142      	bne.n	800eccc <UART_SetConfig+0x364>
 800ec46:	4b16      	ldr	r3, [pc, #88]	@ (800eca0 <UART_SetConfig+0x338>)
 800ec48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec4a:	f003 0307 	and.w	r3, r3, #7
 800ec4e:	2b05      	cmp	r3, #5
 800ec50:	d838      	bhi.n	800ecc4 <UART_SetConfig+0x35c>
 800ec52:	a201      	add	r2, pc, #4	@ (adr r2, 800ec58 <UART_SetConfig+0x2f0>)
 800ec54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec58:	0800ec71 	.word	0x0800ec71
 800ec5c:	0800ec79 	.word	0x0800ec79
 800ec60:	0800ec81 	.word	0x0800ec81
 800ec64:	0800ec89 	.word	0x0800ec89
 800ec68:	0800ecb5 	.word	0x0800ecb5
 800ec6c:	0800ecbd 	.word	0x0800ecbd
 800ec70:	2300      	movs	r3, #0
 800ec72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec76:	e14a      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ec78:	2304      	movs	r3, #4
 800ec7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec7e:	e146      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ec80:	2308      	movs	r3, #8
 800ec82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec86:	e142      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ec88:	2310      	movs	r3, #16
 800ec8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec8e:	e13e      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ec90:	cfff69f3 	.word	0xcfff69f3
 800ec94:	58000c00 	.word	0x58000c00
 800ec98:	11fff4ff 	.word	0x11fff4ff
 800ec9c:	40011000 	.word	0x40011000
 800eca0:	58024400 	.word	0x58024400
 800eca4:	40004400 	.word	0x40004400
 800eca8:	40004800 	.word	0x40004800
 800ecac:	40004c00 	.word	0x40004c00
 800ecb0:	40005000 	.word	0x40005000
 800ecb4:	2320      	movs	r3, #32
 800ecb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecba:	e128      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ecbc:	2340      	movs	r3, #64	@ 0x40
 800ecbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecc2:	e124      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ecc4:	2380      	movs	r3, #128	@ 0x80
 800ecc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecca:	e120      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	4acb      	ldr	r2, [pc, #812]	@ (800f000 <UART_SetConfig+0x698>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d176      	bne.n	800edc4 <UART_SetConfig+0x45c>
 800ecd6:	4bcb      	ldr	r3, [pc, #812]	@ (800f004 <UART_SetConfig+0x69c>)
 800ecd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ecde:	2b28      	cmp	r3, #40	@ 0x28
 800ece0:	d86c      	bhi.n	800edbc <UART_SetConfig+0x454>
 800ece2:	a201      	add	r2, pc, #4	@ (adr r2, 800ece8 <UART_SetConfig+0x380>)
 800ece4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece8:	0800ed8d 	.word	0x0800ed8d
 800ecec:	0800edbd 	.word	0x0800edbd
 800ecf0:	0800edbd 	.word	0x0800edbd
 800ecf4:	0800edbd 	.word	0x0800edbd
 800ecf8:	0800edbd 	.word	0x0800edbd
 800ecfc:	0800edbd 	.word	0x0800edbd
 800ed00:	0800edbd 	.word	0x0800edbd
 800ed04:	0800edbd 	.word	0x0800edbd
 800ed08:	0800ed95 	.word	0x0800ed95
 800ed0c:	0800edbd 	.word	0x0800edbd
 800ed10:	0800edbd 	.word	0x0800edbd
 800ed14:	0800edbd 	.word	0x0800edbd
 800ed18:	0800edbd 	.word	0x0800edbd
 800ed1c:	0800edbd 	.word	0x0800edbd
 800ed20:	0800edbd 	.word	0x0800edbd
 800ed24:	0800edbd 	.word	0x0800edbd
 800ed28:	0800ed9d 	.word	0x0800ed9d
 800ed2c:	0800edbd 	.word	0x0800edbd
 800ed30:	0800edbd 	.word	0x0800edbd
 800ed34:	0800edbd 	.word	0x0800edbd
 800ed38:	0800edbd 	.word	0x0800edbd
 800ed3c:	0800edbd 	.word	0x0800edbd
 800ed40:	0800edbd 	.word	0x0800edbd
 800ed44:	0800edbd 	.word	0x0800edbd
 800ed48:	0800eda5 	.word	0x0800eda5
 800ed4c:	0800edbd 	.word	0x0800edbd
 800ed50:	0800edbd 	.word	0x0800edbd
 800ed54:	0800edbd 	.word	0x0800edbd
 800ed58:	0800edbd 	.word	0x0800edbd
 800ed5c:	0800edbd 	.word	0x0800edbd
 800ed60:	0800edbd 	.word	0x0800edbd
 800ed64:	0800edbd 	.word	0x0800edbd
 800ed68:	0800edad 	.word	0x0800edad
 800ed6c:	0800edbd 	.word	0x0800edbd
 800ed70:	0800edbd 	.word	0x0800edbd
 800ed74:	0800edbd 	.word	0x0800edbd
 800ed78:	0800edbd 	.word	0x0800edbd
 800ed7c:	0800edbd 	.word	0x0800edbd
 800ed80:	0800edbd 	.word	0x0800edbd
 800ed84:	0800edbd 	.word	0x0800edbd
 800ed88:	0800edb5 	.word	0x0800edb5
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed92:	e0bc      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ed94:	2304      	movs	r3, #4
 800ed96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed9a:	e0b8      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ed9c:	2308      	movs	r3, #8
 800ed9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eda2:	e0b4      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eda4:	2310      	movs	r3, #16
 800eda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edaa:	e0b0      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800edac:	2320      	movs	r3, #32
 800edae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edb2:	e0ac      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800edb4:	2340      	movs	r3, #64	@ 0x40
 800edb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edba:	e0a8      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800edbc:	2380      	movs	r3, #128	@ 0x80
 800edbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edc2:	e0a4      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	4a8f      	ldr	r2, [pc, #572]	@ (800f008 <UART_SetConfig+0x6a0>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d130      	bne.n	800ee30 <UART_SetConfig+0x4c8>
 800edce:	4b8d      	ldr	r3, [pc, #564]	@ (800f004 <UART_SetConfig+0x69c>)
 800edd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edd2:	f003 0307 	and.w	r3, r3, #7
 800edd6:	2b05      	cmp	r3, #5
 800edd8:	d826      	bhi.n	800ee28 <UART_SetConfig+0x4c0>
 800edda:	a201      	add	r2, pc, #4	@ (adr r2, 800ede0 <UART_SetConfig+0x478>)
 800eddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ede0:	0800edf9 	.word	0x0800edf9
 800ede4:	0800ee01 	.word	0x0800ee01
 800ede8:	0800ee09 	.word	0x0800ee09
 800edec:	0800ee11 	.word	0x0800ee11
 800edf0:	0800ee19 	.word	0x0800ee19
 800edf4:	0800ee21 	.word	0x0800ee21
 800edf8:	2300      	movs	r3, #0
 800edfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edfe:	e086      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ee00:	2304      	movs	r3, #4
 800ee02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee06:	e082      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ee08:	2308      	movs	r3, #8
 800ee0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee0e:	e07e      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ee10:	2310      	movs	r3, #16
 800ee12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee16:	e07a      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ee18:	2320      	movs	r3, #32
 800ee1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee1e:	e076      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ee20:	2340      	movs	r3, #64	@ 0x40
 800ee22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee26:	e072      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ee28:	2380      	movs	r3, #128	@ 0x80
 800ee2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee2e:	e06e      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a75      	ldr	r2, [pc, #468]	@ (800f00c <UART_SetConfig+0x6a4>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d130      	bne.n	800ee9c <UART_SetConfig+0x534>
 800ee3a:	4b72      	ldr	r3, [pc, #456]	@ (800f004 <UART_SetConfig+0x69c>)
 800ee3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee3e:	f003 0307 	and.w	r3, r3, #7
 800ee42:	2b05      	cmp	r3, #5
 800ee44:	d826      	bhi.n	800ee94 <UART_SetConfig+0x52c>
 800ee46:	a201      	add	r2, pc, #4	@ (adr r2, 800ee4c <UART_SetConfig+0x4e4>)
 800ee48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee4c:	0800ee65 	.word	0x0800ee65
 800ee50:	0800ee6d 	.word	0x0800ee6d
 800ee54:	0800ee75 	.word	0x0800ee75
 800ee58:	0800ee7d 	.word	0x0800ee7d
 800ee5c:	0800ee85 	.word	0x0800ee85
 800ee60:	0800ee8d 	.word	0x0800ee8d
 800ee64:	2300      	movs	r3, #0
 800ee66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee6a:	e050      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ee6c:	2304      	movs	r3, #4
 800ee6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee72:	e04c      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ee74:	2308      	movs	r3, #8
 800ee76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee7a:	e048      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ee7c:	2310      	movs	r3, #16
 800ee7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee82:	e044      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ee84:	2320      	movs	r3, #32
 800ee86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee8a:	e040      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ee8c:	2340      	movs	r3, #64	@ 0x40
 800ee8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee92:	e03c      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ee94:	2380      	movs	r3, #128	@ 0x80
 800ee96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee9a:	e038      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4a5b      	ldr	r2, [pc, #364]	@ (800f010 <UART_SetConfig+0x6a8>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d130      	bne.n	800ef08 <UART_SetConfig+0x5a0>
 800eea6:	4b57      	ldr	r3, [pc, #348]	@ (800f004 <UART_SetConfig+0x69c>)
 800eea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eeaa:	f003 0307 	and.w	r3, r3, #7
 800eeae:	2b05      	cmp	r3, #5
 800eeb0:	d826      	bhi.n	800ef00 <UART_SetConfig+0x598>
 800eeb2:	a201      	add	r2, pc, #4	@ (adr r2, 800eeb8 <UART_SetConfig+0x550>)
 800eeb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb8:	0800eed1 	.word	0x0800eed1
 800eebc:	0800eed9 	.word	0x0800eed9
 800eec0:	0800eee1 	.word	0x0800eee1
 800eec4:	0800eee9 	.word	0x0800eee9
 800eec8:	0800eef1 	.word	0x0800eef1
 800eecc:	0800eef9 	.word	0x0800eef9
 800eed0:	2302      	movs	r3, #2
 800eed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eed6:	e01a      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eed8:	2304      	movs	r3, #4
 800eeda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eede:	e016      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eee0:	2308      	movs	r3, #8
 800eee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eee6:	e012      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eee8:	2310      	movs	r3, #16
 800eeea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeee:	e00e      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eef0:	2320      	movs	r3, #32
 800eef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eef6:	e00a      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800eef8:	2340      	movs	r3, #64	@ 0x40
 800eefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eefe:	e006      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ef00:	2380      	movs	r3, #128	@ 0x80
 800ef02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef06:	e002      	b.n	800ef0e <UART_SetConfig+0x5a6>
 800ef08:	2380      	movs	r3, #128	@ 0x80
 800ef0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	4a3f      	ldr	r2, [pc, #252]	@ (800f010 <UART_SetConfig+0x6a8>)
 800ef14:	4293      	cmp	r3, r2
 800ef16:	f040 80f8 	bne.w	800f10a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ef1a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ef1e:	2b20      	cmp	r3, #32
 800ef20:	dc46      	bgt.n	800efb0 <UART_SetConfig+0x648>
 800ef22:	2b02      	cmp	r3, #2
 800ef24:	f2c0 8082 	blt.w	800f02c <UART_SetConfig+0x6c4>
 800ef28:	3b02      	subs	r3, #2
 800ef2a:	2b1e      	cmp	r3, #30
 800ef2c:	d87e      	bhi.n	800f02c <UART_SetConfig+0x6c4>
 800ef2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ef34 <UART_SetConfig+0x5cc>)
 800ef30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef34:	0800efb7 	.word	0x0800efb7
 800ef38:	0800f02d 	.word	0x0800f02d
 800ef3c:	0800efbf 	.word	0x0800efbf
 800ef40:	0800f02d 	.word	0x0800f02d
 800ef44:	0800f02d 	.word	0x0800f02d
 800ef48:	0800f02d 	.word	0x0800f02d
 800ef4c:	0800efcf 	.word	0x0800efcf
 800ef50:	0800f02d 	.word	0x0800f02d
 800ef54:	0800f02d 	.word	0x0800f02d
 800ef58:	0800f02d 	.word	0x0800f02d
 800ef5c:	0800f02d 	.word	0x0800f02d
 800ef60:	0800f02d 	.word	0x0800f02d
 800ef64:	0800f02d 	.word	0x0800f02d
 800ef68:	0800f02d 	.word	0x0800f02d
 800ef6c:	0800efdf 	.word	0x0800efdf
 800ef70:	0800f02d 	.word	0x0800f02d
 800ef74:	0800f02d 	.word	0x0800f02d
 800ef78:	0800f02d 	.word	0x0800f02d
 800ef7c:	0800f02d 	.word	0x0800f02d
 800ef80:	0800f02d 	.word	0x0800f02d
 800ef84:	0800f02d 	.word	0x0800f02d
 800ef88:	0800f02d 	.word	0x0800f02d
 800ef8c:	0800f02d 	.word	0x0800f02d
 800ef90:	0800f02d 	.word	0x0800f02d
 800ef94:	0800f02d 	.word	0x0800f02d
 800ef98:	0800f02d 	.word	0x0800f02d
 800ef9c:	0800f02d 	.word	0x0800f02d
 800efa0:	0800f02d 	.word	0x0800f02d
 800efa4:	0800f02d 	.word	0x0800f02d
 800efa8:	0800f02d 	.word	0x0800f02d
 800efac:	0800f01f 	.word	0x0800f01f
 800efb0:	2b40      	cmp	r3, #64	@ 0x40
 800efb2:	d037      	beq.n	800f024 <UART_SetConfig+0x6bc>
 800efb4:	e03a      	b.n	800f02c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800efb6:	f7fd fb55 	bl	800c664 <HAL_RCCEx_GetD3PCLK1Freq>
 800efba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800efbc:	e03c      	b.n	800f038 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fd fb64 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800efc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efcc:	e034      	b.n	800f038 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efce:	f107 0318 	add.w	r3, r7, #24
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7fd fcb0 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800efd8:	69fb      	ldr	r3, [r7, #28]
 800efda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efdc:	e02c      	b.n	800f038 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800efde:	4b09      	ldr	r3, [pc, #36]	@ (800f004 <UART_SetConfig+0x69c>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f003 0320 	and.w	r3, r3, #32
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d016      	beq.n	800f018 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800efea:	4b06      	ldr	r3, [pc, #24]	@ (800f004 <UART_SetConfig+0x69c>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	08db      	lsrs	r3, r3, #3
 800eff0:	f003 0303 	and.w	r3, r3, #3
 800eff4:	4a07      	ldr	r2, [pc, #28]	@ (800f014 <UART_SetConfig+0x6ac>)
 800eff6:	fa22 f303 	lsr.w	r3, r2, r3
 800effa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800effc:	e01c      	b.n	800f038 <UART_SetConfig+0x6d0>
 800effe:	bf00      	nop
 800f000:	40011400 	.word	0x40011400
 800f004:	58024400 	.word	0x58024400
 800f008:	40007800 	.word	0x40007800
 800f00c:	40007c00 	.word	0x40007c00
 800f010:	58000c00 	.word	0x58000c00
 800f014:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f018:	4b9d      	ldr	r3, [pc, #628]	@ (800f290 <UART_SetConfig+0x928>)
 800f01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f01c:	e00c      	b.n	800f038 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f01e:	4b9d      	ldr	r3, [pc, #628]	@ (800f294 <UART_SetConfig+0x92c>)
 800f020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f022:	e009      	b.n	800f038 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f024:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f02a:	e005      	b.n	800f038 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f02c:	2300      	movs	r3, #0
 800f02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f030:	2301      	movs	r3, #1
 800f032:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f036:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	f000 81de 	beq.w	800f3fc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f044:	4a94      	ldr	r2, [pc, #592]	@ (800f298 <UART_SetConfig+0x930>)
 800f046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f04a:	461a      	mov	r2, r3
 800f04c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f04e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f052:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	685a      	ldr	r2, [r3, #4]
 800f058:	4613      	mov	r3, r2
 800f05a:	005b      	lsls	r3, r3, #1
 800f05c:	4413      	add	r3, r2
 800f05e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f060:	429a      	cmp	r2, r3
 800f062:	d305      	bcc.n	800f070 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f06a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d903      	bls.n	800f078 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f070:	2301      	movs	r3, #1
 800f072:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f076:	e1c1      	b.n	800f3fc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f07a:	2200      	movs	r2, #0
 800f07c:	60bb      	str	r3, [r7, #8]
 800f07e:	60fa      	str	r2, [r7, #12]
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f084:	4a84      	ldr	r2, [pc, #528]	@ (800f298 <UART_SetConfig+0x930>)
 800f086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	2200      	movs	r2, #0
 800f08e:	603b      	str	r3, [r7, #0]
 800f090:	607a      	str	r2, [r7, #4]
 800f092:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f096:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f09a:	f7f1 f979 	bl	8000390 <__aeabi_uldivmod>
 800f09e:	4602      	mov	r2, r0
 800f0a0:	460b      	mov	r3, r1
 800f0a2:	4610      	mov	r0, r2
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	f04f 0200 	mov.w	r2, #0
 800f0aa:	f04f 0300 	mov.w	r3, #0
 800f0ae:	020b      	lsls	r3, r1, #8
 800f0b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f0b4:	0202      	lsls	r2, r0, #8
 800f0b6:	6979      	ldr	r1, [r7, #20]
 800f0b8:	6849      	ldr	r1, [r1, #4]
 800f0ba:	0849      	lsrs	r1, r1, #1
 800f0bc:	2000      	movs	r0, #0
 800f0be:	460c      	mov	r4, r1
 800f0c0:	4605      	mov	r5, r0
 800f0c2:	eb12 0804 	adds.w	r8, r2, r4
 800f0c6:	eb43 0905 	adc.w	r9, r3, r5
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	469a      	mov	sl, r3
 800f0d2:	4693      	mov	fp, r2
 800f0d4:	4652      	mov	r2, sl
 800f0d6:	465b      	mov	r3, fp
 800f0d8:	4640      	mov	r0, r8
 800f0da:	4649      	mov	r1, r9
 800f0dc:	f7f1 f958 	bl	8000390 <__aeabi_uldivmod>
 800f0e0:	4602      	mov	r2, r0
 800f0e2:	460b      	mov	r3, r1
 800f0e4:	4613      	mov	r3, r2
 800f0e6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f0ee:	d308      	bcc.n	800f102 <UART_SetConfig+0x79a>
 800f0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f0f6:	d204      	bcs.n	800f102 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f0fe:	60da      	str	r2, [r3, #12]
 800f100:	e17c      	b.n	800f3fc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f102:	2301      	movs	r3, #1
 800f104:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f108:	e178      	b.n	800f3fc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	69db      	ldr	r3, [r3, #28]
 800f10e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f112:	f040 80c5 	bne.w	800f2a0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f116:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f11a:	2b20      	cmp	r3, #32
 800f11c:	dc48      	bgt.n	800f1b0 <UART_SetConfig+0x848>
 800f11e:	2b00      	cmp	r3, #0
 800f120:	db7b      	blt.n	800f21a <UART_SetConfig+0x8b2>
 800f122:	2b20      	cmp	r3, #32
 800f124:	d879      	bhi.n	800f21a <UART_SetConfig+0x8b2>
 800f126:	a201      	add	r2, pc, #4	@ (adr r2, 800f12c <UART_SetConfig+0x7c4>)
 800f128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f12c:	0800f1b7 	.word	0x0800f1b7
 800f130:	0800f1bf 	.word	0x0800f1bf
 800f134:	0800f21b 	.word	0x0800f21b
 800f138:	0800f21b 	.word	0x0800f21b
 800f13c:	0800f1c7 	.word	0x0800f1c7
 800f140:	0800f21b 	.word	0x0800f21b
 800f144:	0800f21b 	.word	0x0800f21b
 800f148:	0800f21b 	.word	0x0800f21b
 800f14c:	0800f1d7 	.word	0x0800f1d7
 800f150:	0800f21b 	.word	0x0800f21b
 800f154:	0800f21b 	.word	0x0800f21b
 800f158:	0800f21b 	.word	0x0800f21b
 800f15c:	0800f21b 	.word	0x0800f21b
 800f160:	0800f21b 	.word	0x0800f21b
 800f164:	0800f21b 	.word	0x0800f21b
 800f168:	0800f21b 	.word	0x0800f21b
 800f16c:	0800f1e7 	.word	0x0800f1e7
 800f170:	0800f21b 	.word	0x0800f21b
 800f174:	0800f21b 	.word	0x0800f21b
 800f178:	0800f21b 	.word	0x0800f21b
 800f17c:	0800f21b 	.word	0x0800f21b
 800f180:	0800f21b 	.word	0x0800f21b
 800f184:	0800f21b 	.word	0x0800f21b
 800f188:	0800f21b 	.word	0x0800f21b
 800f18c:	0800f21b 	.word	0x0800f21b
 800f190:	0800f21b 	.word	0x0800f21b
 800f194:	0800f21b 	.word	0x0800f21b
 800f198:	0800f21b 	.word	0x0800f21b
 800f19c:	0800f21b 	.word	0x0800f21b
 800f1a0:	0800f21b 	.word	0x0800f21b
 800f1a4:	0800f21b 	.word	0x0800f21b
 800f1a8:	0800f21b 	.word	0x0800f21b
 800f1ac:	0800f20d 	.word	0x0800f20d
 800f1b0:	2b40      	cmp	r3, #64	@ 0x40
 800f1b2:	d02e      	beq.n	800f212 <UART_SetConfig+0x8aa>
 800f1b4:	e031      	b.n	800f21a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f1b6:	f7fb fa79 	bl	800a6ac <HAL_RCC_GetPCLK1Freq>
 800f1ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f1bc:	e033      	b.n	800f226 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f1be:	f7fb fa8b 	bl	800a6d8 <HAL_RCC_GetPCLK2Freq>
 800f1c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f1c4:	e02f      	b.n	800f226 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7fd fa60 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1d4:	e027      	b.n	800f226 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f1d6:	f107 0318 	add.w	r3, r7, #24
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7fd fbac 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1e4:	e01f      	b.n	800f226 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f1e6:	4b2d      	ldr	r3, [pc, #180]	@ (800f29c <UART_SetConfig+0x934>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f003 0320 	and.w	r3, r3, #32
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d009      	beq.n	800f206 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f1f2:	4b2a      	ldr	r3, [pc, #168]	@ (800f29c <UART_SetConfig+0x934>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	08db      	lsrs	r3, r3, #3
 800f1f8:	f003 0303 	and.w	r3, r3, #3
 800f1fc:	4a24      	ldr	r2, [pc, #144]	@ (800f290 <UART_SetConfig+0x928>)
 800f1fe:	fa22 f303 	lsr.w	r3, r2, r3
 800f202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f204:	e00f      	b.n	800f226 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f206:	4b22      	ldr	r3, [pc, #136]	@ (800f290 <UART_SetConfig+0x928>)
 800f208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f20a:	e00c      	b.n	800f226 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f20c:	4b21      	ldr	r3, [pc, #132]	@ (800f294 <UART_SetConfig+0x92c>)
 800f20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f210:	e009      	b.n	800f226 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f218:	e005      	b.n	800f226 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f21a:	2300      	movs	r3, #0
 800f21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f21e:	2301      	movs	r3, #1
 800f220:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f224:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f000 80e7 	beq.w	800f3fc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f232:	4a19      	ldr	r2, [pc, #100]	@ (800f298 <UART_SetConfig+0x930>)
 800f234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f238:	461a      	mov	r2, r3
 800f23a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f23c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f240:	005a      	lsls	r2, r3, #1
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	085b      	lsrs	r3, r3, #1
 800f248:	441a      	add	r2, r3
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f252:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f256:	2b0f      	cmp	r3, #15
 800f258:	d916      	bls.n	800f288 <UART_SetConfig+0x920>
 800f25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f25c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f260:	d212      	bcs.n	800f288 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f264:	b29b      	uxth	r3, r3
 800f266:	f023 030f 	bic.w	r3, r3, #15
 800f26a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f26e:	085b      	lsrs	r3, r3, #1
 800f270:	b29b      	uxth	r3, r3
 800f272:	f003 0307 	and.w	r3, r3, #7
 800f276:	b29a      	uxth	r2, r3
 800f278:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f27a:	4313      	orrs	r3, r2
 800f27c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f284:	60da      	str	r2, [r3, #12]
 800f286:	e0b9      	b.n	800f3fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f288:	2301      	movs	r3, #1
 800f28a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f28e:	e0b5      	b.n	800f3fc <UART_SetConfig+0xa94>
 800f290:	03d09000 	.word	0x03d09000
 800f294:	003d0900 	.word	0x003d0900
 800f298:	08019998 	.word	0x08019998
 800f29c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f2a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f2a4:	2b20      	cmp	r3, #32
 800f2a6:	dc49      	bgt.n	800f33c <UART_SetConfig+0x9d4>
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	db7c      	blt.n	800f3a6 <UART_SetConfig+0xa3e>
 800f2ac:	2b20      	cmp	r3, #32
 800f2ae:	d87a      	bhi.n	800f3a6 <UART_SetConfig+0xa3e>
 800f2b0:	a201      	add	r2, pc, #4	@ (adr r2, 800f2b8 <UART_SetConfig+0x950>)
 800f2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b6:	bf00      	nop
 800f2b8:	0800f343 	.word	0x0800f343
 800f2bc:	0800f34b 	.word	0x0800f34b
 800f2c0:	0800f3a7 	.word	0x0800f3a7
 800f2c4:	0800f3a7 	.word	0x0800f3a7
 800f2c8:	0800f353 	.word	0x0800f353
 800f2cc:	0800f3a7 	.word	0x0800f3a7
 800f2d0:	0800f3a7 	.word	0x0800f3a7
 800f2d4:	0800f3a7 	.word	0x0800f3a7
 800f2d8:	0800f363 	.word	0x0800f363
 800f2dc:	0800f3a7 	.word	0x0800f3a7
 800f2e0:	0800f3a7 	.word	0x0800f3a7
 800f2e4:	0800f3a7 	.word	0x0800f3a7
 800f2e8:	0800f3a7 	.word	0x0800f3a7
 800f2ec:	0800f3a7 	.word	0x0800f3a7
 800f2f0:	0800f3a7 	.word	0x0800f3a7
 800f2f4:	0800f3a7 	.word	0x0800f3a7
 800f2f8:	0800f373 	.word	0x0800f373
 800f2fc:	0800f3a7 	.word	0x0800f3a7
 800f300:	0800f3a7 	.word	0x0800f3a7
 800f304:	0800f3a7 	.word	0x0800f3a7
 800f308:	0800f3a7 	.word	0x0800f3a7
 800f30c:	0800f3a7 	.word	0x0800f3a7
 800f310:	0800f3a7 	.word	0x0800f3a7
 800f314:	0800f3a7 	.word	0x0800f3a7
 800f318:	0800f3a7 	.word	0x0800f3a7
 800f31c:	0800f3a7 	.word	0x0800f3a7
 800f320:	0800f3a7 	.word	0x0800f3a7
 800f324:	0800f3a7 	.word	0x0800f3a7
 800f328:	0800f3a7 	.word	0x0800f3a7
 800f32c:	0800f3a7 	.word	0x0800f3a7
 800f330:	0800f3a7 	.word	0x0800f3a7
 800f334:	0800f3a7 	.word	0x0800f3a7
 800f338:	0800f399 	.word	0x0800f399
 800f33c:	2b40      	cmp	r3, #64	@ 0x40
 800f33e:	d02e      	beq.n	800f39e <UART_SetConfig+0xa36>
 800f340:	e031      	b.n	800f3a6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f342:	f7fb f9b3 	bl	800a6ac <HAL_RCC_GetPCLK1Freq>
 800f346:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f348:	e033      	b.n	800f3b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f34a:	f7fb f9c5 	bl	800a6d8 <HAL_RCC_GetPCLK2Freq>
 800f34e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f350:	e02f      	b.n	800f3b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f352:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f356:	4618      	mov	r0, r3
 800f358:	f7fd f99a 	bl	800c690 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f360:	e027      	b.n	800f3b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f362:	f107 0318 	add.w	r3, r7, #24
 800f366:	4618      	mov	r0, r3
 800f368:	f7fd fae6 	bl	800c938 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f370:	e01f      	b.n	800f3b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f372:	4b2d      	ldr	r3, [pc, #180]	@ (800f428 <UART_SetConfig+0xac0>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	f003 0320 	and.w	r3, r3, #32
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d009      	beq.n	800f392 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f37e:	4b2a      	ldr	r3, [pc, #168]	@ (800f428 <UART_SetConfig+0xac0>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	08db      	lsrs	r3, r3, #3
 800f384:	f003 0303 	and.w	r3, r3, #3
 800f388:	4a28      	ldr	r2, [pc, #160]	@ (800f42c <UART_SetConfig+0xac4>)
 800f38a:	fa22 f303 	lsr.w	r3, r2, r3
 800f38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f390:	e00f      	b.n	800f3b2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f392:	4b26      	ldr	r3, [pc, #152]	@ (800f42c <UART_SetConfig+0xac4>)
 800f394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f396:	e00c      	b.n	800f3b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f398:	4b25      	ldr	r3, [pc, #148]	@ (800f430 <UART_SetConfig+0xac8>)
 800f39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f39c:	e009      	b.n	800f3b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f39e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3a4:	e005      	b.n	800f3b2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f3b0:	bf00      	nop
    }

    if (pclk != 0U)
 800f3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d021      	beq.n	800f3fc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3bc:	4a1d      	ldr	r2, [pc, #116]	@ (800f434 <UART_SetConfig+0xacc>)
 800f3be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3c6:	fbb3 f2f2 	udiv	r2, r3, r2
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	085b      	lsrs	r3, r3, #1
 800f3d0:	441a      	add	r2, r3
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3de:	2b0f      	cmp	r3, #15
 800f3e0:	d909      	bls.n	800f3f6 <UART_SetConfig+0xa8e>
 800f3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f3e8:	d205      	bcs.n	800f3f6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ec:	b29a      	uxth	r2, r3
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	60da      	str	r2, [r3, #12]
 800f3f4:	e002      	b.n	800f3fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	2201      	movs	r2, #1
 800f400:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	2201      	movs	r2, #1
 800f408:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	2200      	movs	r2, #0
 800f410:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	2200      	movs	r2, #0
 800f416:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f418:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	3748      	adds	r7, #72	@ 0x48
 800f420:	46bd      	mov	sp, r7
 800f422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f426:	bf00      	nop
 800f428:	58024400 	.word	0x58024400
 800f42c:	03d09000 	.word	0x03d09000
 800f430:	003d0900 	.word	0x003d0900
 800f434:	08019998 	.word	0x08019998

0800f438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f444:	f003 0308 	and.w	r3, r3, #8
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d00a      	beq.n	800f462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	430a      	orrs	r2, r1
 800f460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f466:	f003 0301 	and.w	r3, r3, #1
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d00a      	beq.n	800f484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	430a      	orrs	r2, r1
 800f482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f488:	f003 0302 	and.w	r3, r3, #2
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d00a      	beq.n	800f4a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	430a      	orrs	r2, r1
 800f4a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4aa:	f003 0304 	and.w	r3, r3, #4
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d00a      	beq.n	800f4c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	430a      	orrs	r2, r1
 800f4c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4cc:	f003 0310 	and.w	r3, r3, #16
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d00a      	beq.n	800f4ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	689b      	ldr	r3, [r3, #8]
 800f4da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	430a      	orrs	r2, r1
 800f4e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4ee:	f003 0320 	and.w	r3, r3, #32
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d00a      	beq.n	800f50c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	689b      	ldr	r3, [r3, #8]
 800f4fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	430a      	orrs	r2, r1
 800f50a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f514:	2b00      	cmp	r3, #0
 800f516:	d01a      	beq.n	800f54e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	685b      	ldr	r3, [r3, #4]
 800f51e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	430a      	orrs	r2, r1
 800f52c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f536:	d10a      	bne.n	800f54e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	430a      	orrs	r2, r1
 800f54c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f556:	2b00      	cmp	r3, #0
 800f558:	d00a      	beq.n	800f570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	430a      	orrs	r2, r1
 800f56e:	605a      	str	r2, [r3, #4]
  }
}
 800f570:	bf00      	nop
 800f572:	370c      	adds	r7, #12
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr

0800f57c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b098      	sub	sp, #96	@ 0x60
 800f580:	af02      	add	r7, sp, #8
 800f582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2200      	movs	r2, #0
 800f588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f58c:	f7f4 f92a 	bl	80037e4 <HAL_GetTick>
 800f590:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f003 0308 	and.w	r3, r3, #8
 800f59c:	2b08      	cmp	r3, #8
 800f59e:	d12f      	bne.n	800f600 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f5a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f5a4:	9300      	str	r3, [sp, #0]
 800f5a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f000 f88e 	bl	800f6d0 <UART_WaitOnFlagUntilTimeout>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d022      	beq.n	800f600 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c2:	e853 3f00 	ldrex	r3, [r3]
 800f5c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f5ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f5d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800f5da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f5de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f5e0:	e841 2300 	strex	r3, r2, [r1]
 800f5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f5e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d1e6      	bne.n	800f5ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2220      	movs	r2, #32
 800f5f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f5fc:	2303      	movs	r3, #3
 800f5fe:	e063      	b.n	800f6c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	f003 0304 	and.w	r3, r3, #4
 800f60a:	2b04      	cmp	r3, #4
 800f60c:	d149      	bne.n	800f6a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f60e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f612:	9300      	str	r3, [sp, #0]
 800f614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f616:	2200      	movs	r2, #0
 800f618:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f000 f857 	bl	800f6d0 <UART_WaitOnFlagUntilTimeout>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d03c      	beq.n	800f6a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f630:	e853 3f00 	ldrex	r3, [r3]
 800f634:	623b      	str	r3, [r7, #32]
   return(result);
 800f636:	6a3b      	ldr	r3, [r7, #32]
 800f638:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f63c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	461a      	mov	r2, r3
 800f644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f646:	633b      	str	r3, [r7, #48]	@ 0x30
 800f648:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f64a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f64c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f64e:	e841 2300 	strex	r3, r2, [r1]
 800f652:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f656:	2b00      	cmp	r3, #0
 800f658:	d1e6      	bne.n	800f628 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	3308      	adds	r3, #8
 800f660:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	e853 3f00 	ldrex	r3, [r3]
 800f668:	60fb      	str	r3, [r7, #12]
   return(result);
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	f023 0301 	bic.w	r3, r3, #1
 800f670:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	3308      	adds	r3, #8
 800f678:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f67a:	61fa      	str	r2, [r7, #28]
 800f67c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f67e:	69b9      	ldr	r1, [r7, #24]
 800f680:	69fa      	ldr	r2, [r7, #28]
 800f682:	e841 2300 	strex	r3, r2, [r1]
 800f686:	617b      	str	r3, [r7, #20]
   return(result);
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d1e5      	bne.n	800f65a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2220      	movs	r2, #32
 800f692:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2200      	movs	r2, #0
 800f69a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f69e:	2303      	movs	r3, #3
 800f6a0:	e012      	b.n	800f6c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2220      	movs	r2, #32
 800f6a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2220      	movs	r2, #32
 800f6ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f6c6:	2300      	movs	r3, #0
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3758      	adds	r7, #88	@ 0x58
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}

0800f6d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	60f8      	str	r0, [r7, #12]
 800f6d8:	60b9      	str	r1, [r7, #8]
 800f6da:	603b      	str	r3, [r7, #0]
 800f6dc:	4613      	mov	r3, r2
 800f6de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f6e0:	e04f      	b.n	800f782 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f6e2:	69bb      	ldr	r3, [r7, #24]
 800f6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6e8:	d04b      	beq.n	800f782 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f6ea:	f7f4 f87b 	bl	80037e4 <HAL_GetTick>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	1ad3      	subs	r3, r2, r3
 800f6f4:	69ba      	ldr	r2, [r7, #24]
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d302      	bcc.n	800f700 <UART_WaitOnFlagUntilTimeout+0x30>
 800f6fa:	69bb      	ldr	r3, [r7, #24]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d101      	bne.n	800f704 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f700:	2303      	movs	r3, #3
 800f702:	e04e      	b.n	800f7a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f003 0304 	and.w	r3, r3, #4
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d037      	beq.n	800f782 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	2b80      	cmp	r3, #128	@ 0x80
 800f716:	d034      	beq.n	800f782 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	2b40      	cmp	r3, #64	@ 0x40
 800f71c:	d031      	beq.n	800f782 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	69db      	ldr	r3, [r3, #28]
 800f724:	f003 0308 	and.w	r3, r3, #8
 800f728:	2b08      	cmp	r3, #8
 800f72a:	d110      	bne.n	800f74e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	2208      	movs	r2, #8
 800f732:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f734:	68f8      	ldr	r0, [r7, #12]
 800f736:	f000 f95b 	bl	800f9f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2208      	movs	r2, #8
 800f73e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2200      	movs	r2, #0
 800f746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f74a:	2301      	movs	r3, #1
 800f74c:	e029      	b.n	800f7a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	69db      	ldr	r3, [r3, #28]
 800f754:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f758:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f75c:	d111      	bne.n	800f782 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f766:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f768:	68f8      	ldr	r0, [r7, #12]
 800f76a:	f000 f941 	bl	800f9f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2220      	movs	r2, #32
 800f772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	2200      	movs	r2, #0
 800f77a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f77e:	2303      	movs	r3, #3
 800f780:	e00f      	b.n	800f7a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	69da      	ldr	r2, [r3, #28]
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	4013      	ands	r3, r2
 800f78c:	68ba      	ldr	r2, [r7, #8]
 800f78e:	429a      	cmp	r2, r3
 800f790:	bf0c      	ite	eq
 800f792:	2301      	moveq	r3, #1
 800f794:	2300      	movne	r3, #0
 800f796:	b2db      	uxtb	r3, r3
 800f798:	461a      	mov	r2, r3
 800f79a:	79fb      	ldrb	r3, [r7, #7]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d0a0      	beq.n	800f6e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f7a0:	2300      	movs	r3, #0
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3710      	adds	r7, #16
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}
	...

0800f7ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b0a3      	sub	sp, #140	@ 0x8c
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	60f8      	str	r0, [r7, #12]
 800f7b4:	60b9      	str	r1, [r7, #8]
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	68ba      	ldr	r2, [r7, #8]
 800f7be:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	88fa      	ldrh	r2, [r7, #6]
 800f7c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	88fa      	ldrh	r2, [r7, #6]
 800f7cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	689b      	ldr	r3, [r3, #8]
 800f7da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f7de:	d10e      	bne.n	800f7fe <UART_Start_Receive_IT+0x52>
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	691b      	ldr	r3, [r3, #16]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d105      	bne.n	800f7f4 <UART_Start_Receive_IT+0x48>
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f7ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f7f2:	e02d      	b.n	800f850 <UART_Start_Receive_IT+0xa4>
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	22ff      	movs	r2, #255	@ 0xff
 800f7f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f7fc:	e028      	b.n	800f850 <UART_Start_Receive_IT+0xa4>
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	689b      	ldr	r3, [r3, #8]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d10d      	bne.n	800f822 <UART_Start_Receive_IT+0x76>
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	691b      	ldr	r3, [r3, #16]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d104      	bne.n	800f818 <UART_Start_Receive_IT+0x6c>
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	22ff      	movs	r2, #255	@ 0xff
 800f812:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f816:	e01b      	b.n	800f850 <UART_Start_Receive_IT+0xa4>
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	227f      	movs	r2, #127	@ 0x7f
 800f81c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f820:	e016      	b.n	800f850 <UART_Start_Receive_IT+0xa4>
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	689b      	ldr	r3, [r3, #8]
 800f826:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f82a:	d10d      	bne.n	800f848 <UART_Start_Receive_IT+0x9c>
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	691b      	ldr	r3, [r3, #16]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d104      	bne.n	800f83e <UART_Start_Receive_IT+0x92>
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	227f      	movs	r2, #127	@ 0x7f
 800f838:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f83c:	e008      	b.n	800f850 <UART_Start_Receive_IT+0xa4>
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	223f      	movs	r2, #63	@ 0x3f
 800f842:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f846:	e003      	b.n	800f850 <UART_Start_Receive_IT+0xa4>
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	2200      	movs	r2, #0
 800f84c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	2200      	movs	r2, #0
 800f854:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	2222      	movs	r2, #34	@ 0x22
 800f85c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	3308      	adds	r3, #8
 800f866:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f868:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f86a:	e853 3f00 	ldrex	r3, [r3]
 800f86e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f870:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f872:	f043 0301 	orr.w	r3, r3, #1
 800f876:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	3308      	adds	r3, #8
 800f880:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f884:	673a      	str	r2, [r7, #112]	@ 0x70
 800f886:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f888:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800f88a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f88c:	e841 2300 	strex	r3, r2, [r1]
 800f890:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800f892:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f894:	2b00      	cmp	r3, #0
 800f896:	d1e3      	bne.n	800f860 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f89c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f8a0:	d14f      	bne.n	800f942 <UART_Start_Receive_IT+0x196>
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f8a8:	88fa      	ldrh	r2, [r7, #6]
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d349      	bcc.n	800f942 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	689b      	ldr	r3, [r3, #8]
 800f8b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f8b6:	d107      	bne.n	800f8c8 <UART_Start_Receive_IT+0x11c>
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	691b      	ldr	r3, [r3, #16]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d103      	bne.n	800f8c8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	4a47      	ldr	r2, [pc, #284]	@ (800f9e0 <UART_Start_Receive_IT+0x234>)
 800f8c4:	675a      	str	r2, [r3, #116]	@ 0x74
 800f8c6:	e002      	b.n	800f8ce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	4a46      	ldr	r2, [pc, #280]	@ (800f9e4 <UART_Start_Receive_IT+0x238>)
 800f8cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	691b      	ldr	r3, [r3, #16]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d01a      	beq.n	800f90c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8de:	e853 3f00 	ldrex	r3, [r3]
 800f8e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f8e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f8ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f8f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f8fa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8fc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f8fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f900:	e841 2300 	strex	r3, r2, [r1]
 800f904:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800f906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d1e4      	bne.n	800f8d6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	3308      	adds	r3, #8
 800f912:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f916:	e853 3f00 	ldrex	r3, [r3]
 800f91a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f91e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f922:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	3308      	adds	r3, #8
 800f92a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f92c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800f92e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f930:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f932:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f934:	e841 2300 	strex	r3, r2, [r1]
 800f938:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f93a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d1e5      	bne.n	800f90c <UART_Start_Receive_IT+0x160>
 800f940:	e046      	b.n	800f9d0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	689b      	ldr	r3, [r3, #8]
 800f946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f94a:	d107      	bne.n	800f95c <UART_Start_Receive_IT+0x1b0>
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	691b      	ldr	r3, [r3, #16]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d103      	bne.n	800f95c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	4a24      	ldr	r2, [pc, #144]	@ (800f9e8 <UART_Start_Receive_IT+0x23c>)
 800f958:	675a      	str	r2, [r3, #116]	@ 0x74
 800f95a:	e002      	b.n	800f962 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	4a23      	ldr	r2, [pc, #140]	@ (800f9ec <UART_Start_Receive_IT+0x240>)
 800f960:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	691b      	ldr	r3, [r3, #16]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d019      	beq.n	800f99e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f972:	e853 3f00 	ldrex	r3, [r3]
 800f976:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f97a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800f97e:	677b      	str	r3, [r7, #116]	@ 0x74
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	461a      	mov	r2, r3
 800f986:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f988:	637b      	str	r3, [r7, #52]	@ 0x34
 800f98a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f98c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f98e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f990:	e841 2300 	strex	r3, r2, [r1]
 800f994:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d1e6      	bne.n	800f96a <UART_Start_Receive_IT+0x1be>
 800f99c:	e018      	b.n	800f9d0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	e853 3f00 	ldrex	r3, [r3]
 800f9aa:	613b      	str	r3, [r7, #16]
   return(result);
 800f9ac:	693b      	ldr	r3, [r7, #16]
 800f9ae:	f043 0320 	orr.w	r3, r3, #32
 800f9b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f9bc:	623b      	str	r3, [r7, #32]
 800f9be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9c0:	69f9      	ldr	r1, [r7, #28]
 800f9c2:	6a3a      	ldr	r2, [r7, #32]
 800f9c4:	e841 2300 	strex	r3, r2, [r1]
 800f9c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f9ca:	69bb      	ldr	r3, [r7, #24]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d1e6      	bne.n	800f99e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800f9d0:	2300      	movs	r3, #0
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	378c      	adds	r7, #140	@ 0x8c
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr
 800f9de:	bf00      	nop
 800f9e0:	08010555 	.word	0x08010555
 800f9e4:	080101f5 	.word	0x080101f5
 800f9e8:	0801003d 	.word	0x0801003d
 800f9ec:	0800fe85 	.word	0x0800fe85

0800f9f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b095      	sub	sp, #84	@ 0x54
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa00:	e853 3f00 	ldrex	r3, [r3]
 800fa04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fa06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fa0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	461a      	mov	r2, r3
 800fa14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa16:	643b      	str	r3, [r7, #64]	@ 0x40
 800fa18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fa1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fa1e:	e841 2300 	strex	r3, r2, [r1]
 800fa22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fa24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d1e6      	bne.n	800f9f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	3308      	adds	r3, #8
 800fa30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa32:	6a3b      	ldr	r3, [r7, #32]
 800fa34:	e853 3f00 	ldrex	r3, [r3]
 800fa38:	61fb      	str	r3, [r7, #28]
   return(result);
 800fa3a:	69fa      	ldr	r2, [r7, #28]
 800fa3c:	4b1e      	ldr	r3, [pc, #120]	@ (800fab8 <UART_EndRxTransfer+0xc8>)
 800fa3e:	4013      	ands	r3, r2
 800fa40:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	3308      	adds	r3, #8
 800fa48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fa4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fa4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fa50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa52:	e841 2300 	strex	r3, r2, [r1]
 800fa56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fa58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d1e5      	bne.n	800fa2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa62:	2b01      	cmp	r3, #1
 800fa64:	d118      	bne.n	800fa98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	e853 3f00 	ldrex	r3, [r3]
 800fa72:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	f023 0310 	bic.w	r3, r3, #16
 800fa7a:	647b      	str	r3, [r7, #68]	@ 0x44
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	461a      	mov	r2, r3
 800fa82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa84:	61bb      	str	r3, [r7, #24]
 800fa86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa88:	6979      	ldr	r1, [r7, #20]
 800fa8a:	69ba      	ldr	r2, [r7, #24]
 800fa8c:	e841 2300 	strex	r3, r2, [r1]
 800fa90:	613b      	str	r3, [r7, #16]
   return(result);
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d1e6      	bne.n	800fa66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2220      	movs	r2, #32
 800fa9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2200      	movs	r2, #0
 800faa4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2200      	movs	r2, #0
 800faaa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800faac:	bf00      	nop
 800faae:	3754      	adds	r7, #84	@ 0x54
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr
 800fab8:	effffffe 	.word	0xeffffffe

0800fabc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fac8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2200      	movs	r2, #0
 800face:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2200      	movs	r2, #0
 800fad6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fada:	68f8      	ldr	r0, [r7, #12]
 800fadc:	f7fe ff3a 	bl	800e954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fae0:	bf00      	nop
 800fae2:	3710      	adds	r7, #16
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fae8:	b480      	push	{r7}
 800faea:	b08f      	sub	sp, #60	@ 0x3c
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800faf6:	2b21      	cmp	r3, #33	@ 0x21
 800faf8:	d14c      	bne.n	800fb94 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d132      	bne.n	800fb6c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb0c:	6a3b      	ldr	r3, [r7, #32]
 800fb0e:	e853 3f00 	ldrex	r3, [r3]
 800fb12:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb14:	69fb      	ldr	r3, [r7, #28]
 800fb16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fb1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	461a      	mov	r2, r3
 800fb22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fb26:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fb2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb2c:	e841 2300 	strex	r3, r2, [r1]
 800fb30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fb32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d1e6      	bne.n	800fb06 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	e853 3f00 	ldrex	r3, [r3]
 800fb44:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb4c:	633b      	str	r3, [r7, #48]	@ 0x30
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	461a      	mov	r2, r3
 800fb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb56:	61bb      	str	r3, [r7, #24]
 800fb58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb5a:	6979      	ldr	r1, [r7, #20]
 800fb5c:	69ba      	ldr	r2, [r7, #24]
 800fb5e:	e841 2300 	strex	r3, r2, [r1]
 800fb62:	613b      	str	r3, [r7, #16]
   return(result);
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d1e6      	bne.n	800fb38 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800fb6a:	e013      	b.n	800fb94 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb70:	781a      	ldrb	r2, [r3, #0]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb7c:	1c5a      	adds	r2, r3, #1
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	3b01      	subs	r3, #1
 800fb8c:	b29a      	uxth	r2, r3
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800fb94:	bf00      	nop
 800fb96:	373c      	adds	r7, #60	@ 0x3c
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	4770      	bx	lr

0800fba0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fba0:	b480      	push	{r7}
 800fba2:	b091      	sub	sp, #68	@ 0x44
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fbae:	2b21      	cmp	r3, #33	@ 0x21
 800fbb0:	d151      	bne.n	800fc56 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d132      	bne.n	800fc24 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbc6:	e853 3f00 	ldrex	r3, [r3]
 800fbca:	623b      	str	r3, [r7, #32]
   return(result);
 800fbcc:	6a3b      	ldr	r3, [r7, #32]
 800fbce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fbd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	461a      	mov	r2, r3
 800fbda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbdc:	633b      	str	r3, [r7, #48]	@ 0x30
 800fbde:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fbe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbe4:	e841 2300 	strex	r3, r2, [r1]
 800fbe8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d1e6      	bne.n	800fbbe <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	e853 3f00 	ldrex	r3, [r3]
 800fbfc:	60fb      	str	r3, [r7, #12]
   return(result);
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc04:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	461a      	mov	r2, r3
 800fc0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc0e:	61fb      	str	r3, [r7, #28]
 800fc10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc12:	69b9      	ldr	r1, [r7, #24]
 800fc14:	69fa      	ldr	r2, [r7, #28]
 800fc16:	e841 2300 	strex	r3, r2, [r1]
 800fc1a:	617b      	str	r3, [r7, #20]
   return(result);
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d1e6      	bne.n	800fbf0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800fc22:	e018      	b.n	800fc56 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc28:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800fc2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc2c:	881b      	ldrh	r3, [r3, #0]
 800fc2e:	461a      	mov	r2, r3
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fc38:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc3e:	1c9a      	adds	r2, r3, #2
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	3b01      	subs	r3, #1
 800fc4e:	b29a      	uxth	r2, r3
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800fc56:	bf00      	nop
 800fc58:	3744      	adds	r7, #68	@ 0x44
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	4770      	bx	lr

0800fc62 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fc62:	b480      	push	{r7}
 800fc64:	b091      	sub	sp, #68	@ 0x44
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fc70:	2b21      	cmp	r3, #33	@ 0x21
 800fc72:	d160      	bne.n	800fd36 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fc7a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800fc7c:	e057      	b.n	800fd2e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d133      	bne.n	800fcf2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	3308      	adds	r3, #8
 800fc90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc94:	e853 3f00 	ldrex	r3, [r3]
 800fc98:	623b      	str	r3, [r7, #32]
   return(result);
 800fc9a:	6a3b      	ldr	r3, [r7, #32]
 800fc9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800fca0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	3308      	adds	r3, #8
 800fca8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fcaa:	633a      	str	r2, [r7, #48]	@ 0x30
 800fcac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fcb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fcb2:	e841 2300 	strex	r3, r2, [r1]
 800fcb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fcb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d1e5      	bne.n	800fc8a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	e853 3f00 	ldrex	r3, [r3]
 800fcca:	60fb      	str	r3, [r7, #12]
   return(result);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcd2:	637b      	str	r3, [r7, #52]	@ 0x34
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	461a      	mov	r2, r3
 800fcda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcdc:	61fb      	str	r3, [r7, #28]
 800fcde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce0:	69b9      	ldr	r1, [r7, #24]
 800fce2:	69fa      	ldr	r2, [r7, #28]
 800fce4:	e841 2300 	strex	r3, r2, [r1]
 800fce8:	617b      	str	r3, [r7, #20]
   return(result);
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d1e6      	bne.n	800fcbe <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800fcf0:	e021      	b.n	800fd36 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	69db      	ldr	r3, [r3, #28]
 800fcf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d013      	beq.n	800fd28 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd04:	781a      	ldrb	r2, [r3, #0]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd10:	1c5a      	adds	r2, r3, #1
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	3b01      	subs	r3, #1
 800fd20:	b29a      	uxth	r2, r3
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800fd28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fd2a:	3b01      	subs	r3, #1
 800fd2c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800fd2e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d1a4      	bne.n	800fc7e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800fd34:	e7ff      	b.n	800fd36 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800fd36:	bf00      	nop
 800fd38:	3744      	adds	r7, #68	@ 0x44
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd40:	4770      	bx	lr

0800fd42 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fd42:	b480      	push	{r7}
 800fd44:	b091      	sub	sp, #68	@ 0x44
 800fd46:	af00      	add	r7, sp, #0
 800fd48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fd50:	2b21      	cmp	r3, #33	@ 0x21
 800fd52:	d165      	bne.n	800fe20 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fd5a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800fd5c:	e05c      	b.n	800fe18 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d133      	bne.n	800fdd2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	3308      	adds	r3, #8
 800fd70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd72:	6a3b      	ldr	r3, [r7, #32]
 800fd74:	e853 3f00 	ldrex	r3, [r3]
 800fd78:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd7a:	69fb      	ldr	r3, [r7, #28]
 800fd7c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800fd80:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	3308      	adds	r3, #8
 800fd88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fd8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fd8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fd90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fd92:	e841 2300 	strex	r3, r2, [r1]
 800fd96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d1e5      	bne.n	800fd6a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	e853 3f00 	ldrex	r3, [r3]
 800fdaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fdb2:	633b      	str	r3, [r7, #48]	@ 0x30
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	461a      	mov	r2, r3
 800fdba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdbc:	61bb      	str	r3, [r7, #24]
 800fdbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdc0:	6979      	ldr	r1, [r7, #20]
 800fdc2:	69ba      	ldr	r2, [r7, #24]
 800fdc4:	e841 2300 	strex	r3, r2, [r1]
 800fdc8:	613b      	str	r3, [r7, #16]
   return(result);
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d1e6      	bne.n	800fd9e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800fdd0:	e026      	b.n	800fe20 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	69db      	ldr	r3, [r3, #28]
 800fdd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d018      	beq.n	800fe12 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fde4:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800fde6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fde8:	881b      	ldrh	r3, [r3, #0]
 800fdea:	461a      	mov	r2, r3
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fdf4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdfa:	1c9a      	adds	r2, r3, #2
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	3b01      	subs	r3, #1
 800fe0a:	b29a      	uxth	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800fe12:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fe14:	3b01      	subs	r3, #1
 800fe16:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800fe18:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d19f      	bne.n	800fd5e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800fe1e:	e7ff      	b.n	800fe20 <UART_TxISR_16BIT_FIFOEN+0xde>
 800fe20:	bf00      	nop
 800fe22:	3744      	adds	r7, #68	@ 0x44
 800fe24:	46bd      	mov	sp, r7
 800fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2a:	4770      	bx	lr

0800fe2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b088      	sub	sp, #32
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	e853 3f00 	ldrex	r3, [r3]
 800fe40:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe48:	61fb      	str	r3, [r7, #28]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	461a      	mov	r2, r3
 800fe50:	69fb      	ldr	r3, [r7, #28]
 800fe52:	61bb      	str	r3, [r7, #24]
 800fe54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe56:	6979      	ldr	r1, [r7, #20]
 800fe58:	69ba      	ldr	r2, [r7, #24]
 800fe5a:	e841 2300 	strex	r3, r2, [r1]
 800fe5e:	613b      	str	r3, [r7, #16]
   return(result);
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d1e6      	bne.n	800fe34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2220      	movs	r2, #32
 800fe6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2200      	movs	r2, #0
 800fe72:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f7fe fd59 	bl	800e92c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe7a:	bf00      	nop
 800fe7c:	3720      	adds	r7, #32
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}
	...

0800fe84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b09c      	sub	sp, #112	@ 0x70
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fe92:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fe9c:	2b22      	cmp	r3, #34	@ 0x22
 800fe9e:	f040 80be 	bne.w	801001e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fea8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800feac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800feb0:	b2d9      	uxtb	r1, r3
 800feb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800feb6:	b2da      	uxtb	r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800febc:	400a      	ands	r2, r1
 800febe:	b2d2      	uxtb	r2, r2
 800fec0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fec6:	1c5a      	adds	r2, r3, #1
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	3b01      	subs	r3, #1
 800fed6:	b29a      	uxth	r2, r3
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	f040 80a1 	bne.w	801002e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fef4:	e853 3f00 	ldrex	r3, [r3]
 800fef8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fefa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fefc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ff00:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	461a      	mov	r2, r3
 800ff08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ff0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ff0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ff10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ff12:	e841 2300 	strex	r3, r2, [r1]
 800ff16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ff18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d1e6      	bne.n	800feec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	3308      	adds	r3, #8
 800ff24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff28:	e853 3f00 	ldrex	r3, [r3]
 800ff2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ff2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff30:	f023 0301 	bic.w	r3, r3, #1
 800ff34:	667b      	str	r3, [r7, #100]	@ 0x64
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	3308      	adds	r3, #8
 800ff3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ff3e:	647a      	str	r2, [r7, #68]	@ 0x44
 800ff40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ff44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ff46:	e841 2300 	strex	r3, r2, [r1]
 800ff4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ff4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d1e5      	bne.n	800ff1e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2220      	movs	r2, #32
 800ff56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2200      	movs	r2, #0
 800ff64:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	4a33      	ldr	r2, [pc, #204]	@ (8010038 <UART_RxISR_8BIT+0x1b4>)
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d01f      	beq.n	800ffb0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d018      	beq.n	800ffb0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff86:	e853 3f00 	ldrex	r3, [r3]
 800ff8a:	623b      	str	r3, [r7, #32]
   return(result);
 800ff8c:	6a3b      	ldr	r3, [r7, #32]
 800ff8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ff92:	663b      	str	r3, [r7, #96]	@ 0x60
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	461a      	mov	r2, r3
 800ff9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ff9c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ff9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffa0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ffa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ffa4:	e841 2300 	strex	r3, r2, [r1]
 800ffa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ffaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d1e6      	bne.n	800ff7e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d12e      	bne.n	8010016 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	e853 3f00 	ldrex	r3, [r3]
 800ffca:	60fb      	str	r3, [r7, #12]
   return(result);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	f023 0310 	bic.w	r3, r3, #16
 800ffd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	461a      	mov	r2, r3
 800ffda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffdc:	61fb      	str	r3, [r7, #28]
 800ffde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffe0:	69b9      	ldr	r1, [r7, #24]
 800ffe2:	69fa      	ldr	r2, [r7, #28]
 800ffe4:	e841 2300 	strex	r3, r2, [r1]
 800ffe8:	617b      	str	r3, [r7, #20]
   return(result);
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d1e6      	bne.n	800ffbe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	69db      	ldr	r3, [r3, #28]
 800fff6:	f003 0310 	and.w	r3, r3, #16
 800fffa:	2b10      	cmp	r3, #16
 800fffc:	d103      	bne.n	8010006 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	2210      	movs	r2, #16
 8010004:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801000c:	4619      	mov	r1, r3
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f7f1 fc46 	bl	80018a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010014:	e00b      	b.n	801002e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f7fe fc92 	bl	800e940 <HAL_UART_RxCpltCallback>
}
 801001c:	e007      	b.n	801002e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	699a      	ldr	r2, [r3, #24]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	f042 0208 	orr.w	r2, r2, #8
 801002c:	619a      	str	r2, [r3, #24]
}
 801002e:	bf00      	nop
 8010030:	3770      	adds	r7, #112	@ 0x70
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}
 8010036:	bf00      	nop
 8010038:	58000c00 	.word	0x58000c00

0801003c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b09c      	sub	sp, #112	@ 0x70
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801004a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010054:	2b22      	cmp	r3, #34	@ 0x22
 8010056:	f040 80be 	bne.w	80101d6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010060:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010068:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801006a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801006e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010072:	4013      	ands	r3, r2
 8010074:	b29a      	uxth	r2, r3
 8010076:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010078:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801007e:	1c9a      	adds	r2, r3, #2
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801008a:	b29b      	uxth	r3, r3
 801008c:	3b01      	subs	r3, #1
 801008e:	b29a      	uxth	r2, r3
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801009c:	b29b      	uxth	r3, r3
 801009e:	2b00      	cmp	r3, #0
 80100a0:	f040 80a1 	bne.w	80101e6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80100ac:	e853 3f00 	ldrex	r3, [r3]
 80100b0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80100b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80100b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80100b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	461a      	mov	r2, r3
 80100c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80100c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80100c4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80100c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80100ca:	e841 2300 	strex	r3, r2, [r1]
 80100ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80100d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d1e6      	bne.n	80100a4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	3308      	adds	r3, #8
 80100dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100e0:	e853 3f00 	ldrex	r3, [r3]
 80100e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80100e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100e8:	f023 0301 	bic.w	r3, r3, #1
 80100ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	3308      	adds	r3, #8
 80100f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80100f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80100f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80100fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80100fe:	e841 2300 	strex	r3, r2, [r1]
 8010102:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010106:	2b00      	cmp	r3, #0
 8010108:	d1e5      	bne.n	80100d6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2220      	movs	r2, #32
 801010e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2200      	movs	r2, #0
 8010116:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2200      	movs	r2, #0
 801011c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	4a33      	ldr	r2, [pc, #204]	@ (80101f0 <UART_RxISR_16BIT+0x1b4>)
 8010124:	4293      	cmp	r3, r2
 8010126:	d01f      	beq.n	8010168 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010132:	2b00      	cmp	r3, #0
 8010134:	d018      	beq.n	8010168 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801013c:	6a3b      	ldr	r3, [r7, #32]
 801013e:	e853 3f00 	ldrex	r3, [r3]
 8010142:	61fb      	str	r3, [r7, #28]
   return(result);
 8010144:	69fb      	ldr	r3, [r7, #28]
 8010146:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801014a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	461a      	mov	r2, r3
 8010152:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010156:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801015a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801015c:	e841 2300 	strex	r3, r2, [r1]
 8010160:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010164:	2b00      	cmp	r3, #0
 8010166:	d1e6      	bne.n	8010136 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801016c:	2b01      	cmp	r3, #1
 801016e:	d12e      	bne.n	80101ce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2200      	movs	r2, #0
 8010174:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	e853 3f00 	ldrex	r3, [r3]
 8010182:	60bb      	str	r3, [r7, #8]
   return(result);
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	f023 0310 	bic.w	r3, r3, #16
 801018a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	461a      	mov	r2, r3
 8010192:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010194:	61bb      	str	r3, [r7, #24]
 8010196:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010198:	6979      	ldr	r1, [r7, #20]
 801019a:	69ba      	ldr	r2, [r7, #24]
 801019c:	e841 2300 	strex	r3, r2, [r1]
 80101a0:	613b      	str	r3, [r7, #16]
   return(result);
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d1e6      	bne.n	8010176 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	69db      	ldr	r3, [r3, #28]
 80101ae:	f003 0310 	and.w	r3, r3, #16
 80101b2:	2b10      	cmp	r3, #16
 80101b4:	d103      	bne.n	80101be <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2210      	movs	r2, #16
 80101bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80101c4:	4619      	mov	r1, r3
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f7f1 fb6a 	bl	80018a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80101cc:	e00b      	b.n	80101e6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f7fe fbb6 	bl	800e940 <HAL_UART_RxCpltCallback>
}
 80101d4:	e007      	b.n	80101e6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	699a      	ldr	r2, [r3, #24]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	f042 0208 	orr.w	r2, r2, #8
 80101e4:	619a      	str	r2, [r3, #24]
}
 80101e6:	bf00      	nop
 80101e8:	3770      	adds	r7, #112	@ 0x70
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	58000c00 	.word	0x58000c00

080101f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b0ac      	sub	sp, #176	@ 0xb0
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010202:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	69db      	ldr	r3, [r3, #28]
 801020c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	689b      	ldr	r3, [r3, #8]
 8010220:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801022a:	2b22      	cmp	r3, #34	@ 0x22
 801022c:	f040 8180 	bne.w	8010530 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010236:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801023a:	e123      	b.n	8010484 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010242:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010246:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801024a:	b2d9      	uxtb	r1, r3
 801024c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8010250:	b2da      	uxtb	r2, r3
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010256:	400a      	ands	r2, r1
 8010258:	b2d2      	uxtb	r2, r2
 801025a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010260:	1c5a      	adds	r2, r3, #1
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801026c:	b29b      	uxth	r3, r3
 801026e:	3b01      	subs	r3, #1
 8010270:	b29a      	uxth	r2, r3
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	69db      	ldr	r3, [r3, #28]
 801027e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010286:	f003 0307 	and.w	r3, r3, #7
 801028a:	2b00      	cmp	r3, #0
 801028c:	d053      	beq.n	8010336 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801028e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010292:	f003 0301 	and.w	r3, r3, #1
 8010296:	2b00      	cmp	r3, #0
 8010298:	d011      	beq.n	80102be <UART_RxISR_8BIT_FIFOEN+0xca>
 801029a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801029e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d00b      	beq.n	80102be <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	2201      	movs	r2, #1
 80102ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102b4:	f043 0201 	orr.w	r2, r3, #1
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80102c2:	f003 0302 	and.w	r3, r3, #2
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d011      	beq.n	80102ee <UART_RxISR_8BIT_FIFOEN+0xfa>
 80102ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80102ce:	f003 0301 	and.w	r3, r3, #1
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d00b      	beq.n	80102ee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	2202      	movs	r2, #2
 80102dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102e4:	f043 0204 	orr.w	r2, r3, #4
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80102f2:	f003 0304 	and.w	r3, r3, #4
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d011      	beq.n	801031e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80102fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80102fe:	f003 0301 	and.w	r3, r3, #1
 8010302:	2b00      	cmp	r3, #0
 8010304:	d00b      	beq.n	801031e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	2204      	movs	r2, #4
 801030c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010314:	f043 0202 	orr.w	r2, r3, #2
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010324:	2b00      	cmp	r3, #0
 8010326:	d006      	beq.n	8010336 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f7fe fb13 	bl	800e954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	2200      	movs	r2, #0
 8010332:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801033c:	b29b      	uxth	r3, r3
 801033e:	2b00      	cmp	r3, #0
 8010340:	f040 80a0 	bne.w	8010484 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801034a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801034c:	e853 3f00 	ldrex	r3, [r3]
 8010350:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8010352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	461a      	mov	r2, r3
 8010362:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010366:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010368:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801036a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801036c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801036e:	e841 2300 	strex	r3, r2, [r1]
 8010372:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8010374:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010376:	2b00      	cmp	r3, #0
 8010378:	d1e4      	bne.n	8010344 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	3308      	adds	r3, #8
 8010380:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010382:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010384:	e853 3f00 	ldrex	r3, [r3]
 8010388:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801038a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801038c:	4b6e      	ldr	r3, [pc, #440]	@ (8010548 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801038e:	4013      	ands	r3, r2
 8010390:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	3308      	adds	r3, #8
 801039a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801039e:	66ba      	str	r2, [r7, #104]	@ 0x68
 80103a0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103a2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80103a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80103a6:	e841 2300 	strex	r3, r2, [r1]
 80103aa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80103ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d1e3      	bne.n	801037a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2220      	movs	r2, #32
 80103b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2200      	movs	r2, #0
 80103be:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2200      	movs	r2, #0
 80103c4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	4a60      	ldr	r2, [pc, #384]	@ (801054c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80103cc:	4293      	cmp	r3, r2
 80103ce:	d021      	beq.n	8010414 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d01a      	beq.n	8010414 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80103e6:	e853 3f00 	ldrex	r3, [r3]
 80103ea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80103ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80103ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80103f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	461a      	mov	r2, r3
 80103fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010400:	657b      	str	r3, [r7, #84]	@ 0x54
 8010402:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010404:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010406:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010408:	e841 2300 	strex	r3, r2, [r1]
 801040c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801040e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010410:	2b00      	cmp	r3, #0
 8010412:	d1e4      	bne.n	80103de <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010418:	2b01      	cmp	r3, #1
 801041a:	d130      	bne.n	801047e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2200      	movs	r2, #0
 8010420:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801042a:	e853 3f00 	ldrex	r3, [r3]
 801042e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010432:	f023 0310 	bic.w	r3, r3, #16
 8010436:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	461a      	mov	r2, r3
 8010440:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010444:	643b      	str	r3, [r7, #64]	@ 0x40
 8010446:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010448:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801044a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801044c:	e841 2300 	strex	r3, r2, [r1]
 8010450:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010454:	2b00      	cmp	r3, #0
 8010456:	d1e4      	bne.n	8010422 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	69db      	ldr	r3, [r3, #28]
 801045e:	f003 0310 	and.w	r3, r3, #16
 8010462:	2b10      	cmp	r3, #16
 8010464:	d103      	bne.n	801046e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	2210      	movs	r2, #16
 801046c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010474:	4619      	mov	r1, r3
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f7f1 fa12 	bl	80018a0 <HAL_UARTEx_RxEventCallback>
 801047c:	e002      	b.n	8010484 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f7fe fa5e 	bl	800e940 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010484:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8010488:	2b00      	cmp	r3, #0
 801048a:	d006      	beq.n	801049a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801048c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010490:	f003 0320 	and.w	r3, r3, #32
 8010494:	2b00      	cmp	r3, #0
 8010496:	f47f aed1 	bne.w	801023c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80104a0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80104a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d049      	beq.n	8010540 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80104b2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d242      	bcs.n	8010540 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	3308      	adds	r3, #8
 80104c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104c2:	6a3b      	ldr	r3, [r7, #32]
 80104c4:	e853 3f00 	ldrex	r3, [r3]
 80104c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80104d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	3308      	adds	r3, #8
 80104da:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80104de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80104e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80104e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80104e6:	e841 2300 	strex	r3, r2, [r1]
 80104ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80104ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d1e3      	bne.n	80104ba <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	4a16      	ldr	r2, [pc, #88]	@ (8010550 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80104f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	e853 3f00 	ldrex	r3, [r3]
 8010504:	60bb      	str	r3, [r7, #8]
   return(result);
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	f043 0320 	orr.w	r3, r3, #32
 801050c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	461a      	mov	r2, r3
 8010516:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801051a:	61bb      	str	r3, [r7, #24]
 801051c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801051e:	6979      	ldr	r1, [r7, #20]
 8010520:	69ba      	ldr	r2, [r7, #24]
 8010522:	e841 2300 	strex	r3, r2, [r1]
 8010526:	613b      	str	r3, [r7, #16]
   return(result);
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d1e4      	bne.n	80104f8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801052e:	e007      	b.n	8010540 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	699a      	ldr	r2, [r3, #24]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	f042 0208 	orr.w	r2, r2, #8
 801053e:	619a      	str	r2, [r3, #24]
}
 8010540:	bf00      	nop
 8010542:	37b0      	adds	r7, #176	@ 0xb0
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}
 8010548:	effffffe 	.word	0xeffffffe
 801054c:	58000c00 	.word	0x58000c00
 8010550:	0800fe85 	.word	0x0800fe85

08010554 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b0ae      	sub	sp, #184	@ 0xb8
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010562:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	69db      	ldr	r3, [r3, #28]
 801056c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	689b      	ldr	r3, [r3, #8]
 8010580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801058a:	2b22      	cmp	r3, #34	@ 0x22
 801058c:	f040 8184 	bne.w	8010898 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010596:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801059a:	e127      	b.n	80107ec <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105a2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80105ae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80105b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80105b6:	4013      	ands	r3, r2
 80105b8:	b29a      	uxth	r2, r3
 80105ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80105be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105c4:	1c9a      	adds	r2, r3, #2
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80105d0:	b29b      	uxth	r3, r3
 80105d2:	3b01      	subs	r3, #1
 80105d4:	b29a      	uxth	r2, r3
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	69db      	ldr	r3, [r3, #28]
 80105e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80105e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80105ea:	f003 0307 	and.w	r3, r3, #7
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d053      	beq.n	801069a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80105f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80105f6:	f003 0301 	and.w	r3, r3, #1
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d011      	beq.n	8010622 <UART_RxISR_16BIT_FIFOEN+0xce>
 80105fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010606:	2b00      	cmp	r3, #0
 8010608:	d00b      	beq.n	8010622 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	2201      	movs	r2, #1
 8010610:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010618:	f043 0201 	orr.w	r2, r3, #1
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010622:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010626:	f003 0302 	and.w	r3, r3, #2
 801062a:	2b00      	cmp	r3, #0
 801062c:	d011      	beq.n	8010652 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801062e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010632:	f003 0301 	and.w	r3, r3, #1
 8010636:	2b00      	cmp	r3, #0
 8010638:	d00b      	beq.n	8010652 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	2202      	movs	r2, #2
 8010640:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010648:	f043 0204 	orr.w	r2, r3, #4
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010652:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010656:	f003 0304 	and.w	r3, r3, #4
 801065a:	2b00      	cmp	r3, #0
 801065c:	d011      	beq.n	8010682 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801065e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010662:	f003 0301 	and.w	r3, r3, #1
 8010666:	2b00      	cmp	r3, #0
 8010668:	d00b      	beq.n	8010682 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	2204      	movs	r2, #4
 8010670:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010678:	f043 0202 	orr.w	r2, r3, #2
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010688:	2b00      	cmp	r3, #0
 801068a:	d006      	beq.n	801069a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f7fe f961 	bl	800e954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2200      	movs	r2, #0
 8010696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80106a0:	b29b      	uxth	r3, r3
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	f040 80a2 	bne.w	80107ec <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80106b0:	e853 3f00 	ldrex	r3, [r3]
 80106b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80106b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80106b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80106bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	461a      	mov	r2, r3
 80106c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80106ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80106ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80106d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80106d6:	e841 2300 	strex	r3, r2, [r1]
 80106da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80106dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d1e2      	bne.n	80106a8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	3308      	adds	r3, #8
 80106e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80106ec:	e853 3f00 	ldrex	r3, [r3]
 80106f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80106f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80106f4:	4b6e      	ldr	r3, [pc, #440]	@ (80108b0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80106f6:	4013      	ands	r3, r2
 80106f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	3308      	adds	r3, #8
 8010702:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8010706:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010708:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801070a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801070c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801070e:	e841 2300 	strex	r3, r2, [r1]
 8010712:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010714:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010716:	2b00      	cmp	r3, #0
 8010718:	d1e3      	bne.n	80106e2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2220      	movs	r2, #32
 801071e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2200      	movs	r2, #0
 8010726:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2200      	movs	r2, #0
 801072c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	4a60      	ldr	r2, [pc, #384]	@ (80108b4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010734:	4293      	cmp	r3, r2
 8010736:	d021      	beq.n	801077c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	685b      	ldr	r3, [r3, #4]
 801073e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010742:	2b00      	cmp	r3, #0
 8010744:	d01a      	beq.n	801077c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801074c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801074e:	e853 3f00 	ldrex	r3, [r3]
 8010752:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010756:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801075a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	461a      	mov	r2, r3
 8010764:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010768:	65bb      	str	r3, [r7, #88]	@ 0x58
 801076a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801076c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801076e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010770:	e841 2300 	strex	r3, r2, [r1]
 8010774:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010778:	2b00      	cmp	r3, #0
 801077a:	d1e4      	bne.n	8010746 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010780:	2b01      	cmp	r3, #1
 8010782:	d130      	bne.n	80107e6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2200      	movs	r2, #0
 8010788:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010792:	e853 3f00 	ldrex	r3, [r3]
 8010796:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801079a:	f023 0310 	bic.w	r3, r3, #16
 801079e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	461a      	mov	r2, r3
 80107a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80107ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80107ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80107b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80107b4:	e841 2300 	strex	r3, r2, [r1]
 80107b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80107ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d1e4      	bne.n	801078a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	69db      	ldr	r3, [r3, #28]
 80107c6:	f003 0310 	and.w	r3, r3, #16
 80107ca:	2b10      	cmp	r3, #16
 80107cc:	d103      	bne.n	80107d6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	2210      	movs	r2, #16
 80107d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80107dc:	4619      	mov	r1, r3
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f7f1 f85e 	bl	80018a0 <HAL_UARTEx_RxEventCallback>
 80107e4:	e002      	b.n	80107ec <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f7fe f8aa 	bl	800e940 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80107ec:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d006      	beq.n	8010802 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80107f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80107f8:	f003 0320 	and.w	r3, r3, #32
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	f47f aecd 	bne.w	801059c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010808:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801080c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8010810:	2b00      	cmp	r3, #0
 8010812:	d049      	beq.n	80108a8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801081a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801081e:	429a      	cmp	r2, r3
 8010820:	d242      	bcs.n	80108a8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	3308      	adds	r3, #8
 8010828:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801082c:	e853 3f00 	ldrex	r3, [r3]
 8010830:	623b      	str	r3, [r7, #32]
   return(result);
 8010832:	6a3b      	ldr	r3, [r7, #32]
 8010834:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010838:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	3308      	adds	r3, #8
 8010842:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010846:	633a      	str	r2, [r7, #48]	@ 0x30
 8010848:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801084a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801084c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801084e:	e841 2300 	strex	r3, r2, [r1]
 8010852:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010856:	2b00      	cmp	r3, #0
 8010858:	d1e3      	bne.n	8010822 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	4a16      	ldr	r2, [pc, #88]	@ (80108b8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801085e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	e853 3f00 	ldrex	r3, [r3]
 801086c:	60fb      	str	r3, [r7, #12]
   return(result);
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	f043 0320 	orr.w	r3, r3, #32
 8010874:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	461a      	mov	r2, r3
 801087e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010882:	61fb      	str	r3, [r7, #28]
 8010884:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010886:	69b9      	ldr	r1, [r7, #24]
 8010888:	69fa      	ldr	r2, [r7, #28]
 801088a:	e841 2300 	strex	r3, r2, [r1]
 801088e:	617b      	str	r3, [r7, #20]
   return(result);
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d1e4      	bne.n	8010860 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010896:	e007      	b.n	80108a8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	699a      	ldr	r2, [r3, #24]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f042 0208 	orr.w	r2, r2, #8
 80108a6:	619a      	str	r2, [r3, #24]
}
 80108a8:	bf00      	nop
 80108aa:	37b8      	adds	r7, #184	@ 0xb8
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}
 80108b0:	effffffe 	.word	0xeffffffe
 80108b4:	58000c00 	.word	0x58000c00
 80108b8:	0801003d 	.word	0x0801003d

080108bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80108bc:	b480      	push	{r7}
 80108be:	b083      	sub	sp, #12
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80108c4:	bf00      	nop
 80108c6:	370c      	adds	r7, #12
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr

080108d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80108d0:	b480      	push	{r7}
 80108d2:	b083      	sub	sp, #12
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80108d8:	bf00      	nop
 80108da:	370c      	adds	r7, #12
 80108dc:	46bd      	mov	sp, r7
 80108de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e2:	4770      	bx	lr

080108e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80108e4:	b480      	push	{r7}
 80108e6:	b083      	sub	sp, #12
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80108ec:	bf00      	nop
 80108ee:	370c      	adds	r7, #12
 80108f0:	46bd      	mov	sp, r7
 80108f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f6:	4770      	bx	lr

080108f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b085      	sub	sp, #20
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010906:	2b01      	cmp	r3, #1
 8010908:	d101      	bne.n	801090e <HAL_UARTEx_DisableFifoMode+0x16>
 801090a:	2302      	movs	r3, #2
 801090c:	e027      	b.n	801095e <HAL_UARTEx_DisableFifoMode+0x66>
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2201      	movs	r2, #1
 8010912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2224      	movs	r2, #36	@ 0x24
 801091a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	681a      	ldr	r2, [r3, #0]
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	f022 0201 	bic.w	r2, r2, #1
 8010934:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801093c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2200      	movs	r2, #0
 8010942:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	68fa      	ldr	r2, [r7, #12]
 801094a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2220      	movs	r2, #32
 8010950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2200      	movs	r2, #0
 8010958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801095c:	2300      	movs	r3, #0
}
 801095e:	4618      	mov	r0, r3
 8010960:	3714      	adds	r7, #20
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr

0801096a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801096a:	b580      	push	{r7, lr}
 801096c:	b084      	sub	sp, #16
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
 8010972:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801097a:	2b01      	cmp	r3, #1
 801097c:	d101      	bne.n	8010982 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801097e:	2302      	movs	r3, #2
 8010980:	e02d      	b.n	80109de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2201      	movs	r2, #1
 8010986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2224      	movs	r2, #36	@ 0x24
 801098e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	681a      	ldr	r2, [r3, #0]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f022 0201 	bic.w	r2, r2, #1
 80109a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	689b      	ldr	r3, [r3, #8]
 80109b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	683a      	ldr	r2, [r7, #0]
 80109ba:	430a      	orrs	r2, r1
 80109bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f000 f8a0 	bl	8010b04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	68fa      	ldr	r2, [r7, #12]
 80109ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2220      	movs	r2, #32
 80109d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2200      	movs	r2, #0
 80109d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80109dc:	2300      	movs	r3, #0
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3710      	adds	r7, #16
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}

080109e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80109e6:	b580      	push	{r7, lr}
 80109e8:	b084      	sub	sp, #16
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	6078      	str	r0, [r7, #4]
 80109ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	d101      	bne.n	80109fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80109fa:	2302      	movs	r3, #2
 80109fc:	e02d      	b.n	8010a5a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2201      	movs	r2, #1
 8010a02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2224      	movs	r2, #36	@ 0x24
 8010a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	681a      	ldr	r2, [r3, #0]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	f022 0201 	bic.w	r2, r2, #1
 8010a24:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	689b      	ldr	r3, [r3, #8]
 8010a2c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	683a      	ldr	r2, [r7, #0]
 8010a36:	430a      	orrs	r2, r1
 8010a38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 f862 	bl	8010b04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	68fa      	ldr	r2, [r7, #12]
 8010a46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2220      	movs	r2, #32
 8010a4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2200      	movs	r2, #0
 8010a54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010a58:	2300      	movs	r3, #0
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3710      	adds	r7, #16
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}

08010a62 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010a62:	b580      	push	{r7, lr}
 8010a64:	b08c      	sub	sp, #48	@ 0x30
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	60f8      	str	r0, [r7, #12]
 8010a6a:	60b9      	str	r1, [r7, #8]
 8010a6c:	4613      	mov	r3, r2
 8010a6e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8010a70:	2300      	movs	r3, #0
 8010a72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a7c:	2b20      	cmp	r3, #32
 8010a7e:	d13b      	bne.n	8010af8 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d002      	beq.n	8010a8c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8010a86:	88fb      	ldrh	r3, [r7, #6]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d101      	bne.n	8010a90 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	e034      	b.n	8010afa <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2201      	movs	r2, #1
 8010a94:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	2200      	movs	r2, #0
 8010a9a:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8010a9c:	88fb      	ldrh	r3, [r7, #6]
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	68b9      	ldr	r1, [r7, #8]
 8010aa2:	68f8      	ldr	r0, [r7, #12]
 8010aa4:	f7fe fe82 	bl	800f7ac <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d11d      	bne.n	8010aec <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	2210      	movs	r2, #16
 8010ab6:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010abe:	69bb      	ldr	r3, [r7, #24]
 8010ac0:	e853 3f00 	ldrex	r3, [r3]
 8010ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	f043 0310 	orr.w	r3, r3, #16
 8010acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8010ad8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ada:	6a39      	ldr	r1, [r7, #32]
 8010adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ade:	e841 2300 	strex	r3, r2, [r1]
 8010ae2:	61fb      	str	r3, [r7, #28]
   return(result);
 8010ae4:	69fb      	ldr	r3, [r7, #28]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d1e6      	bne.n	8010ab8 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8010aea:	e002      	b.n	8010af2 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8010aec:	2301      	movs	r3, #1
 8010aee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8010af2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010af6:	e000      	b.n	8010afa <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8010af8:	2302      	movs	r3, #2
  }
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3730      	adds	r7, #48	@ 0x30
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
	...

08010b04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010b04:	b480      	push	{r7}
 8010b06:	b085      	sub	sp, #20
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d108      	bne.n	8010b26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2201      	movs	r2, #1
 8010b18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2201      	movs	r2, #1
 8010b20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010b24:	e031      	b.n	8010b8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010b26:	2310      	movs	r3, #16
 8010b28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010b2a:	2310      	movs	r3, #16
 8010b2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	689b      	ldr	r3, [r3, #8]
 8010b34:	0e5b      	lsrs	r3, r3, #25
 8010b36:	b2db      	uxtb	r3, r3
 8010b38:	f003 0307 	and.w	r3, r3, #7
 8010b3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	689b      	ldr	r3, [r3, #8]
 8010b44:	0f5b      	lsrs	r3, r3, #29
 8010b46:	b2db      	uxtb	r3, r3
 8010b48:	f003 0307 	and.w	r3, r3, #7
 8010b4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b4e:	7bbb      	ldrb	r3, [r7, #14]
 8010b50:	7b3a      	ldrb	r2, [r7, #12]
 8010b52:	4911      	ldr	r1, [pc, #68]	@ (8010b98 <UARTEx_SetNbDataToProcess+0x94>)
 8010b54:	5c8a      	ldrb	r2, [r1, r2]
 8010b56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010b5a:	7b3a      	ldrb	r2, [r7, #12]
 8010b5c:	490f      	ldr	r1, [pc, #60]	@ (8010b9c <UARTEx_SetNbDataToProcess+0x98>)
 8010b5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b60:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b64:	b29a      	uxth	r2, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b6c:	7bfb      	ldrb	r3, [r7, #15]
 8010b6e:	7b7a      	ldrb	r2, [r7, #13]
 8010b70:	4909      	ldr	r1, [pc, #36]	@ (8010b98 <UARTEx_SetNbDataToProcess+0x94>)
 8010b72:	5c8a      	ldrb	r2, [r1, r2]
 8010b74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010b78:	7b7a      	ldrb	r2, [r7, #13]
 8010b7a:	4908      	ldr	r1, [pc, #32]	@ (8010b9c <UARTEx_SetNbDataToProcess+0x98>)
 8010b7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b82:	b29a      	uxth	r2, r3
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010b8a:	bf00      	nop
 8010b8c:	3714      	adds	r7, #20
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b94:	4770      	bx	lr
 8010b96:	bf00      	nop
 8010b98:	080199b0 	.word	0x080199b0
 8010b9c:	080199b8 	.word	0x080199b8

08010ba0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010ba0:	b084      	sub	sp, #16
 8010ba2:	b580      	push	{r7, lr}
 8010ba4:	b084      	sub	sp, #16
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	6078      	str	r0, [r7, #4]
 8010baa:	f107 001c 	add.w	r0, r7, #28
 8010bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010bb2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010bb6:	2b01      	cmp	r3, #1
 8010bb8:	d121      	bne.n	8010bfe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bbe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	68da      	ldr	r2, [r3, #12]
 8010bca:	4b2c      	ldr	r3, [pc, #176]	@ (8010c7c <USB_CoreInit+0xdc>)
 8010bcc:	4013      	ands	r3, r2
 8010bce:	687a      	ldr	r2, [r7, #4]
 8010bd0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	68db      	ldr	r3, [r3, #12]
 8010bd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010bde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010be2:	2b01      	cmp	r3, #1
 8010be4:	d105      	bne.n	8010bf2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	68db      	ldr	r3, [r3, #12]
 8010bea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f001 faf6 	bl	80121e4 <USB_CoreReset>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	73fb      	strb	r3, [r7, #15]
 8010bfc:	e01b      	b.n	8010c36 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	68db      	ldr	r3, [r3, #12]
 8010c02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f001 faea 	bl	80121e4 <USB_CoreReset>
 8010c10:	4603      	mov	r3, r0
 8010c12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010c14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d106      	bne.n	8010c2a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c20:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	639a      	str	r2, [r3, #56]	@ 0x38
 8010c28:	e005      	b.n	8010c36 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010c36:	7fbb      	ldrb	r3, [r7, #30]
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d116      	bne.n	8010c6a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010c40:	b29a      	uxth	r2, r3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8010c80 <USB_CoreInit+0xe0>)
 8010c4c:	4313      	orrs	r3, r2
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	689b      	ldr	r3, [r3, #8]
 8010c56:	f043 0206 	orr.w	r2, r3, #6
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	689b      	ldr	r3, [r3, #8]
 8010c62:	f043 0220 	orr.w	r2, r3, #32
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3710      	adds	r7, #16
 8010c70:	46bd      	mov	sp, r7
 8010c72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010c76:	b004      	add	sp, #16
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop
 8010c7c:	ffbdffbf 	.word	0xffbdffbf
 8010c80:	03ee0000 	.word	0x03ee0000

08010c84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010c84:	b480      	push	{r7}
 8010c86:	b087      	sub	sp, #28
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	60f8      	str	r0, [r7, #12]
 8010c8c:	60b9      	str	r1, [r7, #8]
 8010c8e:	4613      	mov	r3, r2
 8010c90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010c92:	79fb      	ldrb	r3, [r7, #7]
 8010c94:	2b02      	cmp	r3, #2
 8010c96:	d165      	bne.n	8010d64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	4a41      	ldr	r2, [pc, #260]	@ (8010da0 <USB_SetTurnaroundTime+0x11c>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d906      	bls.n	8010cae <USB_SetTurnaroundTime+0x2a>
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	4a40      	ldr	r2, [pc, #256]	@ (8010da4 <USB_SetTurnaroundTime+0x120>)
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d202      	bcs.n	8010cae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010ca8:	230f      	movs	r3, #15
 8010caa:	617b      	str	r3, [r7, #20]
 8010cac:	e062      	b.n	8010d74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	4a3c      	ldr	r2, [pc, #240]	@ (8010da4 <USB_SetTurnaroundTime+0x120>)
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d306      	bcc.n	8010cc4 <USB_SetTurnaroundTime+0x40>
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	4a3b      	ldr	r2, [pc, #236]	@ (8010da8 <USB_SetTurnaroundTime+0x124>)
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	d202      	bcs.n	8010cc4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010cbe:	230e      	movs	r3, #14
 8010cc0:	617b      	str	r3, [r7, #20]
 8010cc2:	e057      	b.n	8010d74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	4a38      	ldr	r2, [pc, #224]	@ (8010da8 <USB_SetTurnaroundTime+0x124>)
 8010cc8:	4293      	cmp	r3, r2
 8010cca:	d306      	bcc.n	8010cda <USB_SetTurnaroundTime+0x56>
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	4a37      	ldr	r2, [pc, #220]	@ (8010dac <USB_SetTurnaroundTime+0x128>)
 8010cd0:	4293      	cmp	r3, r2
 8010cd2:	d202      	bcs.n	8010cda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010cd4:	230d      	movs	r3, #13
 8010cd6:	617b      	str	r3, [r7, #20]
 8010cd8:	e04c      	b.n	8010d74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	4a33      	ldr	r2, [pc, #204]	@ (8010dac <USB_SetTurnaroundTime+0x128>)
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d306      	bcc.n	8010cf0 <USB_SetTurnaroundTime+0x6c>
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	4a32      	ldr	r2, [pc, #200]	@ (8010db0 <USB_SetTurnaroundTime+0x12c>)
 8010ce6:	4293      	cmp	r3, r2
 8010ce8:	d802      	bhi.n	8010cf0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010cea:	230c      	movs	r3, #12
 8010cec:	617b      	str	r3, [r7, #20]
 8010cee:	e041      	b.n	8010d74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	4a2f      	ldr	r2, [pc, #188]	@ (8010db0 <USB_SetTurnaroundTime+0x12c>)
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	d906      	bls.n	8010d06 <USB_SetTurnaroundTime+0x82>
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	4a2e      	ldr	r2, [pc, #184]	@ (8010db4 <USB_SetTurnaroundTime+0x130>)
 8010cfc:	4293      	cmp	r3, r2
 8010cfe:	d802      	bhi.n	8010d06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010d00:	230b      	movs	r3, #11
 8010d02:	617b      	str	r3, [r7, #20]
 8010d04:	e036      	b.n	8010d74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	4a2a      	ldr	r2, [pc, #168]	@ (8010db4 <USB_SetTurnaroundTime+0x130>)
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	d906      	bls.n	8010d1c <USB_SetTurnaroundTime+0x98>
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	4a29      	ldr	r2, [pc, #164]	@ (8010db8 <USB_SetTurnaroundTime+0x134>)
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d802      	bhi.n	8010d1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010d16:	230a      	movs	r3, #10
 8010d18:	617b      	str	r3, [r7, #20]
 8010d1a:	e02b      	b.n	8010d74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	4a26      	ldr	r2, [pc, #152]	@ (8010db8 <USB_SetTurnaroundTime+0x134>)
 8010d20:	4293      	cmp	r3, r2
 8010d22:	d906      	bls.n	8010d32 <USB_SetTurnaroundTime+0xae>
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	4a25      	ldr	r2, [pc, #148]	@ (8010dbc <USB_SetTurnaroundTime+0x138>)
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	d202      	bcs.n	8010d32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010d2c:	2309      	movs	r3, #9
 8010d2e:	617b      	str	r3, [r7, #20]
 8010d30:	e020      	b.n	8010d74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	4a21      	ldr	r2, [pc, #132]	@ (8010dbc <USB_SetTurnaroundTime+0x138>)
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d306      	bcc.n	8010d48 <USB_SetTurnaroundTime+0xc4>
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	4a20      	ldr	r2, [pc, #128]	@ (8010dc0 <USB_SetTurnaroundTime+0x13c>)
 8010d3e:	4293      	cmp	r3, r2
 8010d40:	d802      	bhi.n	8010d48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010d42:	2308      	movs	r3, #8
 8010d44:	617b      	str	r3, [r7, #20]
 8010d46:	e015      	b.n	8010d74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8010dc0 <USB_SetTurnaroundTime+0x13c>)
 8010d4c:	4293      	cmp	r3, r2
 8010d4e:	d906      	bls.n	8010d5e <USB_SetTurnaroundTime+0xda>
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	4a1c      	ldr	r2, [pc, #112]	@ (8010dc4 <USB_SetTurnaroundTime+0x140>)
 8010d54:	4293      	cmp	r3, r2
 8010d56:	d202      	bcs.n	8010d5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010d58:	2307      	movs	r3, #7
 8010d5a:	617b      	str	r3, [r7, #20]
 8010d5c:	e00a      	b.n	8010d74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010d5e:	2306      	movs	r3, #6
 8010d60:	617b      	str	r3, [r7, #20]
 8010d62:	e007      	b.n	8010d74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010d64:	79fb      	ldrb	r3, [r7, #7]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d102      	bne.n	8010d70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010d6a:	2309      	movs	r3, #9
 8010d6c:	617b      	str	r3, [r7, #20]
 8010d6e:	e001      	b.n	8010d74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010d70:	2309      	movs	r3, #9
 8010d72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	68db      	ldr	r3, [r3, #12]
 8010d78:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	68da      	ldr	r2, [r3, #12]
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	029b      	lsls	r3, r3, #10
 8010d88:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8010d8c:	431a      	orrs	r2, r3
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010d92:	2300      	movs	r3, #0
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	371c      	adds	r7, #28
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr
 8010da0:	00d8acbf 	.word	0x00d8acbf
 8010da4:	00e4e1c0 	.word	0x00e4e1c0
 8010da8:	00f42400 	.word	0x00f42400
 8010dac:	01067380 	.word	0x01067380
 8010db0:	011a499f 	.word	0x011a499f
 8010db4:	01312cff 	.word	0x01312cff
 8010db8:	014ca43f 	.word	0x014ca43f
 8010dbc:	016e3600 	.word	0x016e3600
 8010dc0:	01a6ab1f 	.word	0x01a6ab1f
 8010dc4:	01e84800 	.word	0x01e84800

08010dc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010dc8:	b480      	push	{r7}
 8010dca:	b083      	sub	sp, #12
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	689b      	ldr	r3, [r3, #8]
 8010dd4:	f043 0201 	orr.w	r2, r3, #1
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010ddc:	2300      	movs	r3, #0
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	370c      	adds	r7, #12
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr

08010dea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010dea:	b480      	push	{r7}
 8010dec:	b083      	sub	sp, #12
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	689b      	ldr	r3, [r3, #8]
 8010df6:	f023 0201 	bic.w	r2, r3, #1
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010dfe:	2300      	movs	r3, #0
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	370c      	adds	r7, #12
 8010e04:	46bd      	mov	sp, r7
 8010e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0a:	4770      	bx	lr

08010e0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	460b      	mov	r3, r1
 8010e16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010e28:	78fb      	ldrb	r3, [r7, #3]
 8010e2a:	2b01      	cmp	r3, #1
 8010e2c:	d115      	bne.n	8010e5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010e3a:	200a      	movs	r0, #10
 8010e3c:	f7f2 fcde 	bl	80037fc <HAL_Delay>
      ms += 10U;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	330a      	adds	r3, #10
 8010e44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f001 f93b 	bl	80120c2 <USB_GetMode>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	2b01      	cmp	r3, #1
 8010e50:	d01e      	beq.n	8010e90 <USB_SetCurrentMode+0x84>
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	2bc7      	cmp	r3, #199	@ 0xc7
 8010e56:	d9f0      	bls.n	8010e3a <USB_SetCurrentMode+0x2e>
 8010e58:	e01a      	b.n	8010e90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010e5a:	78fb      	ldrb	r3, [r7, #3]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d115      	bne.n	8010e8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	68db      	ldr	r3, [r3, #12]
 8010e64:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010e6c:	200a      	movs	r0, #10
 8010e6e:	f7f2 fcc5 	bl	80037fc <HAL_Delay>
      ms += 10U;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	330a      	adds	r3, #10
 8010e76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f001 f922 	bl	80120c2 <USB_GetMode>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d005      	beq.n	8010e90 <USB_SetCurrentMode+0x84>
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	2bc7      	cmp	r3, #199	@ 0xc7
 8010e88:	d9f0      	bls.n	8010e6c <USB_SetCurrentMode+0x60>
 8010e8a:	e001      	b.n	8010e90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	e005      	b.n	8010e9c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	2bc8      	cmp	r3, #200	@ 0xc8
 8010e94:	d101      	bne.n	8010e9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010e96:	2301      	movs	r3, #1
 8010e98:	e000      	b.n	8010e9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010e9a:	2300      	movs	r3, #0
}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3710      	adds	r7, #16
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010ea4:	b084      	sub	sp, #16
 8010ea6:	b580      	push	{r7, lr}
 8010ea8:	b086      	sub	sp, #24
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6078      	str	r0, [r7, #4]
 8010eae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	613b      	str	r3, [r7, #16]
 8010ec2:	e009      	b.n	8010ed8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010ec4:	687a      	ldr	r2, [r7, #4]
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	3340      	adds	r3, #64	@ 0x40
 8010eca:	009b      	lsls	r3, r3, #2
 8010ecc:	4413      	add	r3, r2
 8010ece:	2200      	movs	r2, #0
 8010ed0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	3301      	adds	r3, #1
 8010ed6:	613b      	str	r3, [r7, #16]
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	2b0e      	cmp	r3, #14
 8010edc:	d9f2      	bls.n	8010ec4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010ede:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d11c      	bne.n	8010f20 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	68fa      	ldr	r2, [r7, #12]
 8010ef0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010ef4:	f043 0302 	orr.w	r3, r3, #2
 8010ef8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010efe:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	601a      	str	r2, [r3, #0]
 8010f1e:	e005      	b.n	8010f2c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f24:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010f32:	461a      	mov	r2, r3
 8010f34:	2300      	movs	r3, #0
 8010f36:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010f38:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010f3c:	2b01      	cmp	r3, #1
 8010f3e:	d10d      	bne.n	8010f5c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010f40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d104      	bne.n	8010f52 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010f48:	2100      	movs	r1, #0
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f000 f968 	bl	8011220 <USB_SetDevSpeed>
 8010f50:	e008      	b.n	8010f64 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010f52:	2101      	movs	r1, #1
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f000 f963 	bl	8011220 <USB_SetDevSpeed>
 8010f5a:	e003      	b.n	8010f64 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010f5c:	2103      	movs	r1, #3
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f000 f95e 	bl	8011220 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010f64:	2110      	movs	r1, #16
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f000 f8fa 	bl	8011160 <USB_FlushTxFifo>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d001      	beq.n	8010f76 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8010f72:	2301      	movs	r3, #1
 8010f74:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f000 f924 	bl	80111c4 <USB_FlushRxFifo>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d001      	beq.n	8010f86 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8010f82:	2301      	movs	r3, #1
 8010f84:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	2300      	movs	r3, #0
 8010f90:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f98:	461a      	mov	r2, r3
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010faa:	2300      	movs	r3, #0
 8010fac:	613b      	str	r3, [r7, #16]
 8010fae:	e043      	b.n	8011038 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010fb0:	693b      	ldr	r3, [r7, #16]
 8010fb2:	015a      	lsls	r2, r3, #5
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	4413      	add	r3, r2
 8010fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010fc6:	d118      	bne.n	8010ffa <USB_DevInit+0x156>
    {
      if (i == 0U)
 8010fc8:	693b      	ldr	r3, [r7, #16]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d10a      	bne.n	8010fe4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010fce:	693b      	ldr	r3, [r7, #16]
 8010fd0:	015a      	lsls	r2, r3, #5
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	4413      	add	r3, r2
 8010fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fda:	461a      	mov	r2, r3
 8010fdc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010fe0:	6013      	str	r3, [r2, #0]
 8010fe2:	e013      	b.n	801100c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	015a      	lsls	r2, r3, #5
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	4413      	add	r3, r2
 8010fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ff0:	461a      	mov	r2, r3
 8010ff2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010ff6:	6013      	str	r3, [r2, #0]
 8010ff8:	e008      	b.n	801100c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010ffa:	693b      	ldr	r3, [r7, #16]
 8010ffc:	015a      	lsls	r2, r3, #5
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	4413      	add	r3, r2
 8011002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011006:	461a      	mov	r2, r3
 8011008:	2300      	movs	r3, #0
 801100a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	015a      	lsls	r2, r3, #5
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	4413      	add	r3, r2
 8011014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011018:	461a      	mov	r2, r3
 801101a:	2300      	movs	r3, #0
 801101c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	015a      	lsls	r2, r3, #5
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	4413      	add	r3, r2
 8011026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801102a:	461a      	mov	r2, r3
 801102c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011030:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011032:	693b      	ldr	r3, [r7, #16]
 8011034:	3301      	adds	r3, #1
 8011036:	613b      	str	r3, [r7, #16]
 8011038:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801103c:	461a      	mov	r2, r3
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	4293      	cmp	r3, r2
 8011042:	d3b5      	bcc.n	8010fb0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011044:	2300      	movs	r3, #0
 8011046:	613b      	str	r3, [r7, #16]
 8011048:	e043      	b.n	80110d2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	015a      	lsls	r2, r3, #5
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	4413      	add	r3, r2
 8011052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801105c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011060:	d118      	bne.n	8011094 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8011062:	693b      	ldr	r3, [r7, #16]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d10a      	bne.n	801107e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011068:	693b      	ldr	r3, [r7, #16]
 801106a:	015a      	lsls	r2, r3, #5
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	4413      	add	r3, r2
 8011070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011074:	461a      	mov	r2, r3
 8011076:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801107a:	6013      	str	r3, [r2, #0]
 801107c:	e013      	b.n	80110a6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	015a      	lsls	r2, r3, #5
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	4413      	add	r3, r2
 8011086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801108a:	461a      	mov	r2, r3
 801108c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011090:	6013      	str	r3, [r2, #0]
 8011092:	e008      	b.n	80110a6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011094:	693b      	ldr	r3, [r7, #16]
 8011096:	015a      	lsls	r2, r3, #5
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	4413      	add	r3, r2
 801109c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110a0:	461a      	mov	r2, r3
 80110a2:	2300      	movs	r3, #0
 80110a4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	015a      	lsls	r2, r3, #5
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	4413      	add	r3, r2
 80110ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110b2:	461a      	mov	r2, r3
 80110b4:	2300      	movs	r3, #0
 80110b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	015a      	lsls	r2, r3, #5
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	4413      	add	r3, r2
 80110c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110c4:	461a      	mov	r2, r3
 80110c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80110ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	3301      	adds	r3, #1
 80110d0:	613b      	str	r3, [r7, #16]
 80110d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80110d6:	461a      	mov	r2, r3
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	4293      	cmp	r3, r2
 80110dc:	d3b5      	bcc.n	801104a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80110e4:	691b      	ldr	r3, [r3, #16]
 80110e6:	68fa      	ldr	r2, [r7, #12]
 80110e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80110ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80110f0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2200      	movs	r2, #0
 80110f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80110fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011100:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011104:	2b00      	cmp	r3, #0
 8011106:	d105      	bne.n	8011114 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	699b      	ldr	r3, [r3, #24]
 801110c:	f043 0210 	orr.w	r2, r3, #16
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	699a      	ldr	r2, [r3, #24]
 8011118:	4b0f      	ldr	r3, [pc, #60]	@ (8011158 <USB_DevInit+0x2b4>)
 801111a:	4313      	orrs	r3, r2
 801111c:	687a      	ldr	r2, [r7, #4]
 801111e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011120:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011124:	2b00      	cmp	r3, #0
 8011126:	d005      	beq.n	8011134 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	699b      	ldr	r3, [r3, #24]
 801112c:	f043 0208 	orr.w	r2, r3, #8
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011134:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011138:	2b01      	cmp	r3, #1
 801113a:	d105      	bne.n	8011148 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	699a      	ldr	r2, [r3, #24]
 8011140:	4b06      	ldr	r3, [pc, #24]	@ (801115c <USB_DevInit+0x2b8>)
 8011142:	4313      	orrs	r3, r2
 8011144:	687a      	ldr	r2, [r7, #4]
 8011146:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011148:	7dfb      	ldrb	r3, [r7, #23]
}
 801114a:	4618      	mov	r0, r3
 801114c:	3718      	adds	r7, #24
 801114e:	46bd      	mov	sp, r7
 8011150:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011154:	b004      	add	sp, #16
 8011156:	4770      	bx	lr
 8011158:	803c3800 	.word	0x803c3800
 801115c:	40000004 	.word	0x40000004

08011160 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011160:	b480      	push	{r7}
 8011162:	b085      	sub	sp, #20
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801116a:	2300      	movs	r3, #0
 801116c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	3301      	adds	r3, #1
 8011172:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801117a:	d901      	bls.n	8011180 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801117c:	2303      	movs	r3, #3
 801117e:	e01b      	b.n	80111b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	691b      	ldr	r3, [r3, #16]
 8011184:	2b00      	cmp	r3, #0
 8011186:	daf2      	bge.n	801116e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011188:	2300      	movs	r3, #0
 801118a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	019b      	lsls	r3, r3, #6
 8011190:	f043 0220 	orr.w	r2, r3, #32
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	3301      	adds	r3, #1
 801119c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80111a4:	d901      	bls.n	80111aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80111a6:	2303      	movs	r3, #3
 80111a8:	e006      	b.n	80111b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	691b      	ldr	r3, [r3, #16]
 80111ae:	f003 0320 	and.w	r3, r3, #32
 80111b2:	2b20      	cmp	r3, #32
 80111b4:	d0f0      	beq.n	8011198 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80111b6:	2300      	movs	r3, #0
}
 80111b8:	4618      	mov	r0, r3
 80111ba:	3714      	adds	r7, #20
 80111bc:	46bd      	mov	sp, r7
 80111be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c2:	4770      	bx	lr

080111c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80111c4:	b480      	push	{r7}
 80111c6:	b085      	sub	sp, #20
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80111cc:	2300      	movs	r3, #0
 80111ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	3301      	adds	r3, #1
 80111d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80111dc:	d901      	bls.n	80111e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80111de:	2303      	movs	r3, #3
 80111e0:	e018      	b.n	8011214 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	691b      	ldr	r3, [r3, #16]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	daf2      	bge.n	80111d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80111ea:	2300      	movs	r3, #0
 80111ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2210      	movs	r2, #16
 80111f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	3301      	adds	r3, #1
 80111f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011200:	d901      	bls.n	8011206 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011202:	2303      	movs	r3, #3
 8011204:	e006      	b.n	8011214 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	691b      	ldr	r3, [r3, #16]
 801120a:	f003 0310 	and.w	r3, r3, #16
 801120e:	2b10      	cmp	r3, #16
 8011210:	d0f0      	beq.n	80111f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011212:	2300      	movs	r3, #0
}
 8011214:	4618      	mov	r0, r3
 8011216:	3714      	adds	r7, #20
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr

08011220 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011220:	b480      	push	{r7}
 8011222:	b085      	sub	sp, #20
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	460b      	mov	r3, r1
 801122a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011236:	681a      	ldr	r2, [r3, #0]
 8011238:	78fb      	ldrb	r3, [r7, #3]
 801123a:	68f9      	ldr	r1, [r7, #12]
 801123c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011240:	4313      	orrs	r3, r2
 8011242:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011244:	2300      	movs	r3, #0
}
 8011246:	4618      	mov	r0, r3
 8011248:	3714      	adds	r7, #20
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr

08011252 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8011252:	b480      	push	{r7}
 8011254:	b087      	sub	sp, #28
 8011256:	af00      	add	r7, sp, #0
 8011258:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801125e:	693b      	ldr	r3, [r7, #16]
 8011260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011264:	689b      	ldr	r3, [r3, #8]
 8011266:	f003 0306 	and.w	r3, r3, #6
 801126a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d102      	bne.n	8011278 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8011272:	2300      	movs	r3, #0
 8011274:	75fb      	strb	r3, [r7, #23]
 8011276:	e00a      	b.n	801128e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	2b02      	cmp	r3, #2
 801127c:	d002      	beq.n	8011284 <USB_GetDevSpeed+0x32>
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	2b06      	cmp	r3, #6
 8011282:	d102      	bne.n	801128a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011284:	2302      	movs	r3, #2
 8011286:	75fb      	strb	r3, [r7, #23]
 8011288:	e001      	b.n	801128e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801128a:	230f      	movs	r3, #15
 801128c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801128e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011290:	4618      	mov	r0, r3
 8011292:	371c      	adds	r7, #28
 8011294:	46bd      	mov	sp, r7
 8011296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129a:	4770      	bx	lr

0801129c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801129c:	b480      	push	{r7}
 801129e:	b085      	sub	sp, #20
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	785b      	ldrb	r3, [r3, #1]
 80112b4:	2b01      	cmp	r3, #1
 80112b6:	d139      	bne.n	801132c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80112be:	69da      	ldr	r2, [r3, #28]
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	f003 030f 	and.w	r3, r3, #15
 80112c8:	2101      	movs	r1, #1
 80112ca:	fa01 f303 	lsl.w	r3, r1, r3
 80112ce:	b29b      	uxth	r3, r3
 80112d0:	68f9      	ldr	r1, [r7, #12]
 80112d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80112d6:	4313      	orrs	r3, r2
 80112d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80112da:	68bb      	ldr	r3, [r7, #8]
 80112dc:	015a      	lsls	r2, r3, #5
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	4413      	add	r3, r2
 80112e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d153      	bne.n	8011398 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	015a      	lsls	r2, r3, #5
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	4413      	add	r3, r2
 80112f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80112fc:	681a      	ldr	r2, [r3, #0]
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	689b      	ldr	r3, [r3, #8]
 8011302:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	791b      	ldrb	r3, [r3, #4]
 801130a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801130c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	059b      	lsls	r3, r3, #22
 8011312:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011314:	431a      	orrs	r2, r3
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	0159      	lsls	r1, r3, #5
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	440b      	add	r3, r1
 801131e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011322:	4619      	mov	r1, r3
 8011324:	4b20      	ldr	r3, [pc, #128]	@ (80113a8 <USB_ActivateEndpoint+0x10c>)
 8011326:	4313      	orrs	r3, r2
 8011328:	600b      	str	r3, [r1, #0]
 801132a:	e035      	b.n	8011398 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011332:	69da      	ldr	r2, [r3, #28]
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	f003 030f 	and.w	r3, r3, #15
 801133c:	2101      	movs	r1, #1
 801133e:	fa01 f303 	lsl.w	r3, r1, r3
 8011342:	041b      	lsls	r3, r3, #16
 8011344:	68f9      	ldr	r1, [r7, #12]
 8011346:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801134a:	4313      	orrs	r3, r2
 801134c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	015a      	lsls	r2, r3, #5
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	4413      	add	r3, r2
 8011356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011360:	2b00      	cmp	r3, #0
 8011362:	d119      	bne.n	8011398 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	015a      	lsls	r2, r3, #5
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	4413      	add	r3, r2
 801136c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011370:	681a      	ldr	r2, [r3, #0]
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	689b      	ldr	r3, [r3, #8]
 8011376:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	791b      	ldrb	r3, [r3, #4]
 801137e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011380:	430b      	orrs	r3, r1
 8011382:	431a      	orrs	r2, r3
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	0159      	lsls	r1, r3, #5
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	440b      	add	r3, r1
 801138c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011390:	4619      	mov	r1, r3
 8011392:	4b05      	ldr	r3, [pc, #20]	@ (80113a8 <USB_ActivateEndpoint+0x10c>)
 8011394:	4313      	orrs	r3, r2
 8011396:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011398:	2300      	movs	r3, #0
}
 801139a:	4618      	mov	r0, r3
 801139c:	3714      	adds	r7, #20
 801139e:	46bd      	mov	sp, r7
 80113a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a4:	4770      	bx	lr
 80113a6:	bf00      	nop
 80113a8:	10008000 	.word	0x10008000

080113ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b085      	sub	sp, #20
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	781b      	ldrb	r3, [r3, #0]
 80113be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	785b      	ldrb	r3, [r3, #1]
 80113c4:	2b01      	cmp	r3, #1
 80113c6:	d161      	bne.n	801148c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	015a      	lsls	r2, r3, #5
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	4413      	add	r3, r2
 80113d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80113da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80113de:	d11f      	bne.n	8011420 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80113e0:	68bb      	ldr	r3, [r7, #8]
 80113e2:	015a      	lsls	r2, r3, #5
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	4413      	add	r3, r2
 80113e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	68ba      	ldr	r2, [r7, #8]
 80113f0:	0151      	lsls	r1, r2, #5
 80113f2:	68fa      	ldr	r2, [r7, #12]
 80113f4:	440a      	add	r2, r1
 80113f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80113fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80113fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	015a      	lsls	r2, r3, #5
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	4413      	add	r3, r2
 8011408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	68ba      	ldr	r2, [r7, #8]
 8011410:	0151      	lsls	r1, r2, #5
 8011412:	68fa      	ldr	r2, [r7, #12]
 8011414:	440a      	add	r2, r1
 8011416:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801141a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801141e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	781b      	ldrb	r3, [r3, #0]
 801142c:	f003 030f 	and.w	r3, r3, #15
 8011430:	2101      	movs	r1, #1
 8011432:	fa01 f303 	lsl.w	r3, r1, r3
 8011436:	b29b      	uxth	r3, r3
 8011438:	43db      	mvns	r3, r3
 801143a:	68f9      	ldr	r1, [r7, #12]
 801143c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011440:	4013      	ands	r3, r2
 8011442:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801144a:	69da      	ldr	r2, [r3, #28]
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	f003 030f 	and.w	r3, r3, #15
 8011454:	2101      	movs	r1, #1
 8011456:	fa01 f303 	lsl.w	r3, r1, r3
 801145a:	b29b      	uxth	r3, r3
 801145c:	43db      	mvns	r3, r3
 801145e:	68f9      	ldr	r1, [r7, #12]
 8011460:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011464:	4013      	ands	r3, r2
 8011466:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	015a      	lsls	r2, r3, #5
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	4413      	add	r3, r2
 8011470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011474:	681a      	ldr	r2, [r3, #0]
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	0159      	lsls	r1, r3, #5
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	440b      	add	r3, r1
 801147e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011482:	4619      	mov	r1, r3
 8011484:	4b35      	ldr	r3, [pc, #212]	@ (801155c <USB_DeactivateEndpoint+0x1b0>)
 8011486:	4013      	ands	r3, r2
 8011488:	600b      	str	r3, [r1, #0]
 801148a:	e060      	b.n	801154e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	015a      	lsls	r2, r3, #5
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	4413      	add	r3, r2
 8011494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801149e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80114a2:	d11f      	bne.n	80114e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	015a      	lsls	r2, r3, #5
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	4413      	add	r3, r2
 80114ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	68ba      	ldr	r2, [r7, #8]
 80114b4:	0151      	lsls	r1, r2, #5
 80114b6:	68fa      	ldr	r2, [r7, #12]
 80114b8:	440a      	add	r2, r1
 80114ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80114be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80114c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	015a      	lsls	r2, r3, #5
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	4413      	add	r3, r2
 80114cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	68ba      	ldr	r2, [r7, #8]
 80114d4:	0151      	lsls	r1, r2, #5
 80114d6:	68fa      	ldr	r2, [r7, #12]
 80114d8:	440a      	add	r2, r1
 80114da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80114de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80114e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80114ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	781b      	ldrb	r3, [r3, #0]
 80114f0:	f003 030f 	and.w	r3, r3, #15
 80114f4:	2101      	movs	r1, #1
 80114f6:	fa01 f303 	lsl.w	r3, r1, r3
 80114fa:	041b      	lsls	r3, r3, #16
 80114fc:	43db      	mvns	r3, r3
 80114fe:	68f9      	ldr	r1, [r7, #12]
 8011500:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011504:	4013      	ands	r3, r2
 8011506:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801150e:	69da      	ldr	r2, [r3, #28]
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	781b      	ldrb	r3, [r3, #0]
 8011514:	f003 030f 	and.w	r3, r3, #15
 8011518:	2101      	movs	r1, #1
 801151a:	fa01 f303 	lsl.w	r3, r1, r3
 801151e:	041b      	lsls	r3, r3, #16
 8011520:	43db      	mvns	r3, r3
 8011522:	68f9      	ldr	r1, [r7, #12]
 8011524:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011528:	4013      	ands	r3, r2
 801152a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	015a      	lsls	r2, r3, #5
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	4413      	add	r3, r2
 8011534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011538:	681a      	ldr	r2, [r3, #0]
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	0159      	lsls	r1, r3, #5
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	440b      	add	r3, r1
 8011542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011546:	4619      	mov	r1, r3
 8011548:	4b05      	ldr	r3, [pc, #20]	@ (8011560 <USB_DeactivateEndpoint+0x1b4>)
 801154a:	4013      	ands	r3, r2
 801154c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801154e:	2300      	movs	r3, #0
}
 8011550:	4618      	mov	r0, r3
 8011552:	3714      	adds	r7, #20
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr
 801155c:	ec337800 	.word	0xec337800
 8011560:	eff37800 	.word	0xeff37800

08011564 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b08a      	sub	sp, #40	@ 0x28
 8011568:	af02      	add	r7, sp, #8
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	60b9      	str	r1, [r7, #8]
 801156e:	4613      	mov	r3, r2
 8011570:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	781b      	ldrb	r3, [r3, #0]
 801157a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801157c:	68bb      	ldr	r3, [r7, #8]
 801157e:	785b      	ldrb	r3, [r3, #1]
 8011580:	2b01      	cmp	r3, #1
 8011582:	f040 8181 	bne.w	8011888 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	691b      	ldr	r3, [r3, #16]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d132      	bne.n	80115f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801158e:	69bb      	ldr	r3, [r7, #24]
 8011590:	015a      	lsls	r2, r3, #5
 8011592:	69fb      	ldr	r3, [r7, #28]
 8011594:	4413      	add	r3, r2
 8011596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801159a:	691a      	ldr	r2, [r3, #16]
 801159c:	69bb      	ldr	r3, [r7, #24]
 801159e:	0159      	lsls	r1, r3, #5
 80115a0:	69fb      	ldr	r3, [r7, #28]
 80115a2:	440b      	add	r3, r1
 80115a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115a8:	4619      	mov	r1, r3
 80115aa:	4ba5      	ldr	r3, [pc, #660]	@ (8011840 <USB_EPStartXfer+0x2dc>)
 80115ac:	4013      	ands	r3, r2
 80115ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80115b0:	69bb      	ldr	r3, [r7, #24]
 80115b2:	015a      	lsls	r2, r3, #5
 80115b4:	69fb      	ldr	r3, [r7, #28]
 80115b6:	4413      	add	r3, r2
 80115b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115bc:	691b      	ldr	r3, [r3, #16]
 80115be:	69ba      	ldr	r2, [r7, #24]
 80115c0:	0151      	lsls	r1, r2, #5
 80115c2:	69fa      	ldr	r2, [r7, #28]
 80115c4:	440a      	add	r2, r1
 80115c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80115ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80115ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80115d0:	69bb      	ldr	r3, [r7, #24]
 80115d2:	015a      	lsls	r2, r3, #5
 80115d4:	69fb      	ldr	r3, [r7, #28]
 80115d6:	4413      	add	r3, r2
 80115d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115dc:	691a      	ldr	r2, [r3, #16]
 80115de:	69bb      	ldr	r3, [r7, #24]
 80115e0:	0159      	lsls	r1, r3, #5
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	440b      	add	r3, r1
 80115e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115ea:	4619      	mov	r1, r3
 80115ec:	4b95      	ldr	r3, [pc, #596]	@ (8011844 <USB_EPStartXfer+0x2e0>)
 80115ee:	4013      	ands	r3, r2
 80115f0:	610b      	str	r3, [r1, #16]
 80115f2:	e092      	b.n	801171a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80115f4:	69bb      	ldr	r3, [r7, #24]
 80115f6:	015a      	lsls	r2, r3, #5
 80115f8:	69fb      	ldr	r3, [r7, #28]
 80115fa:	4413      	add	r3, r2
 80115fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011600:	691a      	ldr	r2, [r3, #16]
 8011602:	69bb      	ldr	r3, [r7, #24]
 8011604:	0159      	lsls	r1, r3, #5
 8011606:	69fb      	ldr	r3, [r7, #28]
 8011608:	440b      	add	r3, r1
 801160a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801160e:	4619      	mov	r1, r3
 8011610:	4b8c      	ldr	r3, [pc, #560]	@ (8011844 <USB_EPStartXfer+0x2e0>)
 8011612:	4013      	ands	r3, r2
 8011614:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011616:	69bb      	ldr	r3, [r7, #24]
 8011618:	015a      	lsls	r2, r3, #5
 801161a:	69fb      	ldr	r3, [r7, #28]
 801161c:	4413      	add	r3, r2
 801161e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011622:	691a      	ldr	r2, [r3, #16]
 8011624:	69bb      	ldr	r3, [r7, #24]
 8011626:	0159      	lsls	r1, r3, #5
 8011628:	69fb      	ldr	r3, [r7, #28]
 801162a:	440b      	add	r3, r1
 801162c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011630:	4619      	mov	r1, r3
 8011632:	4b83      	ldr	r3, [pc, #524]	@ (8011840 <USB_EPStartXfer+0x2dc>)
 8011634:	4013      	ands	r3, r2
 8011636:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8011638:	69bb      	ldr	r3, [r7, #24]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d11a      	bne.n	8011674 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	691a      	ldr	r2, [r3, #16]
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	689b      	ldr	r3, [r3, #8]
 8011646:	429a      	cmp	r2, r3
 8011648:	d903      	bls.n	8011652 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	689a      	ldr	r2, [r3, #8]
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011652:	69bb      	ldr	r3, [r7, #24]
 8011654:	015a      	lsls	r2, r3, #5
 8011656:	69fb      	ldr	r3, [r7, #28]
 8011658:	4413      	add	r3, r2
 801165a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801165e:	691b      	ldr	r3, [r3, #16]
 8011660:	69ba      	ldr	r2, [r7, #24]
 8011662:	0151      	lsls	r1, r2, #5
 8011664:	69fa      	ldr	r2, [r7, #28]
 8011666:	440a      	add	r2, r1
 8011668:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801166c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011670:	6113      	str	r3, [r2, #16]
 8011672:	e01b      	b.n	80116ac <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011674:	69bb      	ldr	r3, [r7, #24]
 8011676:	015a      	lsls	r2, r3, #5
 8011678:	69fb      	ldr	r3, [r7, #28]
 801167a:	4413      	add	r3, r2
 801167c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011680:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	6919      	ldr	r1, [r3, #16]
 8011686:	68bb      	ldr	r3, [r7, #8]
 8011688:	689b      	ldr	r3, [r3, #8]
 801168a:	440b      	add	r3, r1
 801168c:	1e59      	subs	r1, r3, #1
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	689b      	ldr	r3, [r3, #8]
 8011692:	fbb1 f3f3 	udiv	r3, r1, r3
 8011696:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011698:	4b6b      	ldr	r3, [pc, #428]	@ (8011848 <USB_EPStartXfer+0x2e4>)
 801169a:	400b      	ands	r3, r1
 801169c:	69b9      	ldr	r1, [r7, #24]
 801169e:	0148      	lsls	r0, r1, #5
 80116a0:	69f9      	ldr	r1, [r7, #28]
 80116a2:	4401      	add	r1, r0
 80116a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80116a8:	4313      	orrs	r3, r2
 80116aa:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80116ac:	69bb      	ldr	r3, [r7, #24]
 80116ae:	015a      	lsls	r2, r3, #5
 80116b0:	69fb      	ldr	r3, [r7, #28]
 80116b2:	4413      	add	r3, r2
 80116b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80116b8:	691a      	ldr	r2, [r3, #16]
 80116ba:	68bb      	ldr	r3, [r7, #8]
 80116bc:	691b      	ldr	r3, [r3, #16]
 80116be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80116c2:	69b9      	ldr	r1, [r7, #24]
 80116c4:	0148      	lsls	r0, r1, #5
 80116c6:	69f9      	ldr	r1, [r7, #28]
 80116c8:	4401      	add	r1, r0
 80116ca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80116ce:	4313      	orrs	r3, r2
 80116d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	791b      	ldrb	r3, [r3, #4]
 80116d6:	2b01      	cmp	r3, #1
 80116d8:	d11f      	bne.n	801171a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80116da:	69bb      	ldr	r3, [r7, #24]
 80116dc:	015a      	lsls	r2, r3, #5
 80116de:	69fb      	ldr	r3, [r7, #28]
 80116e0:	4413      	add	r3, r2
 80116e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80116e6:	691b      	ldr	r3, [r3, #16]
 80116e8:	69ba      	ldr	r2, [r7, #24]
 80116ea:	0151      	lsls	r1, r2, #5
 80116ec:	69fa      	ldr	r2, [r7, #28]
 80116ee:	440a      	add	r2, r1
 80116f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80116f4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80116f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80116fa:	69bb      	ldr	r3, [r7, #24]
 80116fc:	015a      	lsls	r2, r3, #5
 80116fe:	69fb      	ldr	r3, [r7, #28]
 8011700:	4413      	add	r3, r2
 8011702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011706:	691b      	ldr	r3, [r3, #16]
 8011708:	69ba      	ldr	r2, [r7, #24]
 801170a:	0151      	lsls	r1, r2, #5
 801170c:	69fa      	ldr	r2, [r7, #28]
 801170e:	440a      	add	r2, r1
 8011710:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011714:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011718:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801171a:	79fb      	ldrb	r3, [r7, #7]
 801171c:	2b01      	cmp	r3, #1
 801171e:	d14b      	bne.n	80117b8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	69db      	ldr	r3, [r3, #28]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d009      	beq.n	801173c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011728:	69bb      	ldr	r3, [r7, #24]
 801172a:	015a      	lsls	r2, r3, #5
 801172c:	69fb      	ldr	r3, [r7, #28]
 801172e:	4413      	add	r3, r2
 8011730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011734:	461a      	mov	r2, r3
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	69db      	ldr	r3, [r3, #28]
 801173a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	791b      	ldrb	r3, [r3, #4]
 8011740:	2b01      	cmp	r3, #1
 8011742:	d128      	bne.n	8011796 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801174a:	689b      	ldr	r3, [r3, #8]
 801174c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011750:	2b00      	cmp	r3, #0
 8011752:	d110      	bne.n	8011776 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011754:	69bb      	ldr	r3, [r7, #24]
 8011756:	015a      	lsls	r2, r3, #5
 8011758:	69fb      	ldr	r3, [r7, #28]
 801175a:	4413      	add	r3, r2
 801175c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	69ba      	ldr	r2, [r7, #24]
 8011764:	0151      	lsls	r1, r2, #5
 8011766:	69fa      	ldr	r2, [r7, #28]
 8011768:	440a      	add	r2, r1
 801176a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801176e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011772:	6013      	str	r3, [r2, #0]
 8011774:	e00f      	b.n	8011796 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011776:	69bb      	ldr	r3, [r7, #24]
 8011778:	015a      	lsls	r2, r3, #5
 801177a:	69fb      	ldr	r3, [r7, #28]
 801177c:	4413      	add	r3, r2
 801177e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	69ba      	ldr	r2, [r7, #24]
 8011786:	0151      	lsls	r1, r2, #5
 8011788:	69fa      	ldr	r2, [r7, #28]
 801178a:	440a      	add	r2, r1
 801178c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011794:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011796:	69bb      	ldr	r3, [r7, #24]
 8011798:	015a      	lsls	r2, r3, #5
 801179a:	69fb      	ldr	r3, [r7, #28]
 801179c:	4413      	add	r3, r2
 801179e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	69ba      	ldr	r2, [r7, #24]
 80117a6:	0151      	lsls	r1, r2, #5
 80117a8:	69fa      	ldr	r2, [r7, #28]
 80117aa:	440a      	add	r2, r1
 80117ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80117b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80117b4:	6013      	str	r3, [r2, #0]
 80117b6:	e16a      	b.n	8011a8e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80117b8:	69bb      	ldr	r3, [r7, #24]
 80117ba:	015a      	lsls	r2, r3, #5
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	4413      	add	r3, r2
 80117c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	69ba      	ldr	r2, [r7, #24]
 80117c8:	0151      	lsls	r1, r2, #5
 80117ca:	69fa      	ldr	r2, [r7, #28]
 80117cc:	440a      	add	r2, r1
 80117ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80117d2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80117d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	791b      	ldrb	r3, [r3, #4]
 80117dc:	2b01      	cmp	r3, #1
 80117de:	d015      	beq.n	801180c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	691b      	ldr	r3, [r3, #16]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	f000 8152 	beq.w	8011a8e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80117ea:	69fb      	ldr	r3, [r7, #28]
 80117ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	781b      	ldrb	r3, [r3, #0]
 80117f6:	f003 030f 	and.w	r3, r3, #15
 80117fa:	2101      	movs	r1, #1
 80117fc:	fa01 f303 	lsl.w	r3, r1, r3
 8011800:	69f9      	ldr	r1, [r7, #28]
 8011802:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011806:	4313      	orrs	r3, r2
 8011808:	634b      	str	r3, [r1, #52]	@ 0x34
 801180a:	e140      	b.n	8011a8e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011812:	689b      	ldr	r3, [r3, #8]
 8011814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011818:	2b00      	cmp	r3, #0
 801181a:	d117      	bne.n	801184c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801181c:	69bb      	ldr	r3, [r7, #24]
 801181e:	015a      	lsls	r2, r3, #5
 8011820:	69fb      	ldr	r3, [r7, #28]
 8011822:	4413      	add	r3, r2
 8011824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	69ba      	ldr	r2, [r7, #24]
 801182c:	0151      	lsls	r1, r2, #5
 801182e:	69fa      	ldr	r2, [r7, #28]
 8011830:	440a      	add	r2, r1
 8011832:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011836:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801183a:	6013      	str	r3, [r2, #0]
 801183c:	e016      	b.n	801186c <USB_EPStartXfer+0x308>
 801183e:	bf00      	nop
 8011840:	e007ffff 	.word	0xe007ffff
 8011844:	fff80000 	.word	0xfff80000
 8011848:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801184c:	69bb      	ldr	r3, [r7, #24]
 801184e:	015a      	lsls	r2, r3, #5
 8011850:	69fb      	ldr	r3, [r7, #28]
 8011852:	4413      	add	r3, r2
 8011854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	69ba      	ldr	r2, [r7, #24]
 801185c:	0151      	lsls	r1, r2, #5
 801185e:	69fa      	ldr	r2, [r7, #28]
 8011860:	440a      	add	r2, r1
 8011862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801186a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	68d9      	ldr	r1, [r3, #12]
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	781a      	ldrb	r2, [r3, #0]
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	691b      	ldr	r3, [r3, #16]
 8011878:	b298      	uxth	r0, r3
 801187a:	79fb      	ldrb	r3, [r7, #7]
 801187c:	9300      	str	r3, [sp, #0]
 801187e:	4603      	mov	r3, r0
 8011880:	68f8      	ldr	r0, [r7, #12]
 8011882:	f000 f9b9 	bl	8011bf8 <USB_WritePacket>
 8011886:	e102      	b.n	8011a8e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011888:	69bb      	ldr	r3, [r7, #24]
 801188a:	015a      	lsls	r2, r3, #5
 801188c:	69fb      	ldr	r3, [r7, #28]
 801188e:	4413      	add	r3, r2
 8011890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011894:	691a      	ldr	r2, [r3, #16]
 8011896:	69bb      	ldr	r3, [r7, #24]
 8011898:	0159      	lsls	r1, r3, #5
 801189a:	69fb      	ldr	r3, [r7, #28]
 801189c:	440b      	add	r3, r1
 801189e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118a2:	4619      	mov	r1, r3
 80118a4:	4b7c      	ldr	r3, [pc, #496]	@ (8011a98 <USB_EPStartXfer+0x534>)
 80118a6:	4013      	ands	r3, r2
 80118a8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80118aa:	69bb      	ldr	r3, [r7, #24]
 80118ac:	015a      	lsls	r2, r3, #5
 80118ae:	69fb      	ldr	r3, [r7, #28]
 80118b0:	4413      	add	r3, r2
 80118b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118b6:	691a      	ldr	r2, [r3, #16]
 80118b8:	69bb      	ldr	r3, [r7, #24]
 80118ba:	0159      	lsls	r1, r3, #5
 80118bc:	69fb      	ldr	r3, [r7, #28]
 80118be:	440b      	add	r3, r1
 80118c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118c4:	4619      	mov	r1, r3
 80118c6:	4b75      	ldr	r3, [pc, #468]	@ (8011a9c <USB_EPStartXfer+0x538>)
 80118c8:	4013      	ands	r3, r2
 80118ca:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80118cc:	69bb      	ldr	r3, [r7, #24]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d12f      	bne.n	8011932 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	691b      	ldr	r3, [r3, #16]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d003      	beq.n	80118e2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	689a      	ldr	r2, [r3, #8]
 80118de:	68bb      	ldr	r3, [r7, #8]
 80118e0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	689a      	ldr	r2, [r3, #8]
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80118ea:	69bb      	ldr	r3, [r7, #24]
 80118ec:	015a      	lsls	r2, r3, #5
 80118ee:	69fb      	ldr	r3, [r7, #28]
 80118f0:	4413      	add	r3, r2
 80118f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118f6:	691a      	ldr	r2, [r3, #16]
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	6a1b      	ldr	r3, [r3, #32]
 80118fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011900:	69b9      	ldr	r1, [r7, #24]
 8011902:	0148      	lsls	r0, r1, #5
 8011904:	69f9      	ldr	r1, [r7, #28]
 8011906:	4401      	add	r1, r0
 8011908:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801190c:	4313      	orrs	r3, r2
 801190e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011910:	69bb      	ldr	r3, [r7, #24]
 8011912:	015a      	lsls	r2, r3, #5
 8011914:	69fb      	ldr	r3, [r7, #28]
 8011916:	4413      	add	r3, r2
 8011918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801191c:	691b      	ldr	r3, [r3, #16]
 801191e:	69ba      	ldr	r2, [r7, #24]
 8011920:	0151      	lsls	r1, r2, #5
 8011922:	69fa      	ldr	r2, [r7, #28]
 8011924:	440a      	add	r2, r1
 8011926:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801192a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801192e:	6113      	str	r3, [r2, #16]
 8011930:	e05f      	b.n	80119f2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	691b      	ldr	r3, [r3, #16]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d123      	bne.n	8011982 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801193a:	69bb      	ldr	r3, [r7, #24]
 801193c:	015a      	lsls	r2, r3, #5
 801193e:	69fb      	ldr	r3, [r7, #28]
 8011940:	4413      	add	r3, r2
 8011942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011946:	691a      	ldr	r2, [r3, #16]
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	689b      	ldr	r3, [r3, #8]
 801194c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011950:	69b9      	ldr	r1, [r7, #24]
 8011952:	0148      	lsls	r0, r1, #5
 8011954:	69f9      	ldr	r1, [r7, #28]
 8011956:	4401      	add	r1, r0
 8011958:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801195c:	4313      	orrs	r3, r2
 801195e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011960:	69bb      	ldr	r3, [r7, #24]
 8011962:	015a      	lsls	r2, r3, #5
 8011964:	69fb      	ldr	r3, [r7, #28]
 8011966:	4413      	add	r3, r2
 8011968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801196c:	691b      	ldr	r3, [r3, #16]
 801196e:	69ba      	ldr	r2, [r7, #24]
 8011970:	0151      	lsls	r1, r2, #5
 8011972:	69fa      	ldr	r2, [r7, #28]
 8011974:	440a      	add	r2, r1
 8011976:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801197a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801197e:	6113      	str	r3, [r2, #16]
 8011980:	e037      	b.n	80119f2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	691a      	ldr	r2, [r3, #16]
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	689b      	ldr	r3, [r3, #8]
 801198a:	4413      	add	r3, r2
 801198c:	1e5a      	subs	r2, r3, #1
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	689b      	ldr	r3, [r3, #8]
 8011992:	fbb2 f3f3 	udiv	r3, r2, r3
 8011996:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	689b      	ldr	r3, [r3, #8]
 801199c:	8afa      	ldrh	r2, [r7, #22]
 801199e:	fb03 f202 	mul.w	r2, r3, r2
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80119a6:	69bb      	ldr	r3, [r7, #24]
 80119a8:	015a      	lsls	r2, r3, #5
 80119aa:	69fb      	ldr	r3, [r7, #28]
 80119ac:	4413      	add	r3, r2
 80119ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119b2:	691a      	ldr	r2, [r3, #16]
 80119b4:	8afb      	ldrh	r3, [r7, #22]
 80119b6:	04d9      	lsls	r1, r3, #19
 80119b8:	4b39      	ldr	r3, [pc, #228]	@ (8011aa0 <USB_EPStartXfer+0x53c>)
 80119ba:	400b      	ands	r3, r1
 80119bc:	69b9      	ldr	r1, [r7, #24]
 80119be:	0148      	lsls	r0, r1, #5
 80119c0:	69f9      	ldr	r1, [r7, #28]
 80119c2:	4401      	add	r1, r0
 80119c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80119c8:	4313      	orrs	r3, r2
 80119ca:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80119cc:	69bb      	ldr	r3, [r7, #24]
 80119ce:	015a      	lsls	r2, r3, #5
 80119d0:	69fb      	ldr	r3, [r7, #28]
 80119d2:	4413      	add	r3, r2
 80119d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119d8:	691a      	ldr	r2, [r3, #16]
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	6a1b      	ldr	r3, [r3, #32]
 80119de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80119e2:	69b9      	ldr	r1, [r7, #24]
 80119e4:	0148      	lsls	r0, r1, #5
 80119e6:	69f9      	ldr	r1, [r7, #28]
 80119e8:	4401      	add	r1, r0
 80119ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80119ee:	4313      	orrs	r3, r2
 80119f0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80119f2:	79fb      	ldrb	r3, [r7, #7]
 80119f4:	2b01      	cmp	r3, #1
 80119f6:	d10d      	bne.n	8011a14 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	68db      	ldr	r3, [r3, #12]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d009      	beq.n	8011a14 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	68d9      	ldr	r1, [r3, #12]
 8011a04:	69bb      	ldr	r3, [r7, #24]
 8011a06:	015a      	lsls	r2, r3, #5
 8011a08:	69fb      	ldr	r3, [r7, #28]
 8011a0a:	4413      	add	r3, r2
 8011a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a10:	460a      	mov	r2, r1
 8011a12:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	791b      	ldrb	r3, [r3, #4]
 8011a18:	2b01      	cmp	r3, #1
 8011a1a:	d128      	bne.n	8011a6e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011a1c:	69fb      	ldr	r3, [r7, #28]
 8011a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011a22:	689b      	ldr	r3, [r3, #8]
 8011a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d110      	bne.n	8011a4e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011a2c:	69bb      	ldr	r3, [r7, #24]
 8011a2e:	015a      	lsls	r2, r3, #5
 8011a30:	69fb      	ldr	r3, [r7, #28]
 8011a32:	4413      	add	r3, r2
 8011a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	69ba      	ldr	r2, [r7, #24]
 8011a3c:	0151      	lsls	r1, r2, #5
 8011a3e:	69fa      	ldr	r2, [r7, #28]
 8011a40:	440a      	add	r2, r1
 8011a42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a46:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011a4a:	6013      	str	r3, [r2, #0]
 8011a4c:	e00f      	b.n	8011a6e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011a4e:	69bb      	ldr	r3, [r7, #24]
 8011a50:	015a      	lsls	r2, r3, #5
 8011a52:	69fb      	ldr	r3, [r7, #28]
 8011a54:	4413      	add	r3, r2
 8011a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	69ba      	ldr	r2, [r7, #24]
 8011a5e:	0151      	lsls	r1, r2, #5
 8011a60:	69fa      	ldr	r2, [r7, #28]
 8011a62:	440a      	add	r2, r1
 8011a64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011a6c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011a6e:	69bb      	ldr	r3, [r7, #24]
 8011a70:	015a      	lsls	r2, r3, #5
 8011a72:	69fb      	ldr	r3, [r7, #28]
 8011a74:	4413      	add	r3, r2
 8011a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	69ba      	ldr	r2, [r7, #24]
 8011a7e:	0151      	lsls	r1, r2, #5
 8011a80:	69fa      	ldr	r2, [r7, #28]
 8011a82:	440a      	add	r2, r1
 8011a84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a88:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011a8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011a8e:	2300      	movs	r3, #0
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	3720      	adds	r7, #32
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}
 8011a98:	fff80000 	.word	0xfff80000
 8011a9c:	e007ffff 	.word	0xe007ffff
 8011aa0:	1ff80000 	.word	0x1ff80000

08011aa4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	b087      	sub	sp, #28
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	785b      	ldrb	r3, [r3, #1]
 8011abe:	2b01      	cmp	r3, #1
 8011ac0:	d14a      	bne.n	8011b58 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	015a      	lsls	r2, r3, #5
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	4413      	add	r3, r2
 8011acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011ada:	f040 8086 	bne.w	8011bea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	015a      	lsls	r2, r3, #5
 8011ae4:	693b      	ldr	r3, [r7, #16]
 8011ae6:	4413      	add	r3, r2
 8011ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	683a      	ldr	r2, [r7, #0]
 8011af0:	7812      	ldrb	r2, [r2, #0]
 8011af2:	0151      	lsls	r1, r2, #5
 8011af4:	693a      	ldr	r2, [r7, #16]
 8011af6:	440a      	add	r2, r1
 8011af8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011afc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011b00:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	781b      	ldrb	r3, [r3, #0]
 8011b06:	015a      	lsls	r2, r3, #5
 8011b08:	693b      	ldr	r3, [r7, #16]
 8011b0a:	4413      	add	r3, r2
 8011b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	683a      	ldr	r2, [r7, #0]
 8011b14:	7812      	ldrb	r2, [r2, #0]
 8011b16:	0151      	lsls	r1, r2, #5
 8011b18:	693a      	ldr	r2, [r7, #16]
 8011b1a:	440a      	add	r2, r1
 8011b1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011b20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011b24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	3301      	adds	r3, #1
 8011b2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011b32:	4293      	cmp	r3, r2
 8011b34:	d902      	bls.n	8011b3c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8011b36:	2301      	movs	r3, #1
 8011b38:	75fb      	strb	r3, [r7, #23]
          break;
 8011b3a:	e056      	b.n	8011bea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	015a      	lsls	r2, r3, #5
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	4413      	add	r3, r2
 8011b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011b50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011b54:	d0e7      	beq.n	8011b26 <USB_EPStopXfer+0x82>
 8011b56:	e048      	b.n	8011bea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	781b      	ldrb	r3, [r3, #0]
 8011b5c:	015a      	lsls	r2, r3, #5
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	4413      	add	r3, r2
 8011b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011b70:	d13b      	bne.n	8011bea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	781b      	ldrb	r3, [r3, #0]
 8011b76:	015a      	lsls	r2, r3, #5
 8011b78:	693b      	ldr	r3, [r7, #16]
 8011b7a:	4413      	add	r3, r2
 8011b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	683a      	ldr	r2, [r7, #0]
 8011b84:	7812      	ldrb	r2, [r2, #0]
 8011b86:	0151      	lsls	r1, r2, #5
 8011b88:	693a      	ldr	r2, [r7, #16]
 8011b8a:	440a      	add	r2, r1
 8011b8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011b90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011b94:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	781b      	ldrb	r3, [r3, #0]
 8011b9a:	015a      	lsls	r2, r3, #5
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	4413      	add	r3, r2
 8011ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	683a      	ldr	r2, [r7, #0]
 8011ba8:	7812      	ldrb	r2, [r2, #0]
 8011baa:	0151      	lsls	r1, r2, #5
 8011bac:	693a      	ldr	r2, [r7, #16]
 8011bae:	440a      	add	r2, r1
 8011bb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011bb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011bb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	3301      	adds	r3, #1
 8011bbe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011bc6:	4293      	cmp	r3, r2
 8011bc8:	d902      	bls.n	8011bd0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8011bca:	2301      	movs	r3, #1
 8011bcc:	75fb      	strb	r3, [r7, #23]
          break;
 8011bce:	e00c      	b.n	8011bea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	781b      	ldrb	r3, [r3, #0]
 8011bd4:	015a      	lsls	r2, r3, #5
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	4413      	add	r3, r2
 8011bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011be4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011be8:	d0e7      	beq.n	8011bba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8011bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	371c      	adds	r7, #28
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf6:	4770      	bx	lr

08011bf8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011bf8:	b480      	push	{r7}
 8011bfa:	b089      	sub	sp, #36	@ 0x24
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	60f8      	str	r0, [r7, #12]
 8011c00:	60b9      	str	r1, [r7, #8]
 8011c02:	4611      	mov	r1, r2
 8011c04:	461a      	mov	r2, r3
 8011c06:	460b      	mov	r3, r1
 8011c08:	71fb      	strb	r3, [r7, #7]
 8011c0a:	4613      	mov	r3, r2
 8011c0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011c16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d123      	bne.n	8011c66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011c1e:	88bb      	ldrh	r3, [r7, #4]
 8011c20:	3303      	adds	r3, #3
 8011c22:	089b      	lsrs	r3, r3, #2
 8011c24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011c26:	2300      	movs	r3, #0
 8011c28:	61bb      	str	r3, [r7, #24]
 8011c2a:	e018      	b.n	8011c5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011c2c:	79fb      	ldrb	r3, [r7, #7]
 8011c2e:	031a      	lsls	r2, r3, #12
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	4413      	add	r3, r2
 8011c34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011c38:	461a      	mov	r2, r3
 8011c3a:	69fb      	ldr	r3, [r7, #28]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011c40:	69fb      	ldr	r3, [r7, #28]
 8011c42:	3301      	adds	r3, #1
 8011c44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011c46:	69fb      	ldr	r3, [r7, #28]
 8011c48:	3301      	adds	r3, #1
 8011c4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011c4c:	69fb      	ldr	r3, [r7, #28]
 8011c4e:	3301      	adds	r3, #1
 8011c50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011c52:	69fb      	ldr	r3, [r7, #28]
 8011c54:	3301      	adds	r3, #1
 8011c56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011c58:	69bb      	ldr	r3, [r7, #24]
 8011c5a:	3301      	adds	r3, #1
 8011c5c:	61bb      	str	r3, [r7, #24]
 8011c5e:	69ba      	ldr	r2, [r7, #24]
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d3e2      	bcc.n	8011c2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011c66:	2300      	movs	r3, #0
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3724      	adds	r7, #36	@ 0x24
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c72:	4770      	bx	lr

08011c74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011c74:	b480      	push	{r7}
 8011c76:	b08b      	sub	sp, #44	@ 0x2c
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	60f8      	str	r0, [r7, #12]
 8011c7c:	60b9      	str	r1, [r7, #8]
 8011c7e:	4613      	mov	r3, r2
 8011c80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011c8a:	88fb      	ldrh	r3, [r7, #6]
 8011c8c:	089b      	lsrs	r3, r3, #2
 8011c8e:	b29b      	uxth	r3, r3
 8011c90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011c92:	88fb      	ldrh	r3, [r7, #6]
 8011c94:	f003 0303 	and.w	r3, r3, #3
 8011c98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	623b      	str	r3, [r7, #32]
 8011c9e:	e014      	b.n	8011cca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011ca0:	69bb      	ldr	r3, [r7, #24]
 8011ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011ca6:	681a      	ldr	r2, [r3, #0]
 8011ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011caa:	601a      	str	r2, [r3, #0]
    pDest++;
 8011cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cae:	3301      	adds	r3, #1
 8011cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cb4:	3301      	adds	r3, #1
 8011cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cba:	3301      	adds	r3, #1
 8011cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cc0:	3301      	adds	r3, #1
 8011cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011cc4:	6a3b      	ldr	r3, [r7, #32]
 8011cc6:	3301      	adds	r3, #1
 8011cc8:	623b      	str	r3, [r7, #32]
 8011cca:	6a3a      	ldr	r2, [r7, #32]
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	429a      	cmp	r2, r3
 8011cd0:	d3e6      	bcc.n	8011ca0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011cd2:	8bfb      	ldrh	r3, [r7, #30]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d01e      	beq.n	8011d16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011cdc:	69bb      	ldr	r3, [r7, #24]
 8011cde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011ce2:	461a      	mov	r2, r3
 8011ce4:	f107 0310 	add.w	r3, r7, #16
 8011ce8:	6812      	ldr	r2, [r2, #0]
 8011cea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011cec:	693a      	ldr	r2, [r7, #16]
 8011cee:	6a3b      	ldr	r3, [r7, #32]
 8011cf0:	b2db      	uxtb	r3, r3
 8011cf2:	00db      	lsls	r3, r3, #3
 8011cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8011cf8:	b2da      	uxtb	r2, r3
 8011cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cfc:	701a      	strb	r2, [r3, #0]
      i++;
 8011cfe:	6a3b      	ldr	r3, [r7, #32]
 8011d00:	3301      	adds	r3, #1
 8011d02:	623b      	str	r3, [r7, #32]
      pDest++;
 8011d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d06:	3301      	adds	r3, #1
 8011d08:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8011d0a:	8bfb      	ldrh	r3, [r7, #30]
 8011d0c:	3b01      	subs	r3, #1
 8011d0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011d10:	8bfb      	ldrh	r3, [r7, #30]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d1ea      	bne.n	8011cec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	372c      	adds	r7, #44	@ 0x2c
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d22:	4770      	bx	lr

08011d24 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011d24:	b480      	push	{r7}
 8011d26:	b085      	sub	sp, #20
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
 8011d2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	781b      	ldrb	r3, [r3, #0]
 8011d36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	785b      	ldrb	r3, [r3, #1]
 8011d3c:	2b01      	cmp	r3, #1
 8011d3e:	d12c      	bne.n	8011d9a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	015a      	lsls	r2, r3, #5
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	4413      	add	r3, r2
 8011d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	db12      	blt.n	8011d78 <USB_EPSetStall+0x54>
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d00f      	beq.n	8011d78 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	015a      	lsls	r2, r3, #5
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	4413      	add	r3, r2
 8011d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	68ba      	ldr	r2, [r7, #8]
 8011d68:	0151      	lsls	r1, r2, #5
 8011d6a:	68fa      	ldr	r2, [r7, #12]
 8011d6c:	440a      	add	r2, r1
 8011d6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011d72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011d76:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	015a      	lsls	r2, r3, #5
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	4413      	add	r3, r2
 8011d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	68ba      	ldr	r2, [r7, #8]
 8011d88:	0151      	lsls	r1, r2, #5
 8011d8a:	68fa      	ldr	r2, [r7, #12]
 8011d8c:	440a      	add	r2, r1
 8011d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011d92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011d96:	6013      	str	r3, [r2, #0]
 8011d98:	e02b      	b.n	8011df2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	015a      	lsls	r2, r3, #5
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	4413      	add	r3, r2
 8011da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	db12      	blt.n	8011dd2 <USB_EPSetStall+0xae>
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d00f      	beq.n	8011dd2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	015a      	lsls	r2, r3, #5
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	4413      	add	r3, r2
 8011dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	68ba      	ldr	r2, [r7, #8]
 8011dc2:	0151      	lsls	r1, r2, #5
 8011dc4:	68fa      	ldr	r2, [r7, #12]
 8011dc6:	440a      	add	r2, r1
 8011dc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011dcc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011dd0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	015a      	lsls	r2, r3, #5
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	4413      	add	r3, r2
 8011dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	68ba      	ldr	r2, [r7, #8]
 8011de2:	0151      	lsls	r1, r2, #5
 8011de4:	68fa      	ldr	r2, [r7, #12]
 8011de6:	440a      	add	r2, r1
 8011de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011dec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011df0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011df2:	2300      	movs	r3, #0
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3714      	adds	r7, #20
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfe:	4770      	bx	lr

08011e00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011e00:	b480      	push	{r7}
 8011e02:	b085      	sub	sp, #20
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	781b      	ldrb	r3, [r3, #0]
 8011e12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	785b      	ldrb	r3, [r3, #1]
 8011e18:	2b01      	cmp	r3, #1
 8011e1a:	d128      	bne.n	8011e6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	015a      	lsls	r2, r3, #5
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	4413      	add	r3, r2
 8011e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	68ba      	ldr	r2, [r7, #8]
 8011e2c:	0151      	lsls	r1, r2, #5
 8011e2e:	68fa      	ldr	r2, [r7, #12]
 8011e30:	440a      	add	r2, r1
 8011e32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011e36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011e3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	791b      	ldrb	r3, [r3, #4]
 8011e40:	2b03      	cmp	r3, #3
 8011e42:	d003      	beq.n	8011e4c <USB_EPClearStall+0x4c>
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	791b      	ldrb	r3, [r3, #4]
 8011e48:	2b02      	cmp	r3, #2
 8011e4a:	d138      	bne.n	8011ebe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	015a      	lsls	r2, r3, #5
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	4413      	add	r3, r2
 8011e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	68ba      	ldr	r2, [r7, #8]
 8011e5c:	0151      	lsls	r1, r2, #5
 8011e5e:	68fa      	ldr	r2, [r7, #12]
 8011e60:	440a      	add	r2, r1
 8011e62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011e6a:	6013      	str	r3, [r2, #0]
 8011e6c:	e027      	b.n	8011ebe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	015a      	lsls	r2, r3, #5
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	4413      	add	r3, r2
 8011e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	68ba      	ldr	r2, [r7, #8]
 8011e7e:	0151      	lsls	r1, r2, #5
 8011e80:	68fa      	ldr	r2, [r7, #12]
 8011e82:	440a      	add	r2, r1
 8011e84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011e88:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011e8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	791b      	ldrb	r3, [r3, #4]
 8011e92:	2b03      	cmp	r3, #3
 8011e94:	d003      	beq.n	8011e9e <USB_EPClearStall+0x9e>
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	791b      	ldrb	r3, [r3, #4]
 8011e9a:	2b02      	cmp	r3, #2
 8011e9c:	d10f      	bne.n	8011ebe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011e9e:	68bb      	ldr	r3, [r7, #8]
 8011ea0:	015a      	lsls	r2, r3, #5
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	4413      	add	r3, r2
 8011ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	68ba      	ldr	r2, [r7, #8]
 8011eae:	0151      	lsls	r1, r2, #5
 8011eb0:	68fa      	ldr	r2, [r7, #12]
 8011eb2:	440a      	add	r2, r1
 8011eb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011ebc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011ebe:	2300      	movs	r3, #0
}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3714      	adds	r7, #20
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eca:	4770      	bx	lr

08011ecc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011ecc:	b480      	push	{r7}
 8011ece:	b085      	sub	sp, #20
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	460b      	mov	r3, r1
 8011ed6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	68fa      	ldr	r2, [r7, #12]
 8011ee6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011eea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8011eee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ef6:	681a      	ldr	r2, [r3, #0]
 8011ef8:	78fb      	ldrb	r3, [r7, #3]
 8011efa:	011b      	lsls	r3, r3, #4
 8011efc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8011f00:	68f9      	ldr	r1, [r7, #12]
 8011f02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011f06:	4313      	orrs	r3, r2
 8011f08:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011f0a:	2300      	movs	r3, #0
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3714      	adds	r7, #20
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr

08011f18 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011f18:	b480      	push	{r7}
 8011f1a:	b085      	sub	sp, #20
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	68fa      	ldr	r2, [r7, #12]
 8011f2e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011f32:	f023 0303 	bic.w	r3, r3, #3
 8011f36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f3e:	685b      	ldr	r3, [r3, #4]
 8011f40:	68fa      	ldr	r2, [r7, #12]
 8011f42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011f46:	f023 0302 	bic.w	r3, r3, #2
 8011f4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011f4c:	2300      	movs	r3, #0
}
 8011f4e:	4618      	mov	r0, r3
 8011f50:	3714      	adds	r7, #20
 8011f52:	46bd      	mov	sp, r7
 8011f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f58:	4770      	bx	lr

08011f5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011f5a:	b480      	push	{r7}
 8011f5c:	b085      	sub	sp, #20
 8011f5e:	af00      	add	r7, sp, #0
 8011f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	68fa      	ldr	r2, [r7, #12]
 8011f70:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011f74:	f023 0303 	bic.w	r3, r3, #3
 8011f78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f80:	685b      	ldr	r3, [r3, #4]
 8011f82:	68fa      	ldr	r2, [r7, #12]
 8011f84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011f88:	f043 0302 	orr.w	r3, r3, #2
 8011f8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011f8e:	2300      	movs	r3, #0
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3714      	adds	r7, #20
 8011f94:	46bd      	mov	sp, r7
 8011f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9a:	4770      	bx	lr

08011f9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	b085      	sub	sp, #20
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	695b      	ldr	r3, [r3, #20]
 8011fa8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	699b      	ldr	r3, [r3, #24]
 8011fae:	68fa      	ldr	r2, [r7, #12]
 8011fb0:	4013      	ands	r3, r2
 8011fb2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	3714      	adds	r7, #20
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc0:	4770      	bx	lr

08011fc2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011fc2:	b480      	push	{r7}
 8011fc4:	b085      	sub	sp, #20
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011fd4:	699b      	ldr	r3, [r3, #24]
 8011fd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011fde:	69db      	ldr	r3, [r3, #28]
 8011fe0:	68ba      	ldr	r2, [r7, #8]
 8011fe2:	4013      	ands	r3, r2
 8011fe4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	0c1b      	lsrs	r3, r3, #16
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	3714      	adds	r7, #20
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff4:	4770      	bx	lr

08011ff6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011ff6:	b480      	push	{r7}
 8011ff8:	b085      	sub	sp, #20
 8011ffa:	af00      	add	r7, sp, #0
 8011ffc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012008:	699b      	ldr	r3, [r3, #24]
 801200a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012012:	69db      	ldr	r3, [r3, #28]
 8012014:	68ba      	ldr	r2, [r7, #8]
 8012016:	4013      	ands	r3, r2
 8012018:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	b29b      	uxth	r3, r3
}
 801201e:	4618      	mov	r0, r3
 8012020:	3714      	adds	r7, #20
 8012022:	46bd      	mov	sp, r7
 8012024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012028:	4770      	bx	lr

0801202a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801202a:	b480      	push	{r7}
 801202c:	b085      	sub	sp, #20
 801202e:	af00      	add	r7, sp, #0
 8012030:	6078      	str	r0, [r7, #4]
 8012032:	460b      	mov	r3, r1
 8012034:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801203a:	78fb      	ldrb	r3, [r7, #3]
 801203c:	015a      	lsls	r2, r3, #5
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	4413      	add	r3, r2
 8012042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012046:	689b      	ldr	r3, [r3, #8]
 8012048:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012050:	695b      	ldr	r3, [r3, #20]
 8012052:	68ba      	ldr	r2, [r7, #8]
 8012054:	4013      	ands	r3, r2
 8012056:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012058:	68bb      	ldr	r3, [r7, #8]
}
 801205a:	4618      	mov	r0, r3
 801205c:	3714      	adds	r7, #20
 801205e:	46bd      	mov	sp, r7
 8012060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012064:	4770      	bx	lr

08012066 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012066:	b480      	push	{r7}
 8012068:	b087      	sub	sp, #28
 801206a:	af00      	add	r7, sp, #0
 801206c:	6078      	str	r0, [r7, #4]
 801206e:	460b      	mov	r3, r1
 8012070:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801207c:	691b      	ldr	r3, [r3, #16]
 801207e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012080:	697b      	ldr	r3, [r7, #20]
 8012082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012088:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801208a:	78fb      	ldrb	r3, [r7, #3]
 801208c:	f003 030f 	and.w	r3, r3, #15
 8012090:	68fa      	ldr	r2, [r7, #12]
 8012092:	fa22 f303 	lsr.w	r3, r2, r3
 8012096:	01db      	lsls	r3, r3, #7
 8012098:	b2db      	uxtb	r3, r3
 801209a:	693a      	ldr	r2, [r7, #16]
 801209c:	4313      	orrs	r3, r2
 801209e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80120a0:	78fb      	ldrb	r3, [r7, #3]
 80120a2:	015a      	lsls	r2, r3, #5
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	4413      	add	r3, r2
 80120a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120ac:	689b      	ldr	r3, [r3, #8]
 80120ae:	693a      	ldr	r2, [r7, #16]
 80120b0:	4013      	ands	r3, r2
 80120b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80120b4:	68bb      	ldr	r3, [r7, #8]
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	371c      	adds	r7, #28
 80120ba:	46bd      	mov	sp, r7
 80120bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c0:	4770      	bx	lr

080120c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80120c2:	b480      	push	{r7}
 80120c4:	b083      	sub	sp, #12
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	695b      	ldr	r3, [r3, #20]
 80120ce:	f003 0301 	and.w	r3, r3, #1
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	370c      	adds	r7, #12
 80120d6:	46bd      	mov	sp, r7
 80120d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120dc:	4770      	bx	lr
	...

080120e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80120e0:	b480      	push	{r7}
 80120e2:	b085      	sub	sp, #20
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120f2:	681a      	ldr	r2, [r3, #0]
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120fa:	4619      	mov	r1, r3
 80120fc:	4b09      	ldr	r3, [pc, #36]	@ (8012124 <USB_ActivateSetup+0x44>)
 80120fe:	4013      	ands	r3, r2
 8012100:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	68fa      	ldr	r2, [r7, #12]
 801210c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012114:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012116:	2300      	movs	r3, #0
}
 8012118:	4618      	mov	r0, r3
 801211a:	3714      	adds	r7, #20
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr
 8012124:	fffff800 	.word	0xfffff800

08012128 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8012128:	b480      	push	{r7}
 801212a:	b087      	sub	sp, #28
 801212c:	af00      	add	r7, sp, #0
 801212e:	60f8      	str	r0, [r7, #12]
 8012130:	460b      	mov	r3, r1
 8012132:	607a      	str	r2, [r7, #4]
 8012134:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	333c      	adds	r3, #60	@ 0x3c
 801213e:	3304      	adds	r3, #4
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012144:	693b      	ldr	r3, [r7, #16]
 8012146:	4a26      	ldr	r2, [pc, #152]	@ (80121e0 <USB_EP0_OutStart+0xb8>)
 8012148:	4293      	cmp	r3, r2
 801214a:	d90a      	bls.n	8012162 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012158:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801215c:	d101      	bne.n	8012162 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801215e:	2300      	movs	r3, #0
 8012160:	e037      	b.n	80121d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012168:	461a      	mov	r2, r3
 801216a:	2300      	movs	r3, #0
 801216c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012174:	691b      	ldr	r3, [r3, #16]
 8012176:	697a      	ldr	r2, [r7, #20]
 8012178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801217c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012180:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012188:	691b      	ldr	r3, [r3, #16]
 801218a:	697a      	ldr	r2, [r7, #20]
 801218c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012190:	f043 0318 	orr.w	r3, r3, #24
 8012194:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801219c:	691b      	ldr	r3, [r3, #16]
 801219e:	697a      	ldr	r2, [r7, #20]
 80121a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80121a4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80121a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80121aa:	7afb      	ldrb	r3, [r7, #11]
 80121ac:	2b01      	cmp	r3, #1
 80121ae:	d10f      	bne.n	80121d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121b6:	461a      	mov	r2, r3
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	697a      	ldr	r2, [r7, #20]
 80121c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80121ca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80121ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80121d0:	2300      	movs	r3, #0
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	371c      	adds	r7, #28
 80121d6:	46bd      	mov	sp, r7
 80121d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121dc:	4770      	bx	lr
 80121de:	bf00      	nop
 80121e0:	4f54300a 	.word	0x4f54300a

080121e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80121e4:	b480      	push	{r7}
 80121e6:	b085      	sub	sp, #20
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80121ec:	2300      	movs	r3, #0
 80121ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	3301      	adds	r3, #1
 80121f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80121fc:	d901      	bls.n	8012202 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80121fe:	2303      	movs	r3, #3
 8012200:	e01b      	b.n	801223a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	691b      	ldr	r3, [r3, #16]
 8012206:	2b00      	cmp	r3, #0
 8012208:	daf2      	bge.n	80121f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801220a:	2300      	movs	r3, #0
 801220c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	691b      	ldr	r3, [r3, #16]
 8012212:	f043 0201 	orr.w	r2, r3, #1
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	3301      	adds	r3, #1
 801221e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012226:	d901      	bls.n	801222c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012228:	2303      	movs	r3, #3
 801222a:	e006      	b.n	801223a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	691b      	ldr	r3, [r3, #16]
 8012230:	f003 0301 	and.w	r3, r3, #1
 8012234:	2b01      	cmp	r3, #1
 8012236:	d0f0      	beq.n	801221a <USB_CoreReset+0x36>

  return HAL_OK;
 8012238:	2300      	movs	r3, #0
}
 801223a:	4618      	mov	r0, r3
 801223c:	3714      	adds	r7, #20
 801223e:	46bd      	mov	sp, r7
 8012240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012244:	4770      	bx	lr
	...

08012248 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b084      	sub	sp, #16
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	460b      	mov	r3, r1
 8012252:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012254:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012258:	f005 fdc4 	bl	8017de4 <USBD_static_malloc>
 801225c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d109      	bne.n	8012278 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	32b0      	adds	r2, #176	@ 0xb0
 801226e:	2100      	movs	r1, #0
 8012270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012274:	2302      	movs	r3, #2
 8012276:	e0d4      	b.n	8012422 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012278:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 801227c:	2100      	movs	r1, #0
 801227e:	68f8      	ldr	r0, [r7, #12]
 8012280:	f005 ff33 	bl	80180ea <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	32b0      	adds	r2, #176	@ 0xb0
 801228e:	68f9      	ldr	r1, [r7, #12]
 8012290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	32b0      	adds	r2, #176	@ 0xb0
 801229e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	7c1b      	ldrb	r3, [r3, #16]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d138      	bne.n	8012322 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80122b0:	4b5e      	ldr	r3, [pc, #376]	@ (801242c <USBD_CDC_Init+0x1e4>)
 80122b2:	7819      	ldrb	r1, [r3, #0]
 80122b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80122b8:	2202      	movs	r2, #2
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f005 fc6f 	bl	8017b9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80122c0:	4b5a      	ldr	r3, [pc, #360]	@ (801242c <USBD_CDC_Init+0x1e4>)
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	f003 020f 	and.w	r2, r3, #15
 80122c8:	6879      	ldr	r1, [r7, #4]
 80122ca:	4613      	mov	r3, r2
 80122cc:	009b      	lsls	r3, r3, #2
 80122ce:	4413      	add	r3, r2
 80122d0:	009b      	lsls	r3, r3, #2
 80122d2:	440b      	add	r3, r1
 80122d4:	3324      	adds	r3, #36	@ 0x24
 80122d6:	2201      	movs	r2, #1
 80122d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80122da:	4b55      	ldr	r3, [pc, #340]	@ (8012430 <USBD_CDC_Init+0x1e8>)
 80122dc:	7819      	ldrb	r1, [r3, #0]
 80122de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80122e2:	2202      	movs	r2, #2
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f005 fc5a 	bl	8017b9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80122ea:	4b51      	ldr	r3, [pc, #324]	@ (8012430 <USBD_CDC_Init+0x1e8>)
 80122ec:	781b      	ldrb	r3, [r3, #0]
 80122ee:	f003 020f 	and.w	r2, r3, #15
 80122f2:	6879      	ldr	r1, [r7, #4]
 80122f4:	4613      	mov	r3, r2
 80122f6:	009b      	lsls	r3, r3, #2
 80122f8:	4413      	add	r3, r2
 80122fa:	009b      	lsls	r3, r3, #2
 80122fc:	440b      	add	r3, r1
 80122fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012302:	2201      	movs	r2, #1
 8012304:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012306:	4b4b      	ldr	r3, [pc, #300]	@ (8012434 <USBD_CDC_Init+0x1ec>)
 8012308:	781b      	ldrb	r3, [r3, #0]
 801230a:	f003 020f 	and.w	r2, r3, #15
 801230e:	6879      	ldr	r1, [r7, #4]
 8012310:	4613      	mov	r3, r2
 8012312:	009b      	lsls	r3, r3, #2
 8012314:	4413      	add	r3, r2
 8012316:	009b      	lsls	r3, r3, #2
 8012318:	440b      	add	r3, r1
 801231a:	3326      	adds	r3, #38	@ 0x26
 801231c:	2210      	movs	r2, #16
 801231e:	801a      	strh	r2, [r3, #0]
 8012320:	e035      	b.n	801238e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012322:	4b42      	ldr	r3, [pc, #264]	@ (801242c <USBD_CDC_Init+0x1e4>)
 8012324:	7819      	ldrb	r1, [r3, #0]
 8012326:	2340      	movs	r3, #64	@ 0x40
 8012328:	2202      	movs	r2, #2
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f005 fc37 	bl	8017b9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012330:	4b3e      	ldr	r3, [pc, #248]	@ (801242c <USBD_CDC_Init+0x1e4>)
 8012332:	781b      	ldrb	r3, [r3, #0]
 8012334:	f003 020f 	and.w	r2, r3, #15
 8012338:	6879      	ldr	r1, [r7, #4]
 801233a:	4613      	mov	r3, r2
 801233c:	009b      	lsls	r3, r3, #2
 801233e:	4413      	add	r3, r2
 8012340:	009b      	lsls	r3, r3, #2
 8012342:	440b      	add	r3, r1
 8012344:	3324      	adds	r3, #36	@ 0x24
 8012346:	2201      	movs	r2, #1
 8012348:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801234a:	4b39      	ldr	r3, [pc, #228]	@ (8012430 <USBD_CDC_Init+0x1e8>)
 801234c:	7819      	ldrb	r1, [r3, #0]
 801234e:	2340      	movs	r3, #64	@ 0x40
 8012350:	2202      	movs	r2, #2
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f005 fc23 	bl	8017b9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012358:	4b35      	ldr	r3, [pc, #212]	@ (8012430 <USBD_CDC_Init+0x1e8>)
 801235a:	781b      	ldrb	r3, [r3, #0]
 801235c:	f003 020f 	and.w	r2, r3, #15
 8012360:	6879      	ldr	r1, [r7, #4]
 8012362:	4613      	mov	r3, r2
 8012364:	009b      	lsls	r3, r3, #2
 8012366:	4413      	add	r3, r2
 8012368:	009b      	lsls	r3, r3, #2
 801236a:	440b      	add	r3, r1
 801236c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012370:	2201      	movs	r2, #1
 8012372:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012374:	4b2f      	ldr	r3, [pc, #188]	@ (8012434 <USBD_CDC_Init+0x1ec>)
 8012376:	781b      	ldrb	r3, [r3, #0]
 8012378:	f003 020f 	and.w	r2, r3, #15
 801237c:	6879      	ldr	r1, [r7, #4]
 801237e:	4613      	mov	r3, r2
 8012380:	009b      	lsls	r3, r3, #2
 8012382:	4413      	add	r3, r2
 8012384:	009b      	lsls	r3, r3, #2
 8012386:	440b      	add	r3, r1
 8012388:	3326      	adds	r3, #38	@ 0x26
 801238a:	2210      	movs	r2, #16
 801238c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801238e:	4b29      	ldr	r3, [pc, #164]	@ (8012434 <USBD_CDC_Init+0x1ec>)
 8012390:	7819      	ldrb	r1, [r3, #0]
 8012392:	2308      	movs	r3, #8
 8012394:	2203      	movs	r2, #3
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f005 fc01 	bl	8017b9e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801239c:	4b25      	ldr	r3, [pc, #148]	@ (8012434 <USBD_CDC_Init+0x1ec>)
 801239e:	781b      	ldrb	r3, [r3, #0]
 80123a0:	f003 020f 	and.w	r2, r3, #15
 80123a4:	6879      	ldr	r1, [r7, #4]
 80123a6:	4613      	mov	r3, r2
 80123a8:	009b      	lsls	r3, r3, #2
 80123aa:	4413      	add	r3, r2
 80123ac:	009b      	lsls	r3, r3, #2
 80123ae:	440b      	add	r3, r1
 80123b0:	3324      	adds	r3, #36	@ 0x24
 80123b2:	2201      	movs	r2, #1
 80123b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	2200      	movs	r2, #0
 80123ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80123c4:	687a      	ldr	r2, [r7, #4]
 80123c6:	33b0      	adds	r3, #176	@ 0xb0
 80123c8:	009b      	lsls	r3, r3, #2
 80123ca:	4413      	add	r3, r2
 80123cc:	685b      	ldr	r3, [r3, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	2200      	movs	r2, #0
 80123d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	2200      	movs	r2, #0
 80123de:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d101      	bne.n	80123f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80123ec:	2302      	movs	r3, #2
 80123ee:	e018      	b.n	8012422 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	7c1b      	ldrb	r3, [r3, #16]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d10a      	bne.n	801240e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80123f8:	4b0d      	ldr	r3, [pc, #52]	@ (8012430 <USBD_CDC_Init+0x1e8>)
 80123fa:	7819      	ldrb	r1, [r3, #0]
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012402:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f005 fcb8 	bl	8017d7c <USBD_LL_PrepareReceive>
 801240c:	e008      	b.n	8012420 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801240e:	4b08      	ldr	r3, [pc, #32]	@ (8012430 <USBD_CDC_Init+0x1e8>)
 8012410:	7819      	ldrb	r1, [r3, #0]
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012418:	2340      	movs	r3, #64	@ 0x40
 801241a:	6878      	ldr	r0, [r7, #4]
 801241c:	f005 fcae 	bl	8017d7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012420:	2300      	movs	r3, #0
}
 8012422:	4618      	mov	r0, r3
 8012424:	3710      	adds	r7, #16
 8012426:	46bd      	mov	sp, r7
 8012428:	bd80      	pop	{r7, pc}
 801242a:	bf00      	nop
 801242c:	2400014b 	.word	0x2400014b
 8012430:	2400014c 	.word	0x2400014c
 8012434:	2400014d 	.word	0x2400014d

08012438 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
 8012440:	460b      	mov	r3, r1
 8012442:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012444:	4b3a      	ldr	r3, [pc, #232]	@ (8012530 <USBD_CDC_DeInit+0xf8>)
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	4619      	mov	r1, r3
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f005 fbcd 	bl	8017bea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012450:	4b37      	ldr	r3, [pc, #220]	@ (8012530 <USBD_CDC_DeInit+0xf8>)
 8012452:	781b      	ldrb	r3, [r3, #0]
 8012454:	f003 020f 	and.w	r2, r3, #15
 8012458:	6879      	ldr	r1, [r7, #4]
 801245a:	4613      	mov	r3, r2
 801245c:	009b      	lsls	r3, r3, #2
 801245e:	4413      	add	r3, r2
 8012460:	009b      	lsls	r3, r3, #2
 8012462:	440b      	add	r3, r1
 8012464:	3324      	adds	r3, #36	@ 0x24
 8012466:	2200      	movs	r2, #0
 8012468:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801246a:	4b32      	ldr	r3, [pc, #200]	@ (8012534 <USBD_CDC_DeInit+0xfc>)
 801246c:	781b      	ldrb	r3, [r3, #0]
 801246e:	4619      	mov	r1, r3
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f005 fbba 	bl	8017bea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012476:	4b2f      	ldr	r3, [pc, #188]	@ (8012534 <USBD_CDC_DeInit+0xfc>)
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	f003 020f 	and.w	r2, r3, #15
 801247e:	6879      	ldr	r1, [r7, #4]
 8012480:	4613      	mov	r3, r2
 8012482:	009b      	lsls	r3, r3, #2
 8012484:	4413      	add	r3, r2
 8012486:	009b      	lsls	r3, r3, #2
 8012488:	440b      	add	r3, r1
 801248a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801248e:	2200      	movs	r2, #0
 8012490:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012492:	4b29      	ldr	r3, [pc, #164]	@ (8012538 <USBD_CDC_DeInit+0x100>)
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	4619      	mov	r1, r3
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f005 fba6 	bl	8017bea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801249e:	4b26      	ldr	r3, [pc, #152]	@ (8012538 <USBD_CDC_DeInit+0x100>)
 80124a0:	781b      	ldrb	r3, [r3, #0]
 80124a2:	f003 020f 	and.w	r2, r3, #15
 80124a6:	6879      	ldr	r1, [r7, #4]
 80124a8:	4613      	mov	r3, r2
 80124aa:	009b      	lsls	r3, r3, #2
 80124ac:	4413      	add	r3, r2
 80124ae:	009b      	lsls	r3, r3, #2
 80124b0:	440b      	add	r3, r1
 80124b2:	3324      	adds	r3, #36	@ 0x24
 80124b4:	2200      	movs	r2, #0
 80124b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80124b8:	4b1f      	ldr	r3, [pc, #124]	@ (8012538 <USBD_CDC_DeInit+0x100>)
 80124ba:	781b      	ldrb	r3, [r3, #0]
 80124bc:	f003 020f 	and.w	r2, r3, #15
 80124c0:	6879      	ldr	r1, [r7, #4]
 80124c2:	4613      	mov	r3, r2
 80124c4:	009b      	lsls	r3, r3, #2
 80124c6:	4413      	add	r3, r2
 80124c8:	009b      	lsls	r3, r3, #2
 80124ca:	440b      	add	r3, r1
 80124cc:	3326      	adds	r3, #38	@ 0x26
 80124ce:	2200      	movs	r2, #0
 80124d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	32b0      	adds	r2, #176	@ 0xb0
 80124dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d01f      	beq.n	8012524 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80124ea:	687a      	ldr	r2, [r7, #4]
 80124ec:	33b0      	adds	r3, #176	@ 0xb0
 80124ee:	009b      	lsls	r3, r3, #2
 80124f0:	4413      	add	r3, r2
 80124f2:	685b      	ldr	r3, [r3, #4]
 80124f4:	685b      	ldr	r3, [r3, #4]
 80124f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	32b0      	adds	r2, #176	@ 0xb0
 8012502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012506:	4618      	mov	r0, r3
 8012508:	f005 fc7a 	bl	8017e00 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	32b0      	adds	r2, #176	@ 0xb0
 8012516:	2100      	movs	r1, #0
 8012518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2200      	movs	r2, #0
 8012520:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012524:	2300      	movs	r3, #0
}
 8012526:	4618      	mov	r0, r3
 8012528:	3708      	adds	r7, #8
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}
 801252e:	bf00      	nop
 8012530:	2400014b 	.word	0x2400014b
 8012534:	2400014c 	.word	0x2400014c
 8012538:	2400014d 	.word	0x2400014d

0801253c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b086      	sub	sp, #24
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
 8012544:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	32b0      	adds	r2, #176	@ 0xb0
 8012550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012554:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012556:	2300      	movs	r3, #0
 8012558:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801255a:	2300      	movs	r3, #0
 801255c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801255e:	2300      	movs	r3, #0
 8012560:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d101      	bne.n	801256c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012568:	2303      	movs	r3, #3
 801256a:	e0bf      	b.n	80126ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012574:	2b00      	cmp	r3, #0
 8012576:	d050      	beq.n	801261a <USBD_CDC_Setup+0xde>
 8012578:	2b20      	cmp	r3, #32
 801257a:	f040 80af 	bne.w	80126dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	88db      	ldrh	r3, [r3, #6]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d03a      	beq.n	80125fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	781b      	ldrb	r3, [r3, #0]
 801258a:	b25b      	sxtb	r3, r3
 801258c:	2b00      	cmp	r3, #0
 801258e:	da1b      	bge.n	80125c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012596:	687a      	ldr	r2, [r7, #4]
 8012598:	33b0      	adds	r3, #176	@ 0xb0
 801259a:	009b      	lsls	r3, r3, #2
 801259c:	4413      	add	r3, r2
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	689b      	ldr	r3, [r3, #8]
 80125a2:	683a      	ldr	r2, [r7, #0]
 80125a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80125a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80125a8:	683a      	ldr	r2, [r7, #0]
 80125aa:	88d2      	ldrh	r2, [r2, #6]
 80125ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	88db      	ldrh	r3, [r3, #6]
 80125b2:	2b07      	cmp	r3, #7
 80125b4:	bf28      	it	cs
 80125b6:	2307      	movcs	r3, #7
 80125b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80125ba:	693b      	ldr	r3, [r7, #16]
 80125bc:	89fa      	ldrh	r2, [r7, #14]
 80125be:	4619      	mov	r1, r3
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f001 fdd9 	bl	8014178 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80125c6:	e090      	b.n	80126ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	785a      	ldrb	r2, [r3, #1]
 80125cc:	693b      	ldr	r3, [r7, #16]
 80125ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	88db      	ldrh	r3, [r3, #6]
 80125d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80125d8:	d803      	bhi.n	80125e2 <USBD_CDC_Setup+0xa6>
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	88db      	ldrh	r3, [r3, #6]
 80125de:	b2da      	uxtb	r2, r3
 80125e0:	e000      	b.n	80125e4 <USBD_CDC_Setup+0xa8>
 80125e2:	2240      	movs	r2, #64	@ 0x40
 80125e4:	693b      	ldr	r3, [r7, #16]
 80125e6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80125ea:	6939      	ldr	r1, [r7, #16]
 80125ec:	693b      	ldr	r3, [r7, #16]
 80125ee:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80125f2:	461a      	mov	r2, r3
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f001 fdeb 	bl	80141d0 <USBD_CtlPrepareRx>
      break;
 80125fa:	e076      	b.n	80126ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012602:	687a      	ldr	r2, [r7, #4]
 8012604:	33b0      	adds	r3, #176	@ 0xb0
 8012606:	009b      	lsls	r3, r3, #2
 8012608:	4413      	add	r3, r2
 801260a:	685b      	ldr	r3, [r3, #4]
 801260c:	689b      	ldr	r3, [r3, #8]
 801260e:	683a      	ldr	r2, [r7, #0]
 8012610:	7850      	ldrb	r0, [r2, #1]
 8012612:	2200      	movs	r2, #0
 8012614:	6839      	ldr	r1, [r7, #0]
 8012616:	4798      	blx	r3
      break;
 8012618:	e067      	b.n	80126ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	785b      	ldrb	r3, [r3, #1]
 801261e:	2b0b      	cmp	r3, #11
 8012620:	d851      	bhi.n	80126c6 <USBD_CDC_Setup+0x18a>
 8012622:	a201      	add	r2, pc, #4	@ (adr r2, 8012628 <USBD_CDC_Setup+0xec>)
 8012624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012628:	08012659 	.word	0x08012659
 801262c:	080126d5 	.word	0x080126d5
 8012630:	080126c7 	.word	0x080126c7
 8012634:	080126c7 	.word	0x080126c7
 8012638:	080126c7 	.word	0x080126c7
 801263c:	080126c7 	.word	0x080126c7
 8012640:	080126c7 	.word	0x080126c7
 8012644:	080126c7 	.word	0x080126c7
 8012648:	080126c7 	.word	0x080126c7
 801264c:	080126c7 	.word	0x080126c7
 8012650:	08012683 	.word	0x08012683
 8012654:	080126ad 	.word	0x080126ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801265e:	b2db      	uxtb	r3, r3
 8012660:	2b03      	cmp	r3, #3
 8012662:	d107      	bne.n	8012674 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012664:	f107 030a 	add.w	r3, r7, #10
 8012668:	2202      	movs	r2, #2
 801266a:	4619      	mov	r1, r3
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f001 fd83 	bl	8014178 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012672:	e032      	b.n	80126da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012674:	6839      	ldr	r1, [r7, #0]
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f001 fd01 	bl	801407e <USBD_CtlError>
            ret = USBD_FAIL;
 801267c:	2303      	movs	r3, #3
 801267e:	75fb      	strb	r3, [r7, #23]
          break;
 8012680:	e02b      	b.n	80126da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012688:	b2db      	uxtb	r3, r3
 801268a:	2b03      	cmp	r3, #3
 801268c:	d107      	bne.n	801269e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801268e:	f107 030d 	add.w	r3, r7, #13
 8012692:	2201      	movs	r2, #1
 8012694:	4619      	mov	r1, r3
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	f001 fd6e 	bl	8014178 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801269c:	e01d      	b.n	80126da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801269e:	6839      	ldr	r1, [r7, #0]
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f001 fcec 	bl	801407e <USBD_CtlError>
            ret = USBD_FAIL;
 80126a6:	2303      	movs	r3, #3
 80126a8:	75fb      	strb	r3, [r7, #23]
          break;
 80126aa:	e016      	b.n	80126da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80126b2:	b2db      	uxtb	r3, r3
 80126b4:	2b03      	cmp	r3, #3
 80126b6:	d00f      	beq.n	80126d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80126b8:	6839      	ldr	r1, [r7, #0]
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f001 fcdf 	bl	801407e <USBD_CtlError>
            ret = USBD_FAIL;
 80126c0:	2303      	movs	r3, #3
 80126c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80126c4:	e008      	b.n	80126d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80126c6:	6839      	ldr	r1, [r7, #0]
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f001 fcd8 	bl	801407e <USBD_CtlError>
          ret = USBD_FAIL;
 80126ce:	2303      	movs	r3, #3
 80126d0:	75fb      	strb	r3, [r7, #23]
          break;
 80126d2:	e002      	b.n	80126da <USBD_CDC_Setup+0x19e>
          break;
 80126d4:	bf00      	nop
 80126d6:	e008      	b.n	80126ea <USBD_CDC_Setup+0x1ae>
          break;
 80126d8:	bf00      	nop
      }
      break;
 80126da:	e006      	b.n	80126ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80126dc:	6839      	ldr	r1, [r7, #0]
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f001 fccd 	bl	801407e <USBD_CtlError>
      ret = USBD_FAIL;
 80126e4:	2303      	movs	r3, #3
 80126e6:	75fb      	strb	r3, [r7, #23]
      break;
 80126e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80126ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80126ec:	4618      	mov	r0, r3
 80126ee:	3718      	adds	r7, #24
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bd80      	pop	{r7, pc}

080126f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b084      	sub	sp, #16
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
 80126fc:	460b      	mov	r3, r1
 80126fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012706:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	32b0      	adds	r2, #176	@ 0xb0
 8012712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d101      	bne.n	801271e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801271a:	2303      	movs	r3, #3
 801271c:	e065      	b.n	80127ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	32b0      	adds	r2, #176	@ 0xb0
 8012728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801272c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801272e:	78fb      	ldrb	r3, [r7, #3]
 8012730:	f003 020f 	and.w	r2, r3, #15
 8012734:	6879      	ldr	r1, [r7, #4]
 8012736:	4613      	mov	r3, r2
 8012738:	009b      	lsls	r3, r3, #2
 801273a:	4413      	add	r3, r2
 801273c:	009b      	lsls	r3, r3, #2
 801273e:	440b      	add	r3, r1
 8012740:	3318      	adds	r3, #24
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d02f      	beq.n	80127a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8012748:	78fb      	ldrb	r3, [r7, #3]
 801274a:	f003 020f 	and.w	r2, r3, #15
 801274e:	6879      	ldr	r1, [r7, #4]
 8012750:	4613      	mov	r3, r2
 8012752:	009b      	lsls	r3, r3, #2
 8012754:	4413      	add	r3, r2
 8012756:	009b      	lsls	r3, r3, #2
 8012758:	440b      	add	r3, r1
 801275a:	3318      	adds	r3, #24
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	78fb      	ldrb	r3, [r7, #3]
 8012760:	f003 010f 	and.w	r1, r3, #15
 8012764:	68f8      	ldr	r0, [r7, #12]
 8012766:	460b      	mov	r3, r1
 8012768:	00db      	lsls	r3, r3, #3
 801276a:	440b      	add	r3, r1
 801276c:	009b      	lsls	r3, r3, #2
 801276e:	4403      	add	r3, r0
 8012770:	331c      	adds	r3, #28
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	fbb2 f1f3 	udiv	r1, r2, r3
 8012778:	fb01 f303 	mul.w	r3, r1, r3
 801277c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801277e:	2b00      	cmp	r3, #0
 8012780:	d112      	bne.n	80127a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8012782:	78fb      	ldrb	r3, [r7, #3]
 8012784:	f003 020f 	and.w	r2, r3, #15
 8012788:	6879      	ldr	r1, [r7, #4]
 801278a:	4613      	mov	r3, r2
 801278c:	009b      	lsls	r3, r3, #2
 801278e:	4413      	add	r3, r2
 8012790:	009b      	lsls	r3, r3, #2
 8012792:	440b      	add	r3, r1
 8012794:	3318      	adds	r3, #24
 8012796:	2200      	movs	r2, #0
 8012798:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801279a:	78f9      	ldrb	r1, [r7, #3]
 801279c:	2300      	movs	r3, #0
 801279e:	2200      	movs	r2, #0
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f005 faca 	bl	8017d3a <USBD_LL_Transmit>
 80127a6:	e01f      	b.n	80127e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	2200      	movs	r2, #0
 80127ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80127b6:	687a      	ldr	r2, [r7, #4]
 80127b8:	33b0      	adds	r3, #176	@ 0xb0
 80127ba:	009b      	lsls	r3, r3, #2
 80127bc:	4413      	add	r3, r2
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	691b      	ldr	r3, [r3, #16]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d010      	beq.n	80127e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80127cc:	687a      	ldr	r2, [r7, #4]
 80127ce:	33b0      	adds	r3, #176	@ 0xb0
 80127d0:	009b      	lsls	r3, r3, #2
 80127d2:	4413      	add	r3, r2
 80127d4:	685b      	ldr	r3, [r3, #4]
 80127d6:	691b      	ldr	r3, [r3, #16]
 80127d8:	68ba      	ldr	r2, [r7, #8]
 80127da:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80127de:	68ba      	ldr	r2, [r7, #8]
 80127e0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80127e4:	78fa      	ldrb	r2, [r7, #3]
 80127e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80127e8:	2300      	movs	r3, #0
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3710      	adds	r7, #16
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}

080127f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80127f2:	b580      	push	{r7, lr}
 80127f4:	b084      	sub	sp, #16
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	6078      	str	r0, [r7, #4]
 80127fa:	460b      	mov	r3, r1
 80127fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	32b0      	adds	r2, #176	@ 0xb0
 8012808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801280c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	32b0      	adds	r2, #176	@ 0xb0
 8012818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d101      	bne.n	8012824 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012820:	2303      	movs	r3, #3
 8012822:	e01a      	b.n	801285a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012824:	78fb      	ldrb	r3, [r7, #3]
 8012826:	4619      	mov	r1, r3
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f005 fac8 	bl	8017dbe <USBD_LL_GetRxDataSize>
 801282e:	4602      	mov	r2, r0
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801283c:	687a      	ldr	r2, [r7, #4]
 801283e:	33b0      	adds	r3, #176	@ 0xb0
 8012840:	009b      	lsls	r3, r3, #2
 8012842:	4413      	add	r3, r2
 8012844:	685b      	ldr	r3, [r3, #4]
 8012846:	68db      	ldr	r3, [r3, #12]
 8012848:	68fa      	ldr	r2, [r7, #12]
 801284a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801284e:	68fa      	ldr	r2, [r7, #12]
 8012850:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8012854:	4611      	mov	r1, r2
 8012856:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012858:	2300      	movs	r3, #0
}
 801285a:	4618      	mov	r0, r3
 801285c:	3710      	adds	r7, #16
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}

08012862 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012862:	b580      	push	{r7, lr}
 8012864:	b084      	sub	sp, #16
 8012866:	af00      	add	r7, sp, #0
 8012868:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	32b0      	adds	r2, #176	@ 0xb0
 8012874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012878:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d101      	bne.n	8012884 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012880:	2303      	movs	r3, #3
 8012882:	e024      	b.n	80128ce <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801288a:	687a      	ldr	r2, [r7, #4]
 801288c:	33b0      	adds	r3, #176	@ 0xb0
 801288e:	009b      	lsls	r3, r3, #2
 8012890:	4413      	add	r3, r2
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d019      	beq.n	80128cc <USBD_CDC_EP0_RxReady+0x6a>
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801289e:	2bff      	cmp	r3, #255	@ 0xff
 80128a0:	d014      	beq.n	80128cc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80128a8:	687a      	ldr	r2, [r7, #4]
 80128aa:	33b0      	adds	r3, #176	@ 0xb0
 80128ac:	009b      	lsls	r3, r3, #2
 80128ae:	4413      	add	r3, r2
 80128b0:	685b      	ldr	r3, [r3, #4]
 80128b2:	689b      	ldr	r3, [r3, #8]
 80128b4:	68fa      	ldr	r2, [r7, #12]
 80128b6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80128ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80128bc:	68fa      	ldr	r2, [r7, #12]
 80128be:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80128c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	22ff      	movs	r2, #255	@ 0xff
 80128c8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80128cc:	2300      	movs	r3, #0
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	3710      	adds	r7, #16
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
	...

080128d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b086      	sub	sp, #24
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80128e0:	2182      	movs	r1, #130	@ 0x82
 80128e2:	4818      	ldr	r0, [pc, #96]	@ (8012944 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80128e4:	f000 fd6b 	bl	80133be <USBD_GetEpDesc>
 80128e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80128ea:	2101      	movs	r1, #1
 80128ec:	4815      	ldr	r0, [pc, #84]	@ (8012944 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80128ee:	f000 fd66 	bl	80133be <USBD_GetEpDesc>
 80128f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80128f4:	2181      	movs	r1, #129	@ 0x81
 80128f6:	4813      	ldr	r0, [pc, #76]	@ (8012944 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80128f8:	f000 fd61 	bl	80133be <USBD_GetEpDesc>
 80128fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80128fe:	697b      	ldr	r3, [r7, #20]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d002      	beq.n	801290a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	2210      	movs	r2, #16
 8012908:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801290a:	693b      	ldr	r3, [r7, #16]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d006      	beq.n	801291e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	2200      	movs	r2, #0
 8012914:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012918:	711a      	strb	r2, [r3, #4]
 801291a:	2200      	movs	r2, #0
 801291c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d006      	beq.n	8012932 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	2200      	movs	r2, #0
 8012928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801292c:	711a      	strb	r2, [r3, #4]
 801292e:	2200      	movs	r2, #0
 8012930:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2243      	movs	r2, #67	@ 0x43
 8012936:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012938:	4b02      	ldr	r3, [pc, #8]	@ (8012944 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801293a:	4618      	mov	r0, r3
 801293c:	3718      	adds	r7, #24
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}
 8012942:	bf00      	nop
 8012944:	24000108 	.word	0x24000108

08012948 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b086      	sub	sp, #24
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012950:	2182      	movs	r1, #130	@ 0x82
 8012952:	4818      	ldr	r0, [pc, #96]	@ (80129b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012954:	f000 fd33 	bl	80133be <USBD_GetEpDesc>
 8012958:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801295a:	2101      	movs	r1, #1
 801295c:	4815      	ldr	r0, [pc, #84]	@ (80129b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801295e:	f000 fd2e 	bl	80133be <USBD_GetEpDesc>
 8012962:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012964:	2181      	movs	r1, #129	@ 0x81
 8012966:	4813      	ldr	r0, [pc, #76]	@ (80129b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012968:	f000 fd29 	bl	80133be <USBD_GetEpDesc>
 801296c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d002      	beq.n	801297a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	2210      	movs	r2, #16
 8012978:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801297a:	693b      	ldr	r3, [r7, #16]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d006      	beq.n	801298e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012980:	693b      	ldr	r3, [r7, #16]
 8012982:	2200      	movs	r2, #0
 8012984:	711a      	strb	r2, [r3, #4]
 8012986:	2200      	movs	r2, #0
 8012988:	f042 0202 	orr.w	r2, r2, #2
 801298c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d006      	beq.n	80129a2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	2200      	movs	r2, #0
 8012998:	711a      	strb	r2, [r3, #4]
 801299a:	2200      	movs	r2, #0
 801299c:	f042 0202 	orr.w	r2, r2, #2
 80129a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2243      	movs	r2, #67	@ 0x43
 80129a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80129a8:	4b02      	ldr	r3, [pc, #8]	@ (80129b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3718      	adds	r7, #24
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
 80129b2:	bf00      	nop
 80129b4:	24000108 	.word	0x24000108

080129b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b086      	sub	sp, #24
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80129c0:	2182      	movs	r1, #130	@ 0x82
 80129c2:	4818      	ldr	r0, [pc, #96]	@ (8012a24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80129c4:	f000 fcfb 	bl	80133be <USBD_GetEpDesc>
 80129c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80129ca:	2101      	movs	r1, #1
 80129cc:	4815      	ldr	r0, [pc, #84]	@ (8012a24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80129ce:	f000 fcf6 	bl	80133be <USBD_GetEpDesc>
 80129d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80129d4:	2181      	movs	r1, #129	@ 0x81
 80129d6:	4813      	ldr	r0, [pc, #76]	@ (8012a24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80129d8:	f000 fcf1 	bl	80133be <USBD_GetEpDesc>
 80129dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80129de:	697b      	ldr	r3, [r7, #20]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d002      	beq.n	80129ea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	2210      	movs	r2, #16
 80129e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d006      	beq.n	80129fe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	2200      	movs	r2, #0
 80129f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80129f8:	711a      	strb	r2, [r3, #4]
 80129fa:	2200      	movs	r2, #0
 80129fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d006      	beq.n	8012a12 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	2200      	movs	r2, #0
 8012a08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012a0c:	711a      	strb	r2, [r3, #4]
 8012a0e:	2200      	movs	r2, #0
 8012a10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	2243      	movs	r2, #67	@ 0x43
 8012a16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012a18:	4b02      	ldr	r3, [pc, #8]	@ (8012a24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	3718      	adds	r7, #24
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	bd80      	pop	{r7, pc}
 8012a22:	bf00      	nop
 8012a24:	24000108 	.word	0x24000108

08012a28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012a28:	b480      	push	{r7}
 8012a2a:	b083      	sub	sp, #12
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	220a      	movs	r2, #10
 8012a34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012a36:	4b03      	ldr	r3, [pc, #12]	@ (8012a44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	370c      	adds	r7, #12
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a42:	4770      	bx	lr
 8012a44:	240000c4 	.word	0x240000c4

08012a48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b083      	sub	sp, #12
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
 8012a50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012a52:	683b      	ldr	r3, [r7, #0]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d101      	bne.n	8012a5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012a58:	2303      	movs	r3, #3
 8012a5a:	e009      	b.n	8012a70 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012a62:	687a      	ldr	r2, [r7, #4]
 8012a64:	33b0      	adds	r3, #176	@ 0xb0
 8012a66:	009b      	lsls	r3, r3, #2
 8012a68:	4413      	add	r3, r2
 8012a6a:	683a      	ldr	r2, [r7, #0]
 8012a6c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8012a6e:	2300      	movs	r3, #0
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	370c      	adds	r7, #12
 8012a74:	46bd      	mov	sp, r7
 8012a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7a:	4770      	bx	lr

08012a7c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012a7c:	b480      	push	{r7}
 8012a7e:	b087      	sub	sp, #28
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	60f8      	str	r0, [r7, #12]
 8012a84:	60b9      	str	r1, [r7, #8]
 8012a86:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	32b0      	adds	r2, #176	@ 0xb0
 8012a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a96:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d101      	bne.n	8012aa2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012a9e:	2303      	movs	r3, #3
 8012aa0:	e008      	b.n	8012ab4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	68ba      	ldr	r2, [r7, #8]
 8012aa6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	687a      	ldr	r2, [r7, #4]
 8012aae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8012ab2:	2300      	movs	r3, #0
}
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	371c      	adds	r7, #28
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abe:	4770      	bx	lr

08012ac0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012ac0:	b480      	push	{r7}
 8012ac2:	b085      	sub	sp, #20
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
 8012ac8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	32b0      	adds	r2, #176	@ 0xb0
 8012ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ad8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d101      	bne.n	8012ae4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8012ae0:	2303      	movs	r3, #3
 8012ae2:	e004      	b.n	8012aee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	683a      	ldr	r2, [r7, #0]
 8012ae8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8012aec:	2300      	movs	r3, #0
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3714      	adds	r7, #20
 8012af2:	46bd      	mov	sp, r7
 8012af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af8:	4770      	bx	lr
	...

08012afc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b084      	sub	sp, #16
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	32b0      	adds	r2, #176	@ 0xb0
 8012b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b12:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8012b14:	2301      	movs	r3, #1
 8012b16:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d101      	bne.n	8012b22 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012b1e:	2303      	movs	r3, #3
 8012b20:	e025      	b.n	8012b6e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d11f      	bne.n	8012b6c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	2201      	movs	r2, #1
 8012b30:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8012b34:	4b10      	ldr	r3, [pc, #64]	@ (8012b78 <USBD_CDC_TransmitPacket+0x7c>)
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	f003 020f 	and.w	r2, r3, #15
 8012b3c:	68bb      	ldr	r3, [r7, #8]
 8012b3e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	4613      	mov	r3, r2
 8012b46:	009b      	lsls	r3, r3, #2
 8012b48:	4413      	add	r3, r2
 8012b4a:	009b      	lsls	r3, r3, #2
 8012b4c:	4403      	add	r3, r0
 8012b4e:	3318      	adds	r3, #24
 8012b50:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8012b52:	4b09      	ldr	r3, [pc, #36]	@ (8012b78 <USBD_CDC_TransmitPacket+0x7c>)
 8012b54:	7819      	ldrb	r1, [r3, #0]
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f005 f8e9 	bl	8017d3a <USBD_LL_Transmit>

    ret = USBD_OK;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8012b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3710      	adds	r7, #16
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}
 8012b76:	bf00      	nop
 8012b78:	2400014b 	.word	0x2400014b

08012b7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b084      	sub	sp, #16
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	32b0      	adds	r2, #176	@ 0xb0
 8012b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	32b0      	adds	r2, #176	@ 0xb0
 8012b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d101      	bne.n	8012baa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8012ba6:	2303      	movs	r3, #3
 8012ba8:	e018      	b.n	8012bdc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	7c1b      	ldrb	r3, [r3, #16]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d10a      	bne.n	8012bc8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8012be4 <USBD_CDC_ReceivePacket+0x68>)
 8012bb4:	7819      	ldrb	r1, [r3, #0]
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012bbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f005 f8db 	bl	8017d7c <USBD_LL_PrepareReceive>
 8012bc6:	e008      	b.n	8012bda <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012bc8:	4b06      	ldr	r3, [pc, #24]	@ (8012be4 <USBD_CDC_ReceivePacket+0x68>)
 8012bca:	7819      	ldrb	r1, [r3, #0]
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012bd2:	2340      	movs	r3, #64	@ 0x40
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f005 f8d1 	bl	8017d7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012bda:	2300      	movs	r3, #0
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3710      	adds	r7, #16
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}
 8012be4:	2400014c 	.word	0x2400014c

08012be8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b086      	sub	sp, #24
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	60f8      	str	r0, [r7, #12]
 8012bf0:	60b9      	str	r1, [r7, #8]
 8012bf2:	4613      	mov	r3, r2
 8012bf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d10a      	bne.n	8012c12 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8012bfc:	4817      	ldr	r0, [pc, #92]	@ (8012c5c <USBD_Init+0x74>)
 8012bfe:	f005 f9f7 	bl	8017ff0 <iprintf>
 8012c02:	4817      	ldr	r0, [pc, #92]	@ (8012c60 <USBD_Init+0x78>)
 8012c04:	f005 f9f4 	bl	8017ff0 <iprintf>
 8012c08:	200a      	movs	r0, #10
 8012c0a:	f005 fa03 	bl	8018014 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012c0e:	2303      	movs	r3, #3
 8012c10:	e01f      	b.n	8012c52 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	2200      	movs	r2, #0
 8012c16:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	2200      	movs	r2, #0
 8012c26:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d003      	beq.n	8012c38 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	68ba      	ldr	r2, [r7, #8]
 8012c34:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	2201      	movs	r2, #1
 8012c3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	79fa      	ldrb	r2, [r7, #7]
 8012c44:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012c46:	68f8      	ldr	r0, [r7, #12]
 8012c48:	f004 ff3e 	bl	8017ac8 <USBD_LL_Init>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c52:	4618      	mov	r0, r3
 8012c54:	3718      	adds	r7, #24
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}
 8012c5a:	bf00      	nop
 8012c5c:	0801955c 	.word	0x0801955c
 8012c60:	08019564 	.word	0x08019564

08012c64 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b084      	sub	sp, #16
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
 8012c6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012c72:	683b      	ldr	r3, [r7, #0]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d10a      	bne.n	8012c8e <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8012c78:	481a      	ldr	r0, [pc, #104]	@ (8012ce4 <USBD_RegisterClass+0x80>)
 8012c7a:	f005 f9b9 	bl	8017ff0 <iprintf>
 8012c7e:	481a      	ldr	r0, [pc, #104]	@ (8012ce8 <USBD_RegisterClass+0x84>)
 8012c80:	f005 f9b6 	bl	8017ff0 <iprintf>
 8012c84:	200a      	movs	r0, #10
 8012c86:	f005 f9c5 	bl	8018014 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012c8a:	2303      	movs	r3, #3
 8012c8c:	e025      	b.n	8012cda <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	683a      	ldr	r2, [r7, #0]
 8012c92:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	32ae      	adds	r2, #174	@ 0xae
 8012ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d00f      	beq.n	8012cca <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	32ae      	adds	r2, #174	@ 0xae
 8012cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cba:	f107 020e 	add.w	r2, r7, #14
 8012cbe:	4610      	mov	r0, r2
 8012cc0:	4798      	blx	r3
 8012cc2:	4602      	mov	r2, r0
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012cd0:	1c5a      	adds	r2, r3, #1
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8012cd8:	2300      	movs	r3, #0
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	3710      	adds	r7, #16
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd80      	pop	{r7, pc}
 8012ce2:	bf00      	nop
 8012ce4:	0801955c 	.word	0x0801955c
 8012ce8:	0801957c 	.word	0x0801957c

08012cec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b082      	sub	sp, #8
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012cf4:	6878      	ldr	r0, [r7, #4]
 8012cf6:	f004 ff37 	bl	8017b68 <USBD_LL_Start>
 8012cfa:	4603      	mov	r3, r0
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	3708      	adds	r7, #8
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}

08012d04 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8012d04:	b480      	push	{r7}
 8012d06:	b083      	sub	sp, #12
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012d0c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	370c      	adds	r7, #12
 8012d12:	46bd      	mov	sp, r7
 8012d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d18:	4770      	bx	lr

08012d1a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012d1a:	b580      	push	{r7, lr}
 8012d1c:	b084      	sub	sp, #16
 8012d1e:	af00      	add	r7, sp, #0
 8012d20:	6078      	str	r0, [r7, #4]
 8012d22:	460b      	mov	r3, r1
 8012d24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012d26:	2300      	movs	r3, #0
 8012d28:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d009      	beq.n	8012d48 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	78fa      	ldrb	r2, [r7, #3]
 8012d3e:	4611      	mov	r1, r2
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	4798      	blx	r3
 8012d44:	4603      	mov	r3, r0
 8012d46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3710      	adds	r7, #16
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}

08012d52 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012d52:	b580      	push	{r7, lr}
 8012d54:	b084      	sub	sp, #16
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	6078      	str	r0, [r7, #4]
 8012d5a:	460b      	mov	r3, r1
 8012d5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012d5e:	2300      	movs	r3, #0
 8012d60:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d68:	685b      	ldr	r3, [r3, #4]
 8012d6a:	78fa      	ldrb	r2, [r7, #3]
 8012d6c:	4611      	mov	r1, r2
 8012d6e:	6878      	ldr	r0, [r7, #4]
 8012d70:	4798      	blx	r3
 8012d72:	4603      	mov	r3, r0
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d001      	beq.n	8012d7c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8012d78:	2303      	movs	r3, #3
 8012d7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3710      	adds	r7, #16
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}

08012d86 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012d86:	b580      	push	{r7, lr}
 8012d88:	b084      	sub	sp, #16
 8012d8a:	af00      	add	r7, sp, #0
 8012d8c:	6078      	str	r0, [r7, #4]
 8012d8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012d96:	6839      	ldr	r1, [r7, #0]
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f001 f936 	bl	801400a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2201      	movs	r2, #1
 8012da2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8012dac:	461a      	mov	r2, r3
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012dba:	f003 031f 	and.w	r3, r3, #31
 8012dbe:	2b02      	cmp	r3, #2
 8012dc0:	d01a      	beq.n	8012df8 <USBD_LL_SetupStage+0x72>
 8012dc2:	2b02      	cmp	r3, #2
 8012dc4:	d822      	bhi.n	8012e0c <USBD_LL_SetupStage+0x86>
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d002      	beq.n	8012dd0 <USBD_LL_SetupStage+0x4a>
 8012dca:	2b01      	cmp	r3, #1
 8012dcc:	d00a      	beq.n	8012de4 <USBD_LL_SetupStage+0x5e>
 8012dce:	e01d      	b.n	8012e0c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012dd6:	4619      	mov	r1, r3
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f000 fb63 	bl	80134a4 <USBD_StdDevReq>
 8012dde:	4603      	mov	r3, r0
 8012de0:	73fb      	strb	r3, [r7, #15]
      break;
 8012de2:	e020      	b.n	8012e26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012dea:	4619      	mov	r1, r3
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	f000 fbcb 	bl	8013588 <USBD_StdItfReq>
 8012df2:	4603      	mov	r3, r0
 8012df4:	73fb      	strb	r3, [r7, #15]
      break;
 8012df6:	e016      	b.n	8012e26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012dfe:	4619      	mov	r1, r3
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	f000 fc2d 	bl	8013660 <USBD_StdEPReq>
 8012e06:	4603      	mov	r3, r0
 8012e08:	73fb      	strb	r3, [r7, #15]
      break;
 8012e0a:	e00c      	b.n	8012e26 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012e12:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012e16:	b2db      	uxtb	r3, r3
 8012e18:	4619      	mov	r1, r3
 8012e1a:	6878      	ldr	r0, [r7, #4]
 8012e1c:	f004 ff04 	bl	8017c28 <USBD_LL_StallEP>
 8012e20:	4603      	mov	r3, r0
 8012e22:	73fb      	strb	r3, [r7, #15]
      break;
 8012e24:	bf00      	nop
  }

  return ret;
 8012e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e28:	4618      	mov	r0, r3
 8012e2a:	3710      	adds	r7, #16
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	bd80      	pop	{r7, pc}

08012e30 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b086      	sub	sp, #24
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	60f8      	str	r0, [r7, #12]
 8012e38:	460b      	mov	r3, r1
 8012e3a:	607a      	str	r2, [r7, #4]
 8012e3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8012e3e:	2300      	movs	r3, #0
 8012e40:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012e42:	7afb      	ldrb	r3, [r7, #11]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d16e      	bne.n	8012f26 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012e4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012e56:	2b03      	cmp	r3, #3
 8012e58:	f040 8098 	bne.w	8012f8c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	689a      	ldr	r2, [r3, #8]
 8012e60:	693b      	ldr	r3, [r7, #16]
 8012e62:	68db      	ldr	r3, [r3, #12]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d913      	bls.n	8012e90 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	689a      	ldr	r2, [r3, #8]
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	68db      	ldr	r3, [r3, #12]
 8012e70:	1ad2      	subs	r2, r2, r3
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	68da      	ldr	r2, [r3, #12]
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	689b      	ldr	r3, [r3, #8]
 8012e7e:	4293      	cmp	r3, r2
 8012e80:	bf28      	it	cs
 8012e82:	4613      	movcs	r3, r2
 8012e84:	461a      	mov	r2, r3
 8012e86:	6879      	ldr	r1, [r7, #4]
 8012e88:	68f8      	ldr	r0, [r7, #12]
 8012e8a:	f001 f9be 	bl	801420a <USBD_CtlContinueRx>
 8012e8e:	e07d      	b.n	8012f8c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012e96:	f003 031f 	and.w	r3, r3, #31
 8012e9a:	2b02      	cmp	r3, #2
 8012e9c:	d014      	beq.n	8012ec8 <USBD_LL_DataOutStage+0x98>
 8012e9e:	2b02      	cmp	r3, #2
 8012ea0:	d81d      	bhi.n	8012ede <USBD_LL_DataOutStage+0xae>
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d002      	beq.n	8012eac <USBD_LL_DataOutStage+0x7c>
 8012ea6:	2b01      	cmp	r3, #1
 8012ea8:	d003      	beq.n	8012eb2 <USBD_LL_DataOutStage+0x82>
 8012eaa:	e018      	b.n	8012ede <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012eac:	2300      	movs	r3, #0
 8012eae:	75bb      	strb	r3, [r7, #22]
            break;
 8012eb0:	e018      	b.n	8012ee4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012eb8:	b2db      	uxtb	r3, r3
 8012eba:	4619      	mov	r1, r3
 8012ebc:	68f8      	ldr	r0, [r7, #12]
 8012ebe:	f000 fa64 	bl	801338a <USBD_CoreFindIF>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	75bb      	strb	r3, [r7, #22]
            break;
 8012ec6:	e00d      	b.n	8012ee4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012ece:	b2db      	uxtb	r3, r3
 8012ed0:	4619      	mov	r1, r3
 8012ed2:	68f8      	ldr	r0, [r7, #12]
 8012ed4:	f000 fa66 	bl	80133a4 <USBD_CoreFindEP>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	75bb      	strb	r3, [r7, #22]
            break;
 8012edc:	e002      	b.n	8012ee4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	75bb      	strb	r3, [r7, #22]
            break;
 8012ee2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012ee4:	7dbb      	ldrb	r3, [r7, #22]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d119      	bne.n	8012f1e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ef0:	b2db      	uxtb	r3, r3
 8012ef2:	2b03      	cmp	r3, #3
 8012ef4:	d113      	bne.n	8012f1e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012ef6:	7dba      	ldrb	r2, [r7, #22]
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	32ae      	adds	r2, #174	@ 0xae
 8012efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f00:	691b      	ldr	r3, [r3, #16]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d00b      	beq.n	8012f1e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012f06:	7dba      	ldrb	r2, [r7, #22]
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012f0e:	7dba      	ldrb	r2, [r7, #22]
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	32ae      	adds	r2, #174	@ 0xae
 8012f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f18:	691b      	ldr	r3, [r3, #16]
 8012f1a:	68f8      	ldr	r0, [r7, #12]
 8012f1c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012f1e:	68f8      	ldr	r0, [r7, #12]
 8012f20:	f001 f984 	bl	801422c <USBD_CtlSendStatus>
 8012f24:	e032      	b.n	8012f8c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012f26:	7afb      	ldrb	r3, [r7, #11]
 8012f28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012f2c:	b2db      	uxtb	r3, r3
 8012f2e:	4619      	mov	r1, r3
 8012f30:	68f8      	ldr	r0, [r7, #12]
 8012f32:	f000 fa37 	bl	80133a4 <USBD_CoreFindEP>
 8012f36:	4603      	mov	r3, r0
 8012f38:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012f3a:	7dbb      	ldrb	r3, [r7, #22]
 8012f3c:	2bff      	cmp	r3, #255	@ 0xff
 8012f3e:	d025      	beq.n	8012f8c <USBD_LL_DataOutStage+0x15c>
 8012f40:	7dbb      	ldrb	r3, [r7, #22]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d122      	bne.n	8012f8c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f4c:	b2db      	uxtb	r3, r3
 8012f4e:	2b03      	cmp	r3, #3
 8012f50:	d117      	bne.n	8012f82 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012f52:	7dba      	ldrb	r2, [r7, #22]
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	32ae      	adds	r2, #174	@ 0xae
 8012f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f5c:	699b      	ldr	r3, [r3, #24]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d00f      	beq.n	8012f82 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012f62:	7dba      	ldrb	r2, [r7, #22]
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012f6a:	7dba      	ldrb	r2, [r7, #22]
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	32ae      	adds	r2, #174	@ 0xae
 8012f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f74:	699b      	ldr	r3, [r3, #24]
 8012f76:	7afa      	ldrb	r2, [r7, #11]
 8012f78:	4611      	mov	r1, r2
 8012f7a:	68f8      	ldr	r0, [r7, #12]
 8012f7c:	4798      	blx	r3
 8012f7e:	4603      	mov	r3, r0
 8012f80:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8012f82:	7dfb      	ldrb	r3, [r7, #23]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d001      	beq.n	8012f8c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012f88:	7dfb      	ldrb	r3, [r7, #23]
 8012f8a:	e000      	b.n	8012f8e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012f8c:	2300      	movs	r3, #0
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	3718      	adds	r7, #24
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}

08012f96 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012f96:	b580      	push	{r7, lr}
 8012f98:	b086      	sub	sp, #24
 8012f9a:	af00      	add	r7, sp, #0
 8012f9c:	60f8      	str	r0, [r7, #12]
 8012f9e:	460b      	mov	r3, r1
 8012fa0:	607a      	str	r2, [r7, #4]
 8012fa2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8012fa4:	7afb      	ldrb	r3, [r7, #11]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d16f      	bne.n	801308a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	3314      	adds	r3, #20
 8012fae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012fb6:	2b02      	cmp	r3, #2
 8012fb8:	d15a      	bne.n	8013070 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	689a      	ldr	r2, [r3, #8]
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	68db      	ldr	r3, [r3, #12]
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d914      	bls.n	8012ff0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012fc6:	693b      	ldr	r3, [r7, #16]
 8012fc8:	689a      	ldr	r2, [r3, #8]
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	68db      	ldr	r3, [r3, #12]
 8012fce:	1ad2      	subs	r2, r2, r3
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012fd4:	693b      	ldr	r3, [r7, #16]
 8012fd6:	689b      	ldr	r3, [r3, #8]
 8012fd8:	461a      	mov	r2, r3
 8012fda:	6879      	ldr	r1, [r7, #4]
 8012fdc:	68f8      	ldr	r0, [r7, #12]
 8012fde:	f001 f8e6 	bl	80141ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	2100      	movs	r1, #0
 8012fe8:	68f8      	ldr	r0, [r7, #12]
 8012fea:	f004 fec7 	bl	8017d7c <USBD_LL_PrepareReceive>
 8012fee:	e03f      	b.n	8013070 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	68da      	ldr	r2, [r3, #12]
 8012ff4:	693b      	ldr	r3, [r7, #16]
 8012ff6:	689b      	ldr	r3, [r3, #8]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d11c      	bne.n	8013036 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012ffc:	693b      	ldr	r3, [r7, #16]
 8012ffe:	685a      	ldr	r2, [r3, #4]
 8013000:	693b      	ldr	r3, [r7, #16]
 8013002:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013004:	429a      	cmp	r2, r3
 8013006:	d316      	bcc.n	8013036 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013008:	693b      	ldr	r3, [r7, #16]
 801300a:	685a      	ldr	r2, [r3, #4]
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013012:	429a      	cmp	r2, r3
 8013014:	d20f      	bcs.n	8013036 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013016:	2200      	movs	r2, #0
 8013018:	2100      	movs	r1, #0
 801301a:	68f8      	ldr	r0, [r7, #12]
 801301c:	f001 f8c7 	bl	80141ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	2200      	movs	r2, #0
 8013024:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013028:	2300      	movs	r3, #0
 801302a:	2200      	movs	r2, #0
 801302c:	2100      	movs	r1, #0
 801302e:	68f8      	ldr	r0, [r7, #12]
 8013030:	f004 fea4 	bl	8017d7c <USBD_LL_PrepareReceive>
 8013034:	e01c      	b.n	8013070 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801303c:	b2db      	uxtb	r3, r3
 801303e:	2b03      	cmp	r3, #3
 8013040:	d10f      	bne.n	8013062 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013048:	68db      	ldr	r3, [r3, #12]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d009      	beq.n	8013062 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	2200      	movs	r2, #0
 8013052:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801305c:	68db      	ldr	r3, [r3, #12]
 801305e:	68f8      	ldr	r0, [r7, #12]
 8013060:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013062:	2180      	movs	r1, #128	@ 0x80
 8013064:	68f8      	ldr	r0, [r7, #12]
 8013066:	f004 fddf 	bl	8017c28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801306a:	68f8      	ldr	r0, [r7, #12]
 801306c:	f001 f8f1 	bl	8014252 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013076:	2b00      	cmp	r3, #0
 8013078:	d03a      	beq.n	80130f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801307a:	68f8      	ldr	r0, [r7, #12]
 801307c:	f7ff fe42 	bl	8012d04 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	2200      	movs	r2, #0
 8013084:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013088:	e032      	b.n	80130f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801308a:	7afb      	ldrb	r3, [r7, #11]
 801308c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013090:	b2db      	uxtb	r3, r3
 8013092:	4619      	mov	r1, r3
 8013094:	68f8      	ldr	r0, [r7, #12]
 8013096:	f000 f985 	bl	80133a4 <USBD_CoreFindEP>
 801309a:	4603      	mov	r3, r0
 801309c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801309e:	7dfb      	ldrb	r3, [r7, #23]
 80130a0:	2bff      	cmp	r3, #255	@ 0xff
 80130a2:	d025      	beq.n	80130f0 <USBD_LL_DataInStage+0x15a>
 80130a4:	7dfb      	ldrb	r3, [r7, #23]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d122      	bne.n	80130f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80130b0:	b2db      	uxtb	r3, r3
 80130b2:	2b03      	cmp	r3, #3
 80130b4:	d11c      	bne.n	80130f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80130b6:	7dfa      	ldrb	r2, [r7, #23]
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	32ae      	adds	r2, #174	@ 0xae
 80130bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130c0:	695b      	ldr	r3, [r3, #20]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d014      	beq.n	80130f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80130c6:	7dfa      	ldrb	r2, [r7, #23]
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80130ce:	7dfa      	ldrb	r2, [r7, #23]
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	32ae      	adds	r2, #174	@ 0xae
 80130d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130d8:	695b      	ldr	r3, [r3, #20]
 80130da:	7afa      	ldrb	r2, [r7, #11]
 80130dc:	4611      	mov	r1, r2
 80130de:	68f8      	ldr	r0, [r7, #12]
 80130e0:	4798      	blx	r3
 80130e2:	4603      	mov	r3, r0
 80130e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80130e6:	7dbb      	ldrb	r3, [r7, #22]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d001      	beq.n	80130f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80130ec:	7dbb      	ldrb	r3, [r7, #22]
 80130ee:	e000      	b.n	80130f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80130f0:	2300      	movs	r3, #0
}
 80130f2:	4618      	mov	r0, r3
 80130f4:	3718      	adds	r7, #24
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd80      	pop	{r7, pc}

080130fa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80130fa:	b580      	push	{r7, lr}
 80130fc:	b084      	sub	sp, #16
 80130fe:	af00      	add	r7, sp, #0
 8013100:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013102:	2300      	movs	r3, #0
 8013104:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2201      	movs	r2, #1
 801310a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	2200      	movs	r2, #0
 8013112:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	2200      	movs	r2, #0
 801311a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	2200      	movs	r2, #0
 8013120:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2200      	movs	r2, #0
 8013128:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013132:	2b00      	cmp	r3, #0
 8013134:	d014      	beq.n	8013160 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801313c:	685b      	ldr	r3, [r3, #4]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d00e      	beq.n	8013160 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013148:	685b      	ldr	r3, [r3, #4]
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	6852      	ldr	r2, [r2, #4]
 801314e:	b2d2      	uxtb	r2, r2
 8013150:	4611      	mov	r1, r2
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	4798      	blx	r3
 8013156:	4603      	mov	r3, r0
 8013158:	2b00      	cmp	r3, #0
 801315a:	d001      	beq.n	8013160 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801315c:	2303      	movs	r3, #3
 801315e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013160:	2340      	movs	r3, #64	@ 0x40
 8013162:	2200      	movs	r2, #0
 8013164:	2100      	movs	r1, #0
 8013166:	6878      	ldr	r0, [r7, #4]
 8013168:	f004 fd19 	bl	8017b9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2201      	movs	r2, #1
 8013170:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2240      	movs	r2, #64	@ 0x40
 8013178:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801317c:	2340      	movs	r3, #64	@ 0x40
 801317e:	2200      	movs	r2, #0
 8013180:	2180      	movs	r1, #128	@ 0x80
 8013182:	6878      	ldr	r0, [r7, #4]
 8013184:	f004 fd0b 	bl	8017b9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	2201      	movs	r2, #1
 801318c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2240      	movs	r2, #64	@ 0x40
 8013192:	621a      	str	r2, [r3, #32]

  return ret;
 8013194:	7bfb      	ldrb	r3, [r7, #15]
}
 8013196:	4618      	mov	r0, r3
 8013198:	3710      	adds	r7, #16
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}

0801319e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801319e:	b480      	push	{r7}
 80131a0:	b083      	sub	sp, #12
 80131a2:	af00      	add	r7, sp, #0
 80131a4:	6078      	str	r0, [r7, #4]
 80131a6:	460b      	mov	r3, r1
 80131a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	78fa      	ldrb	r2, [r7, #3]
 80131ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80131b0:	2300      	movs	r3, #0
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	370c      	adds	r7, #12
 80131b6:	46bd      	mov	sp, r7
 80131b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131bc:	4770      	bx	lr

080131be <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80131be:	b480      	push	{r7}
 80131c0:	b083      	sub	sp, #12
 80131c2:	af00      	add	r7, sp, #0
 80131c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80131cc:	b2db      	uxtb	r3, r3
 80131ce:	2b04      	cmp	r3, #4
 80131d0:	d006      	beq.n	80131e0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80131d8:	b2da      	uxtb	r2, r3
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2204      	movs	r2, #4
 80131e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80131e8:	2300      	movs	r3, #0
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	370c      	adds	r7, #12
 80131ee:	46bd      	mov	sp, r7
 80131f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f4:	4770      	bx	lr

080131f6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80131f6:	b480      	push	{r7}
 80131f8:	b083      	sub	sp, #12
 80131fa:	af00      	add	r7, sp, #0
 80131fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013204:	b2db      	uxtb	r3, r3
 8013206:	2b04      	cmp	r3, #4
 8013208:	d106      	bne.n	8013218 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013210:	b2da      	uxtb	r2, r3
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013218:	2300      	movs	r3, #0
}
 801321a:	4618      	mov	r0, r3
 801321c:	370c      	adds	r7, #12
 801321e:	46bd      	mov	sp, r7
 8013220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013224:	4770      	bx	lr

08013226 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013226:	b580      	push	{r7, lr}
 8013228:	b082      	sub	sp, #8
 801322a:	af00      	add	r7, sp, #0
 801322c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013234:	b2db      	uxtb	r3, r3
 8013236:	2b03      	cmp	r3, #3
 8013238:	d110      	bne.n	801325c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013240:	2b00      	cmp	r3, #0
 8013242:	d00b      	beq.n	801325c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801324a:	69db      	ldr	r3, [r3, #28]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d005      	beq.n	801325c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013256:	69db      	ldr	r3, [r3, #28]
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801325c:	2300      	movs	r3, #0
}
 801325e:	4618      	mov	r0, r3
 8013260:	3708      	adds	r7, #8
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}

08013266 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013266:	b580      	push	{r7, lr}
 8013268:	b082      	sub	sp, #8
 801326a:	af00      	add	r7, sp, #0
 801326c:	6078      	str	r0, [r7, #4]
 801326e:	460b      	mov	r3, r1
 8013270:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	32ae      	adds	r2, #174	@ 0xae
 801327c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d101      	bne.n	8013288 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8013284:	2303      	movs	r3, #3
 8013286:	e01c      	b.n	80132c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801328e:	b2db      	uxtb	r3, r3
 8013290:	2b03      	cmp	r3, #3
 8013292:	d115      	bne.n	80132c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	32ae      	adds	r2, #174	@ 0xae
 801329e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132a2:	6a1b      	ldr	r3, [r3, #32]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d00b      	beq.n	80132c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	32ae      	adds	r2, #174	@ 0xae
 80132b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132b6:	6a1b      	ldr	r3, [r3, #32]
 80132b8:	78fa      	ldrb	r2, [r7, #3]
 80132ba:	4611      	mov	r1, r2
 80132bc:	6878      	ldr	r0, [r7, #4]
 80132be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80132c0:	2300      	movs	r3, #0
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	3708      	adds	r7, #8
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}

080132ca <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80132ca:	b580      	push	{r7, lr}
 80132cc:	b082      	sub	sp, #8
 80132ce:	af00      	add	r7, sp, #0
 80132d0:	6078      	str	r0, [r7, #4]
 80132d2:	460b      	mov	r3, r1
 80132d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	32ae      	adds	r2, #174	@ 0xae
 80132e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d101      	bne.n	80132ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80132e8:	2303      	movs	r3, #3
 80132ea:	e01c      	b.n	8013326 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80132f2:	b2db      	uxtb	r3, r3
 80132f4:	2b03      	cmp	r3, #3
 80132f6:	d115      	bne.n	8013324 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	32ae      	adds	r2, #174	@ 0xae
 8013302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013308:	2b00      	cmp	r3, #0
 801330a:	d00b      	beq.n	8013324 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	32ae      	adds	r2, #174	@ 0xae
 8013316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801331c:	78fa      	ldrb	r2, [r7, #3]
 801331e:	4611      	mov	r1, r2
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013324:	2300      	movs	r3, #0
}
 8013326:	4618      	mov	r0, r3
 8013328:	3708      	adds	r7, #8
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}

0801332e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801332e:	b480      	push	{r7}
 8013330:	b083      	sub	sp, #12
 8013332:	af00      	add	r7, sp, #0
 8013334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013336:	2300      	movs	r3, #0
}
 8013338:	4618      	mov	r0, r3
 801333a:	370c      	adds	r7, #12
 801333c:	46bd      	mov	sp, r7
 801333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013342:	4770      	bx	lr

08013344 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b084      	sub	sp, #16
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801334c:	2300      	movs	r3, #0
 801334e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	2201      	movs	r2, #1
 8013354:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801335e:	2b00      	cmp	r3, #0
 8013360:	d00e      	beq.n	8013380 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	687a      	ldr	r2, [r7, #4]
 801336c:	6852      	ldr	r2, [r2, #4]
 801336e:	b2d2      	uxtb	r2, r2
 8013370:	4611      	mov	r1, r2
 8013372:	6878      	ldr	r0, [r7, #4]
 8013374:	4798      	blx	r3
 8013376:	4603      	mov	r3, r0
 8013378:	2b00      	cmp	r3, #0
 801337a:	d001      	beq.n	8013380 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801337c:	2303      	movs	r3, #3
 801337e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013380:	7bfb      	ldrb	r3, [r7, #15]
}
 8013382:	4618      	mov	r0, r3
 8013384:	3710      	adds	r7, #16
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}

0801338a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801338a:	b480      	push	{r7}
 801338c:	b083      	sub	sp, #12
 801338e:	af00      	add	r7, sp, #0
 8013390:	6078      	str	r0, [r7, #4]
 8013392:	460b      	mov	r3, r1
 8013394:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013396:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013398:	4618      	mov	r0, r3
 801339a:	370c      	adds	r7, #12
 801339c:	46bd      	mov	sp, r7
 801339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a2:	4770      	bx	lr

080133a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80133a4:	b480      	push	{r7}
 80133a6:	b083      	sub	sp, #12
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
 80133ac:	460b      	mov	r3, r1
 80133ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80133b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	370c      	adds	r7, #12
 80133b6:	46bd      	mov	sp, r7
 80133b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133bc:	4770      	bx	lr

080133be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80133be:	b580      	push	{r7, lr}
 80133c0:	b086      	sub	sp, #24
 80133c2:	af00      	add	r7, sp, #0
 80133c4:	6078      	str	r0, [r7, #4]
 80133c6:	460b      	mov	r3, r1
 80133c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80133d2:	2300      	movs	r3, #0
 80133d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	885b      	ldrh	r3, [r3, #2]
 80133da:	b29b      	uxth	r3, r3
 80133dc:	68fa      	ldr	r2, [r7, #12]
 80133de:	7812      	ldrb	r2, [r2, #0]
 80133e0:	4293      	cmp	r3, r2
 80133e2:	d91f      	bls.n	8013424 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	781b      	ldrb	r3, [r3, #0]
 80133e8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80133ea:	e013      	b.n	8013414 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80133ec:	f107 030a 	add.w	r3, r7, #10
 80133f0:	4619      	mov	r1, r3
 80133f2:	6978      	ldr	r0, [r7, #20]
 80133f4:	f000 f81b 	bl	801342e <USBD_GetNextDesc>
 80133f8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80133fa:	697b      	ldr	r3, [r7, #20]
 80133fc:	785b      	ldrb	r3, [r3, #1]
 80133fe:	2b05      	cmp	r3, #5
 8013400:	d108      	bne.n	8013414 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013402:	697b      	ldr	r3, [r7, #20]
 8013404:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	789b      	ldrb	r3, [r3, #2]
 801340a:	78fa      	ldrb	r2, [r7, #3]
 801340c:	429a      	cmp	r2, r3
 801340e:	d008      	beq.n	8013422 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013410:	2300      	movs	r3, #0
 8013412:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	885b      	ldrh	r3, [r3, #2]
 8013418:	b29a      	uxth	r2, r3
 801341a:	897b      	ldrh	r3, [r7, #10]
 801341c:	429a      	cmp	r2, r3
 801341e:	d8e5      	bhi.n	80133ec <USBD_GetEpDesc+0x2e>
 8013420:	e000      	b.n	8013424 <USBD_GetEpDesc+0x66>
          break;
 8013422:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013424:	693b      	ldr	r3, [r7, #16]
}
 8013426:	4618      	mov	r0, r3
 8013428:	3718      	adds	r7, #24
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}

0801342e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801342e:	b480      	push	{r7}
 8013430:	b085      	sub	sp, #20
 8013432:	af00      	add	r7, sp, #0
 8013434:	6078      	str	r0, [r7, #4]
 8013436:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	881b      	ldrh	r3, [r3, #0]
 8013440:	68fa      	ldr	r2, [r7, #12]
 8013442:	7812      	ldrb	r2, [r2, #0]
 8013444:	4413      	add	r3, r2
 8013446:	b29a      	uxth	r2, r3
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	781b      	ldrb	r3, [r3, #0]
 8013450:	461a      	mov	r2, r3
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	4413      	add	r3, r2
 8013456:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013458:	68fb      	ldr	r3, [r7, #12]
}
 801345a:	4618      	mov	r0, r3
 801345c:	3714      	adds	r7, #20
 801345e:	46bd      	mov	sp, r7
 8013460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013464:	4770      	bx	lr

08013466 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013466:	b480      	push	{r7}
 8013468:	b087      	sub	sp, #28
 801346a:	af00      	add	r7, sp, #0
 801346c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013478:	697b      	ldr	r3, [r7, #20]
 801347a:	3301      	adds	r3, #1
 801347c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801347e:	697b      	ldr	r3, [r7, #20]
 8013480:	781b      	ldrb	r3, [r3, #0]
 8013482:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013484:	8a3b      	ldrh	r3, [r7, #16]
 8013486:	021b      	lsls	r3, r3, #8
 8013488:	b21a      	sxth	r2, r3
 801348a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801348e:	4313      	orrs	r3, r2
 8013490:	b21b      	sxth	r3, r3
 8013492:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013494:	89fb      	ldrh	r3, [r7, #14]
}
 8013496:	4618      	mov	r0, r3
 8013498:	371c      	adds	r7, #28
 801349a:	46bd      	mov	sp, r7
 801349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a0:	4770      	bx	lr
	...

080134a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b084      	sub	sp, #16
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
 80134ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80134ae:	2300      	movs	r3, #0
 80134b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	781b      	ldrb	r3, [r3, #0]
 80134b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80134ba:	2b40      	cmp	r3, #64	@ 0x40
 80134bc:	d005      	beq.n	80134ca <USBD_StdDevReq+0x26>
 80134be:	2b40      	cmp	r3, #64	@ 0x40
 80134c0:	d857      	bhi.n	8013572 <USBD_StdDevReq+0xce>
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d00f      	beq.n	80134e6 <USBD_StdDevReq+0x42>
 80134c6:	2b20      	cmp	r3, #32
 80134c8:	d153      	bne.n	8013572 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	32ae      	adds	r2, #174	@ 0xae
 80134d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134d8:	689b      	ldr	r3, [r3, #8]
 80134da:	6839      	ldr	r1, [r7, #0]
 80134dc:	6878      	ldr	r0, [r7, #4]
 80134de:	4798      	blx	r3
 80134e0:	4603      	mov	r3, r0
 80134e2:	73fb      	strb	r3, [r7, #15]
      break;
 80134e4:	e04a      	b.n	801357c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	785b      	ldrb	r3, [r3, #1]
 80134ea:	2b09      	cmp	r3, #9
 80134ec:	d83b      	bhi.n	8013566 <USBD_StdDevReq+0xc2>
 80134ee:	a201      	add	r2, pc, #4	@ (adr r2, 80134f4 <USBD_StdDevReq+0x50>)
 80134f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134f4:	08013549 	.word	0x08013549
 80134f8:	0801355d 	.word	0x0801355d
 80134fc:	08013567 	.word	0x08013567
 8013500:	08013553 	.word	0x08013553
 8013504:	08013567 	.word	0x08013567
 8013508:	08013527 	.word	0x08013527
 801350c:	0801351d 	.word	0x0801351d
 8013510:	08013567 	.word	0x08013567
 8013514:	0801353f 	.word	0x0801353f
 8013518:	08013531 	.word	0x08013531
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801351c:	6839      	ldr	r1, [r7, #0]
 801351e:	6878      	ldr	r0, [r7, #4]
 8013520:	f000 fa3c 	bl	801399c <USBD_GetDescriptor>
          break;
 8013524:	e024      	b.n	8013570 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013526:	6839      	ldr	r1, [r7, #0]
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f000 fbcb 	bl	8013cc4 <USBD_SetAddress>
          break;
 801352e:	e01f      	b.n	8013570 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013530:	6839      	ldr	r1, [r7, #0]
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f000 fc0a 	bl	8013d4c <USBD_SetConfig>
 8013538:	4603      	mov	r3, r0
 801353a:	73fb      	strb	r3, [r7, #15]
          break;
 801353c:	e018      	b.n	8013570 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801353e:	6839      	ldr	r1, [r7, #0]
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f000 fcad 	bl	8013ea0 <USBD_GetConfig>
          break;
 8013546:	e013      	b.n	8013570 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013548:	6839      	ldr	r1, [r7, #0]
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	f000 fcde 	bl	8013f0c <USBD_GetStatus>
          break;
 8013550:	e00e      	b.n	8013570 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013552:	6839      	ldr	r1, [r7, #0]
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f000 fd0d 	bl	8013f74 <USBD_SetFeature>
          break;
 801355a:	e009      	b.n	8013570 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801355c:	6839      	ldr	r1, [r7, #0]
 801355e:	6878      	ldr	r0, [r7, #4]
 8013560:	f000 fd31 	bl	8013fc6 <USBD_ClrFeature>
          break;
 8013564:	e004      	b.n	8013570 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013566:	6839      	ldr	r1, [r7, #0]
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f000 fd88 	bl	801407e <USBD_CtlError>
          break;
 801356e:	bf00      	nop
      }
      break;
 8013570:	e004      	b.n	801357c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013572:	6839      	ldr	r1, [r7, #0]
 8013574:	6878      	ldr	r0, [r7, #4]
 8013576:	f000 fd82 	bl	801407e <USBD_CtlError>
      break;
 801357a:	bf00      	nop
  }

  return ret;
 801357c:	7bfb      	ldrb	r3, [r7, #15]
}
 801357e:	4618      	mov	r0, r3
 8013580:	3710      	adds	r7, #16
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}
 8013586:	bf00      	nop

08013588 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b084      	sub	sp, #16
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013592:	2300      	movs	r3, #0
 8013594:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	781b      	ldrb	r3, [r3, #0]
 801359a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801359e:	2b40      	cmp	r3, #64	@ 0x40
 80135a0:	d005      	beq.n	80135ae <USBD_StdItfReq+0x26>
 80135a2:	2b40      	cmp	r3, #64	@ 0x40
 80135a4:	d852      	bhi.n	801364c <USBD_StdItfReq+0xc4>
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d001      	beq.n	80135ae <USBD_StdItfReq+0x26>
 80135aa:	2b20      	cmp	r3, #32
 80135ac:	d14e      	bne.n	801364c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80135b4:	b2db      	uxtb	r3, r3
 80135b6:	3b01      	subs	r3, #1
 80135b8:	2b02      	cmp	r3, #2
 80135ba:	d840      	bhi.n	801363e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	889b      	ldrh	r3, [r3, #4]
 80135c0:	b2db      	uxtb	r3, r3
 80135c2:	2b01      	cmp	r3, #1
 80135c4:	d836      	bhi.n	8013634 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	889b      	ldrh	r3, [r3, #4]
 80135ca:	b2db      	uxtb	r3, r3
 80135cc:	4619      	mov	r1, r3
 80135ce:	6878      	ldr	r0, [r7, #4]
 80135d0:	f7ff fedb 	bl	801338a <USBD_CoreFindIF>
 80135d4:	4603      	mov	r3, r0
 80135d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80135d8:	7bbb      	ldrb	r3, [r7, #14]
 80135da:	2bff      	cmp	r3, #255	@ 0xff
 80135dc:	d01d      	beq.n	801361a <USBD_StdItfReq+0x92>
 80135de:	7bbb      	ldrb	r3, [r7, #14]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d11a      	bne.n	801361a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80135e4:	7bba      	ldrb	r2, [r7, #14]
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	32ae      	adds	r2, #174	@ 0xae
 80135ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135ee:	689b      	ldr	r3, [r3, #8]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d00f      	beq.n	8013614 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80135f4:	7bba      	ldrb	r2, [r7, #14]
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80135fc:	7bba      	ldrb	r2, [r7, #14]
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	32ae      	adds	r2, #174	@ 0xae
 8013602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013606:	689b      	ldr	r3, [r3, #8]
 8013608:	6839      	ldr	r1, [r7, #0]
 801360a:	6878      	ldr	r0, [r7, #4]
 801360c:	4798      	blx	r3
 801360e:	4603      	mov	r3, r0
 8013610:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013612:	e004      	b.n	801361e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013614:	2303      	movs	r3, #3
 8013616:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013618:	e001      	b.n	801361e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801361a:	2303      	movs	r3, #3
 801361c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	88db      	ldrh	r3, [r3, #6]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d110      	bne.n	8013648 <USBD_StdItfReq+0xc0>
 8013626:	7bfb      	ldrb	r3, [r7, #15]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d10d      	bne.n	8013648 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f000 fdfd 	bl	801422c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013632:	e009      	b.n	8013648 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013634:	6839      	ldr	r1, [r7, #0]
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f000 fd21 	bl	801407e <USBD_CtlError>
          break;
 801363c:	e004      	b.n	8013648 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801363e:	6839      	ldr	r1, [r7, #0]
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f000 fd1c 	bl	801407e <USBD_CtlError>
          break;
 8013646:	e000      	b.n	801364a <USBD_StdItfReq+0xc2>
          break;
 8013648:	bf00      	nop
      }
      break;
 801364a:	e004      	b.n	8013656 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801364c:	6839      	ldr	r1, [r7, #0]
 801364e:	6878      	ldr	r0, [r7, #4]
 8013650:	f000 fd15 	bl	801407e <USBD_CtlError>
      break;
 8013654:	bf00      	nop
  }

  return ret;
 8013656:	7bfb      	ldrb	r3, [r7, #15]
}
 8013658:	4618      	mov	r0, r3
 801365a:	3710      	adds	r7, #16
 801365c:	46bd      	mov	sp, r7
 801365e:	bd80      	pop	{r7, pc}

08013660 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b084      	sub	sp, #16
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
 8013668:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801366a:	2300      	movs	r3, #0
 801366c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	889b      	ldrh	r3, [r3, #4]
 8013672:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013674:	683b      	ldr	r3, [r7, #0]
 8013676:	781b      	ldrb	r3, [r3, #0]
 8013678:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801367c:	2b40      	cmp	r3, #64	@ 0x40
 801367e:	d007      	beq.n	8013690 <USBD_StdEPReq+0x30>
 8013680:	2b40      	cmp	r3, #64	@ 0x40
 8013682:	f200 817f 	bhi.w	8013984 <USBD_StdEPReq+0x324>
 8013686:	2b00      	cmp	r3, #0
 8013688:	d02a      	beq.n	80136e0 <USBD_StdEPReq+0x80>
 801368a:	2b20      	cmp	r3, #32
 801368c:	f040 817a 	bne.w	8013984 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013690:	7bbb      	ldrb	r3, [r7, #14]
 8013692:	4619      	mov	r1, r3
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f7ff fe85 	bl	80133a4 <USBD_CoreFindEP>
 801369a:	4603      	mov	r3, r0
 801369c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801369e:	7b7b      	ldrb	r3, [r7, #13]
 80136a0:	2bff      	cmp	r3, #255	@ 0xff
 80136a2:	f000 8174 	beq.w	801398e <USBD_StdEPReq+0x32e>
 80136a6:	7b7b      	ldrb	r3, [r7, #13]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	f040 8170 	bne.w	801398e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80136ae:	7b7a      	ldrb	r2, [r7, #13]
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80136b6:	7b7a      	ldrb	r2, [r7, #13]
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	32ae      	adds	r2, #174	@ 0xae
 80136bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136c0:	689b      	ldr	r3, [r3, #8]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	f000 8163 	beq.w	801398e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80136c8:	7b7a      	ldrb	r2, [r7, #13]
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	32ae      	adds	r2, #174	@ 0xae
 80136ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136d2:	689b      	ldr	r3, [r3, #8]
 80136d4:	6839      	ldr	r1, [r7, #0]
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	4798      	blx	r3
 80136da:	4603      	mov	r3, r0
 80136dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80136de:	e156      	b.n	801398e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	785b      	ldrb	r3, [r3, #1]
 80136e4:	2b03      	cmp	r3, #3
 80136e6:	d008      	beq.n	80136fa <USBD_StdEPReq+0x9a>
 80136e8:	2b03      	cmp	r3, #3
 80136ea:	f300 8145 	bgt.w	8013978 <USBD_StdEPReq+0x318>
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	f000 809b 	beq.w	801382a <USBD_StdEPReq+0x1ca>
 80136f4:	2b01      	cmp	r3, #1
 80136f6:	d03c      	beq.n	8013772 <USBD_StdEPReq+0x112>
 80136f8:	e13e      	b.n	8013978 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013700:	b2db      	uxtb	r3, r3
 8013702:	2b02      	cmp	r3, #2
 8013704:	d002      	beq.n	801370c <USBD_StdEPReq+0xac>
 8013706:	2b03      	cmp	r3, #3
 8013708:	d016      	beq.n	8013738 <USBD_StdEPReq+0xd8>
 801370a:	e02c      	b.n	8013766 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801370c:	7bbb      	ldrb	r3, [r7, #14]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d00d      	beq.n	801372e <USBD_StdEPReq+0xce>
 8013712:	7bbb      	ldrb	r3, [r7, #14]
 8013714:	2b80      	cmp	r3, #128	@ 0x80
 8013716:	d00a      	beq.n	801372e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013718:	7bbb      	ldrb	r3, [r7, #14]
 801371a:	4619      	mov	r1, r3
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f004 fa83 	bl	8017c28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013722:	2180      	movs	r1, #128	@ 0x80
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f004 fa7f 	bl	8017c28 <USBD_LL_StallEP>
 801372a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801372c:	e020      	b.n	8013770 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801372e:	6839      	ldr	r1, [r7, #0]
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	f000 fca4 	bl	801407e <USBD_CtlError>
              break;
 8013736:	e01b      	b.n	8013770 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013738:	683b      	ldr	r3, [r7, #0]
 801373a:	885b      	ldrh	r3, [r3, #2]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d10e      	bne.n	801375e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013740:	7bbb      	ldrb	r3, [r7, #14]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d00b      	beq.n	801375e <USBD_StdEPReq+0xfe>
 8013746:	7bbb      	ldrb	r3, [r7, #14]
 8013748:	2b80      	cmp	r3, #128	@ 0x80
 801374a:	d008      	beq.n	801375e <USBD_StdEPReq+0xfe>
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	88db      	ldrh	r3, [r3, #6]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d104      	bne.n	801375e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013754:	7bbb      	ldrb	r3, [r7, #14]
 8013756:	4619      	mov	r1, r3
 8013758:	6878      	ldr	r0, [r7, #4]
 801375a:	f004 fa65 	bl	8017c28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801375e:	6878      	ldr	r0, [r7, #4]
 8013760:	f000 fd64 	bl	801422c <USBD_CtlSendStatus>

              break;
 8013764:	e004      	b.n	8013770 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013766:	6839      	ldr	r1, [r7, #0]
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	f000 fc88 	bl	801407e <USBD_CtlError>
              break;
 801376e:	bf00      	nop
          }
          break;
 8013770:	e107      	b.n	8013982 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013778:	b2db      	uxtb	r3, r3
 801377a:	2b02      	cmp	r3, #2
 801377c:	d002      	beq.n	8013784 <USBD_StdEPReq+0x124>
 801377e:	2b03      	cmp	r3, #3
 8013780:	d016      	beq.n	80137b0 <USBD_StdEPReq+0x150>
 8013782:	e04b      	b.n	801381c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013784:	7bbb      	ldrb	r3, [r7, #14]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d00d      	beq.n	80137a6 <USBD_StdEPReq+0x146>
 801378a:	7bbb      	ldrb	r3, [r7, #14]
 801378c:	2b80      	cmp	r3, #128	@ 0x80
 801378e:	d00a      	beq.n	80137a6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013790:	7bbb      	ldrb	r3, [r7, #14]
 8013792:	4619      	mov	r1, r3
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f004 fa47 	bl	8017c28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801379a:	2180      	movs	r1, #128	@ 0x80
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	f004 fa43 	bl	8017c28 <USBD_LL_StallEP>
 80137a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80137a4:	e040      	b.n	8013828 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80137a6:	6839      	ldr	r1, [r7, #0]
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f000 fc68 	bl	801407e <USBD_CtlError>
              break;
 80137ae:	e03b      	b.n	8013828 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	885b      	ldrh	r3, [r3, #2]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d136      	bne.n	8013826 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80137b8:	7bbb      	ldrb	r3, [r7, #14]
 80137ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d004      	beq.n	80137cc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80137c2:	7bbb      	ldrb	r3, [r7, #14]
 80137c4:	4619      	mov	r1, r3
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f004 fa4d 	bl	8017c66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f000 fd2d 	bl	801422c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80137d2:	7bbb      	ldrb	r3, [r7, #14]
 80137d4:	4619      	mov	r1, r3
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	f7ff fde4 	bl	80133a4 <USBD_CoreFindEP>
 80137dc:	4603      	mov	r3, r0
 80137de:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80137e0:	7b7b      	ldrb	r3, [r7, #13]
 80137e2:	2bff      	cmp	r3, #255	@ 0xff
 80137e4:	d01f      	beq.n	8013826 <USBD_StdEPReq+0x1c6>
 80137e6:	7b7b      	ldrb	r3, [r7, #13]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d11c      	bne.n	8013826 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80137ec:	7b7a      	ldrb	r2, [r7, #13]
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80137f4:	7b7a      	ldrb	r2, [r7, #13]
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	32ae      	adds	r2, #174	@ 0xae
 80137fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137fe:	689b      	ldr	r3, [r3, #8]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d010      	beq.n	8013826 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013804:	7b7a      	ldrb	r2, [r7, #13]
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	32ae      	adds	r2, #174	@ 0xae
 801380a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801380e:	689b      	ldr	r3, [r3, #8]
 8013810:	6839      	ldr	r1, [r7, #0]
 8013812:	6878      	ldr	r0, [r7, #4]
 8013814:	4798      	blx	r3
 8013816:	4603      	mov	r3, r0
 8013818:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801381a:	e004      	b.n	8013826 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801381c:	6839      	ldr	r1, [r7, #0]
 801381e:	6878      	ldr	r0, [r7, #4]
 8013820:	f000 fc2d 	bl	801407e <USBD_CtlError>
              break;
 8013824:	e000      	b.n	8013828 <USBD_StdEPReq+0x1c8>
              break;
 8013826:	bf00      	nop
          }
          break;
 8013828:	e0ab      	b.n	8013982 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013830:	b2db      	uxtb	r3, r3
 8013832:	2b02      	cmp	r3, #2
 8013834:	d002      	beq.n	801383c <USBD_StdEPReq+0x1dc>
 8013836:	2b03      	cmp	r3, #3
 8013838:	d032      	beq.n	80138a0 <USBD_StdEPReq+0x240>
 801383a:	e097      	b.n	801396c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801383c:	7bbb      	ldrb	r3, [r7, #14]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d007      	beq.n	8013852 <USBD_StdEPReq+0x1f2>
 8013842:	7bbb      	ldrb	r3, [r7, #14]
 8013844:	2b80      	cmp	r3, #128	@ 0x80
 8013846:	d004      	beq.n	8013852 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013848:	6839      	ldr	r1, [r7, #0]
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	f000 fc17 	bl	801407e <USBD_CtlError>
                break;
 8013850:	e091      	b.n	8013976 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013852:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013856:	2b00      	cmp	r3, #0
 8013858:	da0b      	bge.n	8013872 <USBD_StdEPReq+0x212>
 801385a:	7bbb      	ldrb	r3, [r7, #14]
 801385c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013860:	4613      	mov	r3, r2
 8013862:	009b      	lsls	r3, r3, #2
 8013864:	4413      	add	r3, r2
 8013866:	009b      	lsls	r3, r3, #2
 8013868:	3310      	adds	r3, #16
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	4413      	add	r3, r2
 801386e:	3304      	adds	r3, #4
 8013870:	e00b      	b.n	801388a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013872:	7bbb      	ldrb	r3, [r7, #14]
 8013874:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013878:	4613      	mov	r3, r2
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	4413      	add	r3, r2
 801387e:	009b      	lsls	r3, r3, #2
 8013880:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013884:	687a      	ldr	r2, [r7, #4]
 8013886:	4413      	add	r3, r2
 8013888:	3304      	adds	r3, #4
 801388a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801388c:	68bb      	ldr	r3, [r7, #8]
 801388e:	2200      	movs	r2, #0
 8013890:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	2202      	movs	r2, #2
 8013896:	4619      	mov	r1, r3
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f000 fc6d 	bl	8014178 <USBD_CtlSendData>
              break;
 801389e:	e06a      	b.n	8013976 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80138a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	da11      	bge.n	80138cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80138a8:	7bbb      	ldrb	r3, [r7, #14]
 80138aa:	f003 020f 	and.w	r2, r3, #15
 80138ae:	6879      	ldr	r1, [r7, #4]
 80138b0:	4613      	mov	r3, r2
 80138b2:	009b      	lsls	r3, r3, #2
 80138b4:	4413      	add	r3, r2
 80138b6:	009b      	lsls	r3, r3, #2
 80138b8:	440b      	add	r3, r1
 80138ba:	3324      	adds	r3, #36	@ 0x24
 80138bc:	881b      	ldrh	r3, [r3, #0]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d117      	bne.n	80138f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80138c2:	6839      	ldr	r1, [r7, #0]
 80138c4:	6878      	ldr	r0, [r7, #4]
 80138c6:	f000 fbda 	bl	801407e <USBD_CtlError>
                  break;
 80138ca:	e054      	b.n	8013976 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80138cc:	7bbb      	ldrb	r3, [r7, #14]
 80138ce:	f003 020f 	and.w	r2, r3, #15
 80138d2:	6879      	ldr	r1, [r7, #4]
 80138d4:	4613      	mov	r3, r2
 80138d6:	009b      	lsls	r3, r3, #2
 80138d8:	4413      	add	r3, r2
 80138da:	009b      	lsls	r3, r3, #2
 80138dc:	440b      	add	r3, r1
 80138de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80138e2:	881b      	ldrh	r3, [r3, #0]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d104      	bne.n	80138f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80138e8:	6839      	ldr	r1, [r7, #0]
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f000 fbc7 	bl	801407e <USBD_CtlError>
                  break;
 80138f0:	e041      	b.n	8013976 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80138f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	da0b      	bge.n	8013912 <USBD_StdEPReq+0x2b2>
 80138fa:	7bbb      	ldrb	r3, [r7, #14]
 80138fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013900:	4613      	mov	r3, r2
 8013902:	009b      	lsls	r3, r3, #2
 8013904:	4413      	add	r3, r2
 8013906:	009b      	lsls	r3, r3, #2
 8013908:	3310      	adds	r3, #16
 801390a:	687a      	ldr	r2, [r7, #4]
 801390c:	4413      	add	r3, r2
 801390e:	3304      	adds	r3, #4
 8013910:	e00b      	b.n	801392a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013912:	7bbb      	ldrb	r3, [r7, #14]
 8013914:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013918:	4613      	mov	r3, r2
 801391a:	009b      	lsls	r3, r3, #2
 801391c:	4413      	add	r3, r2
 801391e:	009b      	lsls	r3, r3, #2
 8013920:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013924:	687a      	ldr	r2, [r7, #4]
 8013926:	4413      	add	r3, r2
 8013928:	3304      	adds	r3, #4
 801392a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801392c:	7bbb      	ldrb	r3, [r7, #14]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d002      	beq.n	8013938 <USBD_StdEPReq+0x2d8>
 8013932:	7bbb      	ldrb	r3, [r7, #14]
 8013934:	2b80      	cmp	r3, #128	@ 0x80
 8013936:	d103      	bne.n	8013940 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	2200      	movs	r2, #0
 801393c:	601a      	str	r2, [r3, #0]
 801393e:	e00e      	b.n	801395e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013940:	7bbb      	ldrb	r3, [r7, #14]
 8013942:	4619      	mov	r1, r3
 8013944:	6878      	ldr	r0, [r7, #4]
 8013946:	f004 f9ad 	bl	8017ca4 <USBD_LL_IsStallEP>
 801394a:	4603      	mov	r3, r0
 801394c:	2b00      	cmp	r3, #0
 801394e:	d003      	beq.n	8013958 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013950:	68bb      	ldr	r3, [r7, #8]
 8013952:	2201      	movs	r2, #1
 8013954:	601a      	str	r2, [r3, #0]
 8013956:	e002      	b.n	801395e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	2200      	movs	r2, #0
 801395c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801395e:	68bb      	ldr	r3, [r7, #8]
 8013960:	2202      	movs	r2, #2
 8013962:	4619      	mov	r1, r3
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f000 fc07 	bl	8014178 <USBD_CtlSendData>
              break;
 801396a:	e004      	b.n	8013976 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801396c:	6839      	ldr	r1, [r7, #0]
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f000 fb85 	bl	801407e <USBD_CtlError>
              break;
 8013974:	bf00      	nop
          }
          break;
 8013976:	e004      	b.n	8013982 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013978:	6839      	ldr	r1, [r7, #0]
 801397a:	6878      	ldr	r0, [r7, #4]
 801397c:	f000 fb7f 	bl	801407e <USBD_CtlError>
          break;
 8013980:	bf00      	nop
      }
      break;
 8013982:	e005      	b.n	8013990 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013984:	6839      	ldr	r1, [r7, #0]
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	f000 fb79 	bl	801407e <USBD_CtlError>
      break;
 801398c:	e000      	b.n	8013990 <USBD_StdEPReq+0x330>
      break;
 801398e:	bf00      	nop
  }

  return ret;
 8013990:	7bfb      	ldrb	r3, [r7, #15]
}
 8013992:	4618      	mov	r0, r3
 8013994:	3710      	adds	r7, #16
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}
	...

0801399c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b084      	sub	sp, #16
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80139a6:	2300      	movs	r3, #0
 80139a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80139aa:	2300      	movs	r3, #0
 80139ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80139ae:	2300      	movs	r3, #0
 80139b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	885b      	ldrh	r3, [r3, #2]
 80139b6:	0a1b      	lsrs	r3, r3, #8
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	3b01      	subs	r3, #1
 80139bc:	2b0e      	cmp	r3, #14
 80139be:	f200 8152 	bhi.w	8013c66 <USBD_GetDescriptor+0x2ca>
 80139c2:	a201      	add	r2, pc, #4	@ (adr r2, 80139c8 <USBD_GetDescriptor+0x2c>)
 80139c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139c8:	08013a39 	.word	0x08013a39
 80139cc:	08013a51 	.word	0x08013a51
 80139d0:	08013a91 	.word	0x08013a91
 80139d4:	08013c67 	.word	0x08013c67
 80139d8:	08013c67 	.word	0x08013c67
 80139dc:	08013c07 	.word	0x08013c07
 80139e0:	08013c33 	.word	0x08013c33
 80139e4:	08013c67 	.word	0x08013c67
 80139e8:	08013c67 	.word	0x08013c67
 80139ec:	08013c67 	.word	0x08013c67
 80139f0:	08013c67 	.word	0x08013c67
 80139f4:	08013c67 	.word	0x08013c67
 80139f8:	08013c67 	.word	0x08013c67
 80139fc:	08013c67 	.word	0x08013c67
 8013a00:	08013a05 	.word	0x08013a05
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013a0a:	69db      	ldr	r3, [r3, #28]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d00b      	beq.n	8013a28 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013a16:	69db      	ldr	r3, [r3, #28]
 8013a18:	687a      	ldr	r2, [r7, #4]
 8013a1a:	7c12      	ldrb	r2, [r2, #16]
 8013a1c:	f107 0108 	add.w	r1, r7, #8
 8013a20:	4610      	mov	r0, r2
 8013a22:	4798      	blx	r3
 8013a24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013a26:	e126      	b.n	8013c76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013a28:	6839      	ldr	r1, [r7, #0]
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f000 fb27 	bl	801407e <USBD_CtlError>
        err++;
 8013a30:	7afb      	ldrb	r3, [r7, #11]
 8013a32:	3301      	adds	r3, #1
 8013a34:	72fb      	strb	r3, [r7, #11]
      break;
 8013a36:	e11e      	b.n	8013c76 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	687a      	ldr	r2, [r7, #4]
 8013a42:	7c12      	ldrb	r2, [r2, #16]
 8013a44:	f107 0108 	add.w	r1, r7, #8
 8013a48:	4610      	mov	r0, r2
 8013a4a:	4798      	blx	r3
 8013a4c:	60f8      	str	r0, [r7, #12]
      break;
 8013a4e:	e112      	b.n	8013c76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	7c1b      	ldrb	r3, [r3, #16]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d10d      	bne.n	8013a74 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a60:	f107 0208 	add.w	r2, r7, #8
 8013a64:	4610      	mov	r0, r2
 8013a66:	4798      	blx	r3
 8013a68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	3301      	adds	r3, #1
 8013a6e:	2202      	movs	r2, #2
 8013a70:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013a72:	e100      	b.n	8013c76 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a7c:	f107 0208 	add.w	r2, r7, #8
 8013a80:	4610      	mov	r0, r2
 8013a82:	4798      	blx	r3
 8013a84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	3301      	adds	r3, #1
 8013a8a:	2202      	movs	r2, #2
 8013a8c:	701a      	strb	r2, [r3, #0]
      break;
 8013a8e:	e0f2      	b.n	8013c76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	885b      	ldrh	r3, [r3, #2]
 8013a94:	b2db      	uxtb	r3, r3
 8013a96:	2b05      	cmp	r3, #5
 8013a98:	f200 80ac 	bhi.w	8013bf4 <USBD_GetDescriptor+0x258>
 8013a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8013aa4 <USBD_GetDescriptor+0x108>)
 8013a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013aa2:	bf00      	nop
 8013aa4:	08013abd 	.word	0x08013abd
 8013aa8:	08013af1 	.word	0x08013af1
 8013aac:	08013b25 	.word	0x08013b25
 8013ab0:	08013b59 	.word	0x08013b59
 8013ab4:	08013b8d 	.word	0x08013b8d
 8013ab8:	08013bc1 	.word	0x08013bc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013ac2:	685b      	ldr	r3, [r3, #4]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d00b      	beq.n	8013ae0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013ace:	685b      	ldr	r3, [r3, #4]
 8013ad0:	687a      	ldr	r2, [r7, #4]
 8013ad2:	7c12      	ldrb	r2, [r2, #16]
 8013ad4:	f107 0108 	add.w	r1, r7, #8
 8013ad8:	4610      	mov	r0, r2
 8013ada:	4798      	blx	r3
 8013adc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013ade:	e091      	b.n	8013c04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013ae0:	6839      	ldr	r1, [r7, #0]
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	f000 facb 	bl	801407e <USBD_CtlError>
            err++;
 8013ae8:	7afb      	ldrb	r3, [r7, #11]
 8013aea:	3301      	adds	r3, #1
 8013aec:	72fb      	strb	r3, [r7, #11]
          break;
 8013aee:	e089      	b.n	8013c04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013af6:	689b      	ldr	r3, [r3, #8]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d00b      	beq.n	8013b14 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b02:	689b      	ldr	r3, [r3, #8]
 8013b04:	687a      	ldr	r2, [r7, #4]
 8013b06:	7c12      	ldrb	r2, [r2, #16]
 8013b08:	f107 0108 	add.w	r1, r7, #8
 8013b0c:	4610      	mov	r0, r2
 8013b0e:	4798      	blx	r3
 8013b10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013b12:	e077      	b.n	8013c04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013b14:	6839      	ldr	r1, [r7, #0]
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	f000 fab1 	bl	801407e <USBD_CtlError>
            err++;
 8013b1c:	7afb      	ldrb	r3, [r7, #11]
 8013b1e:	3301      	adds	r3, #1
 8013b20:	72fb      	strb	r3, [r7, #11]
          break;
 8013b22:	e06f      	b.n	8013c04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b2a:	68db      	ldr	r3, [r3, #12]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d00b      	beq.n	8013b48 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b36:	68db      	ldr	r3, [r3, #12]
 8013b38:	687a      	ldr	r2, [r7, #4]
 8013b3a:	7c12      	ldrb	r2, [r2, #16]
 8013b3c:	f107 0108 	add.w	r1, r7, #8
 8013b40:	4610      	mov	r0, r2
 8013b42:	4798      	blx	r3
 8013b44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013b46:	e05d      	b.n	8013c04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013b48:	6839      	ldr	r1, [r7, #0]
 8013b4a:	6878      	ldr	r0, [r7, #4]
 8013b4c:	f000 fa97 	bl	801407e <USBD_CtlError>
            err++;
 8013b50:	7afb      	ldrb	r3, [r7, #11]
 8013b52:	3301      	adds	r3, #1
 8013b54:	72fb      	strb	r3, [r7, #11]
          break;
 8013b56:	e055      	b.n	8013c04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b5e:	691b      	ldr	r3, [r3, #16]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d00b      	beq.n	8013b7c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b6a:	691b      	ldr	r3, [r3, #16]
 8013b6c:	687a      	ldr	r2, [r7, #4]
 8013b6e:	7c12      	ldrb	r2, [r2, #16]
 8013b70:	f107 0108 	add.w	r1, r7, #8
 8013b74:	4610      	mov	r0, r2
 8013b76:	4798      	blx	r3
 8013b78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013b7a:	e043      	b.n	8013c04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013b7c:	6839      	ldr	r1, [r7, #0]
 8013b7e:	6878      	ldr	r0, [r7, #4]
 8013b80:	f000 fa7d 	bl	801407e <USBD_CtlError>
            err++;
 8013b84:	7afb      	ldrb	r3, [r7, #11]
 8013b86:	3301      	adds	r3, #1
 8013b88:	72fb      	strb	r3, [r7, #11]
          break;
 8013b8a:	e03b      	b.n	8013c04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b92:	695b      	ldr	r3, [r3, #20]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d00b      	beq.n	8013bb0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b9e:	695b      	ldr	r3, [r3, #20]
 8013ba0:	687a      	ldr	r2, [r7, #4]
 8013ba2:	7c12      	ldrb	r2, [r2, #16]
 8013ba4:	f107 0108 	add.w	r1, r7, #8
 8013ba8:	4610      	mov	r0, r2
 8013baa:	4798      	blx	r3
 8013bac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013bae:	e029      	b.n	8013c04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013bb0:	6839      	ldr	r1, [r7, #0]
 8013bb2:	6878      	ldr	r0, [r7, #4]
 8013bb4:	f000 fa63 	bl	801407e <USBD_CtlError>
            err++;
 8013bb8:	7afb      	ldrb	r3, [r7, #11]
 8013bba:	3301      	adds	r3, #1
 8013bbc:	72fb      	strb	r3, [r7, #11]
          break;
 8013bbe:	e021      	b.n	8013c04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013bc6:	699b      	ldr	r3, [r3, #24]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d00b      	beq.n	8013be4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013bd2:	699b      	ldr	r3, [r3, #24]
 8013bd4:	687a      	ldr	r2, [r7, #4]
 8013bd6:	7c12      	ldrb	r2, [r2, #16]
 8013bd8:	f107 0108 	add.w	r1, r7, #8
 8013bdc:	4610      	mov	r0, r2
 8013bde:	4798      	blx	r3
 8013be0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013be2:	e00f      	b.n	8013c04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013be4:	6839      	ldr	r1, [r7, #0]
 8013be6:	6878      	ldr	r0, [r7, #4]
 8013be8:	f000 fa49 	bl	801407e <USBD_CtlError>
            err++;
 8013bec:	7afb      	ldrb	r3, [r7, #11]
 8013bee:	3301      	adds	r3, #1
 8013bf0:	72fb      	strb	r3, [r7, #11]
          break;
 8013bf2:	e007      	b.n	8013c04 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013bf4:	6839      	ldr	r1, [r7, #0]
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f000 fa41 	bl	801407e <USBD_CtlError>
          err++;
 8013bfc:	7afb      	ldrb	r3, [r7, #11]
 8013bfe:	3301      	adds	r3, #1
 8013c00:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013c02:	bf00      	nop
      }
      break;
 8013c04:	e037      	b.n	8013c76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	7c1b      	ldrb	r3, [r3, #16]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d109      	bne.n	8013c22 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c16:	f107 0208 	add.w	r2, r7, #8
 8013c1a:	4610      	mov	r0, r2
 8013c1c:	4798      	blx	r3
 8013c1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013c20:	e029      	b.n	8013c76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013c22:	6839      	ldr	r1, [r7, #0]
 8013c24:	6878      	ldr	r0, [r7, #4]
 8013c26:	f000 fa2a 	bl	801407e <USBD_CtlError>
        err++;
 8013c2a:	7afb      	ldrb	r3, [r7, #11]
 8013c2c:	3301      	adds	r3, #1
 8013c2e:	72fb      	strb	r3, [r7, #11]
      break;
 8013c30:	e021      	b.n	8013c76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	7c1b      	ldrb	r3, [r3, #16]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d10d      	bne.n	8013c56 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c42:	f107 0208 	add.w	r2, r7, #8
 8013c46:	4610      	mov	r0, r2
 8013c48:	4798      	blx	r3
 8013c4a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	3301      	adds	r3, #1
 8013c50:	2207      	movs	r2, #7
 8013c52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013c54:	e00f      	b.n	8013c76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013c56:	6839      	ldr	r1, [r7, #0]
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f000 fa10 	bl	801407e <USBD_CtlError>
        err++;
 8013c5e:	7afb      	ldrb	r3, [r7, #11]
 8013c60:	3301      	adds	r3, #1
 8013c62:	72fb      	strb	r3, [r7, #11]
      break;
 8013c64:	e007      	b.n	8013c76 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013c66:	6839      	ldr	r1, [r7, #0]
 8013c68:	6878      	ldr	r0, [r7, #4]
 8013c6a:	f000 fa08 	bl	801407e <USBD_CtlError>
      err++;
 8013c6e:	7afb      	ldrb	r3, [r7, #11]
 8013c70:	3301      	adds	r3, #1
 8013c72:	72fb      	strb	r3, [r7, #11]
      break;
 8013c74:	bf00      	nop
  }

  if (err != 0U)
 8013c76:	7afb      	ldrb	r3, [r7, #11]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d11e      	bne.n	8013cba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	88db      	ldrh	r3, [r3, #6]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d016      	beq.n	8013cb2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013c84:	893b      	ldrh	r3, [r7, #8]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d00e      	beq.n	8013ca8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	88da      	ldrh	r2, [r3, #6]
 8013c8e:	893b      	ldrh	r3, [r7, #8]
 8013c90:	4293      	cmp	r3, r2
 8013c92:	bf28      	it	cs
 8013c94:	4613      	movcs	r3, r2
 8013c96:	b29b      	uxth	r3, r3
 8013c98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013c9a:	893b      	ldrh	r3, [r7, #8]
 8013c9c:	461a      	mov	r2, r3
 8013c9e:	68f9      	ldr	r1, [r7, #12]
 8013ca0:	6878      	ldr	r0, [r7, #4]
 8013ca2:	f000 fa69 	bl	8014178 <USBD_CtlSendData>
 8013ca6:	e009      	b.n	8013cbc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013ca8:	6839      	ldr	r1, [r7, #0]
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	f000 f9e7 	bl	801407e <USBD_CtlError>
 8013cb0:	e004      	b.n	8013cbc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013cb2:	6878      	ldr	r0, [r7, #4]
 8013cb4:	f000 faba 	bl	801422c <USBD_CtlSendStatus>
 8013cb8:	e000      	b.n	8013cbc <USBD_GetDescriptor+0x320>
    return;
 8013cba:	bf00      	nop
  }
}
 8013cbc:	3710      	adds	r7, #16
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	bd80      	pop	{r7, pc}
 8013cc2:	bf00      	nop

08013cc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b084      	sub	sp, #16
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
 8013ccc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	889b      	ldrh	r3, [r3, #4]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d131      	bne.n	8013d3a <USBD_SetAddress+0x76>
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	88db      	ldrh	r3, [r3, #6]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d12d      	bne.n	8013d3a <USBD_SetAddress+0x76>
 8013cde:	683b      	ldr	r3, [r7, #0]
 8013ce0:	885b      	ldrh	r3, [r3, #2]
 8013ce2:	2b7f      	cmp	r3, #127	@ 0x7f
 8013ce4:	d829      	bhi.n	8013d3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013ce6:	683b      	ldr	r3, [r7, #0]
 8013ce8:	885b      	ldrh	r3, [r3, #2]
 8013cea:	b2db      	uxtb	r3, r3
 8013cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013cf0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013cf8:	b2db      	uxtb	r3, r3
 8013cfa:	2b03      	cmp	r3, #3
 8013cfc:	d104      	bne.n	8013d08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013cfe:	6839      	ldr	r1, [r7, #0]
 8013d00:	6878      	ldr	r0, [r7, #4]
 8013d02:	f000 f9bc 	bl	801407e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d06:	e01d      	b.n	8013d44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	7bfa      	ldrb	r2, [r7, #15]
 8013d0c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013d10:	7bfb      	ldrb	r3, [r7, #15]
 8013d12:	4619      	mov	r1, r3
 8013d14:	6878      	ldr	r0, [r7, #4]
 8013d16:	f003 fff1 	bl	8017cfc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f000 fa86 	bl	801422c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013d20:	7bfb      	ldrb	r3, [r7, #15]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d004      	beq.n	8013d30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	2202      	movs	r2, #2
 8013d2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d2e:	e009      	b.n	8013d44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2201      	movs	r2, #1
 8013d34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d38:	e004      	b.n	8013d44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013d3a:	6839      	ldr	r1, [r7, #0]
 8013d3c:	6878      	ldr	r0, [r7, #4]
 8013d3e:	f000 f99e 	bl	801407e <USBD_CtlError>
  }
}
 8013d42:	bf00      	nop
 8013d44:	bf00      	nop
 8013d46:	3710      	adds	r7, #16
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}

08013d4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b084      	sub	sp, #16
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
 8013d54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013d56:	2300      	movs	r3, #0
 8013d58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013d5a:	683b      	ldr	r3, [r7, #0]
 8013d5c:	885b      	ldrh	r3, [r3, #2]
 8013d5e:	b2da      	uxtb	r2, r3
 8013d60:	4b4e      	ldr	r3, [pc, #312]	@ (8013e9c <USBD_SetConfig+0x150>)
 8013d62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013d64:	4b4d      	ldr	r3, [pc, #308]	@ (8013e9c <USBD_SetConfig+0x150>)
 8013d66:	781b      	ldrb	r3, [r3, #0]
 8013d68:	2b01      	cmp	r3, #1
 8013d6a:	d905      	bls.n	8013d78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013d6c:	6839      	ldr	r1, [r7, #0]
 8013d6e:	6878      	ldr	r0, [r7, #4]
 8013d70:	f000 f985 	bl	801407e <USBD_CtlError>
    return USBD_FAIL;
 8013d74:	2303      	movs	r3, #3
 8013d76:	e08c      	b.n	8013e92 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d7e:	b2db      	uxtb	r3, r3
 8013d80:	2b02      	cmp	r3, #2
 8013d82:	d002      	beq.n	8013d8a <USBD_SetConfig+0x3e>
 8013d84:	2b03      	cmp	r3, #3
 8013d86:	d029      	beq.n	8013ddc <USBD_SetConfig+0x90>
 8013d88:	e075      	b.n	8013e76 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013d8a:	4b44      	ldr	r3, [pc, #272]	@ (8013e9c <USBD_SetConfig+0x150>)
 8013d8c:	781b      	ldrb	r3, [r3, #0]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d020      	beq.n	8013dd4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8013d92:	4b42      	ldr	r3, [pc, #264]	@ (8013e9c <USBD_SetConfig+0x150>)
 8013d94:	781b      	ldrb	r3, [r3, #0]
 8013d96:	461a      	mov	r2, r3
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013d9c:	4b3f      	ldr	r3, [pc, #252]	@ (8013e9c <USBD_SetConfig+0x150>)
 8013d9e:	781b      	ldrb	r3, [r3, #0]
 8013da0:	4619      	mov	r1, r3
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f7fe ffb9 	bl	8012d1a <USBD_SetClassConfig>
 8013da8:	4603      	mov	r3, r0
 8013daa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013dac:	7bfb      	ldrb	r3, [r7, #15]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d008      	beq.n	8013dc4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8013db2:	6839      	ldr	r1, [r7, #0]
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	f000 f962 	bl	801407e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	2202      	movs	r2, #2
 8013dbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013dc2:	e065      	b.n	8013e90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	f000 fa31 	bl	801422c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2203      	movs	r2, #3
 8013dce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013dd2:	e05d      	b.n	8013e90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013dd4:	6878      	ldr	r0, [r7, #4]
 8013dd6:	f000 fa29 	bl	801422c <USBD_CtlSendStatus>
      break;
 8013dda:	e059      	b.n	8013e90 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8013e9c <USBD_SetConfig+0x150>)
 8013dde:	781b      	ldrb	r3, [r3, #0]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d112      	bne.n	8013e0a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	2202      	movs	r2, #2
 8013de8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8013dec:	4b2b      	ldr	r3, [pc, #172]	@ (8013e9c <USBD_SetConfig+0x150>)
 8013dee:	781b      	ldrb	r3, [r3, #0]
 8013df0:	461a      	mov	r2, r3
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013df6:	4b29      	ldr	r3, [pc, #164]	@ (8013e9c <USBD_SetConfig+0x150>)
 8013df8:	781b      	ldrb	r3, [r3, #0]
 8013dfa:	4619      	mov	r1, r3
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f7fe ffa8 	bl	8012d52 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f000 fa12 	bl	801422c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013e08:	e042      	b.n	8013e90 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8013e0a:	4b24      	ldr	r3, [pc, #144]	@ (8013e9c <USBD_SetConfig+0x150>)
 8013e0c:	781b      	ldrb	r3, [r3, #0]
 8013e0e:	461a      	mov	r2, r3
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	685b      	ldr	r3, [r3, #4]
 8013e14:	429a      	cmp	r2, r3
 8013e16:	d02a      	beq.n	8013e6e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	685b      	ldr	r3, [r3, #4]
 8013e1c:	b2db      	uxtb	r3, r3
 8013e1e:	4619      	mov	r1, r3
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f7fe ff96 	bl	8012d52 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013e26:	4b1d      	ldr	r3, [pc, #116]	@ (8013e9c <USBD_SetConfig+0x150>)
 8013e28:	781b      	ldrb	r3, [r3, #0]
 8013e2a:	461a      	mov	r2, r3
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013e30:	4b1a      	ldr	r3, [pc, #104]	@ (8013e9c <USBD_SetConfig+0x150>)
 8013e32:	781b      	ldrb	r3, [r3, #0]
 8013e34:	4619      	mov	r1, r3
 8013e36:	6878      	ldr	r0, [r7, #4]
 8013e38:	f7fe ff6f 	bl	8012d1a <USBD_SetClassConfig>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013e40:	7bfb      	ldrb	r3, [r7, #15]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d00f      	beq.n	8013e66 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8013e46:	6839      	ldr	r1, [r7, #0]
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f000 f918 	bl	801407e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	685b      	ldr	r3, [r3, #4]
 8013e52:	b2db      	uxtb	r3, r3
 8013e54:	4619      	mov	r1, r3
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f7fe ff7b 	bl	8012d52 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	2202      	movs	r2, #2
 8013e60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013e64:	e014      	b.n	8013e90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013e66:	6878      	ldr	r0, [r7, #4]
 8013e68:	f000 f9e0 	bl	801422c <USBD_CtlSendStatus>
      break;
 8013e6c:	e010      	b.n	8013e90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013e6e:	6878      	ldr	r0, [r7, #4]
 8013e70:	f000 f9dc 	bl	801422c <USBD_CtlSendStatus>
      break;
 8013e74:	e00c      	b.n	8013e90 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8013e76:	6839      	ldr	r1, [r7, #0]
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f000 f900 	bl	801407e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013e7e:	4b07      	ldr	r3, [pc, #28]	@ (8013e9c <USBD_SetConfig+0x150>)
 8013e80:	781b      	ldrb	r3, [r3, #0]
 8013e82:	4619      	mov	r1, r3
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f7fe ff64 	bl	8012d52 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013e8a:	2303      	movs	r3, #3
 8013e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8013e8e:	bf00      	nop
  }

  return ret;
 8013e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e92:	4618      	mov	r0, r3
 8013e94:	3710      	adds	r7, #16
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}
 8013e9a:	bf00      	nop
 8013e9c:	240018a8 	.word	0x240018a8

08013ea0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b082      	sub	sp, #8
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
 8013ea8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	88db      	ldrh	r3, [r3, #6]
 8013eae:	2b01      	cmp	r3, #1
 8013eb0:	d004      	beq.n	8013ebc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013eb2:	6839      	ldr	r1, [r7, #0]
 8013eb4:	6878      	ldr	r0, [r7, #4]
 8013eb6:	f000 f8e2 	bl	801407e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013eba:	e023      	b.n	8013f04 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ec2:	b2db      	uxtb	r3, r3
 8013ec4:	2b02      	cmp	r3, #2
 8013ec6:	dc02      	bgt.n	8013ece <USBD_GetConfig+0x2e>
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	dc03      	bgt.n	8013ed4 <USBD_GetConfig+0x34>
 8013ecc:	e015      	b.n	8013efa <USBD_GetConfig+0x5a>
 8013ece:	2b03      	cmp	r3, #3
 8013ed0:	d00b      	beq.n	8013eea <USBD_GetConfig+0x4a>
 8013ed2:	e012      	b.n	8013efa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	3308      	adds	r3, #8
 8013ede:	2201      	movs	r2, #1
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f000 f948 	bl	8014178 <USBD_CtlSendData>
        break;
 8013ee8:	e00c      	b.n	8013f04 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	3304      	adds	r3, #4
 8013eee:	2201      	movs	r2, #1
 8013ef0:	4619      	mov	r1, r3
 8013ef2:	6878      	ldr	r0, [r7, #4]
 8013ef4:	f000 f940 	bl	8014178 <USBD_CtlSendData>
        break;
 8013ef8:	e004      	b.n	8013f04 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013efa:	6839      	ldr	r1, [r7, #0]
 8013efc:	6878      	ldr	r0, [r7, #4]
 8013efe:	f000 f8be 	bl	801407e <USBD_CtlError>
        break;
 8013f02:	bf00      	nop
}
 8013f04:	bf00      	nop
 8013f06:	3708      	adds	r7, #8
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}

08013f0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b082      	sub	sp, #8
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f1c:	b2db      	uxtb	r3, r3
 8013f1e:	3b01      	subs	r3, #1
 8013f20:	2b02      	cmp	r3, #2
 8013f22:	d81e      	bhi.n	8013f62 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	88db      	ldrh	r3, [r3, #6]
 8013f28:	2b02      	cmp	r3, #2
 8013f2a:	d004      	beq.n	8013f36 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013f2c:	6839      	ldr	r1, [r7, #0]
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f000 f8a5 	bl	801407e <USBD_CtlError>
        break;
 8013f34:	e01a      	b.n	8013f6c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2201      	movs	r2, #1
 8013f3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d005      	beq.n	8013f52 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	68db      	ldr	r3, [r3, #12]
 8013f4a:	f043 0202 	orr.w	r2, r3, #2
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	330c      	adds	r3, #12
 8013f56:	2202      	movs	r2, #2
 8013f58:	4619      	mov	r1, r3
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f000 f90c 	bl	8014178 <USBD_CtlSendData>
      break;
 8013f60:	e004      	b.n	8013f6c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013f62:	6839      	ldr	r1, [r7, #0]
 8013f64:	6878      	ldr	r0, [r7, #4]
 8013f66:	f000 f88a 	bl	801407e <USBD_CtlError>
      break;
 8013f6a:	bf00      	nop
  }
}
 8013f6c:	bf00      	nop
 8013f6e:	3708      	adds	r7, #8
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}

08013f74 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b082      	sub	sp, #8
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
 8013f7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013f7e:	683b      	ldr	r3, [r7, #0]
 8013f80:	885b      	ldrh	r3, [r3, #2]
 8013f82:	2b01      	cmp	r3, #1
 8013f84:	d107      	bne.n	8013f96 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2201      	movs	r2, #1
 8013f8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013f8e:	6878      	ldr	r0, [r7, #4]
 8013f90:	f000 f94c 	bl	801422c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013f94:	e013      	b.n	8013fbe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	885b      	ldrh	r3, [r3, #2]
 8013f9a:	2b02      	cmp	r3, #2
 8013f9c:	d10b      	bne.n	8013fb6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8013f9e:	683b      	ldr	r3, [r7, #0]
 8013fa0:	889b      	ldrh	r3, [r3, #4]
 8013fa2:	0a1b      	lsrs	r3, r3, #8
 8013fa4:	b29b      	uxth	r3, r3
 8013fa6:	b2da      	uxtb	r2, r3
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8013fae:	6878      	ldr	r0, [r7, #4]
 8013fb0:	f000 f93c 	bl	801422c <USBD_CtlSendStatus>
}
 8013fb4:	e003      	b.n	8013fbe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8013fb6:	6839      	ldr	r1, [r7, #0]
 8013fb8:	6878      	ldr	r0, [r7, #4]
 8013fba:	f000 f860 	bl	801407e <USBD_CtlError>
}
 8013fbe:	bf00      	nop
 8013fc0:	3708      	adds	r7, #8
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}

08013fc6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fc6:	b580      	push	{r7, lr}
 8013fc8:	b082      	sub	sp, #8
 8013fca:	af00      	add	r7, sp, #0
 8013fcc:	6078      	str	r0, [r7, #4]
 8013fce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013fd6:	b2db      	uxtb	r3, r3
 8013fd8:	3b01      	subs	r3, #1
 8013fda:	2b02      	cmp	r3, #2
 8013fdc:	d80b      	bhi.n	8013ff6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	885b      	ldrh	r3, [r3, #2]
 8013fe2:	2b01      	cmp	r3, #1
 8013fe4:	d10c      	bne.n	8014000 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	2200      	movs	r2, #0
 8013fea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	f000 f91c 	bl	801422c <USBD_CtlSendStatus>
      }
      break;
 8013ff4:	e004      	b.n	8014000 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013ff6:	6839      	ldr	r1, [r7, #0]
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f000 f840 	bl	801407e <USBD_CtlError>
      break;
 8013ffe:	e000      	b.n	8014002 <USBD_ClrFeature+0x3c>
      break;
 8014000:	bf00      	nop
  }
}
 8014002:	bf00      	nop
 8014004:	3708      	adds	r7, #8
 8014006:	46bd      	mov	sp, r7
 8014008:	bd80      	pop	{r7, pc}

0801400a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801400a:	b580      	push	{r7, lr}
 801400c:	b084      	sub	sp, #16
 801400e:	af00      	add	r7, sp, #0
 8014010:	6078      	str	r0, [r7, #4]
 8014012:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014014:	683b      	ldr	r3, [r7, #0]
 8014016:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	781a      	ldrb	r2, [r3, #0]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	3301      	adds	r3, #1
 8014024:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	781a      	ldrb	r2, [r3, #0]
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	3301      	adds	r3, #1
 8014032:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014034:	68f8      	ldr	r0, [r7, #12]
 8014036:	f7ff fa16 	bl	8013466 <SWAPBYTE>
 801403a:	4603      	mov	r3, r0
 801403c:	461a      	mov	r2, r3
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	3301      	adds	r3, #1
 8014046:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	3301      	adds	r3, #1
 801404c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801404e:	68f8      	ldr	r0, [r7, #12]
 8014050:	f7ff fa09 	bl	8013466 <SWAPBYTE>
 8014054:	4603      	mov	r3, r0
 8014056:	461a      	mov	r2, r3
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	3301      	adds	r3, #1
 8014060:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	3301      	adds	r3, #1
 8014066:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014068:	68f8      	ldr	r0, [r7, #12]
 801406a:	f7ff f9fc 	bl	8013466 <SWAPBYTE>
 801406e:	4603      	mov	r3, r0
 8014070:	461a      	mov	r2, r3
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	80da      	strh	r2, [r3, #6]
}
 8014076:	bf00      	nop
 8014078:	3710      	adds	r7, #16
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}

0801407e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801407e:	b580      	push	{r7, lr}
 8014080:	b082      	sub	sp, #8
 8014082:	af00      	add	r7, sp, #0
 8014084:	6078      	str	r0, [r7, #4]
 8014086:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014088:	2180      	movs	r1, #128	@ 0x80
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f003 fdcc 	bl	8017c28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014090:	2100      	movs	r1, #0
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	f003 fdc8 	bl	8017c28 <USBD_LL_StallEP>
}
 8014098:	bf00      	nop
 801409a:	3708      	adds	r7, #8
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}

080140a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b086      	sub	sp, #24
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	60f8      	str	r0, [r7, #12]
 80140a8:	60b9      	str	r1, [r7, #8]
 80140aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80140ac:	2300      	movs	r3, #0
 80140ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d042      	beq.n	801413c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80140ba:	6938      	ldr	r0, [r7, #16]
 80140bc:	f000 f842 	bl	8014144 <USBD_GetLen>
 80140c0:	4603      	mov	r3, r0
 80140c2:	3301      	adds	r3, #1
 80140c4:	005b      	lsls	r3, r3, #1
 80140c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80140ca:	d808      	bhi.n	80140de <USBD_GetString+0x3e>
 80140cc:	6938      	ldr	r0, [r7, #16]
 80140ce:	f000 f839 	bl	8014144 <USBD_GetLen>
 80140d2:	4603      	mov	r3, r0
 80140d4:	3301      	adds	r3, #1
 80140d6:	b29b      	uxth	r3, r3
 80140d8:	005b      	lsls	r3, r3, #1
 80140da:	b29a      	uxth	r2, r3
 80140dc:	e001      	b.n	80140e2 <USBD_GetString+0x42>
 80140de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80140e6:	7dfb      	ldrb	r3, [r7, #23]
 80140e8:	68ba      	ldr	r2, [r7, #8]
 80140ea:	4413      	add	r3, r2
 80140ec:	687a      	ldr	r2, [r7, #4]
 80140ee:	7812      	ldrb	r2, [r2, #0]
 80140f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80140f2:	7dfb      	ldrb	r3, [r7, #23]
 80140f4:	3301      	adds	r3, #1
 80140f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80140f8:	7dfb      	ldrb	r3, [r7, #23]
 80140fa:	68ba      	ldr	r2, [r7, #8]
 80140fc:	4413      	add	r3, r2
 80140fe:	2203      	movs	r2, #3
 8014100:	701a      	strb	r2, [r3, #0]
  idx++;
 8014102:	7dfb      	ldrb	r3, [r7, #23]
 8014104:	3301      	adds	r3, #1
 8014106:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014108:	e013      	b.n	8014132 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801410a:	7dfb      	ldrb	r3, [r7, #23]
 801410c:	68ba      	ldr	r2, [r7, #8]
 801410e:	4413      	add	r3, r2
 8014110:	693a      	ldr	r2, [r7, #16]
 8014112:	7812      	ldrb	r2, [r2, #0]
 8014114:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014116:	693b      	ldr	r3, [r7, #16]
 8014118:	3301      	adds	r3, #1
 801411a:	613b      	str	r3, [r7, #16]
    idx++;
 801411c:	7dfb      	ldrb	r3, [r7, #23]
 801411e:	3301      	adds	r3, #1
 8014120:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014122:	7dfb      	ldrb	r3, [r7, #23]
 8014124:	68ba      	ldr	r2, [r7, #8]
 8014126:	4413      	add	r3, r2
 8014128:	2200      	movs	r2, #0
 801412a:	701a      	strb	r2, [r3, #0]
    idx++;
 801412c:	7dfb      	ldrb	r3, [r7, #23]
 801412e:	3301      	adds	r3, #1
 8014130:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014132:	693b      	ldr	r3, [r7, #16]
 8014134:	781b      	ldrb	r3, [r3, #0]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d1e7      	bne.n	801410a <USBD_GetString+0x6a>
 801413a:	e000      	b.n	801413e <USBD_GetString+0x9e>
    return;
 801413c:	bf00      	nop
  }
}
 801413e:	3718      	adds	r7, #24
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}

08014144 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014144:	b480      	push	{r7}
 8014146:	b085      	sub	sp, #20
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801414c:	2300      	movs	r3, #0
 801414e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014154:	e005      	b.n	8014162 <USBD_GetLen+0x1e>
  {
    len++;
 8014156:	7bfb      	ldrb	r3, [r7, #15]
 8014158:	3301      	adds	r3, #1
 801415a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801415c:	68bb      	ldr	r3, [r7, #8]
 801415e:	3301      	adds	r3, #1
 8014160:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014162:	68bb      	ldr	r3, [r7, #8]
 8014164:	781b      	ldrb	r3, [r3, #0]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d1f5      	bne.n	8014156 <USBD_GetLen+0x12>
  }

  return len;
 801416a:	7bfb      	ldrb	r3, [r7, #15]
}
 801416c:	4618      	mov	r0, r3
 801416e:	3714      	adds	r7, #20
 8014170:	46bd      	mov	sp, r7
 8014172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014176:	4770      	bx	lr

08014178 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b084      	sub	sp, #16
 801417c:	af00      	add	r7, sp, #0
 801417e:	60f8      	str	r0, [r7, #12]
 8014180:	60b9      	str	r1, [r7, #8]
 8014182:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	2202      	movs	r2, #2
 8014188:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	687a      	ldr	r2, [r7, #4]
 8014190:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	687a      	ldr	r2, [r7, #4]
 8014196:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	68ba      	ldr	r2, [r7, #8]
 801419c:	2100      	movs	r1, #0
 801419e:	68f8      	ldr	r0, [r7, #12]
 80141a0:	f003 fdcb 	bl	8017d3a <USBD_LL_Transmit>

  return USBD_OK;
 80141a4:	2300      	movs	r3, #0
}
 80141a6:	4618      	mov	r0, r3
 80141a8:	3710      	adds	r7, #16
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}

080141ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80141ae:	b580      	push	{r7, lr}
 80141b0:	b084      	sub	sp, #16
 80141b2:	af00      	add	r7, sp, #0
 80141b4:	60f8      	str	r0, [r7, #12]
 80141b6:	60b9      	str	r1, [r7, #8]
 80141b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	68ba      	ldr	r2, [r7, #8]
 80141be:	2100      	movs	r1, #0
 80141c0:	68f8      	ldr	r0, [r7, #12]
 80141c2:	f003 fdba 	bl	8017d3a <USBD_LL_Transmit>

  return USBD_OK;
 80141c6:	2300      	movs	r3, #0
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3710      	adds	r7, #16
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}

080141d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b084      	sub	sp, #16
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	60f8      	str	r0, [r7, #12]
 80141d8:	60b9      	str	r1, [r7, #8]
 80141da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	2203      	movs	r2, #3
 80141e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	687a      	ldr	r2, [r7, #4]
 80141e8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	687a      	ldr	r2, [r7, #4]
 80141f0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	68ba      	ldr	r2, [r7, #8]
 80141f8:	2100      	movs	r1, #0
 80141fa:	68f8      	ldr	r0, [r7, #12]
 80141fc:	f003 fdbe 	bl	8017d7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014200:	2300      	movs	r3, #0
}
 8014202:	4618      	mov	r0, r3
 8014204:	3710      	adds	r7, #16
 8014206:	46bd      	mov	sp, r7
 8014208:	bd80      	pop	{r7, pc}

0801420a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801420a:	b580      	push	{r7, lr}
 801420c:	b084      	sub	sp, #16
 801420e:	af00      	add	r7, sp, #0
 8014210:	60f8      	str	r0, [r7, #12]
 8014212:	60b9      	str	r1, [r7, #8]
 8014214:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	68ba      	ldr	r2, [r7, #8]
 801421a:	2100      	movs	r1, #0
 801421c:	68f8      	ldr	r0, [r7, #12]
 801421e:	f003 fdad 	bl	8017d7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014222:	2300      	movs	r3, #0
}
 8014224:	4618      	mov	r0, r3
 8014226:	3710      	adds	r7, #16
 8014228:	46bd      	mov	sp, r7
 801422a:	bd80      	pop	{r7, pc}

0801422c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b082      	sub	sp, #8
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2204      	movs	r2, #4
 8014238:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801423c:	2300      	movs	r3, #0
 801423e:	2200      	movs	r2, #0
 8014240:	2100      	movs	r1, #0
 8014242:	6878      	ldr	r0, [r7, #4]
 8014244:	f003 fd79 	bl	8017d3a <USBD_LL_Transmit>

  return USBD_OK;
 8014248:	2300      	movs	r3, #0
}
 801424a:	4618      	mov	r0, r3
 801424c:	3708      	adds	r7, #8
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}

08014252 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014252:	b580      	push	{r7, lr}
 8014254:	b082      	sub	sp, #8
 8014256:	af00      	add	r7, sp, #0
 8014258:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	2205      	movs	r2, #5
 801425e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014262:	2300      	movs	r3, #0
 8014264:	2200      	movs	r2, #0
 8014266:	2100      	movs	r1, #0
 8014268:	6878      	ldr	r0, [r7, #4]
 801426a:	f003 fd87 	bl	8017d7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801426e:	2300      	movs	r3, #0
}
 8014270:	4618      	mov	r0, r3
 8014272:	3708      	adds	r7, #8
 8014274:	46bd      	mov	sp, r7
 8014276:	bd80      	pop	{r7, pc}

08014278 <__NVIC_SetPriority>:
{
 8014278:	b480      	push	{r7}
 801427a:	b083      	sub	sp, #12
 801427c:	af00      	add	r7, sp, #0
 801427e:	4603      	mov	r3, r0
 8014280:	6039      	str	r1, [r7, #0]
 8014282:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8014284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014288:	2b00      	cmp	r3, #0
 801428a:	db0a      	blt.n	80142a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801428c:	683b      	ldr	r3, [r7, #0]
 801428e:	b2da      	uxtb	r2, r3
 8014290:	490c      	ldr	r1, [pc, #48]	@ (80142c4 <__NVIC_SetPriority+0x4c>)
 8014292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014296:	0112      	lsls	r2, r2, #4
 8014298:	b2d2      	uxtb	r2, r2
 801429a:	440b      	add	r3, r1
 801429c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80142a0:	e00a      	b.n	80142b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	b2da      	uxtb	r2, r3
 80142a6:	4908      	ldr	r1, [pc, #32]	@ (80142c8 <__NVIC_SetPriority+0x50>)
 80142a8:	88fb      	ldrh	r3, [r7, #6]
 80142aa:	f003 030f 	and.w	r3, r3, #15
 80142ae:	3b04      	subs	r3, #4
 80142b0:	0112      	lsls	r2, r2, #4
 80142b2:	b2d2      	uxtb	r2, r2
 80142b4:	440b      	add	r3, r1
 80142b6:	761a      	strb	r2, [r3, #24]
}
 80142b8:	bf00      	nop
 80142ba:	370c      	adds	r7, #12
 80142bc:	46bd      	mov	sp, r7
 80142be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c2:	4770      	bx	lr
 80142c4:	e000e100 	.word	0xe000e100
 80142c8:	e000ed00 	.word	0xe000ed00

080142cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80142cc:	b580      	push	{r7, lr}
 80142ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80142d0:	4b05      	ldr	r3, [pc, #20]	@ (80142e8 <SysTick_Handler+0x1c>)
 80142d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80142d4:	f001 ff52 	bl	801617c <xTaskGetSchedulerState>
 80142d8:	4603      	mov	r3, r0
 80142da:	2b01      	cmp	r3, #1
 80142dc:	d001      	beq.n	80142e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80142de:	f002 fd4b 	bl	8016d78 <xPortSysTickHandler>
  }
}
 80142e2:	bf00      	nop
 80142e4:	bd80      	pop	{r7, pc}
 80142e6:	bf00      	nop
 80142e8:	e000e010 	.word	0xe000e010

080142ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80142ec:	b580      	push	{r7, lr}
 80142ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80142f0:	2100      	movs	r1, #0
 80142f2:	f06f 0004 	mvn.w	r0, #4
 80142f6:	f7ff ffbf 	bl	8014278 <__NVIC_SetPriority>
#endif
}
 80142fa:	bf00      	nop
 80142fc:	bd80      	pop	{r7, pc}
	...

08014300 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014300:	b480      	push	{r7}
 8014302:	b083      	sub	sp, #12
 8014304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014306:	f3ef 8305 	mrs	r3, IPSR
 801430a:	603b      	str	r3, [r7, #0]
  return(result);
 801430c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801430e:	2b00      	cmp	r3, #0
 8014310:	d003      	beq.n	801431a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014312:	f06f 0305 	mvn.w	r3, #5
 8014316:	607b      	str	r3, [r7, #4]
 8014318:	e00c      	b.n	8014334 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801431a:	4b0a      	ldr	r3, [pc, #40]	@ (8014344 <osKernelInitialize+0x44>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d105      	bne.n	801432e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014322:	4b08      	ldr	r3, [pc, #32]	@ (8014344 <osKernelInitialize+0x44>)
 8014324:	2201      	movs	r2, #1
 8014326:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014328:	2300      	movs	r3, #0
 801432a:	607b      	str	r3, [r7, #4]
 801432c:	e002      	b.n	8014334 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801432e:	f04f 33ff 	mov.w	r3, #4294967295
 8014332:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014334:	687b      	ldr	r3, [r7, #4]
}
 8014336:	4618      	mov	r0, r3
 8014338:	370c      	adds	r7, #12
 801433a:	46bd      	mov	sp, r7
 801433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014340:	4770      	bx	lr
 8014342:	bf00      	nop
 8014344:	240018ac 	.word	0x240018ac

08014348 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014348:	b580      	push	{r7, lr}
 801434a:	b082      	sub	sp, #8
 801434c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801434e:	f3ef 8305 	mrs	r3, IPSR
 8014352:	603b      	str	r3, [r7, #0]
  return(result);
 8014354:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014356:	2b00      	cmp	r3, #0
 8014358:	d003      	beq.n	8014362 <osKernelStart+0x1a>
    stat = osErrorISR;
 801435a:	f06f 0305 	mvn.w	r3, #5
 801435e:	607b      	str	r3, [r7, #4]
 8014360:	e010      	b.n	8014384 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014362:	4b0b      	ldr	r3, [pc, #44]	@ (8014390 <osKernelStart+0x48>)
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	2b01      	cmp	r3, #1
 8014368:	d109      	bne.n	801437e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801436a:	f7ff ffbf 	bl	80142ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801436e:	4b08      	ldr	r3, [pc, #32]	@ (8014390 <osKernelStart+0x48>)
 8014370:	2202      	movs	r2, #2
 8014372:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014374:	f001 fa82 	bl	801587c <vTaskStartScheduler>
      stat = osOK;
 8014378:	2300      	movs	r3, #0
 801437a:	607b      	str	r3, [r7, #4]
 801437c:	e002      	b.n	8014384 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801437e:	f04f 33ff 	mov.w	r3, #4294967295
 8014382:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014384:	687b      	ldr	r3, [r7, #4]
}
 8014386:	4618      	mov	r0, r3
 8014388:	3708      	adds	r7, #8
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}
 801438e:	bf00      	nop
 8014390:	240018ac 	.word	0x240018ac

08014394 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014394:	b580      	push	{r7, lr}
 8014396:	b08e      	sub	sp, #56	@ 0x38
 8014398:	af04      	add	r7, sp, #16
 801439a:	60f8      	str	r0, [r7, #12]
 801439c:	60b9      	str	r1, [r7, #8]
 801439e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80143a0:	2300      	movs	r3, #0
 80143a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80143a4:	f3ef 8305 	mrs	r3, IPSR
 80143a8:	617b      	str	r3, [r7, #20]
  return(result);
 80143aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d17e      	bne.n	80144ae <osThreadNew+0x11a>
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d07b      	beq.n	80144ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80143b6:	2380      	movs	r3, #128	@ 0x80
 80143b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80143ba:	2318      	movs	r3, #24
 80143bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80143be:	2300      	movs	r3, #0
 80143c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80143c2:	f04f 33ff 	mov.w	r3, #4294967295
 80143c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d045      	beq.n	801445a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d002      	beq.n	80143dc <osThreadNew+0x48>
        name = attr->name;
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	699b      	ldr	r3, [r3, #24]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d002      	beq.n	80143ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	699b      	ldr	r3, [r3, #24]
 80143e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80143ea:	69fb      	ldr	r3, [r7, #28]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d008      	beq.n	8014402 <osThreadNew+0x6e>
 80143f0:	69fb      	ldr	r3, [r7, #28]
 80143f2:	2b38      	cmp	r3, #56	@ 0x38
 80143f4:	d805      	bhi.n	8014402 <osThreadNew+0x6e>
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	685b      	ldr	r3, [r3, #4]
 80143fa:	f003 0301 	and.w	r3, r3, #1
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d001      	beq.n	8014406 <osThreadNew+0x72>
        return (NULL);
 8014402:	2300      	movs	r3, #0
 8014404:	e054      	b.n	80144b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	695b      	ldr	r3, [r3, #20]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d003      	beq.n	8014416 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	695b      	ldr	r3, [r3, #20]
 8014412:	089b      	lsrs	r3, r3, #2
 8014414:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	689b      	ldr	r3, [r3, #8]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d00e      	beq.n	801443c <osThreadNew+0xa8>
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	68db      	ldr	r3, [r3, #12]
 8014422:	2bab      	cmp	r3, #171	@ 0xab
 8014424:	d90a      	bls.n	801443c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801442a:	2b00      	cmp	r3, #0
 801442c:	d006      	beq.n	801443c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	695b      	ldr	r3, [r3, #20]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d002      	beq.n	801443c <osThreadNew+0xa8>
        mem = 1;
 8014436:	2301      	movs	r3, #1
 8014438:	61bb      	str	r3, [r7, #24]
 801443a:	e010      	b.n	801445e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	689b      	ldr	r3, [r3, #8]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d10c      	bne.n	801445e <osThreadNew+0xca>
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	68db      	ldr	r3, [r3, #12]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d108      	bne.n	801445e <osThreadNew+0xca>
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	691b      	ldr	r3, [r3, #16]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d104      	bne.n	801445e <osThreadNew+0xca>
          mem = 0;
 8014454:	2300      	movs	r3, #0
 8014456:	61bb      	str	r3, [r7, #24]
 8014458:	e001      	b.n	801445e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801445a:	2300      	movs	r3, #0
 801445c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801445e:	69bb      	ldr	r3, [r7, #24]
 8014460:	2b01      	cmp	r3, #1
 8014462:	d110      	bne.n	8014486 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8014468:	687a      	ldr	r2, [r7, #4]
 801446a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801446c:	9202      	str	r2, [sp, #8]
 801446e:	9301      	str	r3, [sp, #4]
 8014470:	69fb      	ldr	r3, [r7, #28]
 8014472:	9300      	str	r3, [sp, #0]
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	6a3a      	ldr	r2, [r7, #32]
 8014478:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801447a:	68f8      	ldr	r0, [r7, #12]
 801447c:	f001 f808 	bl	8015490 <xTaskCreateStatic>
 8014480:	4603      	mov	r3, r0
 8014482:	613b      	str	r3, [r7, #16]
 8014484:	e013      	b.n	80144ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8014486:	69bb      	ldr	r3, [r7, #24]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d110      	bne.n	80144ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801448c:	6a3b      	ldr	r3, [r7, #32]
 801448e:	b29a      	uxth	r2, r3
 8014490:	f107 0310 	add.w	r3, r7, #16
 8014494:	9301      	str	r3, [sp, #4]
 8014496:	69fb      	ldr	r3, [r7, #28]
 8014498:	9300      	str	r3, [sp, #0]
 801449a:	68bb      	ldr	r3, [r7, #8]
 801449c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801449e:	68f8      	ldr	r0, [r7, #12]
 80144a0:	f001 f856 	bl	8015550 <xTaskCreate>
 80144a4:	4603      	mov	r3, r0
 80144a6:	2b01      	cmp	r3, #1
 80144a8:	d001      	beq.n	80144ae <osThreadNew+0x11a>
            hTask = NULL;
 80144aa:	2300      	movs	r3, #0
 80144ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80144ae:	693b      	ldr	r3, [r7, #16]
}
 80144b0:	4618      	mov	r0, r3
 80144b2:	3728      	adds	r7, #40	@ 0x28
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}

080144b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b084      	sub	sp, #16
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80144c0:	f3ef 8305 	mrs	r3, IPSR
 80144c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80144c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d003      	beq.n	80144d4 <osDelay+0x1c>
    stat = osErrorISR;
 80144cc:	f06f 0305 	mvn.w	r3, #5
 80144d0:	60fb      	str	r3, [r7, #12]
 80144d2:	e007      	b.n	80144e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80144d4:	2300      	movs	r3, #0
 80144d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d002      	beq.n	80144e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80144de:	6878      	ldr	r0, [r7, #4]
 80144e0:	f001 f996 	bl	8015810 <vTaskDelay>
    }
  }

  return (stat);
 80144e4:	68fb      	ldr	r3, [r7, #12]
}
 80144e6:	4618      	mov	r0, r3
 80144e8:	3710      	adds	r7, #16
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bd80      	pop	{r7, pc}

080144ee <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80144ee:	b580      	push	{r7, lr}
 80144f0:	b08a      	sub	sp, #40	@ 0x28
 80144f2:	af02      	add	r7, sp, #8
 80144f4:	60f8      	str	r0, [r7, #12]
 80144f6:	60b9      	str	r1, [r7, #8]
 80144f8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80144fa:	2300      	movs	r3, #0
 80144fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80144fe:	f3ef 8305 	mrs	r3, IPSR
 8014502:	613b      	str	r3, [r7, #16]
  return(result);
 8014504:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8014506:	2b00      	cmp	r3, #0
 8014508:	d15f      	bne.n	80145ca <osMessageQueueNew+0xdc>
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d05c      	beq.n	80145ca <osMessageQueueNew+0xdc>
 8014510:	68bb      	ldr	r3, [r7, #8]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d059      	beq.n	80145ca <osMessageQueueNew+0xdc>
    mem = -1;
 8014516:	f04f 33ff 	mov.w	r3, #4294967295
 801451a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d029      	beq.n	8014576 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	689b      	ldr	r3, [r3, #8]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d012      	beq.n	8014550 <osMessageQueueNew+0x62>
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	68db      	ldr	r3, [r3, #12]
 801452e:	2b4f      	cmp	r3, #79	@ 0x4f
 8014530:	d90e      	bls.n	8014550 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8014536:	2b00      	cmp	r3, #0
 8014538:	d00a      	beq.n	8014550 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	695a      	ldr	r2, [r3, #20]
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	68b9      	ldr	r1, [r7, #8]
 8014542:	fb01 f303 	mul.w	r3, r1, r3
 8014546:	429a      	cmp	r2, r3
 8014548:	d302      	bcc.n	8014550 <osMessageQueueNew+0x62>
        mem = 1;
 801454a:	2301      	movs	r3, #1
 801454c:	61bb      	str	r3, [r7, #24]
 801454e:	e014      	b.n	801457a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	689b      	ldr	r3, [r3, #8]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d110      	bne.n	801457a <osMessageQueueNew+0x8c>
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	68db      	ldr	r3, [r3, #12]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d10c      	bne.n	801457a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014564:	2b00      	cmp	r3, #0
 8014566:	d108      	bne.n	801457a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	695b      	ldr	r3, [r3, #20]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d104      	bne.n	801457a <osMessageQueueNew+0x8c>
          mem = 0;
 8014570:	2300      	movs	r3, #0
 8014572:	61bb      	str	r3, [r7, #24]
 8014574:	e001      	b.n	801457a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8014576:	2300      	movs	r3, #0
 8014578:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801457a:	69bb      	ldr	r3, [r7, #24]
 801457c:	2b01      	cmp	r3, #1
 801457e:	d10b      	bne.n	8014598 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	691a      	ldr	r2, [r3, #16]
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	689b      	ldr	r3, [r3, #8]
 8014588:	2100      	movs	r1, #0
 801458a:	9100      	str	r1, [sp, #0]
 801458c:	68b9      	ldr	r1, [r7, #8]
 801458e:	68f8      	ldr	r0, [r7, #12]
 8014590:	f000 fa30 	bl	80149f4 <xQueueGenericCreateStatic>
 8014594:	61f8      	str	r0, [r7, #28]
 8014596:	e008      	b.n	80145aa <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8014598:	69bb      	ldr	r3, [r7, #24]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d105      	bne.n	80145aa <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801459e:	2200      	movs	r2, #0
 80145a0:	68b9      	ldr	r1, [r7, #8]
 80145a2:	68f8      	ldr	r0, [r7, #12]
 80145a4:	f000 faa3 	bl	8014aee <xQueueGenericCreate>
 80145a8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80145aa:	69fb      	ldr	r3, [r7, #28]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d00c      	beq.n	80145ca <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d003      	beq.n	80145be <osMessageQueueNew+0xd0>
        name = attr->name;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	617b      	str	r3, [r7, #20]
 80145bc:	e001      	b.n	80145c2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80145be:	2300      	movs	r3, #0
 80145c0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80145c2:	6979      	ldr	r1, [r7, #20]
 80145c4:	69f8      	ldr	r0, [r7, #28]
 80145c6:	f000 ff05 	bl	80153d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80145ca:	69fb      	ldr	r3, [r7, #28]
}
 80145cc:	4618      	mov	r0, r3
 80145ce:	3720      	adds	r7, #32
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bd80      	pop	{r7, pc}

080145d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b088      	sub	sp, #32
 80145d8:	af00      	add	r7, sp, #0
 80145da:	60f8      	str	r0, [r7, #12]
 80145dc:	60b9      	str	r1, [r7, #8]
 80145de:	603b      	str	r3, [r7, #0]
 80145e0:	4613      	mov	r3, r2
 80145e2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80145e8:	2300      	movs	r3, #0
 80145ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80145ec:	f3ef 8305 	mrs	r3, IPSR
 80145f0:	617b      	str	r3, [r7, #20]
  return(result);
 80145f2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d028      	beq.n	801464a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80145f8:	69bb      	ldr	r3, [r7, #24]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d005      	beq.n	801460a <osMessageQueuePut+0x36>
 80145fe:	68bb      	ldr	r3, [r7, #8]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d002      	beq.n	801460a <osMessageQueuePut+0x36>
 8014604:	683b      	ldr	r3, [r7, #0]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d003      	beq.n	8014612 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801460a:	f06f 0303 	mvn.w	r3, #3
 801460e:	61fb      	str	r3, [r7, #28]
 8014610:	e038      	b.n	8014684 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8014612:	2300      	movs	r3, #0
 8014614:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8014616:	f107 0210 	add.w	r2, r7, #16
 801461a:	2300      	movs	r3, #0
 801461c:	68b9      	ldr	r1, [r7, #8]
 801461e:	69b8      	ldr	r0, [r7, #24]
 8014620:	f000 fbc6 	bl	8014db0 <xQueueGenericSendFromISR>
 8014624:	4603      	mov	r3, r0
 8014626:	2b01      	cmp	r3, #1
 8014628:	d003      	beq.n	8014632 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801462a:	f06f 0302 	mvn.w	r3, #2
 801462e:	61fb      	str	r3, [r7, #28]
 8014630:	e028      	b.n	8014684 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8014632:	693b      	ldr	r3, [r7, #16]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d025      	beq.n	8014684 <osMessageQueuePut+0xb0>
 8014638:	4b15      	ldr	r3, [pc, #84]	@ (8014690 <osMessageQueuePut+0xbc>)
 801463a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801463e:	601a      	str	r2, [r3, #0]
 8014640:	f3bf 8f4f 	dsb	sy
 8014644:	f3bf 8f6f 	isb	sy
 8014648:	e01c      	b.n	8014684 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801464a:	69bb      	ldr	r3, [r7, #24]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d002      	beq.n	8014656 <osMessageQueuePut+0x82>
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d103      	bne.n	801465e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8014656:	f06f 0303 	mvn.w	r3, #3
 801465a:	61fb      	str	r3, [r7, #28]
 801465c:	e012      	b.n	8014684 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801465e:	2300      	movs	r3, #0
 8014660:	683a      	ldr	r2, [r7, #0]
 8014662:	68b9      	ldr	r1, [r7, #8]
 8014664:	69b8      	ldr	r0, [r7, #24]
 8014666:	f000 faa1 	bl	8014bac <xQueueGenericSend>
 801466a:	4603      	mov	r3, r0
 801466c:	2b01      	cmp	r3, #1
 801466e:	d009      	beq.n	8014684 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d003      	beq.n	801467e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8014676:	f06f 0301 	mvn.w	r3, #1
 801467a:	61fb      	str	r3, [r7, #28]
 801467c:	e002      	b.n	8014684 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801467e:	f06f 0302 	mvn.w	r3, #2
 8014682:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014684:	69fb      	ldr	r3, [r7, #28]
}
 8014686:	4618      	mov	r0, r3
 8014688:	3720      	adds	r7, #32
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}
 801468e:	bf00      	nop
 8014690:	e000ed04 	.word	0xe000ed04

08014694 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8014694:	b580      	push	{r7, lr}
 8014696:	b088      	sub	sp, #32
 8014698:	af00      	add	r7, sp, #0
 801469a:	60f8      	str	r0, [r7, #12]
 801469c:	60b9      	str	r1, [r7, #8]
 801469e:	607a      	str	r2, [r7, #4]
 80146a0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80146a6:	2300      	movs	r3, #0
 80146a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80146aa:	f3ef 8305 	mrs	r3, IPSR
 80146ae:	617b      	str	r3, [r7, #20]
  return(result);
 80146b0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d028      	beq.n	8014708 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80146b6:	69bb      	ldr	r3, [r7, #24]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d005      	beq.n	80146c8 <osMessageQueueGet+0x34>
 80146bc:	68bb      	ldr	r3, [r7, #8]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d002      	beq.n	80146c8 <osMessageQueueGet+0x34>
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d003      	beq.n	80146d0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80146c8:	f06f 0303 	mvn.w	r3, #3
 80146cc:	61fb      	str	r3, [r7, #28]
 80146ce:	e037      	b.n	8014740 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80146d0:	2300      	movs	r3, #0
 80146d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80146d4:	f107 0310 	add.w	r3, r7, #16
 80146d8:	461a      	mov	r2, r3
 80146da:	68b9      	ldr	r1, [r7, #8]
 80146dc:	69b8      	ldr	r0, [r7, #24]
 80146de:	f000 fce7 	bl	80150b0 <xQueueReceiveFromISR>
 80146e2:	4603      	mov	r3, r0
 80146e4:	2b01      	cmp	r3, #1
 80146e6:	d003      	beq.n	80146f0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80146e8:	f06f 0302 	mvn.w	r3, #2
 80146ec:	61fb      	str	r3, [r7, #28]
 80146ee:	e027      	b.n	8014740 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80146f0:	693b      	ldr	r3, [r7, #16]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d024      	beq.n	8014740 <osMessageQueueGet+0xac>
 80146f6:	4b15      	ldr	r3, [pc, #84]	@ (801474c <osMessageQueueGet+0xb8>)
 80146f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80146fc:	601a      	str	r2, [r3, #0]
 80146fe:	f3bf 8f4f 	dsb	sy
 8014702:	f3bf 8f6f 	isb	sy
 8014706:	e01b      	b.n	8014740 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8014708:	69bb      	ldr	r3, [r7, #24]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d002      	beq.n	8014714 <osMessageQueueGet+0x80>
 801470e:	68bb      	ldr	r3, [r7, #8]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d103      	bne.n	801471c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8014714:	f06f 0303 	mvn.w	r3, #3
 8014718:	61fb      	str	r3, [r7, #28]
 801471a:	e011      	b.n	8014740 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801471c:	683a      	ldr	r2, [r7, #0]
 801471e:	68b9      	ldr	r1, [r7, #8]
 8014720:	69b8      	ldr	r0, [r7, #24]
 8014722:	f000 fbe3 	bl	8014eec <xQueueReceive>
 8014726:	4603      	mov	r3, r0
 8014728:	2b01      	cmp	r3, #1
 801472a:	d009      	beq.n	8014740 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d003      	beq.n	801473a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8014732:	f06f 0301 	mvn.w	r3, #1
 8014736:	61fb      	str	r3, [r7, #28]
 8014738:	e002      	b.n	8014740 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801473a:	f06f 0302 	mvn.w	r3, #2
 801473e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014740:	69fb      	ldr	r3, [r7, #28]
}
 8014742:	4618      	mov	r0, r3
 8014744:	3720      	adds	r7, #32
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}
 801474a:	bf00      	nop
 801474c:	e000ed04 	.word	0xe000ed04

08014750 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8014750:	b480      	push	{r7}
 8014752:	b085      	sub	sp, #20
 8014754:	af00      	add	r7, sp, #0
 8014756:	60f8      	str	r0, [r7, #12]
 8014758:	60b9      	str	r1, [r7, #8]
 801475a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	4a07      	ldr	r2, [pc, #28]	@ (801477c <vApplicationGetIdleTaskMemory+0x2c>)
 8014760:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8014762:	68bb      	ldr	r3, [r7, #8]
 8014764:	4a06      	ldr	r2, [pc, #24]	@ (8014780 <vApplicationGetIdleTaskMemory+0x30>)
 8014766:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2280      	movs	r2, #128	@ 0x80
 801476c:	601a      	str	r2, [r3, #0]
}
 801476e:	bf00      	nop
 8014770:	3714      	adds	r7, #20
 8014772:	46bd      	mov	sp, r7
 8014774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014778:	4770      	bx	lr
 801477a:	bf00      	nop
 801477c:	240018b0 	.word	0x240018b0
 8014780:	2400195c 	.word	0x2400195c

08014784 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8014784:	b480      	push	{r7}
 8014786:	b085      	sub	sp, #20
 8014788:	af00      	add	r7, sp, #0
 801478a:	60f8      	str	r0, [r7, #12]
 801478c:	60b9      	str	r1, [r7, #8]
 801478e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	4a07      	ldr	r2, [pc, #28]	@ (80147b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8014794:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8014796:	68bb      	ldr	r3, [r7, #8]
 8014798:	4a06      	ldr	r2, [pc, #24]	@ (80147b4 <vApplicationGetTimerTaskMemory+0x30>)
 801479a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80147a2:	601a      	str	r2, [r3, #0]
}
 80147a4:	bf00      	nop
 80147a6:	3714      	adds	r7, #20
 80147a8:	46bd      	mov	sp, r7
 80147aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ae:	4770      	bx	lr
 80147b0:	24001b5c 	.word	0x24001b5c
 80147b4:	24001c08 	.word	0x24001c08

080147b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80147b8:	b480      	push	{r7}
 80147ba:	b083      	sub	sp, #12
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	f103 0208 	add.w	r2, r3, #8
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	f04f 32ff 	mov.w	r2, #4294967295
 80147d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	f103 0208 	add.w	r2, r3, #8
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f103 0208 	add.w	r2, r3, #8
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	2200      	movs	r2, #0
 80147ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80147ec:	bf00      	nop
 80147ee:	370c      	adds	r7, #12
 80147f0:	46bd      	mov	sp, r7
 80147f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f6:	4770      	bx	lr

080147f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80147f8:	b480      	push	{r7}
 80147fa:	b083      	sub	sp, #12
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2200      	movs	r2, #0
 8014804:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014806:	bf00      	nop
 8014808:	370c      	adds	r7, #12
 801480a:	46bd      	mov	sp, r7
 801480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014810:	4770      	bx	lr

08014812 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014812:	b480      	push	{r7}
 8014814:	b085      	sub	sp, #20
 8014816:	af00      	add	r7, sp, #0
 8014818:	6078      	str	r0, [r7, #4]
 801481a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	685b      	ldr	r3, [r3, #4]
 8014820:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014822:	683b      	ldr	r3, [r7, #0]
 8014824:	68fa      	ldr	r2, [r7, #12]
 8014826:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	689a      	ldr	r2, [r3, #8]
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	689b      	ldr	r3, [r3, #8]
 8014834:	683a      	ldr	r2, [r7, #0]
 8014836:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	683a      	ldr	r2, [r7, #0]
 801483c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	687a      	ldr	r2, [r7, #4]
 8014842:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	1c5a      	adds	r2, r3, #1
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	601a      	str	r2, [r3, #0]
}
 801484e:	bf00      	nop
 8014850:	3714      	adds	r7, #20
 8014852:	46bd      	mov	sp, r7
 8014854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014858:	4770      	bx	lr

0801485a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801485a:	b480      	push	{r7}
 801485c:	b085      	sub	sp, #20
 801485e:	af00      	add	r7, sp, #0
 8014860:	6078      	str	r0, [r7, #4]
 8014862:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801486a:	68bb      	ldr	r3, [r7, #8]
 801486c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014870:	d103      	bne.n	801487a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	691b      	ldr	r3, [r3, #16]
 8014876:	60fb      	str	r3, [r7, #12]
 8014878:	e00c      	b.n	8014894 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	3308      	adds	r3, #8
 801487e:	60fb      	str	r3, [r7, #12]
 8014880:	e002      	b.n	8014888 <vListInsert+0x2e>
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	685b      	ldr	r3, [r3, #4]
 8014886:	60fb      	str	r3, [r7, #12]
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	685b      	ldr	r3, [r3, #4]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	68ba      	ldr	r2, [r7, #8]
 8014890:	429a      	cmp	r2, r3
 8014892:	d2f6      	bcs.n	8014882 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	685a      	ldr	r2, [r3, #4]
 8014898:	683b      	ldr	r3, [r7, #0]
 801489a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	685b      	ldr	r3, [r3, #4]
 80148a0:	683a      	ldr	r2, [r7, #0]
 80148a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80148a4:	683b      	ldr	r3, [r7, #0]
 80148a6:	68fa      	ldr	r2, [r7, #12]
 80148a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	683a      	ldr	r2, [r7, #0]
 80148ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80148b0:	683b      	ldr	r3, [r7, #0]
 80148b2:	687a      	ldr	r2, [r7, #4]
 80148b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	1c5a      	adds	r2, r3, #1
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	601a      	str	r2, [r3, #0]
}
 80148c0:	bf00      	nop
 80148c2:	3714      	adds	r7, #20
 80148c4:	46bd      	mov	sp, r7
 80148c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ca:	4770      	bx	lr

080148cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80148cc:	b480      	push	{r7}
 80148ce:	b085      	sub	sp, #20
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	691b      	ldr	r3, [r3, #16]
 80148d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	685b      	ldr	r3, [r3, #4]
 80148de:	687a      	ldr	r2, [r7, #4]
 80148e0:	6892      	ldr	r2, [r2, #8]
 80148e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	689b      	ldr	r3, [r3, #8]
 80148e8:	687a      	ldr	r2, [r7, #4]
 80148ea:	6852      	ldr	r2, [r2, #4]
 80148ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	685b      	ldr	r3, [r3, #4]
 80148f2:	687a      	ldr	r2, [r7, #4]
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d103      	bne.n	8014900 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	689a      	ldr	r2, [r3, #8]
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2200      	movs	r2, #0
 8014904:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	1e5a      	subs	r2, r3, #1
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	681b      	ldr	r3, [r3, #0]
}
 8014914:	4618      	mov	r0, r3
 8014916:	3714      	adds	r7, #20
 8014918:	46bd      	mov	sp, r7
 801491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491e:	4770      	bx	lr

08014920 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b084      	sub	sp, #16
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
 8014928:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d10b      	bne.n	801494c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014938:	f383 8811 	msr	BASEPRI, r3
 801493c:	f3bf 8f6f 	isb	sy
 8014940:	f3bf 8f4f 	dsb	sy
 8014944:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014946:	bf00      	nop
 8014948:	bf00      	nop
 801494a:	e7fd      	b.n	8014948 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801494c:	f002 f984 	bl	8016c58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	681a      	ldr	r2, [r3, #0]
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014958:	68f9      	ldr	r1, [r7, #12]
 801495a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801495c:	fb01 f303 	mul.w	r3, r1, r3
 8014960:	441a      	add	r2, r3
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	2200      	movs	r2, #0
 801496a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	681a      	ldr	r2, [r3, #0]
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	681a      	ldr	r2, [r3, #0]
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801497c:	3b01      	subs	r3, #1
 801497e:	68f9      	ldr	r1, [r7, #12]
 8014980:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014982:	fb01 f303 	mul.w	r3, r1, r3
 8014986:	441a      	add	r2, r3
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	22ff      	movs	r2, #255	@ 0xff
 8014990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	22ff      	movs	r2, #255	@ 0xff
 8014998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801499c:	683b      	ldr	r3, [r7, #0]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d114      	bne.n	80149cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	691b      	ldr	r3, [r3, #16]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d01a      	beq.n	80149e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	3310      	adds	r3, #16
 80149ae:	4618      	mov	r0, r3
 80149b0:	f001 fa1e 	bl	8015df0 <xTaskRemoveFromEventList>
 80149b4:	4603      	mov	r3, r0
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d012      	beq.n	80149e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80149ba:	4b0d      	ldr	r3, [pc, #52]	@ (80149f0 <xQueueGenericReset+0xd0>)
 80149bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80149c0:	601a      	str	r2, [r3, #0]
 80149c2:	f3bf 8f4f 	dsb	sy
 80149c6:	f3bf 8f6f 	isb	sy
 80149ca:	e009      	b.n	80149e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	3310      	adds	r3, #16
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7ff fef1 	bl	80147b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	3324      	adds	r3, #36	@ 0x24
 80149da:	4618      	mov	r0, r3
 80149dc:	f7ff feec 	bl	80147b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80149e0:	f002 f96c 	bl	8016cbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80149e4:	2301      	movs	r3, #1
}
 80149e6:	4618      	mov	r0, r3
 80149e8:	3710      	adds	r7, #16
 80149ea:	46bd      	mov	sp, r7
 80149ec:	bd80      	pop	{r7, pc}
 80149ee:	bf00      	nop
 80149f0:	e000ed04 	.word	0xe000ed04

080149f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b08e      	sub	sp, #56	@ 0x38
 80149f8:	af02      	add	r7, sp, #8
 80149fa:	60f8      	str	r0, [r7, #12]
 80149fc:	60b9      	str	r1, [r7, #8]
 80149fe:	607a      	str	r2, [r7, #4]
 8014a00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d10b      	bne.n	8014a20 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8014a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a0c:	f383 8811 	msr	BASEPRI, r3
 8014a10:	f3bf 8f6f 	isb	sy
 8014a14:	f3bf 8f4f 	dsb	sy
 8014a18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014a1a:	bf00      	nop
 8014a1c:	bf00      	nop
 8014a1e:	e7fd      	b.n	8014a1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014a20:	683b      	ldr	r3, [r7, #0]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d10b      	bne.n	8014a3e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8014a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a2a:	f383 8811 	msr	BASEPRI, r3
 8014a2e:	f3bf 8f6f 	isb	sy
 8014a32:	f3bf 8f4f 	dsb	sy
 8014a36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014a38:	bf00      	nop
 8014a3a:	bf00      	nop
 8014a3c:	e7fd      	b.n	8014a3a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d002      	beq.n	8014a4a <xQueueGenericCreateStatic+0x56>
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d001      	beq.n	8014a4e <xQueueGenericCreateStatic+0x5a>
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	e000      	b.n	8014a50 <xQueueGenericCreateStatic+0x5c>
 8014a4e:	2300      	movs	r3, #0
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d10b      	bne.n	8014a6c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8014a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a58:	f383 8811 	msr	BASEPRI, r3
 8014a5c:	f3bf 8f6f 	isb	sy
 8014a60:	f3bf 8f4f 	dsb	sy
 8014a64:	623b      	str	r3, [r7, #32]
}
 8014a66:	bf00      	nop
 8014a68:	bf00      	nop
 8014a6a:	e7fd      	b.n	8014a68 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d102      	bne.n	8014a78 <xQueueGenericCreateStatic+0x84>
 8014a72:	68bb      	ldr	r3, [r7, #8]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d101      	bne.n	8014a7c <xQueueGenericCreateStatic+0x88>
 8014a78:	2301      	movs	r3, #1
 8014a7a:	e000      	b.n	8014a7e <xQueueGenericCreateStatic+0x8a>
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d10b      	bne.n	8014a9a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8014a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a86:	f383 8811 	msr	BASEPRI, r3
 8014a8a:	f3bf 8f6f 	isb	sy
 8014a8e:	f3bf 8f4f 	dsb	sy
 8014a92:	61fb      	str	r3, [r7, #28]
}
 8014a94:	bf00      	nop
 8014a96:	bf00      	nop
 8014a98:	e7fd      	b.n	8014a96 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014a9a:	2350      	movs	r3, #80	@ 0x50
 8014a9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014a9e:	697b      	ldr	r3, [r7, #20]
 8014aa0:	2b50      	cmp	r3, #80	@ 0x50
 8014aa2:	d00b      	beq.n	8014abc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8014aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014aa8:	f383 8811 	msr	BASEPRI, r3
 8014aac:	f3bf 8f6f 	isb	sy
 8014ab0:	f3bf 8f4f 	dsb	sy
 8014ab4:	61bb      	str	r3, [r7, #24]
}
 8014ab6:	bf00      	nop
 8014ab8:	bf00      	nop
 8014aba:	e7fd      	b.n	8014ab8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014abc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8014ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d00d      	beq.n	8014ae4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014aca:	2201      	movs	r2, #1
 8014acc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014ad0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8014ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ad6:	9300      	str	r3, [sp, #0]
 8014ad8:	4613      	mov	r3, r2
 8014ada:	687a      	ldr	r2, [r7, #4]
 8014adc:	68b9      	ldr	r1, [r7, #8]
 8014ade:	68f8      	ldr	r0, [r7, #12]
 8014ae0:	f000 f840 	bl	8014b64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	3730      	adds	r7, #48	@ 0x30
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}

08014aee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014aee:	b580      	push	{r7, lr}
 8014af0:	b08a      	sub	sp, #40	@ 0x28
 8014af2:	af02      	add	r7, sp, #8
 8014af4:	60f8      	str	r0, [r7, #12]
 8014af6:	60b9      	str	r1, [r7, #8]
 8014af8:	4613      	mov	r3, r2
 8014afa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d10b      	bne.n	8014b1a <xQueueGenericCreate+0x2c>
	__asm volatile
 8014b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b06:	f383 8811 	msr	BASEPRI, r3
 8014b0a:	f3bf 8f6f 	isb	sy
 8014b0e:	f3bf 8f4f 	dsb	sy
 8014b12:	613b      	str	r3, [r7, #16]
}
 8014b14:	bf00      	nop
 8014b16:	bf00      	nop
 8014b18:	e7fd      	b.n	8014b16 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	68ba      	ldr	r2, [r7, #8]
 8014b1e:	fb02 f303 	mul.w	r3, r2, r3
 8014b22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014b24:	69fb      	ldr	r3, [r7, #28]
 8014b26:	3350      	adds	r3, #80	@ 0x50
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f002 f9b7 	bl	8016e9c <pvPortMalloc>
 8014b2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014b30:	69bb      	ldr	r3, [r7, #24]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d011      	beq.n	8014b5a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014b36:	69bb      	ldr	r3, [r7, #24]
 8014b38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014b3a:	697b      	ldr	r3, [r7, #20]
 8014b3c:	3350      	adds	r3, #80	@ 0x50
 8014b3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014b40:	69bb      	ldr	r3, [r7, #24]
 8014b42:	2200      	movs	r2, #0
 8014b44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014b48:	79fa      	ldrb	r2, [r7, #7]
 8014b4a:	69bb      	ldr	r3, [r7, #24]
 8014b4c:	9300      	str	r3, [sp, #0]
 8014b4e:	4613      	mov	r3, r2
 8014b50:	697a      	ldr	r2, [r7, #20]
 8014b52:	68b9      	ldr	r1, [r7, #8]
 8014b54:	68f8      	ldr	r0, [r7, #12]
 8014b56:	f000 f805 	bl	8014b64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014b5a:	69bb      	ldr	r3, [r7, #24]
	}
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	3720      	adds	r7, #32
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bd80      	pop	{r7, pc}

08014b64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b084      	sub	sp, #16
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	60f8      	str	r0, [r7, #12]
 8014b6c:	60b9      	str	r1, [r7, #8]
 8014b6e:	607a      	str	r2, [r7, #4]
 8014b70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014b72:	68bb      	ldr	r3, [r7, #8]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d103      	bne.n	8014b80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014b78:	69bb      	ldr	r3, [r7, #24]
 8014b7a:	69ba      	ldr	r2, [r7, #24]
 8014b7c:	601a      	str	r2, [r3, #0]
 8014b7e:	e002      	b.n	8014b86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014b80:	69bb      	ldr	r3, [r7, #24]
 8014b82:	687a      	ldr	r2, [r7, #4]
 8014b84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014b86:	69bb      	ldr	r3, [r7, #24]
 8014b88:	68fa      	ldr	r2, [r7, #12]
 8014b8a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014b8c:	69bb      	ldr	r3, [r7, #24]
 8014b8e:	68ba      	ldr	r2, [r7, #8]
 8014b90:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014b92:	2101      	movs	r1, #1
 8014b94:	69b8      	ldr	r0, [r7, #24]
 8014b96:	f7ff fec3 	bl	8014920 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014b9a:	69bb      	ldr	r3, [r7, #24]
 8014b9c:	78fa      	ldrb	r2, [r7, #3]
 8014b9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014ba2:	bf00      	nop
 8014ba4:	3710      	adds	r7, #16
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd80      	pop	{r7, pc}
	...

08014bac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b08e      	sub	sp, #56	@ 0x38
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	60f8      	str	r0, [r7, #12]
 8014bb4:	60b9      	str	r1, [r7, #8]
 8014bb6:	607a      	str	r2, [r7, #4]
 8014bb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014bba:	2300      	movs	r3, #0
 8014bbc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d10b      	bne.n	8014be0 <xQueueGenericSend+0x34>
	__asm volatile
 8014bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bcc:	f383 8811 	msr	BASEPRI, r3
 8014bd0:	f3bf 8f6f 	isb	sy
 8014bd4:	f3bf 8f4f 	dsb	sy
 8014bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014bda:	bf00      	nop
 8014bdc:	bf00      	nop
 8014bde:	e7fd      	b.n	8014bdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d103      	bne.n	8014bee <xQueueGenericSend+0x42>
 8014be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d101      	bne.n	8014bf2 <xQueueGenericSend+0x46>
 8014bee:	2301      	movs	r3, #1
 8014bf0:	e000      	b.n	8014bf4 <xQueueGenericSend+0x48>
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d10b      	bne.n	8014c10 <xQueueGenericSend+0x64>
	__asm volatile
 8014bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bfc:	f383 8811 	msr	BASEPRI, r3
 8014c00:	f3bf 8f6f 	isb	sy
 8014c04:	f3bf 8f4f 	dsb	sy
 8014c08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014c0a:	bf00      	nop
 8014c0c:	bf00      	nop
 8014c0e:	e7fd      	b.n	8014c0c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014c10:	683b      	ldr	r3, [r7, #0]
 8014c12:	2b02      	cmp	r3, #2
 8014c14:	d103      	bne.n	8014c1e <xQueueGenericSend+0x72>
 8014c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c1a:	2b01      	cmp	r3, #1
 8014c1c:	d101      	bne.n	8014c22 <xQueueGenericSend+0x76>
 8014c1e:	2301      	movs	r3, #1
 8014c20:	e000      	b.n	8014c24 <xQueueGenericSend+0x78>
 8014c22:	2300      	movs	r3, #0
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d10b      	bne.n	8014c40 <xQueueGenericSend+0x94>
	__asm volatile
 8014c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c2c:	f383 8811 	msr	BASEPRI, r3
 8014c30:	f3bf 8f6f 	isb	sy
 8014c34:	f3bf 8f4f 	dsb	sy
 8014c38:	623b      	str	r3, [r7, #32]
}
 8014c3a:	bf00      	nop
 8014c3c:	bf00      	nop
 8014c3e:	e7fd      	b.n	8014c3c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014c40:	f001 fa9c 	bl	801617c <xTaskGetSchedulerState>
 8014c44:	4603      	mov	r3, r0
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d102      	bne.n	8014c50 <xQueueGenericSend+0xa4>
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d101      	bne.n	8014c54 <xQueueGenericSend+0xa8>
 8014c50:	2301      	movs	r3, #1
 8014c52:	e000      	b.n	8014c56 <xQueueGenericSend+0xaa>
 8014c54:	2300      	movs	r3, #0
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d10b      	bne.n	8014c72 <xQueueGenericSend+0xc6>
	__asm volatile
 8014c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c5e:	f383 8811 	msr	BASEPRI, r3
 8014c62:	f3bf 8f6f 	isb	sy
 8014c66:	f3bf 8f4f 	dsb	sy
 8014c6a:	61fb      	str	r3, [r7, #28]
}
 8014c6c:	bf00      	nop
 8014c6e:	bf00      	nop
 8014c70:	e7fd      	b.n	8014c6e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014c72:	f001 fff1 	bl	8016c58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c7e:	429a      	cmp	r2, r3
 8014c80:	d302      	bcc.n	8014c88 <xQueueGenericSend+0xdc>
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	2b02      	cmp	r3, #2
 8014c86:	d129      	bne.n	8014cdc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014c88:	683a      	ldr	r2, [r7, #0]
 8014c8a:	68b9      	ldr	r1, [r7, #8]
 8014c8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c8e:	f000 fa91 	bl	80151b4 <prvCopyDataToQueue>
 8014c92:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d010      	beq.n	8014cbe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c9e:	3324      	adds	r3, #36	@ 0x24
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f001 f8a5 	bl	8015df0 <xTaskRemoveFromEventList>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d013      	beq.n	8014cd4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014cac:	4b3f      	ldr	r3, [pc, #252]	@ (8014dac <xQueueGenericSend+0x200>)
 8014cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014cb2:	601a      	str	r2, [r3, #0]
 8014cb4:	f3bf 8f4f 	dsb	sy
 8014cb8:	f3bf 8f6f 	isb	sy
 8014cbc:	e00a      	b.n	8014cd4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d007      	beq.n	8014cd4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014cc4:	4b39      	ldr	r3, [pc, #228]	@ (8014dac <xQueueGenericSend+0x200>)
 8014cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014cca:	601a      	str	r2, [r3, #0]
 8014ccc:	f3bf 8f4f 	dsb	sy
 8014cd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014cd4:	f001 fff2 	bl	8016cbc <vPortExitCritical>
				return pdPASS;
 8014cd8:	2301      	movs	r3, #1
 8014cda:	e063      	b.n	8014da4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d103      	bne.n	8014cea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014ce2:	f001 ffeb 	bl	8016cbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	e05c      	b.n	8014da4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d106      	bne.n	8014cfe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014cf0:	f107 0314 	add.w	r3, r7, #20
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f001 f8df 	bl	8015eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014cfa:	2301      	movs	r3, #1
 8014cfc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014cfe:	f001 ffdd 	bl	8016cbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014d02:	f000 fe2d 	bl	8015960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014d06:	f001 ffa7 	bl	8016c58 <vPortEnterCritical>
 8014d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014d10:	b25b      	sxtb	r3, r3
 8014d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d16:	d103      	bne.n	8014d20 <xQueueGenericSend+0x174>
 8014d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014d26:	b25b      	sxtb	r3, r3
 8014d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d2c:	d103      	bne.n	8014d36 <xQueueGenericSend+0x18a>
 8014d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d30:	2200      	movs	r2, #0
 8014d32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014d36:	f001 ffc1 	bl	8016cbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014d3a:	1d3a      	adds	r2, r7, #4
 8014d3c:	f107 0314 	add.w	r3, r7, #20
 8014d40:	4611      	mov	r1, r2
 8014d42:	4618      	mov	r0, r3
 8014d44:	f001 f8ce 	bl	8015ee4 <xTaskCheckForTimeOut>
 8014d48:	4603      	mov	r3, r0
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d124      	bne.n	8014d98 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014d4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014d50:	f000 fb28 	bl	80153a4 <prvIsQueueFull>
 8014d54:	4603      	mov	r3, r0
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d018      	beq.n	8014d8c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d5c:	3310      	adds	r3, #16
 8014d5e:	687a      	ldr	r2, [r7, #4]
 8014d60:	4611      	mov	r1, r2
 8014d62:	4618      	mov	r0, r3
 8014d64:	f000 fff2 	bl	8015d4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014d68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014d6a:	f000 fab3 	bl	80152d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014d6e:	f000 fe05 	bl	801597c <xTaskResumeAll>
 8014d72:	4603      	mov	r3, r0
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	f47f af7c 	bne.w	8014c72 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8014d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8014dac <xQueueGenericSend+0x200>)
 8014d7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014d80:	601a      	str	r2, [r3, #0]
 8014d82:	f3bf 8f4f 	dsb	sy
 8014d86:	f3bf 8f6f 	isb	sy
 8014d8a:	e772      	b.n	8014c72 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014d8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014d8e:	f000 faa1 	bl	80152d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014d92:	f000 fdf3 	bl	801597c <xTaskResumeAll>
 8014d96:	e76c      	b.n	8014c72 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014d98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014d9a:	f000 fa9b 	bl	80152d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014d9e:	f000 fded 	bl	801597c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014da2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014da4:	4618      	mov	r0, r3
 8014da6:	3738      	adds	r7, #56	@ 0x38
 8014da8:	46bd      	mov	sp, r7
 8014daa:	bd80      	pop	{r7, pc}
 8014dac:	e000ed04 	.word	0xe000ed04

08014db0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b090      	sub	sp, #64	@ 0x40
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	60f8      	str	r0, [r7, #12]
 8014db8:	60b9      	str	r1, [r7, #8]
 8014dba:	607a      	str	r2, [r7, #4]
 8014dbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8014dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d10b      	bne.n	8014de0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8014dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dcc:	f383 8811 	msr	BASEPRI, r3
 8014dd0:	f3bf 8f6f 	isb	sy
 8014dd4:	f3bf 8f4f 	dsb	sy
 8014dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014dda:	bf00      	nop
 8014ddc:	bf00      	nop
 8014dde:	e7fd      	b.n	8014ddc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014de0:	68bb      	ldr	r3, [r7, #8]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d103      	bne.n	8014dee <xQueueGenericSendFromISR+0x3e>
 8014de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d101      	bne.n	8014df2 <xQueueGenericSendFromISR+0x42>
 8014dee:	2301      	movs	r3, #1
 8014df0:	e000      	b.n	8014df4 <xQueueGenericSendFromISR+0x44>
 8014df2:	2300      	movs	r3, #0
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d10b      	bne.n	8014e10 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8014df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dfc:	f383 8811 	msr	BASEPRI, r3
 8014e00:	f3bf 8f6f 	isb	sy
 8014e04:	f3bf 8f4f 	dsb	sy
 8014e08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014e0a:	bf00      	nop
 8014e0c:	bf00      	nop
 8014e0e:	e7fd      	b.n	8014e0c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014e10:	683b      	ldr	r3, [r7, #0]
 8014e12:	2b02      	cmp	r3, #2
 8014e14:	d103      	bne.n	8014e1e <xQueueGenericSendFromISR+0x6e>
 8014e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e1a:	2b01      	cmp	r3, #1
 8014e1c:	d101      	bne.n	8014e22 <xQueueGenericSendFromISR+0x72>
 8014e1e:	2301      	movs	r3, #1
 8014e20:	e000      	b.n	8014e24 <xQueueGenericSendFromISR+0x74>
 8014e22:	2300      	movs	r3, #0
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d10b      	bne.n	8014e40 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8014e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e2c:	f383 8811 	msr	BASEPRI, r3
 8014e30:	f3bf 8f6f 	isb	sy
 8014e34:	f3bf 8f4f 	dsb	sy
 8014e38:	623b      	str	r3, [r7, #32]
}
 8014e3a:	bf00      	nop
 8014e3c:	bf00      	nop
 8014e3e:	e7fd      	b.n	8014e3c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014e40:	f001 ffea 	bl	8016e18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014e44:	f3ef 8211 	mrs	r2, BASEPRI
 8014e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e4c:	f383 8811 	msr	BASEPRI, r3
 8014e50:	f3bf 8f6f 	isb	sy
 8014e54:	f3bf 8f4f 	dsb	sy
 8014e58:	61fa      	str	r2, [r7, #28]
 8014e5a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014e5c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014e5e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e68:	429a      	cmp	r2, r3
 8014e6a:	d302      	bcc.n	8014e72 <xQueueGenericSendFromISR+0xc2>
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	2b02      	cmp	r3, #2
 8014e70:	d12f      	bne.n	8014ed2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014e78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014e82:	683a      	ldr	r2, [r7, #0]
 8014e84:	68b9      	ldr	r1, [r7, #8]
 8014e86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014e88:	f000 f994 	bl	80151b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014e8c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8014e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e94:	d112      	bne.n	8014ebc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d016      	beq.n	8014ecc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ea0:	3324      	adds	r3, #36	@ 0x24
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f000 ffa4 	bl	8015df0 <xTaskRemoveFromEventList>
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d00e      	beq.n	8014ecc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d00b      	beq.n	8014ecc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2201      	movs	r2, #1
 8014eb8:	601a      	str	r2, [r3, #0]
 8014eba:	e007      	b.n	8014ecc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014ebc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014ec0:	3301      	adds	r3, #1
 8014ec2:	b2db      	uxtb	r3, r3
 8014ec4:	b25a      	sxtb	r2, r3
 8014ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8014ecc:	2301      	movs	r3, #1
 8014ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8014ed0:	e001      	b.n	8014ed6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ed8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014ee0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	3740      	adds	r7, #64	@ 0x40
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}

08014eec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b08c      	sub	sp, #48	@ 0x30
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	60f8      	str	r0, [r7, #12]
 8014ef4:	60b9      	str	r1, [r7, #8]
 8014ef6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014ef8:	2300      	movs	r3, #0
 8014efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d10b      	bne.n	8014f1e <xQueueReceive+0x32>
	__asm volatile
 8014f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f0a:	f383 8811 	msr	BASEPRI, r3
 8014f0e:	f3bf 8f6f 	isb	sy
 8014f12:	f3bf 8f4f 	dsb	sy
 8014f16:	623b      	str	r3, [r7, #32]
}
 8014f18:	bf00      	nop
 8014f1a:	bf00      	nop
 8014f1c:	e7fd      	b.n	8014f1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014f1e:	68bb      	ldr	r3, [r7, #8]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d103      	bne.n	8014f2c <xQueueReceive+0x40>
 8014f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d101      	bne.n	8014f30 <xQueueReceive+0x44>
 8014f2c:	2301      	movs	r3, #1
 8014f2e:	e000      	b.n	8014f32 <xQueueReceive+0x46>
 8014f30:	2300      	movs	r3, #0
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d10b      	bne.n	8014f4e <xQueueReceive+0x62>
	__asm volatile
 8014f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f3a:	f383 8811 	msr	BASEPRI, r3
 8014f3e:	f3bf 8f6f 	isb	sy
 8014f42:	f3bf 8f4f 	dsb	sy
 8014f46:	61fb      	str	r3, [r7, #28]
}
 8014f48:	bf00      	nop
 8014f4a:	bf00      	nop
 8014f4c:	e7fd      	b.n	8014f4a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014f4e:	f001 f915 	bl	801617c <xTaskGetSchedulerState>
 8014f52:	4603      	mov	r3, r0
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d102      	bne.n	8014f5e <xQueueReceive+0x72>
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d101      	bne.n	8014f62 <xQueueReceive+0x76>
 8014f5e:	2301      	movs	r3, #1
 8014f60:	e000      	b.n	8014f64 <xQueueReceive+0x78>
 8014f62:	2300      	movs	r3, #0
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d10b      	bne.n	8014f80 <xQueueReceive+0x94>
	__asm volatile
 8014f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f6c:	f383 8811 	msr	BASEPRI, r3
 8014f70:	f3bf 8f6f 	isb	sy
 8014f74:	f3bf 8f4f 	dsb	sy
 8014f78:	61bb      	str	r3, [r7, #24]
}
 8014f7a:	bf00      	nop
 8014f7c:	bf00      	nop
 8014f7e:	e7fd      	b.n	8014f7c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014f80:	f001 fe6a 	bl	8016c58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f88:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d01f      	beq.n	8014fd0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014f90:	68b9      	ldr	r1, [r7, #8]
 8014f92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014f94:	f000 f978 	bl	8015288 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f9a:	1e5a      	subs	r2, r3, #1
 8014f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f9e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fa2:	691b      	ldr	r3, [r3, #16]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d00f      	beq.n	8014fc8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014faa:	3310      	adds	r3, #16
 8014fac:	4618      	mov	r0, r3
 8014fae:	f000 ff1f 	bl	8015df0 <xTaskRemoveFromEventList>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d007      	beq.n	8014fc8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014fb8:	4b3c      	ldr	r3, [pc, #240]	@ (80150ac <xQueueReceive+0x1c0>)
 8014fba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014fbe:	601a      	str	r2, [r3, #0]
 8014fc0:	f3bf 8f4f 	dsb	sy
 8014fc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014fc8:	f001 fe78 	bl	8016cbc <vPortExitCritical>
				return pdPASS;
 8014fcc:	2301      	movs	r3, #1
 8014fce:	e069      	b.n	80150a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d103      	bne.n	8014fde <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014fd6:	f001 fe71 	bl	8016cbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014fda:	2300      	movs	r3, #0
 8014fdc:	e062      	b.n	80150a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d106      	bne.n	8014ff2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014fe4:	f107 0310 	add.w	r3, r7, #16
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f000 ff65 	bl	8015eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014fee:	2301      	movs	r3, #1
 8014ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014ff2:	f001 fe63 	bl	8016cbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014ff6:	f000 fcb3 	bl	8015960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014ffa:	f001 fe2d 	bl	8016c58 <vPortEnterCritical>
 8014ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015000:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015004:	b25b      	sxtb	r3, r3
 8015006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801500a:	d103      	bne.n	8015014 <xQueueReceive+0x128>
 801500c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801500e:	2200      	movs	r2, #0
 8015010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015016:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801501a:	b25b      	sxtb	r3, r3
 801501c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015020:	d103      	bne.n	801502a <xQueueReceive+0x13e>
 8015022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015024:	2200      	movs	r2, #0
 8015026:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801502a:	f001 fe47 	bl	8016cbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801502e:	1d3a      	adds	r2, r7, #4
 8015030:	f107 0310 	add.w	r3, r7, #16
 8015034:	4611      	mov	r1, r2
 8015036:	4618      	mov	r0, r3
 8015038:	f000 ff54 	bl	8015ee4 <xTaskCheckForTimeOut>
 801503c:	4603      	mov	r3, r0
 801503e:	2b00      	cmp	r3, #0
 8015040:	d123      	bne.n	801508a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015042:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015044:	f000 f998 	bl	8015378 <prvIsQueueEmpty>
 8015048:	4603      	mov	r3, r0
 801504a:	2b00      	cmp	r3, #0
 801504c:	d017      	beq.n	801507e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801504e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015050:	3324      	adds	r3, #36	@ 0x24
 8015052:	687a      	ldr	r2, [r7, #4]
 8015054:	4611      	mov	r1, r2
 8015056:	4618      	mov	r0, r3
 8015058:	f000 fe78 	bl	8015d4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801505c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801505e:	f000 f939 	bl	80152d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015062:	f000 fc8b 	bl	801597c <xTaskResumeAll>
 8015066:	4603      	mov	r3, r0
 8015068:	2b00      	cmp	r3, #0
 801506a:	d189      	bne.n	8014f80 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801506c:	4b0f      	ldr	r3, [pc, #60]	@ (80150ac <xQueueReceive+0x1c0>)
 801506e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015072:	601a      	str	r2, [r3, #0]
 8015074:	f3bf 8f4f 	dsb	sy
 8015078:	f3bf 8f6f 	isb	sy
 801507c:	e780      	b.n	8014f80 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801507e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015080:	f000 f928 	bl	80152d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015084:	f000 fc7a 	bl	801597c <xTaskResumeAll>
 8015088:	e77a      	b.n	8014f80 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801508a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801508c:	f000 f922 	bl	80152d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015090:	f000 fc74 	bl	801597c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015094:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015096:	f000 f96f 	bl	8015378 <prvIsQueueEmpty>
 801509a:	4603      	mov	r3, r0
 801509c:	2b00      	cmp	r3, #0
 801509e:	f43f af6f 	beq.w	8014f80 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80150a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80150a4:	4618      	mov	r0, r3
 80150a6:	3730      	adds	r7, #48	@ 0x30
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	e000ed04 	.word	0xe000ed04

080150b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b08e      	sub	sp, #56	@ 0x38
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	60f8      	str	r0, [r7, #12]
 80150b8:	60b9      	str	r1, [r7, #8]
 80150ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80150c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d10b      	bne.n	80150de <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80150c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150ca:	f383 8811 	msr	BASEPRI, r3
 80150ce:	f3bf 8f6f 	isb	sy
 80150d2:	f3bf 8f4f 	dsb	sy
 80150d6:	623b      	str	r3, [r7, #32]
}
 80150d8:	bf00      	nop
 80150da:	bf00      	nop
 80150dc:	e7fd      	b.n	80150da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80150de:	68bb      	ldr	r3, [r7, #8]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d103      	bne.n	80150ec <xQueueReceiveFromISR+0x3c>
 80150e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d101      	bne.n	80150f0 <xQueueReceiveFromISR+0x40>
 80150ec:	2301      	movs	r3, #1
 80150ee:	e000      	b.n	80150f2 <xQueueReceiveFromISR+0x42>
 80150f0:	2300      	movs	r3, #0
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d10b      	bne.n	801510e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80150f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150fa:	f383 8811 	msr	BASEPRI, r3
 80150fe:	f3bf 8f6f 	isb	sy
 8015102:	f3bf 8f4f 	dsb	sy
 8015106:	61fb      	str	r3, [r7, #28]
}
 8015108:	bf00      	nop
 801510a:	bf00      	nop
 801510c:	e7fd      	b.n	801510a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801510e:	f001 fe83 	bl	8016e18 <vPortValidateInterruptPriority>
	__asm volatile
 8015112:	f3ef 8211 	mrs	r2, BASEPRI
 8015116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801511a:	f383 8811 	msr	BASEPRI, r3
 801511e:	f3bf 8f6f 	isb	sy
 8015122:	f3bf 8f4f 	dsb	sy
 8015126:	61ba      	str	r2, [r7, #24]
 8015128:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801512a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801512c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801512e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015132:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015136:	2b00      	cmp	r3, #0
 8015138:	d02f      	beq.n	801519a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801513c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015144:	68b9      	ldr	r1, [r7, #8]
 8015146:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015148:	f000 f89e 	bl	8015288 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801514c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801514e:	1e5a      	subs	r2, r3, #1
 8015150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015152:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015154:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015158:	f1b3 3fff 	cmp.w	r3, #4294967295
 801515c:	d112      	bne.n	8015184 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801515e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015160:	691b      	ldr	r3, [r3, #16]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d016      	beq.n	8015194 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015168:	3310      	adds	r3, #16
 801516a:	4618      	mov	r0, r3
 801516c:	f000 fe40 	bl	8015df0 <xTaskRemoveFromEventList>
 8015170:	4603      	mov	r3, r0
 8015172:	2b00      	cmp	r3, #0
 8015174:	d00e      	beq.n	8015194 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d00b      	beq.n	8015194 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	2201      	movs	r2, #1
 8015180:	601a      	str	r2, [r3, #0]
 8015182:	e007      	b.n	8015194 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015188:	3301      	adds	r3, #1
 801518a:	b2db      	uxtb	r3, r3
 801518c:	b25a      	sxtb	r2, r3
 801518e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8015194:	2301      	movs	r3, #1
 8015196:	637b      	str	r3, [r7, #52]	@ 0x34
 8015198:	e001      	b.n	801519e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 801519a:	2300      	movs	r3, #0
 801519c:	637b      	str	r3, [r7, #52]	@ 0x34
 801519e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	f383 8811 	msr	BASEPRI, r3
}
 80151a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80151aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80151ac:	4618      	mov	r0, r3
 80151ae:	3738      	adds	r7, #56	@ 0x38
 80151b0:	46bd      	mov	sp, r7
 80151b2:	bd80      	pop	{r7, pc}

080151b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b086      	sub	sp, #24
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	60f8      	str	r0, [r7, #12]
 80151bc:	60b9      	str	r1, [r7, #8]
 80151be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80151c0:	2300      	movs	r3, #0
 80151c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d10d      	bne.n	80151ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d14d      	bne.n	8015276 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	689b      	ldr	r3, [r3, #8]
 80151de:	4618      	mov	r0, r3
 80151e0:	f000 ffea 	bl	80161b8 <xTaskPriorityDisinherit>
 80151e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	2200      	movs	r2, #0
 80151ea:	609a      	str	r2, [r3, #8]
 80151ec:	e043      	b.n	8015276 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d119      	bne.n	8015228 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	6858      	ldr	r0, [r3, #4]
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151fc:	461a      	mov	r2, r3
 80151fe:	68b9      	ldr	r1, [r7, #8]
 8015200:	f003 f845 	bl	801828e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	685a      	ldr	r2, [r3, #4]
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801520c:	441a      	add	r2, r3
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	685a      	ldr	r2, [r3, #4]
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	689b      	ldr	r3, [r3, #8]
 801521a:	429a      	cmp	r2, r3
 801521c:	d32b      	bcc.n	8015276 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	681a      	ldr	r2, [r3, #0]
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	605a      	str	r2, [r3, #4]
 8015226:	e026      	b.n	8015276 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	68d8      	ldr	r0, [r3, #12]
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015230:	461a      	mov	r2, r3
 8015232:	68b9      	ldr	r1, [r7, #8]
 8015234:	f003 f82b 	bl	801828e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	68da      	ldr	r2, [r3, #12]
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015240:	425b      	negs	r3, r3
 8015242:	441a      	add	r2, r3
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	68da      	ldr	r2, [r3, #12]
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	429a      	cmp	r2, r3
 8015252:	d207      	bcs.n	8015264 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	689a      	ldr	r2, [r3, #8]
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801525c:	425b      	negs	r3, r3
 801525e:	441a      	add	r2, r3
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	2b02      	cmp	r3, #2
 8015268:	d105      	bne.n	8015276 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801526a:	693b      	ldr	r3, [r7, #16]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d002      	beq.n	8015276 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015270:	693b      	ldr	r3, [r7, #16]
 8015272:	3b01      	subs	r3, #1
 8015274:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015276:	693b      	ldr	r3, [r7, #16]
 8015278:	1c5a      	adds	r2, r3, #1
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801527e:	697b      	ldr	r3, [r7, #20]
}
 8015280:	4618      	mov	r0, r3
 8015282:	3718      	adds	r7, #24
 8015284:	46bd      	mov	sp, r7
 8015286:	bd80      	pop	{r7, pc}

08015288 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b082      	sub	sp, #8
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
 8015290:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015296:	2b00      	cmp	r3, #0
 8015298:	d018      	beq.n	80152cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	68da      	ldr	r2, [r3, #12]
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80152a2:	441a      	add	r2, r3
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	68da      	ldr	r2, [r3, #12]
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	689b      	ldr	r3, [r3, #8]
 80152b0:	429a      	cmp	r2, r3
 80152b2:	d303      	bcc.n	80152bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	681a      	ldr	r2, [r3, #0]
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	68d9      	ldr	r1, [r3, #12]
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80152c4:	461a      	mov	r2, r3
 80152c6:	6838      	ldr	r0, [r7, #0]
 80152c8:	f002 ffe1 	bl	801828e <memcpy>
	}
}
 80152cc:	bf00      	nop
 80152ce:	3708      	adds	r7, #8
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b084      	sub	sp, #16
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80152dc:	f001 fcbc 	bl	8016c58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80152e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80152e8:	e011      	b.n	801530e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d012      	beq.n	8015318 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	3324      	adds	r3, #36	@ 0x24
 80152f6:	4618      	mov	r0, r3
 80152f8:	f000 fd7a 	bl	8015df0 <xTaskRemoveFromEventList>
 80152fc:	4603      	mov	r3, r0
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d001      	beq.n	8015306 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015302:	f000 fe53 	bl	8015fac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015306:	7bfb      	ldrb	r3, [r7, #15]
 8015308:	3b01      	subs	r3, #1
 801530a:	b2db      	uxtb	r3, r3
 801530c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801530e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015312:	2b00      	cmp	r3, #0
 8015314:	dce9      	bgt.n	80152ea <prvUnlockQueue+0x16>
 8015316:	e000      	b.n	801531a <prvUnlockQueue+0x46>
					break;
 8015318:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	22ff      	movs	r2, #255	@ 0xff
 801531e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8015322:	f001 fccb 	bl	8016cbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015326:	f001 fc97 	bl	8016c58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015330:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015332:	e011      	b.n	8015358 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	691b      	ldr	r3, [r3, #16]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d012      	beq.n	8015362 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	3310      	adds	r3, #16
 8015340:	4618      	mov	r0, r3
 8015342:	f000 fd55 	bl	8015df0 <xTaskRemoveFromEventList>
 8015346:	4603      	mov	r3, r0
 8015348:	2b00      	cmp	r3, #0
 801534a:	d001      	beq.n	8015350 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801534c:	f000 fe2e 	bl	8015fac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015350:	7bbb      	ldrb	r3, [r7, #14]
 8015352:	3b01      	subs	r3, #1
 8015354:	b2db      	uxtb	r3, r3
 8015356:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801535c:	2b00      	cmp	r3, #0
 801535e:	dce9      	bgt.n	8015334 <prvUnlockQueue+0x60>
 8015360:	e000      	b.n	8015364 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015362:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	22ff      	movs	r2, #255	@ 0xff
 8015368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801536c:	f001 fca6 	bl	8016cbc <vPortExitCritical>
}
 8015370:	bf00      	nop
 8015372:	3710      	adds	r7, #16
 8015374:	46bd      	mov	sp, r7
 8015376:	bd80      	pop	{r7, pc}

08015378 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015378:	b580      	push	{r7, lr}
 801537a:	b084      	sub	sp, #16
 801537c:	af00      	add	r7, sp, #0
 801537e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015380:	f001 fc6a 	bl	8016c58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015388:	2b00      	cmp	r3, #0
 801538a:	d102      	bne.n	8015392 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801538c:	2301      	movs	r3, #1
 801538e:	60fb      	str	r3, [r7, #12]
 8015390:	e001      	b.n	8015396 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015392:	2300      	movs	r3, #0
 8015394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015396:	f001 fc91 	bl	8016cbc <vPortExitCritical>

	return xReturn;
 801539a:	68fb      	ldr	r3, [r7, #12]
}
 801539c:	4618      	mov	r0, r3
 801539e:	3710      	adds	r7, #16
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}

080153a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b084      	sub	sp, #16
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80153ac:	f001 fc54 	bl	8016c58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80153b8:	429a      	cmp	r2, r3
 80153ba:	d102      	bne.n	80153c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80153bc:	2301      	movs	r3, #1
 80153be:	60fb      	str	r3, [r7, #12]
 80153c0:	e001      	b.n	80153c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80153c2:	2300      	movs	r3, #0
 80153c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80153c6:	f001 fc79 	bl	8016cbc <vPortExitCritical>

	return xReturn;
 80153ca:	68fb      	ldr	r3, [r7, #12]
}
 80153cc:	4618      	mov	r0, r3
 80153ce:	3710      	adds	r7, #16
 80153d0:	46bd      	mov	sp, r7
 80153d2:	bd80      	pop	{r7, pc}

080153d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80153d4:	b480      	push	{r7}
 80153d6:	b085      	sub	sp, #20
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
 80153dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80153de:	2300      	movs	r3, #0
 80153e0:	60fb      	str	r3, [r7, #12]
 80153e2:	e014      	b.n	801540e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80153e4:	4a0f      	ldr	r2, [pc, #60]	@ (8015424 <vQueueAddToRegistry+0x50>)
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d10b      	bne.n	8015408 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80153f0:	490c      	ldr	r1, [pc, #48]	@ (8015424 <vQueueAddToRegistry+0x50>)
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	683a      	ldr	r2, [r7, #0]
 80153f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80153fa:	4a0a      	ldr	r2, [pc, #40]	@ (8015424 <vQueueAddToRegistry+0x50>)
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	00db      	lsls	r3, r3, #3
 8015400:	4413      	add	r3, r2
 8015402:	687a      	ldr	r2, [r7, #4]
 8015404:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8015406:	e006      	b.n	8015416 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	3301      	adds	r3, #1
 801540c:	60fb      	str	r3, [r7, #12]
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	2b07      	cmp	r3, #7
 8015412:	d9e7      	bls.n	80153e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015414:	bf00      	nop
 8015416:	bf00      	nop
 8015418:	3714      	adds	r7, #20
 801541a:	46bd      	mov	sp, r7
 801541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015420:	4770      	bx	lr
 8015422:	bf00      	nop
 8015424:	24002008 	.word	0x24002008

08015428 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015428:	b580      	push	{r7, lr}
 801542a:	b086      	sub	sp, #24
 801542c:	af00      	add	r7, sp, #0
 801542e:	60f8      	str	r0, [r7, #12]
 8015430:	60b9      	str	r1, [r7, #8]
 8015432:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015438:	f001 fc0e 	bl	8016c58 <vPortEnterCritical>
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015442:	b25b      	sxtb	r3, r3
 8015444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015448:	d103      	bne.n	8015452 <vQueueWaitForMessageRestricted+0x2a>
 801544a:	697b      	ldr	r3, [r7, #20]
 801544c:	2200      	movs	r2, #0
 801544e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015458:	b25b      	sxtb	r3, r3
 801545a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801545e:	d103      	bne.n	8015468 <vQueueWaitForMessageRestricted+0x40>
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	2200      	movs	r2, #0
 8015464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015468:	f001 fc28 	bl	8016cbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801546c:	697b      	ldr	r3, [r7, #20]
 801546e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015470:	2b00      	cmp	r3, #0
 8015472:	d106      	bne.n	8015482 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015474:	697b      	ldr	r3, [r7, #20]
 8015476:	3324      	adds	r3, #36	@ 0x24
 8015478:	687a      	ldr	r2, [r7, #4]
 801547a:	68b9      	ldr	r1, [r7, #8]
 801547c:	4618      	mov	r0, r3
 801547e:	f000 fc8b 	bl	8015d98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8015482:	6978      	ldr	r0, [r7, #20]
 8015484:	f7ff ff26 	bl	80152d4 <prvUnlockQueue>
	}
 8015488:	bf00      	nop
 801548a:	3718      	adds	r7, #24
 801548c:	46bd      	mov	sp, r7
 801548e:	bd80      	pop	{r7, pc}

08015490 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015490:	b580      	push	{r7, lr}
 8015492:	b08e      	sub	sp, #56	@ 0x38
 8015494:	af04      	add	r7, sp, #16
 8015496:	60f8      	str	r0, [r7, #12]
 8015498:	60b9      	str	r1, [r7, #8]
 801549a:	607a      	str	r2, [r7, #4]
 801549c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801549e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d10b      	bne.n	80154bc <xTaskCreateStatic+0x2c>
	__asm volatile
 80154a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154a8:	f383 8811 	msr	BASEPRI, r3
 80154ac:	f3bf 8f6f 	isb	sy
 80154b0:	f3bf 8f4f 	dsb	sy
 80154b4:	623b      	str	r3, [r7, #32]
}
 80154b6:	bf00      	nop
 80154b8:	bf00      	nop
 80154ba:	e7fd      	b.n	80154b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80154bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d10b      	bne.n	80154da <xTaskCreateStatic+0x4a>
	__asm volatile
 80154c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154c6:	f383 8811 	msr	BASEPRI, r3
 80154ca:	f3bf 8f6f 	isb	sy
 80154ce:	f3bf 8f4f 	dsb	sy
 80154d2:	61fb      	str	r3, [r7, #28]
}
 80154d4:	bf00      	nop
 80154d6:	bf00      	nop
 80154d8:	e7fd      	b.n	80154d6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80154da:	23ac      	movs	r3, #172	@ 0xac
 80154dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80154de:	693b      	ldr	r3, [r7, #16]
 80154e0:	2bac      	cmp	r3, #172	@ 0xac
 80154e2:	d00b      	beq.n	80154fc <xTaskCreateStatic+0x6c>
	__asm volatile
 80154e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154e8:	f383 8811 	msr	BASEPRI, r3
 80154ec:	f3bf 8f6f 	isb	sy
 80154f0:	f3bf 8f4f 	dsb	sy
 80154f4:	61bb      	str	r3, [r7, #24]
}
 80154f6:	bf00      	nop
 80154f8:	bf00      	nop
 80154fa:	e7fd      	b.n	80154f8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80154fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80154fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015500:	2b00      	cmp	r3, #0
 8015502:	d01e      	beq.n	8015542 <xTaskCreateStatic+0xb2>
 8015504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015506:	2b00      	cmp	r3, #0
 8015508:	d01b      	beq.n	8015542 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801550a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801550c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015510:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015512:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015516:	2202      	movs	r2, #2
 8015518:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801551c:	2300      	movs	r3, #0
 801551e:	9303      	str	r3, [sp, #12]
 8015520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015522:	9302      	str	r3, [sp, #8]
 8015524:	f107 0314 	add.w	r3, r7, #20
 8015528:	9301      	str	r3, [sp, #4]
 801552a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801552c:	9300      	str	r3, [sp, #0]
 801552e:	683b      	ldr	r3, [r7, #0]
 8015530:	687a      	ldr	r2, [r7, #4]
 8015532:	68b9      	ldr	r1, [r7, #8]
 8015534:	68f8      	ldr	r0, [r7, #12]
 8015536:	f000 f851 	bl	80155dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801553a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801553c:	f000 f8f8 	bl	8015730 <prvAddNewTaskToReadyList>
 8015540:	e001      	b.n	8015546 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8015542:	2300      	movs	r3, #0
 8015544:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015546:	697b      	ldr	r3, [r7, #20]
	}
 8015548:	4618      	mov	r0, r3
 801554a:	3728      	adds	r7, #40	@ 0x28
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}

08015550 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015550:	b580      	push	{r7, lr}
 8015552:	b08c      	sub	sp, #48	@ 0x30
 8015554:	af04      	add	r7, sp, #16
 8015556:	60f8      	str	r0, [r7, #12]
 8015558:	60b9      	str	r1, [r7, #8]
 801555a:	603b      	str	r3, [r7, #0]
 801555c:	4613      	mov	r3, r2
 801555e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015560:	88fb      	ldrh	r3, [r7, #6]
 8015562:	009b      	lsls	r3, r3, #2
 8015564:	4618      	mov	r0, r3
 8015566:	f001 fc99 	bl	8016e9c <pvPortMalloc>
 801556a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801556c:	697b      	ldr	r3, [r7, #20]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d00e      	beq.n	8015590 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015572:	20ac      	movs	r0, #172	@ 0xac
 8015574:	f001 fc92 	bl	8016e9c <pvPortMalloc>
 8015578:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801557a:	69fb      	ldr	r3, [r7, #28]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d003      	beq.n	8015588 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015580:	69fb      	ldr	r3, [r7, #28]
 8015582:	697a      	ldr	r2, [r7, #20]
 8015584:	631a      	str	r2, [r3, #48]	@ 0x30
 8015586:	e005      	b.n	8015594 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015588:	6978      	ldr	r0, [r7, #20]
 801558a:	f001 fd55 	bl	8017038 <vPortFree>
 801558e:	e001      	b.n	8015594 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015590:	2300      	movs	r3, #0
 8015592:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015594:	69fb      	ldr	r3, [r7, #28]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d017      	beq.n	80155ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801559a:	69fb      	ldr	r3, [r7, #28]
 801559c:	2200      	movs	r2, #0
 801559e:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80155a2:	88fa      	ldrh	r2, [r7, #6]
 80155a4:	2300      	movs	r3, #0
 80155a6:	9303      	str	r3, [sp, #12]
 80155a8:	69fb      	ldr	r3, [r7, #28]
 80155aa:	9302      	str	r3, [sp, #8]
 80155ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ae:	9301      	str	r3, [sp, #4]
 80155b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155b2:	9300      	str	r3, [sp, #0]
 80155b4:	683b      	ldr	r3, [r7, #0]
 80155b6:	68b9      	ldr	r1, [r7, #8]
 80155b8:	68f8      	ldr	r0, [r7, #12]
 80155ba:	f000 f80f 	bl	80155dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80155be:	69f8      	ldr	r0, [r7, #28]
 80155c0:	f000 f8b6 	bl	8015730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80155c4:	2301      	movs	r3, #1
 80155c6:	61bb      	str	r3, [r7, #24]
 80155c8:	e002      	b.n	80155d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80155ca:	f04f 33ff 	mov.w	r3, #4294967295
 80155ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80155d0:	69bb      	ldr	r3, [r7, #24]
	}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3720      	adds	r7, #32
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}
	...

080155dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80155dc:	b580      	push	{r7, lr}
 80155de:	b088      	sub	sp, #32
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	60f8      	str	r0, [r7, #12]
 80155e4:	60b9      	str	r1, [r7, #8]
 80155e6:	607a      	str	r2, [r7, #4]
 80155e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80155ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155ec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	009b      	lsls	r3, r3, #2
 80155f2:	461a      	mov	r2, r3
 80155f4:	21a5      	movs	r1, #165	@ 0xa5
 80155f6:	f002 fd78 	bl	80180ea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80155fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80155fe:	6879      	ldr	r1, [r7, #4]
 8015600:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015604:	440b      	add	r3, r1
 8015606:	009b      	lsls	r3, r3, #2
 8015608:	4413      	add	r3, r2
 801560a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801560c:	69bb      	ldr	r3, [r7, #24]
 801560e:	f023 0307 	bic.w	r3, r3, #7
 8015612:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015614:	69bb      	ldr	r3, [r7, #24]
 8015616:	f003 0307 	and.w	r3, r3, #7
 801561a:	2b00      	cmp	r3, #0
 801561c:	d00b      	beq.n	8015636 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015622:	f383 8811 	msr	BASEPRI, r3
 8015626:	f3bf 8f6f 	isb	sy
 801562a:	f3bf 8f4f 	dsb	sy
 801562e:	617b      	str	r3, [r7, #20]
}
 8015630:	bf00      	nop
 8015632:	bf00      	nop
 8015634:	e7fd      	b.n	8015632 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015636:	68bb      	ldr	r3, [r7, #8]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d01f      	beq.n	801567c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801563c:	2300      	movs	r3, #0
 801563e:	61fb      	str	r3, [r7, #28]
 8015640:	e012      	b.n	8015668 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015642:	68ba      	ldr	r2, [r7, #8]
 8015644:	69fb      	ldr	r3, [r7, #28]
 8015646:	4413      	add	r3, r2
 8015648:	7819      	ldrb	r1, [r3, #0]
 801564a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801564c:	69fb      	ldr	r3, [r7, #28]
 801564e:	4413      	add	r3, r2
 8015650:	3334      	adds	r3, #52	@ 0x34
 8015652:	460a      	mov	r2, r1
 8015654:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015656:	68ba      	ldr	r2, [r7, #8]
 8015658:	69fb      	ldr	r3, [r7, #28]
 801565a:	4413      	add	r3, r2
 801565c:	781b      	ldrb	r3, [r3, #0]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d006      	beq.n	8015670 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015662:	69fb      	ldr	r3, [r7, #28]
 8015664:	3301      	adds	r3, #1
 8015666:	61fb      	str	r3, [r7, #28]
 8015668:	69fb      	ldr	r3, [r7, #28]
 801566a:	2b0f      	cmp	r3, #15
 801566c:	d9e9      	bls.n	8015642 <prvInitialiseNewTask+0x66>
 801566e:	e000      	b.n	8015672 <prvInitialiseNewTask+0x96>
			{
				break;
 8015670:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015674:	2200      	movs	r2, #0
 8015676:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801567a:	e003      	b.n	8015684 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801567c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801567e:	2200      	movs	r2, #0
 8015680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015686:	2b37      	cmp	r3, #55	@ 0x37
 8015688:	d901      	bls.n	801568e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801568a:	2337      	movs	r3, #55	@ 0x37
 801568c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801568e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015690:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015692:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015696:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015698:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801569a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801569c:	2200      	movs	r2, #0
 801569e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80156a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156a2:	3304      	adds	r3, #4
 80156a4:	4618      	mov	r0, r3
 80156a6:	f7ff f8a7 	bl	80147f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80156aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156ac:	3318      	adds	r3, #24
 80156ae:	4618      	mov	r0, r3
 80156b0:	f7ff f8a2 	bl	80147f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80156b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80156ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80156c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80156c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156c8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80156ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156cc:	2200      	movs	r2, #0
 80156ce:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80156d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156d2:	2200      	movs	r2, #0
 80156d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80156d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156da:	2200      	movs	r2, #0
 80156dc:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80156e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156e2:	3358      	adds	r3, #88	@ 0x58
 80156e4:	224c      	movs	r2, #76	@ 0x4c
 80156e6:	2100      	movs	r1, #0
 80156e8:	4618      	mov	r0, r3
 80156ea:	f002 fcfe 	bl	80180ea <memset>
 80156ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156f0:	4a0c      	ldr	r2, [pc, #48]	@ (8015724 <prvInitialiseNewTask+0x148>)
 80156f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80156f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156f6:	4a0c      	ldr	r2, [pc, #48]	@ (8015728 <prvInitialiseNewTask+0x14c>)
 80156f8:	661a      	str	r2, [r3, #96]	@ 0x60
 80156fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156fc:	4a0b      	ldr	r2, [pc, #44]	@ (801572c <prvInitialiseNewTask+0x150>)
 80156fe:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015700:	683a      	ldr	r2, [r7, #0]
 8015702:	68f9      	ldr	r1, [r7, #12]
 8015704:	69b8      	ldr	r0, [r7, #24]
 8015706:	f001 f975 	bl	80169f4 <pxPortInitialiseStack>
 801570a:	4602      	mov	r2, r0
 801570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801570e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015712:	2b00      	cmp	r3, #0
 8015714:	d002      	beq.n	801571c <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801571a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801571c:	bf00      	nop
 801571e:	3720      	adds	r7, #32
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}
 8015724:	24028ddc 	.word	0x24028ddc
 8015728:	24028e44 	.word	0x24028e44
 801572c:	24028eac 	.word	0x24028eac

08015730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015738:	f001 fa8e 	bl	8016c58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801573c:	4b2d      	ldr	r3, [pc, #180]	@ (80157f4 <prvAddNewTaskToReadyList+0xc4>)
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	3301      	adds	r3, #1
 8015742:	4a2c      	ldr	r2, [pc, #176]	@ (80157f4 <prvAddNewTaskToReadyList+0xc4>)
 8015744:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015746:	4b2c      	ldr	r3, [pc, #176]	@ (80157f8 <prvAddNewTaskToReadyList+0xc8>)
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d109      	bne.n	8015762 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801574e:	4a2a      	ldr	r2, [pc, #168]	@ (80157f8 <prvAddNewTaskToReadyList+0xc8>)
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015754:	4b27      	ldr	r3, [pc, #156]	@ (80157f4 <prvAddNewTaskToReadyList+0xc4>)
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	2b01      	cmp	r3, #1
 801575a:	d110      	bne.n	801577e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801575c:	f000 fc4a 	bl	8015ff4 <prvInitialiseTaskLists>
 8015760:	e00d      	b.n	801577e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015762:	4b26      	ldr	r3, [pc, #152]	@ (80157fc <prvAddNewTaskToReadyList+0xcc>)
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d109      	bne.n	801577e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801576a:	4b23      	ldr	r3, [pc, #140]	@ (80157f8 <prvAddNewTaskToReadyList+0xc8>)
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015774:	429a      	cmp	r2, r3
 8015776:	d802      	bhi.n	801577e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015778:	4a1f      	ldr	r2, [pc, #124]	@ (80157f8 <prvAddNewTaskToReadyList+0xc8>)
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801577e:	4b20      	ldr	r3, [pc, #128]	@ (8015800 <prvAddNewTaskToReadyList+0xd0>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	3301      	adds	r3, #1
 8015784:	4a1e      	ldr	r2, [pc, #120]	@ (8015800 <prvAddNewTaskToReadyList+0xd0>)
 8015786:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015788:	4b1d      	ldr	r3, [pc, #116]	@ (8015800 <prvAddNewTaskToReadyList+0xd0>)
 801578a:	681a      	ldr	r2, [r3, #0]
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015794:	4b1b      	ldr	r3, [pc, #108]	@ (8015804 <prvAddNewTaskToReadyList+0xd4>)
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	429a      	cmp	r2, r3
 801579a:	d903      	bls.n	80157a4 <prvAddNewTaskToReadyList+0x74>
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157a0:	4a18      	ldr	r2, [pc, #96]	@ (8015804 <prvAddNewTaskToReadyList+0xd4>)
 80157a2:	6013      	str	r3, [r2, #0]
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80157a8:	4613      	mov	r3, r2
 80157aa:	009b      	lsls	r3, r3, #2
 80157ac:	4413      	add	r3, r2
 80157ae:	009b      	lsls	r3, r3, #2
 80157b0:	4a15      	ldr	r2, [pc, #84]	@ (8015808 <prvAddNewTaskToReadyList+0xd8>)
 80157b2:	441a      	add	r2, r3
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	3304      	adds	r3, #4
 80157b8:	4619      	mov	r1, r3
 80157ba:	4610      	mov	r0, r2
 80157bc:	f7ff f829 	bl	8014812 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80157c0:	f001 fa7c 	bl	8016cbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80157c4:	4b0d      	ldr	r3, [pc, #52]	@ (80157fc <prvAddNewTaskToReadyList+0xcc>)
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d00e      	beq.n	80157ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80157cc:	4b0a      	ldr	r3, [pc, #40]	@ (80157f8 <prvAddNewTaskToReadyList+0xc8>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157d6:	429a      	cmp	r2, r3
 80157d8:	d207      	bcs.n	80157ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80157da:	4b0c      	ldr	r3, [pc, #48]	@ (801580c <prvAddNewTaskToReadyList+0xdc>)
 80157dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80157e0:	601a      	str	r2, [r3, #0]
 80157e2:	f3bf 8f4f 	dsb	sy
 80157e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80157ea:	bf00      	nop
 80157ec:	3708      	adds	r7, #8
 80157ee:	46bd      	mov	sp, r7
 80157f0:	bd80      	pop	{r7, pc}
 80157f2:	bf00      	nop
 80157f4:	2400251c 	.word	0x2400251c
 80157f8:	24002048 	.word	0x24002048
 80157fc:	24002528 	.word	0x24002528
 8015800:	24002538 	.word	0x24002538
 8015804:	24002524 	.word	0x24002524
 8015808:	2400204c 	.word	0x2400204c
 801580c:	e000ed04 	.word	0xe000ed04

08015810 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015810:	b580      	push	{r7, lr}
 8015812:	b084      	sub	sp, #16
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015818:	2300      	movs	r3, #0
 801581a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d018      	beq.n	8015854 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015822:	4b14      	ldr	r3, [pc, #80]	@ (8015874 <vTaskDelay+0x64>)
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d00b      	beq.n	8015842 <vTaskDelay+0x32>
	__asm volatile
 801582a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801582e:	f383 8811 	msr	BASEPRI, r3
 8015832:	f3bf 8f6f 	isb	sy
 8015836:	f3bf 8f4f 	dsb	sy
 801583a:	60bb      	str	r3, [r7, #8]
}
 801583c:	bf00      	nop
 801583e:	bf00      	nop
 8015840:	e7fd      	b.n	801583e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8015842:	f000 f88d 	bl	8015960 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015846:	2100      	movs	r1, #0
 8015848:	6878      	ldr	r0, [r7, #4]
 801584a:	f000 fd25 	bl	8016298 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801584e:	f000 f895 	bl	801597c <xTaskResumeAll>
 8015852:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d107      	bne.n	801586a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801585a:	4b07      	ldr	r3, [pc, #28]	@ (8015878 <vTaskDelay+0x68>)
 801585c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015860:	601a      	str	r2, [r3, #0]
 8015862:	f3bf 8f4f 	dsb	sy
 8015866:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801586a:	bf00      	nop
 801586c:	3710      	adds	r7, #16
 801586e:	46bd      	mov	sp, r7
 8015870:	bd80      	pop	{r7, pc}
 8015872:	bf00      	nop
 8015874:	24002544 	.word	0x24002544
 8015878:	e000ed04 	.word	0xe000ed04

0801587c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801587c:	b580      	push	{r7, lr}
 801587e:	b08a      	sub	sp, #40	@ 0x28
 8015880:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015882:	2300      	movs	r3, #0
 8015884:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015886:	2300      	movs	r3, #0
 8015888:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801588a:	463a      	mov	r2, r7
 801588c:	1d39      	adds	r1, r7, #4
 801588e:	f107 0308 	add.w	r3, r7, #8
 8015892:	4618      	mov	r0, r3
 8015894:	f7fe ff5c 	bl	8014750 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015898:	6839      	ldr	r1, [r7, #0]
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	68ba      	ldr	r2, [r7, #8]
 801589e:	9202      	str	r2, [sp, #8]
 80158a0:	9301      	str	r3, [sp, #4]
 80158a2:	2300      	movs	r3, #0
 80158a4:	9300      	str	r3, [sp, #0]
 80158a6:	2300      	movs	r3, #0
 80158a8:	460a      	mov	r2, r1
 80158aa:	4925      	ldr	r1, [pc, #148]	@ (8015940 <vTaskStartScheduler+0xc4>)
 80158ac:	4825      	ldr	r0, [pc, #148]	@ (8015944 <vTaskStartScheduler+0xc8>)
 80158ae:	f7ff fdef 	bl	8015490 <xTaskCreateStatic>
 80158b2:	4603      	mov	r3, r0
 80158b4:	4a24      	ldr	r2, [pc, #144]	@ (8015948 <vTaskStartScheduler+0xcc>)
 80158b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80158b8:	4b23      	ldr	r3, [pc, #140]	@ (8015948 <vTaskStartScheduler+0xcc>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d002      	beq.n	80158c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80158c0:	2301      	movs	r3, #1
 80158c2:	617b      	str	r3, [r7, #20]
 80158c4:	e001      	b.n	80158ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80158c6:	2300      	movs	r3, #0
 80158c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80158ca:	697b      	ldr	r3, [r7, #20]
 80158cc:	2b01      	cmp	r3, #1
 80158ce:	d102      	bne.n	80158d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80158d0:	f000 fd36 	bl	8016340 <xTimerCreateTimerTask>
 80158d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80158d6:	697b      	ldr	r3, [r7, #20]
 80158d8:	2b01      	cmp	r3, #1
 80158da:	d11d      	bne.n	8015918 <vTaskStartScheduler+0x9c>
	__asm volatile
 80158dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158e0:	f383 8811 	msr	BASEPRI, r3
 80158e4:	f3bf 8f6f 	isb	sy
 80158e8:	f3bf 8f4f 	dsb	sy
 80158ec:	613b      	str	r3, [r7, #16]
}
 80158ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80158f0:	4b16      	ldr	r3, [pc, #88]	@ (801594c <vTaskStartScheduler+0xd0>)
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	3358      	adds	r3, #88	@ 0x58
 80158f6:	4a16      	ldr	r2, [pc, #88]	@ (8015950 <vTaskStartScheduler+0xd4>)
 80158f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80158fa:	4b16      	ldr	r3, [pc, #88]	@ (8015954 <vTaskStartScheduler+0xd8>)
 80158fc:	f04f 32ff 	mov.w	r2, #4294967295
 8015900:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015902:	4b15      	ldr	r3, [pc, #84]	@ (8015958 <vTaskStartScheduler+0xdc>)
 8015904:	2201      	movs	r2, #1
 8015906:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015908:	4b14      	ldr	r3, [pc, #80]	@ (801595c <vTaskStartScheduler+0xe0>)
 801590a:	2200      	movs	r2, #0
 801590c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801590e:	f7eb fef5 	bl	80016fc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015912:	f001 f8fd 	bl	8016b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015916:	e00f      	b.n	8015938 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015918:	697b      	ldr	r3, [r7, #20]
 801591a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801591e:	d10b      	bne.n	8015938 <vTaskStartScheduler+0xbc>
	__asm volatile
 8015920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015924:	f383 8811 	msr	BASEPRI, r3
 8015928:	f3bf 8f6f 	isb	sy
 801592c:	f3bf 8f4f 	dsb	sy
 8015930:	60fb      	str	r3, [r7, #12]
}
 8015932:	bf00      	nop
 8015934:	bf00      	nop
 8015936:	e7fd      	b.n	8015934 <vTaskStartScheduler+0xb8>
}
 8015938:	bf00      	nop
 801593a:	3718      	adds	r7, #24
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}
 8015940:	08019594 	.word	0x08019594
 8015944:	08015fc5 	.word	0x08015fc5
 8015948:	24002540 	.word	0x24002540
 801594c:	24002048 	.word	0x24002048
 8015950:	240001d0 	.word	0x240001d0
 8015954:	2400253c 	.word	0x2400253c
 8015958:	24002528 	.word	0x24002528
 801595c:	24002520 	.word	0x24002520

08015960 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015960:	b480      	push	{r7}
 8015962:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015964:	4b04      	ldr	r3, [pc, #16]	@ (8015978 <vTaskSuspendAll+0x18>)
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	3301      	adds	r3, #1
 801596a:	4a03      	ldr	r2, [pc, #12]	@ (8015978 <vTaskSuspendAll+0x18>)
 801596c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801596e:	bf00      	nop
 8015970:	46bd      	mov	sp, r7
 8015972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015976:	4770      	bx	lr
 8015978:	24002544 	.word	0x24002544

0801597c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b084      	sub	sp, #16
 8015980:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015982:	2300      	movs	r3, #0
 8015984:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015986:	2300      	movs	r3, #0
 8015988:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801598a:	4b42      	ldr	r3, [pc, #264]	@ (8015a94 <xTaskResumeAll+0x118>)
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d10b      	bne.n	80159aa <xTaskResumeAll+0x2e>
	__asm volatile
 8015992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015996:	f383 8811 	msr	BASEPRI, r3
 801599a:	f3bf 8f6f 	isb	sy
 801599e:	f3bf 8f4f 	dsb	sy
 80159a2:	603b      	str	r3, [r7, #0]
}
 80159a4:	bf00      	nop
 80159a6:	bf00      	nop
 80159a8:	e7fd      	b.n	80159a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80159aa:	f001 f955 	bl	8016c58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80159ae:	4b39      	ldr	r3, [pc, #228]	@ (8015a94 <xTaskResumeAll+0x118>)
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	3b01      	subs	r3, #1
 80159b4:	4a37      	ldr	r2, [pc, #220]	@ (8015a94 <xTaskResumeAll+0x118>)
 80159b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80159b8:	4b36      	ldr	r3, [pc, #216]	@ (8015a94 <xTaskResumeAll+0x118>)
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d162      	bne.n	8015a86 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80159c0:	4b35      	ldr	r3, [pc, #212]	@ (8015a98 <xTaskResumeAll+0x11c>)
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d05e      	beq.n	8015a86 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80159c8:	e02f      	b.n	8015a2a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159ca:	4b34      	ldr	r3, [pc, #208]	@ (8015a9c <xTaskResumeAll+0x120>)
 80159cc:	68db      	ldr	r3, [r3, #12]
 80159ce:	68db      	ldr	r3, [r3, #12]
 80159d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	3318      	adds	r3, #24
 80159d6:	4618      	mov	r0, r3
 80159d8:	f7fe ff78 	bl	80148cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	3304      	adds	r3, #4
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7fe ff73 	bl	80148cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159ea:	4b2d      	ldr	r3, [pc, #180]	@ (8015aa0 <xTaskResumeAll+0x124>)
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	429a      	cmp	r2, r3
 80159f0:	d903      	bls.n	80159fa <xTaskResumeAll+0x7e>
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159f6:	4a2a      	ldr	r2, [pc, #168]	@ (8015aa0 <xTaskResumeAll+0x124>)
 80159f8:	6013      	str	r3, [r2, #0]
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159fe:	4613      	mov	r3, r2
 8015a00:	009b      	lsls	r3, r3, #2
 8015a02:	4413      	add	r3, r2
 8015a04:	009b      	lsls	r3, r3, #2
 8015a06:	4a27      	ldr	r2, [pc, #156]	@ (8015aa4 <xTaskResumeAll+0x128>)
 8015a08:	441a      	add	r2, r3
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	3304      	adds	r3, #4
 8015a0e:	4619      	mov	r1, r3
 8015a10:	4610      	mov	r0, r2
 8015a12:	f7fe fefe 	bl	8014812 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a1a:	4b23      	ldr	r3, [pc, #140]	@ (8015aa8 <xTaskResumeAll+0x12c>)
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a20:	429a      	cmp	r2, r3
 8015a22:	d302      	bcc.n	8015a2a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8015a24:	4b21      	ldr	r3, [pc, #132]	@ (8015aac <xTaskResumeAll+0x130>)
 8015a26:	2201      	movs	r2, #1
 8015a28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8015a9c <xTaskResumeAll+0x120>)
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d1cb      	bne.n	80159ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d001      	beq.n	8015a3c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015a38:	f000 fb80 	bl	801613c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8015ab0 <xTaskResumeAll+0x134>)
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d010      	beq.n	8015a6a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015a48:	f000 f846 	bl	8015ad8 <xTaskIncrementTick>
 8015a4c:	4603      	mov	r3, r0
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d002      	beq.n	8015a58 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8015a52:	4b16      	ldr	r3, [pc, #88]	@ (8015aac <xTaskResumeAll+0x130>)
 8015a54:	2201      	movs	r2, #1
 8015a56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	3b01      	subs	r3, #1
 8015a5c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d1f1      	bne.n	8015a48 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8015a64:	4b12      	ldr	r3, [pc, #72]	@ (8015ab0 <xTaskResumeAll+0x134>)
 8015a66:	2200      	movs	r2, #0
 8015a68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015a6a:	4b10      	ldr	r3, [pc, #64]	@ (8015aac <xTaskResumeAll+0x130>)
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d009      	beq.n	8015a86 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015a72:	2301      	movs	r3, #1
 8015a74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015a76:	4b0f      	ldr	r3, [pc, #60]	@ (8015ab4 <xTaskResumeAll+0x138>)
 8015a78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015a7c:	601a      	str	r2, [r3, #0]
 8015a7e:	f3bf 8f4f 	dsb	sy
 8015a82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015a86:	f001 f919 	bl	8016cbc <vPortExitCritical>

	return xAlreadyYielded;
 8015a8a:	68bb      	ldr	r3, [r7, #8]
}
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	3710      	adds	r7, #16
 8015a90:	46bd      	mov	sp, r7
 8015a92:	bd80      	pop	{r7, pc}
 8015a94:	24002544 	.word	0x24002544
 8015a98:	2400251c 	.word	0x2400251c
 8015a9c:	240024dc 	.word	0x240024dc
 8015aa0:	24002524 	.word	0x24002524
 8015aa4:	2400204c 	.word	0x2400204c
 8015aa8:	24002048 	.word	0x24002048
 8015aac:	24002530 	.word	0x24002530
 8015ab0:	2400252c 	.word	0x2400252c
 8015ab4:	e000ed04 	.word	0xe000ed04

08015ab8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015ab8:	b480      	push	{r7}
 8015aba:	b083      	sub	sp, #12
 8015abc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015abe:	4b05      	ldr	r3, [pc, #20]	@ (8015ad4 <xTaskGetTickCount+0x1c>)
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015ac4:	687b      	ldr	r3, [r7, #4]
}
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	370c      	adds	r7, #12
 8015aca:	46bd      	mov	sp, r7
 8015acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad0:	4770      	bx	lr
 8015ad2:	bf00      	nop
 8015ad4:	24002520 	.word	0x24002520

08015ad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b086      	sub	sp, #24
 8015adc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015ade:	2300      	movs	r3, #0
 8015ae0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8015c20 <xTaskIncrementTick+0x148>)
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	f040 8090 	bne.w	8015c0c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015aec:	4b4d      	ldr	r3, [pc, #308]	@ (8015c24 <xTaskIncrementTick+0x14c>)
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	3301      	adds	r3, #1
 8015af2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015af4:	4a4b      	ldr	r2, [pc, #300]	@ (8015c24 <xTaskIncrementTick+0x14c>)
 8015af6:	693b      	ldr	r3, [r7, #16]
 8015af8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d121      	bne.n	8015b44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015b00:	4b49      	ldr	r3, [pc, #292]	@ (8015c28 <xTaskIncrementTick+0x150>)
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d00b      	beq.n	8015b22 <xTaskIncrementTick+0x4a>
	__asm volatile
 8015b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b0e:	f383 8811 	msr	BASEPRI, r3
 8015b12:	f3bf 8f6f 	isb	sy
 8015b16:	f3bf 8f4f 	dsb	sy
 8015b1a:	603b      	str	r3, [r7, #0]
}
 8015b1c:	bf00      	nop
 8015b1e:	bf00      	nop
 8015b20:	e7fd      	b.n	8015b1e <xTaskIncrementTick+0x46>
 8015b22:	4b41      	ldr	r3, [pc, #260]	@ (8015c28 <xTaskIncrementTick+0x150>)
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	60fb      	str	r3, [r7, #12]
 8015b28:	4b40      	ldr	r3, [pc, #256]	@ (8015c2c <xTaskIncrementTick+0x154>)
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	4a3e      	ldr	r2, [pc, #248]	@ (8015c28 <xTaskIncrementTick+0x150>)
 8015b2e:	6013      	str	r3, [r2, #0]
 8015b30:	4a3e      	ldr	r2, [pc, #248]	@ (8015c2c <xTaskIncrementTick+0x154>)
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	6013      	str	r3, [r2, #0]
 8015b36:	4b3e      	ldr	r3, [pc, #248]	@ (8015c30 <xTaskIncrementTick+0x158>)
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	3301      	adds	r3, #1
 8015b3c:	4a3c      	ldr	r2, [pc, #240]	@ (8015c30 <xTaskIncrementTick+0x158>)
 8015b3e:	6013      	str	r3, [r2, #0]
 8015b40:	f000 fafc 	bl	801613c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015b44:	4b3b      	ldr	r3, [pc, #236]	@ (8015c34 <xTaskIncrementTick+0x15c>)
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	693a      	ldr	r2, [r7, #16]
 8015b4a:	429a      	cmp	r2, r3
 8015b4c:	d349      	bcc.n	8015be2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015b4e:	4b36      	ldr	r3, [pc, #216]	@ (8015c28 <xTaskIncrementTick+0x150>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d104      	bne.n	8015b62 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b58:	4b36      	ldr	r3, [pc, #216]	@ (8015c34 <xTaskIncrementTick+0x15c>)
 8015b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8015b5e:	601a      	str	r2, [r3, #0]
					break;
 8015b60:	e03f      	b.n	8015be2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b62:	4b31      	ldr	r3, [pc, #196]	@ (8015c28 <xTaskIncrementTick+0x150>)
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	68db      	ldr	r3, [r3, #12]
 8015b68:	68db      	ldr	r3, [r3, #12]
 8015b6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	685b      	ldr	r3, [r3, #4]
 8015b70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015b72:	693a      	ldr	r2, [r7, #16]
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	429a      	cmp	r2, r3
 8015b78:	d203      	bcs.n	8015b82 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015b7a:	4a2e      	ldr	r2, [pc, #184]	@ (8015c34 <xTaskIncrementTick+0x15c>)
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015b80:	e02f      	b.n	8015be2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015b82:	68bb      	ldr	r3, [r7, #8]
 8015b84:	3304      	adds	r3, #4
 8015b86:	4618      	mov	r0, r3
 8015b88:	f7fe fea0 	bl	80148cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015b8c:	68bb      	ldr	r3, [r7, #8]
 8015b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d004      	beq.n	8015b9e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015b94:	68bb      	ldr	r3, [r7, #8]
 8015b96:	3318      	adds	r3, #24
 8015b98:	4618      	mov	r0, r3
 8015b9a:	f7fe fe97 	bl	80148cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015b9e:	68bb      	ldr	r3, [r7, #8]
 8015ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ba2:	4b25      	ldr	r3, [pc, #148]	@ (8015c38 <xTaskIncrementTick+0x160>)
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	429a      	cmp	r2, r3
 8015ba8:	d903      	bls.n	8015bb2 <xTaskIncrementTick+0xda>
 8015baa:	68bb      	ldr	r3, [r7, #8]
 8015bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bae:	4a22      	ldr	r2, [pc, #136]	@ (8015c38 <xTaskIncrementTick+0x160>)
 8015bb0:	6013      	str	r3, [r2, #0]
 8015bb2:	68bb      	ldr	r3, [r7, #8]
 8015bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015bb6:	4613      	mov	r3, r2
 8015bb8:	009b      	lsls	r3, r3, #2
 8015bba:	4413      	add	r3, r2
 8015bbc:	009b      	lsls	r3, r3, #2
 8015bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8015c3c <xTaskIncrementTick+0x164>)
 8015bc0:	441a      	add	r2, r3
 8015bc2:	68bb      	ldr	r3, [r7, #8]
 8015bc4:	3304      	adds	r3, #4
 8015bc6:	4619      	mov	r1, r3
 8015bc8:	4610      	mov	r0, r2
 8015bca:	f7fe fe22 	bl	8014812 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015bce:	68bb      	ldr	r3, [r7, #8]
 8015bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8015c40 <xTaskIncrementTick+0x168>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d3b8      	bcc.n	8015b4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015bdc:	2301      	movs	r3, #1
 8015bde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015be0:	e7b5      	b.n	8015b4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015be2:	4b17      	ldr	r3, [pc, #92]	@ (8015c40 <xTaskIncrementTick+0x168>)
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015be8:	4914      	ldr	r1, [pc, #80]	@ (8015c3c <xTaskIncrementTick+0x164>)
 8015bea:	4613      	mov	r3, r2
 8015bec:	009b      	lsls	r3, r3, #2
 8015bee:	4413      	add	r3, r2
 8015bf0:	009b      	lsls	r3, r3, #2
 8015bf2:	440b      	add	r3, r1
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	2b01      	cmp	r3, #1
 8015bf8:	d901      	bls.n	8015bfe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8015bfa:	2301      	movs	r3, #1
 8015bfc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015bfe:	4b11      	ldr	r3, [pc, #68]	@ (8015c44 <xTaskIncrementTick+0x16c>)
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d007      	beq.n	8015c16 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8015c06:	2301      	movs	r3, #1
 8015c08:	617b      	str	r3, [r7, #20]
 8015c0a:	e004      	b.n	8015c16 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8015c48 <xTaskIncrementTick+0x170>)
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	3301      	adds	r3, #1
 8015c12:	4a0d      	ldr	r2, [pc, #52]	@ (8015c48 <xTaskIncrementTick+0x170>)
 8015c14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015c16:	697b      	ldr	r3, [r7, #20]
}
 8015c18:	4618      	mov	r0, r3
 8015c1a:	3718      	adds	r7, #24
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	bd80      	pop	{r7, pc}
 8015c20:	24002544 	.word	0x24002544
 8015c24:	24002520 	.word	0x24002520
 8015c28:	240024d4 	.word	0x240024d4
 8015c2c:	240024d8 	.word	0x240024d8
 8015c30:	24002534 	.word	0x24002534
 8015c34:	2400253c 	.word	0x2400253c
 8015c38:	24002524 	.word	0x24002524
 8015c3c:	2400204c 	.word	0x2400204c
 8015c40:	24002048 	.word	0x24002048
 8015c44:	24002530 	.word	0x24002530
 8015c48:	2400252c 	.word	0x2400252c

08015c4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b084      	sub	sp, #16
 8015c50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015c52:	4b36      	ldr	r3, [pc, #216]	@ (8015d2c <vTaskSwitchContext+0xe0>)
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d003      	beq.n	8015c62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015c5a:	4b35      	ldr	r3, [pc, #212]	@ (8015d30 <vTaskSwitchContext+0xe4>)
 8015c5c:	2201      	movs	r2, #1
 8015c5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015c60:	e060      	b.n	8015d24 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8015c62:	4b33      	ldr	r3, [pc, #204]	@ (8015d30 <vTaskSwitchContext+0xe4>)
 8015c64:	2200      	movs	r2, #0
 8015c66:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8015c68:	f7eb fd4f 	bl	800170a <getRunTimeCounterValue>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	4a31      	ldr	r2, [pc, #196]	@ (8015d34 <vTaskSwitchContext+0xe8>)
 8015c70:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8015c72:	4b30      	ldr	r3, [pc, #192]	@ (8015d34 <vTaskSwitchContext+0xe8>)
 8015c74:	681a      	ldr	r2, [r3, #0]
 8015c76:	4b30      	ldr	r3, [pc, #192]	@ (8015d38 <vTaskSwitchContext+0xec>)
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	429a      	cmp	r2, r3
 8015c7c:	d909      	bls.n	8015c92 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8015c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8015d3c <vTaskSwitchContext+0xf0>)
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8015c84:	4a2b      	ldr	r2, [pc, #172]	@ (8015d34 <vTaskSwitchContext+0xe8>)
 8015c86:	6810      	ldr	r0, [r2, #0]
 8015c88:	4a2b      	ldr	r2, [pc, #172]	@ (8015d38 <vTaskSwitchContext+0xec>)
 8015c8a:	6812      	ldr	r2, [r2, #0]
 8015c8c:	1a82      	subs	r2, r0, r2
 8015c8e:	440a      	add	r2, r1
 8015c90:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8015c92:	4b28      	ldr	r3, [pc, #160]	@ (8015d34 <vTaskSwitchContext+0xe8>)
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	4a28      	ldr	r2, [pc, #160]	@ (8015d38 <vTaskSwitchContext+0xec>)
 8015c98:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c9a:	4b29      	ldr	r3, [pc, #164]	@ (8015d40 <vTaskSwitchContext+0xf4>)
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	60fb      	str	r3, [r7, #12]
 8015ca0:	e011      	b.n	8015cc6 <vTaskSwitchContext+0x7a>
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d10b      	bne.n	8015cc0 <vTaskSwitchContext+0x74>
	__asm volatile
 8015ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cac:	f383 8811 	msr	BASEPRI, r3
 8015cb0:	f3bf 8f6f 	isb	sy
 8015cb4:	f3bf 8f4f 	dsb	sy
 8015cb8:	607b      	str	r3, [r7, #4]
}
 8015cba:	bf00      	nop
 8015cbc:	bf00      	nop
 8015cbe:	e7fd      	b.n	8015cbc <vTaskSwitchContext+0x70>
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	3b01      	subs	r3, #1
 8015cc4:	60fb      	str	r3, [r7, #12]
 8015cc6:	491f      	ldr	r1, [pc, #124]	@ (8015d44 <vTaskSwitchContext+0xf8>)
 8015cc8:	68fa      	ldr	r2, [r7, #12]
 8015cca:	4613      	mov	r3, r2
 8015ccc:	009b      	lsls	r3, r3, #2
 8015cce:	4413      	add	r3, r2
 8015cd0:	009b      	lsls	r3, r3, #2
 8015cd2:	440b      	add	r3, r1
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d0e3      	beq.n	8015ca2 <vTaskSwitchContext+0x56>
 8015cda:	68fa      	ldr	r2, [r7, #12]
 8015cdc:	4613      	mov	r3, r2
 8015cde:	009b      	lsls	r3, r3, #2
 8015ce0:	4413      	add	r3, r2
 8015ce2:	009b      	lsls	r3, r3, #2
 8015ce4:	4a17      	ldr	r2, [pc, #92]	@ (8015d44 <vTaskSwitchContext+0xf8>)
 8015ce6:	4413      	add	r3, r2
 8015ce8:	60bb      	str	r3, [r7, #8]
 8015cea:	68bb      	ldr	r3, [r7, #8]
 8015cec:	685b      	ldr	r3, [r3, #4]
 8015cee:	685a      	ldr	r2, [r3, #4]
 8015cf0:	68bb      	ldr	r3, [r7, #8]
 8015cf2:	605a      	str	r2, [r3, #4]
 8015cf4:	68bb      	ldr	r3, [r7, #8]
 8015cf6:	685a      	ldr	r2, [r3, #4]
 8015cf8:	68bb      	ldr	r3, [r7, #8]
 8015cfa:	3308      	adds	r3, #8
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d104      	bne.n	8015d0a <vTaskSwitchContext+0xbe>
 8015d00:	68bb      	ldr	r3, [r7, #8]
 8015d02:	685b      	ldr	r3, [r3, #4]
 8015d04:	685a      	ldr	r2, [r3, #4]
 8015d06:	68bb      	ldr	r3, [r7, #8]
 8015d08:	605a      	str	r2, [r3, #4]
 8015d0a:	68bb      	ldr	r3, [r7, #8]
 8015d0c:	685b      	ldr	r3, [r3, #4]
 8015d0e:	68db      	ldr	r3, [r3, #12]
 8015d10:	4a0a      	ldr	r2, [pc, #40]	@ (8015d3c <vTaskSwitchContext+0xf0>)
 8015d12:	6013      	str	r3, [r2, #0]
 8015d14:	4a0a      	ldr	r2, [pc, #40]	@ (8015d40 <vTaskSwitchContext+0xf4>)
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015d1a:	4b08      	ldr	r3, [pc, #32]	@ (8015d3c <vTaskSwitchContext+0xf0>)
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	3358      	adds	r3, #88	@ 0x58
 8015d20:	4a09      	ldr	r2, [pc, #36]	@ (8015d48 <vTaskSwitchContext+0xfc>)
 8015d22:	6013      	str	r3, [r2, #0]
}
 8015d24:	bf00      	nop
 8015d26:	3710      	adds	r7, #16
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	bd80      	pop	{r7, pc}
 8015d2c:	24002544 	.word	0x24002544
 8015d30:	24002530 	.word	0x24002530
 8015d34:	2400254c 	.word	0x2400254c
 8015d38:	24002548 	.word	0x24002548
 8015d3c:	24002048 	.word	0x24002048
 8015d40:	24002524 	.word	0x24002524
 8015d44:	2400204c 	.word	0x2400204c
 8015d48:	240001d0 	.word	0x240001d0

08015d4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b084      	sub	sp, #16
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	6078      	str	r0, [r7, #4]
 8015d54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d10b      	bne.n	8015d74 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8015d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d60:	f383 8811 	msr	BASEPRI, r3
 8015d64:	f3bf 8f6f 	isb	sy
 8015d68:	f3bf 8f4f 	dsb	sy
 8015d6c:	60fb      	str	r3, [r7, #12]
}
 8015d6e:	bf00      	nop
 8015d70:	bf00      	nop
 8015d72:	e7fd      	b.n	8015d70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015d74:	4b07      	ldr	r3, [pc, #28]	@ (8015d94 <vTaskPlaceOnEventList+0x48>)
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	3318      	adds	r3, #24
 8015d7a:	4619      	mov	r1, r3
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	f7fe fd6c 	bl	801485a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015d82:	2101      	movs	r1, #1
 8015d84:	6838      	ldr	r0, [r7, #0]
 8015d86:	f000 fa87 	bl	8016298 <prvAddCurrentTaskToDelayedList>
}
 8015d8a:	bf00      	nop
 8015d8c:	3710      	adds	r7, #16
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bd80      	pop	{r7, pc}
 8015d92:	bf00      	nop
 8015d94:	24002048 	.word	0x24002048

08015d98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b086      	sub	sp, #24
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	60f8      	str	r0, [r7, #12]
 8015da0:	60b9      	str	r1, [r7, #8]
 8015da2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d10b      	bne.n	8015dc2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8015daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015dae:	f383 8811 	msr	BASEPRI, r3
 8015db2:	f3bf 8f6f 	isb	sy
 8015db6:	f3bf 8f4f 	dsb	sy
 8015dba:	617b      	str	r3, [r7, #20]
}
 8015dbc:	bf00      	nop
 8015dbe:	bf00      	nop
 8015dc0:	e7fd      	b.n	8015dbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8015dec <vTaskPlaceOnEventListRestricted+0x54>)
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	3318      	adds	r3, #24
 8015dc8:	4619      	mov	r1, r3
 8015dca:	68f8      	ldr	r0, [r7, #12]
 8015dcc:	f7fe fd21 	bl	8014812 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d002      	beq.n	8015ddc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8015dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8015dda:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015ddc:	6879      	ldr	r1, [r7, #4]
 8015dde:	68b8      	ldr	r0, [r7, #8]
 8015de0:	f000 fa5a 	bl	8016298 <prvAddCurrentTaskToDelayedList>
	}
 8015de4:	bf00      	nop
 8015de6:	3718      	adds	r7, #24
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}
 8015dec:	24002048 	.word	0x24002048

08015df0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b086      	sub	sp, #24
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	68db      	ldr	r3, [r3, #12]
 8015dfc:	68db      	ldr	r3, [r3, #12]
 8015dfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d10b      	bne.n	8015e1e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8015e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e0a:	f383 8811 	msr	BASEPRI, r3
 8015e0e:	f3bf 8f6f 	isb	sy
 8015e12:	f3bf 8f4f 	dsb	sy
 8015e16:	60fb      	str	r3, [r7, #12]
}
 8015e18:	bf00      	nop
 8015e1a:	bf00      	nop
 8015e1c:	e7fd      	b.n	8015e1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015e1e:	693b      	ldr	r3, [r7, #16]
 8015e20:	3318      	adds	r3, #24
 8015e22:	4618      	mov	r0, r3
 8015e24:	f7fe fd52 	bl	80148cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015e28:	4b1d      	ldr	r3, [pc, #116]	@ (8015ea0 <xTaskRemoveFromEventList+0xb0>)
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d11d      	bne.n	8015e6c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015e30:	693b      	ldr	r3, [r7, #16]
 8015e32:	3304      	adds	r3, #4
 8015e34:	4618      	mov	r0, r3
 8015e36:	f7fe fd49 	bl	80148cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015e3a:	693b      	ldr	r3, [r7, #16]
 8015e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e3e:	4b19      	ldr	r3, [pc, #100]	@ (8015ea4 <xTaskRemoveFromEventList+0xb4>)
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	429a      	cmp	r2, r3
 8015e44:	d903      	bls.n	8015e4e <xTaskRemoveFromEventList+0x5e>
 8015e46:	693b      	ldr	r3, [r7, #16]
 8015e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e4a:	4a16      	ldr	r2, [pc, #88]	@ (8015ea4 <xTaskRemoveFromEventList+0xb4>)
 8015e4c:	6013      	str	r3, [r2, #0]
 8015e4e:	693b      	ldr	r3, [r7, #16]
 8015e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e52:	4613      	mov	r3, r2
 8015e54:	009b      	lsls	r3, r3, #2
 8015e56:	4413      	add	r3, r2
 8015e58:	009b      	lsls	r3, r3, #2
 8015e5a:	4a13      	ldr	r2, [pc, #76]	@ (8015ea8 <xTaskRemoveFromEventList+0xb8>)
 8015e5c:	441a      	add	r2, r3
 8015e5e:	693b      	ldr	r3, [r7, #16]
 8015e60:	3304      	adds	r3, #4
 8015e62:	4619      	mov	r1, r3
 8015e64:	4610      	mov	r0, r2
 8015e66:	f7fe fcd4 	bl	8014812 <vListInsertEnd>
 8015e6a:	e005      	b.n	8015e78 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015e6c:	693b      	ldr	r3, [r7, #16]
 8015e6e:	3318      	adds	r3, #24
 8015e70:	4619      	mov	r1, r3
 8015e72:	480e      	ldr	r0, [pc, #56]	@ (8015eac <xTaskRemoveFromEventList+0xbc>)
 8015e74:	f7fe fccd 	bl	8014812 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015e78:	693b      	ldr	r3, [r7, #16]
 8015e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8015eb0 <xTaskRemoveFromEventList+0xc0>)
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e82:	429a      	cmp	r2, r3
 8015e84:	d905      	bls.n	8015e92 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015e86:	2301      	movs	r3, #1
 8015e88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8015eb4 <xTaskRemoveFromEventList+0xc4>)
 8015e8c:	2201      	movs	r2, #1
 8015e8e:	601a      	str	r2, [r3, #0]
 8015e90:	e001      	b.n	8015e96 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8015e92:	2300      	movs	r3, #0
 8015e94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015e96:	697b      	ldr	r3, [r7, #20]
}
 8015e98:	4618      	mov	r0, r3
 8015e9a:	3718      	adds	r7, #24
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	bd80      	pop	{r7, pc}
 8015ea0:	24002544 	.word	0x24002544
 8015ea4:	24002524 	.word	0x24002524
 8015ea8:	2400204c 	.word	0x2400204c
 8015eac:	240024dc 	.word	0x240024dc
 8015eb0:	24002048 	.word	0x24002048
 8015eb4:	24002530 	.word	0x24002530

08015eb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015eb8:	b480      	push	{r7}
 8015eba:	b083      	sub	sp, #12
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015ec0:	4b06      	ldr	r3, [pc, #24]	@ (8015edc <vTaskInternalSetTimeOutState+0x24>)
 8015ec2:	681a      	ldr	r2, [r3, #0]
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015ec8:	4b05      	ldr	r3, [pc, #20]	@ (8015ee0 <vTaskInternalSetTimeOutState+0x28>)
 8015eca:	681a      	ldr	r2, [r3, #0]
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	605a      	str	r2, [r3, #4]
}
 8015ed0:	bf00      	nop
 8015ed2:	370c      	adds	r7, #12
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eda:	4770      	bx	lr
 8015edc:	24002534 	.word	0x24002534
 8015ee0:	24002520 	.word	0x24002520

08015ee4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b088      	sub	sp, #32
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
 8015eec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d10b      	bne.n	8015f0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8015ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ef8:	f383 8811 	msr	BASEPRI, r3
 8015efc:	f3bf 8f6f 	isb	sy
 8015f00:	f3bf 8f4f 	dsb	sy
 8015f04:	613b      	str	r3, [r7, #16]
}
 8015f06:	bf00      	nop
 8015f08:	bf00      	nop
 8015f0a:	e7fd      	b.n	8015f08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d10b      	bne.n	8015f2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8015f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f16:	f383 8811 	msr	BASEPRI, r3
 8015f1a:	f3bf 8f6f 	isb	sy
 8015f1e:	f3bf 8f4f 	dsb	sy
 8015f22:	60fb      	str	r3, [r7, #12]
}
 8015f24:	bf00      	nop
 8015f26:	bf00      	nop
 8015f28:	e7fd      	b.n	8015f26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8015f2a:	f000 fe95 	bl	8016c58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8015fa4 <xTaskCheckForTimeOut+0xc0>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	685b      	ldr	r3, [r3, #4]
 8015f38:	69ba      	ldr	r2, [r7, #24]
 8015f3a:	1ad3      	subs	r3, r2, r3
 8015f3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015f3e:	683b      	ldr	r3, [r7, #0]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f46:	d102      	bne.n	8015f4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015f48:	2300      	movs	r3, #0
 8015f4a:	61fb      	str	r3, [r7, #28]
 8015f4c:	e023      	b.n	8015f96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	681a      	ldr	r2, [r3, #0]
 8015f52:	4b15      	ldr	r3, [pc, #84]	@ (8015fa8 <xTaskCheckForTimeOut+0xc4>)
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	429a      	cmp	r2, r3
 8015f58:	d007      	beq.n	8015f6a <xTaskCheckForTimeOut+0x86>
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	685b      	ldr	r3, [r3, #4]
 8015f5e:	69ba      	ldr	r2, [r7, #24]
 8015f60:	429a      	cmp	r2, r3
 8015f62:	d302      	bcc.n	8015f6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015f64:	2301      	movs	r3, #1
 8015f66:	61fb      	str	r3, [r7, #28]
 8015f68:	e015      	b.n	8015f96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015f6a:	683b      	ldr	r3, [r7, #0]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	697a      	ldr	r2, [r7, #20]
 8015f70:	429a      	cmp	r2, r3
 8015f72:	d20b      	bcs.n	8015f8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015f74:	683b      	ldr	r3, [r7, #0]
 8015f76:	681a      	ldr	r2, [r3, #0]
 8015f78:	697b      	ldr	r3, [r7, #20]
 8015f7a:	1ad2      	subs	r2, r2, r3
 8015f7c:	683b      	ldr	r3, [r7, #0]
 8015f7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015f80:	6878      	ldr	r0, [r7, #4]
 8015f82:	f7ff ff99 	bl	8015eb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015f86:	2300      	movs	r3, #0
 8015f88:	61fb      	str	r3, [r7, #28]
 8015f8a:	e004      	b.n	8015f96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015f8c:	683b      	ldr	r3, [r7, #0]
 8015f8e:	2200      	movs	r2, #0
 8015f90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015f92:	2301      	movs	r3, #1
 8015f94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015f96:	f000 fe91 	bl	8016cbc <vPortExitCritical>

	return xReturn;
 8015f9a:	69fb      	ldr	r3, [r7, #28]
}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	3720      	adds	r7, #32
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd80      	pop	{r7, pc}
 8015fa4:	24002520 	.word	0x24002520
 8015fa8:	24002534 	.word	0x24002534

08015fac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015fac:	b480      	push	{r7}
 8015fae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015fb0:	4b03      	ldr	r3, [pc, #12]	@ (8015fc0 <vTaskMissedYield+0x14>)
 8015fb2:	2201      	movs	r2, #1
 8015fb4:	601a      	str	r2, [r3, #0]
}
 8015fb6:	bf00      	nop
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fbe:	4770      	bx	lr
 8015fc0:	24002530 	.word	0x24002530

08015fc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b082      	sub	sp, #8
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015fcc:	f000 f852 	bl	8016074 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015fd0:	4b06      	ldr	r3, [pc, #24]	@ (8015fec <prvIdleTask+0x28>)
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	2b01      	cmp	r3, #1
 8015fd6:	d9f9      	bls.n	8015fcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8015fd8:	4b05      	ldr	r3, [pc, #20]	@ (8015ff0 <prvIdleTask+0x2c>)
 8015fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015fde:	601a      	str	r2, [r3, #0]
 8015fe0:	f3bf 8f4f 	dsb	sy
 8015fe4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015fe8:	e7f0      	b.n	8015fcc <prvIdleTask+0x8>
 8015fea:	bf00      	nop
 8015fec:	2400204c 	.word	0x2400204c
 8015ff0:	e000ed04 	.word	0xe000ed04

08015ff4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b082      	sub	sp, #8
 8015ff8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	607b      	str	r3, [r7, #4]
 8015ffe:	e00c      	b.n	801601a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016000:	687a      	ldr	r2, [r7, #4]
 8016002:	4613      	mov	r3, r2
 8016004:	009b      	lsls	r3, r3, #2
 8016006:	4413      	add	r3, r2
 8016008:	009b      	lsls	r3, r3, #2
 801600a:	4a12      	ldr	r2, [pc, #72]	@ (8016054 <prvInitialiseTaskLists+0x60>)
 801600c:	4413      	add	r3, r2
 801600e:	4618      	mov	r0, r3
 8016010:	f7fe fbd2 	bl	80147b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	3301      	adds	r3, #1
 8016018:	607b      	str	r3, [r7, #4]
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	2b37      	cmp	r3, #55	@ 0x37
 801601e:	d9ef      	bls.n	8016000 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016020:	480d      	ldr	r0, [pc, #52]	@ (8016058 <prvInitialiseTaskLists+0x64>)
 8016022:	f7fe fbc9 	bl	80147b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016026:	480d      	ldr	r0, [pc, #52]	@ (801605c <prvInitialiseTaskLists+0x68>)
 8016028:	f7fe fbc6 	bl	80147b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801602c:	480c      	ldr	r0, [pc, #48]	@ (8016060 <prvInitialiseTaskLists+0x6c>)
 801602e:	f7fe fbc3 	bl	80147b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016032:	480c      	ldr	r0, [pc, #48]	@ (8016064 <prvInitialiseTaskLists+0x70>)
 8016034:	f7fe fbc0 	bl	80147b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016038:	480b      	ldr	r0, [pc, #44]	@ (8016068 <prvInitialiseTaskLists+0x74>)
 801603a:	f7fe fbbd 	bl	80147b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801603e:	4b0b      	ldr	r3, [pc, #44]	@ (801606c <prvInitialiseTaskLists+0x78>)
 8016040:	4a05      	ldr	r2, [pc, #20]	@ (8016058 <prvInitialiseTaskLists+0x64>)
 8016042:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016044:	4b0a      	ldr	r3, [pc, #40]	@ (8016070 <prvInitialiseTaskLists+0x7c>)
 8016046:	4a05      	ldr	r2, [pc, #20]	@ (801605c <prvInitialiseTaskLists+0x68>)
 8016048:	601a      	str	r2, [r3, #0]
}
 801604a:	bf00      	nop
 801604c:	3708      	adds	r7, #8
 801604e:	46bd      	mov	sp, r7
 8016050:	bd80      	pop	{r7, pc}
 8016052:	bf00      	nop
 8016054:	2400204c 	.word	0x2400204c
 8016058:	240024ac 	.word	0x240024ac
 801605c:	240024c0 	.word	0x240024c0
 8016060:	240024dc 	.word	0x240024dc
 8016064:	240024f0 	.word	0x240024f0
 8016068:	24002508 	.word	0x24002508
 801606c:	240024d4 	.word	0x240024d4
 8016070:	240024d8 	.word	0x240024d8

08016074 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b082      	sub	sp, #8
 8016078:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801607a:	e019      	b.n	80160b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801607c:	f000 fdec 	bl	8016c58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016080:	4b10      	ldr	r3, [pc, #64]	@ (80160c4 <prvCheckTasksWaitingTermination+0x50>)
 8016082:	68db      	ldr	r3, [r3, #12]
 8016084:	68db      	ldr	r3, [r3, #12]
 8016086:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	3304      	adds	r3, #4
 801608c:	4618      	mov	r0, r3
 801608e:	f7fe fc1d 	bl	80148cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016092:	4b0d      	ldr	r3, [pc, #52]	@ (80160c8 <prvCheckTasksWaitingTermination+0x54>)
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	3b01      	subs	r3, #1
 8016098:	4a0b      	ldr	r2, [pc, #44]	@ (80160c8 <prvCheckTasksWaitingTermination+0x54>)
 801609a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801609c:	4b0b      	ldr	r3, [pc, #44]	@ (80160cc <prvCheckTasksWaitingTermination+0x58>)
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	3b01      	subs	r3, #1
 80160a2:	4a0a      	ldr	r2, [pc, #40]	@ (80160cc <prvCheckTasksWaitingTermination+0x58>)
 80160a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80160a6:	f000 fe09 	bl	8016cbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80160aa:	6878      	ldr	r0, [r7, #4]
 80160ac:	f000 f810 	bl	80160d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80160b0:	4b06      	ldr	r3, [pc, #24]	@ (80160cc <prvCheckTasksWaitingTermination+0x58>)
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d1e1      	bne.n	801607c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80160b8:	bf00      	nop
 80160ba:	bf00      	nop
 80160bc:	3708      	adds	r7, #8
 80160be:	46bd      	mov	sp, r7
 80160c0:	bd80      	pop	{r7, pc}
 80160c2:	bf00      	nop
 80160c4:	240024f0 	.word	0x240024f0
 80160c8:	2400251c 	.word	0x2400251c
 80160cc:	24002504 	.word	0x24002504

080160d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b084      	sub	sp, #16
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	3358      	adds	r3, #88	@ 0x58
 80160dc:	4618      	mov	r0, r3
 80160de:	f002 f81d 	bl	801811c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d108      	bne.n	80160fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80160f0:	4618      	mov	r0, r3
 80160f2:	f000 ffa1 	bl	8017038 <vPortFree>
				vPortFree( pxTCB );
 80160f6:	6878      	ldr	r0, [r7, #4]
 80160f8:	f000 ff9e 	bl	8017038 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80160fc:	e019      	b.n	8016132 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8016104:	2b01      	cmp	r3, #1
 8016106:	d103      	bne.n	8016110 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8016108:	6878      	ldr	r0, [r7, #4]
 801610a:	f000 ff95 	bl	8017038 <vPortFree>
	}
 801610e:	e010      	b.n	8016132 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8016116:	2b02      	cmp	r3, #2
 8016118:	d00b      	beq.n	8016132 <prvDeleteTCB+0x62>
	__asm volatile
 801611a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801611e:	f383 8811 	msr	BASEPRI, r3
 8016122:	f3bf 8f6f 	isb	sy
 8016126:	f3bf 8f4f 	dsb	sy
 801612a:	60fb      	str	r3, [r7, #12]
}
 801612c:	bf00      	nop
 801612e:	bf00      	nop
 8016130:	e7fd      	b.n	801612e <prvDeleteTCB+0x5e>
	}
 8016132:	bf00      	nop
 8016134:	3710      	adds	r7, #16
 8016136:	46bd      	mov	sp, r7
 8016138:	bd80      	pop	{r7, pc}
	...

0801613c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801613c:	b480      	push	{r7}
 801613e:	b083      	sub	sp, #12
 8016140:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016142:	4b0c      	ldr	r3, [pc, #48]	@ (8016174 <prvResetNextTaskUnblockTime+0x38>)
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d104      	bne.n	8016156 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801614c:	4b0a      	ldr	r3, [pc, #40]	@ (8016178 <prvResetNextTaskUnblockTime+0x3c>)
 801614e:	f04f 32ff 	mov.w	r2, #4294967295
 8016152:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016154:	e008      	b.n	8016168 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016156:	4b07      	ldr	r3, [pc, #28]	@ (8016174 <prvResetNextTaskUnblockTime+0x38>)
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	68db      	ldr	r3, [r3, #12]
 801615c:	68db      	ldr	r3, [r3, #12]
 801615e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	685b      	ldr	r3, [r3, #4]
 8016164:	4a04      	ldr	r2, [pc, #16]	@ (8016178 <prvResetNextTaskUnblockTime+0x3c>)
 8016166:	6013      	str	r3, [r2, #0]
}
 8016168:	bf00      	nop
 801616a:	370c      	adds	r7, #12
 801616c:	46bd      	mov	sp, r7
 801616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016172:	4770      	bx	lr
 8016174:	240024d4 	.word	0x240024d4
 8016178:	2400253c 	.word	0x2400253c

0801617c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801617c:	b480      	push	{r7}
 801617e:	b083      	sub	sp, #12
 8016180:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016182:	4b0b      	ldr	r3, [pc, #44]	@ (80161b0 <xTaskGetSchedulerState+0x34>)
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d102      	bne.n	8016190 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801618a:	2301      	movs	r3, #1
 801618c:	607b      	str	r3, [r7, #4]
 801618e:	e008      	b.n	80161a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016190:	4b08      	ldr	r3, [pc, #32]	@ (80161b4 <xTaskGetSchedulerState+0x38>)
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d102      	bne.n	801619e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016198:	2302      	movs	r3, #2
 801619a:	607b      	str	r3, [r7, #4]
 801619c:	e001      	b.n	80161a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801619e:	2300      	movs	r3, #0
 80161a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80161a2:	687b      	ldr	r3, [r7, #4]
	}
 80161a4:	4618      	mov	r0, r3
 80161a6:	370c      	adds	r7, #12
 80161a8:	46bd      	mov	sp, r7
 80161aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ae:	4770      	bx	lr
 80161b0:	24002528 	.word	0x24002528
 80161b4:	24002544 	.word	0x24002544

080161b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b086      	sub	sp, #24
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80161c4:	2300      	movs	r3, #0
 80161c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d058      	beq.n	8016280 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80161ce:	4b2f      	ldr	r3, [pc, #188]	@ (801628c <xTaskPriorityDisinherit+0xd4>)
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	693a      	ldr	r2, [r7, #16]
 80161d4:	429a      	cmp	r2, r3
 80161d6:	d00b      	beq.n	80161f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80161d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161dc:	f383 8811 	msr	BASEPRI, r3
 80161e0:	f3bf 8f6f 	isb	sy
 80161e4:	f3bf 8f4f 	dsb	sy
 80161e8:	60fb      	str	r3, [r7, #12]
}
 80161ea:	bf00      	nop
 80161ec:	bf00      	nop
 80161ee:	e7fd      	b.n	80161ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80161f0:	693b      	ldr	r3, [r7, #16]
 80161f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d10b      	bne.n	8016210 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80161f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161fc:	f383 8811 	msr	BASEPRI, r3
 8016200:	f3bf 8f6f 	isb	sy
 8016204:	f3bf 8f4f 	dsb	sy
 8016208:	60bb      	str	r3, [r7, #8]
}
 801620a:	bf00      	nop
 801620c:	bf00      	nop
 801620e:	e7fd      	b.n	801620c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8016210:	693b      	ldr	r3, [r7, #16]
 8016212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016214:	1e5a      	subs	r2, r3, #1
 8016216:	693b      	ldr	r3, [r7, #16]
 8016218:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801621a:	693b      	ldr	r3, [r7, #16]
 801621c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801621e:	693b      	ldr	r3, [r7, #16]
 8016220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016222:	429a      	cmp	r2, r3
 8016224:	d02c      	beq.n	8016280 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016226:	693b      	ldr	r3, [r7, #16]
 8016228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801622a:	2b00      	cmp	r3, #0
 801622c:	d128      	bne.n	8016280 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801622e:	693b      	ldr	r3, [r7, #16]
 8016230:	3304      	adds	r3, #4
 8016232:	4618      	mov	r0, r3
 8016234:	f7fe fb4a 	bl	80148cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016238:	693b      	ldr	r3, [r7, #16]
 801623a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801623c:	693b      	ldr	r3, [r7, #16]
 801623e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016240:	693b      	ldr	r3, [r7, #16]
 8016242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016244:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8016248:	693b      	ldr	r3, [r7, #16]
 801624a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801624c:	693b      	ldr	r3, [r7, #16]
 801624e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016250:	4b0f      	ldr	r3, [pc, #60]	@ (8016290 <xTaskPriorityDisinherit+0xd8>)
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	429a      	cmp	r2, r3
 8016256:	d903      	bls.n	8016260 <xTaskPriorityDisinherit+0xa8>
 8016258:	693b      	ldr	r3, [r7, #16]
 801625a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801625c:	4a0c      	ldr	r2, [pc, #48]	@ (8016290 <xTaskPriorityDisinherit+0xd8>)
 801625e:	6013      	str	r3, [r2, #0]
 8016260:	693b      	ldr	r3, [r7, #16]
 8016262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016264:	4613      	mov	r3, r2
 8016266:	009b      	lsls	r3, r3, #2
 8016268:	4413      	add	r3, r2
 801626a:	009b      	lsls	r3, r3, #2
 801626c:	4a09      	ldr	r2, [pc, #36]	@ (8016294 <xTaskPriorityDisinherit+0xdc>)
 801626e:	441a      	add	r2, r3
 8016270:	693b      	ldr	r3, [r7, #16]
 8016272:	3304      	adds	r3, #4
 8016274:	4619      	mov	r1, r3
 8016276:	4610      	mov	r0, r2
 8016278:	f7fe facb 	bl	8014812 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801627c:	2301      	movs	r3, #1
 801627e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016280:	697b      	ldr	r3, [r7, #20]
	}
 8016282:	4618      	mov	r0, r3
 8016284:	3718      	adds	r7, #24
 8016286:	46bd      	mov	sp, r7
 8016288:	bd80      	pop	{r7, pc}
 801628a:	bf00      	nop
 801628c:	24002048 	.word	0x24002048
 8016290:	24002524 	.word	0x24002524
 8016294:	2400204c 	.word	0x2400204c

08016298 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b084      	sub	sp, #16
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
 80162a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80162a2:	4b21      	ldr	r3, [pc, #132]	@ (8016328 <prvAddCurrentTaskToDelayedList+0x90>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80162a8:	4b20      	ldr	r3, [pc, #128]	@ (801632c <prvAddCurrentTaskToDelayedList+0x94>)
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	3304      	adds	r3, #4
 80162ae:	4618      	mov	r0, r3
 80162b0:	f7fe fb0c 	bl	80148cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162ba:	d10a      	bne.n	80162d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d007      	beq.n	80162d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80162c2:	4b1a      	ldr	r3, [pc, #104]	@ (801632c <prvAddCurrentTaskToDelayedList+0x94>)
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	3304      	adds	r3, #4
 80162c8:	4619      	mov	r1, r3
 80162ca:	4819      	ldr	r0, [pc, #100]	@ (8016330 <prvAddCurrentTaskToDelayedList+0x98>)
 80162cc:	f7fe faa1 	bl	8014812 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80162d0:	e026      	b.n	8016320 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80162d2:	68fa      	ldr	r2, [r7, #12]
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	4413      	add	r3, r2
 80162d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80162da:	4b14      	ldr	r3, [pc, #80]	@ (801632c <prvAddCurrentTaskToDelayedList+0x94>)
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	68ba      	ldr	r2, [r7, #8]
 80162e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80162e2:	68ba      	ldr	r2, [r7, #8]
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	429a      	cmp	r2, r3
 80162e8:	d209      	bcs.n	80162fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80162ea:	4b12      	ldr	r3, [pc, #72]	@ (8016334 <prvAddCurrentTaskToDelayedList+0x9c>)
 80162ec:	681a      	ldr	r2, [r3, #0]
 80162ee:	4b0f      	ldr	r3, [pc, #60]	@ (801632c <prvAddCurrentTaskToDelayedList+0x94>)
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	3304      	adds	r3, #4
 80162f4:	4619      	mov	r1, r3
 80162f6:	4610      	mov	r0, r2
 80162f8:	f7fe faaf 	bl	801485a <vListInsert>
}
 80162fc:	e010      	b.n	8016320 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80162fe:	4b0e      	ldr	r3, [pc, #56]	@ (8016338 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016300:	681a      	ldr	r2, [r3, #0]
 8016302:	4b0a      	ldr	r3, [pc, #40]	@ (801632c <prvAddCurrentTaskToDelayedList+0x94>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	3304      	adds	r3, #4
 8016308:	4619      	mov	r1, r3
 801630a:	4610      	mov	r0, r2
 801630c:	f7fe faa5 	bl	801485a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016310:	4b0a      	ldr	r3, [pc, #40]	@ (801633c <prvAddCurrentTaskToDelayedList+0xa4>)
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	68ba      	ldr	r2, [r7, #8]
 8016316:	429a      	cmp	r2, r3
 8016318:	d202      	bcs.n	8016320 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801631a:	4a08      	ldr	r2, [pc, #32]	@ (801633c <prvAddCurrentTaskToDelayedList+0xa4>)
 801631c:	68bb      	ldr	r3, [r7, #8]
 801631e:	6013      	str	r3, [r2, #0]
}
 8016320:	bf00      	nop
 8016322:	3710      	adds	r7, #16
 8016324:	46bd      	mov	sp, r7
 8016326:	bd80      	pop	{r7, pc}
 8016328:	24002520 	.word	0x24002520
 801632c:	24002048 	.word	0x24002048
 8016330:	24002508 	.word	0x24002508
 8016334:	240024d8 	.word	0x240024d8
 8016338:	240024d4 	.word	0x240024d4
 801633c:	2400253c 	.word	0x2400253c

08016340 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b08a      	sub	sp, #40	@ 0x28
 8016344:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8016346:	2300      	movs	r3, #0
 8016348:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801634a:	f000 fb13 	bl	8016974 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801634e:	4b1d      	ldr	r3, [pc, #116]	@ (80163c4 <xTimerCreateTimerTask+0x84>)
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d021      	beq.n	801639a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016356:	2300      	movs	r3, #0
 8016358:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801635a:	2300      	movs	r3, #0
 801635c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801635e:	1d3a      	adds	r2, r7, #4
 8016360:	f107 0108 	add.w	r1, r7, #8
 8016364:	f107 030c 	add.w	r3, r7, #12
 8016368:	4618      	mov	r0, r3
 801636a:	f7fe fa0b 	bl	8014784 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801636e:	6879      	ldr	r1, [r7, #4]
 8016370:	68bb      	ldr	r3, [r7, #8]
 8016372:	68fa      	ldr	r2, [r7, #12]
 8016374:	9202      	str	r2, [sp, #8]
 8016376:	9301      	str	r3, [sp, #4]
 8016378:	2302      	movs	r3, #2
 801637a:	9300      	str	r3, [sp, #0]
 801637c:	2300      	movs	r3, #0
 801637e:	460a      	mov	r2, r1
 8016380:	4911      	ldr	r1, [pc, #68]	@ (80163c8 <xTimerCreateTimerTask+0x88>)
 8016382:	4812      	ldr	r0, [pc, #72]	@ (80163cc <xTimerCreateTimerTask+0x8c>)
 8016384:	f7ff f884 	bl	8015490 <xTaskCreateStatic>
 8016388:	4603      	mov	r3, r0
 801638a:	4a11      	ldr	r2, [pc, #68]	@ (80163d0 <xTimerCreateTimerTask+0x90>)
 801638c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801638e:	4b10      	ldr	r3, [pc, #64]	@ (80163d0 <xTimerCreateTimerTask+0x90>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d001      	beq.n	801639a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8016396:	2301      	movs	r3, #1
 8016398:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801639a:	697b      	ldr	r3, [r7, #20]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d10b      	bne.n	80163b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80163a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163a4:	f383 8811 	msr	BASEPRI, r3
 80163a8:	f3bf 8f6f 	isb	sy
 80163ac:	f3bf 8f4f 	dsb	sy
 80163b0:	613b      	str	r3, [r7, #16]
}
 80163b2:	bf00      	nop
 80163b4:	bf00      	nop
 80163b6:	e7fd      	b.n	80163b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80163b8:	697b      	ldr	r3, [r7, #20]
}
 80163ba:	4618      	mov	r0, r3
 80163bc:	3718      	adds	r7, #24
 80163be:	46bd      	mov	sp, r7
 80163c0:	bd80      	pop	{r7, pc}
 80163c2:	bf00      	nop
 80163c4:	24002580 	.word	0x24002580
 80163c8:	080195c4 	.word	0x080195c4
 80163cc:	0801650d 	.word	0x0801650d
 80163d0:	24002584 	.word	0x24002584

080163d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b08a      	sub	sp, #40	@ 0x28
 80163d8:	af00      	add	r7, sp, #0
 80163da:	60f8      	str	r0, [r7, #12]
 80163dc:	60b9      	str	r1, [r7, #8]
 80163de:	607a      	str	r2, [r7, #4]
 80163e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80163e2:	2300      	movs	r3, #0
 80163e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d10b      	bne.n	8016404 <xTimerGenericCommand+0x30>
	__asm volatile
 80163ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163f0:	f383 8811 	msr	BASEPRI, r3
 80163f4:	f3bf 8f6f 	isb	sy
 80163f8:	f3bf 8f4f 	dsb	sy
 80163fc:	623b      	str	r3, [r7, #32]
}
 80163fe:	bf00      	nop
 8016400:	bf00      	nop
 8016402:	e7fd      	b.n	8016400 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016404:	4b19      	ldr	r3, [pc, #100]	@ (801646c <xTimerGenericCommand+0x98>)
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d02a      	beq.n	8016462 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801640c:	68bb      	ldr	r3, [r7, #8]
 801640e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016418:	68bb      	ldr	r3, [r7, #8]
 801641a:	2b05      	cmp	r3, #5
 801641c:	dc18      	bgt.n	8016450 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801641e:	f7ff fead 	bl	801617c <xTaskGetSchedulerState>
 8016422:	4603      	mov	r3, r0
 8016424:	2b02      	cmp	r3, #2
 8016426:	d109      	bne.n	801643c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016428:	4b10      	ldr	r3, [pc, #64]	@ (801646c <xTimerGenericCommand+0x98>)
 801642a:	6818      	ldr	r0, [r3, #0]
 801642c:	f107 0110 	add.w	r1, r7, #16
 8016430:	2300      	movs	r3, #0
 8016432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016434:	f7fe fbba 	bl	8014bac <xQueueGenericSend>
 8016438:	6278      	str	r0, [r7, #36]	@ 0x24
 801643a:	e012      	b.n	8016462 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801643c:	4b0b      	ldr	r3, [pc, #44]	@ (801646c <xTimerGenericCommand+0x98>)
 801643e:	6818      	ldr	r0, [r3, #0]
 8016440:	f107 0110 	add.w	r1, r7, #16
 8016444:	2300      	movs	r3, #0
 8016446:	2200      	movs	r2, #0
 8016448:	f7fe fbb0 	bl	8014bac <xQueueGenericSend>
 801644c:	6278      	str	r0, [r7, #36]	@ 0x24
 801644e:	e008      	b.n	8016462 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016450:	4b06      	ldr	r3, [pc, #24]	@ (801646c <xTimerGenericCommand+0x98>)
 8016452:	6818      	ldr	r0, [r3, #0]
 8016454:	f107 0110 	add.w	r1, r7, #16
 8016458:	2300      	movs	r3, #0
 801645a:	683a      	ldr	r2, [r7, #0]
 801645c:	f7fe fca8 	bl	8014db0 <xQueueGenericSendFromISR>
 8016460:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016464:	4618      	mov	r0, r3
 8016466:	3728      	adds	r7, #40	@ 0x28
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}
 801646c:	24002580 	.word	0x24002580

08016470 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b088      	sub	sp, #32
 8016474:	af02      	add	r7, sp, #8
 8016476:	6078      	str	r0, [r7, #4]
 8016478:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801647a:	4b23      	ldr	r3, [pc, #140]	@ (8016508 <prvProcessExpiredTimer+0x98>)
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	68db      	ldr	r3, [r3, #12]
 8016480:	68db      	ldr	r3, [r3, #12]
 8016482:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016484:	697b      	ldr	r3, [r7, #20]
 8016486:	3304      	adds	r3, #4
 8016488:	4618      	mov	r0, r3
 801648a:	f7fe fa1f 	bl	80148cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801648e:	697b      	ldr	r3, [r7, #20]
 8016490:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016494:	f003 0304 	and.w	r3, r3, #4
 8016498:	2b00      	cmp	r3, #0
 801649a:	d023      	beq.n	80164e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801649c:	697b      	ldr	r3, [r7, #20]
 801649e:	699a      	ldr	r2, [r3, #24]
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	18d1      	adds	r1, r2, r3
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	683a      	ldr	r2, [r7, #0]
 80164a8:	6978      	ldr	r0, [r7, #20]
 80164aa:	f000 f8d5 	bl	8016658 <prvInsertTimerInActiveList>
 80164ae:	4603      	mov	r3, r0
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d020      	beq.n	80164f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80164b4:	2300      	movs	r3, #0
 80164b6:	9300      	str	r3, [sp, #0]
 80164b8:	2300      	movs	r3, #0
 80164ba:	687a      	ldr	r2, [r7, #4]
 80164bc:	2100      	movs	r1, #0
 80164be:	6978      	ldr	r0, [r7, #20]
 80164c0:	f7ff ff88 	bl	80163d4 <xTimerGenericCommand>
 80164c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d114      	bne.n	80164f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80164cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80164d0:	f383 8811 	msr	BASEPRI, r3
 80164d4:	f3bf 8f6f 	isb	sy
 80164d8:	f3bf 8f4f 	dsb	sy
 80164dc:	60fb      	str	r3, [r7, #12]
}
 80164de:	bf00      	nop
 80164e0:	bf00      	nop
 80164e2:	e7fd      	b.n	80164e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80164e4:	697b      	ldr	r3, [r7, #20]
 80164e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80164ea:	f023 0301 	bic.w	r3, r3, #1
 80164ee:	b2da      	uxtb	r2, r3
 80164f0:	697b      	ldr	r3, [r7, #20]
 80164f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80164f6:	697b      	ldr	r3, [r7, #20]
 80164f8:	6a1b      	ldr	r3, [r3, #32]
 80164fa:	6978      	ldr	r0, [r7, #20]
 80164fc:	4798      	blx	r3
}
 80164fe:	bf00      	nop
 8016500:	3718      	adds	r7, #24
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	24002578 	.word	0x24002578

0801650c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b084      	sub	sp, #16
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016514:	f107 0308 	add.w	r3, r7, #8
 8016518:	4618      	mov	r0, r3
 801651a:	f000 f859 	bl	80165d0 <prvGetNextExpireTime>
 801651e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016520:	68bb      	ldr	r3, [r7, #8]
 8016522:	4619      	mov	r1, r3
 8016524:	68f8      	ldr	r0, [r7, #12]
 8016526:	f000 f805 	bl	8016534 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801652a:	f000 f8d7 	bl	80166dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801652e:	bf00      	nop
 8016530:	e7f0      	b.n	8016514 <prvTimerTask+0x8>
	...

08016534 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016534:	b580      	push	{r7, lr}
 8016536:	b084      	sub	sp, #16
 8016538:	af00      	add	r7, sp, #0
 801653a:	6078      	str	r0, [r7, #4]
 801653c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801653e:	f7ff fa0f 	bl	8015960 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016542:	f107 0308 	add.w	r3, r7, #8
 8016546:	4618      	mov	r0, r3
 8016548:	f000 f866 	bl	8016618 <prvSampleTimeNow>
 801654c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801654e:	68bb      	ldr	r3, [r7, #8]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d130      	bne.n	80165b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016554:	683b      	ldr	r3, [r7, #0]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d10a      	bne.n	8016570 <prvProcessTimerOrBlockTask+0x3c>
 801655a:	687a      	ldr	r2, [r7, #4]
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	429a      	cmp	r2, r3
 8016560:	d806      	bhi.n	8016570 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8016562:	f7ff fa0b 	bl	801597c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8016566:	68f9      	ldr	r1, [r7, #12]
 8016568:	6878      	ldr	r0, [r7, #4]
 801656a:	f7ff ff81 	bl	8016470 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801656e:	e024      	b.n	80165ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8016570:	683b      	ldr	r3, [r7, #0]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d008      	beq.n	8016588 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8016576:	4b13      	ldr	r3, [pc, #76]	@ (80165c4 <prvProcessTimerOrBlockTask+0x90>)
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d101      	bne.n	8016584 <prvProcessTimerOrBlockTask+0x50>
 8016580:	2301      	movs	r3, #1
 8016582:	e000      	b.n	8016586 <prvProcessTimerOrBlockTask+0x52>
 8016584:	2300      	movs	r3, #0
 8016586:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016588:	4b0f      	ldr	r3, [pc, #60]	@ (80165c8 <prvProcessTimerOrBlockTask+0x94>)
 801658a:	6818      	ldr	r0, [r3, #0]
 801658c:	687a      	ldr	r2, [r7, #4]
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	1ad3      	subs	r3, r2, r3
 8016592:	683a      	ldr	r2, [r7, #0]
 8016594:	4619      	mov	r1, r3
 8016596:	f7fe ff47 	bl	8015428 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801659a:	f7ff f9ef 	bl	801597c <xTaskResumeAll>
 801659e:	4603      	mov	r3, r0
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d10a      	bne.n	80165ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80165a4:	4b09      	ldr	r3, [pc, #36]	@ (80165cc <prvProcessTimerOrBlockTask+0x98>)
 80165a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80165aa:	601a      	str	r2, [r3, #0]
 80165ac:	f3bf 8f4f 	dsb	sy
 80165b0:	f3bf 8f6f 	isb	sy
}
 80165b4:	e001      	b.n	80165ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80165b6:	f7ff f9e1 	bl	801597c <xTaskResumeAll>
}
 80165ba:	bf00      	nop
 80165bc:	3710      	adds	r7, #16
 80165be:	46bd      	mov	sp, r7
 80165c0:	bd80      	pop	{r7, pc}
 80165c2:	bf00      	nop
 80165c4:	2400257c 	.word	0x2400257c
 80165c8:	24002580 	.word	0x24002580
 80165cc:	e000ed04 	.word	0xe000ed04

080165d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80165d0:	b480      	push	{r7}
 80165d2:	b085      	sub	sp, #20
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80165d8:	4b0e      	ldr	r3, [pc, #56]	@ (8016614 <prvGetNextExpireTime+0x44>)
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d101      	bne.n	80165e6 <prvGetNextExpireTime+0x16>
 80165e2:	2201      	movs	r2, #1
 80165e4:	e000      	b.n	80165e8 <prvGetNextExpireTime+0x18>
 80165e6:	2200      	movs	r2, #0
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d105      	bne.n	8016600 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80165f4:	4b07      	ldr	r3, [pc, #28]	@ (8016614 <prvGetNextExpireTime+0x44>)
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	68db      	ldr	r3, [r3, #12]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	60fb      	str	r3, [r7, #12]
 80165fe:	e001      	b.n	8016604 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016600:	2300      	movs	r3, #0
 8016602:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016604:	68fb      	ldr	r3, [r7, #12]
}
 8016606:	4618      	mov	r0, r3
 8016608:	3714      	adds	r7, #20
 801660a:	46bd      	mov	sp, r7
 801660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016610:	4770      	bx	lr
 8016612:	bf00      	nop
 8016614:	24002578 	.word	0x24002578

08016618 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b084      	sub	sp, #16
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016620:	f7ff fa4a 	bl	8015ab8 <xTaskGetTickCount>
 8016624:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8016626:	4b0b      	ldr	r3, [pc, #44]	@ (8016654 <prvSampleTimeNow+0x3c>)
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	68fa      	ldr	r2, [r7, #12]
 801662c:	429a      	cmp	r2, r3
 801662e:	d205      	bcs.n	801663c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016630:	f000 f93a 	bl	80168a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	2201      	movs	r2, #1
 8016638:	601a      	str	r2, [r3, #0]
 801663a:	e002      	b.n	8016642 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	2200      	movs	r2, #0
 8016640:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8016642:	4a04      	ldr	r2, [pc, #16]	@ (8016654 <prvSampleTimeNow+0x3c>)
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016648:	68fb      	ldr	r3, [r7, #12]
}
 801664a:	4618      	mov	r0, r3
 801664c:	3710      	adds	r7, #16
 801664e:	46bd      	mov	sp, r7
 8016650:	bd80      	pop	{r7, pc}
 8016652:	bf00      	nop
 8016654:	24002588 	.word	0x24002588

08016658 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b086      	sub	sp, #24
 801665c:	af00      	add	r7, sp, #0
 801665e:	60f8      	str	r0, [r7, #12]
 8016660:	60b9      	str	r1, [r7, #8]
 8016662:	607a      	str	r2, [r7, #4]
 8016664:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8016666:	2300      	movs	r3, #0
 8016668:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	68ba      	ldr	r2, [r7, #8]
 801666e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	68fa      	ldr	r2, [r7, #12]
 8016674:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8016676:	68ba      	ldr	r2, [r7, #8]
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	429a      	cmp	r2, r3
 801667c:	d812      	bhi.n	80166a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801667e:	687a      	ldr	r2, [r7, #4]
 8016680:	683b      	ldr	r3, [r7, #0]
 8016682:	1ad2      	subs	r2, r2, r3
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	699b      	ldr	r3, [r3, #24]
 8016688:	429a      	cmp	r2, r3
 801668a:	d302      	bcc.n	8016692 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801668c:	2301      	movs	r3, #1
 801668e:	617b      	str	r3, [r7, #20]
 8016690:	e01b      	b.n	80166ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016692:	4b10      	ldr	r3, [pc, #64]	@ (80166d4 <prvInsertTimerInActiveList+0x7c>)
 8016694:	681a      	ldr	r2, [r3, #0]
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	3304      	adds	r3, #4
 801669a:	4619      	mov	r1, r3
 801669c:	4610      	mov	r0, r2
 801669e:	f7fe f8dc 	bl	801485a <vListInsert>
 80166a2:	e012      	b.n	80166ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80166a4:	687a      	ldr	r2, [r7, #4]
 80166a6:	683b      	ldr	r3, [r7, #0]
 80166a8:	429a      	cmp	r2, r3
 80166aa:	d206      	bcs.n	80166ba <prvInsertTimerInActiveList+0x62>
 80166ac:	68ba      	ldr	r2, [r7, #8]
 80166ae:	683b      	ldr	r3, [r7, #0]
 80166b0:	429a      	cmp	r2, r3
 80166b2:	d302      	bcc.n	80166ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80166b4:	2301      	movs	r3, #1
 80166b6:	617b      	str	r3, [r7, #20]
 80166b8:	e007      	b.n	80166ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80166ba:	4b07      	ldr	r3, [pc, #28]	@ (80166d8 <prvInsertTimerInActiveList+0x80>)
 80166bc:	681a      	ldr	r2, [r3, #0]
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	3304      	adds	r3, #4
 80166c2:	4619      	mov	r1, r3
 80166c4:	4610      	mov	r0, r2
 80166c6:	f7fe f8c8 	bl	801485a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80166ca:	697b      	ldr	r3, [r7, #20]
}
 80166cc:	4618      	mov	r0, r3
 80166ce:	3718      	adds	r7, #24
 80166d0:	46bd      	mov	sp, r7
 80166d2:	bd80      	pop	{r7, pc}
 80166d4:	2400257c 	.word	0x2400257c
 80166d8:	24002578 	.word	0x24002578

080166dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b08e      	sub	sp, #56	@ 0x38
 80166e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80166e2:	e0ce      	b.n	8016882 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	da19      	bge.n	801671e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80166ea:	1d3b      	adds	r3, r7, #4
 80166ec:	3304      	adds	r3, #4
 80166ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80166f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d10b      	bne.n	801670e <prvProcessReceivedCommands+0x32>
	__asm volatile
 80166f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166fa:	f383 8811 	msr	BASEPRI, r3
 80166fe:	f3bf 8f6f 	isb	sy
 8016702:	f3bf 8f4f 	dsb	sy
 8016706:	61fb      	str	r3, [r7, #28]
}
 8016708:	bf00      	nop
 801670a:	bf00      	nop
 801670c:	e7fd      	b.n	801670a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801670e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016714:	6850      	ldr	r0, [r2, #4]
 8016716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016718:	6892      	ldr	r2, [r2, #8]
 801671a:	4611      	mov	r1, r2
 801671c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	2b00      	cmp	r3, #0
 8016722:	f2c0 80ae 	blt.w	8016882 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801672a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801672c:	695b      	ldr	r3, [r3, #20]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d004      	beq.n	801673c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016734:	3304      	adds	r3, #4
 8016736:	4618      	mov	r0, r3
 8016738:	f7fe f8c8 	bl	80148cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801673c:	463b      	mov	r3, r7
 801673e:	4618      	mov	r0, r3
 8016740:	f7ff ff6a 	bl	8016618 <prvSampleTimeNow>
 8016744:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	2b09      	cmp	r3, #9
 801674a:	f200 8097 	bhi.w	801687c <prvProcessReceivedCommands+0x1a0>
 801674e:	a201      	add	r2, pc, #4	@ (adr r2, 8016754 <prvProcessReceivedCommands+0x78>)
 8016750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016754:	0801677d 	.word	0x0801677d
 8016758:	0801677d 	.word	0x0801677d
 801675c:	0801677d 	.word	0x0801677d
 8016760:	080167f3 	.word	0x080167f3
 8016764:	08016807 	.word	0x08016807
 8016768:	08016853 	.word	0x08016853
 801676c:	0801677d 	.word	0x0801677d
 8016770:	0801677d 	.word	0x0801677d
 8016774:	080167f3 	.word	0x080167f3
 8016778:	08016807 	.word	0x08016807
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801677c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801677e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016782:	f043 0301 	orr.w	r3, r3, #1
 8016786:	b2da      	uxtb	r2, r3
 8016788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801678a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801678e:	68ba      	ldr	r2, [r7, #8]
 8016790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016792:	699b      	ldr	r3, [r3, #24]
 8016794:	18d1      	adds	r1, r2, r3
 8016796:	68bb      	ldr	r3, [r7, #8]
 8016798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801679a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801679c:	f7ff ff5c 	bl	8016658 <prvInsertTimerInActiveList>
 80167a0:	4603      	mov	r3, r0
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d06c      	beq.n	8016880 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80167a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167a8:	6a1b      	ldr	r3, [r3, #32]
 80167aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80167ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80167ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80167b4:	f003 0304 	and.w	r3, r3, #4
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d061      	beq.n	8016880 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80167bc:	68ba      	ldr	r2, [r7, #8]
 80167be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167c0:	699b      	ldr	r3, [r3, #24]
 80167c2:	441a      	add	r2, r3
 80167c4:	2300      	movs	r3, #0
 80167c6:	9300      	str	r3, [sp, #0]
 80167c8:	2300      	movs	r3, #0
 80167ca:	2100      	movs	r1, #0
 80167cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80167ce:	f7ff fe01 	bl	80163d4 <xTimerGenericCommand>
 80167d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80167d4:	6a3b      	ldr	r3, [r7, #32]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d152      	bne.n	8016880 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80167da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167de:	f383 8811 	msr	BASEPRI, r3
 80167e2:	f3bf 8f6f 	isb	sy
 80167e6:	f3bf 8f4f 	dsb	sy
 80167ea:	61bb      	str	r3, [r7, #24]
}
 80167ec:	bf00      	nop
 80167ee:	bf00      	nop
 80167f0:	e7fd      	b.n	80167ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80167f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80167f8:	f023 0301 	bic.w	r3, r3, #1
 80167fc:	b2da      	uxtb	r2, r3
 80167fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016800:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8016804:	e03d      	b.n	8016882 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016808:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801680c:	f043 0301 	orr.w	r3, r3, #1
 8016810:	b2da      	uxtb	r2, r3
 8016812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016814:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016818:	68ba      	ldr	r2, [r7, #8]
 801681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801681c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801681e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016820:	699b      	ldr	r3, [r3, #24]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d10b      	bne.n	801683e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8016826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801682a:	f383 8811 	msr	BASEPRI, r3
 801682e:	f3bf 8f6f 	isb	sy
 8016832:	f3bf 8f4f 	dsb	sy
 8016836:	617b      	str	r3, [r7, #20]
}
 8016838:	bf00      	nop
 801683a:	bf00      	nop
 801683c:	e7fd      	b.n	801683a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801683e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016840:	699a      	ldr	r2, [r3, #24]
 8016842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016844:	18d1      	adds	r1, r2, r3
 8016846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801684a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801684c:	f7ff ff04 	bl	8016658 <prvInsertTimerInActiveList>
					break;
 8016850:	e017      	b.n	8016882 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8016852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016854:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016858:	f003 0302 	and.w	r3, r3, #2
 801685c:	2b00      	cmp	r3, #0
 801685e:	d103      	bne.n	8016868 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8016860:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016862:	f000 fbe9 	bl	8017038 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8016866:	e00c      	b.n	8016882 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801686a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801686e:	f023 0301 	bic.w	r3, r3, #1
 8016872:	b2da      	uxtb	r2, r3
 8016874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016876:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801687a:	e002      	b.n	8016882 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801687c:	bf00      	nop
 801687e:	e000      	b.n	8016882 <prvProcessReceivedCommands+0x1a6>
					break;
 8016880:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016882:	4b08      	ldr	r3, [pc, #32]	@ (80168a4 <prvProcessReceivedCommands+0x1c8>)
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	1d39      	adds	r1, r7, #4
 8016888:	2200      	movs	r2, #0
 801688a:	4618      	mov	r0, r3
 801688c:	f7fe fb2e 	bl	8014eec <xQueueReceive>
 8016890:	4603      	mov	r3, r0
 8016892:	2b00      	cmp	r3, #0
 8016894:	f47f af26 	bne.w	80166e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8016898:	bf00      	nop
 801689a:	bf00      	nop
 801689c:	3730      	adds	r7, #48	@ 0x30
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd80      	pop	{r7, pc}
 80168a2:	bf00      	nop
 80168a4:	24002580 	.word	0x24002580

080168a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b088      	sub	sp, #32
 80168ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80168ae:	e049      	b.n	8016944 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80168b0:	4b2e      	ldr	r3, [pc, #184]	@ (801696c <prvSwitchTimerLists+0xc4>)
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	68db      	ldr	r3, [r3, #12]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80168ba:	4b2c      	ldr	r3, [pc, #176]	@ (801696c <prvSwitchTimerLists+0xc4>)
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	68db      	ldr	r3, [r3, #12]
 80168c0:	68db      	ldr	r3, [r3, #12]
 80168c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	3304      	adds	r3, #4
 80168c8:	4618      	mov	r0, r3
 80168ca:	f7fd ffff 	bl	80148cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	6a1b      	ldr	r3, [r3, #32]
 80168d2:	68f8      	ldr	r0, [r7, #12]
 80168d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80168dc:	f003 0304 	and.w	r3, r3, #4
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d02f      	beq.n	8016944 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	699b      	ldr	r3, [r3, #24]
 80168e8:	693a      	ldr	r2, [r7, #16]
 80168ea:	4413      	add	r3, r2
 80168ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80168ee:	68ba      	ldr	r2, [r7, #8]
 80168f0:	693b      	ldr	r3, [r7, #16]
 80168f2:	429a      	cmp	r2, r3
 80168f4:	d90e      	bls.n	8016914 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	68ba      	ldr	r2, [r7, #8]
 80168fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	68fa      	ldr	r2, [r7, #12]
 8016900:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016902:	4b1a      	ldr	r3, [pc, #104]	@ (801696c <prvSwitchTimerLists+0xc4>)
 8016904:	681a      	ldr	r2, [r3, #0]
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	3304      	adds	r3, #4
 801690a:	4619      	mov	r1, r3
 801690c:	4610      	mov	r0, r2
 801690e:	f7fd ffa4 	bl	801485a <vListInsert>
 8016912:	e017      	b.n	8016944 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016914:	2300      	movs	r3, #0
 8016916:	9300      	str	r3, [sp, #0]
 8016918:	2300      	movs	r3, #0
 801691a:	693a      	ldr	r2, [r7, #16]
 801691c:	2100      	movs	r1, #0
 801691e:	68f8      	ldr	r0, [r7, #12]
 8016920:	f7ff fd58 	bl	80163d4 <xTimerGenericCommand>
 8016924:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d10b      	bne.n	8016944 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801692c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016930:	f383 8811 	msr	BASEPRI, r3
 8016934:	f3bf 8f6f 	isb	sy
 8016938:	f3bf 8f4f 	dsb	sy
 801693c:	603b      	str	r3, [r7, #0]
}
 801693e:	bf00      	nop
 8016940:	bf00      	nop
 8016942:	e7fd      	b.n	8016940 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016944:	4b09      	ldr	r3, [pc, #36]	@ (801696c <prvSwitchTimerLists+0xc4>)
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d1b0      	bne.n	80168b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801694e:	4b07      	ldr	r3, [pc, #28]	@ (801696c <prvSwitchTimerLists+0xc4>)
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016954:	4b06      	ldr	r3, [pc, #24]	@ (8016970 <prvSwitchTimerLists+0xc8>)
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	4a04      	ldr	r2, [pc, #16]	@ (801696c <prvSwitchTimerLists+0xc4>)
 801695a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801695c:	4a04      	ldr	r2, [pc, #16]	@ (8016970 <prvSwitchTimerLists+0xc8>)
 801695e:	697b      	ldr	r3, [r7, #20]
 8016960:	6013      	str	r3, [r2, #0]
}
 8016962:	bf00      	nop
 8016964:	3718      	adds	r7, #24
 8016966:	46bd      	mov	sp, r7
 8016968:	bd80      	pop	{r7, pc}
 801696a:	bf00      	nop
 801696c:	24002578 	.word	0x24002578
 8016970:	2400257c 	.word	0x2400257c

08016974 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016974:	b580      	push	{r7, lr}
 8016976:	b082      	sub	sp, #8
 8016978:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801697a:	f000 f96d 	bl	8016c58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801697e:	4b15      	ldr	r3, [pc, #84]	@ (80169d4 <prvCheckForValidListAndQueue+0x60>)
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d120      	bne.n	80169c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8016986:	4814      	ldr	r0, [pc, #80]	@ (80169d8 <prvCheckForValidListAndQueue+0x64>)
 8016988:	f7fd ff16 	bl	80147b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801698c:	4813      	ldr	r0, [pc, #76]	@ (80169dc <prvCheckForValidListAndQueue+0x68>)
 801698e:	f7fd ff13 	bl	80147b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8016992:	4b13      	ldr	r3, [pc, #76]	@ (80169e0 <prvCheckForValidListAndQueue+0x6c>)
 8016994:	4a10      	ldr	r2, [pc, #64]	@ (80169d8 <prvCheckForValidListAndQueue+0x64>)
 8016996:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016998:	4b12      	ldr	r3, [pc, #72]	@ (80169e4 <prvCheckForValidListAndQueue+0x70>)
 801699a:	4a10      	ldr	r2, [pc, #64]	@ (80169dc <prvCheckForValidListAndQueue+0x68>)
 801699c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801699e:	2300      	movs	r3, #0
 80169a0:	9300      	str	r3, [sp, #0]
 80169a2:	4b11      	ldr	r3, [pc, #68]	@ (80169e8 <prvCheckForValidListAndQueue+0x74>)
 80169a4:	4a11      	ldr	r2, [pc, #68]	@ (80169ec <prvCheckForValidListAndQueue+0x78>)
 80169a6:	2110      	movs	r1, #16
 80169a8:	200a      	movs	r0, #10
 80169aa:	f7fe f823 	bl	80149f4 <xQueueGenericCreateStatic>
 80169ae:	4603      	mov	r3, r0
 80169b0:	4a08      	ldr	r2, [pc, #32]	@ (80169d4 <prvCheckForValidListAndQueue+0x60>)
 80169b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80169b4:	4b07      	ldr	r3, [pc, #28]	@ (80169d4 <prvCheckForValidListAndQueue+0x60>)
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d005      	beq.n	80169c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80169bc:	4b05      	ldr	r3, [pc, #20]	@ (80169d4 <prvCheckForValidListAndQueue+0x60>)
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	490b      	ldr	r1, [pc, #44]	@ (80169f0 <prvCheckForValidListAndQueue+0x7c>)
 80169c2:	4618      	mov	r0, r3
 80169c4:	f7fe fd06 	bl	80153d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80169c8:	f000 f978 	bl	8016cbc <vPortExitCritical>
}
 80169cc:	bf00      	nop
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}
 80169d2:	bf00      	nop
 80169d4:	24002580 	.word	0x24002580
 80169d8:	24002550 	.word	0x24002550
 80169dc:	24002564 	.word	0x24002564
 80169e0:	24002578 	.word	0x24002578
 80169e4:	2400257c 	.word	0x2400257c
 80169e8:	2400262c 	.word	0x2400262c
 80169ec:	2400258c 	.word	0x2400258c
 80169f0:	080195cc 	.word	0x080195cc

080169f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80169f4:	b480      	push	{r7}
 80169f6:	b085      	sub	sp, #20
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	60f8      	str	r0, [r7, #12]
 80169fc:	60b9      	str	r1, [r7, #8]
 80169fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	3b04      	subs	r3, #4
 8016a04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016a0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	3b04      	subs	r3, #4
 8016a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016a14:	68bb      	ldr	r3, [r7, #8]
 8016a16:	f023 0201 	bic.w	r2, r3, #1
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	3b04      	subs	r3, #4
 8016a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016a24:	4a0c      	ldr	r2, [pc, #48]	@ (8016a58 <pxPortInitialiseStack+0x64>)
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	3b14      	subs	r3, #20
 8016a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016a30:	687a      	ldr	r2, [r7, #4]
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	3b04      	subs	r3, #4
 8016a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	f06f 0202 	mvn.w	r2, #2
 8016a42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	3b20      	subs	r3, #32
 8016a48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016a4a:	68fb      	ldr	r3, [r7, #12]
}
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	3714      	adds	r7, #20
 8016a50:	46bd      	mov	sp, r7
 8016a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a56:	4770      	bx	lr
 8016a58:	08016a5d 	.word	0x08016a5d

08016a5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016a5c:	b480      	push	{r7}
 8016a5e:	b085      	sub	sp, #20
 8016a60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016a62:	2300      	movs	r3, #0
 8016a64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016a66:	4b13      	ldr	r3, [pc, #76]	@ (8016ab4 <prvTaskExitError+0x58>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a6e:	d00b      	beq.n	8016a88 <prvTaskExitError+0x2c>
	__asm volatile
 8016a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a74:	f383 8811 	msr	BASEPRI, r3
 8016a78:	f3bf 8f6f 	isb	sy
 8016a7c:	f3bf 8f4f 	dsb	sy
 8016a80:	60fb      	str	r3, [r7, #12]
}
 8016a82:	bf00      	nop
 8016a84:	bf00      	nop
 8016a86:	e7fd      	b.n	8016a84 <prvTaskExitError+0x28>
	__asm volatile
 8016a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a8c:	f383 8811 	msr	BASEPRI, r3
 8016a90:	f3bf 8f6f 	isb	sy
 8016a94:	f3bf 8f4f 	dsb	sy
 8016a98:	60bb      	str	r3, [r7, #8]
}
 8016a9a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016a9c:	bf00      	nop
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d0fc      	beq.n	8016a9e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016aa4:	bf00      	nop
 8016aa6:	bf00      	nop
 8016aa8:	3714      	adds	r7, #20
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab0:	4770      	bx	lr
 8016ab2:	bf00      	nop
 8016ab4:	24000150 	.word	0x24000150
	...

08016ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016ac0:	4b07      	ldr	r3, [pc, #28]	@ (8016ae0 <pxCurrentTCBConst2>)
 8016ac2:	6819      	ldr	r1, [r3, #0]
 8016ac4:	6808      	ldr	r0, [r1, #0]
 8016ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aca:	f380 8809 	msr	PSP, r0
 8016ace:	f3bf 8f6f 	isb	sy
 8016ad2:	f04f 0000 	mov.w	r0, #0
 8016ad6:	f380 8811 	msr	BASEPRI, r0
 8016ada:	4770      	bx	lr
 8016adc:	f3af 8000 	nop.w

08016ae0 <pxCurrentTCBConst2>:
 8016ae0:	24002048 	.word	0x24002048
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016ae4:	bf00      	nop
 8016ae6:	bf00      	nop

08016ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016ae8:	4808      	ldr	r0, [pc, #32]	@ (8016b0c <prvPortStartFirstTask+0x24>)
 8016aea:	6800      	ldr	r0, [r0, #0]
 8016aec:	6800      	ldr	r0, [r0, #0]
 8016aee:	f380 8808 	msr	MSP, r0
 8016af2:	f04f 0000 	mov.w	r0, #0
 8016af6:	f380 8814 	msr	CONTROL, r0
 8016afa:	b662      	cpsie	i
 8016afc:	b661      	cpsie	f
 8016afe:	f3bf 8f4f 	dsb	sy
 8016b02:	f3bf 8f6f 	isb	sy
 8016b06:	df00      	svc	0
 8016b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016b0a:	bf00      	nop
 8016b0c:	e000ed08 	.word	0xe000ed08

08016b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b086      	sub	sp, #24
 8016b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016b16:	4b47      	ldr	r3, [pc, #284]	@ (8016c34 <xPortStartScheduler+0x124>)
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	4a47      	ldr	r2, [pc, #284]	@ (8016c38 <xPortStartScheduler+0x128>)
 8016b1c:	4293      	cmp	r3, r2
 8016b1e:	d10b      	bne.n	8016b38 <xPortStartScheduler+0x28>
	__asm volatile
 8016b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b24:	f383 8811 	msr	BASEPRI, r3
 8016b28:	f3bf 8f6f 	isb	sy
 8016b2c:	f3bf 8f4f 	dsb	sy
 8016b30:	613b      	str	r3, [r7, #16]
}
 8016b32:	bf00      	nop
 8016b34:	bf00      	nop
 8016b36:	e7fd      	b.n	8016b34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016b38:	4b3e      	ldr	r3, [pc, #248]	@ (8016c34 <xPortStartScheduler+0x124>)
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	4a3f      	ldr	r2, [pc, #252]	@ (8016c3c <xPortStartScheduler+0x12c>)
 8016b3e:	4293      	cmp	r3, r2
 8016b40:	d10b      	bne.n	8016b5a <xPortStartScheduler+0x4a>
	__asm volatile
 8016b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b46:	f383 8811 	msr	BASEPRI, r3
 8016b4a:	f3bf 8f6f 	isb	sy
 8016b4e:	f3bf 8f4f 	dsb	sy
 8016b52:	60fb      	str	r3, [r7, #12]
}
 8016b54:	bf00      	nop
 8016b56:	bf00      	nop
 8016b58:	e7fd      	b.n	8016b56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016b5a:	4b39      	ldr	r3, [pc, #228]	@ (8016c40 <xPortStartScheduler+0x130>)
 8016b5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016b5e:	697b      	ldr	r3, [r7, #20]
 8016b60:	781b      	ldrb	r3, [r3, #0]
 8016b62:	b2db      	uxtb	r3, r3
 8016b64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016b66:	697b      	ldr	r3, [r7, #20]
 8016b68:	22ff      	movs	r2, #255	@ 0xff
 8016b6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016b6c:	697b      	ldr	r3, [r7, #20]
 8016b6e:	781b      	ldrb	r3, [r3, #0]
 8016b70:	b2db      	uxtb	r3, r3
 8016b72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016b74:	78fb      	ldrb	r3, [r7, #3]
 8016b76:	b2db      	uxtb	r3, r3
 8016b78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8016b7c:	b2da      	uxtb	r2, r3
 8016b7e:	4b31      	ldr	r3, [pc, #196]	@ (8016c44 <xPortStartScheduler+0x134>)
 8016b80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016b82:	4b31      	ldr	r3, [pc, #196]	@ (8016c48 <xPortStartScheduler+0x138>)
 8016b84:	2207      	movs	r2, #7
 8016b86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016b88:	e009      	b.n	8016b9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8016b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8016c48 <xPortStartScheduler+0x138>)
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	3b01      	subs	r3, #1
 8016b90:	4a2d      	ldr	r2, [pc, #180]	@ (8016c48 <xPortStartScheduler+0x138>)
 8016b92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016b94:	78fb      	ldrb	r3, [r7, #3]
 8016b96:	b2db      	uxtb	r3, r3
 8016b98:	005b      	lsls	r3, r3, #1
 8016b9a:	b2db      	uxtb	r3, r3
 8016b9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016b9e:	78fb      	ldrb	r3, [r7, #3]
 8016ba0:	b2db      	uxtb	r3, r3
 8016ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016ba6:	2b80      	cmp	r3, #128	@ 0x80
 8016ba8:	d0ef      	beq.n	8016b8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016baa:	4b27      	ldr	r3, [pc, #156]	@ (8016c48 <xPortStartScheduler+0x138>)
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	f1c3 0307 	rsb	r3, r3, #7
 8016bb2:	2b04      	cmp	r3, #4
 8016bb4:	d00b      	beq.n	8016bce <xPortStartScheduler+0xbe>
	__asm volatile
 8016bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016bba:	f383 8811 	msr	BASEPRI, r3
 8016bbe:	f3bf 8f6f 	isb	sy
 8016bc2:	f3bf 8f4f 	dsb	sy
 8016bc6:	60bb      	str	r3, [r7, #8]
}
 8016bc8:	bf00      	nop
 8016bca:	bf00      	nop
 8016bcc:	e7fd      	b.n	8016bca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016bce:	4b1e      	ldr	r3, [pc, #120]	@ (8016c48 <xPortStartScheduler+0x138>)
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	021b      	lsls	r3, r3, #8
 8016bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8016c48 <xPortStartScheduler+0x138>)
 8016bd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8016c48 <xPortStartScheduler+0x138>)
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016be0:	4a19      	ldr	r2, [pc, #100]	@ (8016c48 <xPortStartScheduler+0x138>)
 8016be2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	b2da      	uxtb	r2, r3
 8016be8:	697b      	ldr	r3, [r7, #20]
 8016bea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016bec:	4b17      	ldr	r3, [pc, #92]	@ (8016c4c <xPortStartScheduler+0x13c>)
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	4a16      	ldr	r2, [pc, #88]	@ (8016c4c <xPortStartScheduler+0x13c>)
 8016bf2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016bf6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016bf8:	4b14      	ldr	r3, [pc, #80]	@ (8016c4c <xPortStartScheduler+0x13c>)
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	4a13      	ldr	r2, [pc, #76]	@ (8016c4c <xPortStartScheduler+0x13c>)
 8016bfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016c02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016c04:	f000 f8da 	bl	8016dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016c08:	4b11      	ldr	r3, [pc, #68]	@ (8016c50 <xPortStartScheduler+0x140>)
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016c0e:	f000 f8f9 	bl	8016e04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016c12:	4b10      	ldr	r3, [pc, #64]	@ (8016c54 <xPortStartScheduler+0x144>)
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	4a0f      	ldr	r2, [pc, #60]	@ (8016c54 <xPortStartScheduler+0x144>)
 8016c18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8016c1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016c1e:	f7ff ff63 	bl	8016ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016c22:	f7ff f813 	bl	8015c4c <vTaskSwitchContext>
	prvTaskExitError();
 8016c26:	f7ff ff19 	bl	8016a5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016c2a:	2300      	movs	r3, #0
}
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	3718      	adds	r7, #24
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}
 8016c34:	e000ed00 	.word	0xe000ed00
 8016c38:	410fc271 	.word	0x410fc271
 8016c3c:	410fc270 	.word	0x410fc270
 8016c40:	e000e400 	.word	0xe000e400
 8016c44:	2400267c 	.word	0x2400267c
 8016c48:	24002680 	.word	0x24002680
 8016c4c:	e000ed20 	.word	0xe000ed20
 8016c50:	24000150 	.word	0x24000150
 8016c54:	e000ef34 	.word	0xe000ef34

08016c58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016c58:	b480      	push	{r7}
 8016c5a:	b083      	sub	sp, #12
 8016c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8016c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c62:	f383 8811 	msr	BASEPRI, r3
 8016c66:	f3bf 8f6f 	isb	sy
 8016c6a:	f3bf 8f4f 	dsb	sy
 8016c6e:	607b      	str	r3, [r7, #4]
}
 8016c70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016c72:	4b10      	ldr	r3, [pc, #64]	@ (8016cb4 <vPortEnterCritical+0x5c>)
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	3301      	adds	r3, #1
 8016c78:	4a0e      	ldr	r2, [pc, #56]	@ (8016cb4 <vPortEnterCritical+0x5c>)
 8016c7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8016cb4 <vPortEnterCritical+0x5c>)
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	2b01      	cmp	r3, #1
 8016c82:	d110      	bne.n	8016ca6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016c84:	4b0c      	ldr	r3, [pc, #48]	@ (8016cb8 <vPortEnterCritical+0x60>)
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	b2db      	uxtb	r3, r3
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d00b      	beq.n	8016ca6 <vPortEnterCritical+0x4e>
	__asm volatile
 8016c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c92:	f383 8811 	msr	BASEPRI, r3
 8016c96:	f3bf 8f6f 	isb	sy
 8016c9a:	f3bf 8f4f 	dsb	sy
 8016c9e:	603b      	str	r3, [r7, #0]
}
 8016ca0:	bf00      	nop
 8016ca2:	bf00      	nop
 8016ca4:	e7fd      	b.n	8016ca2 <vPortEnterCritical+0x4a>
	}
}
 8016ca6:	bf00      	nop
 8016ca8:	370c      	adds	r7, #12
 8016caa:	46bd      	mov	sp, r7
 8016cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb0:	4770      	bx	lr
 8016cb2:	bf00      	nop
 8016cb4:	24000150 	.word	0x24000150
 8016cb8:	e000ed04 	.word	0xe000ed04

08016cbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016cbc:	b480      	push	{r7}
 8016cbe:	b083      	sub	sp, #12
 8016cc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016cc2:	4b12      	ldr	r3, [pc, #72]	@ (8016d0c <vPortExitCritical+0x50>)
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d10b      	bne.n	8016ce2 <vPortExitCritical+0x26>
	__asm volatile
 8016cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016cce:	f383 8811 	msr	BASEPRI, r3
 8016cd2:	f3bf 8f6f 	isb	sy
 8016cd6:	f3bf 8f4f 	dsb	sy
 8016cda:	607b      	str	r3, [r7, #4]
}
 8016cdc:	bf00      	nop
 8016cde:	bf00      	nop
 8016ce0:	e7fd      	b.n	8016cde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8016d0c <vPortExitCritical+0x50>)
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	3b01      	subs	r3, #1
 8016ce8:	4a08      	ldr	r2, [pc, #32]	@ (8016d0c <vPortExitCritical+0x50>)
 8016cea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016cec:	4b07      	ldr	r3, [pc, #28]	@ (8016d0c <vPortExitCritical+0x50>)
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d105      	bne.n	8016d00 <vPortExitCritical+0x44>
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016cf8:	683b      	ldr	r3, [r7, #0]
 8016cfa:	f383 8811 	msr	BASEPRI, r3
}
 8016cfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016d00:	bf00      	nop
 8016d02:	370c      	adds	r7, #12
 8016d04:	46bd      	mov	sp, r7
 8016d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0a:	4770      	bx	lr
 8016d0c:	24000150 	.word	0x24000150

08016d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016d10:	f3ef 8009 	mrs	r0, PSP
 8016d14:	f3bf 8f6f 	isb	sy
 8016d18:	4b15      	ldr	r3, [pc, #84]	@ (8016d70 <pxCurrentTCBConst>)
 8016d1a:	681a      	ldr	r2, [r3, #0]
 8016d1c:	f01e 0f10 	tst.w	lr, #16
 8016d20:	bf08      	it	eq
 8016d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d2a:	6010      	str	r0, [r2, #0]
 8016d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016d30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016d34:	f380 8811 	msr	BASEPRI, r0
 8016d38:	f3bf 8f4f 	dsb	sy
 8016d3c:	f3bf 8f6f 	isb	sy
 8016d40:	f7fe ff84 	bl	8015c4c <vTaskSwitchContext>
 8016d44:	f04f 0000 	mov.w	r0, #0
 8016d48:	f380 8811 	msr	BASEPRI, r0
 8016d4c:	bc09      	pop	{r0, r3}
 8016d4e:	6819      	ldr	r1, [r3, #0]
 8016d50:	6808      	ldr	r0, [r1, #0]
 8016d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d56:	f01e 0f10 	tst.w	lr, #16
 8016d5a:	bf08      	it	eq
 8016d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016d60:	f380 8809 	msr	PSP, r0
 8016d64:	f3bf 8f6f 	isb	sy
 8016d68:	4770      	bx	lr
 8016d6a:	bf00      	nop
 8016d6c:	f3af 8000 	nop.w

08016d70 <pxCurrentTCBConst>:
 8016d70:	24002048 	.word	0x24002048
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016d74:	bf00      	nop
 8016d76:	bf00      	nop

08016d78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b082      	sub	sp, #8
 8016d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8016d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d82:	f383 8811 	msr	BASEPRI, r3
 8016d86:	f3bf 8f6f 	isb	sy
 8016d8a:	f3bf 8f4f 	dsb	sy
 8016d8e:	607b      	str	r3, [r7, #4]
}
 8016d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016d92:	f7fe fea1 	bl	8015ad8 <xTaskIncrementTick>
 8016d96:	4603      	mov	r3, r0
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d003      	beq.n	8016da4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016d9c:	4b06      	ldr	r3, [pc, #24]	@ (8016db8 <xPortSysTickHandler+0x40>)
 8016d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016da2:	601a      	str	r2, [r3, #0]
 8016da4:	2300      	movs	r3, #0
 8016da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016da8:	683b      	ldr	r3, [r7, #0]
 8016daa:	f383 8811 	msr	BASEPRI, r3
}
 8016dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016db0:	bf00      	nop
 8016db2:	3708      	adds	r7, #8
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd80      	pop	{r7, pc}
 8016db8:	e000ed04 	.word	0xe000ed04

08016dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016dbc:	b480      	push	{r7}
 8016dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8016df0 <vPortSetupTimerInterrupt+0x34>)
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8016df4 <vPortSetupTimerInterrupt+0x38>)
 8016dc8:	2200      	movs	r2, #0
 8016dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8016df8 <vPortSetupTimerInterrupt+0x3c>)
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8016dfc <vPortSetupTimerInterrupt+0x40>)
 8016dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8016dd6:	099b      	lsrs	r3, r3, #6
 8016dd8:	4a09      	ldr	r2, [pc, #36]	@ (8016e00 <vPortSetupTimerInterrupt+0x44>)
 8016dda:	3b01      	subs	r3, #1
 8016ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016dde:	4b04      	ldr	r3, [pc, #16]	@ (8016df0 <vPortSetupTimerInterrupt+0x34>)
 8016de0:	2207      	movs	r2, #7
 8016de2:	601a      	str	r2, [r3, #0]
}
 8016de4:	bf00      	nop
 8016de6:	46bd      	mov	sp, r7
 8016de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dec:	4770      	bx	lr
 8016dee:	bf00      	nop
 8016df0:	e000e010 	.word	0xe000e010
 8016df4:	e000e018 	.word	0xe000e018
 8016df8:	240000b4 	.word	0x240000b4
 8016dfc:	10624dd3 	.word	0x10624dd3
 8016e00:	e000e014 	.word	0xe000e014

08016e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016e04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016e14 <vPortEnableVFP+0x10>
 8016e08:	6801      	ldr	r1, [r0, #0]
 8016e0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8016e0e:	6001      	str	r1, [r0, #0]
 8016e10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016e12:	bf00      	nop
 8016e14:	e000ed88 	.word	0xe000ed88

08016e18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016e18:	b480      	push	{r7}
 8016e1a:	b085      	sub	sp, #20
 8016e1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016e1e:	f3ef 8305 	mrs	r3, IPSR
 8016e22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	2b0f      	cmp	r3, #15
 8016e28:	d915      	bls.n	8016e56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016e2a:	4a18      	ldr	r2, [pc, #96]	@ (8016e8c <vPortValidateInterruptPriority+0x74>)
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	4413      	add	r3, r2
 8016e30:	781b      	ldrb	r3, [r3, #0]
 8016e32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016e34:	4b16      	ldr	r3, [pc, #88]	@ (8016e90 <vPortValidateInterruptPriority+0x78>)
 8016e36:	781b      	ldrb	r3, [r3, #0]
 8016e38:	7afa      	ldrb	r2, [r7, #11]
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d20b      	bcs.n	8016e56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8016e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e42:	f383 8811 	msr	BASEPRI, r3
 8016e46:	f3bf 8f6f 	isb	sy
 8016e4a:	f3bf 8f4f 	dsb	sy
 8016e4e:	607b      	str	r3, [r7, #4]
}
 8016e50:	bf00      	nop
 8016e52:	bf00      	nop
 8016e54:	e7fd      	b.n	8016e52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016e56:	4b0f      	ldr	r3, [pc, #60]	@ (8016e94 <vPortValidateInterruptPriority+0x7c>)
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8016e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8016e98 <vPortValidateInterruptPriority+0x80>)
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	429a      	cmp	r2, r3
 8016e64:	d90b      	bls.n	8016e7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8016e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e6a:	f383 8811 	msr	BASEPRI, r3
 8016e6e:	f3bf 8f6f 	isb	sy
 8016e72:	f3bf 8f4f 	dsb	sy
 8016e76:	603b      	str	r3, [r7, #0]
}
 8016e78:	bf00      	nop
 8016e7a:	bf00      	nop
 8016e7c:	e7fd      	b.n	8016e7a <vPortValidateInterruptPriority+0x62>
	}
 8016e7e:	bf00      	nop
 8016e80:	3714      	adds	r7, #20
 8016e82:	46bd      	mov	sp, r7
 8016e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e88:	4770      	bx	lr
 8016e8a:	bf00      	nop
 8016e8c:	e000e3f0 	.word	0xe000e3f0
 8016e90:	2400267c 	.word	0x2400267c
 8016e94:	e000ed0c 	.word	0xe000ed0c
 8016e98:	24002680 	.word	0x24002680

08016e9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b08a      	sub	sp, #40	@ 0x28
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016ea8:	f7fe fd5a 	bl	8015960 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016eac:	4b5c      	ldr	r3, [pc, #368]	@ (8017020 <pvPortMalloc+0x184>)
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d101      	bne.n	8016eb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016eb4:	f000 f924 	bl	8017100 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016eb8:	4b5a      	ldr	r3, [pc, #360]	@ (8017024 <pvPortMalloc+0x188>)
 8016eba:	681a      	ldr	r2, [r3, #0]
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	4013      	ands	r3, r2
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	f040 8095 	bne.w	8016ff0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d01e      	beq.n	8016f0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8016ecc:	2208      	movs	r2, #8
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	4413      	add	r3, r2
 8016ed2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f003 0307 	and.w	r3, r3, #7
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d015      	beq.n	8016f0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	f023 0307 	bic.w	r3, r3, #7
 8016ee4:	3308      	adds	r3, #8
 8016ee6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	f003 0307 	and.w	r3, r3, #7
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d00b      	beq.n	8016f0a <pvPortMalloc+0x6e>
	__asm volatile
 8016ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ef6:	f383 8811 	msr	BASEPRI, r3
 8016efa:	f3bf 8f6f 	isb	sy
 8016efe:	f3bf 8f4f 	dsb	sy
 8016f02:	617b      	str	r3, [r7, #20]
}
 8016f04:	bf00      	nop
 8016f06:	bf00      	nop
 8016f08:	e7fd      	b.n	8016f06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d06f      	beq.n	8016ff0 <pvPortMalloc+0x154>
 8016f10:	4b45      	ldr	r3, [pc, #276]	@ (8017028 <pvPortMalloc+0x18c>)
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	687a      	ldr	r2, [r7, #4]
 8016f16:	429a      	cmp	r2, r3
 8016f18:	d86a      	bhi.n	8016ff0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016f1a:	4b44      	ldr	r3, [pc, #272]	@ (801702c <pvPortMalloc+0x190>)
 8016f1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016f1e:	4b43      	ldr	r3, [pc, #268]	@ (801702c <pvPortMalloc+0x190>)
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016f24:	e004      	b.n	8016f30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f32:	685b      	ldr	r3, [r3, #4]
 8016f34:	687a      	ldr	r2, [r7, #4]
 8016f36:	429a      	cmp	r2, r3
 8016f38:	d903      	bls.n	8016f42 <pvPortMalloc+0xa6>
 8016f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d1f1      	bne.n	8016f26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016f42:	4b37      	ldr	r3, [pc, #220]	@ (8017020 <pvPortMalloc+0x184>)
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016f48:	429a      	cmp	r2, r3
 8016f4a:	d051      	beq.n	8016ff0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016f4c:	6a3b      	ldr	r3, [r7, #32]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	2208      	movs	r2, #8
 8016f52:	4413      	add	r3, r2
 8016f54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f58:	681a      	ldr	r2, [r3, #0]
 8016f5a:	6a3b      	ldr	r3, [r7, #32]
 8016f5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f60:	685a      	ldr	r2, [r3, #4]
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	1ad2      	subs	r2, r2, r3
 8016f66:	2308      	movs	r3, #8
 8016f68:	005b      	lsls	r3, r3, #1
 8016f6a:	429a      	cmp	r2, r3
 8016f6c:	d920      	bls.n	8016fb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	4413      	add	r3, r2
 8016f74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016f76:	69bb      	ldr	r3, [r7, #24]
 8016f78:	f003 0307 	and.w	r3, r3, #7
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d00b      	beq.n	8016f98 <pvPortMalloc+0xfc>
	__asm volatile
 8016f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f84:	f383 8811 	msr	BASEPRI, r3
 8016f88:	f3bf 8f6f 	isb	sy
 8016f8c:	f3bf 8f4f 	dsb	sy
 8016f90:	613b      	str	r3, [r7, #16]
}
 8016f92:	bf00      	nop
 8016f94:	bf00      	nop
 8016f96:	e7fd      	b.n	8016f94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f9a:	685a      	ldr	r2, [r3, #4]
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	1ad2      	subs	r2, r2, r3
 8016fa0:	69bb      	ldr	r3, [r7, #24]
 8016fa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fa6:	687a      	ldr	r2, [r7, #4]
 8016fa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016faa:	69b8      	ldr	r0, [r7, #24]
 8016fac:	f000 f90c 	bl	80171c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8017028 <pvPortMalloc+0x18c>)
 8016fb2:	681a      	ldr	r2, [r3, #0]
 8016fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fb6:	685b      	ldr	r3, [r3, #4]
 8016fb8:	1ad3      	subs	r3, r2, r3
 8016fba:	4a1b      	ldr	r2, [pc, #108]	@ (8017028 <pvPortMalloc+0x18c>)
 8016fbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8017028 <pvPortMalloc+0x18c>)
 8016fc0:	681a      	ldr	r2, [r3, #0]
 8016fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8017030 <pvPortMalloc+0x194>)
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	429a      	cmp	r2, r3
 8016fc8:	d203      	bcs.n	8016fd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016fca:	4b17      	ldr	r3, [pc, #92]	@ (8017028 <pvPortMalloc+0x18c>)
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	4a18      	ldr	r2, [pc, #96]	@ (8017030 <pvPortMalloc+0x194>)
 8016fd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fd4:	685a      	ldr	r2, [r3, #4]
 8016fd6:	4b13      	ldr	r3, [pc, #76]	@ (8017024 <pvPortMalloc+0x188>)
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	431a      	orrs	r2, r3
 8016fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016fe6:	4b13      	ldr	r3, [pc, #76]	@ (8017034 <pvPortMalloc+0x198>)
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	3301      	adds	r3, #1
 8016fec:	4a11      	ldr	r2, [pc, #68]	@ (8017034 <pvPortMalloc+0x198>)
 8016fee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016ff0:	f7fe fcc4 	bl	801597c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016ff4:	69fb      	ldr	r3, [r7, #28]
 8016ff6:	f003 0307 	and.w	r3, r3, #7
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d00b      	beq.n	8017016 <pvPortMalloc+0x17a>
	__asm volatile
 8016ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017002:	f383 8811 	msr	BASEPRI, r3
 8017006:	f3bf 8f6f 	isb	sy
 801700a:	f3bf 8f4f 	dsb	sy
 801700e:	60fb      	str	r3, [r7, #12]
}
 8017010:	bf00      	nop
 8017012:	bf00      	nop
 8017014:	e7fd      	b.n	8017012 <pvPortMalloc+0x176>
	return pvReturn;
 8017016:	69fb      	ldr	r3, [r7, #28]
}
 8017018:	4618      	mov	r0, r3
 801701a:	3728      	adds	r7, #40	@ 0x28
 801701c:	46bd      	mov	sp, r7
 801701e:	bd80      	pop	{r7, pc}
 8017020:	240271e4 	.word	0x240271e4
 8017024:	240271f8 	.word	0x240271f8
 8017028:	240271e8 	.word	0x240271e8
 801702c:	240271dc 	.word	0x240271dc
 8017030:	240271ec 	.word	0x240271ec
 8017034:	240271f0 	.word	0x240271f0

08017038 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b086      	sub	sp, #24
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d04f      	beq.n	80170ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801704a:	2308      	movs	r3, #8
 801704c:	425b      	negs	r3, r3
 801704e:	697a      	ldr	r2, [r7, #20]
 8017050:	4413      	add	r3, r2
 8017052:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017054:	697b      	ldr	r3, [r7, #20]
 8017056:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017058:	693b      	ldr	r3, [r7, #16]
 801705a:	685a      	ldr	r2, [r3, #4]
 801705c:	4b25      	ldr	r3, [pc, #148]	@ (80170f4 <vPortFree+0xbc>)
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	4013      	ands	r3, r2
 8017062:	2b00      	cmp	r3, #0
 8017064:	d10b      	bne.n	801707e <vPortFree+0x46>
	__asm volatile
 8017066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801706a:	f383 8811 	msr	BASEPRI, r3
 801706e:	f3bf 8f6f 	isb	sy
 8017072:	f3bf 8f4f 	dsb	sy
 8017076:	60fb      	str	r3, [r7, #12]
}
 8017078:	bf00      	nop
 801707a:	bf00      	nop
 801707c:	e7fd      	b.n	801707a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801707e:	693b      	ldr	r3, [r7, #16]
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d00b      	beq.n	801709e <vPortFree+0x66>
	__asm volatile
 8017086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801708a:	f383 8811 	msr	BASEPRI, r3
 801708e:	f3bf 8f6f 	isb	sy
 8017092:	f3bf 8f4f 	dsb	sy
 8017096:	60bb      	str	r3, [r7, #8]
}
 8017098:	bf00      	nop
 801709a:	bf00      	nop
 801709c:	e7fd      	b.n	801709a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801709e:	693b      	ldr	r3, [r7, #16]
 80170a0:	685a      	ldr	r2, [r3, #4]
 80170a2:	4b14      	ldr	r3, [pc, #80]	@ (80170f4 <vPortFree+0xbc>)
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	4013      	ands	r3, r2
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d01e      	beq.n	80170ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80170ac:	693b      	ldr	r3, [r7, #16]
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d11a      	bne.n	80170ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80170b4:	693b      	ldr	r3, [r7, #16]
 80170b6:	685a      	ldr	r2, [r3, #4]
 80170b8:	4b0e      	ldr	r3, [pc, #56]	@ (80170f4 <vPortFree+0xbc>)
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	43db      	mvns	r3, r3
 80170be:	401a      	ands	r2, r3
 80170c0:	693b      	ldr	r3, [r7, #16]
 80170c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80170c4:	f7fe fc4c 	bl	8015960 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80170c8:	693b      	ldr	r3, [r7, #16]
 80170ca:	685a      	ldr	r2, [r3, #4]
 80170cc:	4b0a      	ldr	r3, [pc, #40]	@ (80170f8 <vPortFree+0xc0>)
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	4413      	add	r3, r2
 80170d2:	4a09      	ldr	r2, [pc, #36]	@ (80170f8 <vPortFree+0xc0>)
 80170d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80170d6:	6938      	ldr	r0, [r7, #16]
 80170d8:	f000 f876 	bl	80171c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80170dc:	4b07      	ldr	r3, [pc, #28]	@ (80170fc <vPortFree+0xc4>)
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	3301      	adds	r3, #1
 80170e2:	4a06      	ldr	r2, [pc, #24]	@ (80170fc <vPortFree+0xc4>)
 80170e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80170e6:	f7fe fc49 	bl	801597c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80170ea:	bf00      	nop
 80170ec:	3718      	adds	r7, #24
 80170ee:	46bd      	mov	sp, r7
 80170f0:	bd80      	pop	{r7, pc}
 80170f2:	bf00      	nop
 80170f4:	240271f8 	.word	0x240271f8
 80170f8:	240271e8 	.word	0x240271e8
 80170fc:	240271f4 	.word	0x240271f4

08017100 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017100:	b480      	push	{r7}
 8017102:	b085      	sub	sp, #20
 8017104:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017106:	4b29      	ldr	r3, [pc, #164]	@ (80171ac <prvHeapInit+0xac>)
 8017108:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801710a:	4b29      	ldr	r3, [pc, #164]	@ (80171b0 <prvHeapInit+0xb0>)
 801710c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	f003 0307 	and.w	r3, r3, #7
 8017114:	2b00      	cmp	r3, #0
 8017116:	d00c      	beq.n	8017132 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	3307      	adds	r3, #7
 801711c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	f023 0307 	bic.w	r3, r3, #7
 8017124:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017126:	68ba      	ldr	r2, [r7, #8]
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	1ad3      	subs	r3, r2, r3
 801712c:	4a20      	ldr	r2, [pc, #128]	@ (80171b0 <prvHeapInit+0xb0>)
 801712e:	4413      	add	r3, r2
 8017130:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017136:	4a1f      	ldr	r2, [pc, #124]	@ (80171b4 <prvHeapInit+0xb4>)
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801713c:	4b1d      	ldr	r3, [pc, #116]	@ (80171b4 <prvHeapInit+0xb4>)
 801713e:	2200      	movs	r2, #0
 8017140:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	68ba      	ldr	r2, [r7, #8]
 8017146:	4413      	add	r3, r2
 8017148:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801714a:	2208      	movs	r2, #8
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	1a9b      	subs	r3, r3, r2
 8017150:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	f023 0307 	bic.w	r3, r3, #7
 8017158:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	4a16      	ldr	r2, [pc, #88]	@ (80171b8 <prvHeapInit+0xb8>)
 801715e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017160:	4b15      	ldr	r3, [pc, #84]	@ (80171b8 <prvHeapInit+0xb8>)
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	2200      	movs	r2, #0
 8017166:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017168:	4b13      	ldr	r3, [pc, #76]	@ (80171b8 <prvHeapInit+0xb8>)
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	2200      	movs	r2, #0
 801716e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017174:	683b      	ldr	r3, [r7, #0]
 8017176:	68fa      	ldr	r2, [r7, #12]
 8017178:	1ad2      	subs	r2, r2, r3
 801717a:	683b      	ldr	r3, [r7, #0]
 801717c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801717e:	4b0e      	ldr	r3, [pc, #56]	@ (80171b8 <prvHeapInit+0xb8>)
 8017180:	681a      	ldr	r2, [r3, #0]
 8017182:	683b      	ldr	r3, [r7, #0]
 8017184:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017186:	683b      	ldr	r3, [r7, #0]
 8017188:	685b      	ldr	r3, [r3, #4]
 801718a:	4a0c      	ldr	r2, [pc, #48]	@ (80171bc <prvHeapInit+0xbc>)
 801718c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801718e:	683b      	ldr	r3, [r7, #0]
 8017190:	685b      	ldr	r3, [r3, #4]
 8017192:	4a0b      	ldr	r2, [pc, #44]	@ (80171c0 <prvHeapInit+0xc0>)
 8017194:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017196:	4b0b      	ldr	r3, [pc, #44]	@ (80171c4 <prvHeapInit+0xc4>)
 8017198:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801719c:	601a      	str	r2, [r3, #0]
}
 801719e:	bf00      	nop
 80171a0:	3714      	adds	r7, #20
 80171a2:	46bd      	mov	sp, r7
 80171a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a8:	4770      	bx	lr
 80171aa:	bf00      	nop
 80171ac:	00024b58 	.word	0x00024b58
 80171b0:	24002684 	.word	0x24002684
 80171b4:	240271dc 	.word	0x240271dc
 80171b8:	240271e4 	.word	0x240271e4
 80171bc:	240271ec 	.word	0x240271ec
 80171c0:	240271e8 	.word	0x240271e8
 80171c4:	240271f8 	.word	0x240271f8

080171c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80171c8:	b480      	push	{r7}
 80171ca:	b085      	sub	sp, #20
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80171d0:	4b28      	ldr	r3, [pc, #160]	@ (8017274 <prvInsertBlockIntoFreeList+0xac>)
 80171d2:	60fb      	str	r3, [r7, #12]
 80171d4:	e002      	b.n	80171dc <prvInsertBlockIntoFreeList+0x14>
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	60fb      	str	r3, [r7, #12]
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	687a      	ldr	r2, [r7, #4]
 80171e2:	429a      	cmp	r2, r3
 80171e4:	d8f7      	bhi.n	80171d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	685b      	ldr	r3, [r3, #4]
 80171ee:	68ba      	ldr	r2, [r7, #8]
 80171f0:	4413      	add	r3, r2
 80171f2:	687a      	ldr	r2, [r7, #4]
 80171f4:	429a      	cmp	r2, r3
 80171f6:	d108      	bne.n	801720a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	685a      	ldr	r2, [r3, #4]
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	685b      	ldr	r3, [r3, #4]
 8017200:	441a      	add	r2, r3
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	685b      	ldr	r3, [r3, #4]
 8017212:	68ba      	ldr	r2, [r7, #8]
 8017214:	441a      	add	r2, r3
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	429a      	cmp	r2, r3
 801721c:	d118      	bne.n	8017250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	681a      	ldr	r2, [r3, #0]
 8017222:	4b15      	ldr	r3, [pc, #84]	@ (8017278 <prvInsertBlockIntoFreeList+0xb0>)
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	429a      	cmp	r2, r3
 8017228:	d00d      	beq.n	8017246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	685a      	ldr	r2, [r3, #4]
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	685b      	ldr	r3, [r3, #4]
 8017234:	441a      	add	r2, r3
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	681a      	ldr	r2, [r3, #0]
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	601a      	str	r2, [r3, #0]
 8017244:	e008      	b.n	8017258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017246:	4b0c      	ldr	r3, [pc, #48]	@ (8017278 <prvInsertBlockIntoFreeList+0xb0>)
 8017248:	681a      	ldr	r2, [r3, #0]
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	601a      	str	r2, [r3, #0]
 801724e:	e003      	b.n	8017258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	681a      	ldr	r2, [r3, #0]
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017258:	68fa      	ldr	r2, [r7, #12]
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	429a      	cmp	r2, r3
 801725e:	d002      	beq.n	8017266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	687a      	ldr	r2, [r7, #4]
 8017264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017266:	bf00      	nop
 8017268:	3714      	adds	r7, #20
 801726a:	46bd      	mov	sp, r7
 801726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017270:	4770      	bx	lr
 8017272:	bf00      	nop
 8017274:	240271dc 	.word	0x240271dc
 8017278:	240271e4 	.word	0x240271e4

0801727c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801727c:	b580      	push	{r7, lr}
 801727e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017280:	2200      	movs	r2, #0
 8017282:	4913      	ldr	r1, [pc, #76]	@ (80172d0 <MX_USB_DEVICE_Init+0x54>)
 8017284:	4813      	ldr	r0, [pc, #76]	@ (80172d4 <MX_USB_DEVICE_Init+0x58>)
 8017286:	f7fb fcaf 	bl	8012be8 <USBD_Init>
 801728a:	4603      	mov	r3, r0
 801728c:	2b00      	cmp	r3, #0
 801728e:	d001      	beq.n	8017294 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017290:	f7eb fde8 	bl	8002e64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017294:	4910      	ldr	r1, [pc, #64]	@ (80172d8 <MX_USB_DEVICE_Init+0x5c>)
 8017296:	480f      	ldr	r0, [pc, #60]	@ (80172d4 <MX_USB_DEVICE_Init+0x58>)
 8017298:	f7fb fce4 	bl	8012c64 <USBD_RegisterClass>
 801729c:	4603      	mov	r3, r0
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d001      	beq.n	80172a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80172a2:	f7eb fddf 	bl	8002e64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80172a6:	490d      	ldr	r1, [pc, #52]	@ (80172dc <MX_USB_DEVICE_Init+0x60>)
 80172a8:	480a      	ldr	r0, [pc, #40]	@ (80172d4 <MX_USB_DEVICE_Init+0x58>)
 80172aa:	f7fb fbcd 	bl	8012a48 <USBD_CDC_RegisterInterface>
 80172ae:	4603      	mov	r3, r0
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d001      	beq.n	80172b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80172b4:	f7eb fdd6 	bl	8002e64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80172b8:	4806      	ldr	r0, [pc, #24]	@ (80172d4 <MX_USB_DEVICE_Init+0x58>)
 80172ba:	f7fb fd17 	bl	8012cec <USBD_Start>
 80172be:	4603      	mov	r3, r0
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d001      	beq.n	80172c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80172c4:	f7eb fdce 	bl	8002e64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80172c8:	f7f2 fa26 	bl	8009718 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80172cc:	bf00      	nop
 80172ce:	bd80      	pop	{r7, pc}
 80172d0:	24000170 	.word	0x24000170
 80172d4:	240271fc 	.word	0x240271fc
 80172d8:	240000d0 	.word	0x240000d0
 80172dc:	2400015c 	.word	0x2400015c

080172e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80172e4:	2200      	movs	r2, #0
 80172e6:	4905      	ldr	r1, [pc, #20]	@ (80172fc <CDC_Init_FS+0x1c>)
 80172e8:	4805      	ldr	r0, [pc, #20]	@ (8017300 <CDC_Init_FS+0x20>)
 80172ea:	f7fb fbc7 	bl	8012a7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80172ee:	4905      	ldr	r1, [pc, #20]	@ (8017304 <CDC_Init_FS+0x24>)
 80172f0:	4803      	ldr	r0, [pc, #12]	@ (8017300 <CDC_Init_FS+0x20>)
 80172f2:	f7fb fbe5 	bl	8012ac0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80172f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80172f8:	4618      	mov	r0, r3
 80172fa:	bd80      	pop	{r7, pc}
 80172fc:	24027cd8 	.word	0x24027cd8
 8017300:	240271fc 	.word	0x240271fc
 8017304:	240274d8 	.word	0x240274d8

08017308 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017308:	b480      	push	{r7}
 801730a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801730c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801730e:	4618      	mov	r0, r3
 8017310:	46bd      	mov	sp, r7
 8017312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017316:	4770      	bx	lr

08017318 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017318:	b480      	push	{r7}
 801731a:	b083      	sub	sp, #12
 801731c:	af00      	add	r7, sp, #0
 801731e:	4603      	mov	r3, r0
 8017320:	6039      	str	r1, [r7, #0]
 8017322:	71fb      	strb	r3, [r7, #7]
 8017324:	4613      	mov	r3, r2
 8017326:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017328:	79fb      	ldrb	r3, [r7, #7]
 801732a:	2b23      	cmp	r3, #35	@ 0x23
 801732c:	f200 8098 	bhi.w	8017460 <CDC_Control_FS+0x148>
 8017330:	a201      	add	r2, pc, #4	@ (adr r2, 8017338 <CDC_Control_FS+0x20>)
 8017332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017336:	bf00      	nop
 8017338:	08017461 	.word	0x08017461
 801733c:	08017461 	.word	0x08017461
 8017340:	08017461 	.word	0x08017461
 8017344:	08017461 	.word	0x08017461
 8017348:	08017461 	.word	0x08017461
 801734c:	08017461 	.word	0x08017461
 8017350:	08017461 	.word	0x08017461
 8017354:	08017461 	.word	0x08017461
 8017358:	08017461 	.word	0x08017461
 801735c:	08017461 	.word	0x08017461
 8017360:	08017461 	.word	0x08017461
 8017364:	08017461 	.word	0x08017461
 8017368:	08017461 	.word	0x08017461
 801736c:	08017461 	.word	0x08017461
 8017370:	08017461 	.word	0x08017461
 8017374:	08017461 	.word	0x08017461
 8017378:	08017461 	.word	0x08017461
 801737c:	08017461 	.word	0x08017461
 8017380:	08017461 	.word	0x08017461
 8017384:	08017461 	.word	0x08017461
 8017388:	08017461 	.word	0x08017461
 801738c:	08017461 	.word	0x08017461
 8017390:	08017461 	.word	0x08017461
 8017394:	08017461 	.word	0x08017461
 8017398:	08017461 	.word	0x08017461
 801739c:	08017461 	.word	0x08017461
 80173a0:	08017461 	.word	0x08017461
 80173a4:	08017461 	.word	0x08017461
 80173a8:	08017461 	.word	0x08017461
 80173ac:	08017461 	.word	0x08017461
 80173b0:	08017461 	.word	0x08017461
 80173b4:	08017461 	.word	0x08017461
 80173b8:	080173c9 	.word	0x080173c9
 80173bc:	0801740d 	.word	0x0801740d
 80173c0:	08017461 	.word	0x08017461
 80173c4:	08017461 	.word	0x08017461
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) |
 80173c8:	683b      	ldr	r3, [r7, #0]
 80173ca:	781b      	ldrb	r3, [r3, #0]
 80173cc:	461a      	mov	r2, r3
 80173ce:	683b      	ldr	r3, [r7, #0]
 80173d0:	3301      	adds	r3, #1
 80173d2:	781b      	ldrb	r3, [r3, #0]
 80173d4:	021b      	lsls	r3, r3, #8
 80173d6:	431a      	orrs	r2, r3
    	                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80173d8:	683b      	ldr	r3, [r7, #0]
 80173da:	3302      	adds	r3, #2
 80173dc:	781b      	ldrb	r3, [r3, #0]
 80173de:	041b      	lsls	r3, r3, #16
    	LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) |
 80173e0:	431a      	orrs	r2, r3
    	                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80173e2:	683b      	ldr	r3, [r7, #0]
 80173e4:	3303      	adds	r3, #3
 80173e6:	781b      	ldrb	r3, [r3, #0]
 80173e8:	061b      	lsls	r3, r3, #24
 80173ea:	4313      	orrs	r3, r2
    	LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) |
 80173ec:	461a      	mov	r2, r3
 80173ee:	4b20      	ldr	r3, [pc, #128]	@ (8017470 <CDC_Control_FS+0x158>)
 80173f0:	601a      	str	r2, [r3, #0]
    	        LineCoding.format = pbuf[4];
 80173f2:	683b      	ldr	r3, [r7, #0]
 80173f4:	791a      	ldrb	r2, [r3, #4]
 80173f6:	4b1e      	ldr	r3, [pc, #120]	@ (8017470 <CDC_Control_FS+0x158>)
 80173f8:	711a      	strb	r2, [r3, #4]
    	        LineCoding.paritytype = pbuf[5];
 80173fa:	683b      	ldr	r3, [r7, #0]
 80173fc:	795a      	ldrb	r2, [r3, #5]
 80173fe:	4b1c      	ldr	r3, [pc, #112]	@ (8017470 <CDC_Control_FS+0x158>)
 8017400:	715a      	strb	r2, [r3, #5]
    	        LineCoding.datatype = pbuf[6];
 8017402:	683b      	ldr	r3, [r7, #0]
 8017404:	799a      	ldrb	r2, [r3, #6]
 8017406:	4b1a      	ldr	r3, [pc, #104]	@ (8017470 <CDC_Control_FS+0x158>)
 8017408:	719a      	strb	r2, [r3, #6]
    break;
 801740a:	e02a      	b.n	8017462 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
        pbuf[0] = (uint8_t) (LineCoding.bitrate);
 801740c:	4b18      	ldr	r3, [pc, #96]	@ (8017470 <CDC_Control_FS+0x158>)
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	b2da      	uxtb	r2, r3
 8017412:	683b      	ldr	r3, [r7, #0]
 8017414:	701a      	strb	r2, [r3, #0]
        pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 8017416:	4b16      	ldr	r3, [pc, #88]	@ (8017470 <CDC_Control_FS+0x158>)
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	0a1a      	lsrs	r2, r3, #8
 801741c:	683b      	ldr	r3, [r7, #0]
 801741e:	3301      	adds	r3, #1
 8017420:	b2d2      	uxtb	r2, r2
 8017422:	701a      	strb	r2, [r3, #0]
        pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 8017424:	4b12      	ldr	r3, [pc, #72]	@ (8017470 <CDC_Control_FS+0x158>)
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	0c1a      	lsrs	r2, r3, #16
 801742a:	683b      	ldr	r3, [r7, #0]
 801742c:	3302      	adds	r3, #2
 801742e:	b2d2      	uxtb	r2, r2
 8017430:	701a      	strb	r2, [r3, #0]
        pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 8017432:	4b0f      	ldr	r3, [pc, #60]	@ (8017470 <CDC_Control_FS+0x158>)
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	0e1a      	lsrs	r2, r3, #24
 8017438:	683b      	ldr	r3, [r7, #0]
 801743a:	3303      	adds	r3, #3
 801743c:	b2d2      	uxtb	r2, r2
 801743e:	701a      	strb	r2, [r3, #0]
        pbuf[4] = LineCoding.format;
 8017440:	683b      	ldr	r3, [r7, #0]
 8017442:	3304      	adds	r3, #4
 8017444:	4a0a      	ldr	r2, [pc, #40]	@ (8017470 <CDC_Control_FS+0x158>)
 8017446:	7912      	ldrb	r2, [r2, #4]
 8017448:	701a      	strb	r2, [r3, #0]
        pbuf[5] = LineCoding.paritytype;
 801744a:	683b      	ldr	r3, [r7, #0]
 801744c:	3305      	adds	r3, #5
 801744e:	4a08      	ldr	r2, [pc, #32]	@ (8017470 <CDC_Control_FS+0x158>)
 8017450:	7952      	ldrb	r2, [r2, #5]
 8017452:	701a      	strb	r2, [r3, #0]
        pbuf[6] = LineCoding.datatype;
 8017454:	683b      	ldr	r3, [r7, #0]
 8017456:	3306      	adds	r3, #6
 8017458:	4a05      	ldr	r2, [pc, #20]	@ (8017470 <CDC_Control_FS+0x158>)
 801745a:	7992      	ldrb	r2, [r2, #6]
 801745c:	701a      	strb	r2, [r3, #0]
    break;
 801745e:	e000      	b.n	8017462 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017460:	bf00      	nop
  }

  return (USBD_OK);
 8017462:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017464:	4618      	mov	r0, r3
 8017466:	370c      	adds	r7, #12
 8017468:	46bd      	mov	sp, r7
 801746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746e:	4770      	bx	lr
 8017470:	24000154 	.word	0x24000154

08017474 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017474:	b580      	push	{r7, lr}
 8017476:	b082      	sub	sp, #8
 8017478:	af00      	add	r7, sp, #0
 801747a:	6078      	str	r0, [r7, #4]
 801747c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USB_RXCallback(Buf, Len);
 801747e:	6839      	ldr	r1, [r7, #0]
 8017480:	6878      	ldr	r0, [r7, #4]
 8017482:	f7ea fa3f 	bl	8001904 <USB_RXCallback>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017486:	6879      	ldr	r1, [r7, #4]
 8017488:	4805      	ldr	r0, [pc, #20]	@ (80174a0 <CDC_Receive_FS+0x2c>)
 801748a:	f7fb fb19 	bl	8012ac0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801748e:	4804      	ldr	r0, [pc, #16]	@ (80174a0 <CDC_Receive_FS+0x2c>)
 8017490:	f7fb fb74 	bl	8012b7c <USBD_CDC_ReceivePacket>


  return (USBD_OK);
 8017494:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017496:	4618      	mov	r0, r3
 8017498:	3708      	adds	r7, #8
 801749a:	46bd      	mov	sp, r7
 801749c:	bd80      	pop	{r7, pc}
 801749e:	bf00      	nop
 80174a0:	240271fc 	.word	0x240271fc

080174a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b084      	sub	sp, #16
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	6078      	str	r0, [r7, #4]
 80174ac:	460b      	mov	r3, r1
 80174ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80174b0:	2300      	movs	r3, #0
 80174b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80174b4:	4b0d      	ldr	r3, [pc, #52]	@ (80174ec <CDC_Transmit_FS+0x48>)
 80174b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80174ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80174bc:	68bb      	ldr	r3, [r7, #8]
 80174be:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d001      	beq.n	80174ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80174c6:	2301      	movs	r3, #1
 80174c8:	e00b      	b.n	80174e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80174ca:	887b      	ldrh	r3, [r7, #2]
 80174cc:	461a      	mov	r2, r3
 80174ce:	6879      	ldr	r1, [r7, #4]
 80174d0:	4806      	ldr	r0, [pc, #24]	@ (80174ec <CDC_Transmit_FS+0x48>)
 80174d2:	f7fb fad3 	bl	8012a7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80174d6:	4805      	ldr	r0, [pc, #20]	@ (80174ec <CDC_Transmit_FS+0x48>)
 80174d8:	f7fb fb10 	bl	8012afc <USBD_CDC_TransmitPacket>
 80174dc:	4603      	mov	r3, r0
 80174de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80174e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80174e2:	4618      	mov	r0, r3
 80174e4:	3710      	adds	r7, #16
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd80      	pop	{r7, pc}
 80174ea:	bf00      	nop
 80174ec:	240271fc 	.word	0x240271fc

080174f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80174f0:	b480      	push	{r7}
 80174f2:	b087      	sub	sp, #28
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	60f8      	str	r0, [r7, #12]
 80174f8:	60b9      	str	r1, [r7, #8]
 80174fa:	4613      	mov	r3, r2
 80174fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80174fe:	2300      	movs	r3, #0
 8017500:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017502:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017506:	4618      	mov	r0, r3
 8017508:	371c      	adds	r7, #28
 801750a:	46bd      	mov	sp, r7
 801750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017510:	4770      	bx	lr
	...

08017514 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017514:	b480      	push	{r7}
 8017516:	b083      	sub	sp, #12
 8017518:	af00      	add	r7, sp, #0
 801751a:	4603      	mov	r3, r0
 801751c:	6039      	str	r1, [r7, #0]
 801751e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017520:	683b      	ldr	r3, [r7, #0]
 8017522:	2212      	movs	r2, #18
 8017524:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017526:	4b03      	ldr	r3, [pc, #12]	@ (8017534 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017528:	4618      	mov	r0, r3
 801752a:	370c      	adds	r7, #12
 801752c:	46bd      	mov	sp, r7
 801752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017532:	4770      	bx	lr
 8017534:	24000190 	.word	0x24000190

08017538 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017538:	b480      	push	{r7}
 801753a:	b083      	sub	sp, #12
 801753c:	af00      	add	r7, sp, #0
 801753e:	4603      	mov	r3, r0
 8017540:	6039      	str	r1, [r7, #0]
 8017542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017544:	683b      	ldr	r3, [r7, #0]
 8017546:	2204      	movs	r2, #4
 8017548:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801754a:	4b03      	ldr	r3, [pc, #12]	@ (8017558 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801754c:	4618      	mov	r0, r3
 801754e:	370c      	adds	r7, #12
 8017550:	46bd      	mov	sp, r7
 8017552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017556:	4770      	bx	lr
 8017558:	240001a4 	.word	0x240001a4

0801755c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b082      	sub	sp, #8
 8017560:	af00      	add	r7, sp, #0
 8017562:	4603      	mov	r3, r0
 8017564:	6039      	str	r1, [r7, #0]
 8017566:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017568:	79fb      	ldrb	r3, [r7, #7]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d105      	bne.n	801757a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801756e:	683a      	ldr	r2, [r7, #0]
 8017570:	4907      	ldr	r1, [pc, #28]	@ (8017590 <USBD_FS_ProductStrDescriptor+0x34>)
 8017572:	4808      	ldr	r0, [pc, #32]	@ (8017594 <USBD_FS_ProductStrDescriptor+0x38>)
 8017574:	f7fc fd94 	bl	80140a0 <USBD_GetString>
 8017578:	e004      	b.n	8017584 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801757a:	683a      	ldr	r2, [r7, #0]
 801757c:	4904      	ldr	r1, [pc, #16]	@ (8017590 <USBD_FS_ProductStrDescriptor+0x34>)
 801757e:	4805      	ldr	r0, [pc, #20]	@ (8017594 <USBD_FS_ProductStrDescriptor+0x38>)
 8017580:	f7fc fd8e 	bl	80140a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017584:	4b02      	ldr	r3, [pc, #8]	@ (8017590 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017586:	4618      	mov	r0, r3
 8017588:	3708      	adds	r7, #8
 801758a:	46bd      	mov	sp, r7
 801758c:	bd80      	pop	{r7, pc}
 801758e:	bf00      	nop
 8017590:	240284d8 	.word	0x240284d8
 8017594:	080195d4 	.word	0x080195d4

08017598 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b082      	sub	sp, #8
 801759c:	af00      	add	r7, sp, #0
 801759e:	4603      	mov	r3, r0
 80175a0:	6039      	str	r1, [r7, #0]
 80175a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80175a4:	683a      	ldr	r2, [r7, #0]
 80175a6:	4904      	ldr	r1, [pc, #16]	@ (80175b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80175a8:	4804      	ldr	r0, [pc, #16]	@ (80175bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80175aa:	f7fc fd79 	bl	80140a0 <USBD_GetString>
  return USBD_StrDesc;
 80175ae:	4b02      	ldr	r3, [pc, #8]	@ (80175b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80175b0:	4618      	mov	r0, r3
 80175b2:	3708      	adds	r7, #8
 80175b4:	46bd      	mov	sp, r7
 80175b6:	bd80      	pop	{r7, pc}
 80175b8:	240284d8 	.word	0x240284d8
 80175bc:	080195dc 	.word	0x080195dc

080175c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b082      	sub	sp, #8
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	4603      	mov	r3, r0
 80175c8:	6039      	str	r1, [r7, #0]
 80175ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80175cc:	683b      	ldr	r3, [r7, #0]
 80175ce:	221a      	movs	r2, #26
 80175d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80175d2:	f000 f843 	bl	801765c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80175d6:	4b02      	ldr	r3, [pc, #8]	@ (80175e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80175d8:	4618      	mov	r0, r3
 80175da:	3708      	adds	r7, #8
 80175dc:	46bd      	mov	sp, r7
 80175de:	bd80      	pop	{r7, pc}
 80175e0:	240001a8 	.word	0x240001a8

080175e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80175e4:	b580      	push	{r7, lr}
 80175e6:	b082      	sub	sp, #8
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	4603      	mov	r3, r0
 80175ec:	6039      	str	r1, [r7, #0]
 80175ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80175f0:	79fb      	ldrb	r3, [r7, #7]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d105      	bne.n	8017602 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80175f6:	683a      	ldr	r2, [r7, #0]
 80175f8:	4907      	ldr	r1, [pc, #28]	@ (8017618 <USBD_FS_ConfigStrDescriptor+0x34>)
 80175fa:	4808      	ldr	r0, [pc, #32]	@ (801761c <USBD_FS_ConfigStrDescriptor+0x38>)
 80175fc:	f7fc fd50 	bl	80140a0 <USBD_GetString>
 8017600:	e004      	b.n	801760c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017602:	683a      	ldr	r2, [r7, #0]
 8017604:	4904      	ldr	r1, [pc, #16]	@ (8017618 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017606:	4805      	ldr	r0, [pc, #20]	@ (801761c <USBD_FS_ConfigStrDescriptor+0x38>)
 8017608:	f7fc fd4a 	bl	80140a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801760c:	4b02      	ldr	r3, [pc, #8]	@ (8017618 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801760e:	4618      	mov	r0, r3
 8017610:	3708      	adds	r7, #8
 8017612:	46bd      	mov	sp, r7
 8017614:	bd80      	pop	{r7, pc}
 8017616:	bf00      	nop
 8017618:	240284d8 	.word	0x240284d8
 801761c:	080195f0 	.word	0x080195f0

08017620 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017620:	b580      	push	{r7, lr}
 8017622:	b082      	sub	sp, #8
 8017624:	af00      	add	r7, sp, #0
 8017626:	4603      	mov	r3, r0
 8017628:	6039      	str	r1, [r7, #0]
 801762a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801762c:	79fb      	ldrb	r3, [r7, #7]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d105      	bne.n	801763e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017632:	683a      	ldr	r2, [r7, #0]
 8017634:	4907      	ldr	r1, [pc, #28]	@ (8017654 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017636:	4808      	ldr	r0, [pc, #32]	@ (8017658 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017638:	f7fc fd32 	bl	80140a0 <USBD_GetString>
 801763c:	e004      	b.n	8017648 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801763e:	683a      	ldr	r2, [r7, #0]
 8017640:	4904      	ldr	r1, [pc, #16]	@ (8017654 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017642:	4805      	ldr	r0, [pc, #20]	@ (8017658 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017644:	f7fc fd2c 	bl	80140a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017648:	4b02      	ldr	r3, [pc, #8]	@ (8017654 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801764a:	4618      	mov	r0, r3
 801764c:	3708      	adds	r7, #8
 801764e:	46bd      	mov	sp, r7
 8017650:	bd80      	pop	{r7, pc}
 8017652:	bf00      	nop
 8017654:	240284d8 	.word	0x240284d8
 8017658:	080195fc 	.word	0x080195fc

0801765c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b084      	sub	sp, #16
 8017660:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017662:	4b0f      	ldr	r3, [pc, #60]	@ (80176a0 <Get_SerialNum+0x44>)
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017668:	4b0e      	ldr	r3, [pc, #56]	@ (80176a4 <Get_SerialNum+0x48>)
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801766e:	4b0e      	ldr	r3, [pc, #56]	@ (80176a8 <Get_SerialNum+0x4c>)
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017674:	68fa      	ldr	r2, [r7, #12]
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	4413      	add	r3, r2
 801767a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d009      	beq.n	8017696 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017682:	2208      	movs	r2, #8
 8017684:	4909      	ldr	r1, [pc, #36]	@ (80176ac <Get_SerialNum+0x50>)
 8017686:	68f8      	ldr	r0, [r7, #12]
 8017688:	f000 f814 	bl	80176b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801768c:	2204      	movs	r2, #4
 801768e:	4908      	ldr	r1, [pc, #32]	@ (80176b0 <Get_SerialNum+0x54>)
 8017690:	68b8      	ldr	r0, [r7, #8]
 8017692:	f000 f80f 	bl	80176b4 <IntToUnicode>
  }
}
 8017696:	bf00      	nop
 8017698:	3710      	adds	r7, #16
 801769a:	46bd      	mov	sp, r7
 801769c:	bd80      	pop	{r7, pc}
 801769e:	bf00      	nop
 80176a0:	1ff1e800 	.word	0x1ff1e800
 80176a4:	1ff1e804 	.word	0x1ff1e804
 80176a8:	1ff1e808 	.word	0x1ff1e808
 80176ac:	240001aa 	.word	0x240001aa
 80176b0:	240001ba 	.word	0x240001ba

080176b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80176b4:	b480      	push	{r7}
 80176b6:	b087      	sub	sp, #28
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	60f8      	str	r0, [r7, #12]
 80176bc:	60b9      	str	r1, [r7, #8]
 80176be:	4613      	mov	r3, r2
 80176c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80176c2:	2300      	movs	r3, #0
 80176c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80176c6:	2300      	movs	r3, #0
 80176c8:	75fb      	strb	r3, [r7, #23]
 80176ca:	e027      	b.n	801771c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	0f1b      	lsrs	r3, r3, #28
 80176d0:	2b09      	cmp	r3, #9
 80176d2:	d80b      	bhi.n	80176ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	0f1b      	lsrs	r3, r3, #28
 80176d8:	b2da      	uxtb	r2, r3
 80176da:	7dfb      	ldrb	r3, [r7, #23]
 80176dc:	005b      	lsls	r3, r3, #1
 80176de:	4619      	mov	r1, r3
 80176e0:	68bb      	ldr	r3, [r7, #8]
 80176e2:	440b      	add	r3, r1
 80176e4:	3230      	adds	r2, #48	@ 0x30
 80176e6:	b2d2      	uxtb	r2, r2
 80176e8:	701a      	strb	r2, [r3, #0]
 80176ea:	e00a      	b.n	8017702 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	0f1b      	lsrs	r3, r3, #28
 80176f0:	b2da      	uxtb	r2, r3
 80176f2:	7dfb      	ldrb	r3, [r7, #23]
 80176f4:	005b      	lsls	r3, r3, #1
 80176f6:	4619      	mov	r1, r3
 80176f8:	68bb      	ldr	r3, [r7, #8]
 80176fa:	440b      	add	r3, r1
 80176fc:	3237      	adds	r2, #55	@ 0x37
 80176fe:	b2d2      	uxtb	r2, r2
 8017700:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	011b      	lsls	r3, r3, #4
 8017706:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017708:	7dfb      	ldrb	r3, [r7, #23]
 801770a:	005b      	lsls	r3, r3, #1
 801770c:	3301      	adds	r3, #1
 801770e:	68ba      	ldr	r2, [r7, #8]
 8017710:	4413      	add	r3, r2
 8017712:	2200      	movs	r2, #0
 8017714:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017716:	7dfb      	ldrb	r3, [r7, #23]
 8017718:	3301      	adds	r3, #1
 801771a:	75fb      	strb	r3, [r7, #23]
 801771c:	7dfa      	ldrb	r2, [r7, #23]
 801771e:	79fb      	ldrb	r3, [r7, #7]
 8017720:	429a      	cmp	r2, r3
 8017722:	d3d3      	bcc.n	80176cc <IntToUnicode+0x18>
  }
}
 8017724:	bf00      	nop
 8017726:	bf00      	nop
 8017728:	371c      	adds	r7, #28
 801772a:	46bd      	mov	sp, r7
 801772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017730:	4770      	bx	lr
	...

08017734 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017734:	b580      	push	{r7, lr}
 8017736:	b0bc      	sub	sp, #240	@ 0xf0
 8017738:	af00      	add	r7, sp, #0
 801773a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801773c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8017740:	2200      	movs	r2, #0
 8017742:	601a      	str	r2, [r3, #0]
 8017744:	605a      	str	r2, [r3, #4]
 8017746:	609a      	str	r2, [r3, #8]
 8017748:	60da      	str	r2, [r3, #12]
 801774a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801774c:	f107 0318 	add.w	r3, r7, #24
 8017750:	22c0      	movs	r2, #192	@ 0xc0
 8017752:	2100      	movs	r1, #0
 8017754:	4618      	mov	r0, r3
 8017756:	f000 fcc8 	bl	80180ea <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	4a5c      	ldr	r2, [pc, #368]	@ (80178d0 <HAL_PCD_MspInit+0x19c>)
 8017760:	4293      	cmp	r3, r2
 8017762:	d152      	bne.n	801780a <HAL_PCD_MspInit+0xd6>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017764:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017768:	f04f 0300 	mov.w	r3, #0
 801776c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8017770:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8017774:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017778:	f107 0318 	add.w	r3, r7, #24
 801777c:	4618      	mov	r0, r3
 801777e:	f7f3 f803 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 8017782:	4603      	mov	r3, r0
 8017784:	2b00      	cmp	r3, #0
 8017786:	d001      	beq.n	801778c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8017788:	f7eb fb6c 	bl	8002e64 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801778c:	f7f1 ffc4 	bl	8009718 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017790:	4b50      	ldr	r3, [pc, #320]	@ (80178d4 <HAL_PCD_MspInit+0x1a0>)
 8017792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017796:	4a4f      	ldr	r2, [pc, #316]	@ (80178d4 <HAL_PCD_MspInit+0x1a0>)
 8017798:	f043 0301 	orr.w	r3, r3, #1
 801779c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80177a0:	4b4c      	ldr	r3, [pc, #304]	@ (80178d4 <HAL_PCD_MspInit+0x1a0>)
 80177a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80177a6:	f003 0301 	and.w	r3, r3, #1
 80177aa:	617b      	str	r3, [r7, #20]
 80177ac:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80177ae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80177b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80177b6:	2302      	movs	r3, #2
 80177b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80177bc:	2300      	movs	r3, #0
 80177be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80177c2:	2300      	movs	r3, #0
 80177c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80177c8:	230a      	movs	r3, #10
 80177ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80177ce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80177d2:	4619      	mov	r1, r3
 80177d4:	4840      	ldr	r0, [pc, #256]	@ (80178d8 <HAL_PCD_MspInit+0x1a4>)
 80177d6:	f7f0 f9c1 	bl	8007b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80177da:	4b3e      	ldr	r3, [pc, #248]	@ (80178d4 <HAL_PCD_MspInit+0x1a0>)
 80177dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80177e0:	4a3c      	ldr	r2, [pc, #240]	@ (80178d4 <HAL_PCD_MspInit+0x1a0>)
 80177e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80177e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80177ea:	4b3a      	ldr	r3, [pc, #232]	@ (80178d4 <HAL_PCD_MspInit+0x1a0>)
 80177ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80177f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80177f4:	613b      	str	r3, [r7, #16]
 80177f6:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80177f8:	2200      	movs	r2, #0
 80177fa:	2105      	movs	r1, #5
 80177fc:	2065      	movs	r0, #101	@ 0x65
 80177fe:	f7ed f9ba 	bl	8004b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017802:	2065      	movs	r0, #101	@ 0x65
 8017804:	f7ed f9d1 	bl	8004baa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8017808:	e05e      	b.n	80178c8 <HAL_PCD_MspInit+0x194>
  else if(pcdHandle->Instance==USB_OTG_HS)
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	4a33      	ldr	r2, [pc, #204]	@ (80178dc <HAL_PCD_MspInit+0x1a8>)
 8017810:	4293      	cmp	r3, r2
 8017812:	d159      	bne.n	80178c8 <HAL_PCD_MspInit+0x194>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017814:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017818:	f04f 0300 	mov.w	r3, #0
 801781c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8017820:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8017824:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017828:	f107 0318 	add.w	r3, r7, #24
 801782c:	4618      	mov	r0, r3
 801782e:	f7f2 ffab 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 8017832:	4603      	mov	r3, r0
 8017834:	2b00      	cmp	r3, #0
 8017836:	d001      	beq.n	801783c <HAL_PCD_MspInit+0x108>
      Error_Handler();
 8017838:	f7eb fb14 	bl	8002e64 <Error_Handler>
    HAL_PWREx_EnableUSBVoltageDetector();
 801783c:	f7f1 ff6c 	bl	8009718 <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017840:	4b24      	ldr	r3, [pc, #144]	@ (80178d4 <HAL_PCD_MspInit+0x1a0>)
 8017842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017846:	4a23      	ldr	r2, [pc, #140]	@ (80178d4 <HAL_PCD_MspInit+0x1a0>)
 8017848:	f043 0302 	orr.w	r3, r3, #2
 801784c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8017850:	4b20      	ldr	r3, [pc, #128]	@ (80178d4 <HAL_PCD_MspInit+0x1a0>)
 8017852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017856:	f003 0302 	and.w	r3, r3, #2
 801785a:	60fb      	str	r3, [r7, #12]
 801785c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 801785e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8017862:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017866:	2302      	movs	r3, #2
 8017868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801786c:	2300      	movs	r3, #0
 801786e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017872:	2300      	movs	r3, #0
 8017874:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 8017878:	230c      	movs	r3, #12
 801787a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801787e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8017882:	4619      	mov	r1, r3
 8017884:	4816      	ldr	r0, [pc, #88]	@ (80178e0 <HAL_PCD_MspInit+0x1ac>)
 8017886:	f7f0 f969 	bl	8007b5c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801788a:	4b12      	ldr	r3, [pc, #72]	@ (80178d4 <HAL_PCD_MspInit+0x1a0>)
 801788c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017890:	4a10      	ldr	r2, [pc, #64]	@ (80178d4 <HAL_PCD_MspInit+0x1a0>)
 8017892:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8017896:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801789a:	4b0e      	ldr	r3, [pc, #56]	@ (80178d4 <HAL_PCD_MspInit+0x1a0>)
 801789c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80178a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80178a4:	60bb      	str	r3, [r7, #8]
 80178a6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 5, 0);
 80178a8:	2200      	movs	r2, #0
 80178aa:	2105      	movs	r1, #5
 80178ac:	204a      	movs	r0, #74	@ 0x4a
 80178ae:	f7ed f962 	bl	8004b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 80178b2:	204a      	movs	r0, #74	@ 0x4a
 80178b4:	f7ed f979 	bl	8004baa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 5, 0);
 80178b8:	2200      	movs	r2, #0
 80178ba:	2105      	movs	r1, #5
 80178bc:	204b      	movs	r0, #75	@ 0x4b
 80178be:	f7ed f95a 	bl	8004b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 80178c2:	204b      	movs	r0, #75	@ 0x4b
 80178c4:	f7ed f971 	bl	8004baa <HAL_NVIC_EnableIRQ>
}
 80178c8:	bf00      	nop
 80178ca:	37f0      	adds	r7, #240	@ 0xf0
 80178cc:	46bd      	mov	sp, r7
 80178ce:	bd80      	pop	{r7, pc}
 80178d0:	40080000 	.word	0x40080000
 80178d4:	58024400 	.word	0x58024400
 80178d8:	58020000 	.word	0x58020000
 80178dc:	40040000 	.word	0x40040000
 80178e0:	58020400 	.word	0x58020400

080178e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b082      	sub	sp, #8
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80178f8:	4619      	mov	r1, r3
 80178fa:	4610      	mov	r0, r2
 80178fc:	f7fb fa43 	bl	8012d86 <USBD_LL_SetupStage>
}
 8017900:	bf00      	nop
 8017902:	3708      	adds	r7, #8
 8017904:	46bd      	mov	sp, r7
 8017906:	bd80      	pop	{r7, pc}

08017908 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b082      	sub	sp, #8
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
 8017910:	460b      	mov	r3, r1
 8017912:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801791a:	78fa      	ldrb	r2, [r7, #3]
 801791c:	6879      	ldr	r1, [r7, #4]
 801791e:	4613      	mov	r3, r2
 8017920:	00db      	lsls	r3, r3, #3
 8017922:	4413      	add	r3, r2
 8017924:	009b      	lsls	r3, r3, #2
 8017926:	440b      	add	r3, r1
 8017928:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801792c:	681a      	ldr	r2, [r3, #0]
 801792e:	78fb      	ldrb	r3, [r7, #3]
 8017930:	4619      	mov	r1, r3
 8017932:	f7fb fa7d 	bl	8012e30 <USBD_LL_DataOutStage>
}
 8017936:	bf00      	nop
 8017938:	3708      	adds	r7, #8
 801793a:	46bd      	mov	sp, r7
 801793c:	bd80      	pop	{r7, pc}

0801793e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801793e:	b580      	push	{r7, lr}
 8017940:	b082      	sub	sp, #8
 8017942:	af00      	add	r7, sp, #0
 8017944:	6078      	str	r0, [r7, #4]
 8017946:	460b      	mov	r3, r1
 8017948:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017950:	78fa      	ldrb	r2, [r7, #3]
 8017952:	6879      	ldr	r1, [r7, #4]
 8017954:	4613      	mov	r3, r2
 8017956:	00db      	lsls	r3, r3, #3
 8017958:	4413      	add	r3, r2
 801795a:	009b      	lsls	r3, r3, #2
 801795c:	440b      	add	r3, r1
 801795e:	3320      	adds	r3, #32
 8017960:	681a      	ldr	r2, [r3, #0]
 8017962:	78fb      	ldrb	r3, [r7, #3]
 8017964:	4619      	mov	r1, r3
 8017966:	f7fb fb16 	bl	8012f96 <USBD_LL_DataInStage>
}
 801796a:	bf00      	nop
 801796c:	3708      	adds	r7, #8
 801796e:	46bd      	mov	sp, r7
 8017970:	bd80      	pop	{r7, pc}

08017972 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017972:	b580      	push	{r7, lr}
 8017974:	b082      	sub	sp, #8
 8017976:	af00      	add	r7, sp, #0
 8017978:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017980:	4618      	mov	r0, r3
 8017982:	f7fb fc50 	bl	8013226 <USBD_LL_SOF>
}
 8017986:	bf00      	nop
 8017988:	3708      	adds	r7, #8
 801798a:	46bd      	mov	sp, r7
 801798c:	bd80      	pop	{r7, pc}

0801798e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801798e:	b580      	push	{r7, lr}
 8017990:	b084      	sub	sp, #16
 8017992:	af00      	add	r7, sp, #0
 8017994:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017996:	2301      	movs	r3, #1
 8017998:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	79db      	ldrb	r3, [r3, #7]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d102      	bne.n	80179a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80179a2:	2300      	movs	r3, #0
 80179a4:	73fb      	strb	r3, [r7, #15]
 80179a6:	e008      	b.n	80179ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	79db      	ldrb	r3, [r3, #7]
 80179ac:	2b02      	cmp	r3, #2
 80179ae:	d102      	bne.n	80179b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80179b0:	2301      	movs	r3, #1
 80179b2:	73fb      	strb	r3, [r7, #15]
 80179b4:	e001      	b.n	80179ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80179b6:	f7eb fa55 	bl	8002e64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80179c0:	7bfa      	ldrb	r2, [r7, #15]
 80179c2:	4611      	mov	r1, r2
 80179c4:	4618      	mov	r0, r3
 80179c6:	f7fb fbea 	bl	801319e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80179d0:	4618      	mov	r0, r3
 80179d2:	f7fb fb92 	bl	80130fa <USBD_LL_Reset>
}
 80179d6:	bf00      	nop
 80179d8:	3710      	adds	r7, #16
 80179da:	46bd      	mov	sp, r7
 80179dc:	bd80      	pop	{r7, pc}
	...

080179e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b082      	sub	sp, #8
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80179ee:	4618      	mov	r0, r3
 80179f0:	f7fb fbe5 	bl	80131be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	687a      	ldr	r2, [r7, #4]
 8017a00:	6812      	ldr	r2, [r2, #0]
 8017a02:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017a06:	f043 0301 	orr.w	r3, r3, #1
 8017a0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	7adb      	ldrb	r3, [r3, #11]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d005      	beq.n	8017a20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017a14:	4b04      	ldr	r3, [pc, #16]	@ (8017a28 <HAL_PCD_SuspendCallback+0x48>)
 8017a16:	691b      	ldr	r3, [r3, #16]
 8017a18:	4a03      	ldr	r2, [pc, #12]	@ (8017a28 <HAL_PCD_SuspendCallback+0x48>)
 8017a1a:	f043 0306 	orr.w	r3, r3, #6
 8017a1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017a20:	bf00      	nop
 8017a22:	3708      	adds	r7, #8
 8017a24:	46bd      	mov	sp, r7
 8017a26:	bd80      	pop	{r7, pc}
 8017a28:	e000ed00 	.word	0xe000ed00

08017a2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b082      	sub	sp, #8
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	f7fb fbdb 	bl	80131f6 <USBD_LL_Resume>
}
 8017a40:	bf00      	nop
 8017a42:	3708      	adds	r7, #8
 8017a44:	46bd      	mov	sp, r7
 8017a46:	bd80      	pop	{r7, pc}

08017a48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a48:	b580      	push	{r7, lr}
 8017a4a:	b082      	sub	sp, #8
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	6078      	str	r0, [r7, #4]
 8017a50:	460b      	mov	r3, r1
 8017a52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017a5a:	78fa      	ldrb	r2, [r7, #3]
 8017a5c:	4611      	mov	r1, r2
 8017a5e:	4618      	mov	r0, r3
 8017a60:	f7fb fc33 	bl	80132ca <USBD_LL_IsoOUTIncomplete>
}
 8017a64:	bf00      	nop
 8017a66:	3708      	adds	r7, #8
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	bd80      	pop	{r7, pc}

08017a6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b082      	sub	sp, #8
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
 8017a74:	460b      	mov	r3, r1
 8017a76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017a7e:	78fa      	ldrb	r2, [r7, #3]
 8017a80:	4611      	mov	r1, r2
 8017a82:	4618      	mov	r0, r3
 8017a84:	f7fb fbef 	bl	8013266 <USBD_LL_IsoINIncomplete>
}
 8017a88:	bf00      	nop
 8017a8a:	3708      	adds	r7, #8
 8017a8c:	46bd      	mov	sp, r7
 8017a8e:	bd80      	pop	{r7, pc}

08017a90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b082      	sub	sp, #8
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	f7fb fc45 	bl	801332e <USBD_LL_DevConnected>
}
 8017aa4:	bf00      	nop
 8017aa6:	3708      	adds	r7, #8
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	bd80      	pop	{r7, pc}

08017aac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b082      	sub	sp, #8
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017aba:	4618      	mov	r0, r3
 8017abc:	f7fb fc42 	bl	8013344 <USBD_LL_DevDisconnected>
}
 8017ac0:	bf00      	nop
 8017ac2:	3708      	adds	r7, #8
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	bd80      	pop	{r7, pc}

08017ac8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b082      	sub	sp, #8
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	781b      	ldrb	r3, [r3, #0]
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d13e      	bne.n	8017b56 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017ad8:	4a21      	ldr	r2, [pc, #132]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017ae4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017aea:	4a1e      	ldr	r2, [pc, #120]	@ (8017b64 <USBD_LL_Init+0x9c>)
 8017aec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8017aee:	4b1c      	ldr	r3, [pc, #112]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017af0:	2209      	movs	r2, #9
 8017af2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017af4:	4b1a      	ldr	r3, [pc, #104]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017af6:	2202      	movs	r2, #2
 8017af8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017afa:	4b19      	ldr	r3, [pc, #100]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017afc:	2200      	movs	r2, #0
 8017afe:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017b00:	4b17      	ldr	r3, [pc, #92]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017b02:	2202      	movs	r2, #2
 8017b04:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017b06:	4b16      	ldr	r3, [pc, #88]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017b08:	2200      	movs	r2, #0
 8017b0a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017b0c:	4b14      	ldr	r3, [pc, #80]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017b0e:	2200      	movs	r2, #0
 8017b10:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017b12:	4b13      	ldr	r3, [pc, #76]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017b14:	2200      	movs	r2, #0
 8017b16:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8017b18:	4b11      	ldr	r3, [pc, #68]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017b1e:	4b10      	ldr	r3, [pc, #64]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017b20:	2200      	movs	r2, #0
 8017b22:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017b24:	4b0e      	ldr	r3, [pc, #56]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017b26:	2200      	movs	r2, #0
 8017b28:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017b2a:	480d      	ldr	r0, [pc, #52]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017b2c:	f7f0 fb1b 	bl	8008166 <HAL_PCD_Init>
 8017b30:	4603      	mov	r3, r0
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d001      	beq.n	8017b3a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017b36:	f7eb f995 	bl	8002e64 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017b3a:	2180      	movs	r1, #128	@ 0x80
 8017b3c:	4808      	ldr	r0, [pc, #32]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017b3e:	f7f1 fd70 	bl	8009622 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017b42:	2240      	movs	r2, #64	@ 0x40
 8017b44:	2100      	movs	r1, #0
 8017b46:	4806      	ldr	r0, [pc, #24]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017b48:	f7f1 fd24 	bl	8009594 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017b4c:	2280      	movs	r2, #128	@ 0x80
 8017b4e:	2101      	movs	r1, #1
 8017b50:	4803      	ldr	r0, [pc, #12]	@ (8017b60 <USBD_LL_Init+0x98>)
 8017b52:	f7f1 fd1f 	bl	8009594 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8017b56:	2300      	movs	r3, #0
}
 8017b58:	4618      	mov	r0, r3
 8017b5a:	3708      	adds	r7, #8
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	bd80      	pop	{r7, pc}
 8017b60:	240286d8 	.word	0x240286d8
 8017b64:	40080000 	.word	0x40080000

08017b68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b084      	sub	sp, #16
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b70:	2300      	movs	r3, #0
 8017b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b74:	2300      	movs	r3, #0
 8017b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017b7e:	4618      	mov	r0, r3
 8017b80:	f7f0 fbfd 	bl	800837e <HAL_PCD_Start>
 8017b84:	4603      	mov	r3, r0
 8017b86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b88:	7bfb      	ldrb	r3, [r7, #15]
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	f000 f942 	bl	8017e14 <USBD_Get_USB_Status>
 8017b90:	4603      	mov	r3, r0
 8017b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b96:	4618      	mov	r0, r3
 8017b98:	3710      	adds	r7, #16
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	bd80      	pop	{r7, pc}

08017b9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017b9e:	b580      	push	{r7, lr}
 8017ba0:	b084      	sub	sp, #16
 8017ba2:	af00      	add	r7, sp, #0
 8017ba4:	6078      	str	r0, [r7, #4]
 8017ba6:	4608      	mov	r0, r1
 8017ba8:	4611      	mov	r1, r2
 8017baa:	461a      	mov	r2, r3
 8017bac:	4603      	mov	r3, r0
 8017bae:	70fb      	strb	r3, [r7, #3]
 8017bb0:	460b      	mov	r3, r1
 8017bb2:	70bb      	strb	r3, [r7, #2]
 8017bb4:	4613      	mov	r3, r2
 8017bb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bb8:	2300      	movs	r3, #0
 8017bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017bc6:	78bb      	ldrb	r3, [r7, #2]
 8017bc8:	883a      	ldrh	r2, [r7, #0]
 8017bca:	78f9      	ldrb	r1, [r7, #3]
 8017bcc:	f7f1 f8fe 	bl	8008dcc <HAL_PCD_EP_Open>
 8017bd0:	4603      	mov	r3, r0
 8017bd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017bd4:	7bfb      	ldrb	r3, [r7, #15]
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	f000 f91c 	bl	8017e14 <USBD_Get_USB_Status>
 8017bdc:	4603      	mov	r3, r0
 8017bde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017be0:	7bbb      	ldrb	r3, [r7, #14]
}
 8017be2:	4618      	mov	r0, r3
 8017be4:	3710      	adds	r7, #16
 8017be6:	46bd      	mov	sp, r7
 8017be8:	bd80      	pop	{r7, pc}

08017bea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017bea:	b580      	push	{r7, lr}
 8017bec:	b084      	sub	sp, #16
 8017bee:	af00      	add	r7, sp, #0
 8017bf0:	6078      	str	r0, [r7, #4]
 8017bf2:	460b      	mov	r3, r1
 8017bf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017c04:	78fa      	ldrb	r2, [r7, #3]
 8017c06:	4611      	mov	r1, r2
 8017c08:	4618      	mov	r0, r3
 8017c0a:	f7f1 f947 	bl	8008e9c <HAL_PCD_EP_Close>
 8017c0e:	4603      	mov	r3, r0
 8017c10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c12:	7bfb      	ldrb	r3, [r7, #15]
 8017c14:	4618      	mov	r0, r3
 8017c16:	f000 f8fd 	bl	8017e14 <USBD_Get_USB_Status>
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c20:	4618      	mov	r0, r3
 8017c22:	3710      	adds	r7, #16
 8017c24:	46bd      	mov	sp, r7
 8017c26:	bd80      	pop	{r7, pc}

08017c28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c28:	b580      	push	{r7, lr}
 8017c2a:	b084      	sub	sp, #16
 8017c2c:	af00      	add	r7, sp, #0
 8017c2e:	6078      	str	r0, [r7, #4]
 8017c30:	460b      	mov	r3, r1
 8017c32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c34:	2300      	movs	r3, #0
 8017c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c38:	2300      	movs	r3, #0
 8017c3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017c42:	78fa      	ldrb	r2, [r7, #3]
 8017c44:	4611      	mov	r1, r2
 8017c46:	4618      	mov	r0, r3
 8017c48:	f7f1 f9ff 	bl	800904a <HAL_PCD_EP_SetStall>
 8017c4c:	4603      	mov	r3, r0
 8017c4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c50:	7bfb      	ldrb	r3, [r7, #15]
 8017c52:	4618      	mov	r0, r3
 8017c54:	f000 f8de 	bl	8017e14 <USBD_Get_USB_Status>
 8017c58:	4603      	mov	r3, r0
 8017c5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c5e:	4618      	mov	r0, r3
 8017c60:	3710      	adds	r7, #16
 8017c62:	46bd      	mov	sp, r7
 8017c64:	bd80      	pop	{r7, pc}

08017c66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c66:	b580      	push	{r7, lr}
 8017c68:	b084      	sub	sp, #16
 8017c6a:	af00      	add	r7, sp, #0
 8017c6c:	6078      	str	r0, [r7, #4]
 8017c6e:	460b      	mov	r3, r1
 8017c70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c72:	2300      	movs	r3, #0
 8017c74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c76:	2300      	movs	r3, #0
 8017c78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017c80:	78fa      	ldrb	r2, [r7, #3]
 8017c82:	4611      	mov	r1, r2
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7f1 fa43 	bl	8009110 <HAL_PCD_EP_ClrStall>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c8e:	7bfb      	ldrb	r3, [r7, #15]
 8017c90:	4618      	mov	r0, r3
 8017c92:	f000 f8bf 	bl	8017e14 <USBD_Get_USB_Status>
 8017c96:	4603      	mov	r3, r0
 8017c98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	3710      	adds	r7, #16
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	bd80      	pop	{r7, pc}

08017ca4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ca4:	b480      	push	{r7}
 8017ca6:	b085      	sub	sp, #20
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
 8017cac:	460b      	mov	r3, r1
 8017cae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017cb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017cb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	da0b      	bge.n	8017cd8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017cc0:	78fb      	ldrb	r3, [r7, #3]
 8017cc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017cc6:	68f9      	ldr	r1, [r7, #12]
 8017cc8:	4613      	mov	r3, r2
 8017cca:	00db      	lsls	r3, r3, #3
 8017ccc:	4413      	add	r3, r2
 8017cce:	009b      	lsls	r3, r3, #2
 8017cd0:	440b      	add	r3, r1
 8017cd2:	3316      	adds	r3, #22
 8017cd4:	781b      	ldrb	r3, [r3, #0]
 8017cd6:	e00b      	b.n	8017cf0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017cd8:	78fb      	ldrb	r3, [r7, #3]
 8017cda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017cde:	68f9      	ldr	r1, [r7, #12]
 8017ce0:	4613      	mov	r3, r2
 8017ce2:	00db      	lsls	r3, r3, #3
 8017ce4:	4413      	add	r3, r2
 8017ce6:	009b      	lsls	r3, r3, #2
 8017ce8:	440b      	add	r3, r1
 8017cea:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8017cee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017cf0:	4618      	mov	r0, r3
 8017cf2:	3714      	adds	r7, #20
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cfa:	4770      	bx	lr

08017cfc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b084      	sub	sp, #16
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
 8017d04:	460b      	mov	r3, r1
 8017d06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d08:	2300      	movs	r3, #0
 8017d0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017d16:	78fa      	ldrb	r2, [r7, #3]
 8017d18:	4611      	mov	r1, r2
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	f7f1 f832 	bl	8008d84 <HAL_PCD_SetAddress>
 8017d20:	4603      	mov	r3, r0
 8017d22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d24:	7bfb      	ldrb	r3, [r7, #15]
 8017d26:	4618      	mov	r0, r3
 8017d28:	f000 f874 	bl	8017e14 <USBD_Get_USB_Status>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d30:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d32:	4618      	mov	r0, r3
 8017d34:	3710      	adds	r7, #16
 8017d36:	46bd      	mov	sp, r7
 8017d38:	bd80      	pop	{r7, pc}

08017d3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017d3a:	b580      	push	{r7, lr}
 8017d3c:	b086      	sub	sp, #24
 8017d3e:	af00      	add	r7, sp, #0
 8017d40:	60f8      	str	r0, [r7, #12]
 8017d42:	607a      	str	r2, [r7, #4]
 8017d44:	603b      	str	r3, [r7, #0]
 8017d46:	460b      	mov	r3, r1
 8017d48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d4e:	2300      	movs	r3, #0
 8017d50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017d58:	7af9      	ldrb	r1, [r7, #11]
 8017d5a:	683b      	ldr	r3, [r7, #0]
 8017d5c:	687a      	ldr	r2, [r7, #4]
 8017d5e:	f7f1 f93a 	bl	8008fd6 <HAL_PCD_EP_Transmit>
 8017d62:	4603      	mov	r3, r0
 8017d64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d66:	7dfb      	ldrb	r3, [r7, #23]
 8017d68:	4618      	mov	r0, r3
 8017d6a:	f000 f853 	bl	8017e14 <USBD_Get_USB_Status>
 8017d6e:	4603      	mov	r3, r0
 8017d70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017d72:	7dbb      	ldrb	r3, [r7, #22]
}
 8017d74:	4618      	mov	r0, r3
 8017d76:	3718      	adds	r7, #24
 8017d78:	46bd      	mov	sp, r7
 8017d7a:	bd80      	pop	{r7, pc}

08017d7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017d7c:	b580      	push	{r7, lr}
 8017d7e:	b086      	sub	sp, #24
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	60f8      	str	r0, [r7, #12]
 8017d84:	607a      	str	r2, [r7, #4]
 8017d86:	603b      	str	r3, [r7, #0]
 8017d88:	460b      	mov	r3, r1
 8017d8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d90:	2300      	movs	r3, #0
 8017d92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017d9a:	7af9      	ldrb	r1, [r7, #11]
 8017d9c:	683b      	ldr	r3, [r7, #0]
 8017d9e:	687a      	ldr	r2, [r7, #4]
 8017da0:	f7f1 f8c6 	bl	8008f30 <HAL_PCD_EP_Receive>
 8017da4:	4603      	mov	r3, r0
 8017da6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017da8:	7dfb      	ldrb	r3, [r7, #23]
 8017daa:	4618      	mov	r0, r3
 8017dac:	f000 f832 	bl	8017e14 <USBD_Get_USB_Status>
 8017db0:	4603      	mov	r3, r0
 8017db2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017db4:	7dbb      	ldrb	r3, [r7, #22]
}
 8017db6:	4618      	mov	r0, r3
 8017db8:	3718      	adds	r7, #24
 8017dba:	46bd      	mov	sp, r7
 8017dbc:	bd80      	pop	{r7, pc}

08017dbe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017dbe:	b580      	push	{r7, lr}
 8017dc0:	b082      	sub	sp, #8
 8017dc2:	af00      	add	r7, sp, #0
 8017dc4:	6078      	str	r0, [r7, #4]
 8017dc6:	460b      	mov	r3, r1
 8017dc8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017dd0:	78fa      	ldrb	r2, [r7, #3]
 8017dd2:	4611      	mov	r1, r2
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	f7f1 f8e6 	bl	8008fa6 <HAL_PCD_EP_GetRxCount>
 8017dda:	4603      	mov	r3, r0
}
 8017ddc:	4618      	mov	r0, r3
 8017dde:	3708      	adds	r7, #8
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bd80      	pop	{r7, pc}

08017de4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017de4:	b480      	push	{r7}
 8017de6:	b083      	sub	sp, #12
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017dec:	4b03      	ldr	r3, [pc, #12]	@ (8017dfc <USBD_static_malloc+0x18>)
}
 8017dee:	4618      	mov	r0, r3
 8017df0:	370c      	adds	r7, #12
 8017df2:	46bd      	mov	sp, r7
 8017df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df8:	4770      	bx	lr
 8017dfa:	bf00      	nop
 8017dfc:	24028bbc 	.word	0x24028bbc

08017e00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017e00:	b480      	push	{r7}
 8017e02:	b083      	sub	sp, #12
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017e08:	bf00      	nop
 8017e0a:	370c      	adds	r7, #12
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e12:	4770      	bx	lr

08017e14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017e14:	b480      	push	{r7}
 8017e16:	b085      	sub	sp, #20
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e1e:	2300      	movs	r3, #0
 8017e20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017e22:	79fb      	ldrb	r3, [r7, #7]
 8017e24:	2b03      	cmp	r3, #3
 8017e26:	d817      	bhi.n	8017e58 <USBD_Get_USB_Status+0x44>
 8017e28:	a201      	add	r2, pc, #4	@ (adr r2, 8017e30 <USBD_Get_USB_Status+0x1c>)
 8017e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e2e:	bf00      	nop
 8017e30:	08017e41 	.word	0x08017e41
 8017e34:	08017e47 	.word	0x08017e47
 8017e38:	08017e4d 	.word	0x08017e4d
 8017e3c:	08017e53 	.word	0x08017e53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017e40:	2300      	movs	r3, #0
 8017e42:	73fb      	strb	r3, [r7, #15]
    break;
 8017e44:	e00b      	b.n	8017e5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017e46:	2303      	movs	r3, #3
 8017e48:	73fb      	strb	r3, [r7, #15]
    break;
 8017e4a:	e008      	b.n	8017e5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017e4c:	2301      	movs	r3, #1
 8017e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8017e50:	e005      	b.n	8017e5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017e52:	2303      	movs	r3, #3
 8017e54:	73fb      	strb	r3, [r7, #15]
    break;
 8017e56:	e002      	b.n	8017e5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017e58:	2303      	movs	r3, #3
 8017e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8017e5c:	bf00      	nop
  }
  return usb_status;
 8017e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e60:	4618      	mov	r0, r3
 8017e62:	3714      	adds	r7, #20
 8017e64:	46bd      	mov	sp, r7
 8017e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6a:	4770      	bx	lr

08017e6c <std>:
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	b510      	push	{r4, lr}
 8017e70:	4604      	mov	r4, r0
 8017e72:	e9c0 3300 	strd	r3, r3, [r0]
 8017e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017e7a:	6083      	str	r3, [r0, #8]
 8017e7c:	8181      	strh	r1, [r0, #12]
 8017e7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017e80:	81c2      	strh	r2, [r0, #14]
 8017e82:	6183      	str	r3, [r0, #24]
 8017e84:	4619      	mov	r1, r3
 8017e86:	2208      	movs	r2, #8
 8017e88:	305c      	adds	r0, #92	@ 0x5c
 8017e8a:	f000 f92e 	bl	80180ea <memset>
 8017e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8017ec4 <std+0x58>)
 8017e90:	6263      	str	r3, [r4, #36]	@ 0x24
 8017e92:	4b0d      	ldr	r3, [pc, #52]	@ (8017ec8 <std+0x5c>)
 8017e94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017e96:	4b0d      	ldr	r3, [pc, #52]	@ (8017ecc <std+0x60>)
 8017e98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8017ed0 <std+0x64>)
 8017e9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8017e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8017ed4 <std+0x68>)
 8017ea0:	6224      	str	r4, [r4, #32]
 8017ea2:	429c      	cmp	r4, r3
 8017ea4:	d006      	beq.n	8017eb4 <std+0x48>
 8017ea6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017eaa:	4294      	cmp	r4, r2
 8017eac:	d002      	beq.n	8017eb4 <std+0x48>
 8017eae:	33d0      	adds	r3, #208	@ 0xd0
 8017eb0:	429c      	cmp	r4, r3
 8017eb2:	d105      	bne.n	8017ec0 <std+0x54>
 8017eb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ebc:	f000 b9e4 	b.w	8018288 <__retarget_lock_init_recursive>
 8017ec0:	bd10      	pop	{r4, pc}
 8017ec2:	bf00      	nop
 8017ec4:	08018065 	.word	0x08018065
 8017ec8:	08018087 	.word	0x08018087
 8017ecc:	080180bf 	.word	0x080180bf
 8017ed0:	080180e3 	.word	0x080180e3
 8017ed4:	24028ddc 	.word	0x24028ddc

08017ed8 <stdio_exit_handler>:
 8017ed8:	4a02      	ldr	r2, [pc, #8]	@ (8017ee4 <stdio_exit_handler+0xc>)
 8017eda:	4903      	ldr	r1, [pc, #12]	@ (8017ee8 <stdio_exit_handler+0x10>)
 8017edc:	4803      	ldr	r0, [pc, #12]	@ (8017eec <stdio_exit_handler+0x14>)
 8017ede:	f000 b869 	b.w	8017fb4 <_fwalk_sglue>
 8017ee2:	bf00      	nop
 8017ee4:	240001c4 	.word	0x240001c4
 8017ee8:	08018df5 	.word	0x08018df5
 8017eec:	240001d4 	.word	0x240001d4

08017ef0 <cleanup_stdio>:
 8017ef0:	6841      	ldr	r1, [r0, #4]
 8017ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8017f24 <cleanup_stdio+0x34>)
 8017ef4:	4299      	cmp	r1, r3
 8017ef6:	b510      	push	{r4, lr}
 8017ef8:	4604      	mov	r4, r0
 8017efa:	d001      	beq.n	8017f00 <cleanup_stdio+0x10>
 8017efc:	f000 ff7a 	bl	8018df4 <_fflush_r>
 8017f00:	68a1      	ldr	r1, [r4, #8]
 8017f02:	4b09      	ldr	r3, [pc, #36]	@ (8017f28 <cleanup_stdio+0x38>)
 8017f04:	4299      	cmp	r1, r3
 8017f06:	d002      	beq.n	8017f0e <cleanup_stdio+0x1e>
 8017f08:	4620      	mov	r0, r4
 8017f0a:	f000 ff73 	bl	8018df4 <_fflush_r>
 8017f0e:	68e1      	ldr	r1, [r4, #12]
 8017f10:	4b06      	ldr	r3, [pc, #24]	@ (8017f2c <cleanup_stdio+0x3c>)
 8017f12:	4299      	cmp	r1, r3
 8017f14:	d004      	beq.n	8017f20 <cleanup_stdio+0x30>
 8017f16:	4620      	mov	r0, r4
 8017f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f1c:	f000 bf6a 	b.w	8018df4 <_fflush_r>
 8017f20:	bd10      	pop	{r4, pc}
 8017f22:	bf00      	nop
 8017f24:	24028ddc 	.word	0x24028ddc
 8017f28:	24028e44 	.word	0x24028e44
 8017f2c:	24028eac 	.word	0x24028eac

08017f30 <global_stdio_init.part.0>:
 8017f30:	b510      	push	{r4, lr}
 8017f32:	4b0b      	ldr	r3, [pc, #44]	@ (8017f60 <global_stdio_init.part.0+0x30>)
 8017f34:	4c0b      	ldr	r4, [pc, #44]	@ (8017f64 <global_stdio_init.part.0+0x34>)
 8017f36:	4a0c      	ldr	r2, [pc, #48]	@ (8017f68 <global_stdio_init.part.0+0x38>)
 8017f38:	601a      	str	r2, [r3, #0]
 8017f3a:	4620      	mov	r0, r4
 8017f3c:	2200      	movs	r2, #0
 8017f3e:	2104      	movs	r1, #4
 8017f40:	f7ff ff94 	bl	8017e6c <std>
 8017f44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017f48:	2201      	movs	r2, #1
 8017f4a:	2109      	movs	r1, #9
 8017f4c:	f7ff ff8e 	bl	8017e6c <std>
 8017f50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017f54:	2202      	movs	r2, #2
 8017f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f5a:	2112      	movs	r1, #18
 8017f5c:	f7ff bf86 	b.w	8017e6c <std>
 8017f60:	24028f14 	.word	0x24028f14
 8017f64:	24028ddc 	.word	0x24028ddc
 8017f68:	08017ed9 	.word	0x08017ed9

08017f6c <__sfp_lock_acquire>:
 8017f6c:	4801      	ldr	r0, [pc, #4]	@ (8017f74 <__sfp_lock_acquire+0x8>)
 8017f6e:	f000 b98c 	b.w	801828a <__retarget_lock_acquire_recursive>
 8017f72:	bf00      	nop
 8017f74:	24028f1d 	.word	0x24028f1d

08017f78 <__sfp_lock_release>:
 8017f78:	4801      	ldr	r0, [pc, #4]	@ (8017f80 <__sfp_lock_release+0x8>)
 8017f7a:	f000 b987 	b.w	801828c <__retarget_lock_release_recursive>
 8017f7e:	bf00      	nop
 8017f80:	24028f1d 	.word	0x24028f1d

08017f84 <__sinit>:
 8017f84:	b510      	push	{r4, lr}
 8017f86:	4604      	mov	r4, r0
 8017f88:	f7ff fff0 	bl	8017f6c <__sfp_lock_acquire>
 8017f8c:	6a23      	ldr	r3, [r4, #32]
 8017f8e:	b11b      	cbz	r3, 8017f98 <__sinit+0x14>
 8017f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f94:	f7ff bff0 	b.w	8017f78 <__sfp_lock_release>
 8017f98:	4b04      	ldr	r3, [pc, #16]	@ (8017fac <__sinit+0x28>)
 8017f9a:	6223      	str	r3, [r4, #32]
 8017f9c:	4b04      	ldr	r3, [pc, #16]	@ (8017fb0 <__sinit+0x2c>)
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d1f5      	bne.n	8017f90 <__sinit+0xc>
 8017fa4:	f7ff ffc4 	bl	8017f30 <global_stdio_init.part.0>
 8017fa8:	e7f2      	b.n	8017f90 <__sinit+0xc>
 8017faa:	bf00      	nop
 8017fac:	08017ef1 	.word	0x08017ef1
 8017fb0:	24028f14 	.word	0x24028f14

08017fb4 <_fwalk_sglue>:
 8017fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017fb8:	4607      	mov	r7, r0
 8017fba:	4688      	mov	r8, r1
 8017fbc:	4614      	mov	r4, r2
 8017fbe:	2600      	movs	r6, #0
 8017fc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017fc4:	f1b9 0901 	subs.w	r9, r9, #1
 8017fc8:	d505      	bpl.n	8017fd6 <_fwalk_sglue+0x22>
 8017fca:	6824      	ldr	r4, [r4, #0]
 8017fcc:	2c00      	cmp	r4, #0
 8017fce:	d1f7      	bne.n	8017fc0 <_fwalk_sglue+0xc>
 8017fd0:	4630      	mov	r0, r6
 8017fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017fd6:	89ab      	ldrh	r3, [r5, #12]
 8017fd8:	2b01      	cmp	r3, #1
 8017fda:	d907      	bls.n	8017fec <_fwalk_sglue+0x38>
 8017fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017fe0:	3301      	adds	r3, #1
 8017fe2:	d003      	beq.n	8017fec <_fwalk_sglue+0x38>
 8017fe4:	4629      	mov	r1, r5
 8017fe6:	4638      	mov	r0, r7
 8017fe8:	47c0      	blx	r8
 8017fea:	4306      	orrs	r6, r0
 8017fec:	3568      	adds	r5, #104	@ 0x68
 8017fee:	e7e9      	b.n	8017fc4 <_fwalk_sglue+0x10>

08017ff0 <iprintf>:
 8017ff0:	b40f      	push	{r0, r1, r2, r3}
 8017ff2:	b507      	push	{r0, r1, r2, lr}
 8017ff4:	4906      	ldr	r1, [pc, #24]	@ (8018010 <iprintf+0x20>)
 8017ff6:	ab04      	add	r3, sp, #16
 8017ff8:	6808      	ldr	r0, [r1, #0]
 8017ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ffe:	6881      	ldr	r1, [r0, #8]
 8018000:	9301      	str	r3, [sp, #4]
 8018002:	f000 fbcd 	bl	80187a0 <_vfiprintf_r>
 8018006:	b003      	add	sp, #12
 8018008:	f85d eb04 	ldr.w	lr, [sp], #4
 801800c:	b004      	add	sp, #16
 801800e:	4770      	bx	lr
 8018010:	240001d0 	.word	0x240001d0

08018014 <putchar>:
 8018014:	4b02      	ldr	r3, [pc, #8]	@ (8018020 <putchar+0xc>)
 8018016:	4601      	mov	r1, r0
 8018018:	6818      	ldr	r0, [r3, #0]
 801801a:	6882      	ldr	r2, [r0, #8]
 801801c:	f000 bf12 	b.w	8018e44 <_putc_r>
 8018020:	240001d0 	.word	0x240001d0

08018024 <siprintf>:
 8018024:	b40e      	push	{r1, r2, r3}
 8018026:	b500      	push	{lr}
 8018028:	b09c      	sub	sp, #112	@ 0x70
 801802a:	ab1d      	add	r3, sp, #116	@ 0x74
 801802c:	9002      	str	r0, [sp, #8]
 801802e:	9006      	str	r0, [sp, #24]
 8018030:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018034:	4809      	ldr	r0, [pc, #36]	@ (801805c <siprintf+0x38>)
 8018036:	9107      	str	r1, [sp, #28]
 8018038:	9104      	str	r1, [sp, #16]
 801803a:	4909      	ldr	r1, [pc, #36]	@ (8018060 <siprintf+0x3c>)
 801803c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018040:	9105      	str	r1, [sp, #20]
 8018042:	6800      	ldr	r0, [r0, #0]
 8018044:	9301      	str	r3, [sp, #4]
 8018046:	a902      	add	r1, sp, #8
 8018048:	f000 fa84 	bl	8018554 <_svfiprintf_r>
 801804c:	9b02      	ldr	r3, [sp, #8]
 801804e:	2200      	movs	r2, #0
 8018050:	701a      	strb	r2, [r3, #0]
 8018052:	b01c      	add	sp, #112	@ 0x70
 8018054:	f85d eb04 	ldr.w	lr, [sp], #4
 8018058:	b003      	add	sp, #12
 801805a:	4770      	bx	lr
 801805c:	240001d0 	.word	0x240001d0
 8018060:	ffff0208 	.word	0xffff0208

08018064 <__sread>:
 8018064:	b510      	push	{r4, lr}
 8018066:	460c      	mov	r4, r1
 8018068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801806c:	f000 f8be 	bl	80181ec <_read_r>
 8018070:	2800      	cmp	r0, #0
 8018072:	bfab      	itete	ge
 8018074:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018076:	89a3      	ldrhlt	r3, [r4, #12]
 8018078:	181b      	addge	r3, r3, r0
 801807a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801807e:	bfac      	ite	ge
 8018080:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018082:	81a3      	strhlt	r3, [r4, #12]
 8018084:	bd10      	pop	{r4, pc}

08018086 <__swrite>:
 8018086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801808a:	461f      	mov	r7, r3
 801808c:	898b      	ldrh	r3, [r1, #12]
 801808e:	05db      	lsls	r3, r3, #23
 8018090:	4605      	mov	r5, r0
 8018092:	460c      	mov	r4, r1
 8018094:	4616      	mov	r6, r2
 8018096:	d505      	bpl.n	80180a4 <__swrite+0x1e>
 8018098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801809c:	2302      	movs	r3, #2
 801809e:	2200      	movs	r2, #0
 80180a0:	f000 f892 	bl	80181c8 <_lseek_r>
 80180a4:	89a3      	ldrh	r3, [r4, #12]
 80180a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80180aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80180ae:	81a3      	strh	r3, [r4, #12]
 80180b0:	4632      	mov	r2, r6
 80180b2:	463b      	mov	r3, r7
 80180b4:	4628      	mov	r0, r5
 80180b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80180ba:	f000 b8a9 	b.w	8018210 <_write_r>

080180be <__sseek>:
 80180be:	b510      	push	{r4, lr}
 80180c0:	460c      	mov	r4, r1
 80180c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180c6:	f000 f87f 	bl	80181c8 <_lseek_r>
 80180ca:	1c43      	adds	r3, r0, #1
 80180cc:	89a3      	ldrh	r3, [r4, #12]
 80180ce:	bf15      	itete	ne
 80180d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80180d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80180d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80180da:	81a3      	strheq	r3, [r4, #12]
 80180dc:	bf18      	it	ne
 80180de:	81a3      	strhne	r3, [r4, #12]
 80180e0:	bd10      	pop	{r4, pc}

080180e2 <__sclose>:
 80180e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180e6:	f000 b809 	b.w	80180fc <_close_r>

080180ea <memset>:
 80180ea:	4402      	add	r2, r0
 80180ec:	4603      	mov	r3, r0
 80180ee:	4293      	cmp	r3, r2
 80180f0:	d100      	bne.n	80180f4 <memset+0xa>
 80180f2:	4770      	bx	lr
 80180f4:	f803 1b01 	strb.w	r1, [r3], #1
 80180f8:	e7f9      	b.n	80180ee <memset+0x4>
	...

080180fc <_close_r>:
 80180fc:	b538      	push	{r3, r4, r5, lr}
 80180fe:	4d06      	ldr	r5, [pc, #24]	@ (8018118 <_close_r+0x1c>)
 8018100:	2300      	movs	r3, #0
 8018102:	4604      	mov	r4, r0
 8018104:	4608      	mov	r0, r1
 8018106:	602b      	str	r3, [r5, #0]
 8018108:	f7eb f9ff 	bl	800350a <_close>
 801810c:	1c43      	adds	r3, r0, #1
 801810e:	d102      	bne.n	8018116 <_close_r+0x1a>
 8018110:	682b      	ldr	r3, [r5, #0]
 8018112:	b103      	cbz	r3, 8018116 <_close_r+0x1a>
 8018114:	6023      	str	r3, [r4, #0]
 8018116:	bd38      	pop	{r3, r4, r5, pc}
 8018118:	24028f18 	.word	0x24028f18

0801811c <_reclaim_reent>:
 801811c:	4b29      	ldr	r3, [pc, #164]	@ (80181c4 <_reclaim_reent+0xa8>)
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	4283      	cmp	r3, r0
 8018122:	b570      	push	{r4, r5, r6, lr}
 8018124:	4604      	mov	r4, r0
 8018126:	d04b      	beq.n	80181c0 <_reclaim_reent+0xa4>
 8018128:	69c3      	ldr	r3, [r0, #28]
 801812a:	b1ab      	cbz	r3, 8018158 <_reclaim_reent+0x3c>
 801812c:	68db      	ldr	r3, [r3, #12]
 801812e:	b16b      	cbz	r3, 801814c <_reclaim_reent+0x30>
 8018130:	2500      	movs	r5, #0
 8018132:	69e3      	ldr	r3, [r4, #28]
 8018134:	68db      	ldr	r3, [r3, #12]
 8018136:	5959      	ldr	r1, [r3, r5]
 8018138:	2900      	cmp	r1, #0
 801813a:	d13b      	bne.n	80181b4 <_reclaim_reent+0x98>
 801813c:	3504      	adds	r5, #4
 801813e:	2d80      	cmp	r5, #128	@ 0x80
 8018140:	d1f7      	bne.n	8018132 <_reclaim_reent+0x16>
 8018142:	69e3      	ldr	r3, [r4, #28]
 8018144:	4620      	mov	r0, r4
 8018146:	68d9      	ldr	r1, [r3, #12]
 8018148:	f000 f8b0 	bl	80182ac <_free_r>
 801814c:	69e3      	ldr	r3, [r4, #28]
 801814e:	6819      	ldr	r1, [r3, #0]
 8018150:	b111      	cbz	r1, 8018158 <_reclaim_reent+0x3c>
 8018152:	4620      	mov	r0, r4
 8018154:	f000 f8aa 	bl	80182ac <_free_r>
 8018158:	6961      	ldr	r1, [r4, #20]
 801815a:	b111      	cbz	r1, 8018162 <_reclaim_reent+0x46>
 801815c:	4620      	mov	r0, r4
 801815e:	f000 f8a5 	bl	80182ac <_free_r>
 8018162:	69e1      	ldr	r1, [r4, #28]
 8018164:	b111      	cbz	r1, 801816c <_reclaim_reent+0x50>
 8018166:	4620      	mov	r0, r4
 8018168:	f000 f8a0 	bl	80182ac <_free_r>
 801816c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801816e:	b111      	cbz	r1, 8018176 <_reclaim_reent+0x5a>
 8018170:	4620      	mov	r0, r4
 8018172:	f000 f89b 	bl	80182ac <_free_r>
 8018176:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018178:	b111      	cbz	r1, 8018180 <_reclaim_reent+0x64>
 801817a:	4620      	mov	r0, r4
 801817c:	f000 f896 	bl	80182ac <_free_r>
 8018180:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8018182:	b111      	cbz	r1, 801818a <_reclaim_reent+0x6e>
 8018184:	4620      	mov	r0, r4
 8018186:	f000 f891 	bl	80182ac <_free_r>
 801818a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801818c:	b111      	cbz	r1, 8018194 <_reclaim_reent+0x78>
 801818e:	4620      	mov	r0, r4
 8018190:	f000 f88c 	bl	80182ac <_free_r>
 8018194:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8018196:	b111      	cbz	r1, 801819e <_reclaim_reent+0x82>
 8018198:	4620      	mov	r0, r4
 801819a:	f000 f887 	bl	80182ac <_free_r>
 801819e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80181a0:	b111      	cbz	r1, 80181a8 <_reclaim_reent+0x8c>
 80181a2:	4620      	mov	r0, r4
 80181a4:	f000 f882 	bl	80182ac <_free_r>
 80181a8:	6a23      	ldr	r3, [r4, #32]
 80181aa:	b14b      	cbz	r3, 80181c0 <_reclaim_reent+0xa4>
 80181ac:	4620      	mov	r0, r4
 80181ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80181b2:	4718      	bx	r3
 80181b4:	680e      	ldr	r6, [r1, #0]
 80181b6:	4620      	mov	r0, r4
 80181b8:	f000 f878 	bl	80182ac <_free_r>
 80181bc:	4631      	mov	r1, r6
 80181be:	e7bb      	b.n	8018138 <_reclaim_reent+0x1c>
 80181c0:	bd70      	pop	{r4, r5, r6, pc}
 80181c2:	bf00      	nop
 80181c4:	240001d0 	.word	0x240001d0

080181c8 <_lseek_r>:
 80181c8:	b538      	push	{r3, r4, r5, lr}
 80181ca:	4d07      	ldr	r5, [pc, #28]	@ (80181e8 <_lseek_r+0x20>)
 80181cc:	4604      	mov	r4, r0
 80181ce:	4608      	mov	r0, r1
 80181d0:	4611      	mov	r1, r2
 80181d2:	2200      	movs	r2, #0
 80181d4:	602a      	str	r2, [r5, #0]
 80181d6:	461a      	mov	r2, r3
 80181d8:	f7eb f9be 	bl	8003558 <_lseek>
 80181dc:	1c43      	adds	r3, r0, #1
 80181de:	d102      	bne.n	80181e6 <_lseek_r+0x1e>
 80181e0:	682b      	ldr	r3, [r5, #0]
 80181e2:	b103      	cbz	r3, 80181e6 <_lseek_r+0x1e>
 80181e4:	6023      	str	r3, [r4, #0]
 80181e6:	bd38      	pop	{r3, r4, r5, pc}
 80181e8:	24028f18 	.word	0x24028f18

080181ec <_read_r>:
 80181ec:	b538      	push	{r3, r4, r5, lr}
 80181ee:	4d07      	ldr	r5, [pc, #28]	@ (801820c <_read_r+0x20>)
 80181f0:	4604      	mov	r4, r0
 80181f2:	4608      	mov	r0, r1
 80181f4:	4611      	mov	r1, r2
 80181f6:	2200      	movs	r2, #0
 80181f8:	602a      	str	r2, [r5, #0]
 80181fa:	461a      	mov	r2, r3
 80181fc:	f7eb f94c 	bl	8003498 <_read>
 8018200:	1c43      	adds	r3, r0, #1
 8018202:	d102      	bne.n	801820a <_read_r+0x1e>
 8018204:	682b      	ldr	r3, [r5, #0]
 8018206:	b103      	cbz	r3, 801820a <_read_r+0x1e>
 8018208:	6023      	str	r3, [r4, #0]
 801820a:	bd38      	pop	{r3, r4, r5, pc}
 801820c:	24028f18 	.word	0x24028f18

08018210 <_write_r>:
 8018210:	b538      	push	{r3, r4, r5, lr}
 8018212:	4d07      	ldr	r5, [pc, #28]	@ (8018230 <_write_r+0x20>)
 8018214:	4604      	mov	r4, r0
 8018216:	4608      	mov	r0, r1
 8018218:	4611      	mov	r1, r2
 801821a:	2200      	movs	r2, #0
 801821c:	602a      	str	r2, [r5, #0]
 801821e:	461a      	mov	r2, r3
 8018220:	f7eb f957 	bl	80034d2 <_write>
 8018224:	1c43      	adds	r3, r0, #1
 8018226:	d102      	bne.n	801822e <_write_r+0x1e>
 8018228:	682b      	ldr	r3, [r5, #0]
 801822a:	b103      	cbz	r3, 801822e <_write_r+0x1e>
 801822c:	6023      	str	r3, [r4, #0]
 801822e:	bd38      	pop	{r3, r4, r5, pc}
 8018230:	24028f18 	.word	0x24028f18

08018234 <__errno>:
 8018234:	4b01      	ldr	r3, [pc, #4]	@ (801823c <__errno+0x8>)
 8018236:	6818      	ldr	r0, [r3, #0]
 8018238:	4770      	bx	lr
 801823a:	bf00      	nop
 801823c:	240001d0 	.word	0x240001d0

08018240 <__libc_init_array>:
 8018240:	b570      	push	{r4, r5, r6, lr}
 8018242:	4d0d      	ldr	r5, [pc, #52]	@ (8018278 <__libc_init_array+0x38>)
 8018244:	4c0d      	ldr	r4, [pc, #52]	@ (801827c <__libc_init_array+0x3c>)
 8018246:	1b64      	subs	r4, r4, r5
 8018248:	10a4      	asrs	r4, r4, #2
 801824a:	2600      	movs	r6, #0
 801824c:	42a6      	cmp	r6, r4
 801824e:	d109      	bne.n	8018264 <__libc_init_array+0x24>
 8018250:	4d0b      	ldr	r5, [pc, #44]	@ (8018280 <__libc_init_array+0x40>)
 8018252:	4c0c      	ldr	r4, [pc, #48]	@ (8018284 <__libc_init_array+0x44>)
 8018254:	f001 f838 	bl	80192c8 <_init>
 8018258:	1b64      	subs	r4, r4, r5
 801825a:	10a4      	asrs	r4, r4, #2
 801825c:	2600      	movs	r6, #0
 801825e:	42a6      	cmp	r6, r4
 8018260:	d105      	bne.n	801826e <__libc_init_array+0x2e>
 8018262:	bd70      	pop	{r4, r5, r6, pc}
 8018264:	f855 3b04 	ldr.w	r3, [r5], #4
 8018268:	4798      	blx	r3
 801826a:	3601      	adds	r6, #1
 801826c:	e7ee      	b.n	801824c <__libc_init_array+0xc>
 801826e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018272:	4798      	blx	r3
 8018274:	3601      	adds	r6, #1
 8018276:	e7f2      	b.n	801825e <__libc_init_array+0x1e>
 8018278:	08019b20 	.word	0x08019b20
 801827c:	08019b20 	.word	0x08019b20
 8018280:	08019b20 	.word	0x08019b20
 8018284:	08019b24 	.word	0x08019b24

08018288 <__retarget_lock_init_recursive>:
 8018288:	4770      	bx	lr

0801828a <__retarget_lock_acquire_recursive>:
 801828a:	4770      	bx	lr

0801828c <__retarget_lock_release_recursive>:
 801828c:	4770      	bx	lr

0801828e <memcpy>:
 801828e:	440a      	add	r2, r1
 8018290:	4291      	cmp	r1, r2
 8018292:	f100 33ff 	add.w	r3, r0, #4294967295
 8018296:	d100      	bne.n	801829a <memcpy+0xc>
 8018298:	4770      	bx	lr
 801829a:	b510      	push	{r4, lr}
 801829c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80182a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80182a4:	4291      	cmp	r1, r2
 80182a6:	d1f9      	bne.n	801829c <memcpy+0xe>
 80182a8:	bd10      	pop	{r4, pc}
	...

080182ac <_free_r>:
 80182ac:	b538      	push	{r3, r4, r5, lr}
 80182ae:	4605      	mov	r5, r0
 80182b0:	2900      	cmp	r1, #0
 80182b2:	d041      	beq.n	8018338 <_free_r+0x8c>
 80182b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80182b8:	1f0c      	subs	r4, r1, #4
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	bfb8      	it	lt
 80182be:	18e4      	addlt	r4, r4, r3
 80182c0:	f000 f8e0 	bl	8018484 <__malloc_lock>
 80182c4:	4a1d      	ldr	r2, [pc, #116]	@ (801833c <_free_r+0x90>)
 80182c6:	6813      	ldr	r3, [r2, #0]
 80182c8:	b933      	cbnz	r3, 80182d8 <_free_r+0x2c>
 80182ca:	6063      	str	r3, [r4, #4]
 80182cc:	6014      	str	r4, [r2, #0]
 80182ce:	4628      	mov	r0, r5
 80182d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80182d4:	f000 b8dc 	b.w	8018490 <__malloc_unlock>
 80182d8:	42a3      	cmp	r3, r4
 80182da:	d908      	bls.n	80182ee <_free_r+0x42>
 80182dc:	6820      	ldr	r0, [r4, #0]
 80182de:	1821      	adds	r1, r4, r0
 80182e0:	428b      	cmp	r3, r1
 80182e2:	bf01      	itttt	eq
 80182e4:	6819      	ldreq	r1, [r3, #0]
 80182e6:	685b      	ldreq	r3, [r3, #4]
 80182e8:	1809      	addeq	r1, r1, r0
 80182ea:	6021      	streq	r1, [r4, #0]
 80182ec:	e7ed      	b.n	80182ca <_free_r+0x1e>
 80182ee:	461a      	mov	r2, r3
 80182f0:	685b      	ldr	r3, [r3, #4]
 80182f2:	b10b      	cbz	r3, 80182f8 <_free_r+0x4c>
 80182f4:	42a3      	cmp	r3, r4
 80182f6:	d9fa      	bls.n	80182ee <_free_r+0x42>
 80182f8:	6811      	ldr	r1, [r2, #0]
 80182fa:	1850      	adds	r0, r2, r1
 80182fc:	42a0      	cmp	r0, r4
 80182fe:	d10b      	bne.n	8018318 <_free_r+0x6c>
 8018300:	6820      	ldr	r0, [r4, #0]
 8018302:	4401      	add	r1, r0
 8018304:	1850      	adds	r0, r2, r1
 8018306:	4283      	cmp	r3, r0
 8018308:	6011      	str	r1, [r2, #0]
 801830a:	d1e0      	bne.n	80182ce <_free_r+0x22>
 801830c:	6818      	ldr	r0, [r3, #0]
 801830e:	685b      	ldr	r3, [r3, #4]
 8018310:	6053      	str	r3, [r2, #4]
 8018312:	4408      	add	r0, r1
 8018314:	6010      	str	r0, [r2, #0]
 8018316:	e7da      	b.n	80182ce <_free_r+0x22>
 8018318:	d902      	bls.n	8018320 <_free_r+0x74>
 801831a:	230c      	movs	r3, #12
 801831c:	602b      	str	r3, [r5, #0]
 801831e:	e7d6      	b.n	80182ce <_free_r+0x22>
 8018320:	6820      	ldr	r0, [r4, #0]
 8018322:	1821      	adds	r1, r4, r0
 8018324:	428b      	cmp	r3, r1
 8018326:	bf04      	itt	eq
 8018328:	6819      	ldreq	r1, [r3, #0]
 801832a:	685b      	ldreq	r3, [r3, #4]
 801832c:	6063      	str	r3, [r4, #4]
 801832e:	bf04      	itt	eq
 8018330:	1809      	addeq	r1, r1, r0
 8018332:	6021      	streq	r1, [r4, #0]
 8018334:	6054      	str	r4, [r2, #4]
 8018336:	e7ca      	b.n	80182ce <_free_r+0x22>
 8018338:	bd38      	pop	{r3, r4, r5, pc}
 801833a:	bf00      	nop
 801833c:	24028f24 	.word	0x24028f24

08018340 <sbrk_aligned>:
 8018340:	b570      	push	{r4, r5, r6, lr}
 8018342:	4e0f      	ldr	r6, [pc, #60]	@ (8018380 <sbrk_aligned+0x40>)
 8018344:	460c      	mov	r4, r1
 8018346:	6831      	ldr	r1, [r6, #0]
 8018348:	4605      	mov	r5, r0
 801834a:	b911      	cbnz	r1, 8018352 <sbrk_aligned+0x12>
 801834c:	f000 fe5c 	bl	8019008 <_sbrk_r>
 8018350:	6030      	str	r0, [r6, #0]
 8018352:	4621      	mov	r1, r4
 8018354:	4628      	mov	r0, r5
 8018356:	f000 fe57 	bl	8019008 <_sbrk_r>
 801835a:	1c43      	adds	r3, r0, #1
 801835c:	d103      	bne.n	8018366 <sbrk_aligned+0x26>
 801835e:	f04f 34ff 	mov.w	r4, #4294967295
 8018362:	4620      	mov	r0, r4
 8018364:	bd70      	pop	{r4, r5, r6, pc}
 8018366:	1cc4      	adds	r4, r0, #3
 8018368:	f024 0403 	bic.w	r4, r4, #3
 801836c:	42a0      	cmp	r0, r4
 801836e:	d0f8      	beq.n	8018362 <sbrk_aligned+0x22>
 8018370:	1a21      	subs	r1, r4, r0
 8018372:	4628      	mov	r0, r5
 8018374:	f000 fe48 	bl	8019008 <_sbrk_r>
 8018378:	3001      	adds	r0, #1
 801837a:	d1f2      	bne.n	8018362 <sbrk_aligned+0x22>
 801837c:	e7ef      	b.n	801835e <sbrk_aligned+0x1e>
 801837e:	bf00      	nop
 8018380:	24028f20 	.word	0x24028f20

08018384 <_malloc_r>:
 8018384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018388:	1ccd      	adds	r5, r1, #3
 801838a:	f025 0503 	bic.w	r5, r5, #3
 801838e:	3508      	adds	r5, #8
 8018390:	2d0c      	cmp	r5, #12
 8018392:	bf38      	it	cc
 8018394:	250c      	movcc	r5, #12
 8018396:	2d00      	cmp	r5, #0
 8018398:	4606      	mov	r6, r0
 801839a:	db01      	blt.n	80183a0 <_malloc_r+0x1c>
 801839c:	42a9      	cmp	r1, r5
 801839e:	d904      	bls.n	80183aa <_malloc_r+0x26>
 80183a0:	230c      	movs	r3, #12
 80183a2:	6033      	str	r3, [r6, #0]
 80183a4:	2000      	movs	r0, #0
 80183a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018480 <_malloc_r+0xfc>
 80183ae:	f000 f869 	bl	8018484 <__malloc_lock>
 80183b2:	f8d8 3000 	ldr.w	r3, [r8]
 80183b6:	461c      	mov	r4, r3
 80183b8:	bb44      	cbnz	r4, 801840c <_malloc_r+0x88>
 80183ba:	4629      	mov	r1, r5
 80183bc:	4630      	mov	r0, r6
 80183be:	f7ff ffbf 	bl	8018340 <sbrk_aligned>
 80183c2:	1c43      	adds	r3, r0, #1
 80183c4:	4604      	mov	r4, r0
 80183c6:	d158      	bne.n	801847a <_malloc_r+0xf6>
 80183c8:	f8d8 4000 	ldr.w	r4, [r8]
 80183cc:	4627      	mov	r7, r4
 80183ce:	2f00      	cmp	r7, #0
 80183d0:	d143      	bne.n	801845a <_malloc_r+0xd6>
 80183d2:	2c00      	cmp	r4, #0
 80183d4:	d04b      	beq.n	801846e <_malloc_r+0xea>
 80183d6:	6823      	ldr	r3, [r4, #0]
 80183d8:	4639      	mov	r1, r7
 80183da:	4630      	mov	r0, r6
 80183dc:	eb04 0903 	add.w	r9, r4, r3
 80183e0:	f000 fe12 	bl	8019008 <_sbrk_r>
 80183e4:	4581      	cmp	r9, r0
 80183e6:	d142      	bne.n	801846e <_malloc_r+0xea>
 80183e8:	6821      	ldr	r1, [r4, #0]
 80183ea:	1a6d      	subs	r5, r5, r1
 80183ec:	4629      	mov	r1, r5
 80183ee:	4630      	mov	r0, r6
 80183f0:	f7ff ffa6 	bl	8018340 <sbrk_aligned>
 80183f4:	3001      	adds	r0, #1
 80183f6:	d03a      	beq.n	801846e <_malloc_r+0xea>
 80183f8:	6823      	ldr	r3, [r4, #0]
 80183fa:	442b      	add	r3, r5
 80183fc:	6023      	str	r3, [r4, #0]
 80183fe:	f8d8 3000 	ldr.w	r3, [r8]
 8018402:	685a      	ldr	r2, [r3, #4]
 8018404:	bb62      	cbnz	r2, 8018460 <_malloc_r+0xdc>
 8018406:	f8c8 7000 	str.w	r7, [r8]
 801840a:	e00f      	b.n	801842c <_malloc_r+0xa8>
 801840c:	6822      	ldr	r2, [r4, #0]
 801840e:	1b52      	subs	r2, r2, r5
 8018410:	d420      	bmi.n	8018454 <_malloc_r+0xd0>
 8018412:	2a0b      	cmp	r2, #11
 8018414:	d917      	bls.n	8018446 <_malloc_r+0xc2>
 8018416:	1961      	adds	r1, r4, r5
 8018418:	42a3      	cmp	r3, r4
 801841a:	6025      	str	r5, [r4, #0]
 801841c:	bf18      	it	ne
 801841e:	6059      	strne	r1, [r3, #4]
 8018420:	6863      	ldr	r3, [r4, #4]
 8018422:	bf08      	it	eq
 8018424:	f8c8 1000 	streq.w	r1, [r8]
 8018428:	5162      	str	r2, [r4, r5]
 801842a:	604b      	str	r3, [r1, #4]
 801842c:	4630      	mov	r0, r6
 801842e:	f000 f82f 	bl	8018490 <__malloc_unlock>
 8018432:	f104 000b 	add.w	r0, r4, #11
 8018436:	1d23      	adds	r3, r4, #4
 8018438:	f020 0007 	bic.w	r0, r0, #7
 801843c:	1ac2      	subs	r2, r0, r3
 801843e:	bf1c      	itt	ne
 8018440:	1a1b      	subne	r3, r3, r0
 8018442:	50a3      	strne	r3, [r4, r2]
 8018444:	e7af      	b.n	80183a6 <_malloc_r+0x22>
 8018446:	6862      	ldr	r2, [r4, #4]
 8018448:	42a3      	cmp	r3, r4
 801844a:	bf0c      	ite	eq
 801844c:	f8c8 2000 	streq.w	r2, [r8]
 8018450:	605a      	strne	r2, [r3, #4]
 8018452:	e7eb      	b.n	801842c <_malloc_r+0xa8>
 8018454:	4623      	mov	r3, r4
 8018456:	6864      	ldr	r4, [r4, #4]
 8018458:	e7ae      	b.n	80183b8 <_malloc_r+0x34>
 801845a:	463c      	mov	r4, r7
 801845c:	687f      	ldr	r7, [r7, #4]
 801845e:	e7b6      	b.n	80183ce <_malloc_r+0x4a>
 8018460:	461a      	mov	r2, r3
 8018462:	685b      	ldr	r3, [r3, #4]
 8018464:	42a3      	cmp	r3, r4
 8018466:	d1fb      	bne.n	8018460 <_malloc_r+0xdc>
 8018468:	2300      	movs	r3, #0
 801846a:	6053      	str	r3, [r2, #4]
 801846c:	e7de      	b.n	801842c <_malloc_r+0xa8>
 801846e:	230c      	movs	r3, #12
 8018470:	6033      	str	r3, [r6, #0]
 8018472:	4630      	mov	r0, r6
 8018474:	f000 f80c 	bl	8018490 <__malloc_unlock>
 8018478:	e794      	b.n	80183a4 <_malloc_r+0x20>
 801847a:	6005      	str	r5, [r0, #0]
 801847c:	e7d6      	b.n	801842c <_malloc_r+0xa8>
 801847e:	bf00      	nop
 8018480:	24028f24 	.word	0x24028f24

08018484 <__malloc_lock>:
 8018484:	4801      	ldr	r0, [pc, #4]	@ (801848c <__malloc_lock+0x8>)
 8018486:	f7ff bf00 	b.w	801828a <__retarget_lock_acquire_recursive>
 801848a:	bf00      	nop
 801848c:	24028f1c 	.word	0x24028f1c

08018490 <__malloc_unlock>:
 8018490:	4801      	ldr	r0, [pc, #4]	@ (8018498 <__malloc_unlock+0x8>)
 8018492:	f7ff befb 	b.w	801828c <__retarget_lock_release_recursive>
 8018496:	bf00      	nop
 8018498:	24028f1c 	.word	0x24028f1c

0801849c <__ssputs_r>:
 801849c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184a0:	688e      	ldr	r6, [r1, #8]
 80184a2:	461f      	mov	r7, r3
 80184a4:	42be      	cmp	r6, r7
 80184a6:	680b      	ldr	r3, [r1, #0]
 80184a8:	4682      	mov	sl, r0
 80184aa:	460c      	mov	r4, r1
 80184ac:	4690      	mov	r8, r2
 80184ae:	d82d      	bhi.n	801850c <__ssputs_r+0x70>
 80184b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80184b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80184b8:	d026      	beq.n	8018508 <__ssputs_r+0x6c>
 80184ba:	6965      	ldr	r5, [r4, #20]
 80184bc:	6909      	ldr	r1, [r1, #16]
 80184be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80184c2:	eba3 0901 	sub.w	r9, r3, r1
 80184c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80184ca:	1c7b      	adds	r3, r7, #1
 80184cc:	444b      	add	r3, r9
 80184ce:	106d      	asrs	r5, r5, #1
 80184d0:	429d      	cmp	r5, r3
 80184d2:	bf38      	it	cc
 80184d4:	461d      	movcc	r5, r3
 80184d6:	0553      	lsls	r3, r2, #21
 80184d8:	d527      	bpl.n	801852a <__ssputs_r+0x8e>
 80184da:	4629      	mov	r1, r5
 80184dc:	f7ff ff52 	bl	8018384 <_malloc_r>
 80184e0:	4606      	mov	r6, r0
 80184e2:	b360      	cbz	r0, 801853e <__ssputs_r+0xa2>
 80184e4:	6921      	ldr	r1, [r4, #16]
 80184e6:	464a      	mov	r2, r9
 80184e8:	f7ff fed1 	bl	801828e <memcpy>
 80184ec:	89a3      	ldrh	r3, [r4, #12]
 80184ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80184f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80184f6:	81a3      	strh	r3, [r4, #12]
 80184f8:	6126      	str	r6, [r4, #16]
 80184fa:	6165      	str	r5, [r4, #20]
 80184fc:	444e      	add	r6, r9
 80184fe:	eba5 0509 	sub.w	r5, r5, r9
 8018502:	6026      	str	r6, [r4, #0]
 8018504:	60a5      	str	r5, [r4, #8]
 8018506:	463e      	mov	r6, r7
 8018508:	42be      	cmp	r6, r7
 801850a:	d900      	bls.n	801850e <__ssputs_r+0x72>
 801850c:	463e      	mov	r6, r7
 801850e:	6820      	ldr	r0, [r4, #0]
 8018510:	4632      	mov	r2, r6
 8018512:	4641      	mov	r1, r8
 8018514:	f000 fd5e 	bl	8018fd4 <memmove>
 8018518:	68a3      	ldr	r3, [r4, #8]
 801851a:	1b9b      	subs	r3, r3, r6
 801851c:	60a3      	str	r3, [r4, #8]
 801851e:	6823      	ldr	r3, [r4, #0]
 8018520:	4433      	add	r3, r6
 8018522:	6023      	str	r3, [r4, #0]
 8018524:	2000      	movs	r0, #0
 8018526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801852a:	462a      	mov	r2, r5
 801852c:	f000 fd7c 	bl	8019028 <_realloc_r>
 8018530:	4606      	mov	r6, r0
 8018532:	2800      	cmp	r0, #0
 8018534:	d1e0      	bne.n	80184f8 <__ssputs_r+0x5c>
 8018536:	6921      	ldr	r1, [r4, #16]
 8018538:	4650      	mov	r0, sl
 801853a:	f7ff feb7 	bl	80182ac <_free_r>
 801853e:	230c      	movs	r3, #12
 8018540:	f8ca 3000 	str.w	r3, [sl]
 8018544:	89a3      	ldrh	r3, [r4, #12]
 8018546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801854a:	81a3      	strh	r3, [r4, #12]
 801854c:	f04f 30ff 	mov.w	r0, #4294967295
 8018550:	e7e9      	b.n	8018526 <__ssputs_r+0x8a>
	...

08018554 <_svfiprintf_r>:
 8018554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018558:	4698      	mov	r8, r3
 801855a:	898b      	ldrh	r3, [r1, #12]
 801855c:	061b      	lsls	r3, r3, #24
 801855e:	b09d      	sub	sp, #116	@ 0x74
 8018560:	4607      	mov	r7, r0
 8018562:	460d      	mov	r5, r1
 8018564:	4614      	mov	r4, r2
 8018566:	d510      	bpl.n	801858a <_svfiprintf_r+0x36>
 8018568:	690b      	ldr	r3, [r1, #16]
 801856a:	b973      	cbnz	r3, 801858a <_svfiprintf_r+0x36>
 801856c:	2140      	movs	r1, #64	@ 0x40
 801856e:	f7ff ff09 	bl	8018384 <_malloc_r>
 8018572:	6028      	str	r0, [r5, #0]
 8018574:	6128      	str	r0, [r5, #16]
 8018576:	b930      	cbnz	r0, 8018586 <_svfiprintf_r+0x32>
 8018578:	230c      	movs	r3, #12
 801857a:	603b      	str	r3, [r7, #0]
 801857c:	f04f 30ff 	mov.w	r0, #4294967295
 8018580:	b01d      	add	sp, #116	@ 0x74
 8018582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018586:	2340      	movs	r3, #64	@ 0x40
 8018588:	616b      	str	r3, [r5, #20]
 801858a:	2300      	movs	r3, #0
 801858c:	9309      	str	r3, [sp, #36]	@ 0x24
 801858e:	2320      	movs	r3, #32
 8018590:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018594:	f8cd 800c 	str.w	r8, [sp, #12]
 8018598:	2330      	movs	r3, #48	@ 0x30
 801859a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018738 <_svfiprintf_r+0x1e4>
 801859e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80185a2:	f04f 0901 	mov.w	r9, #1
 80185a6:	4623      	mov	r3, r4
 80185a8:	469a      	mov	sl, r3
 80185aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80185ae:	b10a      	cbz	r2, 80185b4 <_svfiprintf_r+0x60>
 80185b0:	2a25      	cmp	r2, #37	@ 0x25
 80185b2:	d1f9      	bne.n	80185a8 <_svfiprintf_r+0x54>
 80185b4:	ebba 0b04 	subs.w	fp, sl, r4
 80185b8:	d00b      	beq.n	80185d2 <_svfiprintf_r+0x7e>
 80185ba:	465b      	mov	r3, fp
 80185bc:	4622      	mov	r2, r4
 80185be:	4629      	mov	r1, r5
 80185c0:	4638      	mov	r0, r7
 80185c2:	f7ff ff6b 	bl	801849c <__ssputs_r>
 80185c6:	3001      	adds	r0, #1
 80185c8:	f000 80a7 	beq.w	801871a <_svfiprintf_r+0x1c6>
 80185cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80185ce:	445a      	add	r2, fp
 80185d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80185d2:	f89a 3000 	ldrb.w	r3, [sl]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	f000 809f 	beq.w	801871a <_svfiprintf_r+0x1c6>
 80185dc:	2300      	movs	r3, #0
 80185de:	f04f 32ff 	mov.w	r2, #4294967295
 80185e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80185e6:	f10a 0a01 	add.w	sl, sl, #1
 80185ea:	9304      	str	r3, [sp, #16]
 80185ec:	9307      	str	r3, [sp, #28]
 80185ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80185f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80185f4:	4654      	mov	r4, sl
 80185f6:	2205      	movs	r2, #5
 80185f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185fc:	484e      	ldr	r0, [pc, #312]	@ (8018738 <_svfiprintf_r+0x1e4>)
 80185fe:	f7e7 fe77 	bl	80002f0 <memchr>
 8018602:	9a04      	ldr	r2, [sp, #16]
 8018604:	b9d8      	cbnz	r0, 801863e <_svfiprintf_r+0xea>
 8018606:	06d0      	lsls	r0, r2, #27
 8018608:	bf44      	itt	mi
 801860a:	2320      	movmi	r3, #32
 801860c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018610:	0711      	lsls	r1, r2, #28
 8018612:	bf44      	itt	mi
 8018614:	232b      	movmi	r3, #43	@ 0x2b
 8018616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801861a:	f89a 3000 	ldrb.w	r3, [sl]
 801861e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018620:	d015      	beq.n	801864e <_svfiprintf_r+0xfa>
 8018622:	9a07      	ldr	r2, [sp, #28]
 8018624:	4654      	mov	r4, sl
 8018626:	2000      	movs	r0, #0
 8018628:	f04f 0c0a 	mov.w	ip, #10
 801862c:	4621      	mov	r1, r4
 801862e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018632:	3b30      	subs	r3, #48	@ 0x30
 8018634:	2b09      	cmp	r3, #9
 8018636:	d94b      	bls.n	80186d0 <_svfiprintf_r+0x17c>
 8018638:	b1b0      	cbz	r0, 8018668 <_svfiprintf_r+0x114>
 801863a:	9207      	str	r2, [sp, #28]
 801863c:	e014      	b.n	8018668 <_svfiprintf_r+0x114>
 801863e:	eba0 0308 	sub.w	r3, r0, r8
 8018642:	fa09 f303 	lsl.w	r3, r9, r3
 8018646:	4313      	orrs	r3, r2
 8018648:	9304      	str	r3, [sp, #16]
 801864a:	46a2      	mov	sl, r4
 801864c:	e7d2      	b.n	80185f4 <_svfiprintf_r+0xa0>
 801864e:	9b03      	ldr	r3, [sp, #12]
 8018650:	1d19      	adds	r1, r3, #4
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	9103      	str	r1, [sp, #12]
 8018656:	2b00      	cmp	r3, #0
 8018658:	bfbb      	ittet	lt
 801865a:	425b      	neglt	r3, r3
 801865c:	f042 0202 	orrlt.w	r2, r2, #2
 8018660:	9307      	strge	r3, [sp, #28]
 8018662:	9307      	strlt	r3, [sp, #28]
 8018664:	bfb8      	it	lt
 8018666:	9204      	strlt	r2, [sp, #16]
 8018668:	7823      	ldrb	r3, [r4, #0]
 801866a:	2b2e      	cmp	r3, #46	@ 0x2e
 801866c:	d10a      	bne.n	8018684 <_svfiprintf_r+0x130>
 801866e:	7863      	ldrb	r3, [r4, #1]
 8018670:	2b2a      	cmp	r3, #42	@ 0x2a
 8018672:	d132      	bne.n	80186da <_svfiprintf_r+0x186>
 8018674:	9b03      	ldr	r3, [sp, #12]
 8018676:	1d1a      	adds	r2, r3, #4
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	9203      	str	r2, [sp, #12]
 801867c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018680:	3402      	adds	r4, #2
 8018682:	9305      	str	r3, [sp, #20]
 8018684:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018748 <_svfiprintf_r+0x1f4>
 8018688:	7821      	ldrb	r1, [r4, #0]
 801868a:	2203      	movs	r2, #3
 801868c:	4650      	mov	r0, sl
 801868e:	f7e7 fe2f 	bl	80002f0 <memchr>
 8018692:	b138      	cbz	r0, 80186a4 <_svfiprintf_r+0x150>
 8018694:	9b04      	ldr	r3, [sp, #16]
 8018696:	eba0 000a 	sub.w	r0, r0, sl
 801869a:	2240      	movs	r2, #64	@ 0x40
 801869c:	4082      	lsls	r2, r0
 801869e:	4313      	orrs	r3, r2
 80186a0:	3401      	adds	r4, #1
 80186a2:	9304      	str	r3, [sp, #16]
 80186a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186a8:	4824      	ldr	r0, [pc, #144]	@ (801873c <_svfiprintf_r+0x1e8>)
 80186aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80186ae:	2206      	movs	r2, #6
 80186b0:	f7e7 fe1e 	bl	80002f0 <memchr>
 80186b4:	2800      	cmp	r0, #0
 80186b6:	d036      	beq.n	8018726 <_svfiprintf_r+0x1d2>
 80186b8:	4b21      	ldr	r3, [pc, #132]	@ (8018740 <_svfiprintf_r+0x1ec>)
 80186ba:	bb1b      	cbnz	r3, 8018704 <_svfiprintf_r+0x1b0>
 80186bc:	9b03      	ldr	r3, [sp, #12]
 80186be:	3307      	adds	r3, #7
 80186c0:	f023 0307 	bic.w	r3, r3, #7
 80186c4:	3308      	adds	r3, #8
 80186c6:	9303      	str	r3, [sp, #12]
 80186c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80186ca:	4433      	add	r3, r6
 80186cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80186ce:	e76a      	b.n	80185a6 <_svfiprintf_r+0x52>
 80186d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80186d4:	460c      	mov	r4, r1
 80186d6:	2001      	movs	r0, #1
 80186d8:	e7a8      	b.n	801862c <_svfiprintf_r+0xd8>
 80186da:	2300      	movs	r3, #0
 80186dc:	3401      	adds	r4, #1
 80186de:	9305      	str	r3, [sp, #20]
 80186e0:	4619      	mov	r1, r3
 80186e2:	f04f 0c0a 	mov.w	ip, #10
 80186e6:	4620      	mov	r0, r4
 80186e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80186ec:	3a30      	subs	r2, #48	@ 0x30
 80186ee:	2a09      	cmp	r2, #9
 80186f0:	d903      	bls.n	80186fa <_svfiprintf_r+0x1a6>
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d0c6      	beq.n	8018684 <_svfiprintf_r+0x130>
 80186f6:	9105      	str	r1, [sp, #20]
 80186f8:	e7c4      	b.n	8018684 <_svfiprintf_r+0x130>
 80186fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80186fe:	4604      	mov	r4, r0
 8018700:	2301      	movs	r3, #1
 8018702:	e7f0      	b.n	80186e6 <_svfiprintf_r+0x192>
 8018704:	ab03      	add	r3, sp, #12
 8018706:	9300      	str	r3, [sp, #0]
 8018708:	462a      	mov	r2, r5
 801870a:	4b0e      	ldr	r3, [pc, #56]	@ (8018744 <_svfiprintf_r+0x1f0>)
 801870c:	a904      	add	r1, sp, #16
 801870e:	4638      	mov	r0, r7
 8018710:	f3af 8000 	nop.w
 8018714:	1c42      	adds	r2, r0, #1
 8018716:	4606      	mov	r6, r0
 8018718:	d1d6      	bne.n	80186c8 <_svfiprintf_r+0x174>
 801871a:	89ab      	ldrh	r3, [r5, #12]
 801871c:	065b      	lsls	r3, r3, #25
 801871e:	f53f af2d 	bmi.w	801857c <_svfiprintf_r+0x28>
 8018722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018724:	e72c      	b.n	8018580 <_svfiprintf_r+0x2c>
 8018726:	ab03      	add	r3, sp, #12
 8018728:	9300      	str	r3, [sp, #0]
 801872a:	462a      	mov	r2, r5
 801872c:	4b05      	ldr	r3, [pc, #20]	@ (8018744 <_svfiprintf_r+0x1f0>)
 801872e:	a904      	add	r1, sp, #16
 8018730:	4638      	mov	r0, r7
 8018732:	f000 f9bb 	bl	8018aac <_printf_i>
 8018736:	e7ed      	b.n	8018714 <_svfiprintf_r+0x1c0>
 8018738:	080199c0 	.word	0x080199c0
 801873c:	080199ca 	.word	0x080199ca
 8018740:	00000000 	.word	0x00000000
 8018744:	0801849d 	.word	0x0801849d
 8018748:	080199c6 	.word	0x080199c6

0801874c <__sfputc_r>:
 801874c:	6893      	ldr	r3, [r2, #8]
 801874e:	3b01      	subs	r3, #1
 8018750:	2b00      	cmp	r3, #0
 8018752:	b410      	push	{r4}
 8018754:	6093      	str	r3, [r2, #8]
 8018756:	da08      	bge.n	801876a <__sfputc_r+0x1e>
 8018758:	6994      	ldr	r4, [r2, #24]
 801875a:	42a3      	cmp	r3, r4
 801875c:	db01      	blt.n	8018762 <__sfputc_r+0x16>
 801875e:	290a      	cmp	r1, #10
 8018760:	d103      	bne.n	801876a <__sfputc_r+0x1e>
 8018762:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018766:	f000 bba1 	b.w	8018eac <__swbuf_r>
 801876a:	6813      	ldr	r3, [r2, #0]
 801876c:	1c58      	adds	r0, r3, #1
 801876e:	6010      	str	r0, [r2, #0]
 8018770:	7019      	strb	r1, [r3, #0]
 8018772:	4608      	mov	r0, r1
 8018774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018778:	4770      	bx	lr

0801877a <__sfputs_r>:
 801877a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801877c:	4606      	mov	r6, r0
 801877e:	460f      	mov	r7, r1
 8018780:	4614      	mov	r4, r2
 8018782:	18d5      	adds	r5, r2, r3
 8018784:	42ac      	cmp	r4, r5
 8018786:	d101      	bne.n	801878c <__sfputs_r+0x12>
 8018788:	2000      	movs	r0, #0
 801878a:	e007      	b.n	801879c <__sfputs_r+0x22>
 801878c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018790:	463a      	mov	r2, r7
 8018792:	4630      	mov	r0, r6
 8018794:	f7ff ffda 	bl	801874c <__sfputc_r>
 8018798:	1c43      	adds	r3, r0, #1
 801879a:	d1f3      	bne.n	8018784 <__sfputs_r+0xa>
 801879c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080187a0 <_vfiprintf_r>:
 80187a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187a4:	460d      	mov	r5, r1
 80187a6:	b09d      	sub	sp, #116	@ 0x74
 80187a8:	4614      	mov	r4, r2
 80187aa:	4698      	mov	r8, r3
 80187ac:	4606      	mov	r6, r0
 80187ae:	b118      	cbz	r0, 80187b8 <_vfiprintf_r+0x18>
 80187b0:	6a03      	ldr	r3, [r0, #32]
 80187b2:	b90b      	cbnz	r3, 80187b8 <_vfiprintf_r+0x18>
 80187b4:	f7ff fbe6 	bl	8017f84 <__sinit>
 80187b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80187ba:	07d9      	lsls	r1, r3, #31
 80187bc:	d405      	bmi.n	80187ca <_vfiprintf_r+0x2a>
 80187be:	89ab      	ldrh	r3, [r5, #12]
 80187c0:	059a      	lsls	r2, r3, #22
 80187c2:	d402      	bmi.n	80187ca <_vfiprintf_r+0x2a>
 80187c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80187c6:	f7ff fd60 	bl	801828a <__retarget_lock_acquire_recursive>
 80187ca:	89ab      	ldrh	r3, [r5, #12]
 80187cc:	071b      	lsls	r3, r3, #28
 80187ce:	d501      	bpl.n	80187d4 <_vfiprintf_r+0x34>
 80187d0:	692b      	ldr	r3, [r5, #16]
 80187d2:	b99b      	cbnz	r3, 80187fc <_vfiprintf_r+0x5c>
 80187d4:	4629      	mov	r1, r5
 80187d6:	4630      	mov	r0, r6
 80187d8:	f000 fba6 	bl	8018f28 <__swsetup_r>
 80187dc:	b170      	cbz	r0, 80187fc <_vfiprintf_r+0x5c>
 80187de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80187e0:	07dc      	lsls	r4, r3, #31
 80187e2:	d504      	bpl.n	80187ee <_vfiprintf_r+0x4e>
 80187e4:	f04f 30ff 	mov.w	r0, #4294967295
 80187e8:	b01d      	add	sp, #116	@ 0x74
 80187ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187ee:	89ab      	ldrh	r3, [r5, #12]
 80187f0:	0598      	lsls	r0, r3, #22
 80187f2:	d4f7      	bmi.n	80187e4 <_vfiprintf_r+0x44>
 80187f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80187f6:	f7ff fd49 	bl	801828c <__retarget_lock_release_recursive>
 80187fa:	e7f3      	b.n	80187e4 <_vfiprintf_r+0x44>
 80187fc:	2300      	movs	r3, #0
 80187fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8018800:	2320      	movs	r3, #32
 8018802:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018806:	f8cd 800c 	str.w	r8, [sp, #12]
 801880a:	2330      	movs	r3, #48	@ 0x30
 801880c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80189bc <_vfiprintf_r+0x21c>
 8018810:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018814:	f04f 0901 	mov.w	r9, #1
 8018818:	4623      	mov	r3, r4
 801881a:	469a      	mov	sl, r3
 801881c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018820:	b10a      	cbz	r2, 8018826 <_vfiprintf_r+0x86>
 8018822:	2a25      	cmp	r2, #37	@ 0x25
 8018824:	d1f9      	bne.n	801881a <_vfiprintf_r+0x7a>
 8018826:	ebba 0b04 	subs.w	fp, sl, r4
 801882a:	d00b      	beq.n	8018844 <_vfiprintf_r+0xa4>
 801882c:	465b      	mov	r3, fp
 801882e:	4622      	mov	r2, r4
 8018830:	4629      	mov	r1, r5
 8018832:	4630      	mov	r0, r6
 8018834:	f7ff ffa1 	bl	801877a <__sfputs_r>
 8018838:	3001      	adds	r0, #1
 801883a:	f000 80a7 	beq.w	801898c <_vfiprintf_r+0x1ec>
 801883e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018840:	445a      	add	r2, fp
 8018842:	9209      	str	r2, [sp, #36]	@ 0x24
 8018844:	f89a 3000 	ldrb.w	r3, [sl]
 8018848:	2b00      	cmp	r3, #0
 801884a:	f000 809f 	beq.w	801898c <_vfiprintf_r+0x1ec>
 801884e:	2300      	movs	r3, #0
 8018850:	f04f 32ff 	mov.w	r2, #4294967295
 8018854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018858:	f10a 0a01 	add.w	sl, sl, #1
 801885c:	9304      	str	r3, [sp, #16]
 801885e:	9307      	str	r3, [sp, #28]
 8018860:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018864:	931a      	str	r3, [sp, #104]	@ 0x68
 8018866:	4654      	mov	r4, sl
 8018868:	2205      	movs	r2, #5
 801886a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801886e:	4853      	ldr	r0, [pc, #332]	@ (80189bc <_vfiprintf_r+0x21c>)
 8018870:	f7e7 fd3e 	bl	80002f0 <memchr>
 8018874:	9a04      	ldr	r2, [sp, #16]
 8018876:	b9d8      	cbnz	r0, 80188b0 <_vfiprintf_r+0x110>
 8018878:	06d1      	lsls	r1, r2, #27
 801887a:	bf44      	itt	mi
 801887c:	2320      	movmi	r3, #32
 801887e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018882:	0713      	lsls	r3, r2, #28
 8018884:	bf44      	itt	mi
 8018886:	232b      	movmi	r3, #43	@ 0x2b
 8018888:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801888c:	f89a 3000 	ldrb.w	r3, [sl]
 8018890:	2b2a      	cmp	r3, #42	@ 0x2a
 8018892:	d015      	beq.n	80188c0 <_vfiprintf_r+0x120>
 8018894:	9a07      	ldr	r2, [sp, #28]
 8018896:	4654      	mov	r4, sl
 8018898:	2000      	movs	r0, #0
 801889a:	f04f 0c0a 	mov.w	ip, #10
 801889e:	4621      	mov	r1, r4
 80188a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80188a4:	3b30      	subs	r3, #48	@ 0x30
 80188a6:	2b09      	cmp	r3, #9
 80188a8:	d94b      	bls.n	8018942 <_vfiprintf_r+0x1a2>
 80188aa:	b1b0      	cbz	r0, 80188da <_vfiprintf_r+0x13a>
 80188ac:	9207      	str	r2, [sp, #28]
 80188ae:	e014      	b.n	80188da <_vfiprintf_r+0x13a>
 80188b0:	eba0 0308 	sub.w	r3, r0, r8
 80188b4:	fa09 f303 	lsl.w	r3, r9, r3
 80188b8:	4313      	orrs	r3, r2
 80188ba:	9304      	str	r3, [sp, #16]
 80188bc:	46a2      	mov	sl, r4
 80188be:	e7d2      	b.n	8018866 <_vfiprintf_r+0xc6>
 80188c0:	9b03      	ldr	r3, [sp, #12]
 80188c2:	1d19      	adds	r1, r3, #4
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	9103      	str	r1, [sp, #12]
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	bfbb      	ittet	lt
 80188cc:	425b      	neglt	r3, r3
 80188ce:	f042 0202 	orrlt.w	r2, r2, #2
 80188d2:	9307      	strge	r3, [sp, #28]
 80188d4:	9307      	strlt	r3, [sp, #28]
 80188d6:	bfb8      	it	lt
 80188d8:	9204      	strlt	r2, [sp, #16]
 80188da:	7823      	ldrb	r3, [r4, #0]
 80188dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80188de:	d10a      	bne.n	80188f6 <_vfiprintf_r+0x156>
 80188e0:	7863      	ldrb	r3, [r4, #1]
 80188e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80188e4:	d132      	bne.n	801894c <_vfiprintf_r+0x1ac>
 80188e6:	9b03      	ldr	r3, [sp, #12]
 80188e8:	1d1a      	adds	r2, r3, #4
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	9203      	str	r2, [sp, #12]
 80188ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80188f2:	3402      	adds	r4, #2
 80188f4:	9305      	str	r3, [sp, #20]
 80188f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80189cc <_vfiprintf_r+0x22c>
 80188fa:	7821      	ldrb	r1, [r4, #0]
 80188fc:	2203      	movs	r2, #3
 80188fe:	4650      	mov	r0, sl
 8018900:	f7e7 fcf6 	bl	80002f0 <memchr>
 8018904:	b138      	cbz	r0, 8018916 <_vfiprintf_r+0x176>
 8018906:	9b04      	ldr	r3, [sp, #16]
 8018908:	eba0 000a 	sub.w	r0, r0, sl
 801890c:	2240      	movs	r2, #64	@ 0x40
 801890e:	4082      	lsls	r2, r0
 8018910:	4313      	orrs	r3, r2
 8018912:	3401      	adds	r4, #1
 8018914:	9304      	str	r3, [sp, #16]
 8018916:	f814 1b01 	ldrb.w	r1, [r4], #1
 801891a:	4829      	ldr	r0, [pc, #164]	@ (80189c0 <_vfiprintf_r+0x220>)
 801891c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018920:	2206      	movs	r2, #6
 8018922:	f7e7 fce5 	bl	80002f0 <memchr>
 8018926:	2800      	cmp	r0, #0
 8018928:	d03f      	beq.n	80189aa <_vfiprintf_r+0x20a>
 801892a:	4b26      	ldr	r3, [pc, #152]	@ (80189c4 <_vfiprintf_r+0x224>)
 801892c:	bb1b      	cbnz	r3, 8018976 <_vfiprintf_r+0x1d6>
 801892e:	9b03      	ldr	r3, [sp, #12]
 8018930:	3307      	adds	r3, #7
 8018932:	f023 0307 	bic.w	r3, r3, #7
 8018936:	3308      	adds	r3, #8
 8018938:	9303      	str	r3, [sp, #12]
 801893a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801893c:	443b      	add	r3, r7
 801893e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018940:	e76a      	b.n	8018818 <_vfiprintf_r+0x78>
 8018942:	fb0c 3202 	mla	r2, ip, r2, r3
 8018946:	460c      	mov	r4, r1
 8018948:	2001      	movs	r0, #1
 801894a:	e7a8      	b.n	801889e <_vfiprintf_r+0xfe>
 801894c:	2300      	movs	r3, #0
 801894e:	3401      	adds	r4, #1
 8018950:	9305      	str	r3, [sp, #20]
 8018952:	4619      	mov	r1, r3
 8018954:	f04f 0c0a 	mov.w	ip, #10
 8018958:	4620      	mov	r0, r4
 801895a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801895e:	3a30      	subs	r2, #48	@ 0x30
 8018960:	2a09      	cmp	r2, #9
 8018962:	d903      	bls.n	801896c <_vfiprintf_r+0x1cc>
 8018964:	2b00      	cmp	r3, #0
 8018966:	d0c6      	beq.n	80188f6 <_vfiprintf_r+0x156>
 8018968:	9105      	str	r1, [sp, #20]
 801896a:	e7c4      	b.n	80188f6 <_vfiprintf_r+0x156>
 801896c:	fb0c 2101 	mla	r1, ip, r1, r2
 8018970:	4604      	mov	r4, r0
 8018972:	2301      	movs	r3, #1
 8018974:	e7f0      	b.n	8018958 <_vfiprintf_r+0x1b8>
 8018976:	ab03      	add	r3, sp, #12
 8018978:	9300      	str	r3, [sp, #0]
 801897a:	462a      	mov	r2, r5
 801897c:	4b12      	ldr	r3, [pc, #72]	@ (80189c8 <_vfiprintf_r+0x228>)
 801897e:	a904      	add	r1, sp, #16
 8018980:	4630      	mov	r0, r6
 8018982:	f3af 8000 	nop.w
 8018986:	4607      	mov	r7, r0
 8018988:	1c78      	adds	r0, r7, #1
 801898a:	d1d6      	bne.n	801893a <_vfiprintf_r+0x19a>
 801898c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801898e:	07d9      	lsls	r1, r3, #31
 8018990:	d405      	bmi.n	801899e <_vfiprintf_r+0x1fe>
 8018992:	89ab      	ldrh	r3, [r5, #12]
 8018994:	059a      	lsls	r2, r3, #22
 8018996:	d402      	bmi.n	801899e <_vfiprintf_r+0x1fe>
 8018998:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801899a:	f7ff fc77 	bl	801828c <__retarget_lock_release_recursive>
 801899e:	89ab      	ldrh	r3, [r5, #12]
 80189a0:	065b      	lsls	r3, r3, #25
 80189a2:	f53f af1f 	bmi.w	80187e4 <_vfiprintf_r+0x44>
 80189a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80189a8:	e71e      	b.n	80187e8 <_vfiprintf_r+0x48>
 80189aa:	ab03      	add	r3, sp, #12
 80189ac:	9300      	str	r3, [sp, #0]
 80189ae:	462a      	mov	r2, r5
 80189b0:	4b05      	ldr	r3, [pc, #20]	@ (80189c8 <_vfiprintf_r+0x228>)
 80189b2:	a904      	add	r1, sp, #16
 80189b4:	4630      	mov	r0, r6
 80189b6:	f000 f879 	bl	8018aac <_printf_i>
 80189ba:	e7e4      	b.n	8018986 <_vfiprintf_r+0x1e6>
 80189bc:	080199c0 	.word	0x080199c0
 80189c0:	080199ca 	.word	0x080199ca
 80189c4:	00000000 	.word	0x00000000
 80189c8:	0801877b 	.word	0x0801877b
 80189cc:	080199c6 	.word	0x080199c6

080189d0 <_printf_common>:
 80189d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189d4:	4616      	mov	r6, r2
 80189d6:	4698      	mov	r8, r3
 80189d8:	688a      	ldr	r2, [r1, #8]
 80189da:	690b      	ldr	r3, [r1, #16]
 80189dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80189e0:	4293      	cmp	r3, r2
 80189e2:	bfb8      	it	lt
 80189e4:	4613      	movlt	r3, r2
 80189e6:	6033      	str	r3, [r6, #0]
 80189e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80189ec:	4607      	mov	r7, r0
 80189ee:	460c      	mov	r4, r1
 80189f0:	b10a      	cbz	r2, 80189f6 <_printf_common+0x26>
 80189f2:	3301      	adds	r3, #1
 80189f4:	6033      	str	r3, [r6, #0]
 80189f6:	6823      	ldr	r3, [r4, #0]
 80189f8:	0699      	lsls	r1, r3, #26
 80189fa:	bf42      	ittt	mi
 80189fc:	6833      	ldrmi	r3, [r6, #0]
 80189fe:	3302      	addmi	r3, #2
 8018a00:	6033      	strmi	r3, [r6, #0]
 8018a02:	6825      	ldr	r5, [r4, #0]
 8018a04:	f015 0506 	ands.w	r5, r5, #6
 8018a08:	d106      	bne.n	8018a18 <_printf_common+0x48>
 8018a0a:	f104 0a19 	add.w	sl, r4, #25
 8018a0e:	68e3      	ldr	r3, [r4, #12]
 8018a10:	6832      	ldr	r2, [r6, #0]
 8018a12:	1a9b      	subs	r3, r3, r2
 8018a14:	42ab      	cmp	r3, r5
 8018a16:	dc26      	bgt.n	8018a66 <_printf_common+0x96>
 8018a18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018a1c:	6822      	ldr	r2, [r4, #0]
 8018a1e:	3b00      	subs	r3, #0
 8018a20:	bf18      	it	ne
 8018a22:	2301      	movne	r3, #1
 8018a24:	0692      	lsls	r2, r2, #26
 8018a26:	d42b      	bmi.n	8018a80 <_printf_common+0xb0>
 8018a28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018a2c:	4641      	mov	r1, r8
 8018a2e:	4638      	mov	r0, r7
 8018a30:	47c8      	blx	r9
 8018a32:	3001      	adds	r0, #1
 8018a34:	d01e      	beq.n	8018a74 <_printf_common+0xa4>
 8018a36:	6823      	ldr	r3, [r4, #0]
 8018a38:	6922      	ldr	r2, [r4, #16]
 8018a3a:	f003 0306 	and.w	r3, r3, #6
 8018a3e:	2b04      	cmp	r3, #4
 8018a40:	bf02      	ittt	eq
 8018a42:	68e5      	ldreq	r5, [r4, #12]
 8018a44:	6833      	ldreq	r3, [r6, #0]
 8018a46:	1aed      	subeq	r5, r5, r3
 8018a48:	68a3      	ldr	r3, [r4, #8]
 8018a4a:	bf0c      	ite	eq
 8018a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018a50:	2500      	movne	r5, #0
 8018a52:	4293      	cmp	r3, r2
 8018a54:	bfc4      	itt	gt
 8018a56:	1a9b      	subgt	r3, r3, r2
 8018a58:	18ed      	addgt	r5, r5, r3
 8018a5a:	2600      	movs	r6, #0
 8018a5c:	341a      	adds	r4, #26
 8018a5e:	42b5      	cmp	r5, r6
 8018a60:	d11a      	bne.n	8018a98 <_printf_common+0xc8>
 8018a62:	2000      	movs	r0, #0
 8018a64:	e008      	b.n	8018a78 <_printf_common+0xa8>
 8018a66:	2301      	movs	r3, #1
 8018a68:	4652      	mov	r2, sl
 8018a6a:	4641      	mov	r1, r8
 8018a6c:	4638      	mov	r0, r7
 8018a6e:	47c8      	blx	r9
 8018a70:	3001      	adds	r0, #1
 8018a72:	d103      	bne.n	8018a7c <_printf_common+0xac>
 8018a74:	f04f 30ff 	mov.w	r0, #4294967295
 8018a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a7c:	3501      	adds	r5, #1
 8018a7e:	e7c6      	b.n	8018a0e <_printf_common+0x3e>
 8018a80:	18e1      	adds	r1, r4, r3
 8018a82:	1c5a      	adds	r2, r3, #1
 8018a84:	2030      	movs	r0, #48	@ 0x30
 8018a86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018a8a:	4422      	add	r2, r4
 8018a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018a90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018a94:	3302      	adds	r3, #2
 8018a96:	e7c7      	b.n	8018a28 <_printf_common+0x58>
 8018a98:	2301      	movs	r3, #1
 8018a9a:	4622      	mov	r2, r4
 8018a9c:	4641      	mov	r1, r8
 8018a9e:	4638      	mov	r0, r7
 8018aa0:	47c8      	blx	r9
 8018aa2:	3001      	adds	r0, #1
 8018aa4:	d0e6      	beq.n	8018a74 <_printf_common+0xa4>
 8018aa6:	3601      	adds	r6, #1
 8018aa8:	e7d9      	b.n	8018a5e <_printf_common+0x8e>
	...

08018aac <_printf_i>:
 8018aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018ab0:	7e0f      	ldrb	r7, [r1, #24]
 8018ab2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018ab4:	2f78      	cmp	r7, #120	@ 0x78
 8018ab6:	4691      	mov	r9, r2
 8018ab8:	4680      	mov	r8, r0
 8018aba:	460c      	mov	r4, r1
 8018abc:	469a      	mov	sl, r3
 8018abe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018ac2:	d807      	bhi.n	8018ad4 <_printf_i+0x28>
 8018ac4:	2f62      	cmp	r7, #98	@ 0x62
 8018ac6:	d80a      	bhi.n	8018ade <_printf_i+0x32>
 8018ac8:	2f00      	cmp	r7, #0
 8018aca:	f000 80d2 	beq.w	8018c72 <_printf_i+0x1c6>
 8018ace:	2f58      	cmp	r7, #88	@ 0x58
 8018ad0:	f000 80b9 	beq.w	8018c46 <_printf_i+0x19a>
 8018ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018ad8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018adc:	e03a      	b.n	8018b54 <_printf_i+0xa8>
 8018ade:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018ae2:	2b15      	cmp	r3, #21
 8018ae4:	d8f6      	bhi.n	8018ad4 <_printf_i+0x28>
 8018ae6:	a101      	add	r1, pc, #4	@ (adr r1, 8018aec <_printf_i+0x40>)
 8018ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018aec:	08018b45 	.word	0x08018b45
 8018af0:	08018b59 	.word	0x08018b59
 8018af4:	08018ad5 	.word	0x08018ad5
 8018af8:	08018ad5 	.word	0x08018ad5
 8018afc:	08018ad5 	.word	0x08018ad5
 8018b00:	08018ad5 	.word	0x08018ad5
 8018b04:	08018b59 	.word	0x08018b59
 8018b08:	08018ad5 	.word	0x08018ad5
 8018b0c:	08018ad5 	.word	0x08018ad5
 8018b10:	08018ad5 	.word	0x08018ad5
 8018b14:	08018ad5 	.word	0x08018ad5
 8018b18:	08018c59 	.word	0x08018c59
 8018b1c:	08018b83 	.word	0x08018b83
 8018b20:	08018c13 	.word	0x08018c13
 8018b24:	08018ad5 	.word	0x08018ad5
 8018b28:	08018ad5 	.word	0x08018ad5
 8018b2c:	08018c7b 	.word	0x08018c7b
 8018b30:	08018ad5 	.word	0x08018ad5
 8018b34:	08018b83 	.word	0x08018b83
 8018b38:	08018ad5 	.word	0x08018ad5
 8018b3c:	08018ad5 	.word	0x08018ad5
 8018b40:	08018c1b 	.word	0x08018c1b
 8018b44:	6833      	ldr	r3, [r6, #0]
 8018b46:	1d1a      	adds	r2, r3, #4
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	6032      	str	r2, [r6, #0]
 8018b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018b50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018b54:	2301      	movs	r3, #1
 8018b56:	e09d      	b.n	8018c94 <_printf_i+0x1e8>
 8018b58:	6833      	ldr	r3, [r6, #0]
 8018b5a:	6820      	ldr	r0, [r4, #0]
 8018b5c:	1d19      	adds	r1, r3, #4
 8018b5e:	6031      	str	r1, [r6, #0]
 8018b60:	0606      	lsls	r6, r0, #24
 8018b62:	d501      	bpl.n	8018b68 <_printf_i+0xbc>
 8018b64:	681d      	ldr	r5, [r3, #0]
 8018b66:	e003      	b.n	8018b70 <_printf_i+0xc4>
 8018b68:	0645      	lsls	r5, r0, #25
 8018b6a:	d5fb      	bpl.n	8018b64 <_printf_i+0xb8>
 8018b6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018b70:	2d00      	cmp	r5, #0
 8018b72:	da03      	bge.n	8018b7c <_printf_i+0xd0>
 8018b74:	232d      	movs	r3, #45	@ 0x2d
 8018b76:	426d      	negs	r5, r5
 8018b78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018b7c:	4859      	ldr	r0, [pc, #356]	@ (8018ce4 <_printf_i+0x238>)
 8018b7e:	230a      	movs	r3, #10
 8018b80:	e011      	b.n	8018ba6 <_printf_i+0xfa>
 8018b82:	6821      	ldr	r1, [r4, #0]
 8018b84:	6833      	ldr	r3, [r6, #0]
 8018b86:	0608      	lsls	r0, r1, #24
 8018b88:	f853 5b04 	ldr.w	r5, [r3], #4
 8018b8c:	d402      	bmi.n	8018b94 <_printf_i+0xe8>
 8018b8e:	0649      	lsls	r1, r1, #25
 8018b90:	bf48      	it	mi
 8018b92:	b2ad      	uxthmi	r5, r5
 8018b94:	2f6f      	cmp	r7, #111	@ 0x6f
 8018b96:	4853      	ldr	r0, [pc, #332]	@ (8018ce4 <_printf_i+0x238>)
 8018b98:	6033      	str	r3, [r6, #0]
 8018b9a:	bf14      	ite	ne
 8018b9c:	230a      	movne	r3, #10
 8018b9e:	2308      	moveq	r3, #8
 8018ba0:	2100      	movs	r1, #0
 8018ba2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018ba6:	6866      	ldr	r6, [r4, #4]
 8018ba8:	60a6      	str	r6, [r4, #8]
 8018baa:	2e00      	cmp	r6, #0
 8018bac:	bfa2      	ittt	ge
 8018bae:	6821      	ldrge	r1, [r4, #0]
 8018bb0:	f021 0104 	bicge.w	r1, r1, #4
 8018bb4:	6021      	strge	r1, [r4, #0]
 8018bb6:	b90d      	cbnz	r5, 8018bbc <_printf_i+0x110>
 8018bb8:	2e00      	cmp	r6, #0
 8018bba:	d04b      	beq.n	8018c54 <_printf_i+0x1a8>
 8018bbc:	4616      	mov	r6, r2
 8018bbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8018bc2:	fb03 5711 	mls	r7, r3, r1, r5
 8018bc6:	5dc7      	ldrb	r7, [r0, r7]
 8018bc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018bcc:	462f      	mov	r7, r5
 8018bce:	42bb      	cmp	r3, r7
 8018bd0:	460d      	mov	r5, r1
 8018bd2:	d9f4      	bls.n	8018bbe <_printf_i+0x112>
 8018bd4:	2b08      	cmp	r3, #8
 8018bd6:	d10b      	bne.n	8018bf0 <_printf_i+0x144>
 8018bd8:	6823      	ldr	r3, [r4, #0]
 8018bda:	07df      	lsls	r7, r3, #31
 8018bdc:	d508      	bpl.n	8018bf0 <_printf_i+0x144>
 8018bde:	6923      	ldr	r3, [r4, #16]
 8018be0:	6861      	ldr	r1, [r4, #4]
 8018be2:	4299      	cmp	r1, r3
 8018be4:	bfde      	ittt	le
 8018be6:	2330      	movle	r3, #48	@ 0x30
 8018be8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018bec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018bf0:	1b92      	subs	r2, r2, r6
 8018bf2:	6122      	str	r2, [r4, #16]
 8018bf4:	f8cd a000 	str.w	sl, [sp]
 8018bf8:	464b      	mov	r3, r9
 8018bfa:	aa03      	add	r2, sp, #12
 8018bfc:	4621      	mov	r1, r4
 8018bfe:	4640      	mov	r0, r8
 8018c00:	f7ff fee6 	bl	80189d0 <_printf_common>
 8018c04:	3001      	adds	r0, #1
 8018c06:	d14a      	bne.n	8018c9e <_printf_i+0x1f2>
 8018c08:	f04f 30ff 	mov.w	r0, #4294967295
 8018c0c:	b004      	add	sp, #16
 8018c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c12:	6823      	ldr	r3, [r4, #0]
 8018c14:	f043 0320 	orr.w	r3, r3, #32
 8018c18:	6023      	str	r3, [r4, #0]
 8018c1a:	4833      	ldr	r0, [pc, #204]	@ (8018ce8 <_printf_i+0x23c>)
 8018c1c:	2778      	movs	r7, #120	@ 0x78
 8018c1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018c22:	6823      	ldr	r3, [r4, #0]
 8018c24:	6831      	ldr	r1, [r6, #0]
 8018c26:	061f      	lsls	r7, r3, #24
 8018c28:	f851 5b04 	ldr.w	r5, [r1], #4
 8018c2c:	d402      	bmi.n	8018c34 <_printf_i+0x188>
 8018c2e:	065f      	lsls	r7, r3, #25
 8018c30:	bf48      	it	mi
 8018c32:	b2ad      	uxthmi	r5, r5
 8018c34:	6031      	str	r1, [r6, #0]
 8018c36:	07d9      	lsls	r1, r3, #31
 8018c38:	bf44      	itt	mi
 8018c3a:	f043 0320 	orrmi.w	r3, r3, #32
 8018c3e:	6023      	strmi	r3, [r4, #0]
 8018c40:	b11d      	cbz	r5, 8018c4a <_printf_i+0x19e>
 8018c42:	2310      	movs	r3, #16
 8018c44:	e7ac      	b.n	8018ba0 <_printf_i+0xf4>
 8018c46:	4827      	ldr	r0, [pc, #156]	@ (8018ce4 <_printf_i+0x238>)
 8018c48:	e7e9      	b.n	8018c1e <_printf_i+0x172>
 8018c4a:	6823      	ldr	r3, [r4, #0]
 8018c4c:	f023 0320 	bic.w	r3, r3, #32
 8018c50:	6023      	str	r3, [r4, #0]
 8018c52:	e7f6      	b.n	8018c42 <_printf_i+0x196>
 8018c54:	4616      	mov	r6, r2
 8018c56:	e7bd      	b.n	8018bd4 <_printf_i+0x128>
 8018c58:	6833      	ldr	r3, [r6, #0]
 8018c5a:	6825      	ldr	r5, [r4, #0]
 8018c5c:	6961      	ldr	r1, [r4, #20]
 8018c5e:	1d18      	adds	r0, r3, #4
 8018c60:	6030      	str	r0, [r6, #0]
 8018c62:	062e      	lsls	r6, r5, #24
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	d501      	bpl.n	8018c6c <_printf_i+0x1c0>
 8018c68:	6019      	str	r1, [r3, #0]
 8018c6a:	e002      	b.n	8018c72 <_printf_i+0x1c6>
 8018c6c:	0668      	lsls	r0, r5, #25
 8018c6e:	d5fb      	bpl.n	8018c68 <_printf_i+0x1bc>
 8018c70:	8019      	strh	r1, [r3, #0]
 8018c72:	2300      	movs	r3, #0
 8018c74:	6123      	str	r3, [r4, #16]
 8018c76:	4616      	mov	r6, r2
 8018c78:	e7bc      	b.n	8018bf4 <_printf_i+0x148>
 8018c7a:	6833      	ldr	r3, [r6, #0]
 8018c7c:	1d1a      	adds	r2, r3, #4
 8018c7e:	6032      	str	r2, [r6, #0]
 8018c80:	681e      	ldr	r6, [r3, #0]
 8018c82:	6862      	ldr	r2, [r4, #4]
 8018c84:	2100      	movs	r1, #0
 8018c86:	4630      	mov	r0, r6
 8018c88:	f7e7 fb32 	bl	80002f0 <memchr>
 8018c8c:	b108      	cbz	r0, 8018c92 <_printf_i+0x1e6>
 8018c8e:	1b80      	subs	r0, r0, r6
 8018c90:	6060      	str	r0, [r4, #4]
 8018c92:	6863      	ldr	r3, [r4, #4]
 8018c94:	6123      	str	r3, [r4, #16]
 8018c96:	2300      	movs	r3, #0
 8018c98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018c9c:	e7aa      	b.n	8018bf4 <_printf_i+0x148>
 8018c9e:	6923      	ldr	r3, [r4, #16]
 8018ca0:	4632      	mov	r2, r6
 8018ca2:	4649      	mov	r1, r9
 8018ca4:	4640      	mov	r0, r8
 8018ca6:	47d0      	blx	sl
 8018ca8:	3001      	adds	r0, #1
 8018caa:	d0ad      	beq.n	8018c08 <_printf_i+0x15c>
 8018cac:	6823      	ldr	r3, [r4, #0]
 8018cae:	079b      	lsls	r3, r3, #30
 8018cb0:	d413      	bmi.n	8018cda <_printf_i+0x22e>
 8018cb2:	68e0      	ldr	r0, [r4, #12]
 8018cb4:	9b03      	ldr	r3, [sp, #12]
 8018cb6:	4298      	cmp	r0, r3
 8018cb8:	bfb8      	it	lt
 8018cba:	4618      	movlt	r0, r3
 8018cbc:	e7a6      	b.n	8018c0c <_printf_i+0x160>
 8018cbe:	2301      	movs	r3, #1
 8018cc0:	4632      	mov	r2, r6
 8018cc2:	4649      	mov	r1, r9
 8018cc4:	4640      	mov	r0, r8
 8018cc6:	47d0      	blx	sl
 8018cc8:	3001      	adds	r0, #1
 8018cca:	d09d      	beq.n	8018c08 <_printf_i+0x15c>
 8018ccc:	3501      	adds	r5, #1
 8018cce:	68e3      	ldr	r3, [r4, #12]
 8018cd0:	9903      	ldr	r1, [sp, #12]
 8018cd2:	1a5b      	subs	r3, r3, r1
 8018cd4:	42ab      	cmp	r3, r5
 8018cd6:	dcf2      	bgt.n	8018cbe <_printf_i+0x212>
 8018cd8:	e7eb      	b.n	8018cb2 <_printf_i+0x206>
 8018cda:	2500      	movs	r5, #0
 8018cdc:	f104 0619 	add.w	r6, r4, #25
 8018ce0:	e7f5      	b.n	8018cce <_printf_i+0x222>
 8018ce2:	bf00      	nop
 8018ce4:	080199d1 	.word	0x080199d1
 8018ce8:	080199e2 	.word	0x080199e2

08018cec <__sflush_r>:
 8018cec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cf4:	0716      	lsls	r6, r2, #28
 8018cf6:	4605      	mov	r5, r0
 8018cf8:	460c      	mov	r4, r1
 8018cfa:	d454      	bmi.n	8018da6 <__sflush_r+0xba>
 8018cfc:	684b      	ldr	r3, [r1, #4]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	dc02      	bgt.n	8018d08 <__sflush_r+0x1c>
 8018d02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	dd48      	ble.n	8018d9a <__sflush_r+0xae>
 8018d08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018d0a:	2e00      	cmp	r6, #0
 8018d0c:	d045      	beq.n	8018d9a <__sflush_r+0xae>
 8018d0e:	2300      	movs	r3, #0
 8018d10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018d14:	682f      	ldr	r7, [r5, #0]
 8018d16:	6a21      	ldr	r1, [r4, #32]
 8018d18:	602b      	str	r3, [r5, #0]
 8018d1a:	d030      	beq.n	8018d7e <__sflush_r+0x92>
 8018d1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018d1e:	89a3      	ldrh	r3, [r4, #12]
 8018d20:	0759      	lsls	r1, r3, #29
 8018d22:	d505      	bpl.n	8018d30 <__sflush_r+0x44>
 8018d24:	6863      	ldr	r3, [r4, #4]
 8018d26:	1ad2      	subs	r2, r2, r3
 8018d28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018d2a:	b10b      	cbz	r3, 8018d30 <__sflush_r+0x44>
 8018d2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018d2e:	1ad2      	subs	r2, r2, r3
 8018d30:	2300      	movs	r3, #0
 8018d32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018d34:	6a21      	ldr	r1, [r4, #32]
 8018d36:	4628      	mov	r0, r5
 8018d38:	47b0      	blx	r6
 8018d3a:	1c43      	adds	r3, r0, #1
 8018d3c:	89a3      	ldrh	r3, [r4, #12]
 8018d3e:	d106      	bne.n	8018d4e <__sflush_r+0x62>
 8018d40:	6829      	ldr	r1, [r5, #0]
 8018d42:	291d      	cmp	r1, #29
 8018d44:	d82b      	bhi.n	8018d9e <__sflush_r+0xb2>
 8018d46:	4a2a      	ldr	r2, [pc, #168]	@ (8018df0 <__sflush_r+0x104>)
 8018d48:	410a      	asrs	r2, r1
 8018d4a:	07d6      	lsls	r6, r2, #31
 8018d4c:	d427      	bmi.n	8018d9e <__sflush_r+0xb2>
 8018d4e:	2200      	movs	r2, #0
 8018d50:	6062      	str	r2, [r4, #4]
 8018d52:	04d9      	lsls	r1, r3, #19
 8018d54:	6922      	ldr	r2, [r4, #16]
 8018d56:	6022      	str	r2, [r4, #0]
 8018d58:	d504      	bpl.n	8018d64 <__sflush_r+0x78>
 8018d5a:	1c42      	adds	r2, r0, #1
 8018d5c:	d101      	bne.n	8018d62 <__sflush_r+0x76>
 8018d5e:	682b      	ldr	r3, [r5, #0]
 8018d60:	b903      	cbnz	r3, 8018d64 <__sflush_r+0x78>
 8018d62:	6560      	str	r0, [r4, #84]	@ 0x54
 8018d64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018d66:	602f      	str	r7, [r5, #0]
 8018d68:	b1b9      	cbz	r1, 8018d9a <__sflush_r+0xae>
 8018d6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018d6e:	4299      	cmp	r1, r3
 8018d70:	d002      	beq.n	8018d78 <__sflush_r+0x8c>
 8018d72:	4628      	mov	r0, r5
 8018d74:	f7ff fa9a 	bl	80182ac <_free_r>
 8018d78:	2300      	movs	r3, #0
 8018d7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8018d7c:	e00d      	b.n	8018d9a <__sflush_r+0xae>
 8018d7e:	2301      	movs	r3, #1
 8018d80:	4628      	mov	r0, r5
 8018d82:	47b0      	blx	r6
 8018d84:	4602      	mov	r2, r0
 8018d86:	1c50      	adds	r0, r2, #1
 8018d88:	d1c9      	bne.n	8018d1e <__sflush_r+0x32>
 8018d8a:	682b      	ldr	r3, [r5, #0]
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d0c6      	beq.n	8018d1e <__sflush_r+0x32>
 8018d90:	2b1d      	cmp	r3, #29
 8018d92:	d001      	beq.n	8018d98 <__sflush_r+0xac>
 8018d94:	2b16      	cmp	r3, #22
 8018d96:	d11e      	bne.n	8018dd6 <__sflush_r+0xea>
 8018d98:	602f      	str	r7, [r5, #0]
 8018d9a:	2000      	movs	r0, #0
 8018d9c:	e022      	b.n	8018de4 <__sflush_r+0xf8>
 8018d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018da2:	b21b      	sxth	r3, r3
 8018da4:	e01b      	b.n	8018dde <__sflush_r+0xf2>
 8018da6:	690f      	ldr	r7, [r1, #16]
 8018da8:	2f00      	cmp	r7, #0
 8018daa:	d0f6      	beq.n	8018d9a <__sflush_r+0xae>
 8018dac:	0793      	lsls	r3, r2, #30
 8018dae:	680e      	ldr	r6, [r1, #0]
 8018db0:	bf08      	it	eq
 8018db2:	694b      	ldreq	r3, [r1, #20]
 8018db4:	600f      	str	r7, [r1, #0]
 8018db6:	bf18      	it	ne
 8018db8:	2300      	movne	r3, #0
 8018dba:	eba6 0807 	sub.w	r8, r6, r7
 8018dbe:	608b      	str	r3, [r1, #8]
 8018dc0:	f1b8 0f00 	cmp.w	r8, #0
 8018dc4:	dde9      	ble.n	8018d9a <__sflush_r+0xae>
 8018dc6:	6a21      	ldr	r1, [r4, #32]
 8018dc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018dca:	4643      	mov	r3, r8
 8018dcc:	463a      	mov	r2, r7
 8018dce:	4628      	mov	r0, r5
 8018dd0:	47b0      	blx	r6
 8018dd2:	2800      	cmp	r0, #0
 8018dd4:	dc08      	bgt.n	8018de8 <__sflush_r+0xfc>
 8018dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018dda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018dde:	81a3      	strh	r3, [r4, #12]
 8018de0:	f04f 30ff 	mov.w	r0, #4294967295
 8018de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018de8:	4407      	add	r7, r0
 8018dea:	eba8 0800 	sub.w	r8, r8, r0
 8018dee:	e7e7      	b.n	8018dc0 <__sflush_r+0xd4>
 8018df0:	dfbffffe 	.word	0xdfbffffe

08018df4 <_fflush_r>:
 8018df4:	b538      	push	{r3, r4, r5, lr}
 8018df6:	690b      	ldr	r3, [r1, #16]
 8018df8:	4605      	mov	r5, r0
 8018dfa:	460c      	mov	r4, r1
 8018dfc:	b913      	cbnz	r3, 8018e04 <_fflush_r+0x10>
 8018dfe:	2500      	movs	r5, #0
 8018e00:	4628      	mov	r0, r5
 8018e02:	bd38      	pop	{r3, r4, r5, pc}
 8018e04:	b118      	cbz	r0, 8018e0e <_fflush_r+0x1a>
 8018e06:	6a03      	ldr	r3, [r0, #32]
 8018e08:	b90b      	cbnz	r3, 8018e0e <_fflush_r+0x1a>
 8018e0a:	f7ff f8bb 	bl	8017f84 <__sinit>
 8018e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d0f3      	beq.n	8018dfe <_fflush_r+0xa>
 8018e16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018e18:	07d0      	lsls	r0, r2, #31
 8018e1a:	d404      	bmi.n	8018e26 <_fflush_r+0x32>
 8018e1c:	0599      	lsls	r1, r3, #22
 8018e1e:	d402      	bmi.n	8018e26 <_fflush_r+0x32>
 8018e20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018e22:	f7ff fa32 	bl	801828a <__retarget_lock_acquire_recursive>
 8018e26:	4628      	mov	r0, r5
 8018e28:	4621      	mov	r1, r4
 8018e2a:	f7ff ff5f 	bl	8018cec <__sflush_r>
 8018e2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018e30:	07da      	lsls	r2, r3, #31
 8018e32:	4605      	mov	r5, r0
 8018e34:	d4e4      	bmi.n	8018e00 <_fflush_r+0xc>
 8018e36:	89a3      	ldrh	r3, [r4, #12]
 8018e38:	059b      	lsls	r3, r3, #22
 8018e3a:	d4e1      	bmi.n	8018e00 <_fflush_r+0xc>
 8018e3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018e3e:	f7ff fa25 	bl	801828c <__retarget_lock_release_recursive>
 8018e42:	e7dd      	b.n	8018e00 <_fflush_r+0xc>

08018e44 <_putc_r>:
 8018e44:	b570      	push	{r4, r5, r6, lr}
 8018e46:	460d      	mov	r5, r1
 8018e48:	4614      	mov	r4, r2
 8018e4a:	4606      	mov	r6, r0
 8018e4c:	b118      	cbz	r0, 8018e56 <_putc_r+0x12>
 8018e4e:	6a03      	ldr	r3, [r0, #32]
 8018e50:	b90b      	cbnz	r3, 8018e56 <_putc_r+0x12>
 8018e52:	f7ff f897 	bl	8017f84 <__sinit>
 8018e56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018e58:	07d8      	lsls	r0, r3, #31
 8018e5a:	d405      	bmi.n	8018e68 <_putc_r+0x24>
 8018e5c:	89a3      	ldrh	r3, [r4, #12]
 8018e5e:	0599      	lsls	r1, r3, #22
 8018e60:	d402      	bmi.n	8018e68 <_putc_r+0x24>
 8018e62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018e64:	f7ff fa11 	bl	801828a <__retarget_lock_acquire_recursive>
 8018e68:	68a3      	ldr	r3, [r4, #8]
 8018e6a:	3b01      	subs	r3, #1
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	60a3      	str	r3, [r4, #8]
 8018e70:	da05      	bge.n	8018e7e <_putc_r+0x3a>
 8018e72:	69a2      	ldr	r2, [r4, #24]
 8018e74:	4293      	cmp	r3, r2
 8018e76:	db12      	blt.n	8018e9e <_putc_r+0x5a>
 8018e78:	b2eb      	uxtb	r3, r5
 8018e7a:	2b0a      	cmp	r3, #10
 8018e7c:	d00f      	beq.n	8018e9e <_putc_r+0x5a>
 8018e7e:	6823      	ldr	r3, [r4, #0]
 8018e80:	1c5a      	adds	r2, r3, #1
 8018e82:	6022      	str	r2, [r4, #0]
 8018e84:	701d      	strb	r5, [r3, #0]
 8018e86:	b2ed      	uxtb	r5, r5
 8018e88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018e8a:	07da      	lsls	r2, r3, #31
 8018e8c:	d405      	bmi.n	8018e9a <_putc_r+0x56>
 8018e8e:	89a3      	ldrh	r3, [r4, #12]
 8018e90:	059b      	lsls	r3, r3, #22
 8018e92:	d402      	bmi.n	8018e9a <_putc_r+0x56>
 8018e94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018e96:	f7ff f9f9 	bl	801828c <__retarget_lock_release_recursive>
 8018e9a:	4628      	mov	r0, r5
 8018e9c:	bd70      	pop	{r4, r5, r6, pc}
 8018e9e:	4629      	mov	r1, r5
 8018ea0:	4622      	mov	r2, r4
 8018ea2:	4630      	mov	r0, r6
 8018ea4:	f000 f802 	bl	8018eac <__swbuf_r>
 8018ea8:	4605      	mov	r5, r0
 8018eaa:	e7ed      	b.n	8018e88 <_putc_r+0x44>

08018eac <__swbuf_r>:
 8018eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eae:	460e      	mov	r6, r1
 8018eb0:	4614      	mov	r4, r2
 8018eb2:	4605      	mov	r5, r0
 8018eb4:	b118      	cbz	r0, 8018ebe <__swbuf_r+0x12>
 8018eb6:	6a03      	ldr	r3, [r0, #32]
 8018eb8:	b90b      	cbnz	r3, 8018ebe <__swbuf_r+0x12>
 8018eba:	f7ff f863 	bl	8017f84 <__sinit>
 8018ebe:	69a3      	ldr	r3, [r4, #24]
 8018ec0:	60a3      	str	r3, [r4, #8]
 8018ec2:	89a3      	ldrh	r3, [r4, #12]
 8018ec4:	071a      	lsls	r2, r3, #28
 8018ec6:	d501      	bpl.n	8018ecc <__swbuf_r+0x20>
 8018ec8:	6923      	ldr	r3, [r4, #16]
 8018eca:	b943      	cbnz	r3, 8018ede <__swbuf_r+0x32>
 8018ecc:	4621      	mov	r1, r4
 8018ece:	4628      	mov	r0, r5
 8018ed0:	f000 f82a 	bl	8018f28 <__swsetup_r>
 8018ed4:	b118      	cbz	r0, 8018ede <__swbuf_r+0x32>
 8018ed6:	f04f 37ff 	mov.w	r7, #4294967295
 8018eda:	4638      	mov	r0, r7
 8018edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ede:	6823      	ldr	r3, [r4, #0]
 8018ee0:	6922      	ldr	r2, [r4, #16]
 8018ee2:	1a98      	subs	r0, r3, r2
 8018ee4:	6963      	ldr	r3, [r4, #20]
 8018ee6:	b2f6      	uxtb	r6, r6
 8018ee8:	4283      	cmp	r3, r0
 8018eea:	4637      	mov	r7, r6
 8018eec:	dc05      	bgt.n	8018efa <__swbuf_r+0x4e>
 8018eee:	4621      	mov	r1, r4
 8018ef0:	4628      	mov	r0, r5
 8018ef2:	f7ff ff7f 	bl	8018df4 <_fflush_r>
 8018ef6:	2800      	cmp	r0, #0
 8018ef8:	d1ed      	bne.n	8018ed6 <__swbuf_r+0x2a>
 8018efa:	68a3      	ldr	r3, [r4, #8]
 8018efc:	3b01      	subs	r3, #1
 8018efe:	60a3      	str	r3, [r4, #8]
 8018f00:	6823      	ldr	r3, [r4, #0]
 8018f02:	1c5a      	adds	r2, r3, #1
 8018f04:	6022      	str	r2, [r4, #0]
 8018f06:	701e      	strb	r6, [r3, #0]
 8018f08:	6962      	ldr	r2, [r4, #20]
 8018f0a:	1c43      	adds	r3, r0, #1
 8018f0c:	429a      	cmp	r2, r3
 8018f0e:	d004      	beq.n	8018f1a <__swbuf_r+0x6e>
 8018f10:	89a3      	ldrh	r3, [r4, #12]
 8018f12:	07db      	lsls	r3, r3, #31
 8018f14:	d5e1      	bpl.n	8018eda <__swbuf_r+0x2e>
 8018f16:	2e0a      	cmp	r6, #10
 8018f18:	d1df      	bne.n	8018eda <__swbuf_r+0x2e>
 8018f1a:	4621      	mov	r1, r4
 8018f1c:	4628      	mov	r0, r5
 8018f1e:	f7ff ff69 	bl	8018df4 <_fflush_r>
 8018f22:	2800      	cmp	r0, #0
 8018f24:	d0d9      	beq.n	8018eda <__swbuf_r+0x2e>
 8018f26:	e7d6      	b.n	8018ed6 <__swbuf_r+0x2a>

08018f28 <__swsetup_r>:
 8018f28:	b538      	push	{r3, r4, r5, lr}
 8018f2a:	4b29      	ldr	r3, [pc, #164]	@ (8018fd0 <__swsetup_r+0xa8>)
 8018f2c:	4605      	mov	r5, r0
 8018f2e:	6818      	ldr	r0, [r3, #0]
 8018f30:	460c      	mov	r4, r1
 8018f32:	b118      	cbz	r0, 8018f3c <__swsetup_r+0x14>
 8018f34:	6a03      	ldr	r3, [r0, #32]
 8018f36:	b90b      	cbnz	r3, 8018f3c <__swsetup_r+0x14>
 8018f38:	f7ff f824 	bl	8017f84 <__sinit>
 8018f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f40:	0719      	lsls	r1, r3, #28
 8018f42:	d422      	bmi.n	8018f8a <__swsetup_r+0x62>
 8018f44:	06da      	lsls	r2, r3, #27
 8018f46:	d407      	bmi.n	8018f58 <__swsetup_r+0x30>
 8018f48:	2209      	movs	r2, #9
 8018f4a:	602a      	str	r2, [r5, #0]
 8018f4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018f50:	81a3      	strh	r3, [r4, #12]
 8018f52:	f04f 30ff 	mov.w	r0, #4294967295
 8018f56:	e033      	b.n	8018fc0 <__swsetup_r+0x98>
 8018f58:	0758      	lsls	r0, r3, #29
 8018f5a:	d512      	bpl.n	8018f82 <__swsetup_r+0x5a>
 8018f5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018f5e:	b141      	cbz	r1, 8018f72 <__swsetup_r+0x4a>
 8018f60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018f64:	4299      	cmp	r1, r3
 8018f66:	d002      	beq.n	8018f6e <__swsetup_r+0x46>
 8018f68:	4628      	mov	r0, r5
 8018f6a:	f7ff f99f 	bl	80182ac <_free_r>
 8018f6e:	2300      	movs	r3, #0
 8018f70:	6363      	str	r3, [r4, #52]	@ 0x34
 8018f72:	89a3      	ldrh	r3, [r4, #12]
 8018f74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018f78:	81a3      	strh	r3, [r4, #12]
 8018f7a:	2300      	movs	r3, #0
 8018f7c:	6063      	str	r3, [r4, #4]
 8018f7e:	6923      	ldr	r3, [r4, #16]
 8018f80:	6023      	str	r3, [r4, #0]
 8018f82:	89a3      	ldrh	r3, [r4, #12]
 8018f84:	f043 0308 	orr.w	r3, r3, #8
 8018f88:	81a3      	strh	r3, [r4, #12]
 8018f8a:	6923      	ldr	r3, [r4, #16]
 8018f8c:	b94b      	cbnz	r3, 8018fa2 <__swsetup_r+0x7a>
 8018f8e:	89a3      	ldrh	r3, [r4, #12]
 8018f90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018f98:	d003      	beq.n	8018fa2 <__swsetup_r+0x7a>
 8018f9a:	4621      	mov	r1, r4
 8018f9c:	4628      	mov	r0, r5
 8018f9e:	f000 f897 	bl	80190d0 <__smakebuf_r>
 8018fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018fa6:	f013 0201 	ands.w	r2, r3, #1
 8018faa:	d00a      	beq.n	8018fc2 <__swsetup_r+0x9a>
 8018fac:	2200      	movs	r2, #0
 8018fae:	60a2      	str	r2, [r4, #8]
 8018fb0:	6962      	ldr	r2, [r4, #20]
 8018fb2:	4252      	negs	r2, r2
 8018fb4:	61a2      	str	r2, [r4, #24]
 8018fb6:	6922      	ldr	r2, [r4, #16]
 8018fb8:	b942      	cbnz	r2, 8018fcc <__swsetup_r+0xa4>
 8018fba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018fbe:	d1c5      	bne.n	8018f4c <__swsetup_r+0x24>
 8018fc0:	bd38      	pop	{r3, r4, r5, pc}
 8018fc2:	0799      	lsls	r1, r3, #30
 8018fc4:	bf58      	it	pl
 8018fc6:	6962      	ldrpl	r2, [r4, #20]
 8018fc8:	60a2      	str	r2, [r4, #8]
 8018fca:	e7f4      	b.n	8018fb6 <__swsetup_r+0x8e>
 8018fcc:	2000      	movs	r0, #0
 8018fce:	e7f7      	b.n	8018fc0 <__swsetup_r+0x98>
 8018fd0:	240001d0 	.word	0x240001d0

08018fd4 <memmove>:
 8018fd4:	4288      	cmp	r0, r1
 8018fd6:	b510      	push	{r4, lr}
 8018fd8:	eb01 0402 	add.w	r4, r1, r2
 8018fdc:	d902      	bls.n	8018fe4 <memmove+0x10>
 8018fde:	4284      	cmp	r4, r0
 8018fe0:	4623      	mov	r3, r4
 8018fe2:	d807      	bhi.n	8018ff4 <memmove+0x20>
 8018fe4:	1e43      	subs	r3, r0, #1
 8018fe6:	42a1      	cmp	r1, r4
 8018fe8:	d008      	beq.n	8018ffc <memmove+0x28>
 8018fea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018fee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018ff2:	e7f8      	b.n	8018fe6 <memmove+0x12>
 8018ff4:	4402      	add	r2, r0
 8018ff6:	4601      	mov	r1, r0
 8018ff8:	428a      	cmp	r2, r1
 8018ffa:	d100      	bne.n	8018ffe <memmove+0x2a>
 8018ffc:	bd10      	pop	{r4, pc}
 8018ffe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019002:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019006:	e7f7      	b.n	8018ff8 <memmove+0x24>

08019008 <_sbrk_r>:
 8019008:	b538      	push	{r3, r4, r5, lr}
 801900a:	4d06      	ldr	r5, [pc, #24]	@ (8019024 <_sbrk_r+0x1c>)
 801900c:	2300      	movs	r3, #0
 801900e:	4604      	mov	r4, r0
 8019010:	4608      	mov	r0, r1
 8019012:	602b      	str	r3, [r5, #0]
 8019014:	f7ea faae 	bl	8003574 <_sbrk>
 8019018:	1c43      	adds	r3, r0, #1
 801901a:	d102      	bne.n	8019022 <_sbrk_r+0x1a>
 801901c:	682b      	ldr	r3, [r5, #0]
 801901e:	b103      	cbz	r3, 8019022 <_sbrk_r+0x1a>
 8019020:	6023      	str	r3, [r4, #0]
 8019022:	bd38      	pop	{r3, r4, r5, pc}
 8019024:	24028f18 	.word	0x24028f18

08019028 <_realloc_r>:
 8019028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801902c:	4680      	mov	r8, r0
 801902e:	4615      	mov	r5, r2
 8019030:	460c      	mov	r4, r1
 8019032:	b921      	cbnz	r1, 801903e <_realloc_r+0x16>
 8019034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019038:	4611      	mov	r1, r2
 801903a:	f7ff b9a3 	b.w	8018384 <_malloc_r>
 801903e:	b92a      	cbnz	r2, 801904c <_realloc_r+0x24>
 8019040:	f7ff f934 	bl	80182ac <_free_r>
 8019044:	2400      	movs	r4, #0
 8019046:	4620      	mov	r0, r4
 8019048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801904c:	f000 f89e 	bl	801918c <_malloc_usable_size_r>
 8019050:	4285      	cmp	r5, r0
 8019052:	4606      	mov	r6, r0
 8019054:	d802      	bhi.n	801905c <_realloc_r+0x34>
 8019056:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801905a:	d8f4      	bhi.n	8019046 <_realloc_r+0x1e>
 801905c:	4629      	mov	r1, r5
 801905e:	4640      	mov	r0, r8
 8019060:	f7ff f990 	bl	8018384 <_malloc_r>
 8019064:	4607      	mov	r7, r0
 8019066:	2800      	cmp	r0, #0
 8019068:	d0ec      	beq.n	8019044 <_realloc_r+0x1c>
 801906a:	42b5      	cmp	r5, r6
 801906c:	462a      	mov	r2, r5
 801906e:	4621      	mov	r1, r4
 8019070:	bf28      	it	cs
 8019072:	4632      	movcs	r2, r6
 8019074:	f7ff f90b 	bl	801828e <memcpy>
 8019078:	4621      	mov	r1, r4
 801907a:	4640      	mov	r0, r8
 801907c:	f7ff f916 	bl	80182ac <_free_r>
 8019080:	463c      	mov	r4, r7
 8019082:	e7e0      	b.n	8019046 <_realloc_r+0x1e>

08019084 <__swhatbuf_r>:
 8019084:	b570      	push	{r4, r5, r6, lr}
 8019086:	460c      	mov	r4, r1
 8019088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801908c:	2900      	cmp	r1, #0
 801908e:	b096      	sub	sp, #88	@ 0x58
 8019090:	4615      	mov	r5, r2
 8019092:	461e      	mov	r6, r3
 8019094:	da0d      	bge.n	80190b2 <__swhatbuf_r+0x2e>
 8019096:	89a3      	ldrh	r3, [r4, #12]
 8019098:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801909c:	f04f 0100 	mov.w	r1, #0
 80190a0:	bf14      	ite	ne
 80190a2:	2340      	movne	r3, #64	@ 0x40
 80190a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80190a8:	2000      	movs	r0, #0
 80190aa:	6031      	str	r1, [r6, #0]
 80190ac:	602b      	str	r3, [r5, #0]
 80190ae:	b016      	add	sp, #88	@ 0x58
 80190b0:	bd70      	pop	{r4, r5, r6, pc}
 80190b2:	466a      	mov	r2, sp
 80190b4:	f000 f848 	bl	8019148 <_fstat_r>
 80190b8:	2800      	cmp	r0, #0
 80190ba:	dbec      	blt.n	8019096 <__swhatbuf_r+0x12>
 80190bc:	9901      	ldr	r1, [sp, #4]
 80190be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80190c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80190c6:	4259      	negs	r1, r3
 80190c8:	4159      	adcs	r1, r3
 80190ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80190ce:	e7eb      	b.n	80190a8 <__swhatbuf_r+0x24>

080190d0 <__smakebuf_r>:
 80190d0:	898b      	ldrh	r3, [r1, #12]
 80190d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80190d4:	079d      	lsls	r5, r3, #30
 80190d6:	4606      	mov	r6, r0
 80190d8:	460c      	mov	r4, r1
 80190da:	d507      	bpl.n	80190ec <__smakebuf_r+0x1c>
 80190dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80190e0:	6023      	str	r3, [r4, #0]
 80190e2:	6123      	str	r3, [r4, #16]
 80190e4:	2301      	movs	r3, #1
 80190e6:	6163      	str	r3, [r4, #20]
 80190e8:	b003      	add	sp, #12
 80190ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190ec:	ab01      	add	r3, sp, #4
 80190ee:	466a      	mov	r2, sp
 80190f0:	f7ff ffc8 	bl	8019084 <__swhatbuf_r>
 80190f4:	9f00      	ldr	r7, [sp, #0]
 80190f6:	4605      	mov	r5, r0
 80190f8:	4639      	mov	r1, r7
 80190fa:	4630      	mov	r0, r6
 80190fc:	f7ff f942 	bl	8018384 <_malloc_r>
 8019100:	b948      	cbnz	r0, 8019116 <__smakebuf_r+0x46>
 8019102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019106:	059a      	lsls	r2, r3, #22
 8019108:	d4ee      	bmi.n	80190e8 <__smakebuf_r+0x18>
 801910a:	f023 0303 	bic.w	r3, r3, #3
 801910e:	f043 0302 	orr.w	r3, r3, #2
 8019112:	81a3      	strh	r3, [r4, #12]
 8019114:	e7e2      	b.n	80190dc <__smakebuf_r+0xc>
 8019116:	89a3      	ldrh	r3, [r4, #12]
 8019118:	6020      	str	r0, [r4, #0]
 801911a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801911e:	81a3      	strh	r3, [r4, #12]
 8019120:	9b01      	ldr	r3, [sp, #4]
 8019122:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019126:	b15b      	cbz	r3, 8019140 <__smakebuf_r+0x70>
 8019128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801912c:	4630      	mov	r0, r6
 801912e:	f000 f81d 	bl	801916c <_isatty_r>
 8019132:	b128      	cbz	r0, 8019140 <__smakebuf_r+0x70>
 8019134:	89a3      	ldrh	r3, [r4, #12]
 8019136:	f023 0303 	bic.w	r3, r3, #3
 801913a:	f043 0301 	orr.w	r3, r3, #1
 801913e:	81a3      	strh	r3, [r4, #12]
 8019140:	89a3      	ldrh	r3, [r4, #12]
 8019142:	431d      	orrs	r5, r3
 8019144:	81a5      	strh	r5, [r4, #12]
 8019146:	e7cf      	b.n	80190e8 <__smakebuf_r+0x18>

08019148 <_fstat_r>:
 8019148:	b538      	push	{r3, r4, r5, lr}
 801914a:	4d07      	ldr	r5, [pc, #28]	@ (8019168 <_fstat_r+0x20>)
 801914c:	2300      	movs	r3, #0
 801914e:	4604      	mov	r4, r0
 8019150:	4608      	mov	r0, r1
 8019152:	4611      	mov	r1, r2
 8019154:	602b      	str	r3, [r5, #0]
 8019156:	f7ea f9e4 	bl	8003522 <_fstat>
 801915a:	1c43      	adds	r3, r0, #1
 801915c:	d102      	bne.n	8019164 <_fstat_r+0x1c>
 801915e:	682b      	ldr	r3, [r5, #0]
 8019160:	b103      	cbz	r3, 8019164 <_fstat_r+0x1c>
 8019162:	6023      	str	r3, [r4, #0]
 8019164:	bd38      	pop	{r3, r4, r5, pc}
 8019166:	bf00      	nop
 8019168:	24028f18 	.word	0x24028f18

0801916c <_isatty_r>:
 801916c:	b538      	push	{r3, r4, r5, lr}
 801916e:	4d06      	ldr	r5, [pc, #24]	@ (8019188 <_isatty_r+0x1c>)
 8019170:	2300      	movs	r3, #0
 8019172:	4604      	mov	r4, r0
 8019174:	4608      	mov	r0, r1
 8019176:	602b      	str	r3, [r5, #0]
 8019178:	f7ea f9e3 	bl	8003542 <_isatty>
 801917c:	1c43      	adds	r3, r0, #1
 801917e:	d102      	bne.n	8019186 <_isatty_r+0x1a>
 8019180:	682b      	ldr	r3, [r5, #0]
 8019182:	b103      	cbz	r3, 8019186 <_isatty_r+0x1a>
 8019184:	6023      	str	r3, [r4, #0]
 8019186:	bd38      	pop	{r3, r4, r5, pc}
 8019188:	24028f18 	.word	0x24028f18

0801918c <_malloc_usable_size_r>:
 801918c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019190:	1f18      	subs	r0, r3, #4
 8019192:	2b00      	cmp	r3, #0
 8019194:	bfbc      	itt	lt
 8019196:	580b      	ldrlt	r3, [r1, r0]
 8019198:	18c0      	addlt	r0, r0, r3
 801919a:	4770      	bx	lr

0801919c <logf>:
 801919c:	ee10 3a10 	vmov	r3, s0
 80191a0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80191a4:	b410      	push	{r4}
 80191a6:	d055      	beq.n	8019254 <logf+0xb8>
 80191a8:	f5a3 0200 	sub.w	r2, r3, #8388608	@ 0x800000
 80191ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80191b0:	d31a      	bcc.n	80191e8 <logf+0x4c>
 80191b2:	005a      	lsls	r2, r3, #1
 80191b4:	d104      	bne.n	80191c0 <logf+0x24>
 80191b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80191ba:	2001      	movs	r0, #1
 80191bc:	f000 b862 	b.w	8019284 <__math_divzerof>
 80191c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80191c4:	d043      	beq.n	801924e <logf+0xb2>
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	db02      	blt.n	80191d0 <logf+0x34>
 80191ca:	f1b2 4f7f 	cmp.w	r2, #4278190080	@ 0xff000000
 80191ce:	d303      	bcc.n	80191d8 <logf+0x3c>
 80191d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80191d4:	f000 b868 	b.w	80192a8 <__math_invalidf>
 80191d8:	eddf 7a20 	vldr	s15, [pc, #128]	@ 801925c <logf+0xc0>
 80191dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80191e0:	ee10 3a10 	vmov	r3, s0
 80191e4:	f1a3 6338 	sub.w	r3, r3, #192937984	@ 0xb800000
 80191e8:	f103 4240 	add.w	r2, r3, #3221225472	@ 0xc0000000
 80191ec:	491c      	ldr	r1, [pc, #112]	@ (8019260 <logf+0xc4>)
 80191ee:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
 80191f2:	f502 024d 	add.w	r2, r2, #13434880	@ 0xcd0000
 80191f6:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 80191fa:	0dd4      	lsrs	r4, r2, #23
 80191fc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8019200:	05e4      	lsls	r4, r4, #23
 8019202:	ed90 5b00 	vldr	d5, [r0]
 8019206:	1b1b      	subs	r3, r3, r4
 8019208:	ee07 3a90 	vmov	s15, r3
 801920c:	ed90 6b02 	vldr	d6, [r0, #8]
 8019210:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8019214:	15d2      	asrs	r2, r2, #23
 8019216:	eea5 0b07 	vfma.f64	d0, d5, d7
 801921a:	ed91 5b40 	vldr	d5, [r1, #256]	@ 0x100
 801921e:	ee20 4b00 	vmul.f64	d4, d0, d0
 8019222:	ee07 2a90 	vmov	s15, r2
 8019226:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801922a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801922e:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
 8019232:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
 8019236:	eea5 7b00 	vfma.f64	d7, d5, d0
 801923a:	ed91 5b42 	vldr	d5, [r1, #264]	@ 0x108
 801923e:	ee30 0b06 	vadd.f64	d0, d0, d6
 8019242:	eea5 7b04 	vfma.f64	d7, d5, d4
 8019246:	eea4 0b07 	vfma.f64	d0, d4, d7
 801924a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801924e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019252:	4770      	bx	lr
 8019254:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8019264 <logf+0xc8>
 8019258:	e7f9      	b.n	801924e <logf+0xb2>
 801925a:	bf00      	nop
 801925c:	4b000000 	.word	0x4b000000
 8019260:	080199f8 	.word	0x080199f8
 8019264:	00000000 	.word	0x00000000

08019268 <with_errnof>:
 8019268:	b510      	push	{r4, lr}
 801926a:	ed2d 8b02 	vpush	{d8}
 801926e:	eeb0 8a40 	vmov.f32	s16, s0
 8019272:	4604      	mov	r4, r0
 8019274:	f7fe ffde 	bl	8018234 <__errno>
 8019278:	eeb0 0a48 	vmov.f32	s0, s16
 801927c:	ecbd 8b02 	vpop	{d8}
 8019280:	6004      	str	r4, [r0, #0]
 8019282:	bd10      	pop	{r4, pc}

08019284 <__math_divzerof>:
 8019284:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80192a4 <__math_divzerof+0x20>
 8019288:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801928c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8019290:	2800      	cmp	r0, #0
 8019292:	f04f 0022 	mov.w	r0, #34	@ 0x22
 8019296:	fe47 7a87 	vseleq.f32	s15, s15, s14
 801929a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801929e:	f7ff bfe3 	b.w	8019268 <with_errnof>
 80192a2:	bf00      	nop
 80192a4:	00000000 	.word	0x00000000

080192a8 <__math_invalidf>:
 80192a8:	eef0 7a40 	vmov.f32	s15, s0
 80192ac:	ee30 7a40 	vsub.f32	s14, s0, s0
 80192b0:	eef4 7a67 	vcmp.f32	s15, s15
 80192b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192b8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80192bc:	d602      	bvs.n	80192c4 <__math_invalidf+0x1c>
 80192be:	2021      	movs	r0, #33	@ 0x21
 80192c0:	f7ff bfd2 	b.w	8019268 <with_errnof>
 80192c4:	4770      	bx	lr
	...

080192c8 <_init>:
 80192c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192ca:	bf00      	nop
 80192cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80192ce:	bc08      	pop	{r3}
 80192d0:	469e      	mov	lr, r3
 80192d2:	4770      	bx	lr

080192d4 <_fini>:
 80192d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192d6:	bf00      	nop
 80192d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80192da:	bc08      	pop	{r3}
 80192dc:	469e      	mov	lr, r3
 80192de:	4770      	bx	lr
