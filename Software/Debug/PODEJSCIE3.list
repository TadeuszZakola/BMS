
PODEJSCIE3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019764  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  08019a04  08019a04  0001aa04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a378  0801a378  0001b378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a380  0801a380  0001b380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801a384  0801a384  0001b384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000220  24000000  0801a388  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00028d98  24000220  0801a5a8  0001c220  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24028fb8  0801a5a8  0001cfb8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c220  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b9b1  00000000  00000000  0001c24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006dfd  00000000  00000000  00057bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ae8  00000000  00000000  0005ea00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000212d  00000000  00000000  000614e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00041160  00000000  00000000  00063615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00038174  00000000  00000000  000a4775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019030a  00000000  00000000  000dc8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0026cbf3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c1a0  00000000  00000000  0026cc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  00278dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000220 	.word	0x24000220
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080199ec 	.word	0x080199ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000224 	.word	0x24000224
 80002dc:	080199ec 	.word	0x080199ec

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <_DoInit>:
    if (pRTTCBInit->acID[0] != 'S') {                                     \
      _DoInit();                                                          \
    }                                                                     \
  } while (0)

static void _DoInit(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
                                 // no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT +
 8000686:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <_DoInit+0xa0>)
 8000688:	603b      	str	r3, [r7, #0]
                                                           // the cache ever
                                                           // becomes dirty and
                                                           // all changes are
                                                           // visible in HW
                                                           // directly
  memset((SEGGER_RTT_CB*)p, 0,
 800068a:	22a8      	movs	r2, #168	@ 0xa8
 800068c:	2100      	movs	r1, #0
 800068e:	6838      	ldr	r0, [r7, #0]
 8000690:	f018 f953 	bl	801893a <memset>
         sizeof(_SEGGER_RTT));  // Make sure that the RTT CB is always zero
                                // initialized.
  p->MaxNumUpBuffers = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	2203      	movs	r2, #3
 8000698:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	2203      	movs	r2, #3
 800069e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName = "Terminal";
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	4a20      	ldr	r2, [pc, #128]	@ (8000724 <_DoInit+0xa4>)
 80006a4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer = _acUpBuffer;
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	4a1f      	ldr	r2, [pc, #124]	@ (8000728 <_DoInit+0xa8>)
 80006aa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer = BUFFER_SIZE_UP;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006b2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff = 0u;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff = 0u;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	2200      	movs	r2, #0
 80006be:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags = SEGGER_RTT_MODE_DEFAULT;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	2200      	movs	r2, #0
 80006c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName = "Terminal";
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	4a16      	ldr	r2, [pc, #88]	@ (8000724 <_DoInit+0xa4>)
 80006ca:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer = _acDownBuffer;
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	4a17      	ldr	r2, [pc, #92]	@ (800072c <_DoInit+0xac>)
 80006d0:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer = BUFFER_SIZE_DOWN;
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	2210      	movs	r2, #16
 80006d6:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff = 0u;
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	2200      	movs	r2, #0
 80006dc:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff = 0u;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2200      	movs	r2, #0
 80006e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags = SEGGER_RTT_MODE_DEFAULT;
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	2200      	movs	r2, #0
 80006e8:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in
  // initializer memory (usually flash), as this would cause J-Link to "find"
  // the control block at a wrong address.
  //
  RTT__DMB();  // Force order of memory accesses for cores that may perform
 80006ea:	f3bf 8f5f 	dmb	sy
               // out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	e00c      	b.n	800070e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 -
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f1c3 030f 	rsb	r3, r3, #15
 80006fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000730 <_DoInit+0xb0>)
 80006fc:	5cd1      	ldrb	r1, [r2, r3]
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	460a      	mov	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3301      	adds	r3, #1
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d9ef      	bls.n	80006f4 <_DoInit+0x74>
                           i];  // Skip terminating \0 at the end of the array
  }
  RTT__DMB();  // Force order of memory accesses for cores that may perform
 8000714:	f3bf 8f5f 	dmb	sy
               // out-of-order memory accesses
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	24000000 	.word	0x24000000
 8000724:	08019a04 	.word	0x08019a04
 8000728:	2400023c 	.word	0x2400023c
 800072c:	2400063c 	.word	0x2400063c
 8000730:	08019f90 	.word	0x08019f90

08000734 <_WriteBlocking>:
 *
 *  Return value
 *    >= 0 - Number of bytes written into buffer.
 */
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer,
                               unsigned NumBytes) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	61fb      	str	r3, [r7, #28]
  do {
    RdOff =
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	691b      	ldr	r3, [r3, #16]
 800074e:	61bb      	str	r3, [r7, #24]
        pRing->RdOff;  // May be changed by host (debug probe) in the meantime
    if (RdOff > WrOff) {
 8000750:	69ba      	ldr	r2, [r7, #24]
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	429a      	cmp	r2, r3
 8000756:	d905      	bls.n	8000764 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000758:	69ba      	ldr	r2, [r7, #24]
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	3b01      	subs	r3, #1
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
 8000762:	e007      	b.n	8000774 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	689a      	ldr	r2, [r3, #8]
 8000768:	69b9      	ldr	r1, [r7, #24]
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	1acb      	subs	r3, r1, r3
 800076e:	4413      	add	r3, r2
 8000770:	3b01      	subs	r3, #1
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite =
        MIN(NumBytesToWrite,
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	689a      	ldr	r2, [r3, #8]
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	1ad3      	subs	r3, r2, r3
    NumBytesToWrite =
 800077c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800077e:	4293      	cmp	r3, r2
 8000780:	bf28      	it	cs
 8000782:	4613      	movcs	r3, r2
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
            (pRing->SizeOfBuffer - WrOff));  // Number of bytes that can be
                                             // written until buffer wrap-around
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4293      	cmp	r3, r2
 800078c:	bf28      	it	cs
 800078e:	4613      	movcs	r3, r2
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	685a      	ldr	r2, [r3, #4]
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	4413      	add	r3, r2
 800079a:	617b      	str	r3, [r7, #20]
    WrOff += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800079c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800079e:	68b9      	ldr	r1, [r7, #8]
 80007a0:	6978      	ldr	r0, [r7, #20]
 80007a2:	f018 f99c 	bl	8018ade <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80007a6:	6a3a      	ldr	r2, [r7, #32]
 80007a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007aa:	4413      	add	r3, r2
 80007ac:	623b      	str	r3, [r7, #32]
    pBuffer += NumBytesToWrite;
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b2:	4413      	add	r3, r2
 80007b4:	60bb      	str	r3, [r7, #8]
    NumBytes -= NumBytesToWrite;
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	607b      	str	r3, [r7, #4]
    WrOff += NumBytesToWrite;
 80007be:	69fa      	ldr	r2, [r7, #28]
 80007c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c2:	4413      	add	r3, r2
 80007c4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	69fa      	ldr	r2, [r7, #28]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d101      	bne.n	80007d4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
 80007d4:	f3bf 8f5f 	dmb	sy
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = WrOff;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	69fa      	ldr	r2, [r7, #28]
 80007dc:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1b2      	bne.n	800074a <_WriteBlocking+0x16>
  return NumBytesWritten;
 80007e4:	6a3b      	ldr	r3, [r7, #32]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3728      	adds	r7, #40	@ 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <_WriteNoCheck>:
 *  Notes
 *    (1) If there might not be enough space in the "Up"-buffer, call
 * _WriteBlocking
 */
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData,
                          unsigned NumBytes) {
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b088      	sub	sp, #32
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	60f8      	str	r0, [r7, #12]
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	689a      	ldr	r2, [r3, #8]
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800080a:	69ba      	ldr	r2, [r7, #24]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	d911      	bls.n	8000836 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	4413      	add	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	68b9      	ldr	r1, [r7, #8]
 8000820:	6938      	ldr	r0, [r7, #16]
 8000822:	f018 f95c 	bl	8018ade <memcpy>
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
 8000826:	f3bf 8f5f 	dmb	sy
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = WrOff + NumBytes;
 800082a:	69fa      	ldr	r2, [r7, #28]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	441a      	add	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	60da      	str	r2, [r3, #12]
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8000834:	e01f      	b.n	8000876 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	685a      	ldr	r2, [r3, #4]
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	4413      	add	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	68b9      	ldr	r1, [r7, #8]
 8000848:	6938      	ldr	r0, [r7, #16]
 800084a:	f018 f948 	bl	8018ade <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	4413      	add	r3, r2
 8000862:	697a      	ldr	r2, [r7, #20]
 8000864:	4619      	mov	r1, r3
 8000866:	6938      	ldr	r0, [r7, #16]
 8000868:	f018 f939 	bl	8018ade <memcpy>
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
 800086c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	697a      	ldr	r2, [r7, #20]
 8000874:	60da      	str	r2, [r3, #12]
}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_GetAvailWriteSpace>:
 *    pRing        Ring buffer to check.
 *
 *  Return value
 *    Number of bytes that are free in the buffer.
 */
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800087e:	b480      	push	{r7}
 8000880:	b087      	sub	sp, #28
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	429a      	cmp	r2, r3
 8000898:	d808      	bhi.n	80008ac <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	1ad2      	subs	r2, r2, r3
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	4413      	add	r3, r2
 80008a6:	3b01      	subs	r3, #1
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	e004      	b.n	80008b6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	3b01      	subs	r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80008b6:	697b      	ldr	r3, [r7, #20]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	371c      	adds	r7, #28
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <SEGGER_RTT_WriteNoLock>:
 *        and may only be called after RTT has been initialized.
 *        Either by calling SEGGER_RTT_Init() or calling another RTT API
 * function first.
 */
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer,
                                unsigned NumBytes) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  const char* pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char*)pBuffer;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	61bb      	str	r3, [r7, #24]
  pRing =
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	1c5a      	adds	r2, r3, #1
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000960 <SEGGER_RTT_WriteNoLock+0x9c>)
 80008e2:	4413      	add	r3, r2
 80008e4:	617b      	str	r3, [r7, #20]
                                                         // of our changes go
                                                         // into HW directly
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d029      	beq.n	8000942 <SEGGER_RTT_WriteNoLock+0x7e>
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d82e      	bhi.n	8000950 <SEGGER_RTT_WriteNoLock+0x8c>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d002      	beq.n	80008fc <SEGGER_RTT_WriteNoLock+0x38>
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d013      	beq.n	8000922 <SEGGER_RTT_WriteNoLock+0x5e>
 80008fa:	e029      	b.n	8000950 <SEGGER_RTT_WriteNoLock+0x8c>
    case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
      //
      // If we are in skip mode and there is no space for the whole
      // of this output, don't bother.
      //
      Avail = _GetAvailWriteSpace(pRing);
 80008fc:	6978      	ldr	r0, [r7, #20]
 80008fe:	f7ff ffbe 	bl	800087e <_GetAvailWriteSpace>
 8000902:	6138      	str	r0, [r7, #16]
      if (Avail < NumBytes) {
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	d202      	bcs.n	8000912 <SEGGER_RTT_WriteNoLock+0x4e>
        Status = 0u;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
      } else {
        Status = NumBytes;
        _WriteNoCheck(pRing, pData, NumBytes);
      }
      break;
 8000910:	e021      	b.n	8000956 <SEGGER_RTT_WriteNoLock+0x92>
        Status = NumBytes;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	61fb      	str	r3, [r7, #28]
        _WriteNoCheck(pRing, pData, NumBytes);
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	69b9      	ldr	r1, [r7, #24]
 800091a:	6978      	ldr	r0, [r7, #20]
 800091c:	f7ff ff67 	bl	80007ee <_WriteNoCheck>
      break;
 8000920:	e019      	b.n	8000956 <SEGGER_RTT_WriteNoLock+0x92>
    case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
      //
      // If we are in trim mode, trim to what we can output without blocking.
      //
      Avail = _GetAvailWriteSpace(pRing);
 8000922:	6978      	ldr	r0, [r7, #20]
 8000924:	f7ff ffab 	bl	800087e <_GetAvailWriteSpace>
 8000928:	6138      	str	r0, [r7, #16]
      Status = Avail < NumBytes ? Avail : NumBytes;
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	4293      	cmp	r3, r2
 8000930:	bf28      	it	cs
 8000932:	4613      	movcs	r3, r2
 8000934:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, Status);
 8000936:	69fa      	ldr	r2, [r7, #28]
 8000938:	69b9      	ldr	r1, [r7, #24]
 800093a:	6978      	ldr	r0, [r7, #20]
 800093c:	f7ff ff57 	bl	80007ee <_WriteNoCheck>
      break;
 8000940:	e009      	b.n	8000956 <SEGGER_RTT_WriteNoLock+0x92>
    case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
      //
      // If we are in blocking mode, output everything.
      //
      Status = _WriteBlocking(pRing, pData, NumBytes);
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	69b9      	ldr	r1, [r7, #24]
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f7ff fef4 	bl	8000734 <_WriteBlocking>
 800094c:	61f8      	str	r0, [r7, #28]
      break;
 800094e:	e002      	b.n	8000956 <SEGGER_RTT_WriteNoLock+0x92>
    default:
      Status = 0u;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
      break;
 8000954:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8000956:	69fb      	ldr	r3, [r7, #28]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3720      	adds	r7, #32
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	24000000 	.word	0x24000000

08000964 <SEGGER_RTT_Write>:
 *
 *  Notes
 *    (1) Data is stored according to buffer flags.
 */
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer,
                          unsigned NumBytes) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8000970:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <SEGGER_RTT_Write+0x48>)
 8000972:	61fb      	str	r3, [r7, #28]
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b53      	cmp	r3, #83	@ 0x53
 800097c:	d001      	beq.n	8000982 <SEGGER_RTT_Write+0x1e>
 800097e:	f7ff fe7f 	bl	8000680 <_DoInit>
  SEGGER_RTT_LOCK();
 8000982:	f3ef 8311 	mrs	r3, BASEPRI
 8000986:	f04f 0120 	mov.w	r1, #32
 800098a:	f381 8811 	msr	BASEPRI, r1
 800098e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	68b9      	ldr	r1, [r7, #8]
 8000994:	68f8      	ldr	r0, [r7, #12]
 8000996:	f7ff ff95 	bl	80008c4 <SEGGER_RTT_WriteNoLock>
 800099a:	6178      	str	r0, [r7, #20]
      BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
  SEGGER_RTT_UNLOCK();
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80009a2:	697b      	ldr	r3, [r7, #20]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3720      	adds	r7, #32
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	24000000 	.word	0x24000000

080009b0 <_StoreChar>:
 */
/*********************************************************************
 *
 *       _StoreChar
 */
static void _StoreChar(SEGGER_RTT_PRINTF_DESC* p, char c) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d80e      	bhi.n	80009ec <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4413      	add	r3, r2
 80009d6:	78fa      	ldrb	r2, [r7, #3]
 80009d8:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d115      	bne.n	8000a24 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6918      	ldr	r0, [r3, #16]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6819      	ldr	r1, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	461a      	mov	r2, r3
 8000a06:	f7ff ffad 	bl	8000964 <SEGGER_RTT_Write>
 8000a0a:	4602      	mov	r2, r0
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d004      	beq.n	8000a1e <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1a:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8000a1c:	e002      	b.n	8000a24 <_StoreChar+0x74>
      p->Cnt = 0u;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_PrintUnsigned>:
 *
 *       _PrintUnsigned
 */
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC* pBufferDesc, unsigned v,
                           unsigned Base, unsigned NumDigits,
                           unsigned FieldWidth, unsigned FormatFlags) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	@ 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
 8000a38:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000a46:	e007      	b.n	8000a58 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8000a48:	6a3a      	ldr	r2, [r7, #32]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a50:	623b      	str	r3, [r7, #32]
    Width++;
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3301      	adds	r3, #1
 8000a56:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000a58:	6a3a      	ldr	r2, [r7, #32]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d2f3      	bcs.n	8000a48 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8000a60:	683a      	ldr	r2, [r7, #0]
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d901      	bls.n	8000a6c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8000a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d125      	bne.n	8000ac2 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d022      	beq.n	8000ac2 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) &&
 8000a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d005      	beq.n	8000a92 <_PrintUnsigned+0x66>
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <_PrintUnsigned+0x66>
          (NumDigits == 0u)) {
        c = '0';
 8000a8c:	2330      	movs	r3, #48	@ 0x30
 8000a8e:	76fb      	strb	r3, [r7, #27]
 8000a90:	e001      	b.n	8000a96 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8000a92:	2320      	movs	r3, #32
 8000a94:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a96:	e00b      	b.n	8000ab0 <_PrintUnsigned+0x84>
        FieldWidth--;
 8000a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8000a9e:	7efb      	ldrb	r3, [r7, #27]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f7ff ff84 	bl	80009b0 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db07      	blt.n	8000ac0 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d005      	beq.n	8000ac2 <_PrintUnsigned+0x96>
 8000ab6:	69fa      	ldr	r2, [r7, #28]
 8000ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d3ec      	bcc.n	8000a98 <_PrintUnsigned+0x6c>
 8000abe:	e000      	b.n	8000ac2 <_PrintUnsigned+0x96>
          break;
 8000ac0:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db55      	blt.n	8000b76 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {  // User specified a min number of digits to print?
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d903      	bls.n	8000ad8 <_PrintUnsigned+0xac>
                             // => Make sure we loop at least that often, before
                             // checking anything else (> 1 check avoids
                             // problems with NumDigits being signed / unsigned)
        NumDigits--;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	e009      	b.n	8000aec <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000ad8:	68ba      	ldr	r2, [r7, #8]
 8000ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae0:	617b      	str	r3, [r7, #20]
        if (Div < Base) {  // Is our divider big enough to extract the highest
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d200      	bcs.n	8000aec <_PrintUnsigned+0xc0>
                           // digit from value? => Done
          break;
 8000aea:	e005      	b.n	8000af8 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	fb02 f303 	mul.w	r3, r2, r3
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {  // User specified a min number of digits to print?
 8000af6:	e7e8      	b.n	8000aca <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000af8:	68ba      	ldr	r2, [r7, #8]
 8000afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b00:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b06:	fb02 f303 	mul.w	r3, r2, r3
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8000b10:	4a1b      	ldr	r2, [pc, #108]	@ (8000b80 <_PrintUnsigned+0x154>)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff ff48 	bl	80009b0 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db08      	blt.n	8000b3a <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 8000b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1df      	bne.n	8000af8 <_PrintUnsigned+0xcc>
 8000b38:	e000      	b.n	8000b3c <_PrintUnsigned+0x110>
        break;
 8000b3a:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8000b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d017      	beq.n	8000b76 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8000b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d014      	beq.n	8000b76 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b4c:	e00a      	b.n	8000b64 <_PrintUnsigned+0x138>
          FieldWidth--;
 8000b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b50:	3b01      	subs	r3, #1
 8000b52:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 8000b54:	2120      	movs	r1, #32
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f7ff ff2a 	bl	80009b0 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db07      	blt.n	8000b74 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d005      	beq.n	8000b76 <_PrintUnsigned+0x14a>
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d3ed      	bcc.n	8000b4e <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000b72:	e000      	b.n	8000b76 <_PrintUnsigned+0x14a>
            break;
 8000b74:	bf00      	nop
}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	@ 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	08019fa4 	.word	0x08019fa4

08000b84 <_PrintInt>:
 *
 *       _PrintInt
 */
static void _PrintInt(SEGGER_RTT_PRINTF_DESC* pBufferDesc, int v, unsigned Base,
                      unsigned NumDigits, unsigned FieldWidth,
                      unsigned FormatFlags) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bfb8      	it	lt
 8000b98:	425b      	neglt	r3, r3
 8000b9a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000ba0:	e007      	b.n	8000bb2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000baa:	613b      	str	r3, [r7, #16]
    Width++;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	daf3      	bge.n	8000ba2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d901      	bls.n	8000bc6 <_PrintInt+0x42>
    Width = NumDigits;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) &&
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00a      	beq.n	8000be2 <_PrintInt+0x5e>
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db04      	blt.n	8000bdc <_PrintInt+0x58>
      ((v < 0) ||
       ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd4:	f003 0304 	and.w	r3, r3, #4
      ((v < 0) ||
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <_PrintInt+0x5e>
    FieldWidth--;
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) &&
 8000be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d002      	beq.n	8000bf2 <_PrintInt+0x6e>
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d01c      	beq.n	8000c2c <_PrintInt+0xa8>
      ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf4:	f003 0301 	and.w	r3, r3, #1
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) &&
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d117      	bne.n	8000c2c <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d014      	beq.n	8000c2c <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c02:	e00a      	b.n	8000c1a <_PrintInt+0x96>
        FieldWidth--;
 8000c04:	6a3b      	ldr	r3, [r7, #32]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000c0a:	2120      	movs	r1, #32
 8000c0c:	68f8      	ldr	r0, [r7, #12]
 8000c0e:	f7ff fecf 	bl	80009b0 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db07      	blt.n	8000c2a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c1a:	6a3b      	ldr	r3, [r7, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d005      	beq.n	8000c2c <_PrintInt+0xa8>
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d3ed      	bcc.n	8000c04 <_PrintInt+0x80>
 8000c28:	e000      	b.n	8000c2c <_PrintInt+0xa8>
          break;
 8000c2a:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db4a      	blt.n	8000cca <_PrintInt+0x146>
    if (v < 0) {
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	da07      	bge.n	8000c4a <_PrintInt+0xc6>
      v = -v;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	425b      	negs	r3, r3
 8000c3e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000c40:	212d      	movs	r1, #45	@ 0x2d
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f7ff feb4 	bl	80009b0 <_StoreChar>
 8000c48:	e008      	b.n	8000c5c <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) ==
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <_PrintInt+0xd8>
               FORMAT_FLAG_PRINT_SIGN) {
      _StoreChar(pBufferDesc, '+');
 8000c54:	212b      	movs	r1, #43	@ 0x2b
 8000c56:	68f8      	ldr	r0, [r7, #12]
 8000c58:	f7ff feaa 	bl	80009b0 <_StoreChar>
    } else {
    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db32      	blt.n	8000cca <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) &&
 8000c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d01f      	beq.n	8000cae <_PrintInt+0x12a>
          ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) &&
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c70:	f003 0301 	and.w	r3, r3, #1
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) &&
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d11a      	bne.n	8000cae <_PrintInt+0x12a>
          ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) &&
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d117      	bne.n	8000cae <_PrintInt+0x12a>
          (NumDigits == 0u)) {
        if (FieldWidth != 0u) {
 8000c7e:	6a3b      	ldr	r3, [r7, #32]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d014      	beq.n	8000cae <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c84:	e00a      	b.n	8000c9c <_PrintInt+0x118>
            FieldWidth--;
 8000c86:	6a3b      	ldr	r3, [r7, #32]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000c8c:	2130      	movs	r1, #48	@ 0x30
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff fe8e 	bl	80009b0 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db07      	blt.n	8000cac <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d005      	beq.n	8000cae <_PrintInt+0x12a>
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d3ed      	bcc.n	8000c86 <_PrintInt+0x102>
 8000caa:	e000      	b.n	8000cae <_PrintInt+0x12a>
              break;
 8000cac:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db09      	blt.n	8000cca <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth,
 8000cb6:	68b9      	ldr	r1, [r7, #8]
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cba:	9301      	str	r3, [sp, #4]
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68f8      	ldr	r0, [r7, #12]
 8000cc6:	f7ff feb1 	bl	8000a2c <_PrintUnsigned>
                       FormatFlags);
      }
    }
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <SEGGER_RTT_vprintf>:
 *  Return values
 *    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
 *     < 0:  Error
 */
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char* sFormat,
                       va_list* pParamList) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0a2      	sub	sp, #136	@ 0x88
 8000cd8:	af02      	add	r7, sp, #8
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer = acBuffer;
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	653b      	str	r3, [r7, #80]	@ 0x50
  BufferDesc.BufferSize = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000ce6:	2340      	movs	r3, #64	@ 0x40
 8000ce8:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.Cnt = 0u;
 8000cea:	2300      	movs	r3, #0
 8000cec:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	663b      	str	r3, [r7, #96]	@ 0x60
  BufferDesc.ReturnValue = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c

  do {
    c = *sFormat;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    sFormat++;
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	3301      	adds	r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8000d04:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f000 81a4 	beq.w	8001056 <SEGGER_RTT_vprintf+0x382>
      break;
    }
    if (c == '%') {
 8000d0e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d12:	2b25      	cmp	r3, #37	@ 0x25
 8000d14:	f040 8192 	bne.w	800103c <SEGGER_RTT_vprintf+0x368>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	673b      	str	r3, [r7, #112]	@ 0x70
      v = 1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	67bb      	str	r3, [r7, #120]	@ 0x78
      do {
        c = *sFormat;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        switch (c) {
 8000d28:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d2c:	3b23      	subs	r3, #35	@ 0x23
 8000d2e:	2b0d      	cmp	r3, #13
 8000d30:	d83e      	bhi.n	8000db0 <SEGGER_RTT_vprintf+0xdc>
 8000d32:	a201      	add	r2, pc, #4	@ (adr r2, 8000d38 <SEGGER_RTT_vprintf+0x64>)
 8000d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d38:	08000da1 	.word	0x08000da1
 8000d3c:	08000db1 	.word	0x08000db1
 8000d40:	08000db1 	.word	0x08000db1
 8000d44:	08000db1 	.word	0x08000db1
 8000d48:	08000db1 	.word	0x08000db1
 8000d4c:	08000db1 	.word	0x08000db1
 8000d50:	08000db1 	.word	0x08000db1
 8000d54:	08000db1 	.word	0x08000db1
 8000d58:	08000d91 	.word	0x08000d91
 8000d5c:	08000db1 	.word	0x08000db1
 8000d60:	08000d71 	.word	0x08000d71
 8000d64:	08000db1 	.word	0x08000db1
 8000d68:	08000db1 	.word	0x08000db1
 8000d6c:	08000d81 	.word	0x08000d81
          case '-':
            FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY;
 8000d70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	60bb      	str	r3, [r7, #8]
            break;
 8000d7e:	e01a      	b.n	8000db6 <SEGGER_RTT_vprintf+0xe2>
          case '0':
            FormatFlags |= FORMAT_FLAG_PAD_ZERO;
 8000d80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
            break;
 8000d8e:	e012      	b.n	8000db6 <SEGGER_RTT_vprintf+0xe2>
          case '+':
            FormatFlags |= FORMAT_FLAG_PRINT_SIGN;
 8000d90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
            break;
 8000d9e:	e00a      	b.n	8000db6 <SEGGER_RTT_vprintf+0xe2>
          case '#':
            FormatFlags |= FORMAT_FLAG_ALTERNATE;
 8000da0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000da2:	f043 0308 	orr.w	r3, r3, #8
 8000da6:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	3301      	adds	r3, #1
 8000dac:	60bb      	str	r3, [r7, #8]
            break;
 8000dae:	e002      	b.n	8000db6 <SEGGER_RTT_vprintf+0xe2>
          default:
            v = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	67bb      	str	r3, [r7, #120]	@ 0x78
            break;
 8000db4:	bf00      	nop
        }
      } while (v);
 8000db6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1b1      	bne.n	8000d20 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
      do {
        c = *sFormat;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c < '0') || (c > '9')) {
 8000dc8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000dcc:	2b2f      	cmp	r3, #47	@ 0x2f
 8000dce:	d912      	bls.n	8000df6 <SEGGER_RTT_vprintf+0x122>
 8000dd0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000dd4:	2b39      	cmp	r3, #57	@ 0x39
 8000dd6:	d80e      	bhi.n	8000df6 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000dde:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	461a      	mov	r2, r3
 8000dea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000dee:	4413      	add	r3, r2
 8000df0:	3b30      	subs	r3, #48	@ 0x30
 8000df2:	66fb      	str	r3, [r7, #108]	@ 0x6c
        c = *sFormat;
 8000df4:	e7e4      	b.n	8000dc0 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8000df6:	2300      	movs	r3, #0
 8000df8:	677b      	str	r3, [r7, #116]	@ 0x74
      c = *sFormat;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (c == '.') {
 8000e02:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e06:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e08:	d11d      	bne.n	8000e46 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          if ((c < '0') || (c > '9')) {
 8000e18:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e1e:	d912      	bls.n	8000e46 <SEGGER_RTT_vprintf+0x172>
 8000e20:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e24:	2b39      	cmp	r3, #57	@ 0x39
 8000e26:	d80e      	bhi.n	8000e46 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8000e2e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	461a      	mov	r2, r3
 8000e3a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e3e:	4413      	add	r3, r2
 8000e40:	3b30      	subs	r3, #48	@ 0x30
 8000e42:	677b      	str	r3, [r7, #116]	@ 0x74
          c = *sFormat;
 8000e44:	e7e4      	b.n	8000e10 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8000e4e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e52:	2b6c      	cmp	r3, #108	@ 0x6c
 8000e54:	d003      	beq.n	8000e5e <SEGGER_RTT_vprintf+0x18a>
 8000e56:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e5a:	2b68      	cmp	r3, #104	@ 0x68
 8000e5c:	d107      	bne.n	8000e6e <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	3301      	adds	r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c == 'l') || (c == 'h')) {
 8000e6c:	e7ef      	b.n	8000e4e <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000e6e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000e72:	2b25      	cmp	r3, #37	@ 0x25
 8000e74:	f000 80d6 	beq.w	8001024 <SEGGER_RTT_vprintf+0x350>
 8000e78:	2b25      	cmp	r3, #37	@ 0x25
 8000e7a:	f2c0 80da 	blt.w	8001032 <SEGGER_RTT_vprintf+0x35e>
 8000e7e:	2b78      	cmp	r3, #120	@ 0x78
 8000e80:	f300 80d7 	bgt.w	8001032 <SEGGER_RTT_vprintf+0x35e>
 8000e84:	2b58      	cmp	r3, #88	@ 0x58
 8000e86:	f2c0 80d4 	blt.w	8001032 <SEGGER_RTT_vprintf+0x35e>
 8000e8a:	3b58      	subs	r3, #88	@ 0x58
 8000e8c:	2b20      	cmp	r3, #32
 8000e8e:	f200 80d0 	bhi.w	8001032 <SEGGER_RTT_vprintf+0x35e>
 8000e92:	a201      	add	r2, pc, #4	@ (adr r2, 8000e98 <SEGGER_RTT_vprintf+0x1c4>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000f8f 	.word	0x08000f8f
 8000e9c:	08001033 	.word	0x08001033
 8000ea0:	08001033 	.word	0x08001033
 8000ea4:	08001033 	.word	0x08001033
 8000ea8:	08001033 	.word	0x08001033
 8000eac:	08001033 	.word	0x08001033
 8000eb0:	08001033 	.word	0x08001033
 8000eb4:	08001033 	.word	0x08001033
 8000eb8:	08001033 	.word	0x08001033
 8000ebc:	08001033 	.word	0x08001033
 8000ec0:	08001033 	.word	0x08001033
 8000ec4:	08000f1d 	.word	0x08000f1d
 8000ec8:	08000f43 	.word	0x08000f43
 8000ecc:	08001033 	.word	0x08001033
 8000ed0:	08001033 	.word	0x08001033
 8000ed4:	08001033 	.word	0x08001033
 8000ed8:	08001033 	.word	0x08001033
 8000edc:	08001033 	.word	0x08001033
 8000ee0:	08001033 	.word	0x08001033
 8000ee4:	08001033 	.word	0x08001033
 8000ee8:	08001033 	.word	0x08001033
 8000eec:	08001033 	.word	0x08001033
 8000ef0:	08001033 	.word	0x08001033
 8000ef4:	08001033 	.word	0x08001033
 8000ef8:	08000fff 	.word	0x08000fff
 8000efc:	08001033 	.word	0x08001033
 8000f00:	08001033 	.word	0x08001033
 8000f04:	08000fb5 	.word	0x08000fb5
 8000f08:	08001033 	.word	0x08001033
 8000f0c:	08000f69 	.word	0x08000f69
 8000f10:	08001033 	.word	0x08001033
 8000f14:	08001033 	.word	0x08001033
 8000f18:	08000f8f 	.word	0x08000f8f
        case 'c': {
          char c0;
          v = va_arg(*pParamList, int);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	1d19      	adds	r1, r3, #4
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	6011      	str	r1, [r2, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	67bb      	str	r3, [r7, #120]	@ 0x78
          c0 = (char)v;
 8000f2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          _StoreChar(&BufferDesc, c0);
 8000f30:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000f34:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fd38 	bl	80009b0 <_StoreChar>
          break;
 8000f40:	e078      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        }
        case 'd':
          v = va_arg(*pParamList, int);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	1d19      	adds	r1, r3, #4
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	6011      	str	r1, [r2, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000f50:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000f54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f5e:	220a      	movs	r2, #10
 8000f60:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000f62:	f7ff fe0f 	bl	8000b84 <_PrintInt>
          break;
 8000f66:	e065      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        case 'u':
          v = va_arg(*pParamList, int);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	1d19      	adds	r1, r3, #4
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	6011      	str	r1, [r2, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth,
 8000f76:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000f78:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000f7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f86:	220a      	movs	r2, #10
 8000f88:	f7ff fd50 	bl	8000a2c <_PrintUnsigned>
                         FormatFlags);
          break;
 8000f8c:	e052      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        case 'x':
        case 'X':
          v = va_arg(*pParamList, int);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1d19      	adds	r1, r3, #4
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	6011      	str	r1, [r2, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth,
 8000f9c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000f9e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000fa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fac:	2210      	movs	r2, #16
 8000fae:	f7ff fd3d 	bl	8000a2c <_PrintUnsigned>
                         FormatFlags);
          break;
 8000fb2:	e03f      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        case 's': {
          const char* s = va_arg(*pParamList, const char*);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	1d19      	adds	r1, r3, #4
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6011      	str	r1, [r2, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
          if (s == NULL) {
 8000fc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d101      	bne.n	8000fcc <SEGGER_RTT_vprintf+0x2f8>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as
 8000fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001084 <SEGGER_RTT_vprintf+0x3b0>)
 8000fca:	66bb      	str	r3, [r7, #104]	@ 0x68
                           // it is more informative to the user.
          }
          do {
            c = *s;
 8000fcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            s++;
 8000fd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (c == '\0') {
 8000fda:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00b      	beq.n	8000ffa <SEGGER_RTT_vprintf+0x326>
              break;
            }
            _StoreChar(&BufferDesc, c);
 8000fe2:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8000fe6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fcdf 	bl	80009b0 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8000ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	dae9      	bge.n	8000fcc <SEGGER_RTT_vprintf+0x2f8>
        } break;
 8000ff8:	e01c      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
              break;
 8000ffa:	bf00      	nop
        } break;
 8000ffc:	e01a      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        case 'p':
          v = va_arg(*pParamList, int);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	1d19      	adds	r1, r3, #4
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6011      	str	r1, [r2, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800100c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800100e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001012:	2300      	movs	r3, #0
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	2308      	movs	r3, #8
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2308      	movs	r3, #8
 800101c:	2210      	movs	r2, #16
 800101e:	f7ff fd05 	bl	8000a2c <_PrintUnsigned>
          break;
 8001022:	e007      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        case '%':
          _StoreChar(&BufferDesc, '%');
 8001024:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001028:	2125      	movs	r1, #37	@ 0x25
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fcc0 	bl	80009b0 <_StoreChar>
          break;
 8001030:	e000      	b.n	8001034 <SEGGER_RTT_vprintf+0x360>
        default:
          break;
 8001032:	bf00      	nop
      }
      sFormat++;
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	3301      	adds	r3, #1
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	e007      	b.n	800104c <SEGGER_RTT_vprintf+0x378>
    } else {
      _StoreChar(&BufferDesc, c);
 800103c:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8001040:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fcb2 	bl	80009b0 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 800104c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800104e:	2b00      	cmp	r3, #0
 8001050:	f6bf ae51 	bge.w	8000cf6 <SEGGER_RTT_vprintf+0x22>
 8001054:	e000      	b.n	8001058 <SEGGER_RTT_vprintf+0x384>
      break;
 8001056:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8001058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800105a:	2b00      	cmp	r3, #0
 800105c:	dd0d      	ble.n	800107a <SEGGER_RTT_vprintf+0x3a6>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 800105e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <SEGGER_RTT_vprintf+0x39e>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8001064:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4619      	mov	r1, r3
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff fc79 	bl	8000964 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8001072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001074:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001076:	4413      	add	r3, r2
 8001078:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }
  return BufferDesc.ReturnValue;
 800107a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800107c:	4618      	mov	r0, r3
 800107e:	3780      	adds	r7, #128	@ 0x80
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	08019a10 	.word	0x08019a10

08001088 <SEGGER_RTT_printf>:
 *          x: Print the argument as an hexadecimal integer
 *          s: Print the string pointed to by the argument
 *          p: Print the argument as an 8-digit hexadecimal integer. (Argument
 * shall be a pointer to void.)
 */
int SEGGER_RTT_printf(unsigned BufferIndex, const char* sFormat, ...) {
 8001088:	b40e      	push	{r1, r2, r3}
 800108a:	b580      	push	{r7, lr}
 800108c:	b085      	sub	sp, #20
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	461a      	mov	r2, r3
 800109e:	69f9      	ldr	r1, [r7, #28]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fe17 	bl	8000cd4 <SEGGER_RTT_vprintf>
 80010a6:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 80010a8:	68fb      	ldr	r3, [r7, #12]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010b4:	b003      	add	sp, #12
 80010b6:	4770      	bx	lr

080010b8 <bq79600_construct_command>:
#include <main.h>
#define MAX_INSTANCE 1
static bq79600_t instance_list[MAX_INSTANCE] = {0};

void bq79600_construct_command(bq79600_t *instance, REQ_TYPE req_type, uint8_t addr, uint16_t reg_addr,
                               uint8_t data_len, uint8_t *data) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	4608      	mov	r0, r1
 80010c2:	4611      	mov	r1, r2
 80010c4:	461a      	mov	r2, r3
 80010c6:	4603      	mov	r3, r0
 80010c8:	70fb      	strb	r3, [r7, #3]
 80010ca:	460b      	mov	r3, r1
 80010cc:	70bb      	strb	r3, [r7, #2]
 80010ce:	4613      	mov	r3, r2
 80010d0:	803b      	strh	r3, [r7, #0]
  uint8_t *tx_buf = instance->tx_buf;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	330c      	adds	r3, #12
 80010d6:	617b      	str	r3, [r7, #20]
  *tx_buf++ = 0x80 | (req_type << 4) | ((req_type & 1) ? ((data_len - 1) & 0x0F) : 0);
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010e2:	b25a      	sxtb	r2, r3
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d008      	beq.n	8001100 <bq79600_construct_command+0x48>
 80010ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	f003 030f 	and.w	r3, r3, #15
 80010fc:	b25b      	sxtb	r3, r3
 80010fe:	e000      	b.n	8001102 <bq79600_construct_command+0x4a>
 8001100:	2300      	movs	r3, #0
 8001102:	4313      	orrs	r3, r2
 8001104:	b259      	sxtb	r1, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	617a      	str	r2, [r7, #20]
 800110c:	b2ca      	uxtb	r2, r1
 800110e:	701a      	strb	r2, [r3, #0]
  if (req_type < 2) *tx_buf++ = addr & 0x3F;
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d807      	bhi.n	8001126 <bq79600_construct_command+0x6e>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	617a      	str	r2, [r7, #20]
 800111c:	78ba      	ldrb	r2, [r7, #2]
 800111e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	701a      	strb	r2, [r3, #0]
  *tx_buf++ = (reg_addr >> 8) & 0xFF;
 8001126:	883b      	ldrh	r3, [r7, #0]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b299      	uxth	r1, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	617a      	str	r2, [r7, #20]
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
  *tx_buf++ = reg_addr & 0xFF;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	617a      	str	r2, [r7, #20]
 800113c:	883a      	ldrh	r2, [r7, #0]
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]
  if (data)
 8001142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001144:	2b00      	cmp	r3, #0
 8001146:	d013      	beq.n	8001170 <bq79600_construct_command+0xb8>
    for (int i = 0; i < data_len; i++) *tx_buf++ = data[i];
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	e00a      	b.n	8001164 <bq79600_construct_command+0xac>
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001152:	441a      	add	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	1c59      	adds	r1, r3, #1
 8001158:	6179      	str	r1, [r7, #20]
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	3301      	adds	r3, #1
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	429a      	cmp	r2, r3
 800116c:	dbef      	blt.n	800114e <bq79600_construct_command+0x96>
 800116e:	e007      	b.n	8001180 <bq79600_construct_command+0xc8>
  else
    *tx_buf++ = data_len - 1;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	617a      	str	r2, [r7, #20]
 8001176:	f897 2020 	ldrb.w	r2, [r7, #32]
 800117a:	3a01      	subs	r2, #1
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	701a      	strb	r2, [r3, #0]
  if (req_type >= 2) data_len = 0;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d902      	bls.n	800118c <bq79600_construct_command+0xd4>
 8001186:	2300      	movs	r3, #0
 8001188:	f887 3020 	strb.w	r3, [r7, #32]
  uint16_t crc = bq79600_bsp_crc(instance->tx_buf, 4 + data_len);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f103 020c 	add.w	r2, r3, #12
 8001192:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001196:	3304      	adds	r3, #4
 8001198:	4619      	mov	r1, r3
 800119a:	4610      	mov	r0, r2
 800119c:	f000 fa80 	bl	80016a0 <bq79600_bsp_crc>
 80011a0:	4603      	mov	r3, r0
 80011a2:	81fb      	strh	r3, [r7, #14]
  *tx_buf++ = crc & 0xFF;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	617a      	str	r2, [r7, #20]
 80011aa:	89fa      	ldrh	r2, [r7, #14]
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	701a      	strb	r2, [r3, #0]
  *tx_buf++ = (crc >> 8) & 0xFF;
 80011b0:	89fb      	ldrh	r3, [r7, #14]
 80011b2:	0a1b      	lsrs	r3, r3, #8
 80011b4:	b299      	uxth	r1, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	617a      	str	r2, [r7, #20]
 80011bc:	b2ca      	uxtb	r2, r1
 80011be:	701a      	strb	r2, [r3, #0]
  instance->tx_len = tx_buf - instance->tx_buf;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	330c      	adds	r3, #12
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f883 281a 	strb.w	r2, [r3, #2074]	@ 0x81a
}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <bq79600_tx>:

void bq79600_tx(bq79600_t *instance) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  instance->ready = 0;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 281d 	strb.w	r2, [r3, #2077]	@ 0x81d
  SEGGER_RTT_printf(0, "[BQ79600] TX: ");
 80011e8:	4915      	ldr	r1, [pc, #84]	@ (8001240 <bq79600_tx+0x68>)
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff ff4c 	bl	8001088 <SEGGER_RTT_printf>
  for (int i = 0; i < instance->tx_len; i++) SEGGER_RTT_printf(0, "%02X ", instance->tx_buf[i]);
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e00c      	b.n	8001210 <bq79600_tx+0x38>
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	330c      	adds	r3, #12
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4910      	ldr	r1, [pc, #64]	@ (8001244 <bq79600_tx+0x6c>)
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff ff3f 	bl	8001088 <SEGGER_RTT_printf>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3301      	adds	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4293      	cmp	r3, r2
 800121c:	dbeb      	blt.n	80011f6 <bq79600_tx+0x1e>
  SEGGER_RTT_printf(0, "\n");
 800121e:	490a      	ldr	r1, [pc, #40]	@ (8001248 <bq79600_tx+0x70>)
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff ff31 	bl	8001088 <SEGGER_RTT_printf>
  switch (instance->mode) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7a9b      	ldrb	r3, [r3, #10]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d103      	bne.n	8001236 <bq79600_tx+0x5e>
    case BQ_UART:
      bq79600_bsp_uart_tx(instance);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 fa1e 	bl	8001670 <bq79600_bsp_uart_tx>
      break;
 8001234:	e000      	b.n	8001238 <bq79600_tx+0x60>
    default:
      break;
 8001236:	bf00      	nop
  }
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	08019a18 	.word	0x08019a18
 8001244:	08019a28 	.word	0x08019a28
 8001248:	08019a30 	.word	0x08019a30

0800124c <bq79600_rx_callback>:

void bq79600_rx_callback(bq79600_t *instance) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b0aa      	sub	sp, #168	@ 0xa8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if (instance->rx_len < 6) return;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 800125a:	2b05      	cmp	r3, #5
 800125c:	f240 80d8 	bls.w	8001410 <bq79600_rx_callback+0x1c4>
  SEGGER_RTT_printf(0, "[BQ79600] RX[%d]: ", instance->rx_len);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 8001266:	461a      	mov	r2, r3
 8001268:	496b      	ldr	r1, [pc, #428]	@ (8001418 <bq79600_rx_callback+0x1cc>)
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff ff0c 	bl	8001088 <SEGGER_RTT_printf>
  for (int i = 0; i < instance->rx_len; i++) SEGGER_RTT_printf(0, "%02X ", instance->rx_buf[i]);
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001276:	e00f      	b.n	8001298 <bq79600_rx_callback+0x4c>
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800127e:	4413      	add	r3, r2
 8001280:	331a      	adds	r3, #26
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4965      	ldr	r1, [pc, #404]	@ (800141c <bq79600_rx_callback+0x1d0>)
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fefd 	bl	8001088 <SEGGER_RTT_printf>
 800128e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001292:	3301      	adds	r3, #1
 8001294:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 800129e:	461a      	mov	r2, r3
 80012a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012a4:	4293      	cmp	r3, r2
 80012a6:	dbe7      	blt.n	8001278 <bq79600_rx_callback+0x2c>
  SEGGER_RTT_printf(0, "\n");
 80012a8:	495d      	ldr	r1, [pc, #372]	@ (8001420 <bq79600_rx_callback+0x1d4>)
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff feec 	bl	8001088 <SEGGER_RTT_printf>

  size_t idx = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  uint8_t crc_buf[128 + 6];
  while (idx < instance->rx_len) {
 80012b6:	e099      	b.n	80013ec <bq79600_rx_callback+0x1a0>
    for (int i = 0; i < 4; i++) crc_buf[i] = instance->rx_buf[idx++];
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80012be:	e013      	b.n	80012e8 <bq79600_rx_callback+0x9c>
 80012c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	7e99      	ldrb	r1, [r3, #26]
 80012d0:	f107 020c 	add.w	r2, r7, #12
 80012d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80012d8:	4413      	add	r3, r2
 80012da:	460a      	mov	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80012e2:	3301      	adds	r3, #1
 80012e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80012e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	dde7      	ble.n	80012c0 <bq79600_rx_callback+0x74>
    uint8_t len = (crc_buf[0] & 0x7F) + 1;
 80012f0:	7b3b      	ldrb	r3, [r7, #12]
 80012f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	3301      	adds	r3, #1
 80012fa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    for (int i = 0; i < len; i++) crc_buf[4 + i] = instance->rx_buf[idx++];
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001304:	e015      	b.n	8001332 <bq79600_rx_callback+0xe6>
 8001306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001310:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001314:	3204      	adds	r2, #4
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	440b      	add	r3, r1
 800131a:	7e99      	ldrb	r1, [r3, #26]
 800131c:	f102 03a8 	add.w	r3, r2, #168	@ 0xa8
 8001320:	443b      	add	r3, r7
 8001322:	460a      	mov	r2, r1
 8001324:	f803 2c9c 	strb.w	r2, [r3, #-156]
 8001328:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800132c:	3301      	adds	r3, #1
 800132e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001332:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001336:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800133a:	429a      	cmp	r2, r3
 800133c:	dbe3      	blt.n	8001306 <bq79600_rx_callback+0xba>
    crc_buf[4 + len] = instance->rx_buf[idx++];
 800133e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001348:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800134c:	3204      	adds	r2, #4
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	440b      	add	r3, r1
 8001352:	7e99      	ldrb	r1, [r3, #26]
 8001354:	f102 03a8 	add.w	r3, r2, #168	@ 0xa8
 8001358:	443b      	add	r3, r7
 800135a:	460a      	mov	r2, r1
 800135c:	f803 2c9c 	strb.w	r2, [r3, #-156]
    crc_buf[5 + len] = instance->rx_buf[idx++];
 8001360:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800136a:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800136e:	3205      	adds	r2, #5
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	440b      	add	r3, r1
 8001374:	7e99      	ldrb	r1, [r3, #26]
 8001376:	f102 03a8 	add.w	r3, r2, #168	@ 0xa8
 800137a:	443b      	add	r3, r7
 800137c:	460a      	mov	r2, r1
 800137e:	f803 2c9c 	strb.w	r2, [r3, #-156]
    uint16_t crc = bq79600_bsp_crc(crc_buf, len + 4);
 8001382:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001386:	3304      	adds	r3, #4
 8001388:	461a      	mov	r2, r3
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f985 	bl	80016a0 <bq79600_bsp_crc>
 8001396:	4603      	mov	r3, r0
 8001398:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    uint16_t crc_rx = (crc_buf[4 + len] << 8) | crc_buf[5 + len];
 800139c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80013a0:	3304      	adds	r3, #4
 80013a2:	33a8      	adds	r3, #168	@ 0xa8
 80013a4:	443b      	add	r3, r7
 80013a6:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80013b2:	3305      	adds	r3, #5
 80013b4:	33a8      	adds	r3, #168	@ 0xa8
 80013b6:	443b      	add	r3, r7
 80013b8:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    if (!(crc ^ crc_rx)) {
 80013c6:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 80013ca:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d10c      	bne.n	80013ec <bq79600_rx_callback+0x1a0>
      SEGGER_RTT_printf(0, "[BQ79600] CRC error: %04X %04X\n", crc, crc_rx);
 80013d2:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 80013d6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80013da:	4912      	ldr	r1, [pc, #72]	@ (8001424 <bq79600_rx_callback+0x1d8>)
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff fe53 	bl	8001088 <SEGGER_RTT_printf>
      instance->fault = 1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
      return;
 80013ea:	e012      	b.n	8001412 <bq79600_rx_callback+0x1c6>
  while (idx < instance->rx_len) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 80013f2:	461a      	mov	r2, r3
 80013f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80013f8:	4293      	cmp	r3, r2
 80013fa:	f4ff af5d 	bcc.w	80012b8 <bq79600_rx_callback+0x6c>
    }
  }
  instance->fault = 0;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
  instance->ready = 1;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 281d 	strb.w	r2, [r3, #2077]	@ 0x81d
 800140e:	e000      	b.n	8001412 <bq79600_rx_callback+0x1c6>
  if (instance->rx_len < 6) return;
 8001410:	bf00      	nop
}
 8001412:	37a8      	adds	r7, #168	@ 0xa8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	08019a34 	.word	0x08019a34
 800141c:	08019a28 	.word	0x08019a28
 8001420:	08019a30 	.word	0x08019a30
 8001424:	08019a48 	.word	0x08019a48

08001428 <bq79600_write_reg>:
  bq79600_bsp_ready(instance);
  *data = instance->rx_buf[4];
}
extern UART_HandleTypeDef huart4;
void bq79600_write_reg(bq79600_t *instance, uint8_t dev_addr, uint16_t reg_addr, uint8_t *data,
                       uint8_t data_len) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af02      	add	r7, sp, #8
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	72fb      	strb	r3, [r7, #11]
 8001436:	4613      	mov	r3, r2
 8001438:	813b      	strh	r3, [r7, #8]
  bq79600_construct_command(instance, SINGLE_DEVICE_WRITE, dev_addr, reg_addr, data_len, data);
 800143a:	8939      	ldrh	r1, [r7, #8]
 800143c:	7afa      	ldrb	r2, [r7, #11]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	7e3b      	ldrb	r3, [r7, #24]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	460b      	mov	r3, r1
 8001448:	2101      	movs	r1, #1
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7ff fe34 	bl	80010b8 <bq79600_construct_command>
  //bq79600_tx(instance);
  HAL_UART_Transmit(&huart4, instance->tx_buf , instance->tx_len,100);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f103 010c 	add.w	r1, r3, #12
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 800145c:	461a      	mov	r2, r3
 800145e:	2364      	movs	r3, #100	@ 0x64
 8001460:	4803      	ldr	r0, [pc, #12]	@ (8001470 <bq79600_write_reg+0x48>)
 8001462:	f00d f9b0 	bl	800e7c6 <HAL_UART_Transmit>
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	24001008 	.word	0x24001008

08001474 <open_bq79600_instance>:

bq79600_t *open_bq79600_instance(uint32_t id) {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if (id >= MAX_INSTANCE) return NULL;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <open_bq79600_instance+0x12>
 8001482:	2300      	movs	r3, #0
 8001484:	e006      	b.n	8001494 <open_bq79600_instance+0x20>
  return &instance_list[id];
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	019b      	lsls	r3, r3, #6
 800148c:	4413      	add	r3, r2
 800148e:	015b      	lsls	r3, r3, #5
 8001490:	4a03      	ldr	r2, [pc, #12]	@ (80014a0 <open_bq79600_instance+0x2c>)
 8001492:	4413      	add	r3, r2
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	2400064c 	.word	0x2400064c

080014a4 <bq79600_auto_addressing>:
  }
  instance->state = BQ_ACTIVATE;
  SEGGER_RTT_printf(0, "[BQ79600] wakeup.\n");
}

bq79600_error_t bq79600_auto_addressing(bq79600_t *instance, const size_t n_devices) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint8_t buf = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]
  for (int addr = 0x343; addr < 0x34B; addr++) {
 80014b2:	f240 3343 	movw	r3, #835	@ 0x343
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	e012      	b.n	80014e0 <bq79600_auto_addressing+0x3c>
    bq79600_construct_command(instance, STACK_WRITE, 0, addr, 1, &buf);
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	f107 030f 	add.w	r3, r7, #15
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	2301      	movs	r3, #1
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	4613      	mov	r3, r2
 80014ca:	2200      	movs	r2, #0
 80014cc:	2103      	movs	r1, #3
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fdf2 	bl	80010b8 <bq79600_construct_command>
    bq79600_tx(instance);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fe7f 	bl	80011d8 <bq79600_tx>
  for (int addr = 0x343; addr < 0x34B; addr++) {
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f240 324a 	movw	r2, #842	@ 0x34a
 80014e6:	4293      	cmp	r3, r2
 80014e8:	dde7      	ble.n	80014ba <bq79600_auto_addressing+0x16>
  }
  instance->fault = 0 ;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
  // Enable auto addressing
  buf = 0x01;
 80014f2:	2301      	movs	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
  bq79600_construct_command(instance, BROADCAST_WRITE, 0, CONTROL1, 1, &buf);
 80014f6:	f107 030f 	add.w	r3, r7, #15
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	2301      	movs	r3, #1
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	f240 3309 	movw	r3, #777	@ 0x309
 8001504:	2200      	movs	r2, #0
 8001506:	2105      	movs	r1, #5
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fdd5 	bl	80010b8 <bq79600_construct_command>
  bq79600_tx(instance);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fe62 	bl	80011d8 <bq79600_tx>
  // brdcast write consecutively to 0x306
  for (size_t i = 0; i < n_devices; i++) {
 8001514:	2300      	movs	r3, #0
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	e014      	b.n	8001544 <bq79600_auto_addressing+0xa0>
    buf = i;
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	73fb      	strb	r3, [r7, #15]
    bq79600_construct_command(instance, BROADCAST_WRITE, 0, DIR0_ADDR, 1, &buf);
 8001520:	f107 030f 	add.w	r3, r7, #15
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	2301      	movs	r3, #1
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	f240 3306 	movw	r3, #774	@ 0x306
 800152e:	2200      	movs	r2, #0
 8001530:	2105      	movs	r1, #5
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff fdc0 	bl	80010b8 <bq79600_construct_command>
    bq79600_tx(instance);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff fe4d 	bl	80011d8 <bq79600_tx>
  for (size_t i = 0; i < n_devices; i++) {
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	3301      	adds	r3, #1
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d3e6      	bcc.n	800151a <bq79600_auto_addressing+0x76>
  }
  // brdcast write 0x02 to address 0x308 (set BQ7961X-Q1 as stack device )
  buf = 0x02;
 800154c:	2302      	movs	r3, #2
 800154e:	73fb      	strb	r3, [r7, #15]
  bq79600_construct_command(instance, BROADCAST_WRITE, 0, COMM_CTRL, 1, &buf);
 8001550:	f107 030f 	add.w	r3, r7, #15
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	2301      	movs	r3, #1
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	f44f 7342 	mov.w	r3, #776	@ 0x308
 800155e:	2200      	movs	r2, #0
 8001560:	2105      	movs	r1, #5
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fda8 	bl	80010b8 <bq79600_construct_command>
  bq79600_tx(instance);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fe35 	bl	80011d8 <bq79600_tx>

  buf = 0x03;
 800156e:	2303      	movs	r3, #3
 8001570:	73fb      	strb	r3, [r7, #15]
  bq79600_construct_command(instance, SINGLE_DEVICE_WRITE, n_devices - 1, COMM_CTRL, 1, &buf);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	3b01      	subs	r3, #1
 8001578:	b2da      	uxtb	r2, r3
 800157a:	f107 030f 	add.w	r3, r7, #15
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	2301      	movs	r3, #1
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8001588:	2101      	movs	r1, #1
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff fd94 	bl	80010b8 <bq79600_construct_command>
  bq79600_tx(instance);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fe21 	bl	80011d8 <bq79600_tx>

  for (int addr = 0x343; addr < 0x34B; addr++) {
 8001596:	f240 3343 	movw	r3, #835	@ 0x343
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e01a      	b.n	80015d4 <bq79600_auto_addressing+0x130>
    bq79600_construct_command(instance, STACK_READ, 0, addr, 1, NULL);
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2200      	movs	r2, #0
 80015a4:	9201      	str	r2, [sp, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	9200      	str	r2, [sp, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	2102      	movs	r1, #2
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fd82 	bl	80010b8 <bq79600_construct_command>
    bq79600_tx(instance);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fe0f 	bl	80011d8 <bq79600_tx>
    bq79600_bsp_ready(instance);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f837 	bl	800162e <bq79600_bsp_ready>
   // uint8_t comm_ctrl[6] = {0};
    //if (HAL_UART_Receive(&huart4, instance->rx_buf , instance->rx_len ,100) != HAL_OK)  return BQ_ERROR  ;
   // HAL_UART_Receive(&huart4, comm_ctrl , 6 ,100);
   if (instance->fault)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <bq79600_auto_addressing+0x12a>
	   return BQ_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e02b      	b.n	8001626 <bq79600_auto_addressing+0x182>
  for (int addr = 0x343; addr < 0x34B; addr++) {
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3301      	adds	r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f240 324a 	movw	r2, #842	@ 0x34a
 80015da:	4293      	cmp	r3, r2
 80015dc:	dddf      	ble.n	800159e <bq79600_auto_addressing+0xfa>



  }

  for (size_t i = 0; i < n_devices; i++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	e01b      	b.n	800161c <bq79600_auto_addressing+0x178>
    bq79600_construct_command(instance, SINGLE_DEVICE_READ, i, DIR0_ADDR, 1, NULL);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	2300      	movs	r3, #0
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	2301      	movs	r3, #1
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	f240 3306 	movw	r3, #774	@ 0x306
 80015f4:	2100      	movs	r1, #0
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fd5e 	bl	80010b8 <bq79600_construct_command>
    bq79600_tx(instance);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fdeb 	bl	80011d8 <bq79600_tx>
   // if (HAL_UART_Receive(&huart4, instance->rx_buf , instance->rx_len ,100) != HAL_OK)  return BQ_ERROR  ;
     bq79600_bsp_ready(instance);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f813 	bl	800162e <bq79600_bsp_ready>
    if (instance->fault)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <bq79600_auto_addressing+0x172>
    	return BQ_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e007      	b.n	8001626 <bq79600_auto_addressing+0x182>
  for (size_t i = 0; i < n_devices; i++) {
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	3301      	adds	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d3df      	bcc.n	80015e4 <bq79600_auto_addressing+0x140>
  }
  return BQ_SUCCESS;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <bq79600_bsp_ready>:
  HAL_GPIO_Init((GPIO_TypeDef *)instance->rx_port, &GPIO_InitStruct);
  HAL_UART_DeInit(&huart4);
  MX_UART4_Init(1000000);
}

void bq79600_bsp_ready(bq79600_t *instance) {
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  /* Change here to non-blocking mode if using RTOS */
  const uint32_t timeout = 1000;  // 1 second timeout
 8001636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163a:	60fb      	str	r3, [r7, #12]
  uint32_t now = HAL_GetTick();
 800163c:	f002 fcfc 	bl	8004038 <HAL_GetTick>
 8001640:	60b8      	str	r0, [r7, #8]
  while (instance->ready == 0) {
 8001642:	e00c      	b.n	800165e <bq79600_bsp_ready+0x30>
    if (now - HAL_GetTick() > timeout) {
 8001644:	f002 fcf8 	bl	8004038 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d204      	bcs.n	800165e <bq79600_bsp_ready+0x30>
      instance->fault = 1;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
      return;
 800165c:	e004      	b.n	8001668 <bq79600_bsp_ready+0x3a>
  while (instance->ready == 0) {
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 381d 	ldrb.w	r3, [r3, #2077]	@ 0x81d
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0ed      	beq.n	8001644 <bq79600_bsp_ready+0x16>
    }
  }
}
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <bq79600_bsp_uart_tx>:

extern UART_HandleTypeDef huart4;
void bq79600_bsp_uart_tx(bq79600_t *instance) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4, instance->tx_buf, instance->tx_len , 100);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f103 010c 	add.w	r1, r3, #12
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 8001684:	461a      	mov	r2, r3
 8001686:	2364      	movs	r3, #100	@ 0x64
 8001688:	4804      	ldr	r0, [pc, #16]	@ (800169c <bq79600_bsp_uart_tx+0x2c>)
 800168a:	f00d f89c 	bl	800e7c6 <HAL_UART_Transmit>
  HAL_Delay(1);
 800168e:	2001      	movs	r0, #1
 8001690:	f002 fcde 	bl	8004050 <HAL_Delay>
  //uint8_t UART1_rxBuffer[12] = {0};//
  //HAL_UART_Transmit_DMA(&huart4, UART1_rxBuffer, 12);//
 // huart4.gState = HAL_UART_STATE_READY;
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	24001008 	.word	0x24001008

080016a0 <bq79600_bsp_crc>:

uint32_t bq79600_bsp_crc(uint8_t *buf, size_t len) {
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0xFFFF;
 80016aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016ae:	60fb      	str	r3, [r7, #12]
  for (size_t i = 0; i < len; i++) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	e014      	b.n	80016e0 <bq79600_bsp_crc+0x40>
    crc ^= (uint16_t)(*buf++) & 0x00FF;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4053      	eors	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
    crc = crc16_table[crc & 0x00FF] ^ (crc >> 8);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4a0b      	ldr	r2, [pc, #44]	@ (80016f8 <bq79600_bsp_crc+0x58>)
 80016cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016d0:	461a      	mov	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	4053      	eors	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
  for (size_t i = 0; i < len; i++) {
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	3301      	adds	r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d3e6      	bcc.n	80016b6 <bq79600_bsp_crc+0x16>
  }
  return crc;
 80016e8:	68fb      	ldr	r3, [r7, #12]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	08019fb4 	.word	0x08019fb4

080016fc <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
return 0;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <raw_to_float>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


float raw_to_float(void *raw) {
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  return (float)(int16_t)(((*(uint16_t *)raw & 0xFF) << 8) | ((*(uint16_t *)raw & 0xFF00) >> 8));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b21a      	sxth	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	0a1b      	lsrs	r3, r3, #8
 8001730:	b29b      	uxth	r3, r3
 8001732:	b21b      	sxth	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b21b      	sxth	r3, r3
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001740:	eeb0 0a67 	vmov.f32	s0, s15
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
  static bq79600_t *instance = NULL;
  instance = open_bq79600_instance(0);
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff fe89 	bl	8001474 <open_bq79600_instance>
 8001762:	4603      	mov	r3, r0
 8001764:	4a11      	ldr	r2, [pc, #68]	@ (80017ac <HAL_UARTEx_RxEventCallback+0x5c>)
 8001766:	6013      	str	r3, [r2, #0]
  if (instance == NULL) instance = open_bq79600_instance(0);
 8001768:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <HAL_UARTEx_RxEventCallback+0x5c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d105      	bne.n	800177c <HAL_UARTEx_RxEventCallback+0x2c>
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff fe7f 	bl	8001474 <open_bq79600_instance>
 8001776:	4603      	mov	r3, r0
 8001778:	4a0c      	ldr	r2, [pc, #48]	@ (80017ac <HAL_UARTEx_RxEventCallback+0x5c>)
 800177a:	6013      	str	r3, [r2, #0]
  instance->rx_len = size;
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <HAL_UARTEx_RxEventCallback+0x5c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	887a      	ldrh	r2, [r7, #2]
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	f883 281b 	strb.w	r2, [r3, #2075]	@ 0x81b
  bq79600_rx_callback(instance);
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <HAL_UARTEx_RxEventCallback+0x5c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fd5d 	bl	800124c <bq79600_rx_callback>
  HAL_UARTEx_ReceiveToIdle_IT(&huart4, instance->rx_buf, sizeof(instance->rx_buf));
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_UARTEx_RxEventCallback+0x5c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	331a      	adds	r3, #26
 8001798:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800179c:	4619      	mov	r1, r3
 800179e:	4804      	ldr	r0, [pc, #16]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x60>)
 80017a0:	f00f fd89 	bl	80112b6 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	240018e0 	.word	0x240018e0
 80017b0:	24001008 	.word	0x24001008

080017b4 <USB_RXCallback>:
void USB_RXCallback(uint8_t* Buf, uint32_t *Len)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
	memcpy(usbRxBuf, Buf, *Len);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4807      	ldr	r0, [pc, #28]	@ (80017e4 <USB_RXCallback+0x30>)
 80017c8:	f017 f989 	bl	8018ade <memcpy>
	usbRxBufLen = *Len;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <USB_RXCallback+0x34>)
 80017d4:	801a      	strh	r2, [r3, #0]
	usbRxFlag = 1;
 80017d6:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <USB_RXCallback+0x38>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	2400185c 	.word	0x2400185c
 80017e8:	240018dc 	.word	0x240018dc
 80017ec:	240018de 	.word	0x240018de

080017f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80017f4:	f001 ff22 	bl	800363c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f8:	f002 fbce 	bl	8003f98 <HAL_Init>
  /* USER CODE BEGIN Init */
  //SEGGER_RTT_Init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017fc:	f000 f8b4 	bl	8001968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001800:	f000 fb6a 	bl	8001ed8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001804:	f000 fb40 	bl	8001e88 <MX_DMA_Init>
  MX_UART4_Init(1000000);
 8001808:	4838      	ldr	r0, [pc, #224]	@ (80018ec <main+0xfc>)
 800180a:	f000 fab7 	bl	8001d7c <MX_UART4_Init>
  MX_TIM1_Init();
 800180e:	f000 fa11 	bl	8001c34 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001812:	f000 fa63 	bl	8001cdc <MX_TIM2_Init>
  MX_ADC1_Init();
 8001816:	f000 f925 	bl	8001a64 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 800181a:	f000 f9a7 	bl	8001b6c <MX_FDCAN1_Init>
  MX_USB_OTG_HS_PCD_Init();
 800181e:	f000 fb01 	bl	8001e24 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001822:	4833      	ldr	r0, [pc, #204]	@ (80018f0 <main+0x100>)
 8001824:	f00c f914 	bl	800da50 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8001828:	4832      	ldr	r0, [pc, #200]	@ (80018f4 <main+0x104>)
 800182a:	f00c f911 	bl	800da50 <HAL_TIM_Base_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800182e:	f013 f991 	bl	8014b54 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of BQ79614_Queue */
  BQ79614_QueueHandle = osMessageQueueNew (10, sizeof(BQ_Data), &BQ79614_Queue_attributes);
 8001832:	4a31      	ldr	r2, [pc, #196]	@ (80018f8 <main+0x108>)
 8001834:	21f0      	movs	r1, #240	@ 0xf0
 8001836:	200a      	movs	r0, #10
 8001838:	f013 fa83 	bl	8014d42 <osMessageQueueNew>
 800183c:	4603      	mov	r3, r0
 800183e:	4a2f      	ldr	r2, [pc, #188]	@ (80018fc <main+0x10c>)
 8001840:	6013      	str	r3, [r2, #0]

  /* creation of BQ79600_Queue */
  BQ79600_QueueHandle = osMessageQueueNew (10, sizeof(Message), &BQ79600_Queue_attributes);
 8001842:	4a2f      	ldr	r2, [pc, #188]	@ (8001900 <main+0x110>)
 8001844:	2144      	movs	r1, #68	@ 0x44
 8001846:	200a      	movs	r0, #10
 8001848:	f013 fa7b 	bl	8014d42 <osMessageQueueNew>
 800184c:	4603      	mov	r3, r0
 800184e:	4a2d      	ldr	r2, [pc, #180]	@ (8001904 <main+0x114>)
 8001850:	6013      	str	r3, [r2, #0]

  /* creation of Messages_Queue */
  Messages_QueueHandle = osMessageQueueNew (16, sizeof(char), &Messages_Queue_attributes);
 8001852:	4a2d      	ldr	r2, [pc, #180]	@ (8001908 <main+0x118>)
 8001854:	2101      	movs	r1, #1
 8001856:	2010      	movs	r0, #16
 8001858:	f013 fa73 	bl	8014d42 <osMessageQueueNew>
 800185c:	4603      	mov	r3, r0
 800185e:	4a2b      	ldr	r2, [pc, #172]	@ (800190c <main+0x11c>)
 8001860:	6013      	str	r3, [r2, #0]

  /* creation of BQ_Safety_Status_Queue */
  BQ_Safety_Status_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &BQ_Safety_Status_Queue_attributes);
 8001862:	4a2b      	ldr	r2, [pc, #172]	@ (8001910 <main+0x120>)
 8001864:	2102      	movs	r1, #2
 8001866:	2010      	movs	r0, #16
 8001868:	f013 fa6b 	bl	8014d42 <osMessageQueueNew>
 800186c:	4603      	mov	r3, r0
 800186e:	4a29      	ldr	r2, [pc, #164]	@ (8001914 <main+0x124>)
 8001870:	6013      	str	r3, [r2, #0]

  /* creation of Other_Safety_Status_Queue */
  Other_Safety_Status_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &Other_Safety_Status_Queue_attributes);
 8001872:	4a29      	ldr	r2, [pc, #164]	@ (8001918 <main+0x128>)
 8001874:	2102      	movs	r1, #2
 8001876:	2010      	movs	r0, #16
 8001878:	f013 fa63 	bl	8014d42 <osMessageQueueNew>
 800187c:	4603      	mov	r3, r0
 800187e:	4a27      	ldr	r2, [pc, #156]	@ (800191c <main+0x12c>)
 8001880:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Default_task */
  Default_taskHandle = osThreadNew(Default, NULL, &Default_task_attributes);
 8001882:	4a27      	ldr	r2, [pc, #156]	@ (8001920 <main+0x130>)
 8001884:	2100      	movs	r1, #0
 8001886:	4827      	ldr	r0, [pc, #156]	@ (8001924 <main+0x134>)
 8001888:	f013 f9ae 	bl	8014be8 <osThreadNew>
 800188c:	4603      	mov	r3, r0
 800188e:	4a26      	ldr	r2, [pc, #152]	@ (8001928 <main+0x138>)
 8001890:	6013      	str	r3, [r2, #0]

  /* creation of BQ_comm_task */
  BQ_comm_taskHandle = osThreadNew(Bq_comm, NULL, &BQ_comm_task_attributes);
 8001892:	4a26      	ldr	r2, [pc, #152]	@ (800192c <main+0x13c>)
 8001894:	2100      	movs	r1, #0
 8001896:	4826      	ldr	r0, [pc, #152]	@ (8001930 <main+0x140>)
 8001898:	f013 f9a6 	bl	8014be8 <osThreadNew>
 800189c:	4603      	mov	r3, r0
 800189e:	4a25      	ldr	r2, [pc, #148]	@ (8001934 <main+0x144>)
 80018a0:	6013      	str	r3, [r2, #0]

  /* creation of Safety_task */
  Safety_taskHandle = osThreadNew(Safety, NULL, &Safety_task_attributes);
 80018a2:	4a25      	ldr	r2, [pc, #148]	@ (8001938 <main+0x148>)
 80018a4:	2100      	movs	r1, #0
 80018a6:	4825      	ldr	r0, [pc, #148]	@ (800193c <main+0x14c>)
 80018a8:	f013 f99e 	bl	8014be8 <osThreadNew>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4a24      	ldr	r2, [pc, #144]	@ (8001940 <main+0x150>)
 80018b0:	6013      	str	r3, [r2, #0]

  /* creation of Led_task */
  Led_taskHandle = osThreadNew(Led, NULL, &Led_task_attributes);
 80018b2:	4a24      	ldr	r2, [pc, #144]	@ (8001944 <main+0x154>)
 80018b4:	2100      	movs	r1, #0
 80018b6:	4824      	ldr	r0, [pc, #144]	@ (8001948 <main+0x158>)
 80018b8:	f013 f996 	bl	8014be8 <osThreadNew>
 80018bc:	4603      	mov	r3, r0
 80018be:	4a23      	ldr	r2, [pc, #140]	@ (800194c <main+0x15c>)
 80018c0:	6013      	str	r3, [r2, #0]

  /* creation of Can_task */
  Can_taskHandle = osThreadNew(StartTask05, NULL, &Can_task_attributes);
 80018c2:	4a23      	ldr	r2, [pc, #140]	@ (8001950 <main+0x160>)
 80018c4:	2100      	movs	r1, #0
 80018c6:	4823      	ldr	r0, [pc, #140]	@ (8001954 <main+0x164>)
 80018c8:	f013 f98e 	bl	8014be8 <osThreadNew>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a22      	ldr	r2, [pc, #136]	@ (8001958 <main+0x168>)
 80018d0:	6013      	str	r3, [r2, #0]

  /* creation of Usb_task */
  Usb_taskHandle = osThreadNew(Usb, NULL, &Usb_task_attributes);
 80018d2:	4a22      	ldr	r2, [pc, #136]	@ (800195c <main+0x16c>)
 80018d4:	2100      	movs	r1, #0
 80018d6:	4822      	ldr	r0, [pc, #136]	@ (8001960 <main+0x170>)
 80018d8:	f013 f986 	bl	8014be8 <osThreadNew>
 80018dc:	4603      	mov	r3, r0
 80018de:	4a21      	ldr	r2, [pc, #132]	@ (8001964 <main+0x174>)
 80018e0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018e2:	f013 f95b 	bl	8014b9c <osKernelStart>
 80018e6:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	000f4240 	.word	0x000f4240
 80018f0:	24000fbc 	.word	0x24000fbc
 80018f4:	24000f70 	.word	0x24000f70
 80018f8:	0801a28c 	.word	0x0801a28c
 80018fc:	24001688 	.word	0x24001688
 8001900:	0801a2a4 	.word	0x0801a2a4
 8001904:	2400168c 	.word	0x2400168c
 8001908:	0801a2bc 	.word	0x0801a2bc
 800190c:	24001690 	.word	0x24001690
 8001910:	0801a2d4 	.word	0x0801a2d4
 8001914:	24001694 	.word	0x24001694
 8001918:	0801a2ec 	.word	0x0801a2ec
 800191c:	24001698 	.word	0x24001698
 8001920:	0801a1b4 	.word	0x0801a1b4
 8001924:	0800204d 	.word	0x0800204d
 8001928:	24001670 	.word	0x24001670
 800192c:	0801a1d8 	.word	0x0801a1d8
 8001930:	08002061 	.word	0x08002061
 8001934:	24001674 	.word	0x24001674
 8001938:	0801a1fc 	.word	0x0801a1fc
 800193c:	08002d15 	.word	0x08002d15
 8001940:	24001678 	.word	0x24001678
 8001944:	0801a220 	.word	0x0801a220
 8001948:	08002d89 	.word	0x08002d89
 800194c:	2400167c 	.word	0x2400167c
 8001950:	0801a244 	.word	0x0801a244
 8001954:	08002e45 	.word	0x08002e45
 8001958:	24001680 	.word	0x24001680
 800195c:	0801a268 	.word	0x0801a268
 8001960:	08002e91 	.word	0x08002e91
 8001964:	24001684 	.word	0x24001684

08001968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b09c      	sub	sp, #112	@ 0x70
 800196c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001972:	224c      	movs	r2, #76	@ 0x4c
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f016 ffdf 	bl	801893a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	2220      	movs	r2, #32
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f016 ffd9 	bl	801893a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001988:	2002      	movs	r0, #2
 800198a:	f008 fab5 	bl	8009ef8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800198e:	2300      	movs	r3, #0
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	4b32      	ldr	r3, [pc, #200]	@ (8001a5c <SystemClock_Config+0xf4>)
 8001994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001996:	4a31      	ldr	r2, [pc, #196]	@ (8001a5c <SystemClock_Config+0xf4>)
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800199e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a5c <SystemClock_Config+0xf4>)
 80019a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a60 <SystemClock_Config+0xf8>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80019b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001a60 <SystemClock_Config+0xf8>)
 80019b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b29      	ldr	r3, [pc, #164]	@ (8001a60 <SystemClock_Config+0xf8>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019c4:	bf00      	nop
 80019c6:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <SystemClock_Config+0xf8>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019d2:	d1f8      	bne.n	80019c6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 80019d4:	2330      	movs	r3, #48	@ 0x30
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80019d8:	2301      	movs	r3, #1
 80019da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80019dc:	2380      	movs	r3, #128	@ 0x80
 80019de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80019e0:	2320      	movs	r3, #32
 80019e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e4:	2302      	movs	r3, #2
 80019e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 80019e8:	2301      	movs	r3, #1
 80019ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019ec:	2304      	movs	r3, #4
 80019ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 150;
 80019f0:	2396      	movs	r3, #150	@ 0x96
 80019f2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019f4:	2302      	movs	r3, #2
 80019f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019f8:	2303      	movs	r3, #3
 80019fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001a04:	2302      	movs	r3, #2
 8001a06:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a10:	4618      	mov	r0, r3
 8001a12:	f008 fabb 	bl	8009f8c <HAL_RCC_OscConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001a1c:	f001 fe4c 	bl	80036b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a20:	233f      	movs	r3, #63	@ 0x3f
 8001a22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a24:	2303      	movs	r3, #3
 8001a26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a34:	2340      	movs	r3, #64	@ 0x40
 8001a36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	2101      	movs	r1, #1
 8001a44:	4618      	mov	r0, r3
 8001a46:	f008 fefb 	bl	800a840 <HAL_RCC_ClockConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001a50:	f001 fe32 	bl	80036b8 <Error_Handler>
  }
}
 8001a54:	bf00      	nop
 8001a56:	3770      	adds	r7, #112	@ 0x70
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	58000400 	.word	0x58000400
 8001a60:	58024800 	.word	0x58024800

08001a64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	@ 0x28
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a76:	463b      	mov	r3, r7
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
 8001a84:	615a      	str	r2, [r3, #20]
 8001a86:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a88:	4b35      	ldr	r3, [pc, #212]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001a8a:	4a36      	ldr	r2, [pc, #216]	@ (8001b64 <MX_ADC1_Init+0x100>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a8e:	4b34      	ldr	r3, [pc, #208]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a94:	4b32      	ldr	r3, [pc, #200]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001a96:	2204      	movs	r2, #4
 8001a98:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a9a:	4b31      	ldr	r3, [pc, #196]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001aac:	4b2c      	ldr	r3, [pc, #176]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ab8:	4b29      	ldr	r3, [pc, #164]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001abe:	4b28      	ldr	r3, [pc, #160]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ac4:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001aca:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001ad0:	4b23      	ldr	r3, [pc, #140]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8001ad8:	4b21      	ldr	r3, [pc, #132]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ade:	4820      	ldr	r0, [pc, #128]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001ae0:	f002 fc72 	bl	80043c8 <HAL_ADC_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001aea:	f001 fde5 	bl	80036b8 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001aee:	4b1c      	ldr	r3, [pc, #112]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001af0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001af4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001af6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001afc:	4818      	ldr	r0, [pc, #96]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001afe:	f002 fc63 	bl	80043c8 <HAL_ADC_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001b08:	f001 fdd6 	bl	80036b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	4812      	ldr	r0, [pc, #72]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001b18:	f003 fa86 	bl	8005028 <HAL_ADCEx_MultiModeConfigChannel>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001b22:	f001 fdc9 	bl	80036b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <MX_ADC1_Init+0x104>)
 8001b28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b2a:	2306      	movs	r3, #6
 8001b2c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b32:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001b36:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b38:	2304      	movs	r3, #4
 8001b3a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b44:	463b      	mov	r3, r7
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	@ (8001b60 <MX_ADC1_Init+0xfc>)
 8001b4a:	f002 fddf 	bl	800470c <HAL_ADC_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001b54:	f001 fdb0 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	3728      	adds	r7, #40	@ 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	24000e6c 	.word	0x24000e6c
 8001b64:	40022000 	.word	0x40022000
 8001b68:	10c00010 	.word	0x10c00010

08001b6c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001b70:	4b2e      	ldr	r3, [pc, #184]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001b72:	4a2f      	ldr	r2, [pc, #188]	@ (8001c30 <MX_FDCAN1_Init+0xc4>)
 8001b74:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b76:	4b2d      	ldr	r3, [pc, #180]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001b82:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001b88:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001b8e:	4b27      	ldr	r3, [pc, #156]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001b94:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001b96:	2210      	movs	r2, #16
 8001b98:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001b9a:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001ba8:	2202      	movs	r2, #2
 8001baa:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001bca:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001bd6:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001bdc:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001bde:	2204      	movs	r2, #4
 8001be0:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001be2:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001be8:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001bea:	2204      	movs	r2, #4
 8001bec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001bee:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001c00:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001c12:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001c14:	2204      	movs	r2, #4
 8001c16:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001c18:	4804      	ldr	r0, [pc, #16]	@ (8001c2c <MX_FDCAN1_Init+0xc0>)
 8001c1a:	f006 f865 	bl	8007ce8 <HAL_FDCAN_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001c24:	f001 fd48 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	24000ed0 	.word	0x24000ed0
 8001c30:	4000a000 	.word	0x4000a000

08001c34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c3a:	f107 0310 	add.w	r3, r7, #16
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c52:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <MX_TIM1_Init+0xa0>)
 8001c54:	4a20      	ldr	r2, [pc, #128]	@ (8001cd8 <MX_TIM1_Init+0xa4>)
 8001c56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c58:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd4 <MX_TIM1_Init+0xa0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <MX_TIM1_Init+0xa0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <MX_TIM1_Init+0xa0>)
 8001c66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6c:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <MX_TIM1_Init+0xa0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c72:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <MX_TIM1_Init+0xa0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c78:	4b16      	ldr	r3, [pc, #88]	@ (8001cd4 <MX_TIM1_Init+0xa0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c7e:	4815      	ldr	r0, [pc, #84]	@ (8001cd4 <MX_TIM1_Init+0xa0>)
 8001c80:	f00b fe8e 	bl	800d9a0 <HAL_TIM_Base_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001c8a:	f001 fd15 	bl	80036b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480e      	ldr	r0, [pc, #56]	@ (8001cd4 <MX_TIM1_Init+0xa0>)
 8001c9c:	f00c f8c8 	bl	800de30 <HAL_TIM_ConfigClockSource>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001ca6:	f001 fd07 	bl	80036b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4806      	ldr	r0, [pc, #24]	@ (8001cd4 <MX_TIM1_Init+0xa0>)
 8001cbc:	f00c fc48 	bl	800e550 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001cc6:	f001 fcf7 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	3720      	adds	r7, #32
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	24000f70 	.word	0x24000f70
 8001cd8:	40010000 	.word	0x40010000

08001cdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <MX_TIM2_Init+0x9c>)
 8001cfe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d04:	4b1c      	ldr	r3, [pc, #112]	@ (8001d78 <MX_TIM2_Init+0x9c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <MX_TIM2_Init+0x9c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d10:	4b19      	ldr	r3, [pc, #100]	@ (8001d78 <MX_TIM2_Init+0x9c>)
 8001d12:	f04f 32ff 	mov.w	r2, #4294967295
 8001d16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d18:	4b17      	ldr	r3, [pc, #92]	@ (8001d78 <MX_TIM2_Init+0x9c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1e:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <MX_TIM2_Init+0x9c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d24:	4814      	ldr	r0, [pc, #80]	@ (8001d78 <MX_TIM2_Init+0x9c>)
 8001d26:	f00b fe3b 	bl	800d9a0 <HAL_TIM_Base_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001d30:	f001 fcc2 	bl	80036b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001d38:	2330      	movs	r3, #48	@ 0x30
 8001d3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	4619      	mov	r1, r3
 8001d42:	480d      	ldr	r0, [pc, #52]	@ (8001d78 <MX_TIM2_Init+0x9c>)
 8001d44:	f00c f96c 	bl	800e020 <HAL_TIM_SlaveConfigSynchro>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001d4e:	f001 fcb3 	bl	80036b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4806      	ldr	r0, [pc, #24]	@ (8001d78 <MX_TIM2_Init+0x9c>)
 8001d60:	f00c fbf6 	bl	800e550 <HAL_TIMEx_MasterConfigSynchronization>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001d6a:	f001 fca5 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	24000fbc 	.word	0x24000fbc

08001d7c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART4_Init(int boudrate)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d84:	4b25      	ldr	r3, [pc, #148]	@ (8001e1c <MX_UART4_Init+0xa0>)
 8001d86:	4a26      	ldr	r2, [pc, #152]	@ (8001e20 <MX_UART4_Init+0xa4>)
 8001d88:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = boudrate;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a23      	ldr	r2, [pc, #140]	@ (8001e1c <MX_UART4_Init+0xa0>)
 8001d8e:	6053      	str	r3, [r2, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d90:	4b22      	ldr	r3, [pc, #136]	@ (8001e1c <MX_UART4_Init+0xa0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d96:	4b21      	ldr	r3, [pc, #132]	@ (8001e1c <MX_UART4_Init+0xa0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e1c <MX_UART4_Init+0xa0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001da2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e1c <MX_UART4_Init+0xa0>)
 8001da4:	220c      	movs	r2, #12
 8001da6:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e1c <MX_UART4_Init+0xa0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dae:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <MX_UART4_Init+0xa0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db4:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <MX_UART4_Init+0xa0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dba:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <MX_UART4_Init+0xa0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001dc0:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <MX_UART4_Init+0xa0>)
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001dc6:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <MX_UART4_Init+0xa0>)
 8001dc8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001dcc:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dce:	4813      	ldr	r0, [pc, #76]	@ (8001e1c <MX_UART4_Init+0xa0>)
 8001dd0:	f00c fc6a 	bl	800e6a8 <HAL_UART_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_UART4_Init+0x62>
  {
    Error_Handler();
 8001dda:	f001 fc6d 	bl	80036b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dde:	2100      	movs	r1, #0
 8001de0:	480e      	ldr	r0, [pc, #56]	@ (8001e1c <MX_UART4_Init+0xa0>)
 8001de2:	f00f f9ec 	bl	80111be <HAL_UARTEx_SetTxFifoThreshold>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_UART4_Init+0x74>
  {
    Error_Handler();
 8001dec:	f001 fc64 	bl	80036b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001df0:	2100      	movs	r1, #0
 8001df2:	480a      	ldr	r0, [pc, #40]	@ (8001e1c <MX_UART4_Init+0xa0>)
 8001df4:	f00f fa21 	bl	801123a <HAL_UARTEx_SetRxFifoThreshold>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8001dfe:	f001 fc5b 	bl	80036b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001e02:	4806      	ldr	r0, [pc, #24]	@ (8001e1c <MX_UART4_Init+0xa0>)
 8001e04:	f00f f9a2 	bl	801114c <HAL_UARTEx_DisableFifoMode>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8001e0e:	f001 fc53 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	24001008 	.word	0x24001008
 8001e20:	40004c00 	.word	0x40004c00

08001e24 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001e28:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001e2a:	4a16      	ldr	r2, [pc, #88]	@ (8001e84 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001e2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001e2e:	4b14      	ldr	r3, [pc, #80]	@ (8001e80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001e30:	2209      	movs	r2, #9
 8001e32:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8001e34:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001e36:	2202      	movs	r2, #2
 8001e38:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001e3a:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001e42:	2202      	movs	r2, #2
 8001e44:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001e58:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001e64:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001e6a:	4805      	ldr	r0, [pc, #20]	@ (8001e80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001e6c:	f006 fda5 	bl	80089ba <HAL_PCD_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8001e76:	f001 fc1f 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	2400118c 	.word	0x2400118c
 8001e84:	40040000 	.word	0x40040000

08001e88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <MX_DMA_Init+0x4c>)
 8001e90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e94:	4a0f      	ldr	r2, [pc, #60]	@ (8001ed4 <MX_DMA_Init+0x4c>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed4 <MX_DMA_Init+0x4c>)
 8001ea0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2105      	movs	r1, #5
 8001eb0:	200f      	movs	r0, #15
 8001eb2:	f003 fa8a 	bl	80053ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001eb6:	200f      	movs	r0, #15
 8001eb8:	f003 faa1 	bl	80053fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2105      	movs	r1, #5
 8001ec0:	2010      	movs	r0, #16
 8001ec2:	f003 fa82 	bl	80053ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ec6:	2010      	movs	r0, #16
 8001ec8:	f003 fa99 	bl	80053fe <HAL_NVIC_EnableIRQ>

}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	58024400 	.word	0x58024400

08001ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	@ 0x28
 8001edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eee:	4b52      	ldr	r3, [pc, #328]	@ (8002038 <MX_GPIO_Init+0x160>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef4:	4a50      	ldr	r2, [pc, #320]	@ (8002038 <MX_GPIO_Init+0x160>)
 8001ef6:	f043 0310 	orr.w	r3, r3, #16
 8001efa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001efe:	4b4e      	ldr	r3, [pc, #312]	@ (8002038 <MX_GPIO_Init+0x160>)
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002038 <MX_GPIO_Init+0x160>)
 8001f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f12:	4a49      	ldr	r2, [pc, #292]	@ (8002038 <MX_GPIO_Init+0x160>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f1c:	4b46      	ldr	r3, [pc, #280]	@ (8002038 <MX_GPIO_Init+0x160>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2a:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <MX_GPIO_Init+0x160>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f30:	4a41      	ldr	r2, [pc, #260]	@ (8002038 <MX_GPIO_Init+0x160>)
 8001f32:	f043 0304 	orr.w	r3, r3, #4
 8001f36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002038 <MX_GPIO_Init+0x160>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f48:	4b3b      	ldr	r3, [pc, #236]	@ (8002038 <MX_GPIO_Init+0x160>)
 8001f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f4e:	4a3a      	ldr	r2, [pc, #232]	@ (8002038 <MX_GPIO_Init+0x160>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f58:	4b37      	ldr	r3, [pc, #220]	@ (8002038 <MX_GPIO_Init+0x160>)
 8001f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f66:	4b34      	ldr	r3, [pc, #208]	@ (8002038 <MX_GPIO_Init+0x160>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f6c:	4a32      	ldr	r2, [pc, #200]	@ (8002038 <MX_GPIO_Init+0x160>)
 8001f6e:	f043 0308 	orr.w	r3, r3, #8
 8001f72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f76:	4b30      	ldr	r3, [pc, #192]	@ (8002038 <MX_GPIO_Init+0x160>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001f84:	2200      	movs	r2, #0
 8001f86:	213c      	movs	r1, #60	@ 0x3c
 8001f88:	482c      	ldr	r0, [pc, #176]	@ (800203c <MX_GPIO_Init+0x164>)
 8001f8a:	f006 fce3 	bl	8008954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2120      	movs	r1, #32
 8001f92:	482b      	ldr	r0, [pc, #172]	@ (8002040 <MX_GPIO_Init+0x168>)
 8001f94:	f006 fcde 	bl	8008954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8001f9e:	4829      	ldr	r0, [pc, #164]	@ (8002044 <MX_GPIO_Init+0x16c>)
 8001fa0:	f006 fcd8 	bl	8008954 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001fa4:	233c      	movs	r3, #60	@ 0x3c
 8001fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4820      	ldr	r0, [pc, #128]	@ (800203c <MX_GPIO_Init+0x164>)
 8001fbc:	f006 f9f8 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	481a      	ldr	r0, [pc, #104]	@ (8002040 <MX_GPIO_Init+0x168>)
 8001fd8:	f006 f9ea 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001fdc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4812      	ldr	r0, [pc, #72]	@ (800203c <MX_GPIO_Init+0x164>)
 8001ff2:	f006 f9dd 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ff6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4619      	mov	r1, r3
 800200a:	480f      	ldr	r0, [pc, #60]	@ (8002048 <MX_GPIO_Init+0x170>)
 800200c:	f006 f9d0 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002010:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002016:	2301      	movs	r3, #1
 8002018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	4806      	ldr	r0, [pc, #24]	@ (8002044 <MX_GPIO_Init+0x16c>)
 800202a:	f006 f9c1 	bl	80083b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	@ 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	58024400 	.word	0x58024400
 800203c:	58021000 	.word	0x58021000
 8002040:	58020000 	.word	0x58020000
 8002044:	58020800 	.word	0x58020800
 8002048:	58020400 	.word	0x58020400

0800204c <Default>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Default */
void Default(void *argument)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002054:	f015 fd3a 	bl	8017acc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002058:	2001      	movs	r0, #1
 800205a:	f012 fe57 	bl	8014d0c <osDelay>
 800205e:	e7fb      	b.n	8002058 <Default+0xc>

08002060 <Bq_comm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Bq_comm */
void Bq_comm(void *argument)
{
 8002060:	b5b0      	push	{r4, r5, r7, lr}
 8002062:	b0ea      	sub	sp, #424	@ 0x1a8
 8002064:	af02      	add	r7, sp, #8
 8002066:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800206a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800206e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Bq_comm */

	bq79600_t *bms_instance = open_bq79600_instance(0);
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff f9ff 	bl	8001474 <open_bq79600_instance>
 8002076:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158

	    bms_instance->mode = BQ_UART;
 800207a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800207e:	2201      	movs	r2, #1
 8002080:	729a      	strb	r2, [r3, #10]
	    bms_instance->state = BQ_SHUTDOWN;
 8002082:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002086:	2201      	movs	r2, #1
 8002088:	72da      	strb	r2, [r3, #11]
	    bms_instance->rx_port = GPIOA;
 800208a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800208e:	4ad6      	ldr	r2, [pc, #856]	@ (80023e8 <Bq_comm+0x388>)
 8002090:	601a      	str	r2, [r3, #0]
	    bms_instance->tx_port = GPIOA;
 8002092:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002096:	4ad4      	ldr	r2, [pc, #848]	@ (80023e8 <Bq_comm+0x388>)
 8002098:	605a      	str	r2, [r3, #4]
	    bms_instance->rx_pin = 1;
 800209a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800209e:	2201      	movs	r2, #1
 80020a0:	721a      	strb	r2, [r3, #8]
	    bms_instance->tx_pin = 0;
 80020a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80020a6:	2200      	movs	r2, #0
 80020a8:	725a      	strb	r2, [r3, #9]

	    // wake up ping using slowed uart communication
	    HAL_UART_DeInit(&huart4);
 80020aa:	48d0      	ldr	r0, [pc, #832]	@ (80023ec <Bq_comm+0x38c>)
 80020ac:	f00c fb4c 	bl	800e748 <HAL_UART_DeInit>
	    MX_UART4_Init(3250);
 80020b0:	f640 40b2 	movw	r0, #3250	@ 0xcb2
 80020b4:	f7ff fe62 	bl	8001d7c <MX_UART4_Init>
	    osDelay(10);
 80020b8:	200a      	movs	r0, #10
 80020ba:	f012 fe27 	bl	8014d0c <osDelay>
	    uint8_t zero=0x00;
 80020be:	2300      	movs	r3, #0
 80020c0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	    HAL_UART_Transmit(&huart4,&zero,1,100);
 80020c4:	f207 113f 	addw	r1, r7, #319	@ 0x13f
 80020c8:	2364      	movs	r3, #100	@ 0x64
 80020ca:	2201      	movs	r2, #1
 80020cc:	48c7      	ldr	r0, [pc, #796]	@ (80023ec <Bq_comm+0x38c>)
 80020ce:	f00c fb7a 	bl	800e7c6 <HAL_UART_Transmit>
	    osDelay(13);
 80020d2:	200d      	movs	r0, #13
 80020d4:	f012 fe1a 	bl	8014d0c <osDelay>
	   HAL_UART_Transmit(&huart4,&zero,1,100);
 80020d8:	f207 113f 	addw	r1, r7, #319	@ 0x13f
 80020dc:	2364      	movs	r3, #100	@ 0x64
 80020de:	2201      	movs	r2, #1
 80020e0:	48c2      	ldr	r0, [pc, #776]	@ (80023ec <Bq_comm+0x38c>)
 80020e2:	f00c fb70 	bl	800e7c6 <HAL_UART_Transmit>
	   osDelay(50);
 80020e6:	2032      	movs	r0, #50	@ 0x32
 80020e8:	f012 fe10 	bl	8014d0c <osDelay>
	   HAL_UART_DeInit(&huart4);
 80020ec:	48bf      	ldr	r0, [pc, #764]	@ (80023ec <Bq_comm+0x38c>)
 80020ee:	f00c fb2b 	bl	800e748 <HAL_UART_DeInit>
	    MX_UART4_Init(1000000);
 80020f2:	48bf      	ldr	r0, [pc, #764]	@ (80023f0 <Bq_comm+0x390>)
 80020f4:	f7ff fe42 	bl	8001d7c <MX_UART4_Init>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80020f8:	2201      	movs	r2, #1
 80020fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020fe:	48ba      	ldr	r0, [pc, #744]	@ (80023e8 <Bq_comm+0x388>)
 8002100:	f006 fc28 	bl	8008954 <HAL_GPIO_WritePin>


	     if( HAL_UARTEx_ReceiveToIdle_IT(&huart4, bms_instance->rx_buf, sizeof(bms_instance->rx_buf)) == HAL_ERROR)
 8002104:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002108:	331a      	adds	r3, #26
 800210a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800210e:	4619      	mov	r1, r3
 8002110:	48b6      	ldr	r0, [pc, #728]	@ (80023ec <Bq_comm+0x38c>)
 8002112:	f00f f8d0 	bl	80112b6 <HAL_UARTEx_ReceiveToIdle_IT>
 8002116:	4603      	mov	r3, r0
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <Bq_comm+0xc0>
	     {
	    	 while (1);
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <Bq_comm+0xbc>
	     }
	      HAL_Delay(10);
 8002120:	200a      	movs	r0, #10
 8002122:	f001 ff95 	bl	8004050 <HAL_Delay>

	       if( HAL_UART_Transmit_IT(&huart4, bms_instance->tx_buf, bms_instance->tx_len) == HAL_BUSY)
 8002126:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800212a:	f103 010c 	add.w	r1, r3, #12
 800212e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002132:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 8002136:	461a      	mov	r2, r3
 8002138:	48ac      	ldr	r0, [pc, #688]	@ (80023ec <Bq_comm+0x38c>)
 800213a:	f00c fbd3 	bl	800e8e4 <HAL_UART_Transmit_IT>
 800213e:	4603      	mov	r3, r0
 8002140:	2b02      	cmp	r3, #2
 8002142:	d101      	bne.n	8002148 <Bq_comm+0xe8>
	       {
	    	   while (1);
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <Bq_comm+0xe4>
	       }


	      uint8_t buf = 0x20;
 8002148:	2320      	movs	r3, #32
 800214a:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
	      bq79600_write_reg(bms_instance, 0x00, CONTROL1, &buf, 1);
 800214e:	f507 739f 	add.w	r3, r7, #318	@ 0x13e
 8002152:	2201      	movs	r2, #1
 8002154:	9200      	str	r2, [sp, #0]
 8002156:	f240 3209 	movw	r2, #777	@ 0x309
 800215a:	2100      	movs	r1, #0
 800215c:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002160:	f7ff f962 	bl	8001428 <bq79600_write_reg>
	      osDelay(12 * n_devices);
 8002164:	2024      	movs	r0, #36	@ 0x24
 8002166:	f012 fdd1 	bl	8014d0c <osDelay>

	      bq79600_error_t err = bq79600_auto_addressing(bms_instance, n_devices);
 800216a:	2103      	movs	r1, #3
 800216c:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002170:	f7ff f998 	bl	80014a4 <bq79600_auto_addressing>
 8002174:	4603      	mov	r3, r0
 8002176:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	      if (err) {
 800217a:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 800217e:	2b00      	cmp	r3, #0
 8002180:	d025      	beq.n	80021ce <Bq_comm+0x16e>
	    	  Message autoadress = {0};
 8002182:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002186:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800218a:	4618      	mov	r0, r3
 800218c:	2344      	movs	r3, #68	@ 0x44
 800218e:	461a      	mov	r2, r3
 8002190:	2100      	movs	r1, #0
 8002192:	f016 fbd2 	bl	801893a <memset>
	    	  strcpy(autoadress.Buf, "Autoadressing failed!\n0");
 8002196:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800219a:	4a96      	ldr	r2, [pc, #600]	@ (80023f4 <Bq_comm+0x394>)
 800219c:	461c      	mov	r4, r3
 800219e:	4615      	mov	r5, r2
 80021a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021a8:	e884 0003 	stmia.w	r4, {r0, r1}
	    	  autoadress.Timestamp = HAL_GetTick();
 80021ac:	f001 ff44 	bl	8004038 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80021b6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80021ba:	641a      	str	r2, [r3, #64]	@ 0x40
	    	  osMessageQueuePut(Messages_QueueHandle, &autoadress, 0, 50);
 80021bc:	4b8e      	ldr	r3, [pc, #568]	@ (80023f8 <Bq_comm+0x398>)
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80021c4:	2332      	movs	r3, #50	@ 0x32
 80021c6:	2200      	movs	r2, #0
 80021c8:	f012 fe2e 	bl	8014e28 <osMessageQueuePut>
 80021cc:	e027      	b.n	800221e <Bq_comm+0x1be>
	    	  }
	      else
	      {
	    	  Message autoadress = {0};
 80021ce:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80021d2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80021d6:	4618      	mov	r0, r3
 80021d8:	2344      	movs	r3, #68	@ 0x44
 80021da:	461a      	mov	r2, r3
 80021dc:	2100      	movs	r1, #0
 80021de:	f016 fbac 	bl	801893a <memset>
	    	  strcpy(autoadress.Buf, "Autoadressing succesful!\n0");
 80021e2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80021e6:	4a85      	ldr	r2, [pc, #532]	@ (80023fc <Bq_comm+0x39c>)
 80021e8:	461c      	mov	r4, r3
 80021ea:	4615      	mov	r5, r2
 80021ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021f4:	c403      	stmia	r4!, {r0, r1}
 80021f6:	8022      	strh	r2, [r4, #0]
 80021f8:	3402      	adds	r4, #2
 80021fa:	0c13      	lsrs	r3, r2, #16
 80021fc:	7023      	strb	r3, [r4, #0]
	    	  autoadress.Timestamp = HAL_GetTick();
 80021fe:	f001 ff1b 	bl	8004038 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002208:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800220c:	641a      	str	r2, [r3, #64]	@ 0x40
	    	  osMessageQueuePut(Messages_QueueHandle, &autoadress, 0, 50);
 800220e:	4b7a      	ldr	r3, [pc, #488]	@ (80023f8 <Bq_comm+0x398>)
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8002216:	2332      	movs	r3, #50	@ 0x32
 8002218:	2200      	movs	r2, #0
 800221a:	f012 fe05 	bl	8014e28 <osMessageQueuePut>
	      }

	      /* Set long communication timeout */
	      buf = 0x0A;  // CTL_ACT=1 | CTL_TIME=010 (2s)
 800221e:	230a      	movs	r3, #10
 8002220:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, COMM_TIMEOUT_CONF, 5, &buf);
 8002224:	f507 739f 	add.w	r3, r7, #318	@ 0x13e
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	2305      	movs	r3, #5
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2319      	movs	r3, #25
 8002230:	2200      	movs	r2, #0
 8002232:	2103      	movs	r1, #3
 8002234:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002238:	f7fe ff3e 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 800223c:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002240:	f7fe ffca 	bl	80011d8 <bq79600_tx>
	      osDelay(1);
 8002244:	2001      	movs	r0, #1
 8002246:	f012 fd61 	bl	8014d0c <osDelay>

	      /* Config stack device ADCs */
	      buf = n_cells_per_device - 6;
 800224a:	2307      	movs	r3, #7
 800224c:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, ACTIVE_CELL, 1, &buf);
 8002250:	f507 739f 	add.w	r3, r7, #318	@ 0x13e
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	2301      	movs	r3, #1
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2303      	movs	r3, #3
 800225c:	2200      	movs	r2, #0
 800225e:	2103      	movs	r1, #3
 8002260:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002264:	f7fe ff28 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 8002268:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 800226c:	f7fe ffb4 	bl	80011d8 <bq79600_tx>

	      buf = 0x06;
 8002270:	2306      	movs	r3, #6
 8002272:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, ADC_CTRL1, 1, &buf);
 8002276:	f507 739f 	add.w	r3, r7, #318	@ 0x13e
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	2301      	movs	r3, #1
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	f240 330d 	movw	r3, #781	@ 0x30d
 8002284:	2200      	movs	r2, #0
 8002286:	2103      	movs	r1, #3
 8002288:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 800228c:	f7fe ff14 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 8002290:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002294:	f7fe ffa0 	bl	80011d8 <bq79600_tx>
	      osDelay(1 * n_devices);
 8002298:	2003      	movs	r0, #3
 800229a:	f012 fd37 	bl	8014d0c <osDelay>

	      // temp readings  CONTROL2
	     // GPIO_CONF1


	      buf = 0x01; // 0x01
 800229e:	2301      	movs	r3, #1
 80022a0:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, CONTROL2, 1, &buf); // enable T_REF adc reading
 80022a4:	f507 739f 	add.w	r3, r7, #318	@ 0x13e
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	2301      	movs	r3, #1
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	f240 330a 	movw	r3, #778	@ 0x30a
 80022b2:	2200      	movs	r2, #0
 80022b4:	2103      	movs	r1, #3
 80022b6:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80022ba:	f7fe fefd 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 80022be:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80022c2:	f7fe ff89 	bl	80011d8 <bq79600_tx>
	      osDelay(1 * n_devices);
 80022c6:	2003      	movs	r0, #3
 80022c8:	f012 fd20 	bl	8014d0c <osDelay>
	    //  bq79600_construct_command(bms_instance, STACK_WRITE, 0, DIAG_COMP_CTRL3, 1, &buf); // enable gpio as OTUT input
	    //  bq79600_tx(bms_instance);
	    //  osDelay(1 * n_devices);


    	    buf = 0x12; // 0x09;
 80022cc:	2312      	movs	r3, #18
 80022ce:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
    	    bq79600_construct_command(bms_instance, STACK_WRITE, 0, GPIO_CONF1, 4, &buf); // enable gpio as OTUT input
 80022d2:	f507 739f 	add.w	r3, r7, #318	@ 0x13e
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	2304      	movs	r3, #4
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	230e      	movs	r3, #14
 80022de:	2200      	movs	r2, #0
 80022e0:	2103      	movs	r1, #3
 80022e2:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80022e6:	f7fe fee7 	bl	80010b8 <bq79600_construct_command>
    	    bq79600_tx(bms_instance);
 80022ea:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80022ee:	f7fe ff73 	bl	80011d8 <bq79600_tx>
    	    osDelay(1 * n_devices);
 80022f2:	2003      	movs	r0, #3
 80022f4:	f012 fd0a 	bl	8014d0c <osDelay>


    	    buf = 0x6;  //
 80022f8:	2306      	movs	r3, #6
 80022fa:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
    	    bq79600_construct_command(bms_instance, STACK_WRITE, 0, ADC_CTRL3, 1, &buf);
 80022fe:	f507 739f 	add.w	r3, r7, #318	@ 0x13e
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	2301      	movs	r3, #1
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	f240 330f 	movw	r3, #783	@ 0x30f
 800230c:	2200      	movs	r2, #0
 800230e:	2103      	movs	r1, #3
 8002310:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002314:	f7fe fed0 	bl	80010b8 <bq79600_construct_command>
    	    bq79600_tx(bms_instance);
 8002318:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 800231c:	f7fe ff5c 	bl	80011d8 <bq79600_tx>
    	    osDelay(1 * n_devices);
 8002320:	2003      	movs	r0, #3
 8002322:	f012 fcf3 	bl	8014d0c <osDelay>



	      /*  Setup OV, UV for balancing  */

	      uint8_t ov_threshold = 0x22;//0x22; // 4175 mV threshold value
 8002326:	2322      	movs	r3, #34	@ 0x22
 8002328:	f887 313d 	strb.w	r3, [r7, #317]	@ 0x13d
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, OV_THRESH, 1, &ov_threshold);
 800232c:	f207 133d 	addw	r3, r7, #317	@ 0x13d
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	2301      	movs	r3, #1
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2309      	movs	r3, #9
 8002338:	2200      	movs	r2, #0
 800233a:	2103      	movs	r1, #3
 800233c:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002340:	f7fe feba 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 8002344:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002348:	f7fe ff46 	bl	80011d8 <bq79600_tx>
	      osDelay(1 * n_devices);
 800234c:	2003      	movs	r0, #3
 800234e:	f012 fcdd 	bl	8014d0c <osDelay>
	      uint8_t uv_threshold = 0x22; // 3000 mV threshold value
 8002352:	2322      	movs	r3, #34	@ 0x22
 8002354:	f887 313c 	strb.w	r3, [r7, #316]	@ 0x13c
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, UV_THRESH, 1, &uv_threshold);
 8002358:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	2301      	movs	r3, #1
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	230a      	movs	r3, #10
 8002364:	2200      	movs	r2, #0
 8002366:	2103      	movs	r1, #3
 8002368:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 800236c:	f7fe fea4 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);
 8002370:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002374:	f7fe ff30 	bl	80011d8 <bq79600_tx>
	      osDelay(1 * n_devices);
 8002378:	2003      	movs	r0, #3
 800237a:	f012 fcc7 	bl	8014d0c <osDelay>

	      buf = 0x5 ; //0x5;
 800237e:	2305      	movs	r3, #5
 8002380:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
	      bq79600_construct_command(bms_instance, STACK_WRITE, 0, OVUV_CTRL, 1, &buf); // Set mode to run OV and UV round robin on all cells
 8002384:	f507 739f 	add.w	r3, r7, #318	@ 0x13e
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	2301      	movs	r3, #1
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	f44f 734b 	mov.w	r3, #812	@ 0x32c
 8002392:	2200      	movs	r2, #0
 8002394:	2103      	movs	r1, #3
 8002396:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 800239a:	f7fe fe8d 	bl	80010b8 <bq79600_construct_command>
	      bq79600_tx(bms_instance);														// and start OV UV comparators
 800239e:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80023a2:	f7fe ff19 	bl	80011d8 <bq79600_tx>
	      osDelay(1 * n_devices); // wait for stack write
 80023a6:	2003      	movs	r0, #3
 80023a8:	f012 fcb0 	bl	8014d0c <osDelay>
	      vTaskDelay(100);
 80023ac:	2064      	movs	r0, #100	@ 0x64
 80023ae:	f013 fe59 	bl	8016064 <vTaskDelay>
  /* Infinite loop */
	  while (1) {



	         bq79600_construct_command(bms_instance, STACK_READ, 0, DIETEMP1_HI, 2, NULL);
 80023b2:	2300      	movs	r3, #0
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	2302      	movs	r3, #2
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	f240 53ae 	movw	r3, #1454	@ 0x5ae
 80023be:	2200      	movs	r2, #0
 80023c0:	2102      	movs	r1, #2
 80023c2:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80023c6:	f7fe fe77 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 80023ca:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80023ce:	f7fe ff03 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 80023d2:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80023d6:	f7ff f92a 	bl	800162e <bq79600_bsp_ready>
	         vTaskDelay(150);
 80023da:	2096      	movs	r0, #150	@ 0x96
 80023dc:	f013 fe42 	bl	8016064 <vTaskDelay>
	         for (int i = 0; i < n_devices - 1; i++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80023e6:	e030      	b.n	800244a <Bq_comm+0x3ea>
 80023e8:	58020000 	.word	0x58020000
 80023ec:	24001008 	.word	0x24001008
 80023f0:	000f4240 	.word	0x000f4240
 80023f4:	08019b30 	.word	0x08019b30
 80023f8:	24001690 	.word	0x24001690
 80023fc:	08019b48 	.word	0x08019b48
	         {
	           modules[i].dietemp = raw_to_float(&bms_instance->rx_buf[4 + i * 8]) * 0.025;
 8002400:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	3304      	adds	r3, #4
 8002408:	3318      	adds	r3, #24
 800240a:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800240e:	4413      	add	r3, r2
 8002410:	3302      	adds	r3, #2
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff f981 	bl	800171a <raw_to_float>
 8002418:	eef0 7a40 	vmov.f32	s15, s0
 800241c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002420:	ed9f 6bc7 	vldr	d6, [pc, #796]	@ 8002740 <Bq_comm+0x6e0>
 8002424:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002428:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800242c:	4acc      	ldr	r2, [pc, #816]	@ (8002760 <Bq_comm+0x700>)
 800242e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8002432:	2168      	movs	r1, #104	@ 0x68
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	3358      	adds	r3, #88	@ 0x58
 800243c:	edc3 7a00 	vstr	s15, [r3]
	         for (int i = 0; i < n_devices - 1; i++)
 8002440:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8002444:	3301      	adds	r3, #1
 8002446:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800244a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800244e:	2b01      	cmp	r3, #1
 8002450:	ddd6      	ble.n	8002400 <Bq_comm+0x3a0>
	         }
	         uint32_t start_vcells = VCELL1_HI - n_cells_per_device * 2 + 2;
 8002452:	f240 536e 	movw	r3, #1390	@ 0x56e
 8002456:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
	         bq79600_construct_command(bms_instance, STACK_READ, 0, start_vcells, n_cells_per_device * 2, NULL);
 800245a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800245e:	b29b      	uxth	r3, r3
 8002460:	2200      	movs	r2, #0
 8002462:	9201      	str	r2, [sp, #4]
 8002464:	221a      	movs	r2, #26
 8002466:	9200      	str	r2, [sp, #0]
 8002468:	2200      	movs	r2, #0
 800246a:	2102      	movs	r1, #2
 800246c:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002470:	f7fe fe22 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 8002474:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002478:	f7fe feae 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 800247c:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002480:	f7ff f8d5 	bl	800162e <bq79600_bsp_ready>
	         vTaskDelay(50);
 8002484:	2032      	movs	r0, #50	@ 0x32
 8002486:	f013 fded 	bl	8016064 <vTaskDelay>
	         for (int i = 0; i < n_devices - 1; i++)
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8002490:	e039      	b.n	8002506 <Bq_comm+0x4a6>
	         {
	           for (int j = 0; j < n_cells_per_device; j++)
 8002492:	2300      	movs	r3, #0
 8002494:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8002498:	e02c      	b.n	80024f4 <Bq_comm+0x494>
	           {
	             modules[i].vcells[j] =
	                 raw_to_float(&bms_instance->rx_buf[4 + i * (n_cells_per_device * 2 + 6) + 2 * j]) * 0.19073;
 800249a:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800249e:	015b      	lsls	r3, r3, #5
 80024a0:	1d1a      	adds	r2, r3, #4
 80024a2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	3318      	adds	r3, #24
 80024ac:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80024b0:	4413      	add	r3, r2
 80024b2:	3302      	adds	r3, #2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff f930 	bl	800171a <raw_to_float>
 80024ba:	eef0 7a40 	vmov.f32	s15, s0
 80024be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024c2:	ed9f 6ba1 	vldr	d6, [pc, #644]	@ 8002748 <Bq_comm+0x6e8>
 80024c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	             modules[i].vcells[j] =
 80024ce:	49a4      	ldr	r1, [pc, #656]	@ (8002760 <Bq_comm+0x700>)
 80024d0:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80024d4:	221a      	movs	r2, #26
 80024d6:	fb03 f202 	mul.w	r2, r3, r2
 80024da:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80024de:	4413      	add	r3, r2
 80024e0:	3308      	adds	r3, #8
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	edc3 7a00 	vstr	s15, [r3]
	           for (int j = 0; j < n_cells_per_device; j++)
 80024ea:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80024ee:	3301      	adds	r3, #1
 80024f0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80024f4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	ddce      	ble.n	800249a <Bq_comm+0x43a>
	         for (int i = 0; i < n_devices - 1; i++)
 80024fc:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8002500:	3301      	adds	r3, #1
 8002502:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8002506:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800250a:	2b01      	cmp	r3, #1
 800250c:	ddc1      	ble.n	8002492 <Bq_comm+0x432>
	         }




	         uint32_t start_temp = GPIO1_HI;
 800250e:	f240 538e 	movw	r3, #1422	@ 0x58e
 8002512:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	         bq79600_construct_command(bms_instance, STACK_READ, 0, start_temp, 16, NULL);
 8002516:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800251a:	b29b      	uxth	r3, r3
 800251c:	2200      	movs	r2, #0
 800251e:	9201      	str	r2, [sp, #4]
 8002520:	2210      	movs	r2, #16
 8002522:	9200      	str	r2, [sp, #0]
 8002524:	2200      	movs	r2, #0
 8002526:	2102      	movs	r1, #2
 8002528:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 800252c:	f7fe fdc4 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 8002530:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002534:	f7fe fe50 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 8002538:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 800253c:	f7ff f877 	bl	800162e <bq79600_bsp_ready>
	         vTaskDelay(50);
 8002540:	2032      	movs	r0, #50	@ 0x32
 8002542:	f013 fd8f 	bl	8016064 <vTaskDelay>
	         for (int i = 0; i < n_devices - 1; i++)
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 800254c:	e03a      	b.n	80025c4 <Bq_comm+0x564>
	         {
	           for (int j = 0; j < n_temp_pre_device; j++)
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8002554:	e02d      	b.n	80025b2 <Bq_comm+0x552>
	           {
	             modules[i].temperature[j] =
	                 raw_to_float(&bms_instance->rx_buf[4 + i * (n_temp_pre_device * 2 + 6) + 2 * j])  * 0.15259;
 8002556:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800255a:	2216      	movs	r2, #22
 800255c:	fb02 f303 	mul.w	r3, r2, r3
 8002560:	1d1a      	adds	r2, r3, #4
 8002562:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	3318      	adds	r3, #24
 800256c:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002570:	4413      	add	r3, r2
 8002572:	3302      	adds	r3, #2
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff f8d0 	bl	800171a <raw_to_float>
 800257a:	eef0 7a40 	vmov.f32	s15, s0
 800257e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002582:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8002750 <Bq_comm+0x6f0>
 8002586:	ee27 7b06 	vmul.f64	d7, d7, d6
 800258a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	             modules[i].temperature[j] =
 800258e:	4974      	ldr	r1, [pc, #464]	@ (8002760 <Bq_comm+0x700>)
 8002590:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002594:	221a      	movs	r2, #26
 8002596:	fb03 f202 	mul.w	r2, r3, r2
 800259a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	edc3 7a00 	vstr	s15, [r3]
	           for (int j = 0; j < n_temp_pre_device; j++)
 80025a8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80025ac:	3301      	adds	r3, #1
 80025ae:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80025b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80025b6:	2b07      	cmp	r3, #7
 80025b8:	ddcd      	ble.n	8002556 <Bq_comm+0x4f6>
	         for (int i = 0; i < n_devices - 1; i++)
 80025ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80025be:	3301      	adds	r3, #1
 80025c0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80025c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	ddc0      	ble.n	800254e <Bq_comm+0x4ee>
	           }
	         }



	         uint32_t start_temp_ref = TSREF_HI ;
 80025cc:	f240 538c 	movw	r3, #1420	@ 0x58c
 80025d0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

	         bq79600_construct_command(bms_instance, STACK_READ, 0, start_temp_ref, 2, NULL);
 80025d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2200      	movs	r2, #0
 80025dc:	9201      	str	r2, [sp, #4]
 80025de:	2202      	movs	r2, #2
 80025e0:	9200      	str	r2, [sp, #0]
 80025e2:	2200      	movs	r2, #0
 80025e4:	2102      	movs	r1, #2
 80025e6:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80025ea:	f7fe fd65 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 80025ee:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80025f2:	f7fe fdf1 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 80025f6:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80025fa:	f7ff f818 	bl	800162e <bq79600_bsp_ready>
	         vTaskDelay(50);
 80025fe:	2032      	movs	r0, #50	@ 0x32
 8002600:	f013 fd30 	bl	8016064 <vTaskDelay>
	         for (int i = 0; i < n_devices - 1; i++)
 8002604:	2300      	movs	r3, #0
 8002606:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800260a:	e026      	b.n	800265a <Bq_comm+0x5fa>
	             modules[i].t_ref =
	                 raw_to_float(&bms_instance->rx_buf[4 + i * 7]) * 0.16954;
 800260c:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	3304      	adds	r3, #4
 8002618:	3318      	adds	r3, #24
 800261a:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800261e:	4413      	add	r3, r2
 8002620:	3302      	adds	r3, #2
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff f879 	bl	800171a <raw_to_float>
 8002628:	eef0 7a40 	vmov.f32	s15, s0
 800262c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002630:	ed9f 6b49 	vldr	d6, [pc, #292]	@ 8002758 <Bq_comm+0x6f8>
 8002634:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002638:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	             modules[i].t_ref =
 800263c:	4a48      	ldr	r2, [pc, #288]	@ (8002760 <Bq_comm+0x700>)
 800263e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002642:	2168      	movs	r1, #104	@ 0x68
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3354      	adds	r3, #84	@ 0x54
 800264c:	edc3 7a00 	vstr	s15, [r3]
	         for (int i = 0; i < n_devices - 1; i++)
 8002650:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002654:	3301      	adds	r3, #1
 8002656:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800265a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800265e:	2b01      	cmp	r3, #1
 8002660:	ddd4      	ble.n	800260c <Bq_comm+0x5ac>



	         for (int i = 0; i < n_devices - 1; i++) modules[i].timestamp = HAL_GetTick();
 8002662:	2300      	movs	r3, #0
 8002664:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002668:	e011      	b.n	800268e <Bq_comm+0x62e>
 800266a:	f001 fce5 	bl	8004038 <HAL_GetTick>
 800266e:	4603      	mov	r3, r0
 8002670:	4618      	mov	r0, r3
 8002672:	4a3b      	ldr	r2, [pc, #236]	@ (8002760 <Bq_comm+0x700>)
 8002674:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002678:	2168      	movs	r1, #104	@ 0x68
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	335c      	adds	r3, #92	@ 0x5c
 8002682:	6018      	str	r0, [r3, #0]
 8002684:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002688:	3301      	adds	r3, #1
 800268a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800268e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002692:	2b01      	cmp	r3, #1
 8002694:	dde9      	ble.n	800266a <Bq_comm+0x60a>


	         bq79600_construct_command(bms_instance, STACK_READ, 0, DEV_STAT, 1, NULL); // DEV_STAT READ.
 8002696:	2300      	movs	r3, #0
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	2301      	movs	r3, #1
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	f240 532c 	movw	r3, #1324	@ 0x52c
 80026a2:	2200      	movs	r2, #0
 80026a4:	2102      	movs	r1, #2
 80026a6:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80026aa:	f7fe fd05 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 80026ae:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80026b2:	f7fe fd91 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 80026b6:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80026ba:	f7fe ffb8 	bl	800162e <bq79600_bsp_ready>
	         vTaskDelay(100);
 80026be:	2064      	movs	r0, #100	@ 0x64
 80026c0:	f013 fcd0 	bl	8016064 <vTaskDelay>
	         for (int i = 0; i < n_devices - 1; i++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80026ca:	e018      	b.n	80026fe <Bq_comm+0x69e>
	         modules[i].DEV_STAT_RAW = bms_instance->rx_buf[4 + i * 7];
 80026cc:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	3304      	adds	r3, #4
 80026d8:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80026dc:	4413      	add	r3, r2
 80026de:	7e98      	ldrb	r0, [r3, #26]
 80026e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002760 <Bq_comm+0x700>)
 80026e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80026e6:	2168      	movs	r1, #104	@ 0x68
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	3360      	adds	r3, #96	@ 0x60
 80026f0:	4602      	mov	r2, r0
 80026f2:	701a      	strb	r2, [r3, #0]
	         for (int i = 0; i < n_devices - 1; i++)
 80026f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80026f8:	3301      	adds	r3, #1
 80026fa:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80026fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002702:	2b01      	cmp	r3, #1
 8002704:	dde2      	ble.n	80026cc <Bq_comm+0x66c>



	         bq79600_construct_command(bms_instance, STACK_READ, 0,  FAULT_UV1, 1, NULL); // DEV_STAT READ.
 8002706:	2300      	movs	r3, #0
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	2301      	movs	r3, #1
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	f240 533e 	movw	r3, #1342	@ 0x53e
 8002712:	2200      	movs	r2, #0
 8002714:	2102      	movs	r1, #2
 8002716:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 800271a:	f7fe fccd 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 800271e:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002722:	f7fe fd59 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 8002726:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 800272a:	f7fe ff80 	bl	800162e <bq79600_bsp_ready>
	         vTaskDelay(100);
 800272e:	2064      	movs	r0, #100	@ 0x64
 8002730:	f013 fc98 	bl	8016064 <vTaskDelay>
	         for (int i = 0; i < n_devices - 1; i++)
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800273a:	e02c      	b.n	8002796 <Bq_comm+0x736>
 800273c:	f3af 8000 	nop.w
 8002740:	9999999a 	.word	0x9999999a
 8002744:	3f999999 	.word	0x3f999999
 8002748:	342edbb6 	.word	0x342edbb6
 800274c:	3fc869d7 	.word	0x3fc869d7
 8002750:	b1d92b80 	.word	0xb1d92b80
 8002754:	3fc38811 	.word	0x3fc38811
 8002758:	99ae924f 	.word	0x99ae924f
 800275c:	3fc5b37c 	.word	0x3fc5b37c
 8002760:	2400169c 	.word	0x2400169c
	         modules[i].UV_RAW_1 = bms_instance->rx_buf[4 + i * 7];
 8002764:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	3304      	adds	r3, #4
 8002770:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002774:	4413      	add	r3, r2
 8002776:	7e98      	ldrb	r0, [r3, #26]
 8002778:	4acb      	ldr	r2, [pc, #812]	@ (8002aa8 <Bq_comm+0xa48>)
 800277a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800277e:	2168      	movs	r1, #104	@ 0x68
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	3361      	adds	r3, #97	@ 0x61
 8002788:	4602      	mov	r2, r0
 800278a:	701a      	strb	r2, [r3, #0]
	         for (int i = 0; i < n_devices - 1; i++)
 800278c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8002790:	3301      	adds	r3, #1
 8002792:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002796:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800279a:	2b01      	cmp	r3, #1
 800279c:	dde2      	ble.n	8002764 <Bq_comm+0x704>



	         bq79600_construct_command(bms_instance, STACK_READ, 0,  FAULT_UV2, 1, NULL); // DEV_STAT READ.
 800279e:	2300      	movs	r3, #0
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	2301      	movs	r3, #1
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	f240 533f 	movw	r3, #1343	@ 0x53f
 80027aa:	2200      	movs	r2, #0
 80027ac:	2102      	movs	r1, #2
 80027ae:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80027b2:	f7fe fc81 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 80027b6:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80027ba:	f7fe fd0d 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 80027be:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80027c2:	f7fe ff34 	bl	800162e <bq79600_bsp_ready>
	         vTaskDelay(150);
 80027c6:	2096      	movs	r0, #150	@ 0x96
 80027c8:	f013 fc4c 	bl	8016064 <vTaskDelay>
	         for (int i = 0; i < n_devices - 1; i++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80027d2:	e018      	b.n	8002806 <Bq_comm+0x7a6>
	         modules[i].UV_RAW_2 = bms_instance->rx_buf[4 + i * 7];
 80027d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	3304      	adds	r3, #4
 80027e0:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80027e4:	4413      	add	r3, r2
 80027e6:	7e98      	ldrb	r0, [r3, #26]
 80027e8:	4aaf      	ldr	r2, [pc, #700]	@ (8002aa8 <Bq_comm+0xa48>)
 80027ea:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80027ee:	2168      	movs	r1, #104	@ 0x68
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	3362      	adds	r3, #98	@ 0x62
 80027f8:	4602      	mov	r2, r0
 80027fa:	701a      	strb	r2, [r3, #0]
	         for (int i = 0; i < n_devices - 1; i++)
 80027fc:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8002800:	3301      	adds	r3, #1
 8002802:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8002806:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800280a:	2b01      	cmp	r3, #1
 800280c:	dde2      	ble.n	80027d4 <Bq_comm+0x774>


	         bq79600_construct_command(bms_instance, STACK_READ, 0,  FAULT_OV1, 1, NULL); // DEV_STAT READ.
 800280e:	2300      	movs	r3, #0
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	2301      	movs	r3, #1
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	f240 533c 	movw	r3, #1340	@ 0x53c
 800281a:	2200      	movs	r2, #0
 800281c:	2102      	movs	r1, #2
 800281e:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002822:	f7fe fc49 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 8002826:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 800282a:	f7fe fcd5 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 800282e:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002832:	f7fe fefc 	bl	800162e <bq79600_bsp_ready>
	         vTaskDelay(150);
 8002836:	2096      	movs	r0, #150	@ 0x96
 8002838:	f013 fc14 	bl	8016064 <vTaskDelay>
	         for (int i = 0; i < n_devices - 1; i++)
 800283c:	2300      	movs	r3, #0
 800283e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8002842:	e018      	b.n	8002876 <Bq_comm+0x816>
	         modules[i].OV_RAW_1 = bms_instance->rx_buf[4 + i * 7];
 8002844:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002848:	4613      	mov	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	3304      	adds	r3, #4
 8002850:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002854:	4413      	add	r3, r2
 8002856:	7e98      	ldrb	r0, [r3, #26]
 8002858:	4a93      	ldr	r2, [pc, #588]	@ (8002aa8 <Bq_comm+0xa48>)
 800285a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800285e:	2168      	movs	r1, #104	@ 0x68
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	3363      	adds	r3, #99	@ 0x63
 8002868:	4602      	mov	r2, r0
 800286a:	701a      	strb	r2, [r3, #0]
	         for (int i = 0; i < n_devices - 1; i++)
 800286c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8002870:	3301      	adds	r3, #1
 8002872:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8002876:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800287a:	2b01      	cmp	r3, #1
 800287c:	dde2      	ble.n	8002844 <Bq_comm+0x7e4>



	         bq79600_construct_command(bms_instance, STACK_READ, 0,  FAULT_OV2, 1, NULL); // DEV_STAT READ.
 800287e:	2300      	movs	r3, #0
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	2301      	movs	r3, #1
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	f240 533d 	movw	r3, #1341	@ 0x53d
 800288a:	2200      	movs	r2, #0
 800288c:	2102      	movs	r1, #2
 800288e:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8002892:	f7fe fc11 	bl	80010b8 <bq79600_construct_command>
	         bq79600_tx(bms_instance);
 8002896:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 800289a:	f7fe fc9d 	bl	80011d8 <bq79600_tx>
	         bq79600_bsp_ready(bms_instance);
 800289e:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80028a2:	f7fe fec4 	bl	800162e <bq79600_bsp_ready>
	         vTaskDelay(150);
 80028a6:	2096      	movs	r0, #150	@ 0x96
 80028a8:	f013 fbdc 	bl	8016064 <vTaskDelay>
	         for (int i = 0; i < n_devices - 1; i++)
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80028b2:	e018      	b.n	80028e6 <Bq_comm+0x886>
	         modules[i].OV_RAW_2 = bms_instance->rx_buf[4 + i * 7];
 80028b4:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80028b8:	4613      	mov	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	3304      	adds	r3, #4
 80028c0:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80028c4:	4413      	add	r3, r2
 80028c6:	7e98      	ldrb	r0, [r3, #26]
 80028c8:	4a77      	ldr	r2, [pc, #476]	@ (8002aa8 <Bq_comm+0xa48>)
 80028ca:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80028ce:	2168      	movs	r1, #104	@ 0x68
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	3364      	adds	r3, #100	@ 0x64
 80028d8:	4602      	mov	r2, r0
 80028da:	701a      	strb	r2, [r3, #0]
	         for (int i = 0; i < n_devices - 1; i++)
 80028dc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80028e0:	3301      	adds	r3, #1
 80028e2:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80028e6:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	dde2      	ble.n	80028b4 <Bq_comm+0x854>



	         // end of reading data from BQ79600

	         for (int i = 0; i < n_devices - 1; i++) // send data from bq to different tasks.
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80028f4:	e1f9      	b.n	8002cea <Bq_comm+0xc8a>
	         {
		     BQ_Data Data_to_send = {0}; // struct to send to queue
 80028f6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80028fa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80028fe:	4618      	mov	r0, r3
 8002900:	23f0      	movs	r3, #240	@ 0xf0
 8002902:	461a      	mov	r2, r3
 8002904:	2100      	movs	r1, #0
 8002906:	f016 f818 	bl	801893a <memset>
		     Data_to_send.BQ_Number = i ;
 800290a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800290e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002912:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8002916:	601a      	str	r2, [r3, #0]
		     for (int j = 0; j < n_cells_per_device; j++)
 8002918:	2300      	movs	r3, #0
 800291a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800291e:	e032      	b.n	8002986 <Bq_comm+0x926>
		     {
		     Data_to_send.Bq_Voltages[j] = modules[i].vcells[j];
 8002920:	4961      	ldr	r1, [pc, #388]	@ (8002aa8 <Bq_comm+0xa48>)
 8002922:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002926:	221a      	movs	r2, #26
 8002928:	fb03 f202 	mul.w	r2, r3, r2
 800292c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002930:	4413      	add	r3, r2
 8002932:	3308      	adds	r3, #8
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800293e:	f5a3 71aa 	sub.w	r1, r3, #340	@ 0x154
 8002942:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002946:	3324      	adds	r3, #36	@ 0x24
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	3304      	adds	r3, #4
 800294e:	601a      	str	r2, [r3, #0]

		     Data_to_send.Bq_Temperatures[j] = modules[i].temperature[j];
 8002950:	4955      	ldr	r1, [pc, #340]	@ (8002aa8 <Bq_comm+0xa48>)
 8002952:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002956:	221a      	movs	r2, #26
 8002958:	fb03 f202 	mul.w	r2, r3, r2
 800295c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800296c:	f5a3 71aa 	sub.w	r1, r3, #340	@ 0x154
 8002970:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002974:	3332      	adds	r3, #50	@ 0x32
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	601a      	str	r2, [r3, #0]
		     for (int j = 0; j < n_cells_per_device; j++)
 800297c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002980:	3301      	adds	r3, #1
 8002982:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8002986:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800298a:	2b0c      	cmp	r3, #12
 800298c:	ddc8      	ble.n	8002920 <Bq_comm+0x8c0>
		     }
		     Data_to_send.dietemp =  modules[i].dietemp;
 800298e:	4a46      	ldr	r2, [pc, #280]	@ (8002aa8 <Bq_comm+0xa48>)
 8002990:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002994:	2168      	movs	r1, #104	@ 0x68
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3358      	adds	r3, #88	@ 0x58
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80029a4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80029a8:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
		     Data_to_send.Bq_Timestamp = modules[i].timestamp;
 80029ac:	4a3e      	ldr	r2, [pc, #248]	@ (8002aa8 <Bq_comm+0xa48>)
 80029ae:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80029b2:	2168      	movs	r1, #104	@ 0x68
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	335c      	adds	r3, #92	@ 0x5c
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80029c2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80029c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
		     Data_to_send.T_ref = modules[i].t_ref;
 80029ca:	4a37      	ldr	r2, [pc, #220]	@ (8002aa8 <Bq_comm+0xa48>)
 80029cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80029d0:	2168      	movs	r1, #104	@ 0x68
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	3354      	adds	r3, #84	@ 0x54
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80029e0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80029e4:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

		   //  uint8_t dev_stat =   bms_instance->rx_buf[4 + i * 7];
		     Data_to_send.Device_Stat.MAIN_ADC_RUN = (modules[i].DEV_STAT_RAW >> 0) & 0x01;
 80029e8:	4a2f      	ldr	r2, [pc, #188]	@ (8002aa8 <Bq_comm+0xa48>)
 80029ea:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80029ee:	2168      	movs	r1, #104	@ 0x68
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	3360      	adds	r3, #96	@ 0x60
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	f003 0201 	and.w	r2, r3, #1
 80029fe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002a02:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a06:	67da      	str	r2, [r3, #124]	@ 0x7c
		     Data_to_send.Device_Stat.AUX_ADC_RUN = (modules[i].DEV_STAT_RAW >> 1) & 0x01;
 8002a08:	4a27      	ldr	r2, [pc, #156]	@ (8002aa8 <Bq_comm+0xa48>)
 8002a0a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002a0e:	2168      	movs	r1, #104	@ 0x68
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	3360      	adds	r3, #96	@ 0x60
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f003 0201 	and.w	r2, r3, #1
 8002a22:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002a26:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		     Data_to_send.Device_Stat.CS_RUN = (modules[i].DEV_STAT_RAW >> 2) & 0x01;
 8002a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa8 <Bq_comm+0xa48>)
 8002a30:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002a34:	2168      	movs	r1, #104	@ 0x68
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3360      	adds	r3, #96	@ 0x60
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f003 0201 	and.w	r2, r3, #1
 8002a48:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002a4c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		     Data_to_send.Device_Stat.OVUV_RUN = (modules[i].DEV_STAT_RAW >> 3) & 0x01;
 8002a54:	4a14      	ldr	r2, [pc, #80]	@ (8002aa8 <Bq_comm+0xa48>)
 8002a56:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002a5a:	2168      	movs	r1, #104	@ 0x68
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	3360      	adds	r3, #96	@ 0x60
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	08db      	lsrs	r3, r3, #3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f003 0201 	and.w	r2, r3, #1
 8002a6e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002a72:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		     Data_to_send.Device_Stat.OTUT_RUN = (modules[i].DEV_STAT_RAW >> 4) & 0x01;
 8002a7a:	4a0b      	ldr	r2, [pc, #44]	@ (8002aa8 <Bq_comm+0xa48>)
 8002a7c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002a80:	2168      	movs	r1, #104	@ 0x68
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3360      	adds	r3, #96	@ 0x60
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	f003 0201 	and.w	r2, r3, #1
 8002a94:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002a98:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

		     for(int x = 0 ; x < 8  ; x++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002aa6:	e039      	b.n	8002b1c <Bq_comm+0xabc>
 8002aa8:	2400169c 	.word	0x2400169c
		     {
		    	 Data_to_send.UV_ERROR[x] = (modules[i].UV_RAW_2 >> x  ) & 0x01;
 8002aac:	4a94      	ldr	r2, [pc, #592]	@ (8002d00 <Bq_comm+0xca0>)
 8002aae:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002ab2:	2168      	movs	r1, #104	@ 0x68
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3362      	adds	r3, #98	@ 0x62
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002ac4:	fa42 f303 	asr.w	r3, r2, r3
 8002ac8:	f003 0101 	and.w	r1, r3, #1
 8002acc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002ad0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002ad4:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8002ad8:	3212      	adds	r2, #18
 8002ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		    	 Data_to_send.OV_ERROR[x] = (modules[i].OV_RAW_2 >> x  ) & 0x01;
 8002ade:	4a88      	ldr	r2, [pc, #544]	@ (8002d00 <Bq_comm+0xca0>)
 8002ae0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002ae4:	2168      	movs	r1, #104	@ 0x68
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	3364      	adds	r3, #100	@ 0x64
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002af6:	fa42 f303 	asr.w	r3, r2, r3
 8002afa:	f003 0201 	and.w	r2, r3, #1
 8002afe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002b02:	f5a3 71aa 	sub.w	r1, r3, #340	@ 0x154
 8002b06:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	605a      	str	r2, [r3, #4]
		     for(int x = 0 ; x < 8  ; x++)
 8002b12:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002b16:	3301      	adds	r3, #1
 8002b18:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002b1c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002b20:	2b07      	cmp	r3, #7
 8002b22:	ddc3      	ble.n	8002aac <Bq_comm+0xa4c>

		     }
		     for(int x = 8 ; x <  n_cells_per_device ; x++)
 8002b24:	2308      	movs	r3, #8
 8002b26:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8002b2a:	e039      	b.n	8002ba0 <Bq_comm+0xb40>
		     {
		    	 Data_to_send.UV_ERROR[x] = (modules[i].UV_RAW_1 >> (x - 8 ) ) & 0x01;
 8002b2c:	4a74      	ldr	r2, [pc, #464]	@ (8002d00 <Bq_comm+0xca0>)
 8002b2e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002b32:	2168      	movs	r1, #104	@ 0x68
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3361      	adds	r3, #97	@ 0x61
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002b44:	3b08      	subs	r3, #8
 8002b46:	fa42 f303 	asr.w	r3, r2, r3
 8002b4a:	f003 0101 	and.w	r1, r3, #1
 8002b4e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002b52:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b56:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8002b5a:	3212      	adds	r2, #18
 8002b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		    	 Data_to_send.OV_ERROR[x] = (modules[i].OV_RAW_1 >> (x - 8 ) ) & 0x01;
 8002b60:	4a67      	ldr	r2, [pc, #412]	@ (8002d00 <Bq_comm+0xca0>)
 8002b62:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002b66:	2168      	movs	r1, #104	@ 0x68
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3363      	adds	r3, #99	@ 0x63
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002b78:	3b08      	subs	r3, #8
 8002b7a:	fa42 f303 	asr.w	r3, r2, r3
 8002b7e:	f003 0201 	and.w	r2, r3, #1
 8002b82:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002b86:	f5a3 71aa 	sub.w	r1, r3, #340	@ 0x154
 8002b8a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002b8e:	3304      	adds	r3, #4
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	605a      	str	r2, [r3, #4]
		     for(int x = 8 ; x <  n_cells_per_device ; x++)
 8002b96:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8002ba0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002ba4:	2b0c      	cmp	r3, #12
 8002ba6:	ddc1      	ble.n	8002b2c <Bq_comm+0xacc>
		     }
		     // Reverse the array for consistancy
		     for(int x = 0; x < n_cells_per_device / 2; x++)
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8002bae:	e060      	b.n	8002c72 <Bq_comm+0xc12>
		     {
		         int tmp = Data_to_send.UV_ERROR[x];
 8002bb0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002bb4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002bb8:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8002bbc:	3212      	adds	r2, #18
 8002bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
		         int tmp2 = Data_to_send.OV_ERROR[x];
 8002bc6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002bca:	f5a3 72aa 	sub.w	r2, r3, #340	@ 0x154
 8002bce:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
		         Data_to_send.UV_ERROR[x] = Data_to_send.UV_ERROR[n_cells_per_device - 1 - x];
 8002bde:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002be2:	f1c3 020c 	rsb	r2, r3, #12
 8002be6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002bea:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002bee:	3212      	adds	r2, #18
 8002bf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bf4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002bf8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002bfc:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8002c00:	3212      	adds	r2, #18
 8002c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		         Data_to_send.UV_ERROR[n_cells_per_device - 1 - x] = tmp;
 8002c06:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002c0a:	f1c3 020c 	rsb	r2, r3, #12
 8002c0e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002c12:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002c16:	3212      	adds	r2, #18
 8002c18:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		         Data_to_send.OV_ERROR[x] = Data_to_send.OV_ERROR[n_cells_per_device - 1 - x];
 8002c20:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002c24:	f1c3 030c 	rsb	r3, r3, #12
 8002c28:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8002c2c:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8002c30:	3304      	adds	r3, #4
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002c3c:	f5a3 71aa 	sub.w	r1, r3, #340	@ 0x154
 8002c40:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002c44:	3304      	adds	r3, #4
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	605a      	str	r2, [r3, #4]
		         Data_to_send.OV_ERROR[n_cells_per_device - 1 - x] = tmp2;
 8002c4c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002c50:	f1c3 030c 	rsb	r3, r3, #12
 8002c54:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8002c58:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8002c66:	605a      	str	r2, [r3, #4]
		     for(int x = 0; x < n_cells_per_device / 2; x++)
 8002c68:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8002c72:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	dd9a      	ble.n	8002bb0 <Bq_comm+0xb50>





            if( osMessageQueuePut(BQ79614_QueueHandle, &Data_to_send, 5, 5) == osOK)
 8002c7a:	4b22      	ldr	r3, [pc, #136]	@ (8002d04 <Bq_comm+0xca4>)
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8002c82:	2305      	movs	r3, #5
 8002c84:	2205      	movs	r2, #5
 8002c86:	f012 f8cf 	bl	8014e28 <osMessageQueuePut>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d127      	bne.n	8002ce0 <Bq_comm+0xc80>
            	 {
           	 Message bq_mes = {0};
 8002c90:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002c94:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002c98:	4618      	mov	r0, r3
 8002c9a:	2344      	movs	r3, #68	@ 0x44
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	f015 fe4b 	bl	801893a <memset>
             strcpy(bq_mes.Buf, "BQ_Message succesfully sent!\n0");
 8002ca4:	f107 0308 	add.w	r3, r7, #8
 8002ca8:	4a17      	ldr	r2, [pc, #92]	@ (8002d08 <Bq_comm+0xca8>)
 8002caa:	461c      	mov	r4, r3
 8002cac:	4615      	mov	r5, r2
 8002cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002cb6:	c407      	stmia	r4!, {r0, r1, r2}
 8002cb8:	8023      	strh	r3, [r4, #0]
 8002cba:	3402      	adds	r4, #2
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	7023      	strb	r3, [r4, #0]
           	 bq_mes.Timestamp = HAL_GetTick();
 8002cc0:	f001 f9ba 	bl	8004038 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002cca:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002cce:	641a      	str	r2, [r3, #64]	@ 0x40
           	 osMessageQueuePut(Messages_QueueHandle, &bq_mes, 0, 5);
 8002cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8002d0c <Bq_comm+0xcac>)
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	f107 0108 	add.w	r1, r7, #8
 8002cd8:	2305      	movs	r3, #5
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f012 f8a4 	bl	8014e28 <osMessageQueuePut>
	         for (int i = 0; i < n_devices - 1; i++) // send data from bq to different tasks.
 8002ce0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8002cea:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	f77f ae01 	ble.w	80028f6 <Bq_comm+0x896>
           	 }
	         }
	         HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2) ;
 8002cf4:	2104      	movs	r1, #4
 8002cf6:	4806      	ldr	r0, [pc, #24]	@ (8002d10 <Bq_comm+0xcb0>)
 8002cf8:	f005 fe45 	bl	8008986 <HAL_GPIO_TogglePin>
	  while (1) {
 8002cfc:	f7ff bb59 	b.w	80023b2 <Bq_comm+0x352>
 8002d00:	2400169c 	.word	0x2400169c
 8002d04:	24001688 	.word	0x24001688
 8002d08:	08019b64 	.word	0x08019b64
 8002d0c:	24001690 	.word	0x24001690
 8002d10:	58021000 	.word	0x58021000

08002d14 <Safety>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Safety */
void Safety(void *argument)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Safety */
	// this task is responsible for enabling the relay responsible for supplying power to the inverter.
	int overvoltage = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
    int undervoltage = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]
    int comm_err = 0 ;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
    int autoadressing_error = 0 ;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60bb      	str	r3, [r7, #8]
	vTaskDelay(800);
 8002d2c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002d30:	f013 f998 	bl	8016064 <vTaskDelay>
	  	    overvoltage = Data_received.BQ_Overvoltage_Error ;
	  	    comm_err = Data_received.BQ_Communication_Error ;
	  	    autoadressing_error = Data_received.BQ_Autoadressing_Error;
	  	 } */

	  if(!autoadressing_error && !comm_err && !overvoltage && !undervoltage)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10f      	bne.n	8002d5a <Safety+0x46>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10c      	bne.n	8002d5a <Safety+0x46>
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <Safety+0x46>
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d106      	bne.n	8002d5a <Safety+0x46>
	  	{
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  1);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d52:	480b      	ldr	r0, [pc, #44]	@ (8002d80 <Safety+0x6c>)
 8002d54:	f005 fdfe 	bl	8008954 <HAL_GPIO_WritePin>
 8002d58:	e00a      	b.n	8002d70 <Safety+0x5c>
	  	}
	  	else
	  	{
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  0);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d60:	4807      	ldr	r0, [pc, #28]	@ (8002d80 <Safety+0x6c>)
 8002d62:	f005 fdf7 	bl	8008954 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4,  0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2110      	movs	r1, #16
 8002d6a:	4806      	ldr	r0, [pc, #24]	@ (8002d84 <Safety+0x70>)
 8002d6c:	f005 fdf2 	bl	8008954 <HAL_GPIO_WritePin>
	  	}
	      osDelay(10);
 8002d70:	200a      	movs	r0, #10
 8002d72:	f011 ffcb 	bl	8014d0c <osDelay>
    osDelay(1);
 8002d76:	2001      	movs	r0, #1
 8002d78:	f011 ffc8 	bl	8014d0c <osDelay>
	  if(!autoadressing_error && !comm_err && !overvoltage && !undervoltage)
 8002d7c:	e7da      	b.n	8002d34 <Safety+0x20>
 8002d7e:	bf00      	nop
 8002d80:	58020800 	.word	0x58020800
 8002d84:	58021000 	.word	0x58021000

08002d88 <Led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Led */
void Led(void *argument)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b0c2      	sub	sp, #264	@ 0x108
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002d92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d96:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Led */

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 8002d98:	2201      	movs	r2, #1
 8002d9a:	213c      	movs	r1, #60	@ 0x3c
 8002d9c:	4827      	ldr	r0, [pc, #156]	@ (8002e3c <Led+0xb4>)
 8002d9e:	f005 fdd9 	bl	8008954 <HAL_GPIO_WritePin>
	int overvoltage = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	int undervoltage = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	int comm_err = 0 ;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	vTaskDelay(800);
 8002db4:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002db8:	f013 f954 	bl	8016064 <vTaskDelay>
  /* Infinite loop */
  for(;;)
  {

	  BQ_Data Data_received = {0};
 8002dbc:	f107 030c 	add.w	r3, r7, #12
 8002dc0:	22f0      	movs	r2, #240	@ 0xf0
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f015 fdb8 	bl	801893a <memset>
	  if (osMessageQueueGet(BQ79614_QueueHandle, &Data_received, NULL, 10) == osOK)
 8002dca:	4b1d      	ldr	r3, [pc, #116]	@ (8002e40 <Led+0xb8>)
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	f107 010c 	add.w	r1, r7, #12
 8002dd2:	230a      	movs	r3, #10
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f012 f887 	bl	8014ee8 <osMessageQueueGet>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d108      	bne.n	8002df2 <Led+0x6a>
	  {
		  undervoltage = Data_received.BQ_Undervoltage_Error ;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	      overvoltage = Data_received.BQ_Overvoltage_Error ;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	      comm_err = Data_received.BQ_Communication_Error ;
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	  }


	 if( undervoltage || overvoltage )
 8002df2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d103      	bne.n	8002e02 <Led+0x7a>
 8002dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <Led+0x84>
	  {
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2) ;
 8002e02:	2104      	movs	r1, #4
 8002e04:	480d      	ldr	r0, [pc, #52]	@ (8002e3c <Led+0xb4>)
 8002e06:	f005 fdbe 	bl	8008986 <HAL_GPIO_TogglePin>
 8002e0a:	e004      	b.n	8002e16 <Led+0x8e>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2,1); // led pins serve as a pulldown thats why the led-off is to set pin high.
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	2104      	movs	r1, #4
 8002e10:	480a      	ldr	r0, [pc, #40]	@ (8002e3c <Led+0xb4>)
 8002e12:	f005 fd9f 	bl	8008954 <HAL_GPIO_WritePin>

	  }
	  if( comm_err )
 8002e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d004      	beq.n	8002e28 <Led+0xa0>
	  {
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3) ;
 8002e1e:	2108      	movs	r1, #8
 8002e20:	4806      	ldr	r0, [pc, #24]	@ (8002e3c <Led+0xb4>)
 8002e22:	f005 fdb0 	bl	8008986 <HAL_GPIO_TogglePin>
 8002e26:	e004      	b.n	8002e32 <Led+0xaa>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3 ,1);
 8002e28:	2201      	movs	r2, #1
 8002e2a:	2108      	movs	r1, #8
 8002e2c:	4803      	ldr	r0, [pc, #12]	@ (8002e3c <Led+0xb4>)
 8002e2e:	f005 fd91 	bl	8008954 <HAL_GPIO_WritePin>
	  }

	  osDelay(250);
 8002e32:	20fa      	movs	r0, #250	@ 0xfa
 8002e34:	f011 ff6a 	bl	8014d0c <osDelay>
  {
 8002e38:	e7c0      	b.n	8002dbc <Led+0x34>
 8002e3a:	bf00      	nop
 8002e3c:	58021000 	.word	0x58021000
 8002e40:	24001688 	.word	0x24001688

08002e44 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	  if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) // for debugging the button resets all the errors; pressed state is zero
 8002e4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e50:	480d      	ldr	r0, [pc, #52]	@ (8002e88 <StartTask05+0x44>)
 8002e52:	f005 fd67 	bl	8008924 <HAL_GPIO_ReadPin>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d110      	bne.n	8002e7e <StartTask05+0x3a>
		{
		  Data_Receaved.BQ_Autoadressing_Error = Data_Receaved.BQ_Overvoltage_Error = Data_Receaved.BQ_Communication_Error = 0;
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e8c <StartTask05+0x48>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
 8002e62:	4b0a      	ldr	r3, [pc, #40]	@ (8002e8c <StartTask05+0x48>)
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	4a09      	ldr	r2, [pc, #36]	@ (8002e8c <StartTask05+0x48>)
 8002e68:	6053      	str	r3, [r2, #4]
 8002e6a:	4b08      	ldr	r3, [pc, #32]	@ (8002e8c <StartTask05+0x48>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4a07      	ldr	r2, [pc, #28]	@ (8002e8c <StartTask05+0x48>)
 8002e70:	60d3      	str	r3, [r2, #12]
		  osDelay(2000);
 8002e72:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002e76:	f011 ff49 	bl	8014d0c <osDelay>
		  HAL_NVIC_SystemReset();
 8002e7a:	f002 fadc 	bl	8005436 <HAL_NVIC_SystemReset>

		}
	  osDelay(100);
 8002e7e:	2064      	movs	r0, #100	@ 0x64
 8002e80:	f011 ff44 	bl	8014d0c <osDelay>
	  if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) // for debugging the button resets all the errors; pressed state is zero
 8002e84:	e7e2      	b.n	8002e4c <StartTask05+0x8>
 8002e86:	bf00      	nop
 8002e88:	58020400 	.word	0x58020400
 8002e8c:	2400176c 	.word	0x2400176c

08002e90 <Usb>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Usb */
void Usb(void *argument)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b0e6      	sub	sp, #408	@ 0x198
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002e9a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e9e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Usb */
  /* Infinite loop */
	uint8_t priority = 5 ;
 8002ea0:	2305      	movs	r3, #5
 8002ea2:	f887 318b 	strb.w	r3, [r7, #395]	@ 0x18b
	BQ_Data Data_received = {0};
 8002ea6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002eaa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002eae:	4618      	mov	r0, r3
 8002eb0:	23f0      	movs	r3, #240	@ 0xf0
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	f015 fd40 	bl	801893a <memset>
	Message Message_received = {0};
 8002eba:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002ebe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	2344      	movs	r3, #68	@ 0x44
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2100      	movs	r1, #0
 8002eca:	f015 fd36 	bl	801893a <memset>
	char message[64]={0};
 8002ece:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002ed2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	3304      	adds	r3, #4
 8002edc:	223c      	movs	r2, #60	@ 0x3c
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f015 fd2a 	bl	801893a <memset>
	vTaskDelay(800);
 8002ee6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002eea:	f013 f8bb 	bl	8016064 <vTaskDelay>
  for(;;)
  {   //   (Messages_QueueHandle

	       if (osMessageQueueGet(Messages_QueueHandle, &Message_received, &priority, 1) == osOK)
 8002eee:	4bcb      	ldr	r3, [pc, #812]	@ (800321c <Usb+0x38c>)
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	f207 128b 	addw	r2, r7, #395	@ 0x18b
 8002ef6:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8002efa:	2301      	movs	r3, #1
 8002efc:	f011 fff4 	bl	8014ee8 <osMessageQueueGet>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d113      	bne.n	8002f2e <Usb+0x9e>
	           {

		         while (CDC_Transmit_FS((uint8_t*)Message_received.Buf, strlen(Message_received.Buf)) == USBD_BUSY){
 8002f06:	e002      	b.n	8002f0e <Usb+0x7e>
		        	 vTaskDelay(10);
 8002f08:	200a      	movs	r0, #10
 8002f0a:	f013 f8ab 	bl	8016064 <vTaskDelay>
		         while (CDC_Transmit_FS((uint8_t*)Message_received.Buf, strlen(Message_received.Buf)) == USBD_BUSY){
 8002f0e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd f9e4 	bl	80002e0 <strlen>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f014 fee6 	bl	8017cf4 <CDC_Transmit_FS>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d0ec      	beq.n	8002f08 <Usb+0x78>
		         }

	           }

	       if (osMessageQueueGet(BQ79614_QueueHandle, &Data_received, &priority, 1) == osOK)
 8002f2e:	4bbc      	ldr	r3, [pc, #752]	@ (8003220 <Usb+0x390>)
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	f207 128b 	addw	r2, r7, #395	@ 0x18b
 8002f36:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f011 ffd4 	bl	8014ee8 <osMessageQueueGet>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f040 8350 	bne.w	80035e8 <Usb+0x758>
	  		{
	    	   	   	   for(int i = 0 ; i< n_cells_per_device; i++ )
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8002f4e:	e090      	b.n	8003072 <Usb+0x1e2>
	    	                 {

	    	                 sprintf(message  , "BQ Number:%d bq voltage value:%d [mV]  " ,Data_received.BQ_Number+1 , (int)Data_received.Bq_Voltages[i] );
 8002f50:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002f54:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	1c59      	adds	r1, r3, #1
 8002f5c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002f60:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8002f64:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002f68:	3324      	adds	r3, #36	@ 0x24
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3304      	adds	r3, #4
 8002f70:	edd3 7a00 	vldr	s15, [r3]
 8002f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f78:	f107 0014 	add.w	r0, r7, #20
 8002f7c:	ee17 3a90 	vmov	r3, s15
 8002f80:	460a      	mov	r2, r1
 8002f82:	49a8      	ldr	r1, [pc, #672]	@ (8003224 <Usb+0x394>)
 8002f84:	f015 fc76 	bl	8018874 <siprintf>
	    	                // CDC_Transmit_FS((uint8_t*)message, strlen(message));
	    	                 while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002f88:	e002      	b.n	8002f90 <Usb+0x100>
	    	                	 	 	 vTaskDelay(1); // Delay to allow USB stack to process
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	f013 f86a 	bl	8016064 <vTaskDelay>
	    	                 while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd f9a3 	bl	80002e0 <strlen>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	f107 0314 	add.w	r3, r7, #20
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f014 fea5 	bl	8017cf4 <CDC_Transmit_FS>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d0ec      	beq.n	8002f8a <Usb+0xfa>
	    	                 	    	   }
	    	                 if(Data_received.UV_ERROR[i] && Data_received.OV_ERROR[i])
 8002fb0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002fb4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002fb8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002fbc:	3212      	adds	r2, #18
 8002fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d011      	beq.n	8002fea <Usb+0x15a>
 8002fc6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002fca:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8002fce:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <Usb+0x15a>
	    	                 {
	    	                	 sprintf(message  , " - OV/UV SETPOINT ERROR! \n");
 8002fde:	f107 0314 	add.w	r3, r7, #20
 8002fe2:	4991      	ldr	r1, [pc, #580]	@ (8003228 <Usb+0x398>)
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f015 fc45 	bl	8018874 <siprintf>
	    	                 }
	    	                 if(Data_received.OV_ERROR[i])
 8002fea:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002fee:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8002ff2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d006      	beq.n	8003010 <Usb+0x180>
	    	                 {
	    	                	 sprintf(message  , " - OVERVOLTAGE ON THIS CELL! \n");
 8003002:	f107 0314 	add.w	r3, r7, #20
 8003006:	4989      	ldr	r1, [pc, #548]	@ (800322c <Usb+0x39c>)
 8003008:	4618      	mov	r0, r3
 800300a:	f015 fc33 	bl	8018874 <siprintf>
 800300e:	e01b      	b.n	8003048 <Usb+0x1b8>
	    	                 }
	    	                 else if(Data_received.UV_ERROR[i])
 8003010:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003014:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003018:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800301c:	3212      	adds	r2, #18
 800301e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d006      	beq.n	8003034 <Usb+0x1a4>
	    	                 {
	    	                	 sprintf(message  , " - UNDERVOLTAGE ON THIS CELL! \n");
 8003026:	f107 0314 	add.w	r3, r7, #20
 800302a:	4981      	ldr	r1, [pc, #516]	@ (8003230 <Usb+0x3a0>)
 800302c:	4618      	mov	r0, r3
 800302e:	f015 fc21 	bl	8018874 <siprintf>
 8003032:	e009      	b.n	8003048 <Usb+0x1b8>
	    	                 }
	    	                 else
	    	                 {
    	                	 sprintf(message  , "\n");
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	497e      	ldr	r1, [pc, #504]	@ (8003234 <Usb+0x3a4>)
 800303a:	4618      	mov	r0, r3
 800303c:	f015 fc1a 	bl	8018874 <siprintf>
	    	                 }
    	                	 while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003040:	e002      	b.n	8003048 <Usb+0x1b8>
    	                		    	                	 	 	 vTaskDelay(1); // Delay to allow USB stack to process
 8003042:	2001      	movs	r0, #1
 8003044:	f013 f80e 	bl	8016064 <vTaskDelay>
    	                	 while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd f947 	bl	80002e0 <strlen>
 8003052:	4603      	mov	r3, r0
 8003054:	b29a      	uxth	r2, r3
 8003056:	f107 0314 	add.w	r3, r7, #20
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f014 fe49 	bl	8017cf4 <CDC_Transmit_FS>
 8003062:	4603      	mov	r3, r0
 8003064:	2b01      	cmp	r3, #1
 8003066:	d0ec      	beq.n	8003042 <Usb+0x1b2>
	    	   	   	   for(int i = 0 ; i< n_cells_per_device; i++ )
 8003068:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800306c:	3301      	adds	r3, #1
 800306e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8003072:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003076:	2b0c      	cmp	r3, #12
 8003078:	f77f af6a 	ble.w	8002f50 <Usb+0xc0>


	    	                 }


	    	   	   	   for(int i = 0 ; i< 8; i++ ) {
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003082:	e033      	b.n	80030ec <Usb+0x25c>
               	   	   	   	  sprintf(message  , "BQ Number:%d bq temperature value: %d [mV] \n" ,Data_received.BQ_Number+1 , (int)Data_received.Bq_Temperatures[i]);
 8003084:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003088:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	1c59      	adds	r1, r3, #1
 8003090:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003094:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8003098:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800309c:	3332      	adds	r3, #50	@ 0x32
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	edd3 7a00 	vldr	s15, [r3]
 80030a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030aa:	f107 0014 	add.w	r0, r7, #20
 80030ae:	ee17 3a90 	vmov	r3, s15
 80030b2:	460a      	mov	r2, r1
 80030b4:	4960      	ldr	r1, [pc, #384]	@ (8003238 <Usb+0x3a8>)
 80030b6:	f015 fbdd 	bl	8018874 <siprintf>
               	   	   	   	  while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 80030ba:	e002      	b.n	80030c2 <Usb+0x232>
               	   	   	   		  vTaskDelay(1); // Delay to allow USB stack to process
 80030bc:	2001      	movs	r0, #1
 80030be:	f012 ffd1 	bl	8016064 <vTaskDelay>
               	   	   	   	  while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 80030c2:	f107 0314 	add.w	r3, r7, #20
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd f90a 	bl	80002e0 <strlen>
 80030cc:	4603      	mov	r3, r0
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f014 fe0c 	bl	8017cf4 <CDC_Transmit_FS>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d0ec      	beq.n	80030bc <Usb+0x22c>
	    	   	   	   for(int i = 0 ; i< 8; i++ ) {
 80030e2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80030e6:	3301      	adds	r3, #1
 80030e8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80030ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80030f0:	2b07      	cmp	r3, #7
 80030f2:	ddc7      	ble.n	8003084 <Usb+0x1f4>


               	   	   	   	  }
	    	   	   	   }
               	   	   	   	  sprintf(message  , "BQ Number:%d bq REFERENCE temperature value: %d [mV] \n" ,Data_received.BQ_Number+1 , (int)Data_received.T_ref);
 80030f4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80030f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003104:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003108:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 800310c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003110:	f107 0014 	add.w	r0, r7, #20
 8003114:	ee17 3a90 	vmov	r3, s15
 8003118:	4948      	ldr	r1, [pc, #288]	@ (800323c <Usb+0x3ac>)
 800311a:	f015 fbab 	bl	8018874 <siprintf>
               	   	   	      while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 800311e:	e002      	b.n	8003126 <Usb+0x296>
               	   	   	               	 vTaskDelay(1); // Delay to allow USB stack to process
 8003120:	2001      	movs	r0, #1
 8003122:	f012 ff9f 	bl	8016064 <vTaskDelay>
               	   	   	      while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003126:	f107 0314 	add.w	r3, r7, #20
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd f8d8 	bl	80002e0 <strlen>
 8003130:	4603      	mov	r3, r0
 8003132:	b29a      	uxth	r2, r3
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f014 fdda 	bl	8017cf4 <CDC_Transmit_FS>
 8003140:	4603      	mov	r3, r0
 8003142:	2b01      	cmp	r3, #1
 8003144:	d0ec      	beq.n	8003120 <Usb+0x290>
	    	   	   	   	   	   	   	   }
	    	   	   	   	   	if(Data_received.BQ_Overvoltage_Error)
 8003146:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800314a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d019      	beq.n	8003188 <Usb+0x2f8>
	    	   	   	   	   	{
	    	   	   	   	   		sprintf(message  , "BQ OVERVOLTAGE ERROR! \n" );
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4939      	ldr	r1, [pc, #228]	@ (8003240 <Usb+0x3b0>)
 800315a:	4618      	mov	r0, r3
 800315c:	f015 fb8a 	bl	8018874 <siprintf>
	    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003160:	e002      	b.n	8003168 <Usb+0x2d8>
	    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 8003162:	2001      	movs	r0, #1
 8003164:	f012 ff7e 	bl	8016064 <vTaskDelay>
	    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd f8b7 	bl	80002e0 <strlen>
 8003172:	4603      	mov	r3, r0
 8003174:	b29a      	uxth	r2, r3
 8003176:	f107 0314 	add.w	r3, r7, #20
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f014 fdb9 	bl	8017cf4 <CDC_Transmit_FS>
 8003182:	4603      	mov	r3, r0
 8003184:	2b01      	cmp	r3, #1
 8003186:	d0ec      	beq.n	8003162 <Usb+0x2d2>
	    	   	   	   	          	}
	    	   	   	   	   	}
		    	   	   	   	   	if(Data_received.BQ_Undervoltage_Error)
 8003188:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800318c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d019      	beq.n	80031ca <Usb+0x33a>
		    	   	   	   	   	{
		    	   	   	   	   		sprintf(message  , "BQ UNDERVOLTAGE ERROR! \n" );
 8003196:	f107 0314 	add.w	r3, r7, #20
 800319a:	492a      	ldr	r1, [pc, #168]	@ (8003244 <Usb+0x3b4>)
 800319c:	4618      	mov	r0, r3
 800319e:	f015 fb69 	bl	8018874 <siprintf>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 80031a2:	e002      	b.n	80031aa <Usb+0x31a>
		    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 80031a4:	2001      	movs	r0, #1
 80031a6:	f012 ff5d 	bl	8016064 <vTaskDelay>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 80031aa:	f107 0314 	add.w	r3, r7, #20
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd f896 	bl	80002e0 <strlen>
 80031b4:	4603      	mov	r3, r0
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f014 fd98 	bl	8017cf4 <CDC_Transmit_FS>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d0ec      	beq.n	80031a4 <Usb+0x314>
		    	   	   	   	   	         }
	    	        	    	   }
		    	   	   	   	   	if(Data_received.BQ_Communication_Error)
 80031ca:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80031ce:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d019      	beq.n	800320c <Usb+0x37c>
		    	   	   	   	   	{
		    	   	   	   	   		sprintf(message  , "BQ COMM ERROR! \n" );
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	491a      	ldr	r1, [pc, #104]	@ (8003248 <Usb+0x3b8>)
 80031de:	4618      	mov	r0, r3
 80031e0:	f015 fb48 	bl	8018874 <siprintf>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 80031e4:	e002      	b.n	80031ec <Usb+0x35c>
		    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 80031e6:	2001      	movs	r0, #1
 80031e8:	f012 ff3c 	bl	8016064 <vTaskDelay>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fd f875 	bl	80002e0 <strlen>
 80031f6:	4603      	mov	r3, r0
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	f107 0314 	add.w	r3, r7, #20
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f014 fd77 	bl	8017cf4 <CDC_Transmit_FS>
 8003206:	4603      	mov	r3, r0
 8003208:	2b01      	cmp	r3, #1
 800320a:	d0ec      	beq.n	80031e6 <Usb+0x356>
		    	   	   	   	   	         }
	    	        	    	   }

	    	   	   	   	   		sprintf(message  , "DEVICE STATUS READOUT: \n" );
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	490e      	ldr	r1, [pc, #56]	@ (800324c <Usb+0x3bc>)
 8003212:	4618      	mov	r0, r3
 8003214:	f015 fb2e 	bl	8018874 <siprintf>
	    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003218:	e01d      	b.n	8003256 <Usb+0x3c6>
 800321a:	bf00      	nop
 800321c:	24001690 	.word	0x24001690
 8003220:	24001688 	.word	0x24001688
 8003224:	08019b84 	.word	0x08019b84
 8003228:	08019bac 	.word	0x08019bac
 800322c:	08019bc8 	.word	0x08019bc8
 8003230:	08019be8 	.word	0x08019be8
 8003234:	08019c08 	.word	0x08019c08
 8003238:	08019c0c 	.word	0x08019c0c
 800323c:	08019c3c 	.word	0x08019c3c
 8003240:	08019c74 	.word	0x08019c74
 8003244:	08019c8c 	.word	0x08019c8c
 8003248:	08019ca8 	.word	0x08019ca8
 800324c:	08019cbc 	.word	0x08019cbc
	    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 8003250:	2001      	movs	r0, #1
 8003252:	f012 ff07 	bl	8016064 <vTaskDelay>
	    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003256:	f107 0314 	add.w	r3, r7, #20
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd f840 	bl	80002e0 <strlen>
 8003260:	4603      	mov	r3, r0
 8003262:	b29a      	uxth	r2, r3
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f014 fd42 	bl	8017cf4 <CDC_Transmit_FS>
 8003270:	4603      	mov	r3, r0
 8003272:	2b01      	cmp	r3, #1
 8003274:	d0ec      	beq.n	8003250 <Usb+0x3c0>
	    	   	   	   	   	         }

		    	   	   	   	   	if(Data_received.Device_Stat.MAIN_ADC_RUN)
 8003276:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800327a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800327e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01a      	beq.n	80032ba <Usb+0x42a>
		    	   	   	   	   	{
		    	   	   	   	   		sprintf(message  , "MAIN ADC IS RUNNING. \n" );
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	49bd      	ldr	r1, [pc, #756]	@ (8003580 <Usb+0x6f0>)
 800328a:	4618      	mov	r0, r3
 800328c:	f015 faf2 	bl	8018874 <siprintf>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003290:	e002      	b.n	8003298 <Usb+0x408>
		    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 8003292:	2001      	movs	r0, #1
 8003294:	f012 fee6 	bl	8016064 <vTaskDelay>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f81f 	bl	80002e0 <strlen>
 80032a2:	4603      	mov	r3, r0
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	f107 0314 	add.w	r3, r7, #20
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f014 fd21 	bl	8017cf4 <CDC_Transmit_FS>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d0ec      	beq.n	8003292 <Usb+0x402>
 80032b8:	e019      	b.n	80032ee <Usb+0x45e>
		    	   	   	   	   	         }
	    	        	    	   }
		    	   	   	   	   	else
		    	   	   	   	   	{
		    	   	   	   	   		sprintf(message  , "MAIN ADC IS TURNED OFF. \n" );
 80032ba:	f107 0314 	add.w	r3, r7, #20
 80032be:	49b1      	ldr	r1, [pc, #708]	@ (8003584 <Usb+0x6f4>)
 80032c0:	4618      	mov	r0, r3
 80032c2:	f015 fad7 	bl	8018874 <siprintf>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 80032c6:	e002      	b.n	80032ce <Usb+0x43e>
		    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 80032c8:	2001      	movs	r0, #1
 80032ca:	f012 fecb 	bl	8016064 <vTaskDelay>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 80032ce:	f107 0314 	add.w	r3, r7, #20
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd f804 	bl	80002e0 <strlen>
 80032d8:	4603      	mov	r3, r0
 80032da:	b29a      	uxth	r2, r3
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	4611      	mov	r1, r2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f014 fd06 	bl	8017cf4 <CDC_Transmit_FS>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d0ec      	beq.n	80032c8 <Usb+0x438>
		    	   	   	   	   	         }
	    	        	    	   }

		    	   	   	   	   	if(Data_received.Device_Stat.AUX_ADC_RUN)
 80032ee:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80032f2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80032f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01a      	beq.n	8003334 <Usb+0x4a4>
		    	   	   	   	   	{
		    	   	   	   	   		sprintf(message  , "AUXILIARY ADC IS RUNNING. \n" );
 80032fe:	f107 0314 	add.w	r3, r7, #20
 8003302:	49a1      	ldr	r1, [pc, #644]	@ (8003588 <Usb+0x6f8>)
 8003304:	4618      	mov	r0, r3
 8003306:	f015 fab5 	bl	8018874 <siprintf>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 800330a:	e002      	b.n	8003312 <Usb+0x482>
		    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 800330c:	2001      	movs	r0, #1
 800330e:	f012 fea9 	bl	8016064 <vTaskDelay>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003312:	f107 0314 	add.w	r3, r7, #20
 8003316:	4618      	mov	r0, r3
 8003318:	f7fc ffe2 	bl	80002e0 <strlen>
 800331c:	4603      	mov	r3, r0
 800331e:	b29a      	uxth	r2, r3
 8003320:	f107 0314 	add.w	r3, r7, #20
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f014 fce4 	bl	8017cf4 <CDC_Transmit_FS>
 800332c:	4603      	mov	r3, r0
 800332e:	2b01      	cmp	r3, #1
 8003330:	d0ec      	beq.n	800330c <Usb+0x47c>
 8003332:	e019      	b.n	8003368 <Usb+0x4d8>
		    	   	   	   	   	         }
	    	        	    	   }
		    	   	   	   	   	else
		    	   	   	   	   	{
		    	   	   	   	   		sprintf(message  , "AUXILIARY ADC IS TURNED OFF. \n" );
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	4994      	ldr	r1, [pc, #592]	@ (800358c <Usb+0x6fc>)
 800333a:	4618      	mov	r0, r3
 800333c:	f015 fa9a 	bl	8018874 <siprintf>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003340:	e002      	b.n	8003348 <Usb+0x4b8>
		    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 8003342:	2001      	movs	r0, #1
 8003344:	f012 fe8e 	bl	8016064 <vTaskDelay>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003348:	f107 0314 	add.w	r3, r7, #20
 800334c:	4618      	mov	r0, r3
 800334e:	f7fc ffc7 	bl	80002e0 <strlen>
 8003352:	4603      	mov	r3, r0
 8003354:	b29a      	uxth	r2, r3
 8003356:	f107 0314 	add.w	r3, r7, #20
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f014 fcc9 	bl	8017cf4 <CDC_Transmit_FS>
 8003362:	4603      	mov	r3, r0
 8003364:	2b01      	cmp	r3, #1
 8003366:	d0ec      	beq.n	8003342 <Usb+0x4b2>
		    	   	   	   	   	         }
	    	        	    	   }



		    	   	   	   	   	if(Data_received.Device_Stat.CS_RUN)
 8003368:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800336c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01a      	beq.n	80033ae <Usb+0x51e>
		    	   	   	   	   	{
		    	   	   	   	   		sprintf(message  , "CS IS RUNNING. \n" );
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	4984      	ldr	r1, [pc, #528]	@ (8003590 <Usb+0x700>)
 800337e:	4618      	mov	r0, r3
 8003380:	f015 fa78 	bl	8018874 <siprintf>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003384:	e002      	b.n	800338c <Usb+0x4fc>
		    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 8003386:	2001      	movs	r0, #1
 8003388:	f012 fe6c 	bl	8016064 <vTaskDelay>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 800338c:	f107 0314 	add.w	r3, r7, #20
 8003390:	4618      	mov	r0, r3
 8003392:	f7fc ffa5 	bl	80002e0 <strlen>
 8003396:	4603      	mov	r3, r0
 8003398:	b29a      	uxth	r2, r3
 800339a:	f107 0314 	add.w	r3, r7, #20
 800339e:	4611      	mov	r1, r2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f014 fca7 	bl	8017cf4 <CDC_Transmit_FS>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d0ec      	beq.n	8003386 <Usb+0x4f6>
 80033ac:	e019      	b.n	80033e2 <Usb+0x552>
		    	   	   	   	   	         }
	    	        	    	   }
		    	   	   	   	   	else
		    	   	   	   	   	{
		    	   	   	   	   		sprintf(message  , "CS IS TURNED OFF. \n" );
 80033ae:	f107 0314 	add.w	r3, r7, #20
 80033b2:	4978      	ldr	r1, [pc, #480]	@ (8003594 <Usb+0x704>)
 80033b4:	4618      	mov	r0, r3
 80033b6:	f015 fa5d 	bl	8018874 <siprintf>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 80033ba:	e002      	b.n	80033c2 <Usb+0x532>
		    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 80033bc:	2001      	movs	r0, #1
 80033be:	f012 fe51 	bl	8016064 <vTaskDelay>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 80033c2:	f107 0314 	add.w	r3, r7, #20
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fc ff8a 	bl	80002e0 <strlen>
 80033cc:	4603      	mov	r3, r0
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f014 fc8c 	bl	8017cf4 <CDC_Transmit_FS>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d0ec      	beq.n	80033bc <Usb+0x52c>
		    	   	   	   	   	         }
	    	        	    	   }



		    	   	   	   	   	if(Data_received.Device_Stat.OVUV_RUN)
 80033e2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80033e6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01a      	beq.n	8003428 <Usb+0x598>
		    	   	   	   	   	{
		    	   	   	   	   		sprintf(message  , "OVERVOLTAGE/UNDERVOLTAGE PROTECTION CURRENTLY ACTIVE \n" );
 80033f2:	f107 0314 	add.w	r3, r7, #20
 80033f6:	4968      	ldr	r1, [pc, #416]	@ (8003598 <Usb+0x708>)
 80033f8:	4618      	mov	r0, r3
 80033fa:	f015 fa3b 	bl	8018874 <siprintf>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 80033fe:	e002      	b.n	8003406 <Usb+0x576>
		    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 8003400:	2001      	movs	r0, #1
 8003402:	f012 fe2f 	bl	8016064 <vTaskDelay>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003406:	f107 0314 	add.w	r3, r7, #20
 800340a:	4618      	mov	r0, r3
 800340c:	f7fc ff68 	bl	80002e0 <strlen>
 8003410:	4603      	mov	r3, r0
 8003412:	b29a      	uxth	r2, r3
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f014 fc6a 	bl	8017cf4 <CDC_Transmit_FS>
 8003420:	4603      	mov	r3, r0
 8003422:	2b01      	cmp	r3, #1
 8003424:	d0ec      	beq.n	8003400 <Usb+0x570>
 8003426:	e019      	b.n	800345c <Usb+0x5cc>
		    	   	   	   	   	         }
	    	        	    	   }
		    	   	   	   	   	else
		    	   	   	   	   	{
		    	   	   	   	   		sprintf(message  , "OVERVOLTAGE/UNDERVOLTAGE PROTECTION CURRENTLY DISABLED \n" );
 8003428:	f107 0314 	add.w	r3, r7, #20
 800342c:	495b      	ldr	r1, [pc, #364]	@ (800359c <Usb+0x70c>)
 800342e:	4618      	mov	r0, r3
 8003430:	f015 fa20 	bl	8018874 <siprintf>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003434:	e002      	b.n	800343c <Usb+0x5ac>
		    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 8003436:	2001      	movs	r0, #1
 8003438:	f012 fe14 	bl	8016064 <vTaskDelay>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 800343c:	f107 0314 	add.w	r3, r7, #20
 8003440:	4618      	mov	r0, r3
 8003442:	f7fc ff4d 	bl	80002e0 <strlen>
 8003446:	4603      	mov	r3, r0
 8003448:	b29a      	uxth	r2, r3
 800344a:	f107 0314 	add.w	r3, r7, #20
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f014 fc4f 	bl	8017cf4 <CDC_Transmit_FS>
 8003456:	4603      	mov	r3, r0
 8003458:	2b01      	cmp	r3, #1
 800345a:	d0ec      	beq.n	8003436 <Usb+0x5a6>
		    	   	   	   	   	         }
	    	        	    	   }


		    	   	   	   	   	if(Data_received.Device_Stat.OTUT_RUN)
 800345c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003460:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01a      	beq.n	80034a2 <Usb+0x612>
		    	   	   	   	   	{
		    	   	   	   	   		sprintf(message  , "OVERTEMPERATUE/UNDERTEMPERATURE PROTECTION CURRENTLY ACTIVE \n" );
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	494b      	ldr	r1, [pc, #300]	@ (80035a0 <Usb+0x710>)
 8003472:	4618      	mov	r0, r3
 8003474:	f015 f9fe 	bl	8018874 <siprintf>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003478:	e002      	b.n	8003480 <Usb+0x5f0>
		    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 800347a:	2001      	movs	r0, #1
 800347c:	f012 fdf2 	bl	8016064 <vTaskDelay>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003480:	f107 0314 	add.w	r3, r7, #20
 8003484:	4618      	mov	r0, r3
 8003486:	f7fc ff2b 	bl	80002e0 <strlen>
 800348a:	4603      	mov	r3, r0
 800348c:	b29a      	uxth	r2, r3
 800348e:	f107 0314 	add.w	r3, r7, #20
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f014 fc2d 	bl	8017cf4 <CDC_Transmit_FS>
 800349a:	4603      	mov	r3, r0
 800349c:	2b01      	cmp	r3, #1
 800349e:	d0ec      	beq.n	800347a <Usb+0x5ea>
 80034a0:	e019      	b.n	80034d6 <Usb+0x646>
		    	   	   	   	   	         }
	    	        	    	   }
		    	   	   	   	   	else
		    	   	   	   	   	{
		    	   	   	   	   		sprintf(message  , "OVERTEMPERATUE/UNDERTEMPERATURE PROTECTION CURRENTLY DISABLED \n" );
 80034a2:	f107 0314 	add.w	r3, r7, #20
 80034a6:	493f      	ldr	r1, [pc, #252]	@ (80035a4 <Usb+0x714>)
 80034a8:	4618      	mov	r0, r3
 80034aa:	f015 f9e3 	bl	8018874 <siprintf>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 80034ae:	e002      	b.n	80034b6 <Usb+0x626>
		    	   	   	   		    	   vTaskDelay(1); // Delay to allow USB stack to process
 80034b0:	2001      	movs	r0, #1
 80034b2:	f012 fdd7 	bl	8016064 <vTaskDelay>
		    	   	   	   		   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fc ff10 	bl	80002e0 <strlen>
 80034c0:	4603      	mov	r3, r0
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	f107 0314 	add.w	r3, r7, #20
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f014 fc12 	bl	8017cf4 <CDC_Transmit_FS>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d0ec      	beq.n	80034b0 <Usb+0x620>





		    	   	   	   	   	   sprintf(message  , "Temperature of BQ: %d  [deg C]\n" , (int)Data_received.dietemp );
 80034d6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80034da:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80034de:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 80034e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034e6:	f107 0314 	add.w	r3, r7, #20
 80034ea:	ee17 2a90 	vmov	r2, s15
 80034ee:	492e      	ldr	r1, [pc, #184]	@ (80035a8 <Usb+0x718>)
 80034f0:	4618      	mov	r0, r3
 80034f2:	f015 f9bf 	bl	8018874 <siprintf>
		    	   	   	   	   	   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 80034f6:	e002      	b.n	80034fe <Usb+0x66e>
		    	   	   	   	   	   		   	   vTaskDelay(1); // Delay to allow USB stack to process
 80034f8:	2001      	movs	r0, #1
 80034fa:	f012 fdb3 	bl	8016064 <vTaskDelay>
		    	   	   	   	   	   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 80034fe:	f107 0314 	add.w	r3, r7, #20
 8003502:	4618      	mov	r0, r3
 8003504:	f7fc feec 	bl	80002e0 <strlen>
 8003508:	4603      	mov	r3, r0
 800350a:	b29a      	uxth	r2, r3
 800350c:	f107 0314 	add.w	r3, r7, #20
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f014 fbee 	bl	8017cf4 <CDC_Transmit_FS>
 8003518:	4603      	mov	r3, r0
 800351a:	2b01      	cmp	r3, #1
 800351c:	d0ec      	beq.n	80034f8 <Usb+0x668>
		    	   	   	   	   }
		    	   	   	   	   	   sprintf(message  , "Timestamp: %d \n" , Data_received.Bq_Timestamp );
 800351e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003522:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003526:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800352a:	f107 0314 	add.w	r3, r7, #20
 800352e:	491f      	ldr	r1, [pc, #124]	@ (80035ac <Usb+0x71c>)
 8003530:	4618      	mov	r0, r3
 8003532:	f015 f99f 	bl	8018874 <siprintf>
		    	   	   	   	   	   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 8003536:	e002      	b.n	800353e <Usb+0x6ae>
		    	   	   	   	   		   	   vTaskDelay(1); // Delay to allow USB stack to process
 8003538:	2001      	movs	r0, #1
 800353a:	f012 fd93 	bl	8016064 <vTaskDelay>
		    	   	   	   	   	   while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 800353e:	f107 0314 	add.w	r3, r7, #20
 8003542:	4618      	mov	r0, r3
 8003544:	f7fc fecc 	bl	80002e0 <strlen>
 8003548:	4603      	mov	r3, r0
 800354a:	b29a      	uxth	r2, r3
 800354c:	f107 0314 	add.w	r3, r7, #20
 8003550:	4611      	mov	r1, r2
 8003552:	4618      	mov	r0, r3
 8003554:	f014 fbce 	bl	8017cf4 <CDC_Transmit_FS>
 8003558:	4603      	mov	r3, r0
 800355a:	2b01      	cmp	r3, #1
 800355c:	d0ec      	beq.n	8003538 <Usb+0x6a8>
		    	   	   	   	   	   }
	    	                 //CDC_Transmit_FS((uint8_t*)message2, strlen(message2));
	    	                 osDelay(5);
 800355e:	2005      	movs	r0, #5
 8003560:	f011 fbd4 	bl	8014d0c <osDelay>
	    	                 char message[6] = " \n";
 8003564:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003568:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800356c:	f44f 6222 	mov.w	r2, #2592	@ 0xa20
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	2200      	movs	r2, #0
 8003574:	809a      	strh	r2, [r3, #4]
	    	                 for(int i = 0 ; i< 3; i++ )
 8003576:	2300      	movs	r3, #0
 8003578:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800357c:	e030      	b.n	80035e0 <Usb+0x750>
 800357e:	bf00      	nop
 8003580:	08019cd8 	.word	0x08019cd8
 8003584:	08019cf0 	.word	0x08019cf0
 8003588:	08019d0c 	.word	0x08019d0c
 800358c:	08019d28 	.word	0x08019d28
 8003590:	08019d48 	.word	0x08019d48
 8003594:	08019d5c 	.word	0x08019d5c
 8003598:	08019d70 	.word	0x08019d70
 800359c:	08019da8 	.word	0x08019da8
 80035a0:	08019de4 	.word	0x08019de4
 80035a4:	08019e24 	.word	0x08019e24
 80035a8:	08019e64 	.word	0x08019e64
 80035ac:	08019e84 	.word	0x08019e84
	    	                while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
	    	                			vTaskDelay(10); // Delay to allow USB stack to process
 80035b0:	200a      	movs	r0, #10
 80035b2:	f012 fd57 	bl	8016064 <vTaskDelay>
	    	                while (CDC_Transmit_FS((uint8_t*)message, strlen(message)) == USBD_BUSY) {
 80035b6:	f107 030c 	add.w	r3, r7, #12
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fc fe90 	bl	80002e0 <strlen>
 80035c0:	4603      	mov	r3, r0
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	f107 030c 	add.w	r3, r7, #12
 80035c8:	4611      	mov	r1, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f014 fb92 	bl	8017cf4 <CDC_Transmit_FS>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d0ec      	beq.n	80035b0 <Usb+0x720>
	    	                 for(int i = 0 ; i< 3; i++ )
 80035d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80035da:	3301      	adds	r3, #1
 80035dc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80035e0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	dde6      	ble.n	80035b6 <Usb+0x726>




	  		}
	       HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3) ;
 80035e8:	2108      	movs	r1, #8
 80035ea:	4810      	ldr	r0, [pc, #64]	@ (800362c <Usb+0x79c>)
 80035ec:	f005 f9cb 	bl	8008986 <HAL_GPIO_TogglePin>

	  if(usbRxFlag && usbRxBufLen)
 80035f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003630 <Usb+0x7a0>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d015      	beq.n	8003624 <Usb+0x794>
 80035f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003634 <Usb+0x7a4>)
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d011      	beq.n	8003624 <Usb+0x794>
		  case '4' :
			  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
			   break;
		  }
		  flag_usb = 0 ; */
		  CDC_Transmit_FS((uint8_t*)buffer_usb1, strlen(buffer_usb1));
 8003600:	480d      	ldr	r0, [pc, #52]	@ (8003638 <Usb+0x7a8>)
 8003602:	f7fc fe6d 	bl	80002e0 <strlen>
 8003606:	4603      	mov	r3, r0
 8003608:	b29b      	uxth	r3, r3
 800360a:	4619      	mov	r1, r3
 800360c:	480a      	ldr	r0, [pc, #40]	@ (8003638 <Usb+0x7a8>)
 800360e:	f014 fb71 	bl	8017cf4 <CDC_Transmit_FS>
		  usbRxFlag = 0 ;
 8003612:	4b07      	ldr	r3, [pc, #28]	@ (8003630 <Usb+0x7a0>)
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
		  usbRxBufLen = 0 ;
 8003618:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <Usb+0x7a4>)
 800361a:	2200      	movs	r2, #0
 800361c:	801a      	strh	r2, [r3, #0]
		  vTaskDelay(100);
 800361e:	2064      	movs	r0, #100	@ 0x64
 8003620:	f012 fd20 	bl	8016064 <vTaskDelay>

	  }


	  vTaskDelay(1);
 8003624:	2001      	movs	r0, #1
 8003626:	f012 fd1d 	bl	8016064 <vTaskDelay>
	       if (osMessageQueueGet(Messages_QueueHandle, &Message_received, &priority, 1) == osOK)
 800362a:	e460      	b.n	8002eee <Usb+0x5e>
 800362c:	58021000 	.word	0x58021000
 8003630:	240018de 	.word	0x240018de
 8003634:	240018dc 	.word	0x240018dc
 8003638:	240000a8 	.word	0x240000a8

0800363c <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003642:	463b      	mov	r3, r7
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	609a      	str	r2, [r3, #8]
 800364c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800364e:	f001 fef7 	bl	8005440 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003652:	2301      	movs	r3, #1
 8003654:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003656:	2300      	movs	r3, #0
 8003658:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800365a:	2300      	movs	r3, #0
 800365c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800365e:	231f      	movs	r3, #31
 8003660:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003662:	2387      	movs	r3, #135	@ 0x87
 8003664:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003666:	2300      	movs	r3, #0
 8003668:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800366a:	2300      	movs	r3, #0
 800366c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800366e:	2301      	movs	r3, #1
 8003670:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003672:	2301      	movs	r3, #1
 8003674:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003676:	2300      	movs	r3, #0
 8003678:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800367a:	2300      	movs	r3, #0
 800367c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800367e:	463b      	mov	r3, r7
 8003680:	4618      	mov	r0, r3
 8003682:	f001 ff15 	bl	80054b0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003686:	2004      	movs	r0, #4
 8003688:	f001 fef2 	bl	8005470 <HAL_MPU_Enable>

}
 800368c:	bf00      	nop
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a04      	ldr	r2, [pc, #16]	@ (80036b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d101      	bne.n	80036aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036a6:	f000 fcb3 	bl	8004010 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40000c00 	.word	0x40000c00

080036b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036bc:	b672      	cpsid	i
}
 80036be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036c0:	bf00      	nop
 80036c2:	e7fd      	b.n	80036c0 <Error_Handler+0x8>

080036c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ca:	4b0c      	ldr	r3, [pc, #48]	@ (80036fc <HAL_MspInit+0x38>)
 80036cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036d0:	4a0a      	ldr	r2, [pc, #40]	@ (80036fc <HAL_MspInit+0x38>)
 80036d2:	f043 0302 	orr.w	r3, r3, #2
 80036d6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80036da:	4b08      	ldr	r3, [pc, #32]	@ (80036fc <HAL_MspInit+0x38>)
 80036dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	607b      	str	r3, [r7, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036e8:	2200      	movs	r2, #0
 80036ea:	210f      	movs	r1, #15
 80036ec:	f06f 0001 	mvn.w	r0, #1
 80036f0:	f001 fe6b 	bl	80053ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	58024400 	.word	0x58024400

08003700 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b0ba      	sub	sp, #232	@ 0xe8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003718:	f107 0310 	add.w	r3, r7, #16
 800371c:	22c0      	movs	r2, #192	@ 0xc0
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f015 f90a 	bl	801893a <memset>
  if(hadc->Instance==ADC1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a2b      	ldr	r2, [pc, #172]	@ (80037d8 <HAL_ADC_MspInit+0xd8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d14f      	bne.n	80037d0 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003730:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800373c:	2301      	movs	r3, #1
 800373e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 38;
 8003740:	2326      	movs	r3, #38	@ 0x26
 8003742:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003744:	2302      	movs	r3, #2
 8003746:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 6;
 8003748:	2306      	movs	r3, #6
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800374c:	2302      	movs	r3, #2
 800374e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8003750:	2380      	movs	r3, #128	@ 0x80
 8003752:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003754:	2320      	movs	r3, #32
 8003756:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800375c:	2300      	movs	r3, #0
 800375e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003762:	f107 0310 	add.w	r3, r7, #16
 8003766:	4618      	mov	r0, r3
 8003768:	f007 fc38 	bl	800afdc <HAL_RCCEx_PeriphCLKConfig>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8003772:	f7ff ffa1 	bl	80036b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003776:	4b19      	ldr	r3, [pc, #100]	@ (80037dc <HAL_ADC_MspInit+0xdc>)
 8003778:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800377c:	4a17      	ldr	r2, [pc, #92]	@ (80037dc <HAL_ADC_MspInit+0xdc>)
 800377e:	f043 0320 	orr.w	r3, r3, #32
 8003782:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003786:	4b15      	ldr	r3, [pc, #84]	@ (80037dc <HAL_ADC_MspInit+0xdc>)
 8003788:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003794:	4b11      	ldr	r3, [pc, #68]	@ (80037dc <HAL_ADC_MspInit+0xdc>)
 8003796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800379a:	4a10      	ldr	r2, [pc, #64]	@ (80037dc <HAL_ADC_MspInit+0xdc>)
 800379c:	f043 0304 	orr.w	r3, r3, #4
 80037a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80037a4:	4b0d      	ldr	r3, [pc, #52]	@ (80037dc <HAL_ADC_MspInit+0xdc>)
 80037a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80037b2:	2310      	movs	r3, #16
 80037b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037b8:	2303      	movs	r3, #3
 80037ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80037c8:	4619      	mov	r1, r3
 80037ca:	4805      	ldr	r0, [pc, #20]	@ (80037e0 <HAL_ADC_MspInit+0xe0>)
 80037cc:	f004 fdf0 	bl	80083b0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80037d0:	bf00      	nop
 80037d2:	37e8      	adds	r7, #232	@ 0xe8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40022000 	.word	0x40022000
 80037dc:	58024400 	.word	0x58024400
 80037e0:	58020800 	.word	0x58020800

080037e4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b0ba      	sub	sp, #232	@ 0xe8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	609a      	str	r2, [r3, #8]
 80037f8:	60da      	str	r2, [r3, #12]
 80037fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037fc:	f107 0310 	add.w	r3, r7, #16
 8003800:	22c0      	movs	r2, #192	@ 0xc0
 8003802:	2100      	movs	r1, #0
 8003804:	4618      	mov	r0, r3
 8003806:	f015 f898 	bl	801893a <memset>
  if(hfdcan->Instance==FDCAN1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a27      	ldr	r2, [pc, #156]	@ (80038ac <HAL_FDCAN_MspInit+0xc8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d146      	bne.n	80038a2 <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003814:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003820:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003824:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003828:	f107 0310 	add.w	r3, r7, #16
 800382c:	4618      	mov	r0, r3
 800382e:	f007 fbd5 	bl	800afdc <HAL_RCCEx_PeriphCLKConfig>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8003838:	f7ff ff3e 	bl	80036b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800383c:	4b1c      	ldr	r3, [pc, #112]	@ (80038b0 <HAL_FDCAN_MspInit+0xcc>)
 800383e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003842:	4a1b      	ldr	r2, [pc, #108]	@ (80038b0 <HAL_FDCAN_MspInit+0xcc>)
 8003844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003848:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800384c:	4b18      	ldr	r3, [pc, #96]	@ (80038b0 <HAL_FDCAN_MspInit+0xcc>)
 800384e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800385a:	4b15      	ldr	r3, [pc, #84]	@ (80038b0 <HAL_FDCAN_MspInit+0xcc>)
 800385c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003860:	4a13      	ldr	r2, [pc, #76]	@ (80038b0 <HAL_FDCAN_MspInit+0xcc>)
 8003862:	f043 0308 	orr.w	r3, r3, #8
 8003866:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800386a:	4b11      	ldr	r3, [pc, #68]	@ (80038b0 <HAL_FDCAN_MspInit+0xcc>)
 800386c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003878:	2303      	movs	r3, #3
 800387a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387e:	2302      	movs	r3, #2
 8003880:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003884:	2300      	movs	r3, #0
 8003886:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388a:	2300      	movs	r3, #0
 800388c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003890:	2309      	movs	r3, #9
 8003892:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003896:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800389a:	4619      	mov	r1, r3
 800389c:	4805      	ldr	r0, [pc, #20]	@ (80038b4 <HAL_FDCAN_MspInit+0xd0>)
 800389e:	f004 fd87 	bl	80083b0 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80038a2:	bf00      	nop
 80038a4:	37e8      	adds	r7, #232	@ 0xe8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	4000a000 	.word	0x4000a000
 80038b0:	58024400 	.word	0x58024400
 80038b4:	58020c00 	.word	0x58020c00

080038b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a16      	ldr	r2, [pc, #88]	@ (8003920 <HAL_TIM_Base_MspInit+0x68>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d10f      	bne.n	80038ea <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038ca:	4b16      	ldr	r3, [pc, #88]	@ (8003924 <HAL_TIM_Base_MspInit+0x6c>)
 80038cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038d0:	4a14      	ldr	r2, [pc, #80]	@ (8003924 <HAL_TIM_Base_MspInit+0x6c>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038da:	4b12      	ldr	r3, [pc, #72]	@ (8003924 <HAL_TIM_Base_MspInit+0x6c>)
 80038dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80038e8:	e013      	b.n	8003912 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f2:	d10e      	bne.n	8003912 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <HAL_TIM_Base_MspInit+0x6c>)
 80038f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003924 <HAL_TIM_Base_MspInit+0x6c>)
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003904:	4b07      	ldr	r3, [pc, #28]	@ (8003924 <HAL_TIM_Base_MspInit+0x6c>)
 8003906:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	68bb      	ldr	r3, [r7, #8]
}
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40010000 	.word	0x40010000
 8003924:	58024400 	.word	0x58024400

08003928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b0ba      	sub	sp, #232	@ 0xe8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003940:	f107 0310 	add.w	r3, r7, #16
 8003944:	22c0      	movs	r2, #192	@ 0xc0
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f014 fff6 	bl	801893a <memset>
  if(huart->Instance==UART4)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a61      	ldr	r2, [pc, #388]	@ (8003ad8 <HAL_UART_MspInit+0x1b0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	f040 80bb 	bne.w	8003ad0 <HAL_UART_MspInit+0x1a8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800395a:	f04f 0202 	mov.w	r2, #2
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003966:	2300      	movs	r3, #0
 8003968:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800396c:	f107 0310 	add.w	r3, r7, #16
 8003970:	4618      	mov	r0, r3
 8003972:	f007 fb33 	bl	800afdc <HAL_RCCEx_PeriphCLKConfig>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800397c:	f7ff fe9c 	bl	80036b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003980:	4b56      	ldr	r3, [pc, #344]	@ (8003adc <HAL_UART_MspInit+0x1b4>)
 8003982:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003986:	4a55      	ldr	r2, [pc, #340]	@ (8003adc <HAL_UART_MspInit+0x1b4>)
 8003988:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800398c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003990:	4b52      	ldr	r3, [pc, #328]	@ (8003adc <HAL_UART_MspInit+0x1b4>)
 8003992:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003996:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800399e:	4b4f      	ldr	r3, [pc, #316]	@ (8003adc <HAL_UART_MspInit+0x1b4>)
 80039a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039a4:	4a4d      	ldr	r2, [pc, #308]	@ (8003adc <HAL_UART_MspInit+0x1b4>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039ae:	4b4b      	ldr	r3, [pc, #300]	@ (8003adc <HAL_UART_MspInit+0x1b4>)
 80039b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80039bc:	2303      	movs	r3, #3
 80039be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c2:	2302      	movs	r3, #2
 80039c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80039d4:	2308      	movs	r3, #8
 80039d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80039de:	4619      	mov	r1, r3
 80039e0:	483f      	ldr	r0, [pc, #252]	@ (8003ae0 <HAL_UART_MspInit+0x1b8>)
 80039e2:	f004 fce5 	bl	80083b0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80039e6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae4 <HAL_UART_MspInit+0x1bc>)
 80039e8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ae8 <HAL_UART_MspInit+0x1c0>)
 80039ea:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80039ec:	4b3d      	ldr	r3, [pc, #244]	@ (8003ae4 <HAL_UART_MspInit+0x1bc>)
 80039ee:	2240      	movs	r2, #64	@ 0x40
 80039f0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039f2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ae4 <HAL_UART_MspInit+0x1bc>)
 80039f4:	2240      	movs	r2, #64	@ 0x40
 80039f6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039f8:	4b3a      	ldr	r3, [pc, #232]	@ (8003ae4 <HAL_UART_MspInit+0x1bc>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039fe:	4b39      	ldr	r3, [pc, #228]	@ (8003ae4 <HAL_UART_MspInit+0x1bc>)
 8003a00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a04:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a06:	4b37      	ldr	r3, [pc, #220]	@ (8003ae4 <HAL_UART_MspInit+0x1bc>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a0c:	4b35      	ldr	r3, [pc, #212]	@ (8003ae4 <HAL_UART_MspInit+0x1bc>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003a12:	4b34      	ldr	r3, [pc, #208]	@ (8003ae4 <HAL_UART_MspInit+0x1bc>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a18:	4b32      	ldr	r3, [pc, #200]	@ (8003ae4 <HAL_UART_MspInit+0x1bc>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003a1e:	4b31      	ldr	r3, [pc, #196]	@ (8003ae4 <HAL_UART_MspInit+0x1bc>)
 8003a20:	2204      	movs	r2, #4
 8003a22:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003a24:	4b2f      	ldr	r3, [pc, #188]	@ (8003ae4 <HAL_UART_MspInit+0x1bc>)
 8003a26:	2203      	movs	r2, #3
 8003a28:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ae4 <HAL_UART_MspInit+0x1bc>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003a30:	4b2c      	ldr	r3, [pc, #176]	@ (8003ae4 <HAL_UART_MspInit+0x1bc>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003a36:	482b      	ldr	r0, [pc, #172]	@ (8003ae4 <HAL_UART_MspInit+0x1bc>)
 8003a38:	f001 fd7a 	bl	8005530 <HAL_DMA_Init>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_UART_MspInit+0x11e>
    {
      Error_Handler();
 8003a42:	f7ff fe39 	bl	80036b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a26      	ldr	r2, [pc, #152]	@ (8003ae4 <HAL_UART_MspInit+0x1bc>)
 8003a4a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a4c:	4a25      	ldr	r2, [pc, #148]	@ (8003ae4 <HAL_UART_MspInit+0x1bc>)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream5;
 8003a52:	4b26      	ldr	r3, [pc, #152]	@ (8003aec <HAL_UART_MspInit+0x1c4>)
 8003a54:	4a26      	ldr	r2, [pc, #152]	@ (8003af0 <HAL_UART_MspInit+0x1c8>)
 8003a56:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8003a58:	4b24      	ldr	r3, [pc, #144]	@ (8003aec <HAL_UART_MspInit+0x1c4>)
 8003a5a:	223f      	movs	r2, #63	@ 0x3f
 8003a5c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a5e:	4b23      	ldr	r3, [pc, #140]	@ (8003aec <HAL_UART_MspInit+0x1c4>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a64:	4b21      	ldr	r3, [pc, #132]	@ (8003aec <HAL_UART_MspInit+0x1c4>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a6a:	4b20      	ldr	r3, [pc, #128]	@ (8003aec <HAL_UART_MspInit+0x1c4>)
 8003a6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a70:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a72:	4b1e      	ldr	r3, [pc, #120]	@ (8003aec <HAL_UART_MspInit+0x1c4>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a78:	4b1c      	ldr	r3, [pc, #112]	@ (8003aec <HAL_UART_MspInit+0x1c4>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003aec <HAL_UART_MspInit+0x1c4>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a84:	4b19      	ldr	r3, [pc, #100]	@ (8003aec <HAL_UART_MspInit+0x1c4>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003a8a:	4b18      	ldr	r3, [pc, #96]	@ (8003aec <HAL_UART_MspInit+0x1c4>)
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003a90:	4b16      	ldr	r3, [pc, #88]	@ (8003aec <HAL_UART_MspInit+0x1c4>)
 8003a92:	2203      	movs	r2, #3
 8003a94:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003a96:	4b15      	ldr	r3, [pc, #84]	@ (8003aec <HAL_UART_MspInit+0x1c4>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003a9c:	4b13      	ldr	r3, [pc, #76]	@ (8003aec <HAL_UART_MspInit+0x1c4>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003aa2:	4812      	ldr	r0, [pc, #72]	@ (8003aec <HAL_UART_MspInit+0x1c4>)
 8003aa4:	f001 fd44 	bl	8005530 <HAL_DMA_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_UART_MspInit+0x18a>
    {
      Error_Handler();
 8003aae:	f7ff fe03 	bl	80036b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8003aec <HAL_UART_MspInit+0x1c4>)
 8003ab6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003aba:	4a0c      	ldr	r2, [pc, #48]	@ (8003aec <HAL_UART_MspInit+0x1c4>)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2105      	movs	r1, #5
 8003ac4:	2034      	movs	r0, #52	@ 0x34
 8003ac6:	f001 fc80 	bl	80053ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003aca:	2034      	movs	r0, #52	@ 0x34
 8003acc:	f001 fc97 	bl	80053fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8003ad0:	bf00      	nop
 8003ad2:	37e8      	adds	r7, #232	@ 0xe8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40004c00 	.word	0x40004c00
 8003adc:	58024400 	.word	0x58024400
 8003ae0:	58020000 	.word	0x58020000
 8003ae4:	2400109c 	.word	0x2400109c
 8003ae8:	40020070 	.word	0x40020070
 8003aec:	24001114 	.word	0x24001114
 8003af0:	40020088 	.word	0x40020088

08003af4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a10      	ldr	r2, [pc, #64]	@ (8003b44 <HAL_UART_MspDeInit+0x50>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d119      	bne.n	8003b3a <HAL_UART_MspDeInit+0x46>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8003b06:	4b10      	ldr	r3, [pc, #64]	@ (8003b48 <HAL_UART_MspDeInit+0x54>)
 8003b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8003b48 <HAL_UART_MspDeInit+0x54>)
 8003b0e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003b12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8003b16:	2103      	movs	r1, #3
 8003b18:	480c      	ldr	r0, [pc, #48]	@ (8003b4c <HAL_UART_MspDeInit+0x58>)
 8003b1a:	f004 fdf9 	bl	8008710 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b22:	4618      	mov	r0, r3
 8003b24:	f002 f860 	bl	8005be8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f002 f85a 	bl	8005be8 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8003b34:	2034      	movs	r0, #52	@ 0x34
 8003b36:	f001 fc70 	bl	800541a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }

}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40004c00 	.word	0x40004c00
 8003b48:	58024400 	.word	0x58024400
 8003b4c:	58020000 	.word	0x58020000

08003b50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b090      	sub	sp, #64	@ 0x40
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b0f      	cmp	r3, #15
 8003b5c:	d827      	bhi.n	8003bae <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	2032      	movs	r0, #50	@ 0x32
 8003b64:	f001 fc31 	bl	80053ca <HAL_NVIC_SetPriority>

     /* Enable the TIM5 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003b68:	2032      	movs	r0, #50	@ 0x32
 8003b6a:	f001 fc48 	bl	80053fe <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8003b6e:	4a29      	ldr	r2, [pc, #164]	@ (8003c14 <HAL_InitTick+0xc4>)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8003b74:	4b28      	ldr	r3, [pc, #160]	@ (8003c18 <HAL_InitTick+0xc8>)
 8003b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b7a:	4a27      	ldr	r2, [pc, #156]	@ (8003c18 <HAL_InitTick+0xc8>)
 8003b7c:	f043 0308 	orr.w	r3, r3, #8
 8003b80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b84:	4b24      	ldr	r3, [pc, #144]	@ (8003c18 <HAL_InitTick+0xc8>)
 8003b86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b92:	f107 0210 	add.w	r2, r7, #16
 8003b96:	f107 0314 	add.w	r3, r7, #20
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f007 f9db 	bl	800af58 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <HAL_InitTick+0x6a>
 8003bac:	e001      	b.n	8003bb2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e02b      	b.n	8003c0a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003bb2:	f007 f9a5 	bl	800af00 <HAL_RCC_GetPCLK1Freq>
 8003bb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8003bb8:	e004      	b.n	8003bc4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003bba:	f007 f9a1 	bl	800af00 <HAL_RCC_GetPCLK1Freq>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bc6:	4a15      	ldr	r2, [pc, #84]	@ (8003c1c <HAL_InitTick+0xcc>)
 8003bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bcc:	0c9b      	lsrs	r3, r3, #18
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8003bd2:	4b13      	ldr	r3, [pc, #76]	@ (8003c20 <HAL_InitTick+0xd0>)
 8003bd4:	4a13      	ldr	r2, [pc, #76]	@ (8003c24 <HAL_InitTick+0xd4>)
 8003bd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8003bd8:	4b11      	ldr	r3, [pc, #68]	@ (8003c20 <HAL_InitTick+0xd0>)
 8003bda:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003bde:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8003be0:	4a0f      	ldr	r2, [pc, #60]	@ (8003c20 <HAL_InitTick+0xd0>)
 8003be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8003be6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c20 <HAL_InitTick+0xd0>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bec:	4b0c      	ldr	r3, [pc, #48]	@ (8003c20 <HAL_InitTick+0xd0>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8003bf2:	480b      	ldr	r0, [pc, #44]	@ (8003c20 <HAL_InitTick+0xd0>)
 8003bf4:	f009 fed4 	bl	800d9a0 <HAL_TIM_Base_Init>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d104      	bne.n	8003c08 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8003bfe:	4808      	ldr	r0, [pc, #32]	@ (8003c20 <HAL_InitTick+0xd0>)
 8003c00:	f009 ff96 	bl	800db30 <HAL_TIM_Base_Start_IT>
 8003c04:	4603      	mov	r3, r0
 8003c06:	e000      	b.n	8003c0a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3740      	adds	r7, #64	@ 0x40
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	240000bc 	.word	0x240000bc
 8003c18:	58024400 	.word	0x58024400
 8003c1c:	431bde83 	.word	0x431bde83
 8003c20:	240018e4 	.word	0x240018e4
 8003c24:	40000c00 	.word	0x40000c00

08003c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c2c:	bf00      	nop
 8003c2e:	e7fd      	b.n	8003c2c <NMI_Handler+0x4>

08003c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c34:	bf00      	nop
 8003c36:	e7fd      	b.n	8003c34 <HardFault_Handler+0x4>

08003c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c3c:	bf00      	nop
 8003c3e:	e7fd      	b.n	8003c3c <MemManage_Handler+0x4>

08003c40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c44:	bf00      	nop
 8003c46:	e7fd      	b.n	8003c44 <BusFault_Handler+0x4>

08003c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c4c:	bf00      	nop
 8003c4e:	e7fd      	b.n	8003c4c <UsageFault_Handler+0x4>

08003c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003c64:	4802      	ldr	r0, [pc, #8]	@ (8003c70 <DMA1_Stream4_IRQHandler+0x10>)
 8003c66:	f002 fed9 	bl	8006a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	2400109c 	.word	0x2400109c

08003c74 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003c78:	4802      	ldr	r0, [pc, #8]	@ (8003c84 <DMA1_Stream5_IRQHandler+0x10>)
 8003c7a:	f002 fecf 	bl	8006a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	24001114 	.word	0x24001114

08003c88 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003c8c:	4802      	ldr	r0, [pc, #8]	@ (8003c98 <TIM5_IRQHandler+0x10>)
 8003c8e:	f009 ffc7 	bl	800dc20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	240018e4 	.word	0x240018e4

08003c9c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003ca0:	4802      	ldr	r0, [pc, #8]	@ (8003cac <UART4_IRQHandler+0x10>)
 8003ca2:	f00a feb3 	bl	800ea0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	24001008 	.word	0x24001008

08003cb0 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003cb4:	4802      	ldr	r0, [pc, #8]	@ (8003cc0 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8003cb6:	f004 ffc1 	bl	8008c3c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	2400118c 	.word	0x2400118c

08003cc4 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003cc8:	4802      	ldr	r0, [pc, #8]	@ (8003cd4 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8003cca:	f004 ffb7 	bl	8008c3c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8003cce:	bf00      	nop
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	2400118c 	.word	0x2400118c

08003cd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003cdc:	4802      	ldr	r0, [pc, #8]	@ (8003ce8 <OTG_FS_IRQHandler+0x10>)
 8003cde:	f004 ffad 	bl	8008c3c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	24028768 	.word	0x24028768

08003cec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	e00a      	b.n	8003d14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003cfe:	f3af 8000 	nop.w
 8003d02:	4601      	mov	r1, r0
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	60ba      	str	r2, [r7, #8]
 8003d0a:	b2ca      	uxtb	r2, r1
 8003d0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	3301      	adds	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	dbf0      	blt.n	8003cfe <_read+0x12>
  }

  return len;
 8003d1c:	687b      	ldr	r3, [r7, #4]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b086      	sub	sp, #24
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e009      	b.n	8003d4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	60ba      	str	r2, [r7, #8]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	dbf1      	blt.n	8003d38 <_write+0x12>
  }
  return len;
 8003d54:	687b      	ldr	r3, [r7, #4]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <_close>:

int _close(int file)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d86:	605a      	str	r2, [r3, #4]
  return 0;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <_isatty>:

int _isatty(int file)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d9e:	2301      	movs	r3, #1
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dd0:	4a14      	ldr	r2, [pc, #80]	@ (8003e24 <_sbrk+0x5c>)
 8003dd2:	4b15      	ldr	r3, [pc, #84]	@ (8003e28 <_sbrk+0x60>)
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ddc:	4b13      	ldr	r3, [pc, #76]	@ (8003e2c <_sbrk+0x64>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003de4:	4b11      	ldr	r3, [pc, #68]	@ (8003e2c <_sbrk+0x64>)
 8003de6:	4a12      	ldr	r2, [pc, #72]	@ (8003e30 <_sbrk+0x68>)
 8003de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dea:	4b10      	ldr	r3, [pc, #64]	@ (8003e2c <_sbrk+0x64>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4413      	add	r3, r2
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d207      	bcs.n	8003e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003df8:	f014 fe44 	bl	8018a84 <__errno>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	220c      	movs	r2, #12
 8003e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e02:	f04f 33ff 	mov.w	r3, #4294967295
 8003e06:	e009      	b.n	8003e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e08:	4b08      	ldr	r3, [pc, #32]	@ (8003e2c <_sbrk+0x64>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e0e:	4b07      	ldr	r3, [pc, #28]	@ (8003e2c <_sbrk+0x64>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4413      	add	r3, r2
 8003e16:	4a05      	ldr	r2, [pc, #20]	@ (8003e2c <_sbrk+0x64>)
 8003e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	24060000 	.word	0x24060000
 8003e28:	00000400 	.word	0x00000400
 8003e2c:	24001930 	.word	0x24001930
 8003e30:	24028fb8 	.word	0x24028fb8

08003e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e38:	4b37      	ldr	r3, [pc, #220]	@ (8003f18 <SystemInit+0xe4>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3e:	4a36      	ldr	r2, [pc, #216]	@ (8003f18 <SystemInit+0xe4>)
 8003e40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e48:	4b34      	ldr	r3, [pc, #208]	@ (8003f1c <SystemInit+0xe8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	2b06      	cmp	r3, #6
 8003e52:	d807      	bhi.n	8003e64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e54:	4b31      	ldr	r3, [pc, #196]	@ (8003f1c <SystemInit+0xe8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f023 030f 	bic.w	r3, r3, #15
 8003e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8003f1c <SystemInit+0xe8>)
 8003e5e:	f043 0307 	orr.w	r3, r3, #7
 8003e62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003e64:	4b2e      	ldr	r3, [pc, #184]	@ (8003f20 <SystemInit+0xec>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a2d      	ldr	r2, [pc, #180]	@ (8003f20 <SystemInit+0xec>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e70:	4b2b      	ldr	r3, [pc, #172]	@ (8003f20 <SystemInit+0xec>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e76:	4b2a      	ldr	r3, [pc, #168]	@ (8003f20 <SystemInit+0xec>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4929      	ldr	r1, [pc, #164]	@ (8003f20 <SystemInit+0xec>)
 8003e7c:	4b29      	ldr	r3, [pc, #164]	@ (8003f24 <SystemInit+0xf0>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e82:	4b26      	ldr	r3, [pc, #152]	@ (8003f1c <SystemInit+0xe8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d007      	beq.n	8003e9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e8e:	4b23      	ldr	r3, [pc, #140]	@ (8003f1c <SystemInit+0xe8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 030f 	bic.w	r3, r3, #15
 8003e96:	4a21      	ldr	r2, [pc, #132]	@ (8003f1c <SystemInit+0xe8>)
 8003e98:	f043 0307 	orr.w	r3, r3, #7
 8003e9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003e9e:	4b20      	ldr	r3, [pc, #128]	@ (8003f20 <SystemInit+0xec>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f20 <SystemInit+0xec>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8003f20 <SystemInit+0xec>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f20 <SystemInit+0xec>)
 8003eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f28 <SystemInit+0xf4>)
 8003eb4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f20 <SystemInit+0xec>)
 8003eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f2c <SystemInit+0xf8>)
 8003eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003ebc:	4b18      	ldr	r3, [pc, #96]	@ (8003f20 <SystemInit+0xec>)
 8003ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8003f30 <SystemInit+0xfc>)
 8003ec0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003ec2:	4b17      	ldr	r3, [pc, #92]	@ (8003f20 <SystemInit+0xec>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003ec8:	4b15      	ldr	r3, [pc, #84]	@ (8003f20 <SystemInit+0xec>)
 8003eca:	4a19      	ldr	r2, [pc, #100]	@ (8003f30 <SystemInit+0xfc>)
 8003ecc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003ece:	4b14      	ldr	r3, [pc, #80]	@ (8003f20 <SystemInit+0xec>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003ed4:	4b12      	ldr	r3, [pc, #72]	@ (8003f20 <SystemInit+0xec>)
 8003ed6:	4a16      	ldr	r2, [pc, #88]	@ (8003f30 <SystemInit+0xfc>)
 8003ed8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003eda:	4b11      	ldr	r3, [pc, #68]	@ (8003f20 <SystemInit+0xec>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f20 <SystemInit+0xec>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a0e      	ldr	r2, [pc, #56]	@ (8003f20 <SystemInit+0xec>)
 8003ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003eec:	4b0c      	ldr	r3, [pc, #48]	@ (8003f20 <SystemInit+0xec>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003ef2:	4b10      	ldr	r3, [pc, #64]	@ (8003f34 <SystemInit+0x100>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b10      	ldr	r3, [pc, #64]	@ (8003f38 <SystemInit+0x104>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003efe:	d202      	bcs.n	8003f06 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003f00:	4b0e      	ldr	r3, [pc, #56]	@ (8003f3c <SystemInit+0x108>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003f06:	4b0e      	ldr	r3, [pc, #56]	@ (8003f40 <SystemInit+0x10c>)
 8003f08:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003f0c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003f0e:	bf00      	nop
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	e000ed00 	.word	0xe000ed00
 8003f1c:	52002000 	.word	0x52002000
 8003f20:	58024400 	.word	0x58024400
 8003f24:	eaf6ed7f 	.word	0xeaf6ed7f
 8003f28:	02020200 	.word	0x02020200
 8003f2c:	01ff0000 	.word	0x01ff0000
 8003f30:	01010280 	.word	0x01010280
 8003f34:	5c001000 	.word	0x5c001000
 8003f38:	ffff0000 	.word	0xffff0000
 8003f3c:	51008108 	.word	0x51008108
 8003f40:	52004000 	.word	0x52004000

08003f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003f44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f48:	f7ff ff74 	bl	8003e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f4c:	480c      	ldr	r0, [pc, #48]	@ (8003f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f4e:	490d      	ldr	r1, [pc, #52]	@ (8003f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f50:	4a0d      	ldr	r2, [pc, #52]	@ (8003f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f54:	e002      	b.n	8003f5c <LoopCopyDataInit>

08003f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f5a:	3304      	adds	r3, #4

08003f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f60:	d3f9      	bcc.n	8003f56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f62:	4a0a      	ldr	r2, [pc, #40]	@ (8003f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f64:	4c0a      	ldr	r4, [pc, #40]	@ (8003f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f68:	e001      	b.n	8003f6e <LoopFillZerobss>

08003f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f6c:	3204      	adds	r2, #4

08003f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f70:	d3fb      	bcc.n	8003f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f72:	f014 fd8d 	bl	8018a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f76:	f7fd fc3b 	bl	80017f0 <main>
  bx  lr
 8003f7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f7c:	24060000 	.word	0x24060000
  ldr r0, =_sdata
 8003f80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003f84:	24000220 	.word	0x24000220
  ldr r2, =_sidata
 8003f88:	0801a388 	.word	0x0801a388
  ldr r2, =_sbss
 8003f8c:	24000220 	.word	0x24000220
  ldr r4, =_ebss
 8003f90:	24028fb8 	.word	0x24028fb8

08003f94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f94:	e7fe      	b.n	8003f94 <ADC3_IRQHandler>
	...

08003f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f9e:	2003      	movs	r0, #3
 8003fa0:	f001 fa08 	bl	80053b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fa4:	f006 fe02 	bl	800abac <HAL_RCC_GetSysClockFreq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b15      	ldr	r3, [pc, #84]	@ (8004000 <HAL_Init+0x68>)
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	4913      	ldr	r1, [pc, #76]	@ (8004004 <HAL_Init+0x6c>)
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8004000 <HAL_Init+0x68>)
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	4a0e      	ldr	r2, [pc, #56]	@ (8004004 <HAL_Init+0x6c>)
 8003fcc:	5cd3      	ldrb	r3, [r2, r3]
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8004008 <HAL_Init+0x70>)
 8003fda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800400c <HAL_Init+0x74>)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fe2:	200f      	movs	r0, #15
 8003fe4:	f7ff fdb4 	bl	8003b50 <HAL_InitTick>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e002      	b.n	8003ff8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ff2:	f7ff fb67 	bl	80036c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	58024400 	.word	0x58024400
 8004004:	0801a304 	.word	0x0801a304
 8004008:	240000b8 	.word	0x240000b8
 800400c:	240000b4 	.word	0x240000b4

08004010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004014:	4b06      	ldr	r3, [pc, #24]	@ (8004030 <HAL_IncTick+0x20>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	4b06      	ldr	r3, [pc, #24]	@ (8004034 <HAL_IncTick+0x24>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4413      	add	r3, r2
 8004020:	4a04      	ldr	r2, [pc, #16]	@ (8004034 <HAL_IncTick+0x24>)
 8004022:	6013      	str	r3, [r2, #0]
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	240000c0 	.word	0x240000c0
 8004034:	24001934 	.word	0x24001934

08004038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  return uwTick;
 800403c:	4b03      	ldr	r3, [pc, #12]	@ (800404c <HAL_GetTick+0x14>)
 800403e:	681b      	ldr	r3, [r3, #0]
}
 8004040:	4618      	mov	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	24001934 	.word	0x24001934

08004050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004058:	f7ff ffee 	bl	8004038 <HAL_GetTick>
 800405c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004068:	d005      	beq.n	8004076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800406a:	4b0a      	ldr	r3, [pc, #40]	@ (8004094 <HAL_Delay+0x44>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4413      	add	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004076:	bf00      	nop
 8004078:	f7ff ffde 	bl	8004038 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	429a      	cmp	r2, r3
 8004086:	d8f7      	bhi.n	8004078 <HAL_Delay+0x28>
  {
  }
}
 8004088:	bf00      	nop
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	240000c0 	.word	0x240000c0

08004098 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800409c:	4b03      	ldr	r3, [pc, #12]	@ (80040ac <HAL_GetREVID+0x14>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	0c1b      	lsrs	r3, r3, #16
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	5c001000 	.word	0x5c001000

080040b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	609a      	str	r2, [r3, #8]
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	609a      	str	r2, [r3, #8]
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3360      	adds	r3, #96	@ 0x60
 800412a:	461a      	mov	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	430b      	orrs	r3, r1
 8004146:	431a      	orrs	r2, r3
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800414c:	bf00      	nop
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	fa01 f303 	lsl.w	r3, r1, r3
 8004178:	431a      	orrs	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	611a      	str	r2, [r3, #16]
}
 800417e:	bf00      	nop
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800418a:	b480      	push	{r7}
 800418c:	b087      	sub	sp, #28
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3360      	adds	r3, #96	@ 0x60
 800419a:	461a      	mov	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	601a      	str	r2, [r3, #0]
  }
}
 80041b4:	bf00      	nop
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3330      	adds	r3, #48	@ 0x30
 80041d0:	461a      	mov	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	0a1b      	lsrs	r3, r3, #8
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	f003 030c 	and.w	r3, r3, #12
 80041dc:	4413      	add	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	211f      	movs	r1, #31
 80041ec:	fa01 f303 	lsl.w	r3, r1, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	401a      	ands	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	0e9b      	lsrs	r3, r3, #26
 80041f8:	f003 011f 	and.w	r1, r3, #31
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	fa01 f303 	lsl.w	r3, r1, r3
 8004206:	431a      	orrs	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3314      	adds	r3, #20
 8004228:	461a      	mov	r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	0e5b      	lsrs	r3, r3, #25
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	4413      	add	r3, r2
 8004236:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	0d1b      	lsrs	r3, r3, #20
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2107      	movs	r1, #7
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	401a      	ands	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	0d1b      	lsrs	r3, r3, #20
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	fa01 f303 	lsl.w	r3, r1, r3
 800425c:	431a      	orrs	r2, r3
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004288:	43db      	mvns	r3, r3
 800428a:	401a      	ands	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f003 0318 	and.w	r3, r3, #24
 8004292:	4908      	ldr	r1, [pc, #32]	@ (80042b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004294:	40d9      	lsrs	r1, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	400b      	ands	r3, r1
 800429a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800429e:	431a      	orrs	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	000fffff 	.word	0x000fffff

080042b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	4b04      	ldr	r3, [pc, #16]	@ (80042d8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6093      	str	r3, [r2, #8]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	5fffffc0 	.word	0x5fffffc0

080042dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042f0:	d101      	bne.n	80042f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	4b05      	ldr	r3, [pc, #20]	@ (8004328 <LL_ADC_EnableInternalRegulator+0x24>)
 8004312:	4013      	ands	r3, r2
 8004314:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	6fffffc0 	.word	0x6fffffc0

0800432c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800433c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004340:	d101      	bne.n	8004346 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <LL_ADC_IsEnabled+0x18>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <LL_ADC_IsEnabled+0x1a>
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b04      	cmp	r3, #4
 800438c:	d101      	bne.n	8004392 <LL_ADC_REG_IsConversionOngoing+0x18>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d101      	bne.n	80043b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043c8:	b590      	push	{r4, r7, lr}
 80043ca:	b089      	sub	sp, #36	@ 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e18f      	b.n	8004702 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff f985 	bl	8003700 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ff67 	bl	80042dc <LL_ADC_IsDeepPowerDownEnabled>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff ff4d 	bl	80042b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff ff82 	bl	800432c <LL_ADC_IsInternalRegulatorEnabled>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d114      	bne.n	8004458 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff ff66 	bl	8004304 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004438:	4b87      	ldr	r3, [pc, #540]	@ (8004658 <HAL_ADC_Init+0x290>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	099b      	lsrs	r3, r3, #6
 800443e:	4a87      	ldr	r2, [pc, #540]	@ (800465c <HAL_ADC_Init+0x294>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	099b      	lsrs	r3, r3, #6
 8004446:	3301      	adds	r3, #1
 8004448:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800444a:	e002      	b.n	8004452 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	3b01      	subs	r3, #1
 8004450:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1f9      	bne.n	800444c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff ff65 	bl	800432c <LL_ADC_IsInternalRegulatorEnabled>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10d      	bne.n	8004484 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800446c:	f043 0210 	orr.w	r2, r3, #16
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004478:	f043 0201 	orr.w	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff ff76 	bl	800437a <LL_ADC_REG_IsConversionOngoing>
 800448e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	2b00      	cmp	r3, #0
 800449a:	f040 8129 	bne.w	80046f0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f040 8125 	bne.w	80046f0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044aa:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80044ae:	f043 0202 	orr.w	r2, r3, #2
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff ff4a 	bl	8004354 <LL_ADC_IsEnabled>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d136      	bne.n	8004534 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a65      	ldr	r2, [pc, #404]	@ (8004660 <HAL_ADC_Init+0x298>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d004      	beq.n	80044da <HAL_ADC_Init+0x112>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a63      	ldr	r2, [pc, #396]	@ (8004664 <HAL_ADC_Init+0x29c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d10e      	bne.n	80044f8 <HAL_ADC_Init+0x130>
 80044da:	4861      	ldr	r0, [pc, #388]	@ (8004660 <HAL_ADC_Init+0x298>)
 80044dc:	f7ff ff3a 	bl	8004354 <LL_ADC_IsEnabled>
 80044e0:	4604      	mov	r4, r0
 80044e2:	4860      	ldr	r0, [pc, #384]	@ (8004664 <HAL_ADC_Init+0x29c>)
 80044e4:	f7ff ff36 	bl	8004354 <LL_ADC_IsEnabled>
 80044e8:	4603      	mov	r3, r0
 80044ea:	4323      	orrs	r3, r4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bf0c      	ite	eq
 80044f0:	2301      	moveq	r3, #1
 80044f2:	2300      	movne	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	e008      	b.n	800450a <HAL_ADC_Init+0x142>
 80044f8:	485b      	ldr	r0, [pc, #364]	@ (8004668 <HAL_ADC_Init+0x2a0>)
 80044fa:	f7ff ff2b 	bl	8004354 <LL_ADC_IsEnabled>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d012      	beq.n	8004534 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a53      	ldr	r2, [pc, #332]	@ (8004660 <HAL_ADC_Init+0x298>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_ADC_Init+0x15a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a51      	ldr	r2, [pc, #324]	@ (8004664 <HAL_ADC_Init+0x29c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d101      	bne.n	8004526 <HAL_ADC_Init+0x15e>
 8004522:	4a52      	ldr	r2, [pc, #328]	@ (800466c <HAL_ADC_Init+0x2a4>)
 8004524:	e000      	b.n	8004528 <HAL_ADC_Init+0x160>
 8004526:	4a52      	ldr	r2, [pc, #328]	@ (8004670 <HAL_ADC_Init+0x2a8>)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	4619      	mov	r1, r3
 800452e:	4610      	mov	r0, r2
 8004530:	f7ff fdbe 	bl	80040b0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004534:	f7ff fdb0 	bl	8004098 <HAL_GetREVID>
 8004538:	4603      	mov	r3, r0
 800453a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800453e:	4293      	cmp	r3, r2
 8004540:	d914      	bls.n	800456c <HAL_ADC_Init+0x1a4>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b10      	cmp	r3, #16
 8004548:	d110      	bne.n	800456c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	7d5b      	ldrb	r3, [r3, #21]
 800454e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004554:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800455a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	7f1b      	ldrb	r3, [r3, #28]
 8004560:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004562:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004564:	f043 030c 	orr.w	r3, r3, #12
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	e00d      	b.n	8004588 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	7d5b      	ldrb	r3, [r3, #21]
 8004570:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004576:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800457c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	7f1b      	ldrb	r3, [r3, #28]
 8004582:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	7f1b      	ldrb	r3, [r3, #28]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d106      	bne.n	800459e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	3b01      	subs	r3, #1
 8004596:	045b      	lsls	r3, r3, #17
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045aa:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004674 <HAL_ADC_Init+0x2ac>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	69b9      	ldr	r1, [r7, #24]
 80045ca:	430b      	orrs	r3, r1
 80045cc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff fed1 	bl	800437a <LL_ADC_REG_IsConversionOngoing>
 80045d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fede 	bl	80043a0 <LL_ADC_INJ_IsConversionOngoing>
 80045e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d15f      	bne.n	80046ac <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d15c      	bne.n	80046ac <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	7d1b      	ldrb	r3, [r3, #20]
 80045f6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	4b1c      	ldr	r3, [pc, #112]	@ (8004678 <HAL_ADC_Init+0x2b0>)
 8004608:	4013      	ands	r3, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	69b9      	ldr	r1, [r7, #24]
 8004610:	430b      	orrs	r3, r1
 8004612:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800461a:	2b01      	cmp	r3, #1
 800461c:	d130      	bne.n	8004680 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	4b14      	ldr	r3, [pc, #80]	@ (800467c <HAL_ADC_Init+0x2b4>)
 800462c:	4013      	ands	r3, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004632:	3a01      	subs	r2, #1
 8004634:	0411      	lsls	r1, r2, #16
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800463a:	4311      	orrs	r1, r2
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004640:	4311      	orrs	r1, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004646:	430a      	orrs	r2, r1
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	611a      	str	r2, [r3, #16]
 8004654:	e01c      	b.n	8004690 <HAL_ADC_Init+0x2c8>
 8004656:	bf00      	nop
 8004658:	240000b4 	.word	0x240000b4
 800465c:	053e2d63 	.word	0x053e2d63
 8004660:	40022000 	.word	0x40022000
 8004664:	40022100 	.word	0x40022100
 8004668:	58026000 	.word	0x58026000
 800466c:	40022300 	.word	0x40022300
 8004670:	58026300 	.word	0x58026300
 8004674:	fff0c003 	.word	0xfff0c003
 8004678:	ffffbffc 	.word	0xffffbffc
 800467c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0201 	bic.w	r2, r2, #1
 800468e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fb8c 	bl	8004dc4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d10c      	bne.n	80046ce <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ba:	f023 010f 	bic.w	r1, r3, #15
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	1e5a      	subs	r2, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80046cc:	e007      	b.n	80046de <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 020f 	bic.w	r2, r2, #15
 80046dc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	f043 0201 	orr.w	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80046ee:	e007      	b.n	8004700 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f4:	f043 0210 	orr.w	r2, r3, #16
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004700:	7ffb      	ldrb	r3, [r7, #31]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3724      	adds	r7, #36	@ 0x24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd90      	pop	{r4, r7, pc}
 800470a:	bf00      	nop

0800470c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800470c:	b590      	push	{r4, r7, lr}
 800470e:	b0a1      	sub	sp, #132	@ 0x84
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	4a65      	ldr	r2, [pc, #404]	@ (80048bc <HAL_ADC_ConfigChannel+0x1b0>)
 8004726:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_ADC_ConfigChannel+0x2a>
 8004732:	2302      	movs	r3, #2
 8004734:	e32e      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x688>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fe19 	bl	800437a <LL_ADC_REG_IsConversionOngoing>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	f040 8313 	bne.w	8004d76 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	db2c      	blt.n	80047b2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004760:	2b00      	cmp	r3, #0
 8004762:	d108      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x6a>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	0e9b      	lsrs	r3, r3, #26
 800476a:	f003 031f 	and.w	r3, r3, #31
 800476e:	2201      	movs	r2, #1
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	e016      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x98>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800477e:	fa93 f3a3 	rbit	r3, r3
 8004782:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004784:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004786:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004788:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800478e:	2320      	movs	r3, #32
 8004790:	e003      	b.n	800479a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004792:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004794:	fab3 f383 	clz	r3, r3
 8004798:	b2db      	uxtb	r3, r3
 800479a:	f003 031f 	and.w	r3, r3, #31
 800479e:	2201      	movs	r2, #1
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	69d1      	ldr	r1, [r2, #28]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	430b      	orrs	r3, r1
 80047b0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	6859      	ldr	r1, [r3, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	f7ff fcfe 	bl	80041c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fdd6 	bl	800437a <LL_ADC_REG_IsConversionOngoing>
 80047ce:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fde3 	bl	80043a0 <LL_ADC_INJ_IsConversionOngoing>
 80047da:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f040 80b8 	bne.w	8004954 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f040 80b4 	bne.w	8004954 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	6819      	ldr	r1, [r3, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	461a      	mov	r2, r3
 80047fa:	f7ff fd0d 	bl	8004218 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80047fe:	4b30      	ldr	r3, [pc, #192]	@ (80048c0 <HAL_ADC_ConfigChannel+0x1b4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004806:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800480a:	d10b      	bne.n	8004824 <HAL_ADC_ConfigChannel+0x118>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	089b      	lsrs	r3, r3, #2
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	e01d      	b.n	8004860 <HAL_ADC_ConfigChannel+0x154>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10b      	bne.n	800484a <HAL_ADC_ConfigChannel+0x13e>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	695a      	ldr	r2, [r3, #20]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	089b      	lsrs	r3, r3, #2
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	e00a      	b.n	8004860 <HAL_ADC_ConfigChannel+0x154>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695a      	ldr	r2, [r3, #20]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	089b      	lsrs	r3, r3, #2
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b04      	cmp	r3, #4
 8004868:	d02c      	beq.n	80048c4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6919      	ldr	r1, [r3, #16]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004878:	f7ff fc4e 	bl	8004118 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6919      	ldr	r1, [r3, #16]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	7e5b      	ldrb	r3, [r3, #25]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d102      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x186>
 800488c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004890:	e000      	b.n	8004894 <HAL_ADC_ConfigChannel+0x188>
 8004892:	2300      	movs	r3, #0
 8004894:	461a      	mov	r2, r3
 8004896:	f7ff fc78 	bl	800418a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6919      	ldr	r1, [r3, #16]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	7e1b      	ldrb	r3, [r3, #24]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d102      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x1a4>
 80048aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80048ae:	e000      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1a6>
 80048b0:	2300      	movs	r3, #0
 80048b2:	461a      	mov	r2, r3
 80048b4:	f7ff fc50 	bl	8004158 <LL_ADC_SetDataRightShift>
 80048b8:	e04c      	b.n	8004954 <HAL_ADC_ConfigChannel+0x248>
 80048ba:	bf00      	nop
 80048bc:	47ff0000 	.word	0x47ff0000
 80048c0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	069b      	lsls	r3, r3, #26
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d107      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80048e6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	069b      	lsls	r3, r3, #26
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d107      	bne.n	800490c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800490a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004912:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	069b      	lsls	r3, r3, #26
 800491c:	429a      	cmp	r2, r3
 800491e:	d107      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800492e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004936:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	069b      	lsls	r3, r3, #26
 8004940:	429a      	cmp	r2, r3
 8004942:	d107      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004952:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff fcfb 	bl	8004354 <LL_ADC_IsEnabled>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	f040 8211 	bne.w	8004d88 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	461a      	mov	r2, r3
 8004974:	f7ff fc7c 	bl	8004270 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4aa1      	ldr	r2, [pc, #644]	@ (8004c04 <HAL_ADC_ConfigChannel+0x4f8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	f040 812e 	bne.w	8004be0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10b      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x2a0>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	0e9b      	lsrs	r3, r3, #26
 800499a:	3301      	adds	r3, #1
 800499c:	f003 031f 	and.w	r3, r3, #31
 80049a0:	2b09      	cmp	r3, #9
 80049a2:	bf94      	ite	ls
 80049a4:	2301      	movls	r3, #1
 80049a6:	2300      	movhi	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e019      	b.n	80049e0 <HAL_ADC_ConfigChannel+0x2d4>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049b4:	fa93 f3a3 	rbit	r3, r3
 80049b8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80049ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80049be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80049c4:	2320      	movs	r3, #32
 80049c6:	e003      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80049c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049ca:	fab3 f383 	clz	r3, r3
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	3301      	adds	r3, #1
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	2b09      	cmp	r3, #9
 80049d8:	bf94      	ite	ls
 80049da:	2301      	movls	r3, #1
 80049dc:	2300      	movhi	r3, #0
 80049de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d079      	beq.n	8004ad8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d107      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x2f4>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	0e9b      	lsrs	r3, r3, #26
 80049f6:	3301      	adds	r3, #1
 80049f8:	069b      	lsls	r3, r3, #26
 80049fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049fe:	e015      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x320>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a08:	fa93 f3a3 	rbit	r3, r3
 8004a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a10:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004a18:	2320      	movs	r3, #32
 8004a1a:	e003      	b.n	8004a24 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004a1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a1e:	fab3 f383 	clz	r3, r3
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	3301      	adds	r3, #1
 8004a26:	069b      	lsls	r3, r3, #26
 8004a28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d109      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x340>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	0e9b      	lsrs	r3, r3, #26
 8004a3e:	3301      	adds	r3, #1
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	2101      	movs	r1, #1
 8004a46:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4a:	e017      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x370>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a54:	fa93 f3a3 	rbit	r3, r3
 8004a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a5c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004a64:	2320      	movs	r3, #32
 8004a66:	e003      	b.n	8004a70 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a6a:	fab3 f383 	clz	r3, r3
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	3301      	adds	r3, #1
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	2101      	movs	r1, #1
 8004a78:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7c:	ea42 0103 	orr.w	r1, r2, r3
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <HAL_ADC_ConfigChannel+0x396>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	0e9b      	lsrs	r3, r3, #26
 8004a92:	3301      	adds	r3, #1
 8004a94:	f003 021f 	and.w	r2, r3, #31
 8004a98:	4613      	mov	r3, r2
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	4413      	add	r3, r2
 8004a9e:	051b      	lsls	r3, r3, #20
 8004aa0:	e018      	b.n	8004ad4 <HAL_ADC_ConfigChannel+0x3c8>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aaa:	fa93 f3a3 	rbit	r3, r3
 8004aae:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004aba:	2320      	movs	r3, #32
 8004abc:	e003      	b.n	8004ac6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac0:	fab3 f383 	clz	r3, r3
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	f003 021f 	and.w	r2, r3, #31
 8004acc:	4613      	mov	r3, r2
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	4413      	add	r3, r2
 8004ad2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	e07e      	b.n	8004bd6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d107      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x3e8>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	0e9b      	lsrs	r3, r3, #26
 8004aea:	3301      	adds	r3, #1
 8004aec:	069b      	lsls	r3, r3, #26
 8004aee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004af2:	e015      	b.n	8004b20 <HAL_ADC_ConfigChannel+0x414>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afc:	fa93 f3a3 	rbit	r3, r3
 8004b00:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004b0c:	2320      	movs	r3, #32
 8004b0e:	e003      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b12:	fab3 f383 	clz	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	3301      	adds	r3, #1
 8004b1a:	069b      	lsls	r3, r3, #26
 8004b1c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d109      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x434>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	0e9b      	lsrs	r3, r3, #26
 8004b32:	3301      	adds	r3, #1
 8004b34:	f003 031f 	and.w	r3, r3, #31
 8004b38:	2101      	movs	r1, #1
 8004b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3e:	e017      	b.n	8004b70 <HAL_ADC_ConfigChannel+0x464>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	fa93 f3a3 	rbit	r3, r3
 8004b4c:	61bb      	str	r3, [r7, #24]
  return result;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004b58:	2320      	movs	r3, #32
 8004b5a:	e003      	b.n	8004b64 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	fab3 f383 	clz	r3, r3
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	3301      	adds	r3, #1
 8004b66:	f003 031f 	and.w	r3, r3, #31
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b70:	ea42 0103 	orr.w	r1, r2, r3
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10d      	bne.n	8004b9c <HAL_ADC_ConfigChannel+0x490>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	0e9b      	lsrs	r3, r3, #26
 8004b86:	3301      	adds	r3, #1
 8004b88:	f003 021f 	and.w	r2, r3, #31
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	4413      	add	r3, r2
 8004b92:	3b1e      	subs	r3, #30
 8004b94:	051b      	lsls	r3, r3, #20
 8004b96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b9a:	e01b      	b.n	8004bd4 <HAL_ADC_ConfigChannel+0x4c8>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	fa93 f3a3 	rbit	r3, r3
 8004ba8:	60fb      	str	r3, [r7, #12]
  return result;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004bb4:	2320      	movs	r3, #32
 8004bb6:	e003      	b.n	8004bc0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	fab3 f383 	clz	r3, r3
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	f003 021f 	and.w	r2, r3, #31
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	4413      	add	r3, r2
 8004bcc:	3b1e      	subs	r3, #30
 8004bce:	051b      	lsls	r3, r3, #20
 8004bd0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	6892      	ldr	r2, [r2, #8]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	f7ff fb1c 	bl	8004218 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f280 80cf 	bge.w	8004d88 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a06      	ldr	r2, [pc, #24]	@ (8004c08 <HAL_ADC_ConfigChannel+0x4fc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d004      	beq.n	8004bfe <HAL_ADC_ConfigChannel+0x4f2>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a04      	ldr	r2, [pc, #16]	@ (8004c0c <HAL_ADC_ConfigChannel+0x500>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d10a      	bne.n	8004c14 <HAL_ADC_ConfigChannel+0x508>
 8004bfe:	4b04      	ldr	r3, [pc, #16]	@ (8004c10 <HAL_ADC_ConfigChannel+0x504>)
 8004c00:	e009      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x50a>
 8004c02:	bf00      	nop
 8004c04:	47ff0000 	.word	0x47ff0000
 8004c08:	40022000 	.word	0x40022000
 8004c0c:	40022100 	.word	0x40022100
 8004c10:	40022300 	.word	0x40022300
 8004c14:	4b61      	ldr	r3, [pc, #388]	@ (8004d9c <HAL_ADC_ConfigChannel+0x690>)
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff fa70 	bl	80040fc <LL_ADC_GetCommonPathInternalCh>
 8004c1c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a5f      	ldr	r2, [pc, #380]	@ (8004da0 <HAL_ADC_ConfigChannel+0x694>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d004      	beq.n	8004c32 <HAL_ADC_ConfigChannel+0x526>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a5d      	ldr	r2, [pc, #372]	@ (8004da4 <HAL_ADC_ConfigChannel+0x698>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d10e      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x544>
 8004c32:	485b      	ldr	r0, [pc, #364]	@ (8004da0 <HAL_ADC_ConfigChannel+0x694>)
 8004c34:	f7ff fb8e 	bl	8004354 <LL_ADC_IsEnabled>
 8004c38:	4604      	mov	r4, r0
 8004c3a:	485a      	ldr	r0, [pc, #360]	@ (8004da4 <HAL_ADC_ConfigChannel+0x698>)
 8004c3c:	f7ff fb8a 	bl	8004354 <LL_ADC_IsEnabled>
 8004c40:	4603      	mov	r3, r0
 8004c42:	4323      	orrs	r3, r4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bf0c      	ite	eq
 8004c48:	2301      	moveq	r3, #1
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	e008      	b.n	8004c62 <HAL_ADC_ConfigChannel+0x556>
 8004c50:	4855      	ldr	r0, [pc, #340]	@ (8004da8 <HAL_ADC_ConfigChannel+0x69c>)
 8004c52:	f7ff fb7f 	bl	8004354 <LL_ADC_IsEnabled>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d07d      	beq.n	8004d62 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a50      	ldr	r2, [pc, #320]	@ (8004dac <HAL_ADC_ConfigChannel+0x6a0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d130      	bne.n	8004cd2 <HAL_ADC_ConfigChannel+0x5c6>
 8004c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d12b      	bne.n	8004cd2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a4a      	ldr	r2, [pc, #296]	@ (8004da8 <HAL_ADC_ConfigChannel+0x69c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	f040 8081 	bne.w	8004d88 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a45      	ldr	r2, [pc, #276]	@ (8004da0 <HAL_ADC_ConfigChannel+0x694>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d004      	beq.n	8004c9a <HAL_ADC_ConfigChannel+0x58e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a43      	ldr	r2, [pc, #268]	@ (8004da4 <HAL_ADC_ConfigChannel+0x698>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d101      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x592>
 8004c9a:	4a45      	ldr	r2, [pc, #276]	@ (8004db0 <HAL_ADC_ConfigChannel+0x6a4>)
 8004c9c:	e000      	b.n	8004ca0 <HAL_ADC_ConfigChannel+0x594>
 8004c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d9c <HAL_ADC_ConfigChannel+0x690>)
 8004ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ca2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f7ff fa14 	bl	80040d6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cae:	4b41      	ldr	r3, [pc, #260]	@ (8004db4 <HAL_ADC_ConfigChannel+0x6a8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	099b      	lsrs	r3, r3, #6
 8004cb4:	4a40      	ldr	r2, [pc, #256]	@ (8004db8 <HAL_ADC_ConfigChannel+0x6ac>)
 8004cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cba:	099b      	lsrs	r3, r3, #6
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004cc2:	e002      	b.n	8004cca <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f9      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cd0:	e05a      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a39      	ldr	r2, [pc, #228]	@ (8004dbc <HAL_ADC_ConfigChannel+0x6b0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d11e      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x60e>
 8004cdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d119      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a2f      	ldr	r2, [pc, #188]	@ (8004da8 <HAL_ADC_ConfigChannel+0x69c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d14b      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8004da0 <HAL_ADC_ConfigChannel+0x694>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d004      	beq.n	8004d04 <HAL_ADC_ConfigChannel+0x5f8>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a29      	ldr	r2, [pc, #164]	@ (8004da4 <HAL_ADC_ConfigChannel+0x698>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d101      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x5fc>
 8004d04:	4a2a      	ldr	r2, [pc, #168]	@ (8004db0 <HAL_ADC_ConfigChannel+0x6a4>)
 8004d06:	e000      	b.n	8004d0a <HAL_ADC_ConfigChannel+0x5fe>
 8004d08:	4a24      	ldr	r2, [pc, #144]	@ (8004d9c <HAL_ADC_ConfigChannel+0x690>)
 8004d0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d10:	4619      	mov	r1, r3
 8004d12:	4610      	mov	r0, r2
 8004d14:	f7ff f9df 	bl	80040d6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d18:	e036      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a28      	ldr	r2, [pc, #160]	@ (8004dc0 <HAL_ADC_ConfigChannel+0x6b4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d131      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x67c>
 8004d24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d12c      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a1d      	ldr	r2, [pc, #116]	@ (8004da8 <HAL_ADC_ConfigChannel+0x69c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d127      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a18      	ldr	r2, [pc, #96]	@ (8004da0 <HAL_ADC_ConfigChannel+0x694>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <HAL_ADC_ConfigChannel+0x640>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a17      	ldr	r2, [pc, #92]	@ (8004da4 <HAL_ADC_ConfigChannel+0x698>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d101      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0x644>
 8004d4c:	4a18      	ldr	r2, [pc, #96]	@ (8004db0 <HAL_ADC_ConfigChannel+0x6a4>)
 8004d4e:	e000      	b.n	8004d52 <HAL_ADC_ConfigChannel+0x646>
 8004d50:	4a12      	ldr	r2, [pc, #72]	@ (8004d9c <HAL_ADC_ConfigChannel+0x690>)
 8004d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f7ff f9bb 	bl	80040d6 <LL_ADC_SetCommonPathInternalCh>
 8004d60:	e012      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d66:	f043 0220 	orr.w	r2, r3, #32
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004d74:	e008      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d7a:	f043 0220 	orr.w	r2, r3, #32
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d90:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3784      	adds	r7, #132	@ 0x84
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd90      	pop	{r4, r7, pc}
 8004d9c:	58026300 	.word	0x58026300
 8004da0:	40022000 	.word	0x40022000
 8004da4:	40022100 	.word	0x40022100
 8004da8:	58026000 	.word	0x58026000
 8004dac:	cb840000 	.word	0xcb840000
 8004db0:	40022300 	.word	0x40022300
 8004db4:	240000b4 	.word	0x240000b4
 8004db8:	053e2d63 	.word	0x053e2d63
 8004dbc:	c7520000 	.word	0xc7520000
 8004dc0:	cfb80000 	.word	0xcfb80000

08004dc4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a7a      	ldr	r2, [pc, #488]	@ (8004fbc <ADC_ConfigureBoostMode+0x1f8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d004      	beq.n	8004de0 <ADC_ConfigureBoostMode+0x1c>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a79      	ldr	r2, [pc, #484]	@ (8004fc0 <ADC_ConfigureBoostMode+0x1fc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d109      	bne.n	8004df4 <ADC_ConfigureBoostMode+0x30>
 8004de0:	4b78      	ldr	r3, [pc, #480]	@ (8004fc4 <ADC_ConfigureBoostMode+0x200>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e008      	b.n	8004e06 <ADC_ConfigureBoostMode+0x42>
 8004df4:	4b74      	ldr	r3, [pc, #464]	@ (8004fc8 <ADC_ConfigureBoostMode+0x204>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	bf14      	ite	ne
 8004e00:	2301      	movne	r3, #1
 8004e02:	2300      	moveq	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01c      	beq.n	8004e44 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004e0a:	f006 f849 	bl	800aea0 <HAL_RCC_GetHCLKFreq>
 8004e0e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e18:	d010      	beq.n	8004e3c <ADC_ConfigureBoostMode+0x78>
 8004e1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e1e:	d873      	bhi.n	8004f08 <ADC_ConfigureBoostMode+0x144>
 8004e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e24:	d002      	beq.n	8004e2c <ADC_ConfigureBoostMode+0x68>
 8004e26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e2a:	d16d      	bne.n	8004f08 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	0c1b      	lsrs	r3, r3, #16
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e38:	60fb      	str	r3, [r7, #12]
        break;
 8004e3a:	e068      	b.n	8004f0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	089b      	lsrs	r3, r3, #2
 8004e40:	60fb      	str	r3, [r7, #12]
        break;
 8004e42:	e064      	b.n	8004f0e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004e44:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004e48:	f04f 0100 	mov.w	r1, #0
 8004e4c:	f007 fab4 	bl	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e50:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004e5a:	d051      	beq.n	8004f00 <ADC_ConfigureBoostMode+0x13c>
 8004e5c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004e60:	d854      	bhi.n	8004f0c <ADC_ConfigureBoostMode+0x148>
 8004e62:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004e66:	d047      	beq.n	8004ef8 <ADC_ConfigureBoostMode+0x134>
 8004e68:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004e6c:	d84e      	bhi.n	8004f0c <ADC_ConfigureBoostMode+0x148>
 8004e6e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004e72:	d03d      	beq.n	8004ef0 <ADC_ConfigureBoostMode+0x12c>
 8004e74:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004e78:	d848      	bhi.n	8004f0c <ADC_ConfigureBoostMode+0x148>
 8004e7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e7e:	d033      	beq.n	8004ee8 <ADC_ConfigureBoostMode+0x124>
 8004e80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e84:	d842      	bhi.n	8004f0c <ADC_ConfigureBoostMode+0x148>
 8004e86:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004e8a:	d029      	beq.n	8004ee0 <ADC_ConfigureBoostMode+0x11c>
 8004e8c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004e90:	d83c      	bhi.n	8004f0c <ADC_ConfigureBoostMode+0x148>
 8004e92:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004e96:	d01a      	beq.n	8004ece <ADC_ConfigureBoostMode+0x10a>
 8004e98:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004e9c:	d836      	bhi.n	8004f0c <ADC_ConfigureBoostMode+0x148>
 8004e9e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004ea2:	d014      	beq.n	8004ece <ADC_ConfigureBoostMode+0x10a>
 8004ea4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004ea8:	d830      	bhi.n	8004f0c <ADC_ConfigureBoostMode+0x148>
 8004eaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004eae:	d00e      	beq.n	8004ece <ADC_ConfigureBoostMode+0x10a>
 8004eb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004eb4:	d82a      	bhi.n	8004f0c <ADC_ConfigureBoostMode+0x148>
 8004eb6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004eba:	d008      	beq.n	8004ece <ADC_ConfigureBoostMode+0x10a>
 8004ebc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ec0:	d824      	bhi.n	8004f0c <ADC_ConfigureBoostMode+0x148>
 8004ec2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ec6:	d002      	beq.n	8004ece <ADC_ConfigureBoostMode+0x10a>
 8004ec8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ecc:	d11e      	bne.n	8004f0c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	0c9b      	lsrs	r3, r3, #18
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004edc:	60fb      	str	r3, [r7, #12]
        break;
 8004ede:	e016      	b.n	8004f0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	091b      	lsrs	r3, r3, #4
 8004ee4:	60fb      	str	r3, [r7, #12]
        break;
 8004ee6:	e012      	b.n	8004f0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	60fb      	str	r3, [r7, #12]
        break;
 8004eee:	e00e      	b.n	8004f0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	099b      	lsrs	r3, r3, #6
 8004ef4:	60fb      	str	r3, [r7, #12]
        break;
 8004ef6:	e00a      	b.n	8004f0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	09db      	lsrs	r3, r3, #7
 8004efc:	60fb      	str	r3, [r7, #12]
        break;
 8004efe:	e006      	b.n	8004f0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	0a1b      	lsrs	r3, r3, #8
 8004f04:	60fb      	str	r3, [r7, #12]
        break;
 8004f06:	e002      	b.n	8004f0e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004f08:	bf00      	nop
 8004f0a:	e000      	b.n	8004f0e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004f0c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004f0e:	f7ff f8c3 	bl	8004098 <HAL_GetREVID>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d815      	bhi.n	8004f48 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a2b      	ldr	r2, [pc, #172]	@ (8004fcc <ADC_ConfigureBoostMode+0x208>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d908      	bls.n	8004f36 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f32:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f34:	e03e      	b.n	8004fb4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f44:	609a      	str	r2, [r3, #8]
}
 8004f46:	e035      	b.n	8004fb4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	085b      	lsrs	r3, r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd0 <ADC_ConfigureBoostMode+0x20c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d808      	bhi.n	8004f68 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f64:	609a      	str	r2, [r3, #8]
}
 8004f66:	e025      	b.n	8004fb4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd4 <ADC_ConfigureBoostMode+0x210>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d80a      	bhi.n	8004f86 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f82:	609a      	str	r2, [r3, #8]
}
 8004f84:	e016      	b.n	8004fb4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4a13      	ldr	r2, [pc, #76]	@ (8004fd8 <ADC_ConfigureBoostMode+0x214>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d80a      	bhi.n	8004fa4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fa0:	609a      	str	r2, [r3, #8]
}
 8004fa2:	e007      	b.n	8004fb4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004fb2:	609a      	str	r2, [r3, #8]
}
 8004fb4:	bf00      	nop
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40022000 	.word	0x40022000
 8004fc0:	40022100 	.word	0x40022100
 8004fc4:	40022300 	.word	0x40022300
 8004fc8:	58026300 	.word	0x58026300
 8004fcc:	01312d00 	.word	0x01312d00
 8004fd0:	005f5e10 	.word	0x005f5e10
 8004fd4:	00bebc20 	.word	0x00bebc20
 8004fd8:	017d7840 	.word	0x017d7840

08004fdc <LL_ADC_IsEnabled>:
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <LL_ADC_IsEnabled+0x18>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <LL_ADC_IsEnabled+0x1a>
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <LL_ADC_REG_IsConversionOngoing>:
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b04      	cmp	r3, #4
 8005014:	d101      	bne.n	800501a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b09f      	sub	sp, #124	@ 0x7c
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005042:	2302      	movs	r3, #2
 8005044:	e0be      	b.n	80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800504e:	2300      	movs	r3, #0
 8005050:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005052:	2300      	movs	r3, #0
 8005054:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a5c      	ldr	r2, [pc, #368]	@ (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d102      	bne.n	8005066 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005060:	4b5b      	ldr	r3, [pc, #364]	@ (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005062:	60bb      	str	r3, [r7, #8]
 8005064:	e001      	b.n	800506a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005066:	2300      	movs	r3, #0
 8005068:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10b      	bne.n	8005088 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005074:	f043 0220 	orr.w	r2, r3, #32
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e09d      	b.n	80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff ffb9 	bl	8005002 <LL_ADC_REG_IsConversionOngoing>
 8005090:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff ffb3 	bl	8005002 <LL_ADC_REG_IsConversionOngoing>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d17f      	bne.n	80051a2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80050a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d17c      	bne.n	80051a2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a47      	ldr	r2, [pc, #284]	@ (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a46      	ldr	r2, [pc, #280]	@ (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d101      	bne.n	80050c0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80050bc:	4b45      	ldr	r3, [pc, #276]	@ (80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050be:	e000      	b.n	80050c2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80050c0:	4b45      	ldr	r3, [pc, #276]	@ (80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050c2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d039      	beq.n	8005140 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80050cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	431a      	orrs	r2, r3
 80050da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050dc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a3a      	ldr	r2, [pc, #232]	@ (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a38      	ldr	r2, [pc, #224]	@ (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d10e      	bne.n	8005110 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80050f2:	4836      	ldr	r0, [pc, #216]	@ (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80050f4:	f7ff ff72 	bl	8004fdc <LL_ADC_IsEnabled>
 80050f8:	4604      	mov	r4, r0
 80050fa:	4835      	ldr	r0, [pc, #212]	@ (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80050fc:	f7ff ff6e 	bl	8004fdc <LL_ADC_IsEnabled>
 8005100:	4603      	mov	r3, r0
 8005102:	4323      	orrs	r3, r4
 8005104:	2b00      	cmp	r3, #0
 8005106:	bf0c      	ite	eq
 8005108:	2301      	moveq	r3, #1
 800510a:	2300      	movne	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	e008      	b.n	8005122 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005110:	4832      	ldr	r0, [pc, #200]	@ (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005112:	f7ff ff63 	bl	8004fdc <LL_ADC_IsEnabled>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	bf0c      	ite	eq
 800511c:	2301      	moveq	r3, #1
 800511e:	2300      	movne	r3, #0
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d047      	beq.n	80051b6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	4b2d      	ldr	r3, [pc, #180]	@ (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800512c:	4013      	ands	r3, r2
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	6811      	ldr	r1, [r2, #0]
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	6892      	ldr	r2, [r2, #8]
 8005136:	430a      	orrs	r2, r1
 8005138:	431a      	orrs	r2, r3
 800513a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800513c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800513e:	e03a      	b.n	80051b6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005140:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800514a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1e      	ldr	r2, [pc, #120]	@ (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a1d      	ldr	r2, [pc, #116]	@ (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d10e      	bne.n	800517e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005160:	481a      	ldr	r0, [pc, #104]	@ (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005162:	f7ff ff3b 	bl	8004fdc <LL_ADC_IsEnabled>
 8005166:	4604      	mov	r4, r0
 8005168:	4819      	ldr	r0, [pc, #100]	@ (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800516a:	f7ff ff37 	bl	8004fdc <LL_ADC_IsEnabled>
 800516e:	4603      	mov	r3, r0
 8005170:	4323      	orrs	r3, r4
 8005172:	2b00      	cmp	r3, #0
 8005174:	bf0c      	ite	eq
 8005176:	2301      	moveq	r3, #1
 8005178:	2300      	movne	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	e008      	b.n	8005190 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800517e:	4817      	ldr	r0, [pc, #92]	@ (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005180:	f7ff ff2c 	bl	8004fdc <LL_ADC_IsEnabled>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	bf0c      	ite	eq
 800518a:	2301      	moveq	r3, #1
 800518c:	2300      	movne	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d010      	beq.n	80051b6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	4b11      	ldr	r3, [pc, #68]	@ (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800519a:	4013      	ands	r3, r2
 800519c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800519e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051a0:	e009      	b.n	80051b6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a6:	f043 0220 	orr.w	r2, r3, #32
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80051b4:	e000      	b.n	80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051b6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80051c0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	377c      	adds	r7, #124	@ 0x7c
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd90      	pop	{r4, r7, pc}
 80051cc:	40022000 	.word	0x40022000
 80051d0:	40022100 	.word	0x40022100
 80051d4:	40022300 	.word	0x40022300
 80051d8:	58026300 	.word	0x58026300
 80051dc:	58026000 	.word	0x58026000
 80051e0:	fffff0e0 	.word	0xfffff0e0

080051e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005224 <__NVIC_SetPriorityGrouping+0x40>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005200:	4013      	ands	r3, r2
 8005202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800520c:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <__NVIC_SetPriorityGrouping+0x44>)
 800520e:	4313      	orrs	r3, r2
 8005210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005212:	4a04      	ldr	r2, [pc, #16]	@ (8005224 <__NVIC_SetPriorityGrouping+0x40>)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	60d3      	str	r3, [r2, #12]
}
 8005218:	bf00      	nop
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	e000ed00 	.word	0xe000ed00
 8005228:	05fa0000 	.word	0x05fa0000

0800522c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005230:	4b04      	ldr	r3, [pc, #16]	@ (8005244 <__NVIC_GetPriorityGrouping+0x18>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	0a1b      	lsrs	r3, r3, #8
 8005236:	f003 0307 	and.w	r3, r3, #7
}
 800523a:	4618      	mov	r0, r3
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	e000ed00 	.word	0xe000ed00

08005248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	4603      	mov	r3, r0
 8005250:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005256:	2b00      	cmp	r3, #0
 8005258:	db0b      	blt.n	8005272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	f003 021f 	and.w	r2, r3, #31
 8005260:	4907      	ldr	r1, [pc, #28]	@ (8005280 <__NVIC_EnableIRQ+0x38>)
 8005262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	2001      	movs	r0, #1
 800526a:	fa00 f202 	lsl.w	r2, r0, r2
 800526e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	e000e100 	.word	0xe000e100

08005284 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	4603      	mov	r3, r0
 800528c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800528e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005292:	2b00      	cmp	r3, #0
 8005294:	db12      	blt.n	80052bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	f003 021f 	and.w	r2, r3, #31
 800529c:	490a      	ldr	r1, [pc, #40]	@ (80052c8 <__NVIC_DisableIRQ+0x44>)
 800529e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	2001      	movs	r0, #1
 80052a6:	fa00 f202 	lsl.w	r2, r0, r2
 80052aa:	3320      	adds	r3, #32
 80052ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80052b0:	f3bf 8f4f 	dsb	sy
}
 80052b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80052b6:	f3bf 8f6f 	isb	sy
}
 80052ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	e000e100 	.word	0xe000e100

080052cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	6039      	str	r1, [r7, #0]
 80052d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	db0a      	blt.n	80052f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	490c      	ldr	r1, [pc, #48]	@ (8005318 <__NVIC_SetPriority+0x4c>)
 80052e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ea:	0112      	lsls	r2, r2, #4
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	440b      	add	r3, r1
 80052f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052f4:	e00a      	b.n	800530c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	4908      	ldr	r1, [pc, #32]	@ (800531c <__NVIC_SetPriority+0x50>)
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	3b04      	subs	r3, #4
 8005304:	0112      	lsls	r2, r2, #4
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	440b      	add	r3, r1
 800530a:	761a      	strb	r2, [r3, #24]
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	e000e100 	.word	0xe000e100
 800531c:	e000ed00 	.word	0xe000ed00

08005320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005320:	b480      	push	{r7}
 8005322:	b089      	sub	sp, #36	@ 0x24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	f1c3 0307 	rsb	r3, r3, #7
 800533a:	2b04      	cmp	r3, #4
 800533c:	bf28      	it	cs
 800533e:	2304      	movcs	r3, #4
 8005340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	3304      	adds	r3, #4
 8005346:	2b06      	cmp	r3, #6
 8005348:	d902      	bls.n	8005350 <NVIC_EncodePriority+0x30>
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	3b03      	subs	r3, #3
 800534e:	e000      	b.n	8005352 <NVIC_EncodePriority+0x32>
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005354:	f04f 32ff 	mov.w	r2, #4294967295
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	43da      	mvns	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	401a      	ands	r2, r3
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005368:	f04f 31ff 	mov.w	r1, #4294967295
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	fa01 f303 	lsl.w	r3, r1, r3
 8005372:	43d9      	mvns	r1, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005378:	4313      	orrs	r3, r2
         );
}
 800537a:	4618      	mov	r0, r3
 800537c:	3724      	adds	r7, #36	@ 0x24
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
	...

08005388 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800538c:	f3bf 8f4f 	dsb	sy
}
 8005390:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005392:	4b06      	ldr	r3, [pc, #24]	@ (80053ac <__NVIC_SystemReset+0x24>)
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800539a:	4904      	ldr	r1, [pc, #16]	@ (80053ac <__NVIC_SystemReset+0x24>)
 800539c:	4b04      	ldr	r3, [pc, #16]	@ (80053b0 <__NVIC_SystemReset+0x28>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80053a2:	f3bf 8f4f 	dsb	sy
}
 80053a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80053a8:	bf00      	nop
 80053aa:	e7fd      	b.n	80053a8 <__NVIC_SystemReset+0x20>
 80053ac:	e000ed00 	.word	0xe000ed00
 80053b0:	05fa0004 	.word	0x05fa0004

080053b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff ff11 	bl	80051e4 <__NVIC_SetPriorityGrouping>
}
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b086      	sub	sp, #24
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	4603      	mov	r3, r0
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
 80053d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053d8:	f7ff ff28 	bl	800522c <__NVIC_GetPriorityGrouping>
 80053dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	6978      	ldr	r0, [r7, #20]
 80053e4:	f7ff ff9c 	bl	8005320 <NVIC_EncodePriority>
 80053e8:	4602      	mov	r2, r0
 80053ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053ee:	4611      	mov	r1, r2
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff ff6b 	bl	80052cc <__NVIC_SetPriority>
}
 80053f6:	bf00      	nop
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	4603      	mov	r3, r0
 8005406:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005408:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff ff1b 	bl	8005248 <__NVIC_EnableIRQ>
}
 8005412:	bf00      	nop
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b082      	sub	sp, #8
 800541e:	af00      	add	r7, sp, #0
 8005420:	4603      	mov	r3, r0
 8005422:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff ff2b 	bl	8005284 <__NVIC_DisableIRQ>
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800543a:	f7ff ffa5 	bl	8005388 <__NVIC_SystemReset>
	...

08005440 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005444:	f3bf 8f5f 	dmb	sy
}
 8005448:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800544a:	4b07      	ldr	r3, [pc, #28]	@ (8005468 <HAL_MPU_Disable+0x28>)
 800544c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544e:	4a06      	ldr	r2, [pc, #24]	@ (8005468 <HAL_MPU_Disable+0x28>)
 8005450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005454:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005456:	4b05      	ldr	r3, [pc, #20]	@ (800546c <HAL_MPU_Disable+0x2c>)
 8005458:	2200      	movs	r2, #0
 800545a:	605a      	str	r2, [r3, #4]
}
 800545c:	bf00      	nop
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	e000ed00 	.word	0xe000ed00
 800546c:	e000ed90 	.word	0xe000ed90

08005470 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005478:	4a0b      	ldr	r2, [pc, #44]	@ (80054a8 <HAL_MPU_Enable+0x38>)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f043 0301 	orr.w	r3, r3, #1
 8005480:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005482:	4b0a      	ldr	r3, [pc, #40]	@ (80054ac <HAL_MPU_Enable+0x3c>)
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	4a09      	ldr	r2, [pc, #36]	@ (80054ac <HAL_MPU_Enable+0x3c>)
 8005488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800548c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800548e:	f3bf 8f4f 	dsb	sy
}
 8005492:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005494:	f3bf 8f6f 	isb	sy
}
 8005498:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	e000ed90 	.word	0xe000ed90
 80054ac:	e000ed00 	.word	0xe000ed00

080054b0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	785a      	ldrb	r2, [r3, #1]
 80054bc:	4b1b      	ldr	r3, [pc, #108]	@ (800552c <HAL_MPU_ConfigRegion+0x7c>)
 80054be:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80054c0:	4b1a      	ldr	r3, [pc, #104]	@ (800552c <HAL_MPU_ConfigRegion+0x7c>)
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	4a19      	ldr	r2, [pc, #100]	@ (800552c <HAL_MPU_ConfigRegion+0x7c>)
 80054c6:	f023 0301 	bic.w	r3, r3, #1
 80054ca:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80054cc:	4a17      	ldr	r2, [pc, #92]	@ (800552c <HAL_MPU_ConfigRegion+0x7c>)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	7b1b      	ldrb	r3, [r3, #12]
 80054d8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	7adb      	ldrb	r3, [r3, #11]
 80054de:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80054e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	7a9b      	ldrb	r3, [r3, #10]
 80054e6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80054e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	7b5b      	ldrb	r3, [r3, #13]
 80054ee:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80054f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	7b9b      	ldrb	r3, [r3, #14]
 80054f6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80054f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	7bdb      	ldrb	r3, [r3, #15]
 80054fe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005500:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	7a5b      	ldrb	r3, [r3, #9]
 8005506:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005508:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	7a1b      	ldrb	r3, [r3, #8]
 800550e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005510:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	7812      	ldrb	r2, [r2, #0]
 8005516:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005518:	4a04      	ldr	r2, [pc, #16]	@ (800552c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800551a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800551c:	6113      	str	r3, [r2, #16]
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	e000ed90 	.word	0xe000ed90

08005530 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005538:	f7fe fd7e 	bl	8004038 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e316      	b.n	8005b76 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a66      	ldr	r2, [pc, #408]	@ (80056e8 <HAL_DMA_Init+0x1b8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d04a      	beq.n	80055e8 <HAL_DMA_Init+0xb8>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a65      	ldr	r2, [pc, #404]	@ (80056ec <HAL_DMA_Init+0x1bc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d045      	beq.n	80055e8 <HAL_DMA_Init+0xb8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a63      	ldr	r2, [pc, #396]	@ (80056f0 <HAL_DMA_Init+0x1c0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d040      	beq.n	80055e8 <HAL_DMA_Init+0xb8>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a62      	ldr	r2, [pc, #392]	@ (80056f4 <HAL_DMA_Init+0x1c4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d03b      	beq.n	80055e8 <HAL_DMA_Init+0xb8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a60      	ldr	r2, [pc, #384]	@ (80056f8 <HAL_DMA_Init+0x1c8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d036      	beq.n	80055e8 <HAL_DMA_Init+0xb8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a5f      	ldr	r2, [pc, #380]	@ (80056fc <HAL_DMA_Init+0x1cc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d031      	beq.n	80055e8 <HAL_DMA_Init+0xb8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a5d      	ldr	r2, [pc, #372]	@ (8005700 <HAL_DMA_Init+0x1d0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d02c      	beq.n	80055e8 <HAL_DMA_Init+0xb8>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a5c      	ldr	r2, [pc, #368]	@ (8005704 <HAL_DMA_Init+0x1d4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d027      	beq.n	80055e8 <HAL_DMA_Init+0xb8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a5a      	ldr	r2, [pc, #360]	@ (8005708 <HAL_DMA_Init+0x1d8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d022      	beq.n	80055e8 <HAL_DMA_Init+0xb8>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a59      	ldr	r2, [pc, #356]	@ (800570c <HAL_DMA_Init+0x1dc>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d01d      	beq.n	80055e8 <HAL_DMA_Init+0xb8>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a57      	ldr	r2, [pc, #348]	@ (8005710 <HAL_DMA_Init+0x1e0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d018      	beq.n	80055e8 <HAL_DMA_Init+0xb8>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a56      	ldr	r2, [pc, #344]	@ (8005714 <HAL_DMA_Init+0x1e4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d013      	beq.n	80055e8 <HAL_DMA_Init+0xb8>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a54      	ldr	r2, [pc, #336]	@ (8005718 <HAL_DMA_Init+0x1e8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00e      	beq.n	80055e8 <HAL_DMA_Init+0xb8>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a53      	ldr	r2, [pc, #332]	@ (800571c <HAL_DMA_Init+0x1ec>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d009      	beq.n	80055e8 <HAL_DMA_Init+0xb8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a51      	ldr	r2, [pc, #324]	@ (8005720 <HAL_DMA_Init+0x1f0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_DMA_Init+0xb8>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a50      	ldr	r2, [pc, #320]	@ (8005724 <HAL_DMA_Init+0x1f4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d101      	bne.n	80055ec <HAL_DMA_Init+0xbc>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e000      	b.n	80055ee <HAL_DMA_Init+0xbe>
 80055ec:	2300      	movs	r3, #0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 813b 	beq.w	800586a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a37      	ldr	r2, [pc, #220]	@ (80056e8 <HAL_DMA_Init+0x1b8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d04a      	beq.n	80056a4 <HAL_DMA_Init+0x174>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a36      	ldr	r2, [pc, #216]	@ (80056ec <HAL_DMA_Init+0x1bc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d045      	beq.n	80056a4 <HAL_DMA_Init+0x174>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a34      	ldr	r2, [pc, #208]	@ (80056f0 <HAL_DMA_Init+0x1c0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d040      	beq.n	80056a4 <HAL_DMA_Init+0x174>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a33      	ldr	r2, [pc, #204]	@ (80056f4 <HAL_DMA_Init+0x1c4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d03b      	beq.n	80056a4 <HAL_DMA_Init+0x174>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a31      	ldr	r2, [pc, #196]	@ (80056f8 <HAL_DMA_Init+0x1c8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d036      	beq.n	80056a4 <HAL_DMA_Init+0x174>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a30      	ldr	r2, [pc, #192]	@ (80056fc <HAL_DMA_Init+0x1cc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d031      	beq.n	80056a4 <HAL_DMA_Init+0x174>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a2e      	ldr	r2, [pc, #184]	@ (8005700 <HAL_DMA_Init+0x1d0>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d02c      	beq.n	80056a4 <HAL_DMA_Init+0x174>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a2d      	ldr	r2, [pc, #180]	@ (8005704 <HAL_DMA_Init+0x1d4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d027      	beq.n	80056a4 <HAL_DMA_Init+0x174>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a2b      	ldr	r2, [pc, #172]	@ (8005708 <HAL_DMA_Init+0x1d8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d022      	beq.n	80056a4 <HAL_DMA_Init+0x174>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a2a      	ldr	r2, [pc, #168]	@ (800570c <HAL_DMA_Init+0x1dc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d01d      	beq.n	80056a4 <HAL_DMA_Init+0x174>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a28      	ldr	r2, [pc, #160]	@ (8005710 <HAL_DMA_Init+0x1e0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d018      	beq.n	80056a4 <HAL_DMA_Init+0x174>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a27      	ldr	r2, [pc, #156]	@ (8005714 <HAL_DMA_Init+0x1e4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d013      	beq.n	80056a4 <HAL_DMA_Init+0x174>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a25      	ldr	r2, [pc, #148]	@ (8005718 <HAL_DMA_Init+0x1e8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00e      	beq.n	80056a4 <HAL_DMA_Init+0x174>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a24      	ldr	r2, [pc, #144]	@ (800571c <HAL_DMA_Init+0x1ec>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d009      	beq.n	80056a4 <HAL_DMA_Init+0x174>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a22      	ldr	r2, [pc, #136]	@ (8005720 <HAL_DMA_Init+0x1f0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <HAL_DMA_Init+0x174>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a21      	ldr	r2, [pc, #132]	@ (8005724 <HAL_DMA_Init+0x1f4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d108      	bne.n	80056b6 <HAL_DMA_Init+0x186>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0201 	bic.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e007      	b.n	80056c6 <HAL_DMA_Init+0x196>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0201 	bic.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056c6:	e02f      	b.n	8005728 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056c8:	f7fe fcb6 	bl	8004038 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b05      	cmp	r3, #5
 80056d4:	d928      	bls.n	8005728 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2203      	movs	r2, #3
 80056e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e246      	b.n	8005b76 <HAL_DMA_Init+0x646>
 80056e8:	40020010 	.word	0x40020010
 80056ec:	40020028 	.word	0x40020028
 80056f0:	40020040 	.word	0x40020040
 80056f4:	40020058 	.word	0x40020058
 80056f8:	40020070 	.word	0x40020070
 80056fc:	40020088 	.word	0x40020088
 8005700:	400200a0 	.word	0x400200a0
 8005704:	400200b8 	.word	0x400200b8
 8005708:	40020410 	.word	0x40020410
 800570c:	40020428 	.word	0x40020428
 8005710:	40020440 	.word	0x40020440
 8005714:	40020458 	.word	0x40020458
 8005718:	40020470 	.word	0x40020470
 800571c:	40020488 	.word	0x40020488
 8005720:	400204a0 	.word	0x400204a0
 8005724:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1c8      	bne.n	80056c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4b83      	ldr	r3, [pc, #524]	@ (8005950 <HAL_DMA_Init+0x420>)
 8005742:	4013      	ands	r3, r2
 8005744:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800574e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800575a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005766:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005778:	2b04      	cmp	r3, #4
 800577a:	d107      	bne.n	800578c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005784:	4313      	orrs	r3, r2
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800578c:	4b71      	ldr	r3, [pc, #452]	@ (8005954 <HAL_DMA_Init+0x424>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	4b71      	ldr	r3, [pc, #452]	@ (8005958 <HAL_DMA_Init+0x428>)
 8005792:	4013      	ands	r3, r2
 8005794:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005798:	d328      	bcc.n	80057ec <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b28      	cmp	r3, #40	@ 0x28
 80057a0:	d903      	bls.n	80057aa <HAL_DMA_Init+0x27a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80057a8:	d917      	bls.n	80057da <HAL_DMA_Init+0x2aa>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80057b0:	d903      	bls.n	80057ba <HAL_DMA_Init+0x28a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b42      	cmp	r3, #66	@ 0x42
 80057b8:	d90f      	bls.n	80057da <HAL_DMA_Init+0x2aa>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b46      	cmp	r3, #70	@ 0x46
 80057c0:	d903      	bls.n	80057ca <HAL_DMA_Init+0x29a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b48      	cmp	r3, #72	@ 0x48
 80057c8:	d907      	bls.n	80057da <HAL_DMA_Init+0x2aa>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80057d0:	d905      	bls.n	80057de <HAL_DMA_Init+0x2ae>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b52      	cmp	r3, #82	@ 0x52
 80057d8:	d801      	bhi.n	80057de <HAL_DMA_Init+0x2ae>
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <HAL_DMA_Init+0x2b0>
 80057de:	2300      	movs	r3, #0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057ea:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f023 0307 	bic.w	r3, r3, #7
 8005802:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005812:	2b04      	cmp	r3, #4
 8005814:	d117      	bne.n	8005846 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00e      	beq.n	8005846 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f002 f8d3 	bl	80079d4 <DMA_CheckFifoParam>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d008      	beq.n	8005846 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2240      	movs	r2, #64	@ 0x40
 8005838:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e197      	b.n	8005b76 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f002 f80e 	bl	8007870 <DMA_CalcBaseAndBitshift>
 8005854:	4603      	mov	r3, r0
 8005856:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800585c:	f003 031f 	and.w	r3, r3, #31
 8005860:	223f      	movs	r2, #63	@ 0x3f
 8005862:	409a      	lsls	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	609a      	str	r2, [r3, #8]
 8005868:	e0cd      	b.n	8005a06 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a3b      	ldr	r2, [pc, #236]	@ (800595c <HAL_DMA_Init+0x42c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d022      	beq.n	80058ba <HAL_DMA_Init+0x38a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a39      	ldr	r2, [pc, #228]	@ (8005960 <HAL_DMA_Init+0x430>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d01d      	beq.n	80058ba <HAL_DMA_Init+0x38a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a38      	ldr	r2, [pc, #224]	@ (8005964 <HAL_DMA_Init+0x434>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d018      	beq.n	80058ba <HAL_DMA_Init+0x38a>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a36      	ldr	r2, [pc, #216]	@ (8005968 <HAL_DMA_Init+0x438>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d013      	beq.n	80058ba <HAL_DMA_Init+0x38a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a35      	ldr	r2, [pc, #212]	@ (800596c <HAL_DMA_Init+0x43c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00e      	beq.n	80058ba <HAL_DMA_Init+0x38a>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a33      	ldr	r2, [pc, #204]	@ (8005970 <HAL_DMA_Init+0x440>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d009      	beq.n	80058ba <HAL_DMA_Init+0x38a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a32      	ldr	r2, [pc, #200]	@ (8005974 <HAL_DMA_Init+0x444>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d004      	beq.n	80058ba <HAL_DMA_Init+0x38a>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a30      	ldr	r2, [pc, #192]	@ (8005978 <HAL_DMA_Init+0x448>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d101      	bne.n	80058be <HAL_DMA_Init+0x38e>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <HAL_DMA_Init+0x390>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 8097 	beq.w	80059f4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a24      	ldr	r2, [pc, #144]	@ (800595c <HAL_DMA_Init+0x42c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d021      	beq.n	8005914 <HAL_DMA_Init+0x3e4>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a22      	ldr	r2, [pc, #136]	@ (8005960 <HAL_DMA_Init+0x430>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d01c      	beq.n	8005914 <HAL_DMA_Init+0x3e4>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a21      	ldr	r2, [pc, #132]	@ (8005964 <HAL_DMA_Init+0x434>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d017      	beq.n	8005914 <HAL_DMA_Init+0x3e4>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005968 <HAL_DMA_Init+0x438>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d012      	beq.n	8005914 <HAL_DMA_Init+0x3e4>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a1e      	ldr	r2, [pc, #120]	@ (800596c <HAL_DMA_Init+0x43c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00d      	beq.n	8005914 <HAL_DMA_Init+0x3e4>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005970 <HAL_DMA_Init+0x440>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d008      	beq.n	8005914 <HAL_DMA_Init+0x3e4>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a1b      	ldr	r2, [pc, #108]	@ (8005974 <HAL_DMA_Init+0x444>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d003      	beq.n	8005914 <HAL_DMA_Init+0x3e4>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a19      	ldr	r2, [pc, #100]	@ (8005978 <HAL_DMA_Init+0x448>)
 8005912:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	4b13      	ldr	r3, [pc, #76]	@ (800597c <HAL_DMA_Init+0x44c>)
 8005930:	4013      	ands	r3, r2
 8005932:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b40      	cmp	r3, #64	@ 0x40
 800593a:	d021      	beq.n	8005980 <HAL_DMA_Init+0x450>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2b80      	cmp	r3, #128	@ 0x80
 8005942:	d102      	bne.n	800594a <HAL_DMA_Init+0x41a>
 8005944:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005948:	e01b      	b.n	8005982 <HAL_DMA_Init+0x452>
 800594a:	2300      	movs	r3, #0
 800594c:	e019      	b.n	8005982 <HAL_DMA_Init+0x452>
 800594e:	bf00      	nop
 8005950:	fe10803f 	.word	0xfe10803f
 8005954:	5c001000 	.word	0x5c001000
 8005958:	ffff0000 	.word	0xffff0000
 800595c:	58025408 	.word	0x58025408
 8005960:	5802541c 	.word	0x5802541c
 8005964:	58025430 	.word	0x58025430
 8005968:	58025444 	.word	0x58025444
 800596c:	58025458 	.word	0x58025458
 8005970:	5802546c 	.word	0x5802546c
 8005974:	58025480 	.word	0x58025480
 8005978:	58025494 	.word	0x58025494
 800597c:	fffe000f 	.word	0xfffe000f
 8005980:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	68d2      	ldr	r2, [r2, #12]
 8005986:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005988:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005990:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005998:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80059a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80059a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80059b0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	4b6e      	ldr	r3, [pc, #440]	@ (8005b80 <HAL_DMA_Init+0x650>)
 80059c8:	4413      	add	r3, r2
 80059ca:	4a6e      	ldr	r2, [pc, #440]	@ (8005b84 <HAL_DMA_Init+0x654>)
 80059cc:	fba2 2303 	umull	r2, r3, r2, r3
 80059d0:	091b      	lsrs	r3, r3, #4
 80059d2:	009a      	lsls	r2, r3, #2
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f001 ff49 	bl	8007870 <DMA_CalcBaseAndBitshift>
 80059de:	4603      	mov	r3, r0
 80059e0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	2201      	movs	r2, #1
 80059ec:	409a      	lsls	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	e008      	b.n	8005a06 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2240      	movs	r2, #64	@ 0x40
 80059f8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2203      	movs	r2, #3
 80059fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e0b7      	b.n	8005b76 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a5f      	ldr	r2, [pc, #380]	@ (8005b88 <HAL_DMA_Init+0x658>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d072      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a5d      	ldr	r2, [pc, #372]	@ (8005b8c <HAL_DMA_Init+0x65c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d06d      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a5c      	ldr	r2, [pc, #368]	@ (8005b90 <HAL_DMA_Init+0x660>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d068      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a5a      	ldr	r2, [pc, #360]	@ (8005b94 <HAL_DMA_Init+0x664>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d063      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a59      	ldr	r2, [pc, #356]	@ (8005b98 <HAL_DMA_Init+0x668>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d05e      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a57      	ldr	r2, [pc, #348]	@ (8005b9c <HAL_DMA_Init+0x66c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d059      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a56      	ldr	r2, [pc, #344]	@ (8005ba0 <HAL_DMA_Init+0x670>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d054      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a54      	ldr	r2, [pc, #336]	@ (8005ba4 <HAL_DMA_Init+0x674>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d04f      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a53      	ldr	r2, [pc, #332]	@ (8005ba8 <HAL_DMA_Init+0x678>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d04a      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a51      	ldr	r2, [pc, #324]	@ (8005bac <HAL_DMA_Init+0x67c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d045      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a50      	ldr	r2, [pc, #320]	@ (8005bb0 <HAL_DMA_Init+0x680>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d040      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a4e      	ldr	r2, [pc, #312]	@ (8005bb4 <HAL_DMA_Init+0x684>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d03b      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a4d      	ldr	r2, [pc, #308]	@ (8005bb8 <HAL_DMA_Init+0x688>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d036      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a4b      	ldr	r2, [pc, #300]	@ (8005bbc <HAL_DMA_Init+0x68c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d031      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a4a      	ldr	r2, [pc, #296]	@ (8005bc0 <HAL_DMA_Init+0x690>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d02c      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a48      	ldr	r2, [pc, #288]	@ (8005bc4 <HAL_DMA_Init+0x694>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d027      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a47      	ldr	r2, [pc, #284]	@ (8005bc8 <HAL_DMA_Init+0x698>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d022      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a45      	ldr	r2, [pc, #276]	@ (8005bcc <HAL_DMA_Init+0x69c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d01d      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a44      	ldr	r2, [pc, #272]	@ (8005bd0 <HAL_DMA_Init+0x6a0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d018      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a42      	ldr	r2, [pc, #264]	@ (8005bd4 <HAL_DMA_Init+0x6a4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d013      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a41      	ldr	r2, [pc, #260]	@ (8005bd8 <HAL_DMA_Init+0x6a8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00e      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a3f      	ldr	r2, [pc, #252]	@ (8005bdc <HAL_DMA_Init+0x6ac>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d009      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a3e      	ldr	r2, [pc, #248]	@ (8005be0 <HAL_DMA_Init+0x6b0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d004      	beq.n	8005af6 <HAL_DMA_Init+0x5c6>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a3c      	ldr	r2, [pc, #240]	@ (8005be4 <HAL_DMA_Init+0x6b4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d101      	bne.n	8005afa <HAL_DMA_Init+0x5ca>
 8005af6:	2301      	movs	r3, #1
 8005af8:	e000      	b.n	8005afc <HAL_DMA_Init+0x5cc>
 8005afa:	2300      	movs	r3, #0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d032      	beq.n	8005b66 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f001 ffe3 	bl	8007acc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b80      	cmp	r3, #128	@ 0x80
 8005b0c:	d102      	bne.n	8005b14 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005b28:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d010      	beq.n	8005b54 <HAL_DMA_Init+0x624>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d80c      	bhi.n	8005b54 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f002 f860 	bl	8007c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b50:	605a      	str	r2, [r3, #4]
 8005b52:	e008      	b.n	8005b66 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	a7fdabf8 	.word	0xa7fdabf8
 8005b84:	cccccccd 	.word	0xcccccccd
 8005b88:	40020010 	.word	0x40020010
 8005b8c:	40020028 	.word	0x40020028
 8005b90:	40020040 	.word	0x40020040
 8005b94:	40020058 	.word	0x40020058
 8005b98:	40020070 	.word	0x40020070
 8005b9c:	40020088 	.word	0x40020088
 8005ba0:	400200a0 	.word	0x400200a0
 8005ba4:	400200b8 	.word	0x400200b8
 8005ba8:	40020410 	.word	0x40020410
 8005bac:	40020428 	.word	0x40020428
 8005bb0:	40020440 	.word	0x40020440
 8005bb4:	40020458 	.word	0x40020458
 8005bb8:	40020470 	.word	0x40020470
 8005bbc:	40020488 	.word	0x40020488
 8005bc0:	400204a0 	.word	0x400204a0
 8005bc4:	400204b8 	.word	0x400204b8
 8005bc8:	58025408 	.word	0x58025408
 8005bcc:	5802541c 	.word	0x5802541c
 8005bd0:	58025430 	.word	0x58025430
 8005bd4:	58025444 	.word	0x58025444
 8005bd8:	58025458 	.word	0x58025458
 8005bdc:	5802546c 	.word	0x5802546c
 8005be0:	58025480 	.word	0x58025480
 8005be4:	58025494 	.word	0x58025494

08005be8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e1a8      	b.n	8005f4c <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a82      	ldr	r2, [pc, #520]	@ (8005e08 <HAL_DMA_DeInit+0x220>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d04a      	beq.n	8005c9a <HAL_DMA_DeInit+0xb2>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a80      	ldr	r2, [pc, #512]	@ (8005e0c <HAL_DMA_DeInit+0x224>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d045      	beq.n	8005c9a <HAL_DMA_DeInit+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a7f      	ldr	r2, [pc, #508]	@ (8005e10 <HAL_DMA_DeInit+0x228>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d040      	beq.n	8005c9a <HAL_DMA_DeInit+0xb2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a7d      	ldr	r2, [pc, #500]	@ (8005e14 <HAL_DMA_DeInit+0x22c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d03b      	beq.n	8005c9a <HAL_DMA_DeInit+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a7c      	ldr	r2, [pc, #496]	@ (8005e18 <HAL_DMA_DeInit+0x230>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d036      	beq.n	8005c9a <HAL_DMA_DeInit+0xb2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a7a      	ldr	r2, [pc, #488]	@ (8005e1c <HAL_DMA_DeInit+0x234>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d031      	beq.n	8005c9a <HAL_DMA_DeInit+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a79      	ldr	r2, [pc, #484]	@ (8005e20 <HAL_DMA_DeInit+0x238>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d02c      	beq.n	8005c9a <HAL_DMA_DeInit+0xb2>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a77      	ldr	r2, [pc, #476]	@ (8005e24 <HAL_DMA_DeInit+0x23c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d027      	beq.n	8005c9a <HAL_DMA_DeInit+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a76      	ldr	r2, [pc, #472]	@ (8005e28 <HAL_DMA_DeInit+0x240>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d022      	beq.n	8005c9a <HAL_DMA_DeInit+0xb2>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a74      	ldr	r2, [pc, #464]	@ (8005e2c <HAL_DMA_DeInit+0x244>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d01d      	beq.n	8005c9a <HAL_DMA_DeInit+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a73      	ldr	r2, [pc, #460]	@ (8005e30 <HAL_DMA_DeInit+0x248>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d018      	beq.n	8005c9a <HAL_DMA_DeInit+0xb2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a71      	ldr	r2, [pc, #452]	@ (8005e34 <HAL_DMA_DeInit+0x24c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <HAL_DMA_DeInit+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a70      	ldr	r2, [pc, #448]	@ (8005e38 <HAL_DMA_DeInit+0x250>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00e      	beq.n	8005c9a <HAL_DMA_DeInit+0xb2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a6e      	ldr	r2, [pc, #440]	@ (8005e3c <HAL_DMA_DeInit+0x254>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d009      	beq.n	8005c9a <HAL_DMA_DeInit+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a6d      	ldr	r2, [pc, #436]	@ (8005e40 <HAL_DMA_DeInit+0x258>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d004      	beq.n	8005c9a <HAL_DMA_DeInit+0xb2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a6b      	ldr	r2, [pc, #428]	@ (8005e44 <HAL_DMA_DeInit+0x25c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d108      	bne.n	8005cac <HAL_DMA_DeInit+0xc4>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0201 	bic.w	r2, r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	e007      	b.n	8005cbc <HAL_DMA_DeInit+0xd4>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0201 	bic.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a51      	ldr	r2, [pc, #324]	@ (8005e08 <HAL_DMA_DeInit+0x220>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d04a      	beq.n	8005d5c <HAL_DMA_DeInit+0x174>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a50      	ldr	r2, [pc, #320]	@ (8005e0c <HAL_DMA_DeInit+0x224>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d045      	beq.n	8005d5c <HAL_DMA_DeInit+0x174>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a4e      	ldr	r2, [pc, #312]	@ (8005e10 <HAL_DMA_DeInit+0x228>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d040      	beq.n	8005d5c <HAL_DMA_DeInit+0x174>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a4d      	ldr	r2, [pc, #308]	@ (8005e14 <HAL_DMA_DeInit+0x22c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d03b      	beq.n	8005d5c <HAL_DMA_DeInit+0x174>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a4b      	ldr	r2, [pc, #300]	@ (8005e18 <HAL_DMA_DeInit+0x230>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d036      	beq.n	8005d5c <HAL_DMA_DeInit+0x174>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a4a      	ldr	r2, [pc, #296]	@ (8005e1c <HAL_DMA_DeInit+0x234>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d031      	beq.n	8005d5c <HAL_DMA_DeInit+0x174>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a48      	ldr	r2, [pc, #288]	@ (8005e20 <HAL_DMA_DeInit+0x238>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d02c      	beq.n	8005d5c <HAL_DMA_DeInit+0x174>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a47      	ldr	r2, [pc, #284]	@ (8005e24 <HAL_DMA_DeInit+0x23c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d027      	beq.n	8005d5c <HAL_DMA_DeInit+0x174>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a45      	ldr	r2, [pc, #276]	@ (8005e28 <HAL_DMA_DeInit+0x240>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d022      	beq.n	8005d5c <HAL_DMA_DeInit+0x174>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a44      	ldr	r2, [pc, #272]	@ (8005e2c <HAL_DMA_DeInit+0x244>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d01d      	beq.n	8005d5c <HAL_DMA_DeInit+0x174>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a42      	ldr	r2, [pc, #264]	@ (8005e30 <HAL_DMA_DeInit+0x248>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d018      	beq.n	8005d5c <HAL_DMA_DeInit+0x174>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a41      	ldr	r2, [pc, #260]	@ (8005e34 <HAL_DMA_DeInit+0x24c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d013      	beq.n	8005d5c <HAL_DMA_DeInit+0x174>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a3f      	ldr	r2, [pc, #252]	@ (8005e38 <HAL_DMA_DeInit+0x250>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00e      	beq.n	8005d5c <HAL_DMA_DeInit+0x174>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a3e      	ldr	r2, [pc, #248]	@ (8005e3c <HAL_DMA_DeInit+0x254>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d009      	beq.n	8005d5c <HAL_DMA_DeInit+0x174>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a3c      	ldr	r2, [pc, #240]	@ (8005e40 <HAL_DMA_DeInit+0x258>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d004      	beq.n	8005d5c <HAL_DMA_DeInit+0x174>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a3b      	ldr	r2, [pc, #236]	@ (8005e44 <HAL_DMA_DeInit+0x25c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d101      	bne.n	8005d60 <HAL_DMA_DeInit+0x178>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e000      	b.n	8005d62 <HAL_DMA_DeInit+0x17a>
 8005d60:	2300      	movs	r3, #0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d025      	beq.n	8005db2 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2200      	movs	r2, #0
 8005d74:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2200      	movs	r2, #0
 8005d84:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2221      	movs	r2, #33	@ 0x21
 8005d94:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f001 fd6a 	bl	8007870 <DMA_CalcBaseAndBitshift>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da4:	f003 031f 	and.w	r3, r3, #31
 8005da8:	223f      	movs	r2, #63	@ 0x3f
 8005daa:	409a      	lsls	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	609a      	str	r2, [r3, #8]
 8005db0:	e081      	b.n	8005eb6 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a24      	ldr	r2, [pc, #144]	@ (8005e48 <HAL_DMA_DeInit+0x260>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d022      	beq.n	8005e02 <HAL_DMA_DeInit+0x21a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a22      	ldr	r2, [pc, #136]	@ (8005e4c <HAL_DMA_DeInit+0x264>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d01d      	beq.n	8005e02 <HAL_DMA_DeInit+0x21a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a21      	ldr	r2, [pc, #132]	@ (8005e50 <HAL_DMA_DeInit+0x268>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d018      	beq.n	8005e02 <HAL_DMA_DeInit+0x21a>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8005e54 <HAL_DMA_DeInit+0x26c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d013      	beq.n	8005e02 <HAL_DMA_DeInit+0x21a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1e      	ldr	r2, [pc, #120]	@ (8005e58 <HAL_DMA_DeInit+0x270>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00e      	beq.n	8005e02 <HAL_DMA_DeInit+0x21a>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1c      	ldr	r2, [pc, #112]	@ (8005e5c <HAL_DMA_DeInit+0x274>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d009      	beq.n	8005e02 <HAL_DMA_DeInit+0x21a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1b      	ldr	r2, [pc, #108]	@ (8005e60 <HAL_DMA_DeInit+0x278>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d004      	beq.n	8005e02 <HAL_DMA_DeInit+0x21a>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a19      	ldr	r2, [pc, #100]	@ (8005e64 <HAL_DMA_DeInit+0x27c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d132      	bne.n	8005e68 <HAL_DMA_DeInit+0x280>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e031      	b.n	8005e6a <HAL_DMA_DeInit+0x282>
 8005e06:	bf00      	nop
 8005e08:	40020010 	.word	0x40020010
 8005e0c:	40020028 	.word	0x40020028
 8005e10:	40020040 	.word	0x40020040
 8005e14:	40020058 	.word	0x40020058
 8005e18:	40020070 	.word	0x40020070
 8005e1c:	40020088 	.word	0x40020088
 8005e20:	400200a0 	.word	0x400200a0
 8005e24:	400200b8 	.word	0x400200b8
 8005e28:	40020410 	.word	0x40020410
 8005e2c:	40020428 	.word	0x40020428
 8005e30:	40020440 	.word	0x40020440
 8005e34:	40020458 	.word	0x40020458
 8005e38:	40020470 	.word	0x40020470
 8005e3c:	40020488 	.word	0x40020488
 8005e40:	400204a0 	.word	0x400204a0
 8005e44:	400204b8 	.word	0x400204b8
 8005e48:	58025408 	.word	0x58025408
 8005e4c:	5802541c 	.word	0x5802541c
 8005e50:	58025430 	.word	0x58025430
 8005e54:	58025444 	.word	0x58025444
 8005e58:	58025458 	.word	0x58025458
 8005e5c:	5802546c 	.word	0x5802546c
 8005e60:	58025480 	.word	0x58025480
 8005e64:	58025494 	.word	0x58025494
 8005e68:	2300      	movs	r3, #0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d021      	beq.n	8005eb2 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2200      	movs	r2, #0
 8005e84:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2200      	movs	r2, #0
 8005e94:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f001 fcea 	bl	8007870 <DMA_CalcBaseAndBitshift>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea4:	f003 031f 	and.w	r3, r3, #31
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	409a      	lsls	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	605a      	str	r2, [r3, #4]
 8005eb0:	e001      	b.n	8005eb6 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e04a      	b.n	8005f4c <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f001 fe08 	bl	8007acc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d008      	beq.n	8005ed6 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005ed4:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00f      	beq.n	8005efe <HAL_DMA_DeInit+0x316>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d80b      	bhi.n	8005efe <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f001 fe8a 	bl	8007c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005efc:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005f5c:	f7fe f86c 	bl	8004038 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e2dc      	b.n	8006526 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d008      	beq.n	8005f8a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2280      	movs	r2, #128	@ 0x80
 8005f7c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e2cd      	b.n	8006526 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a76      	ldr	r2, [pc, #472]	@ (8006168 <HAL_DMA_Abort+0x214>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d04a      	beq.n	800602a <HAL_DMA_Abort+0xd6>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a74      	ldr	r2, [pc, #464]	@ (800616c <HAL_DMA_Abort+0x218>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d045      	beq.n	800602a <HAL_DMA_Abort+0xd6>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a73      	ldr	r2, [pc, #460]	@ (8006170 <HAL_DMA_Abort+0x21c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d040      	beq.n	800602a <HAL_DMA_Abort+0xd6>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a71      	ldr	r2, [pc, #452]	@ (8006174 <HAL_DMA_Abort+0x220>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d03b      	beq.n	800602a <HAL_DMA_Abort+0xd6>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a70      	ldr	r2, [pc, #448]	@ (8006178 <HAL_DMA_Abort+0x224>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d036      	beq.n	800602a <HAL_DMA_Abort+0xd6>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a6e      	ldr	r2, [pc, #440]	@ (800617c <HAL_DMA_Abort+0x228>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d031      	beq.n	800602a <HAL_DMA_Abort+0xd6>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a6d      	ldr	r2, [pc, #436]	@ (8006180 <HAL_DMA_Abort+0x22c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d02c      	beq.n	800602a <HAL_DMA_Abort+0xd6>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a6b      	ldr	r2, [pc, #428]	@ (8006184 <HAL_DMA_Abort+0x230>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d027      	beq.n	800602a <HAL_DMA_Abort+0xd6>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a6a      	ldr	r2, [pc, #424]	@ (8006188 <HAL_DMA_Abort+0x234>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d022      	beq.n	800602a <HAL_DMA_Abort+0xd6>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a68      	ldr	r2, [pc, #416]	@ (800618c <HAL_DMA_Abort+0x238>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d01d      	beq.n	800602a <HAL_DMA_Abort+0xd6>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a67      	ldr	r2, [pc, #412]	@ (8006190 <HAL_DMA_Abort+0x23c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d018      	beq.n	800602a <HAL_DMA_Abort+0xd6>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a65      	ldr	r2, [pc, #404]	@ (8006194 <HAL_DMA_Abort+0x240>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d013      	beq.n	800602a <HAL_DMA_Abort+0xd6>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a64      	ldr	r2, [pc, #400]	@ (8006198 <HAL_DMA_Abort+0x244>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d00e      	beq.n	800602a <HAL_DMA_Abort+0xd6>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a62      	ldr	r2, [pc, #392]	@ (800619c <HAL_DMA_Abort+0x248>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d009      	beq.n	800602a <HAL_DMA_Abort+0xd6>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a61      	ldr	r2, [pc, #388]	@ (80061a0 <HAL_DMA_Abort+0x24c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d004      	beq.n	800602a <HAL_DMA_Abort+0xd6>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a5f      	ldr	r2, [pc, #380]	@ (80061a4 <HAL_DMA_Abort+0x250>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d101      	bne.n	800602e <HAL_DMA_Abort+0xda>
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <HAL_DMA_Abort+0xdc>
 800602e:	2300      	movs	r3, #0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d013      	beq.n	800605c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 021e 	bic.w	r2, r2, #30
 8006042:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695a      	ldr	r2, [r3, #20]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006052:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	617b      	str	r3, [r7, #20]
 800605a:	e00a      	b.n	8006072 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 020e 	bic.w	r2, r2, #14
 800606a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a3c      	ldr	r2, [pc, #240]	@ (8006168 <HAL_DMA_Abort+0x214>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d072      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a3a      	ldr	r2, [pc, #232]	@ (800616c <HAL_DMA_Abort+0x218>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d06d      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a39      	ldr	r2, [pc, #228]	@ (8006170 <HAL_DMA_Abort+0x21c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d068      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a37      	ldr	r2, [pc, #220]	@ (8006174 <HAL_DMA_Abort+0x220>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d063      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a36      	ldr	r2, [pc, #216]	@ (8006178 <HAL_DMA_Abort+0x224>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d05e      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a34      	ldr	r2, [pc, #208]	@ (800617c <HAL_DMA_Abort+0x228>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d059      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a33      	ldr	r2, [pc, #204]	@ (8006180 <HAL_DMA_Abort+0x22c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d054      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a31      	ldr	r2, [pc, #196]	@ (8006184 <HAL_DMA_Abort+0x230>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d04f      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a30      	ldr	r2, [pc, #192]	@ (8006188 <HAL_DMA_Abort+0x234>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d04a      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a2e      	ldr	r2, [pc, #184]	@ (800618c <HAL_DMA_Abort+0x238>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d045      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a2d      	ldr	r2, [pc, #180]	@ (8006190 <HAL_DMA_Abort+0x23c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d040      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a2b      	ldr	r2, [pc, #172]	@ (8006194 <HAL_DMA_Abort+0x240>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d03b      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006198 <HAL_DMA_Abort+0x244>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d036      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a28      	ldr	r2, [pc, #160]	@ (800619c <HAL_DMA_Abort+0x248>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d031      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a27      	ldr	r2, [pc, #156]	@ (80061a0 <HAL_DMA_Abort+0x24c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d02c      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a25      	ldr	r2, [pc, #148]	@ (80061a4 <HAL_DMA_Abort+0x250>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d027      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a24      	ldr	r2, [pc, #144]	@ (80061a8 <HAL_DMA_Abort+0x254>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d022      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a22      	ldr	r2, [pc, #136]	@ (80061ac <HAL_DMA_Abort+0x258>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d01d      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a21      	ldr	r2, [pc, #132]	@ (80061b0 <HAL_DMA_Abort+0x25c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d018      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1f      	ldr	r2, [pc, #124]	@ (80061b4 <HAL_DMA_Abort+0x260>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d013      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a1e      	ldr	r2, [pc, #120]	@ (80061b8 <HAL_DMA_Abort+0x264>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00e      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a1c      	ldr	r2, [pc, #112]	@ (80061bc <HAL_DMA_Abort+0x268>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d009      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a1b      	ldr	r2, [pc, #108]	@ (80061c0 <HAL_DMA_Abort+0x26c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d004      	beq.n	8006162 <HAL_DMA_Abort+0x20e>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a19      	ldr	r2, [pc, #100]	@ (80061c4 <HAL_DMA_Abort+0x270>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d132      	bne.n	80061c8 <HAL_DMA_Abort+0x274>
 8006162:	2301      	movs	r3, #1
 8006164:	e031      	b.n	80061ca <HAL_DMA_Abort+0x276>
 8006166:	bf00      	nop
 8006168:	40020010 	.word	0x40020010
 800616c:	40020028 	.word	0x40020028
 8006170:	40020040 	.word	0x40020040
 8006174:	40020058 	.word	0x40020058
 8006178:	40020070 	.word	0x40020070
 800617c:	40020088 	.word	0x40020088
 8006180:	400200a0 	.word	0x400200a0
 8006184:	400200b8 	.word	0x400200b8
 8006188:	40020410 	.word	0x40020410
 800618c:	40020428 	.word	0x40020428
 8006190:	40020440 	.word	0x40020440
 8006194:	40020458 	.word	0x40020458
 8006198:	40020470 	.word	0x40020470
 800619c:	40020488 	.word	0x40020488
 80061a0:	400204a0 	.word	0x400204a0
 80061a4:	400204b8 	.word	0x400204b8
 80061a8:	58025408 	.word	0x58025408
 80061ac:	5802541c 	.word	0x5802541c
 80061b0:	58025430 	.word	0x58025430
 80061b4:	58025444 	.word	0x58025444
 80061b8:	58025458 	.word	0x58025458
 80061bc:	5802546c 	.word	0x5802546c
 80061c0:	58025480 	.word	0x58025480
 80061c4:	58025494 	.word	0x58025494
 80061c8:	2300      	movs	r3, #0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d007      	beq.n	80061de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a6d      	ldr	r2, [pc, #436]	@ (8006398 <HAL_DMA_Abort+0x444>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d04a      	beq.n	800627e <HAL_DMA_Abort+0x32a>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a6b      	ldr	r2, [pc, #428]	@ (800639c <HAL_DMA_Abort+0x448>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d045      	beq.n	800627e <HAL_DMA_Abort+0x32a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a6a      	ldr	r2, [pc, #424]	@ (80063a0 <HAL_DMA_Abort+0x44c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d040      	beq.n	800627e <HAL_DMA_Abort+0x32a>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a68      	ldr	r2, [pc, #416]	@ (80063a4 <HAL_DMA_Abort+0x450>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d03b      	beq.n	800627e <HAL_DMA_Abort+0x32a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a67      	ldr	r2, [pc, #412]	@ (80063a8 <HAL_DMA_Abort+0x454>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d036      	beq.n	800627e <HAL_DMA_Abort+0x32a>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a65      	ldr	r2, [pc, #404]	@ (80063ac <HAL_DMA_Abort+0x458>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d031      	beq.n	800627e <HAL_DMA_Abort+0x32a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a64      	ldr	r2, [pc, #400]	@ (80063b0 <HAL_DMA_Abort+0x45c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d02c      	beq.n	800627e <HAL_DMA_Abort+0x32a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a62      	ldr	r2, [pc, #392]	@ (80063b4 <HAL_DMA_Abort+0x460>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d027      	beq.n	800627e <HAL_DMA_Abort+0x32a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a61      	ldr	r2, [pc, #388]	@ (80063b8 <HAL_DMA_Abort+0x464>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d022      	beq.n	800627e <HAL_DMA_Abort+0x32a>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a5f      	ldr	r2, [pc, #380]	@ (80063bc <HAL_DMA_Abort+0x468>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01d      	beq.n	800627e <HAL_DMA_Abort+0x32a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a5e      	ldr	r2, [pc, #376]	@ (80063c0 <HAL_DMA_Abort+0x46c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d018      	beq.n	800627e <HAL_DMA_Abort+0x32a>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a5c      	ldr	r2, [pc, #368]	@ (80063c4 <HAL_DMA_Abort+0x470>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_DMA_Abort+0x32a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a5b      	ldr	r2, [pc, #364]	@ (80063c8 <HAL_DMA_Abort+0x474>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00e      	beq.n	800627e <HAL_DMA_Abort+0x32a>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a59      	ldr	r2, [pc, #356]	@ (80063cc <HAL_DMA_Abort+0x478>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_DMA_Abort+0x32a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a58      	ldr	r2, [pc, #352]	@ (80063d0 <HAL_DMA_Abort+0x47c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_DMA_Abort+0x32a>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a56      	ldr	r2, [pc, #344]	@ (80063d4 <HAL_DMA_Abort+0x480>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d108      	bne.n	8006290 <HAL_DMA_Abort+0x33c>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0201 	bic.w	r2, r2, #1
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	e007      	b.n	80062a0 <HAL_DMA_Abort+0x34c>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0201 	bic.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80062a0:	e013      	b.n	80062ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062a2:	f7fd fec9 	bl	8004038 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b05      	cmp	r3, #5
 80062ae:	d90c      	bls.n	80062ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2220      	movs	r2, #32
 80062b4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2203      	movs	r2, #3
 80062ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e12d      	b.n	8006526 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e5      	bne.n	80062a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a2f      	ldr	r2, [pc, #188]	@ (8006398 <HAL_DMA_Abort+0x444>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d04a      	beq.n	8006376 <HAL_DMA_Abort+0x422>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a2d      	ldr	r2, [pc, #180]	@ (800639c <HAL_DMA_Abort+0x448>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d045      	beq.n	8006376 <HAL_DMA_Abort+0x422>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a2c      	ldr	r2, [pc, #176]	@ (80063a0 <HAL_DMA_Abort+0x44c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d040      	beq.n	8006376 <HAL_DMA_Abort+0x422>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a2a      	ldr	r2, [pc, #168]	@ (80063a4 <HAL_DMA_Abort+0x450>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d03b      	beq.n	8006376 <HAL_DMA_Abort+0x422>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a29      	ldr	r2, [pc, #164]	@ (80063a8 <HAL_DMA_Abort+0x454>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d036      	beq.n	8006376 <HAL_DMA_Abort+0x422>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a27      	ldr	r2, [pc, #156]	@ (80063ac <HAL_DMA_Abort+0x458>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d031      	beq.n	8006376 <HAL_DMA_Abort+0x422>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a26      	ldr	r2, [pc, #152]	@ (80063b0 <HAL_DMA_Abort+0x45c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d02c      	beq.n	8006376 <HAL_DMA_Abort+0x422>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a24      	ldr	r2, [pc, #144]	@ (80063b4 <HAL_DMA_Abort+0x460>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d027      	beq.n	8006376 <HAL_DMA_Abort+0x422>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a23      	ldr	r2, [pc, #140]	@ (80063b8 <HAL_DMA_Abort+0x464>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d022      	beq.n	8006376 <HAL_DMA_Abort+0x422>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a21      	ldr	r2, [pc, #132]	@ (80063bc <HAL_DMA_Abort+0x468>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d01d      	beq.n	8006376 <HAL_DMA_Abort+0x422>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a20      	ldr	r2, [pc, #128]	@ (80063c0 <HAL_DMA_Abort+0x46c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d018      	beq.n	8006376 <HAL_DMA_Abort+0x422>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1e      	ldr	r2, [pc, #120]	@ (80063c4 <HAL_DMA_Abort+0x470>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d013      	beq.n	8006376 <HAL_DMA_Abort+0x422>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a1d      	ldr	r2, [pc, #116]	@ (80063c8 <HAL_DMA_Abort+0x474>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00e      	beq.n	8006376 <HAL_DMA_Abort+0x422>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1b      	ldr	r2, [pc, #108]	@ (80063cc <HAL_DMA_Abort+0x478>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d009      	beq.n	8006376 <HAL_DMA_Abort+0x422>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a1a      	ldr	r2, [pc, #104]	@ (80063d0 <HAL_DMA_Abort+0x47c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d004      	beq.n	8006376 <HAL_DMA_Abort+0x422>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a18      	ldr	r2, [pc, #96]	@ (80063d4 <HAL_DMA_Abort+0x480>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d101      	bne.n	800637a <HAL_DMA_Abort+0x426>
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <HAL_DMA_Abort+0x428>
 800637a:	2300      	movs	r3, #0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d02b      	beq.n	80063d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006384:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800638a:	f003 031f 	and.w	r3, r3, #31
 800638e:	223f      	movs	r2, #63	@ 0x3f
 8006390:	409a      	lsls	r2, r3
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	609a      	str	r2, [r3, #8]
 8006396:	e02a      	b.n	80063ee <HAL_DMA_Abort+0x49a>
 8006398:	40020010 	.word	0x40020010
 800639c:	40020028 	.word	0x40020028
 80063a0:	40020040 	.word	0x40020040
 80063a4:	40020058 	.word	0x40020058
 80063a8:	40020070 	.word	0x40020070
 80063ac:	40020088 	.word	0x40020088
 80063b0:	400200a0 	.word	0x400200a0
 80063b4:	400200b8 	.word	0x400200b8
 80063b8:	40020410 	.word	0x40020410
 80063bc:	40020428 	.word	0x40020428
 80063c0:	40020440 	.word	0x40020440
 80063c4:	40020458 	.word	0x40020458
 80063c8:	40020470 	.word	0x40020470
 80063cc:	40020488 	.word	0x40020488
 80063d0:	400204a0 	.word	0x400204a0
 80063d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063dc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	2201      	movs	r2, #1
 80063e8:	409a      	lsls	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a4f      	ldr	r2, [pc, #316]	@ (8006530 <HAL_DMA_Abort+0x5dc>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d072      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a4d      	ldr	r2, [pc, #308]	@ (8006534 <HAL_DMA_Abort+0x5e0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d06d      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a4c      	ldr	r2, [pc, #304]	@ (8006538 <HAL_DMA_Abort+0x5e4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d068      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a4a      	ldr	r2, [pc, #296]	@ (800653c <HAL_DMA_Abort+0x5e8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d063      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a49      	ldr	r2, [pc, #292]	@ (8006540 <HAL_DMA_Abort+0x5ec>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d05e      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a47      	ldr	r2, [pc, #284]	@ (8006544 <HAL_DMA_Abort+0x5f0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d059      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a46      	ldr	r2, [pc, #280]	@ (8006548 <HAL_DMA_Abort+0x5f4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d054      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a44      	ldr	r2, [pc, #272]	@ (800654c <HAL_DMA_Abort+0x5f8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d04f      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a43      	ldr	r2, [pc, #268]	@ (8006550 <HAL_DMA_Abort+0x5fc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d04a      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a41      	ldr	r2, [pc, #260]	@ (8006554 <HAL_DMA_Abort+0x600>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d045      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a40      	ldr	r2, [pc, #256]	@ (8006558 <HAL_DMA_Abort+0x604>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d040      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a3e      	ldr	r2, [pc, #248]	@ (800655c <HAL_DMA_Abort+0x608>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d03b      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a3d      	ldr	r2, [pc, #244]	@ (8006560 <HAL_DMA_Abort+0x60c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d036      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a3b      	ldr	r2, [pc, #236]	@ (8006564 <HAL_DMA_Abort+0x610>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d031      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a3a      	ldr	r2, [pc, #232]	@ (8006568 <HAL_DMA_Abort+0x614>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d02c      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a38      	ldr	r2, [pc, #224]	@ (800656c <HAL_DMA_Abort+0x618>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d027      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a37      	ldr	r2, [pc, #220]	@ (8006570 <HAL_DMA_Abort+0x61c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d022      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a35      	ldr	r2, [pc, #212]	@ (8006574 <HAL_DMA_Abort+0x620>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d01d      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a34      	ldr	r2, [pc, #208]	@ (8006578 <HAL_DMA_Abort+0x624>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d018      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a32      	ldr	r2, [pc, #200]	@ (800657c <HAL_DMA_Abort+0x628>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d013      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a31      	ldr	r2, [pc, #196]	@ (8006580 <HAL_DMA_Abort+0x62c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00e      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006584 <HAL_DMA_Abort+0x630>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d009      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a2e      	ldr	r2, [pc, #184]	@ (8006588 <HAL_DMA_Abort+0x634>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d004      	beq.n	80064de <HAL_DMA_Abort+0x58a>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a2c      	ldr	r2, [pc, #176]	@ (800658c <HAL_DMA_Abort+0x638>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d101      	bne.n	80064e2 <HAL_DMA_Abort+0x58e>
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <HAL_DMA_Abort+0x590>
 80064e2:	2300      	movs	r3, #0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d015      	beq.n	8006514 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80064f0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00c      	beq.n	8006514 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006504:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006508:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006512:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	40020010 	.word	0x40020010
 8006534:	40020028 	.word	0x40020028
 8006538:	40020040 	.word	0x40020040
 800653c:	40020058 	.word	0x40020058
 8006540:	40020070 	.word	0x40020070
 8006544:	40020088 	.word	0x40020088
 8006548:	400200a0 	.word	0x400200a0
 800654c:	400200b8 	.word	0x400200b8
 8006550:	40020410 	.word	0x40020410
 8006554:	40020428 	.word	0x40020428
 8006558:	40020440 	.word	0x40020440
 800655c:	40020458 	.word	0x40020458
 8006560:	40020470 	.word	0x40020470
 8006564:	40020488 	.word	0x40020488
 8006568:	400204a0 	.word	0x400204a0
 800656c:	400204b8 	.word	0x400204b8
 8006570:	58025408 	.word	0x58025408
 8006574:	5802541c 	.word	0x5802541c
 8006578:	58025430 	.word	0x58025430
 800657c:	58025444 	.word	0x58025444
 8006580:	58025458 	.word	0x58025458
 8006584:	5802546c 	.word	0x5802546c
 8006588:	58025480 	.word	0x58025480
 800658c:	58025494 	.word	0x58025494

08006590 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e237      	b.n	8006a12 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d004      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2280      	movs	r2, #128	@ 0x80
 80065b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e22c      	b.n	8006a12 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a5c      	ldr	r2, [pc, #368]	@ (8006730 <HAL_DMA_Abort_IT+0x1a0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d04a      	beq.n	8006658 <HAL_DMA_Abort_IT+0xc8>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a5b      	ldr	r2, [pc, #364]	@ (8006734 <HAL_DMA_Abort_IT+0x1a4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d045      	beq.n	8006658 <HAL_DMA_Abort_IT+0xc8>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a59      	ldr	r2, [pc, #356]	@ (8006738 <HAL_DMA_Abort_IT+0x1a8>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d040      	beq.n	8006658 <HAL_DMA_Abort_IT+0xc8>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a58      	ldr	r2, [pc, #352]	@ (800673c <HAL_DMA_Abort_IT+0x1ac>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d03b      	beq.n	8006658 <HAL_DMA_Abort_IT+0xc8>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a56      	ldr	r2, [pc, #344]	@ (8006740 <HAL_DMA_Abort_IT+0x1b0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d036      	beq.n	8006658 <HAL_DMA_Abort_IT+0xc8>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a55      	ldr	r2, [pc, #340]	@ (8006744 <HAL_DMA_Abort_IT+0x1b4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d031      	beq.n	8006658 <HAL_DMA_Abort_IT+0xc8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a53      	ldr	r2, [pc, #332]	@ (8006748 <HAL_DMA_Abort_IT+0x1b8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d02c      	beq.n	8006658 <HAL_DMA_Abort_IT+0xc8>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a52      	ldr	r2, [pc, #328]	@ (800674c <HAL_DMA_Abort_IT+0x1bc>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d027      	beq.n	8006658 <HAL_DMA_Abort_IT+0xc8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a50      	ldr	r2, [pc, #320]	@ (8006750 <HAL_DMA_Abort_IT+0x1c0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d022      	beq.n	8006658 <HAL_DMA_Abort_IT+0xc8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a4f      	ldr	r2, [pc, #316]	@ (8006754 <HAL_DMA_Abort_IT+0x1c4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d01d      	beq.n	8006658 <HAL_DMA_Abort_IT+0xc8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a4d      	ldr	r2, [pc, #308]	@ (8006758 <HAL_DMA_Abort_IT+0x1c8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d018      	beq.n	8006658 <HAL_DMA_Abort_IT+0xc8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a4c      	ldr	r2, [pc, #304]	@ (800675c <HAL_DMA_Abort_IT+0x1cc>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d013      	beq.n	8006658 <HAL_DMA_Abort_IT+0xc8>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a4a      	ldr	r2, [pc, #296]	@ (8006760 <HAL_DMA_Abort_IT+0x1d0>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d00e      	beq.n	8006658 <HAL_DMA_Abort_IT+0xc8>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a49      	ldr	r2, [pc, #292]	@ (8006764 <HAL_DMA_Abort_IT+0x1d4>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d009      	beq.n	8006658 <HAL_DMA_Abort_IT+0xc8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a47      	ldr	r2, [pc, #284]	@ (8006768 <HAL_DMA_Abort_IT+0x1d8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d004      	beq.n	8006658 <HAL_DMA_Abort_IT+0xc8>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a46      	ldr	r2, [pc, #280]	@ (800676c <HAL_DMA_Abort_IT+0x1dc>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d101      	bne.n	800665c <HAL_DMA_Abort_IT+0xcc>
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <HAL_DMA_Abort_IT+0xce>
 800665c:	2300      	movs	r3, #0
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 8086 	beq.w	8006770 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2204      	movs	r2, #4
 8006668:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a2f      	ldr	r2, [pc, #188]	@ (8006730 <HAL_DMA_Abort_IT+0x1a0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d04a      	beq.n	800670c <HAL_DMA_Abort_IT+0x17c>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a2e      	ldr	r2, [pc, #184]	@ (8006734 <HAL_DMA_Abort_IT+0x1a4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d045      	beq.n	800670c <HAL_DMA_Abort_IT+0x17c>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a2c      	ldr	r2, [pc, #176]	@ (8006738 <HAL_DMA_Abort_IT+0x1a8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d040      	beq.n	800670c <HAL_DMA_Abort_IT+0x17c>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a2b      	ldr	r2, [pc, #172]	@ (800673c <HAL_DMA_Abort_IT+0x1ac>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d03b      	beq.n	800670c <HAL_DMA_Abort_IT+0x17c>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a29      	ldr	r2, [pc, #164]	@ (8006740 <HAL_DMA_Abort_IT+0x1b0>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d036      	beq.n	800670c <HAL_DMA_Abort_IT+0x17c>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a28      	ldr	r2, [pc, #160]	@ (8006744 <HAL_DMA_Abort_IT+0x1b4>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d031      	beq.n	800670c <HAL_DMA_Abort_IT+0x17c>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a26      	ldr	r2, [pc, #152]	@ (8006748 <HAL_DMA_Abort_IT+0x1b8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d02c      	beq.n	800670c <HAL_DMA_Abort_IT+0x17c>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a25      	ldr	r2, [pc, #148]	@ (800674c <HAL_DMA_Abort_IT+0x1bc>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d027      	beq.n	800670c <HAL_DMA_Abort_IT+0x17c>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a23      	ldr	r2, [pc, #140]	@ (8006750 <HAL_DMA_Abort_IT+0x1c0>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d022      	beq.n	800670c <HAL_DMA_Abort_IT+0x17c>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a22      	ldr	r2, [pc, #136]	@ (8006754 <HAL_DMA_Abort_IT+0x1c4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d01d      	beq.n	800670c <HAL_DMA_Abort_IT+0x17c>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a20      	ldr	r2, [pc, #128]	@ (8006758 <HAL_DMA_Abort_IT+0x1c8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d018      	beq.n	800670c <HAL_DMA_Abort_IT+0x17c>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1f      	ldr	r2, [pc, #124]	@ (800675c <HAL_DMA_Abort_IT+0x1cc>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d013      	beq.n	800670c <HAL_DMA_Abort_IT+0x17c>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006760 <HAL_DMA_Abort_IT+0x1d0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00e      	beq.n	800670c <HAL_DMA_Abort_IT+0x17c>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006764 <HAL_DMA_Abort_IT+0x1d4>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d009      	beq.n	800670c <HAL_DMA_Abort_IT+0x17c>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006768 <HAL_DMA_Abort_IT+0x1d8>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <HAL_DMA_Abort_IT+0x17c>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a19      	ldr	r2, [pc, #100]	@ (800676c <HAL_DMA_Abort_IT+0x1dc>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d108      	bne.n	800671e <HAL_DMA_Abort_IT+0x18e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0201 	bic.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	e178      	b.n	8006a10 <HAL_DMA_Abort_IT+0x480>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0201 	bic.w	r2, r2, #1
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	e16f      	b.n	8006a10 <HAL_DMA_Abort_IT+0x480>
 8006730:	40020010 	.word	0x40020010
 8006734:	40020028 	.word	0x40020028
 8006738:	40020040 	.word	0x40020040
 800673c:	40020058 	.word	0x40020058
 8006740:	40020070 	.word	0x40020070
 8006744:	40020088 	.word	0x40020088
 8006748:	400200a0 	.word	0x400200a0
 800674c:	400200b8 	.word	0x400200b8
 8006750:	40020410 	.word	0x40020410
 8006754:	40020428 	.word	0x40020428
 8006758:	40020440 	.word	0x40020440
 800675c:	40020458 	.word	0x40020458
 8006760:	40020470 	.word	0x40020470
 8006764:	40020488 	.word	0x40020488
 8006768:	400204a0 	.word	0x400204a0
 800676c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 020e 	bic.w	r2, r2, #14
 800677e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a6c      	ldr	r2, [pc, #432]	@ (8006938 <HAL_DMA_Abort_IT+0x3a8>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d04a      	beq.n	8006820 <HAL_DMA_Abort_IT+0x290>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a6b      	ldr	r2, [pc, #428]	@ (800693c <HAL_DMA_Abort_IT+0x3ac>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d045      	beq.n	8006820 <HAL_DMA_Abort_IT+0x290>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a69      	ldr	r2, [pc, #420]	@ (8006940 <HAL_DMA_Abort_IT+0x3b0>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d040      	beq.n	8006820 <HAL_DMA_Abort_IT+0x290>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a68      	ldr	r2, [pc, #416]	@ (8006944 <HAL_DMA_Abort_IT+0x3b4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d03b      	beq.n	8006820 <HAL_DMA_Abort_IT+0x290>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a66      	ldr	r2, [pc, #408]	@ (8006948 <HAL_DMA_Abort_IT+0x3b8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d036      	beq.n	8006820 <HAL_DMA_Abort_IT+0x290>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a65      	ldr	r2, [pc, #404]	@ (800694c <HAL_DMA_Abort_IT+0x3bc>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d031      	beq.n	8006820 <HAL_DMA_Abort_IT+0x290>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a63      	ldr	r2, [pc, #396]	@ (8006950 <HAL_DMA_Abort_IT+0x3c0>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d02c      	beq.n	8006820 <HAL_DMA_Abort_IT+0x290>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a62      	ldr	r2, [pc, #392]	@ (8006954 <HAL_DMA_Abort_IT+0x3c4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d027      	beq.n	8006820 <HAL_DMA_Abort_IT+0x290>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a60      	ldr	r2, [pc, #384]	@ (8006958 <HAL_DMA_Abort_IT+0x3c8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d022      	beq.n	8006820 <HAL_DMA_Abort_IT+0x290>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a5f      	ldr	r2, [pc, #380]	@ (800695c <HAL_DMA_Abort_IT+0x3cc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d01d      	beq.n	8006820 <HAL_DMA_Abort_IT+0x290>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a5d      	ldr	r2, [pc, #372]	@ (8006960 <HAL_DMA_Abort_IT+0x3d0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d018      	beq.n	8006820 <HAL_DMA_Abort_IT+0x290>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a5c      	ldr	r2, [pc, #368]	@ (8006964 <HAL_DMA_Abort_IT+0x3d4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d013      	beq.n	8006820 <HAL_DMA_Abort_IT+0x290>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a5a      	ldr	r2, [pc, #360]	@ (8006968 <HAL_DMA_Abort_IT+0x3d8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d00e      	beq.n	8006820 <HAL_DMA_Abort_IT+0x290>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a59      	ldr	r2, [pc, #356]	@ (800696c <HAL_DMA_Abort_IT+0x3dc>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d009      	beq.n	8006820 <HAL_DMA_Abort_IT+0x290>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a57      	ldr	r2, [pc, #348]	@ (8006970 <HAL_DMA_Abort_IT+0x3e0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d004      	beq.n	8006820 <HAL_DMA_Abort_IT+0x290>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a56      	ldr	r2, [pc, #344]	@ (8006974 <HAL_DMA_Abort_IT+0x3e4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d108      	bne.n	8006832 <HAL_DMA_Abort_IT+0x2a2>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0201 	bic.w	r2, r2, #1
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	e007      	b.n	8006842 <HAL_DMA_Abort_IT+0x2b2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 0201 	bic.w	r2, r2, #1
 8006840:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a3c      	ldr	r2, [pc, #240]	@ (8006938 <HAL_DMA_Abort_IT+0x3a8>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d072      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a3a      	ldr	r2, [pc, #232]	@ (800693c <HAL_DMA_Abort_IT+0x3ac>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d06d      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a39      	ldr	r2, [pc, #228]	@ (8006940 <HAL_DMA_Abort_IT+0x3b0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d068      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a37      	ldr	r2, [pc, #220]	@ (8006944 <HAL_DMA_Abort_IT+0x3b4>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d063      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a36      	ldr	r2, [pc, #216]	@ (8006948 <HAL_DMA_Abort_IT+0x3b8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d05e      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a34      	ldr	r2, [pc, #208]	@ (800694c <HAL_DMA_Abort_IT+0x3bc>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d059      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a33      	ldr	r2, [pc, #204]	@ (8006950 <HAL_DMA_Abort_IT+0x3c0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d054      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a31      	ldr	r2, [pc, #196]	@ (8006954 <HAL_DMA_Abort_IT+0x3c4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d04f      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a30      	ldr	r2, [pc, #192]	@ (8006958 <HAL_DMA_Abort_IT+0x3c8>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d04a      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a2e      	ldr	r2, [pc, #184]	@ (800695c <HAL_DMA_Abort_IT+0x3cc>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d045      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a2d      	ldr	r2, [pc, #180]	@ (8006960 <HAL_DMA_Abort_IT+0x3d0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d040      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a2b      	ldr	r2, [pc, #172]	@ (8006964 <HAL_DMA_Abort_IT+0x3d4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d03b      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a2a      	ldr	r2, [pc, #168]	@ (8006968 <HAL_DMA_Abort_IT+0x3d8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d036      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a28      	ldr	r2, [pc, #160]	@ (800696c <HAL_DMA_Abort_IT+0x3dc>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d031      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a27      	ldr	r2, [pc, #156]	@ (8006970 <HAL_DMA_Abort_IT+0x3e0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d02c      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a25      	ldr	r2, [pc, #148]	@ (8006974 <HAL_DMA_Abort_IT+0x3e4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d027      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a24      	ldr	r2, [pc, #144]	@ (8006978 <HAL_DMA_Abort_IT+0x3e8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d022      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a22      	ldr	r2, [pc, #136]	@ (800697c <HAL_DMA_Abort_IT+0x3ec>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d01d      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a21      	ldr	r2, [pc, #132]	@ (8006980 <HAL_DMA_Abort_IT+0x3f0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d018      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a1f      	ldr	r2, [pc, #124]	@ (8006984 <HAL_DMA_Abort_IT+0x3f4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d013      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1e      	ldr	r2, [pc, #120]	@ (8006988 <HAL_DMA_Abort_IT+0x3f8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00e      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a1c      	ldr	r2, [pc, #112]	@ (800698c <HAL_DMA_Abort_IT+0x3fc>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d009      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1b      	ldr	r2, [pc, #108]	@ (8006990 <HAL_DMA_Abort_IT+0x400>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d004      	beq.n	8006932 <HAL_DMA_Abort_IT+0x3a2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a19      	ldr	r2, [pc, #100]	@ (8006994 <HAL_DMA_Abort_IT+0x404>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d132      	bne.n	8006998 <HAL_DMA_Abort_IT+0x408>
 8006932:	2301      	movs	r3, #1
 8006934:	e031      	b.n	800699a <HAL_DMA_Abort_IT+0x40a>
 8006936:	bf00      	nop
 8006938:	40020010 	.word	0x40020010
 800693c:	40020028 	.word	0x40020028
 8006940:	40020040 	.word	0x40020040
 8006944:	40020058 	.word	0x40020058
 8006948:	40020070 	.word	0x40020070
 800694c:	40020088 	.word	0x40020088
 8006950:	400200a0 	.word	0x400200a0
 8006954:	400200b8 	.word	0x400200b8
 8006958:	40020410 	.word	0x40020410
 800695c:	40020428 	.word	0x40020428
 8006960:	40020440 	.word	0x40020440
 8006964:	40020458 	.word	0x40020458
 8006968:	40020470 	.word	0x40020470
 800696c:	40020488 	.word	0x40020488
 8006970:	400204a0 	.word	0x400204a0
 8006974:	400204b8 	.word	0x400204b8
 8006978:	58025408 	.word	0x58025408
 800697c:	5802541c 	.word	0x5802541c
 8006980:	58025430 	.word	0x58025430
 8006984:	58025444 	.word	0x58025444
 8006988:	58025458 	.word	0x58025458
 800698c:	5802546c 	.word	0x5802546c
 8006990:	58025480 	.word	0x58025480
 8006994:	58025494 	.word	0x58025494
 8006998:	2300      	movs	r3, #0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d028      	beq.n	80069f0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069b8:	f003 031f 	and.w	r3, r3, #31
 80069bc:	2201      	movs	r2, #1
 80069be:	409a      	lsls	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80069cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00c      	beq.n	80069f0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80069ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop

08006a1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08a      	sub	sp, #40	@ 0x28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006a28:	4b67      	ldr	r3, [pc, #412]	@ (8006bc8 <HAL_DMA_IRQHandler+0x1ac>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a67      	ldr	r2, [pc, #412]	@ (8006bcc <HAL_DMA_IRQHandler+0x1b0>)
 8006a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a32:	0a9b      	lsrs	r3, r3, #10
 8006a34:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a3a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a40:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a5f      	ldr	r2, [pc, #380]	@ (8006bd0 <HAL_DMA_IRQHandler+0x1b4>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d04a      	beq.n	8006aee <HAL_DMA_IRQHandler+0xd2>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a5d      	ldr	r2, [pc, #372]	@ (8006bd4 <HAL_DMA_IRQHandler+0x1b8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d045      	beq.n	8006aee <HAL_DMA_IRQHandler+0xd2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a5c      	ldr	r2, [pc, #368]	@ (8006bd8 <HAL_DMA_IRQHandler+0x1bc>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d040      	beq.n	8006aee <HAL_DMA_IRQHandler+0xd2>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a5a      	ldr	r2, [pc, #360]	@ (8006bdc <HAL_DMA_IRQHandler+0x1c0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d03b      	beq.n	8006aee <HAL_DMA_IRQHandler+0xd2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a59      	ldr	r2, [pc, #356]	@ (8006be0 <HAL_DMA_IRQHandler+0x1c4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d036      	beq.n	8006aee <HAL_DMA_IRQHandler+0xd2>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a57      	ldr	r2, [pc, #348]	@ (8006be4 <HAL_DMA_IRQHandler+0x1c8>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d031      	beq.n	8006aee <HAL_DMA_IRQHandler+0xd2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a56      	ldr	r2, [pc, #344]	@ (8006be8 <HAL_DMA_IRQHandler+0x1cc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d02c      	beq.n	8006aee <HAL_DMA_IRQHandler+0xd2>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a54      	ldr	r2, [pc, #336]	@ (8006bec <HAL_DMA_IRQHandler+0x1d0>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d027      	beq.n	8006aee <HAL_DMA_IRQHandler+0xd2>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a53      	ldr	r2, [pc, #332]	@ (8006bf0 <HAL_DMA_IRQHandler+0x1d4>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d022      	beq.n	8006aee <HAL_DMA_IRQHandler+0xd2>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a51      	ldr	r2, [pc, #324]	@ (8006bf4 <HAL_DMA_IRQHandler+0x1d8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d01d      	beq.n	8006aee <HAL_DMA_IRQHandler+0xd2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a50      	ldr	r2, [pc, #320]	@ (8006bf8 <HAL_DMA_IRQHandler+0x1dc>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d018      	beq.n	8006aee <HAL_DMA_IRQHandler+0xd2>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a4e      	ldr	r2, [pc, #312]	@ (8006bfc <HAL_DMA_IRQHandler+0x1e0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d013      	beq.n	8006aee <HAL_DMA_IRQHandler+0xd2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a4d      	ldr	r2, [pc, #308]	@ (8006c00 <HAL_DMA_IRQHandler+0x1e4>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00e      	beq.n	8006aee <HAL_DMA_IRQHandler+0xd2>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a4b      	ldr	r2, [pc, #300]	@ (8006c04 <HAL_DMA_IRQHandler+0x1e8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d009      	beq.n	8006aee <HAL_DMA_IRQHandler+0xd2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a4a      	ldr	r2, [pc, #296]	@ (8006c08 <HAL_DMA_IRQHandler+0x1ec>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d004      	beq.n	8006aee <HAL_DMA_IRQHandler+0xd2>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a48      	ldr	r2, [pc, #288]	@ (8006c0c <HAL_DMA_IRQHandler+0x1f0>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d101      	bne.n	8006af2 <HAL_DMA_IRQHandler+0xd6>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <HAL_DMA_IRQHandler+0xd8>
 8006af2:	2300      	movs	r3, #0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 842b 	beq.w	8007350 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006afe:	f003 031f 	and.w	r3, r3, #31
 8006b02:	2208      	movs	r2, #8
 8006b04:	409a      	lsls	r2, r3
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 80a2 	beq.w	8006c54 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a2e      	ldr	r2, [pc, #184]	@ (8006bd0 <HAL_DMA_IRQHandler+0x1b4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d04a      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x194>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8006bd4 <HAL_DMA_IRQHandler+0x1b8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d045      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x194>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a2b      	ldr	r2, [pc, #172]	@ (8006bd8 <HAL_DMA_IRQHandler+0x1bc>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d040      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x194>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a2a      	ldr	r2, [pc, #168]	@ (8006bdc <HAL_DMA_IRQHandler+0x1c0>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d03b      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x194>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a28      	ldr	r2, [pc, #160]	@ (8006be0 <HAL_DMA_IRQHandler+0x1c4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d036      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x194>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a27      	ldr	r2, [pc, #156]	@ (8006be4 <HAL_DMA_IRQHandler+0x1c8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d031      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x194>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a25      	ldr	r2, [pc, #148]	@ (8006be8 <HAL_DMA_IRQHandler+0x1cc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d02c      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x194>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a24      	ldr	r2, [pc, #144]	@ (8006bec <HAL_DMA_IRQHandler+0x1d0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d027      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x194>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a22      	ldr	r2, [pc, #136]	@ (8006bf0 <HAL_DMA_IRQHandler+0x1d4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d022      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x194>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a21      	ldr	r2, [pc, #132]	@ (8006bf4 <HAL_DMA_IRQHandler+0x1d8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d01d      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x194>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a1f      	ldr	r2, [pc, #124]	@ (8006bf8 <HAL_DMA_IRQHandler+0x1dc>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d018      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x194>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a1e      	ldr	r2, [pc, #120]	@ (8006bfc <HAL_DMA_IRQHandler+0x1e0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d013      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x194>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8006c00 <HAL_DMA_IRQHandler+0x1e4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00e      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x194>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1b      	ldr	r2, [pc, #108]	@ (8006c04 <HAL_DMA_IRQHandler+0x1e8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d009      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x194>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a19      	ldr	r2, [pc, #100]	@ (8006c08 <HAL_DMA_IRQHandler+0x1ec>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d004      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x194>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a18      	ldr	r2, [pc, #96]	@ (8006c0c <HAL_DMA_IRQHandler+0x1f0>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d12f      	bne.n	8006c10 <HAL_DMA_IRQHandler+0x1f4>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0304 	and.w	r3, r3, #4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	bf14      	ite	ne
 8006bbe:	2301      	movne	r3, #1
 8006bc0:	2300      	moveq	r3, #0
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	e02e      	b.n	8006c24 <HAL_DMA_IRQHandler+0x208>
 8006bc6:	bf00      	nop
 8006bc8:	240000b4 	.word	0x240000b4
 8006bcc:	1b4e81b5 	.word	0x1b4e81b5
 8006bd0:	40020010 	.word	0x40020010
 8006bd4:	40020028 	.word	0x40020028
 8006bd8:	40020040 	.word	0x40020040
 8006bdc:	40020058 	.word	0x40020058
 8006be0:	40020070 	.word	0x40020070
 8006be4:	40020088 	.word	0x40020088
 8006be8:	400200a0 	.word	0x400200a0
 8006bec:	400200b8 	.word	0x400200b8
 8006bf0:	40020410 	.word	0x40020410
 8006bf4:	40020428 	.word	0x40020428
 8006bf8:	40020440 	.word	0x40020440
 8006bfc:	40020458 	.word	0x40020458
 8006c00:	40020470 	.word	0x40020470
 8006c04:	40020488 	.word	0x40020488
 8006c08:	400204a0 	.word	0x400204a0
 8006c0c:	400204b8 	.word	0x400204b8
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	bf14      	ite	ne
 8006c1e:	2301      	movne	r3, #1
 8006c20:	2300      	moveq	r3, #0
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d015      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f022 0204 	bic.w	r2, r2, #4
 8006c36:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c3c:	f003 031f 	and.w	r3, r3, #31
 8006c40:	2208      	movs	r2, #8
 8006c42:	409a      	lsls	r2, r3
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c4c:	f043 0201 	orr.w	r2, r3, #1
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c58:	f003 031f 	and.w	r3, r3, #31
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d06e      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a69      	ldr	r2, [pc, #420]	@ (8006e14 <HAL_DMA_IRQHandler+0x3f8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d04a      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x2ee>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a67      	ldr	r2, [pc, #412]	@ (8006e18 <HAL_DMA_IRQHandler+0x3fc>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d045      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x2ee>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a66      	ldr	r2, [pc, #408]	@ (8006e1c <HAL_DMA_IRQHandler+0x400>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d040      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x2ee>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a64      	ldr	r2, [pc, #400]	@ (8006e20 <HAL_DMA_IRQHandler+0x404>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d03b      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x2ee>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a63      	ldr	r2, [pc, #396]	@ (8006e24 <HAL_DMA_IRQHandler+0x408>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d036      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x2ee>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a61      	ldr	r2, [pc, #388]	@ (8006e28 <HAL_DMA_IRQHandler+0x40c>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d031      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x2ee>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a60      	ldr	r2, [pc, #384]	@ (8006e2c <HAL_DMA_IRQHandler+0x410>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d02c      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x2ee>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a5e      	ldr	r2, [pc, #376]	@ (8006e30 <HAL_DMA_IRQHandler+0x414>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d027      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x2ee>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a5d      	ldr	r2, [pc, #372]	@ (8006e34 <HAL_DMA_IRQHandler+0x418>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d022      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x2ee>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a5b      	ldr	r2, [pc, #364]	@ (8006e38 <HAL_DMA_IRQHandler+0x41c>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d01d      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x2ee>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a5a      	ldr	r2, [pc, #360]	@ (8006e3c <HAL_DMA_IRQHandler+0x420>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d018      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x2ee>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a58      	ldr	r2, [pc, #352]	@ (8006e40 <HAL_DMA_IRQHandler+0x424>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x2ee>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a57      	ldr	r2, [pc, #348]	@ (8006e44 <HAL_DMA_IRQHandler+0x428>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00e      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x2ee>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a55      	ldr	r2, [pc, #340]	@ (8006e48 <HAL_DMA_IRQHandler+0x42c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d009      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x2ee>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a54      	ldr	r2, [pc, #336]	@ (8006e4c <HAL_DMA_IRQHandler+0x430>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d004      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x2ee>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a52      	ldr	r2, [pc, #328]	@ (8006e50 <HAL_DMA_IRQHandler+0x434>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d10a      	bne.n	8006d20 <HAL_DMA_IRQHandler+0x304>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	bf14      	ite	ne
 8006d18:	2301      	movne	r3, #1
 8006d1a:	2300      	moveq	r3, #0
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	e003      	b.n	8006d28 <HAL_DMA_IRQHandler+0x30c>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2300      	movs	r3, #0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00d      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	2201      	movs	r2, #1
 8006d36:	409a      	lsls	r2, r3
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d40:	f043 0202 	orr.w	r2, r3, #2
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d4c:	f003 031f 	and.w	r3, r3, #31
 8006d50:	2204      	movs	r2, #4
 8006d52:	409a      	lsls	r2, r3
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	4013      	ands	r3, r2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 808f 	beq.w	8006e7c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a2c      	ldr	r2, [pc, #176]	@ (8006e14 <HAL_DMA_IRQHandler+0x3f8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d04a      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x3e2>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a2a      	ldr	r2, [pc, #168]	@ (8006e18 <HAL_DMA_IRQHandler+0x3fc>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d045      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x3e2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a29      	ldr	r2, [pc, #164]	@ (8006e1c <HAL_DMA_IRQHandler+0x400>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d040      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x3e2>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a27      	ldr	r2, [pc, #156]	@ (8006e20 <HAL_DMA_IRQHandler+0x404>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d03b      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x3e2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a26      	ldr	r2, [pc, #152]	@ (8006e24 <HAL_DMA_IRQHandler+0x408>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d036      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x3e2>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a24      	ldr	r2, [pc, #144]	@ (8006e28 <HAL_DMA_IRQHandler+0x40c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d031      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x3e2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a23      	ldr	r2, [pc, #140]	@ (8006e2c <HAL_DMA_IRQHandler+0x410>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d02c      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x3e2>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a21      	ldr	r2, [pc, #132]	@ (8006e30 <HAL_DMA_IRQHandler+0x414>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d027      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x3e2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a20      	ldr	r2, [pc, #128]	@ (8006e34 <HAL_DMA_IRQHandler+0x418>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d022      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x3e2>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8006e38 <HAL_DMA_IRQHandler+0x41c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d01d      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x3e2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a1d      	ldr	r2, [pc, #116]	@ (8006e3c <HAL_DMA_IRQHandler+0x420>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d018      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x3e2>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8006e40 <HAL_DMA_IRQHandler+0x424>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d013      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x3e2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a1a      	ldr	r2, [pc, #104]	@ (8006e44 <HAL_DMA_IRQHandler+0x428>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d00e      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x3e2>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a18      	ldr	r2, [pc, #96]	@ (8006e48 <HAL_DMA_IRQHandler+0x42c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d009      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x3e2>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a17      	ldr	r2, [pc, #92]	@ (8006e4c <HAL_DMA_IRQHandler+0x430>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d004      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x3e2>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a15      	ldr	r2, [pc, #84]	@ (8006e50 <HAL_DMA_IRQHandler+0x434>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d12a      	bne.n	8006e54 <HAL_DMA_IRQHandler+0x438>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	bf14      	ite	ne
 8006e0c:	2301      	movne	r3, #1
 8006e0e:	2300      	moveq	r3, #0
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	e023      	b.n	8006e5c <HAL_DMA_IRQHandler+0x440>
 8006e14:	40020010 	.word	0x40020010
 8006e18:	40020028 	.word	0x40020028
 8006e1c:	40020040 	.word	0x40020040
 8006e20:	40020058 	.word	0x40020058
 8006e24:	40020070 	.word	0x40020070
 8006e28:	40020088 	.word	0x40020088
 8006e2c:	400200a0 	.word	0x400200a0
 8006e30:	400200b8 	.word	0x400200b8
 8006e34:	40020410 	.word	0x40020410
 8006e38:	40020428 	.word	0x40020428
 8006e3c:	40020440 	.word	0x40020440
 8006e40:	40020458 	.word	0x40020458
 8006e44:	40020470 	.word	0x40020470
 8006e48:	40020488 	.word	0x40020488
 8006e4c:	400204a0 	.word	0x400204a0
 8006e50:	400204b8 	.word	0x400204b8
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00d      	beq.n	8006e7c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e64:	f003 031f 	and.w	r3, r3, #31
 8006e68:	2204      	movs	r2, #4
 8006e6a:	409a      	lsls	r2, r3
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e74:	f043 0204 	orr.w	r2, r3, #4
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e80:	f003 031f 	and.w	r3, r3, #31
 8006e84:	2210      	movs	r2, #16
 8006e86:	409a      	lsls	r2, r3
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 80a6 	beq.w	8006fde <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a85      	ldr	r2, [pc, #532]	@ (80070ac <HAL_DMA_IRQHandler+0x690>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d04a      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x516>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a83      	ldr	r2, [pc, #524]	@ (80070b0 <HAL_DMA_IRQHandler+0x694>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d045      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x516>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a82      	ldr	r2, [pc, #520]	@ (80070b4 <HAL_DMA_IRQHandler+0x698>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d040      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x516>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a80      	ldr	r2, [pc, #512]	@ (80070b8 <HAL_DMA_IRQHandler+0x69c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d03b      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x516>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a7f      	ldr	r2, [pc, #508]	@ (80070bc <HAL_DMA_IRQHandler+0x6a0>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d036      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x516>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a7d      	ldr	r2, [pc, #500]	@ (80070c0 <HAL_DMA_IRQHandler+0x6a4>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d031      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x516>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a7c      	ldr	r2, [pc, #496]	@ (80070c4 <HAL_DMA_IRQHandler+0x6a8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d02c      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x516>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a7a      	ldr	r2, [pc, #488]	@ (80070c8 <HAL_DMA_IRQHandler+0x6ac>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d027      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x516>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a79      	ldr	r2, [pc, #484]	@ (80070cc <HAL_DMA_IRQHandler+0x6b0>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d022      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x516>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a77      	ldr	r2, [pc, #476]	@ (80070d0 <HAL_DMA_IRQHandler+0x6b4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d01d      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x516>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a76      	ldr	r2, [pc, #472]	@ (80070d4 <HAL_DMA_IRQHandler+0x6b8>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d018      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x516>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a74      	ldr	r2, [pc, #464]	@ (80070d8 <HAL_DMA_IRQHandler+0x6bc>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d013      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x516>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a73      	ldr	r2, [pc, #460]	@ (80070dc <HAL_DMA_IRQHandler+0x6c0>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00e      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x516>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a71      	ldr	r2, [pc, #452]	@ (80070e0 <HAL_DMA_IRQHandler+0x6c4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d009      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x516>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a70      	ldr	r2, [pc, #448]	@ (80070e4 <HAL_DMA_IRQHandler+0x6c8>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d004      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x516>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a6e      	ldr	r2, [pc, #440]	@ (80070e8 <HAL_DMA_IRQHandler+0x6cc>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d10a      	bne.n	8006f48 <HAL_DMA_IRQHandler+0x52c>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0308 	and.w	r3, r3, #8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	bf14      	ite	ne
 8006f40:	2301      	movne	r3, #1
 8006f42:	2300      	moveq	r3, #0
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	e009      	b.n	8006f5c <HAL_DMA_IRQHandler+0x540>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0304 	and.w	r3, r3, #4
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	bf14      	ite	ne
 8006f56:	2301      	movne	r3, #1
 8006f58:	2300      	moveq	r3, #0
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d03e      	beq.n	8006fde <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f64:	f003 031f 	and.w	r3, r3, #31
 8006f68:	2210      	movs	r2, #16
 8006f6a:	409a      	lsls	r2, r3
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d018      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d108      	bne.n	8006f9e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d024      	beq.n	8006fde <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	4798      	blx	r3
 8006f9c:	e01f      	b.n	8006fde <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d01b      	beq.n	8006fde <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	4798      	blx	r3
 8006fae:	e016      	b.n	8006fde <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d107      	bne.n	8006fce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0208 	bic.w	r2, r2, #8
 8006fcc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fe2:	f003 031f 	and.w	r3, r3, #31
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	409a      	lsls	r2, r3
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	4013      	ands	r3, r2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 8110 	beq.w	8007214 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80070ac <HAL_DMA_IRQHandler+0x690>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d04a      	beq.n	8007094 <HAL_DMA_IRQHandler+0x678>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a2b      	ldr	r2, [pc, #172]	@ (80070b0 <HAL_DMA_IRQHandler+0x694>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d045      	beq.n	8007094 <HAL_DMA_IRQHandler+0x678>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a29      	ldr	r2, [pc, #164]	@ (80070b4 <HAL_DMA_IRQHandler+0x698>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d040      	beq.n	8007094 <HAL_DMA_IRQHandler+0x678>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a28      	ldr	r2, [pc, #160]	@ (80070b8 <HAL_DMA_IRQHandler+0x69c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d03b      	beq.n	8007094 <HAL_DMA_IRQHandler+0x678>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a26      	ldr	r2, [pc, #152]	@ (80070bc <HAL_DMA_IRQHandler+0x6a0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d036      	beq.n	8007094 <HAL_DMA_IRQHandler+0x678>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a25      	ldr	r2, [pc, #148]	@ (80070c0 <HAL_DMA_IRQHandler+0x6a4>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d031      	beq.n	8007094 <HAL_DMA_IRQHandler+0x678>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a23      	ldr	r2, [pc, #140]	@ (80070c4 <HAL_DMA_IRQHandler+0x6a8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d02c      	beq.n	8007094 <HAL_DMA_IRQHandler+0x678>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a22      	ldr	r2, [pc, #136]	@ (80070c8 <HAL_DMA_IRQHandler+0x6ac>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d027      	beq.n	8007094 <HAL_DMA_IRQHandler+0x678>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a20      	ldr	r2, [pc, #128]	@ (80070cc <HAL_DMA_IRQHandler+0x6b0>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d022      	beq.n	8007094 <HAL_DMA_IRQHandler+0x678>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a1f      	ldr	r2, [pc, #124]	@ (80070d0 <HAL_DMA_IRQHandler+0x6b4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d01d      	beq.n	8007094 <HAL_DMA_IRQHandler+0x678>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a1d      	ldr	r2, [pc, #116]	@ (80070d4 <HAL_DMA_IRQHandler+0x6b8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d018      	beq.n	8007094 <HAL_DMA_IRQHandler+0x678>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1c      	ldr	r2, [pc, #112]	@ (80070d8 <HAL_DMA_IRQHandler+0x6bc>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d013      	beq.n	8007094 <HAL_DMA_IRQHandler+0x678>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1a      	ldr	r2, [pc, #104]	@ (80070dc <HAL_DMA_IRQHandler+0x6c0>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00e      	beq.n	8007094 <HAL_DMA_IRQHandler+0x678>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a19      	ldr	r2, [pc, #100]	@ (80070e0 <HAL_DMA_IRQHandler+0x6c4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d009      	beq.n	8007094 <HAL_DMA_IRQHandler+0x678>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a17      	ldr	r2, [pc, #92]	@ (80070e4 <HAL_DMA_IRQHandler+0x6c8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d004      	beq.n	8007094 <HAL_DMA_IRQHandler+0x678>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a16      	ldr	r2, [pc, #88]	@ (80070e8 <HAL_DMA_IRQHandler+0x6cc>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d12b      	bne.n	80070ec <HAL_DMA_IRQHandler+0x6d0>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0310 	and.w	r3, r3, #16
 800709e:	2b00      	cmp	r3, #0
 80070a0:	bf14      	ite	ne
 80070a2:	2301      	movne	r3, #1
 80070a4:	2300      	moveq	r3, #0
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	e02a      	b.n	8007100 <HAL_DMA_IRQHandler+0x6e4>
 80070aa:	bf00      	nop
 80070ac:	40020010 	.word	0x40020010
 80070b0:	40020028 	.word	0x40020028
 80070b4:	40020040 	.word	0x40020040
 80070b8:	40020058 	.word	0x40020058
 80070bc:	40020070 	.word	0x40020070
 80070c0:	40020088 	.word	0x40020088
 80070c4:	400200a0 	.word	0x400200a0
 80070c8:	400200b8 	.word	0x400200b8
 80070cc:	40020410 	.word	0x40020410
 80070d0:	40020428 	.word	0x40020428
 80070d4:	40020440 	.word	0x40020440
 80070d8:	40020458 	.word	0x40020458
 80070dc:	40020470 	.word	0x40020470
 80070e0:	40020488 	.word	0x40020488
 80070e4:	400204a0 	.word	0x400204a0
 80070e8:	400204b8 	.word	0x400204b8
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bf14      	ite	ne
 80070fa:	2301      	movne	r3, #1
 80070fc:	2300      	moveq	r3, #0
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 8087 	beq.w	8007214 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800710a:	f003 031f 	and.w	r3, r3, #31
 800710e:	2220      	movs	r2, #32
 8007110:	409a      	lsls	r2, r3
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b04      	cmp	r3, #4
 8007120:	d139      	bne.n	8007196 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0216 	bic.w	r2, r2, #22
 8007130:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	695a      	ldr	r2, [r3, #20]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007140:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007146:	2b00      	cmp	r3, #0
 8007148:	d103      	bne.n	8007152 <HAL_DMA_IRQHandler+0x736>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800714e:	2b00      	cmp	r3, #0
 8007150:	d007      	beq.n	8007162 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0208 	bic.w	r2, r2, #8
 8007160:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007166:	f003 031f 	and.w	r3, r3, #31
 800716a:	223f      	movs	r2, #63	@ 0x3f
 800716c:	409a      	lsls	r2, r3
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 834a 	beq.w	8007820 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	4798      	blx	r3
          }
          return;
 8007194:	e344      	b.n	8007820 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d018      	beq.n	80071d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d108      	bne.n	80071c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d02c      	beq.n	8007214 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	4798      	blx	r3
 80071c2:	e027      	b.n	8007214 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d023      	beq.n	8007214 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	4798      	blx	r3
 80071d4:	e01e      	b.n	8007214 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10f      	bne.n	8007204 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f022 0210 	bic.w	r2, r2, #16
 80071f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 8306 	beq.w	800782a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 8088 	beq.w	800733c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2204      	movs	r2, #4
 8007230:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a7a      	ldr	r2, [pc, #488]	@ (8007424 <HAL_DMA_IRQHandler+0xa08>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d04a      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x8b8>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a79      	ldr	r2, [pc, #484]	@ (8007428 <HAL_DMA_IRQHandler+0xa0c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d045      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x8b8>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a77      	ldr	r2, [pc, #476]	@ (800742c <HAL_DMA_IRQHandler+0xa10>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d040      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x8b8>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a76      	ldr	r2, [pc, #472]	@ (8007430 <HAL_DMA_IRQHandler+0xa14>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d03b      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x8b8>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a74      	ldr	r2, [pc, #464]	@ (8007434 <HAL_DMA_IRQHandler+0xa18>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d036      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x8b8>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a73      	ldr	r2, [pc, #460]	@ (8007438 <HAL_DMA_IRQHandler+0xa1c>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d031      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x8b8>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a71      	ldr	r2, [pc, #452]	@ (800743c <HAL_DMA_IRQHandler+0xa20>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d02c      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x8b8>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a70      	ldr	r2, [pc, #448]	@ (8007440 <HAL_DMA_IRQHandler+0xa24>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d027      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x8b8>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a6e      	ldr	r2, [pc, #440]	@ (8007444 <HAL_DMA_IRQHandler+0xa28>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d022      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x8b8>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a6d      	ldr	r2, [pc, #436]	@ (8007448 <HAL_DMA_IRQHandler+0xa2c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d01d      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x8b8>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a6b      	ldr	r2, [pc, #428]	@ (800744c <HAL_DMA_IRQHandler+0xa30>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d018      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x8b8>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a6a      	ldr	r2, [pc, #424]	@ (8007450 <HAL_DMA_IRQHandler+0xa34>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d013      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x8b8>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a68      	ldr	r2, [pc, #416]	@ (8007454 <HAL_DMA_IRQHandler+0xa38>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d00e      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x8b8>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a67      	ldr	r2, [pc, #412]	@ (8007458 <HAL_DMA_IRQHandler+0xa3c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d009      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x8b8>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a65      	ldr	r2, [pc, #404]	@ (800745c <HAL_DMA_IRQHandler+0xa40>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d004      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x8b8>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a64      	ldr	r2, [pc, #400]	@ (8007460 <HAL_DMA_IRQHandler+0xa44>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d108      	bne.n	80072e6 <HAL_DMA_IRQHandler+0x8ca>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0201 	bic.w	r2, r2, #1
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	e007      	b.n	80072f6 <HAL_DMA_IRQHandler+0x8da>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0201 	bic.w	r2, r2, #1
 80072f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3301      	adds	r3, #1
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072fe:	429a      	cmp	r2, r3
 8007300:	d307      	bcc.n	8007312 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1f2      	bne.n	80072f6 <HAL_DMA_IRQHandler+0x8da>
 8007310:	e000      	b.n	8007314 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007312:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	2b00      	cmp	r3, #0
 8007320:	d004      	beq.n	800732c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2203      	movs	r2, #3
 8007326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800732a:	e003      	b.n	8007334 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 8272 	beq.w	800782a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	4798      	blx	r3
 800734e:	e26c      	b.n	800782a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a43      	ldr	r2, [pc, #268]	@ (8007464 <HAL_DMA_IRQHandler+0xa48>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d022      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x984>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a42      	ldr	r2, [pc, #264]	@ (8007468 <HAL_DMA_IRQHandler+0xa4c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d01d      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x984>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a40      	ldr	r2, [pc, #256]	@ (800746c <HAL_DMA_IRQHandler+0xa50>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d018      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x984>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a3f      	ldr	r2, [pc, #252]	@ (8007470 <HAL_DMA_IRQHandler+0xa54>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d013      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x984>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a3d      	ldr	r2, [pc, #244]	@ (8007474 <HAL_DMA_IRQHandler+0xa58>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d00e      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x984>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a3c      	ldr	r2, [pc, #240]	@ (8007478 <HAL_DMA_IRQHandler+0xa5c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d009      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x984>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a3a      	ldr	r2, [pc, #232]	@ (800747c <HAL_DMA_IRQHandler+0xa60>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d004      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x984>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a39      	ldr	r2, [pc, #228]	@ (8007480 <HAL_DMA_IRQHandler+0xa64>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d101      	bne.n	80073a4 <HAL_DMA_IRQHandler+0x988>
 80073a0:	2301      	movs	r3, #1
 80073a2:	e000      	b.n	80073a6 <HAL_DMA_IRQHandler+0x98a>
 80073a4:	2300      	movs	r3, #0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 823f 	beq.w	800782a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b8:	f003 031f 	and.w	r3, r3, #31
 80073bc:	2204      	movs	r2, #4
 80073be:	409a      	lsls	r2, r3
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	4013      	ands	r3, r2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 80cd 	beq.w	8007564 <HAL_DMA_IRQHandler+0xb48>
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 80c7 	beq.w	8007564 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073da:	f003 031f 	and.w	r3, r3, #31
 80073de:	2204      	movs	r2, #4
 80073e0:	409a      	lsls	r2, r3
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d049      	beq.n	8007484 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d109      	bne.n	800740e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f000 8210 	beq.w	8007824 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800740c:	e20a      	b.n	8007824 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 8206 	beq.w	8007824 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007420:	e200      	b.n	8007824 <HAL_DMA_IRQHandler+0xe08>
 8007422:	bf00      	nop
 8007424:	40020010 	.word	0x40020010
 8007428:	40020028 	.word	0x40020028
 800742c:	40020040 	.word	0x40020040
 8007430:	40020058 	.word	0x40020058
 8007434:	40020070 	.word	0x40020070
 8007438:	40020088 	.word	0x40020088
 800743c:	400200a0 	.word	0x400200a0
 8007440:	400200b8 	.word	0x400200b8
 8007444:	40020410 	.word	0x40020410
 8007448:	40020428 	.word	0x40020428
 800744c:	40020440 	.word	0x40020440
 8007450:	40020458 	.word	0x40020458
 8007454:	40020470 	.word	0x40020470
 8007458:	40020488 	.word	0x40020488
 800745c:	400204a0 	.word	0x400204a0
 8007460:	400204b8 	.word	0x400204b8
 8007464:	58025408 	.word	0x58025408
 8007468:	5802541c 	.word	0x5802541c
 800746c:	58025430 	.word	0x58025430
 8007470:	58025444 	.word	0x58025444
 8007474:	58025458 	.word	0x58025458
 8007478:	5802546c 	.word	0x5802546c
 800747c:	58025480 	.word	0x58025480
 8007480:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b00      	cmp	r3, #0
 800748c:	d160      	bne.n	8007550 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a7f      	ldr	r2, [pc, #508]	@ (8007690 <HAL_DMA_IRQHandler+0xc74>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d04a      	beq.n	800752e <HAL_DMA_IRQHandler+0xb12>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a7d      	ldr	r2, [pc, #500]	@ (8007694 <HAL_DMA_IRQHandler+0xc78>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d045      	beq.n	800752e <HAL_DMA_IRQHandler+0xb12>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a7c      	ldr	r2, [pc, #496]	@ (8007698 <HAL_DMA_IRQHandler+0xc7c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d040      	beq.n	800752e <HAL_DMA_IRQHandler+0xb12>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a7a      	ldr	r2, [pc, #488]	@ (800769c <HAL_DMA_IRQHandler+0xc80>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d03b      	beq.n	800752e <HAL_DMA_IRQHandler+0xb12>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a79      	ldr	r2, [pc, #484]	@ (80076a0 <HAL_DMA_IRQHandler+0xc84>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d036      	beq.n	800752e <HAL_DMA_IRQHandler+0xb12>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a77      	ldr	r2, [pc, #476]	@ (80076a4 <HAL_DMA_IRQHandler+0xc88>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d031      	beq.n	800752e <HAL_DMA_IRQHandler+0xb12>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a76      	ldr	r2, [pc, #472]	@ (80076a8 <HAL_DMA_IRQHandler+0xc8c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d02c      	beq.n	800752e <HAL_DMA_IRQHandler+0xb12>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a74      	ldr	r2, [pc, #464]	@ (80076ac <HAL_DMA_IRQHandler+0xc90>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d027      	beq.n	800752e <HAL_DMA_IRQHandler+0xb12>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a73      	ldr	r2, [pc, #460]	@ (80076b0 <HAL_DMA_IRQHandler+0xc94>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d022      	beq.n	800752e <HAL_DMA_IRQHandler+0xb12>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a71      	ldr	r2, [pc, #452]	@ (80076b4 <HAL_DMA_IRQHandler+0xc98>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d01d      	beq.n	800752e <HAL_DMA_IRQHandler+0xb12>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a70      	ldr	r2, [pc, #448]	@ (80076b8 <HAL_DMA_IRQHandler+0xc9c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d018      	beq.n	800752e <HAL_DMA_IRQHandler+0xb12>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a6e      	ldr	r2, [pc, #440]	@ (80076bc <HAL_DMA_IRQHandler+0xca0>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d013      	beq.n	800752e <HAL_DMA_IRQHandler+0xb12>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a6d      	ldr	r2, [pc, #436]	@ (80076c0 <HAL_DMA_IRQHandler+0xca4>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d00e      	beq.n	800752e <HAL_DMA_IRQHandler+0xb12>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a6b      	ldr	r2, [pc, #428]	@ (80076c4 <HAL_DMA_IRQHandler+0xca8>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d009      	beq.n	800752e <HAL_DMA_IRQHandler+0xb12>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a6a      	ldr	r2, [pc, #424]	@ (80076c8 <HAL_DMA_IRQHandler+0xcac>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d004      	beq.n	800752e <HAL_DMA_IRQHandler+0xb12>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a68      	ldr	r2, [pc, #416]	@ (80076cc <HAL_DMA_IRQHandler+0xcb0>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d108      	bne.n	8007540 <HAL_DMA_IRQHandler+0xb24>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0208 	bic.w	r2, r2, #8
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	e007      	b.n	8007550 <HAL_DMA_IRQHandler+0xb34>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 0204 	bic.w	r2, r2, #4
 800754e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8165 	beq.w	8007824 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007562:	e15f      	b.n	8007824 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007568:	f003 031f 	and.w	r3, r3, #31
 800756c:	2202      	movs	r2, #2
 800756e:	409a      	lsls	r2, r3
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	4013      	ands	r3, r2
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 80c5 	beq.w	8007704 <HAL_DMA_IRQHandler+0xce8>
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 80bf 	beq.w	8007704 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800758a:	f003 031f 	and.w	r3, r3, #31
 800758e:	2202      	movs	r2, #2
 8007590:	409a      	lsls	r2, r3
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d018      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 813a 	beq.w	8007828 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075bc:	e134      	b.n	8007828 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 8130 	beq.w	8007828 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075d0:	e12a      	b.n	8007828 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f003 0320 	and.w	r3, r3, #32
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f040 8089 	bne.w	80076f0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a2b      	ldr	r2, [pc, #172]	@ (8007690 <HAL_DMA_IRQHandler+0xc74>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d04a      	beq.n	800767e <HAL_DMA_IRQHandler+0xc62>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a29      	ldr	r2, [pc, #164]	@ (8007694 <HAL_DMA_IRQHandler+0xc78>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d045      	beq.n	800767e <HAL_DMA_IRQHandler+0xc62>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a28      	ldr	r2, [pc, #160]	@ (8007698 <HAL_DMA_IRQHandler+0xc7c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d040      	beq.n	800767e <HAL_DMA_IRQHandler+0xc62>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a26      	ldr	r2, [pc, #152]	@ (800769c <HAL_DMA_IRQHandler+0xc80>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d03b      	beq.n	800767e <HAL_DMA_IRQHandler+0xc62>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a25      	ldr	r2, [pc, #148]	@ (80076a0 <HAL_DMA_IRQHandler+0xc84>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d036      	beq.n	800767e <HAL_DMA_IRQHandler+0xc62>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a23      	ldr	r2, [pc, #140]	@ (80076a4 <HAL_DMA_IRQHandler+0xc88>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d031      	beq.n	800767e <HAL_DMA_IRQHandler+0xc62>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a22      	ldr	r2, [pc, #136]	@ (80076a8 <HAL_DMA_IRQHandler+0xc8c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d02c      	beq.n	800767e <HAL_DMA_IRQHandler+0xc62>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a20      	ldr	r2, [pc, #128]	@ (80076ac <HAL_DMA_IRQHandler+0xc90>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d027      	beq.n	800767e <HAL_DMA_IRQHandler+0xc62>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a1f      	ldr	r2, [pc, #124]	@ (80076b0 <HAL_DMA_IRQHandler+0xc94>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d022      	beq.n	800767e <HAL_DMA_IRQHandler+0xc62>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a1d      	ldr	r2, [pc, #116]	@ (80076b4 <HAL_DMA_IRQHandler+0xc98>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d01d      	beq.n	800767e <HAL_DMA_IRQHandler+0xc62>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1c      	ldr	r2, [pc, #112]	@ (80076b8 <HAL_DMA_IRQHandler+0xc9c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d018      	beq.n	800767e <HAL_DMA_IRQHandler+0xc62>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a1a      	ldr	r2, [pc, #104]	@ (80076bc <HAL_DMA_IRQHandler+0xca0>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d013      	beq.n	800767e <HAL_DMA_IRQHandler+0xc62>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a19      	ldr	r2, [pc, #100]	@ (80076c0 <HAL_DMA_IRQHandler+0xca4>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d00e      	beq.n	800767e <HAL_DMA_IRQHandler+0xc62>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a17      	ldr	r2, [pc, #92]	@ (80076c4 <HAL_DMA_IRQHandler+0xca8>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d009      	beq.n	800767e <HAL_DMA_IRQHandler+0xc62>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a16      	ldr	r2, [pc, #88]	@ (80076c8 <HAL_DMA_IRQHandler+0xcac>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d004      	beq.n	800767e <HAL_DMA_IRQHandler+0xc62>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a14      	ldr	r2, [pc, #80]	@ (80076cc <HAL_DMA_IRQHandler+0xcb0>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d128      	bne.n	80076d0 <HAL_DMA_IRQHandler+0xcb4>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0214 	bic.w	r2, r2, #20
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	e027      	b.n	80076e0 <HAL_DMA_IRQHandler+0xcc4>
 8007690:	40020010 	.word	0x40020010
 8007694:	40020028 	.word	0x40020028
 8007698:	40020040 	.word	0x40020040
 800769c:	40020058 	.word	0x40020058
 80076a0:	40020070 	.word	0x40020070
 80076a4:	40020088 	.word	0x40020088
 80076a8:	400200a0 	.word	0x400200a0
 80076ac:	400200b8 	.word	0x400200b8
 80076b0:	40020410 	.word	0x40020410
 80076b4:	40020428 	.word	0x40020428
 80076b8:	40020440 	.word	0x40020440
 80076bc:	40020458 	.word	0x40020458
 80076c0:	40020470 	.word	0x40020470
 80076c4:	40020488 	.word	0x40020488
 80076c8:	400204a0 	.word	0x400204a0
 80076cc:	400204b8 	.word	0x400204b8
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 020a 	bic.w	r2, r2, #10
 80076de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 8097 	beq.w	8007828 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007702:	e091      	b.n	8007828 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007708:	f003 031f 	and.w	r3, r3, #31
 800770c:	2208      	movs	r2, #8
 800770e:	409a      	lsls	r2, r3
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	4013      	ands	r3, r2
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 8088 	beq.w	800782a <HAL_DMA_IRQHandler+0xe0e>
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 8082 	beq.w	800782a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a41      	ldr	r2, [pc, #260]	@ (8007830 <HAL_DMA_IRQHandler+0xe14>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d04a      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xdaa>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a3f      	ldr	r2, [pc, #252]	@ (8007834 <HAL_DMA_IRQHandler+0xe18>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d045      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xdaa>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a3e      	ldr	r2, [pc, #248]	@ (8007838 <HAL_DMA_IRQHandler+0xe1c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d040      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xdaa>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a3c      	ldr	r2, [pc, #240]	@ (800783c <HAL_DMA_IRQHandler+0xe20>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d03b      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xdaa>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a3b      	ldr	r2, [pc, #236]	@ (8007840 <HAL_DMA_IRQHandler+0xe24>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d036      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xdaa>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a39      	ldr	r2, [pc, #228]	@ (8007844 <HAL_DMA_IRQHandler+0xe28>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d031      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xdaa>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a38      	ldr	r2, [pc, #224]	@ (8007848 <HAL_DMA_IRQHandler+0xe2c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d02c      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xdaa>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a36      	ldr	r2, [pc, #216]	@ (800784c <HAL_DMA_IRQHandler+0xe30>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d027      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xdaa>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a35      	ldr	r2, [pc, #212]	@ (8007850 <HAL_DMA_IRQHandler+0xe34>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d022      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xdaa>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a33      	ldr	r2, [pc, #204]	@ (8007854 <HAL_DMA_IRQHandler+0xe38>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d01d      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xdaa>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a32      	ldr	r2, [pc, #200]	@ (8007858 <HAL_DMA_IRQHandler+0xe3c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d018      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xdaa>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a30      	ldr	r2, [pc, #192]	@ (800785c <HAL_DMA_IRQHandler+0xe40>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d013      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xdaa>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a2f      	ldr	r2, [pc, #188]	@ (8007860 <HAL_DMA_IRQHandler+0xe44>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00e      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xdaa>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a2d      	ldr	r2, [pc, #180]	@ (8007864 <HAL_DMA_IRQHandler+0xe48>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d009      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xdaa>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a2c      	ldr	r2, [pc, #176]	@ (8007868 <HAL_DMA_IRQHandler+0xe4c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d004      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xdaa>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a2a      	ldr	r2, [pc, #168]	@ (800786c <HAL_DMA_IRQHandler+0xe50>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d108      	bne.n	80077d8 <HAL_DMA_IRQHandler+0xdbc>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 021c 	bic.w	r2, r2, #28
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	e007      	b.n	80077e8 <HAL_DMA_IRQHandler+0xdcc>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 020e 	bic.w	r2, r2, #14
 80077e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ec:	f003 031f 	and.w	r3, r3, #31
 80077f0:	2201      	movs	r2, #1
 80077f2:	409a      	lsls	r2, r3
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007812:	2b00      	cmp	r3, #0
 8007814:	d009      	beq.n	800782a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	4798      	blx	r3
 800781e:	e004      	b.n	800782a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007820:	bf00      	nop
 8007822:	e002      	b.n	800782a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007824:	bf00      	nop
 8007826:	e000      	b.n	800782a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007828:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800782a:	3728      	adds	r7, #40	@ 0x28
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	40020010 	.word	0x40020010
 8007834:	40020028 	.word	0x40020028
 8007838:	40020040 	.word	0x40020040
 800783c:	40020058 	.word	0x40020058
 8007840:	40020070 	.word	0x40020070
 8007844:	40020088 	.word	0x40020088
 8007848:	400200a0 	.word	0x400200a0
 800784c:	400200b8 	.word	0x400200b8
 8007850:	40020410 	.word	0x40020410
 8007854:	40020428 	.word	0x40020428
 8007858:	40020440 	.word	0x40020440
 800785c:	40020458 	.word	0x40020458
 8007860:	40020470 	.word	0x40020470
 8007864:	40020488 	.word	0x40020488
 8007868:	400204a0 	.word	0x400204a0
 800786c:	400204b8 	.word	0x400204b8

08007870 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a42      	ldr	r2, [pc, #264]	@ (8007988 <DMA_CalcBaseAndBitshift+0x118>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d04a      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a41      	ldr	r2, [pc, #260]	@ (800798c <DMA_CalcBaseAndBitshift+0x11c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d045      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a3f      	ldr	r2, [pc, #252]	@ (8007990 <DMA_CalcBaseAndBitshift+0x120>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d040      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a3e      	ldr	r2, [pc, #248]	@ (8007994 <DMA_CalcBaseAndBitshift+0x124>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d03b      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a3c      	ldr	r2, [pc, #240]	@ (8007998 <DMA_CalcBaseAndBitshift+0x128>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d036      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a3b      	ldr	r2, [pc, #236]	@ (800799c <DMA_CalcBaseAndBitshift+0x12c>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d031      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a39      	ldr	r2, [pc, #228]	@ (80079a0 <DMA_CalcBaseAndBitshift+0x130>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d02c      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a38      	ldr	r2, [pc, #224]	@ (80079a4 <DMA_CalcBaseAndBitshift+0x134>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d027      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a36      	ldr	r2, [pc, #216]	@ (80079a8 <DMA_CalcBaseAndBitshift+0x138>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d022      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a35      	ldr	r2, [pc, #212]	@ (80079ac <DMA_CalcBaseAndBitshift+0x13c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d01d      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a33      	ldr	r2, [pc, #204]	@ (80079b0 <DMA_CalcBaseAndBitshift+0x140>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d018      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a32      	ldr	r2, [pc, #200]	@ (80079b4 <DMA_CalcBaseAndBitshift+0x144>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a30      	ldr	r2, [pc, #192]	@ (80079b8 <DMA_CalcBaseAndBitshift+0x148>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00e      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a2f      	ldr	r2, [pc, #188]	@ (80079bc <DMA_CalcBaseAndBitshift+0x14c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d009      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a2d      	ldr	r2, [pc, #180]	@ (80079c0 <DMA_CalcBaseAndBitshift+0x150>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d004      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a2c      	ldr	r2, [pc, #176]	@ (80079c4 <DMA_CalcBaseAndBitshift+0x154>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d101      	bne.n	800791c <DMA_CalcBaseAndBitshift+0xac>
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <DMA_CalcBaseAndBitshift+0xae>
 800791c:	2300      	movs	r3, #0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d024      	beq.n	800796c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	b2db      	uxtb	r3, r3
 8007928:	3b10      	subs	r3, #16
 800792a:	4a27      	ldr	r2, [pc, #156]	@ (80079c8 <DMA_CalcBaseAndBitshift+0x158>)
 800792c:	fba2 2303 	umull	r2, r3, r2, r3
 8007930:	091b      	lsrs	r3, r3, #4
 8007932:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	4a24      	ldr	r2, [pc, #144]	@ (80079cc <DMA_CalcBaseAndBitshift+0x15c>)
 800793c:	5cd3      	ldrb	r3, [r2, r3]
 800793e:	461a      	mov	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b03      	cmp	r3, #3
 8007948:	d908      	bls.n	800795c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	4b1f      	ldr	r3, [pc, #124]	@ (80079d0 <DMA_CalcBaseAndBitshift+0x160>)
 8007952:	4013      	ands	r3, r2
 8007954:	1d1a      	adds	r2, r3, #4
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	659a      	str	r2, [r3, #88]	@ 0x58
 800795a:	e00d      	b.n	8007978 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	4b1b      	ldr	r3, [pc, #108]	@ (80079d0 <DMA_CalcBaseAndBitshift+0x160>)
 8007964:	4013      	ands	r3, r2
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	6593      	str	r3, [r2, #88]	@ 0x58
 800796a:	e005      	b.n	8007978 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800797c:	4618      	mov	r0, r3
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	40020010 	.word	0x40020010
 800798c:	40020028 	.word	0x40020028
 8007990:	40020040 	.word	0x40020040
 8007994:	40020058 	.word	0x40020058
 8007998:	40020070 	.word	0x40020070
 800799c:	40020088 	.word	0x40020088
 80079a0:	400200a0 	.word	0x400200a0
 80079a4:	400200b8 	.word	0x400200b8
 80079a8:	40020410 	.word	0x40020410
 80079ac:	40020428 	.word	0x40020428
 80079b0:	40020440 	.word	0x40020440
 80079b4:	40020458 	.word	0x40020458
 80079b8:	40020470 	.word	0x40020470
 80079bc:	40020488 	.word	0x40020488
 80079c0:	400204a0 	.word	0x400204a0
 80079c4:	400204b8 	.word	0x400204b8
 80079c8:	aaaaaaab 	.word	0xaaaaaaab
 80079cc:	0801a314 	.word	0x0801a314
 80079d0:	fffffc00 	.word	0xfffffc00

080079d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d120      	bne.n	8007a2a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d858      	bhi.n	8007aa2 <DMA_CheckFifoParam+0xce>
 80079f0:	a201      	add	r2, pc, #4	@ (adr r2, 80079f8 <DMA_CheckFifoParam+0x24>)
 80079f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f6:	bf00      	nop
 80079f8:	08007a09 	.word	0x08007a09
 80079fc:	08007a1b 	.word	0x08007a1b
 8007a00:	08007a09 	.word	0x08007a09
 8007a04:	08007aa3 	.word	0x08007aa3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d048      	beq.n	8007aa6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a18:	e045      	b.n	8007aa6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007a22:	d142      	bne.n	8007aaa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a28:	e03f      	b.n	8007aaa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a32:	d123      	bne.n	8007a7c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d838      	bhi.n	8007aae <DMA_CheckFifoParam+0xda>
 8007a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a44 <DMA_CheckFifoParam+0x70>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007a55 	.word	0x08007a55
 8007a48:	08007a5b 	.word	0x08007a5b
 8007a4c:	08007a55 	.word	0x08007a55
 8007a50:	08007a6d 	.word	0x08007a6d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	73fb      	strb	r3, [r7, #15]
        break;
 8007a58:	e030      	b.n	8007abc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d025      	beq.n	8007ab2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a6a:	e022      	b.n	8007ab2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007a74:	d11f      	bne.n	8007ab6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a7a:	e01c      	b.n	8007ab6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d902      	bls.n	8007a8a <DMA_CheckFifoParam+0xb6>
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d003      	beq.n	8007a90 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007a88:	e018      	b.n	8007abc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	73fb      	strb	r3, [r7, #15]
        break;
 8007a8e:	e015      	b.n	8007abc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00e      	beq.n	8007aba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007aa0:	e00b      	b.n	8007aba <DMA_CheckFifoParam+0xe6>
        break;
 8007aa2:	bf00      	nop
 8007aa4:	e00a      	b.n	8007abc <DMA_CheckFifoParam+0xe8>
        break;
 8007aa6:	bf00      	nop
 8007aa8:	e008      	b.n	8007abc <DMA_CheckFifoParam+0xe8>
        break;
 8007aaa:	bf00      	nop
 8007aac:	e006      	b.n	8007abc <DMA_CheckFifoParam+0xe8>
        break;
 8007aae:	bf00      	nop
 8007ab0:	e004      	b.n	8007abc <DMA_CheckFifoParam+0xe8>
        break;
 8007ab2:	bf00      	nop
 8007ab4:	e002      	b.n	8007abc <DMA_CheckFifoParam+0xe8>
        break;
 8007ab6:	bf00      	nop
 8007ab8:	e000      	b.n	8007abc <DMA_CheckFifoParam+0xe8>
    break;
 8007aba:	bf00      	nop
    }
  }

  return status;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop

08007acc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a38      	ldr	r2, [pc, #224]	@ (8007bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d022      	beq.n	8007b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a36      	ldr	r2, [pc, #216]	@ (8007bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d01d      	beq.n	8007b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a35      	ldr	r2, [pc, #212]	@ (8007bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d018      	beq.n	8007b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a33      	ldr	r2, [pc, #204]	@ (8007bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d013      	beq.n	8007b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a32      	ldr	r2, [pc, #200]	@ (8007bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d00e      	beq.n	8007b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a30      	ldr	r2, [pc, #192]	@ (8007bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d009      	beq.n	8007b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8007bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d004      	beq.n	8007b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a2d      	ldr	r2, [pc, #180]	@ (8007bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d101      	bne.n	8007b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d01a      	beq.n	8007b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	3b08      	subs	r3, #8
 8007b3c:	4a28      	ldr	r2, [pc, #160]	@ (8007be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b42:	091b      	lsrs	r3, r3, #4
 8007b44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	4b26      	ldr	r3, [pc, #152]	@ (8007be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007b4a:	4413      	add	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	461a      	mov	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a24      	ldr	r2, [pc, #144]	@ (8007be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007b58:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f003 031f 	and.w	r3, r3, #31
 8007b60:	2201      	movs	r2, #1
 8007b62:	409a      	lsls	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007b68:	e024      	b.n	8007bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	3b10      	subs	r3, #16
 8007b72:	4a1e      	ldr	r2, [pc, #120]	@ (8007bec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007b74:	fba2 2303 	umull	r2, r3, r2, r3
 8007b78:	091b      	lsrs	r3, r3, #4
 8007b7a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8007bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d806      	bhi.n	8007b92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	4a1b      	ldr	r2, [pc, #108]	@ (8007bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d902      	bls.n	8007b92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3308      	adds	r3, #8
 8007b90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4b18      	ldr	r3, [pc, #96]	@ (8007bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007b96:	4413      	add	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a16      	ldr	r2, [pc, #88]	@ (8007bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007ba4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f003 031f 	and.w	r3, r3, #31
 8007bac:	2201      	movs	r2, #1
 8007bae:	409a      	lsls	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007bb4:	bf00      	nop
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	58025408 	.word	0x58025408
 8007bc4:	5802541c 	.word	0x5802541c
 8007bc8:	58025430 	.word	0x58025430
 8007bcc:	58025444 	.word	0x58025444
 8007bd0:	58025458 	.word	0x58025458
 8007bd4:	5802546c 	.word	0x5802546c
 8007bd8:	58025480 	.word	0x58025480
 8007bdc:	58025494 	.word	0x58025494
 8007be0:	cccccccd 	.word	0xcccccccd
 8007be4:	16009600 	.word	0x16009600
 8007be8:	58025880 	.word	0x58025880
 8007bec:	aaaaaaab 	.word	0xaaaaaaab
 8007bf0:	400204b8 	.word	0x400204b8
 8007bf4:	4002040f 	.word	0x4002040f
 8007bf8:	10008200 	.word	0x10008200
 8007bfc:	40020880 	.word	0x40020880

08007c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d04a      	beq.n	8007cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b08      	cmp	r3, #8
 8007c1a:	d847      	bhi.n	8007cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a25      	ldr	r2, [pc, #148]	@ (8007cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d022      	beq.n	8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a24      	ldr	r2, [pc, #144]	@ (8007cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d01d      	beq.n	8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a22      	ldr	r2, [pc, #136]	@ (8007cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d018      	beq.n	8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a21      	ldr	r2, [pc, #132]	@ (8007cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d013      	beq.n	8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d00e      	beq.n	8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a1e      	ldr	r2, [pc, #120]	@ (8007ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d009      	beq.n	8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8007cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d004      	beq.n	8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a1b      	ldr	r2, [pc, #108]	@ (8007cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d101      	bne.n	8007c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e000      	b.n	8007c72 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007c70:	2300      	movs	r3, #0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4b17      	ldr	r3, [pc, #92]	@ (8007cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007c7a:	4413      	add	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	461a      	mov	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a15      	ldr	r2, [pc, #84]	@ (8007cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007c88:	671a      	str	r2, [r3, #112]	@ 0x70
 8007c8a:	e009      	b.n	8007ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4b14      	ldr	r3, [pc, #80]	@ (8007ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	461a      	mov	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a11      	ldr	r2, [pc, #68]	@ (8007ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007c9e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	409a      	lsls	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007cac:	bf00      	nop
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	58025408 	.word	0x58025408
 8007cbc:	5802541c 	.word	0x5802541c
 8007cc0:	58025430 	.word	0x58025430
 8007cc4:	58025444 	.word	0x58025444
 8007cc8:	58025458 	.word	0x58025458
 8007ccc:	5802546c 	.word	0x5802546c
 8007cd0:	58025480 	.word	0x58025480
 8007cd4:	58025494 	.word	0x58025494
 8007cd8:	1600963f 	.word	0x1600963f
 8007cdc:	58025940 	.word	0x58025940
 8007ce0:	1000823f 	.word	0x1000823f
 8007ce4:	40020940 	.word	0x40020940

08007ce8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b098      	sub	sp, #96	@ 0x60
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007cf0:	4a84      	ldr	r2, [pc, #528]	@ (8007f04 <HAL_FDCAN_Init+0x21c>)
 8007cf2:	f107 030c 	add.w	r3, r7, #12
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	224c      	movs	r2, #76	@ 0x4c
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f010 feef 	bl	8018ade <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e1c6      	b.n	8008098 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a7e      	ldr	r2, [pc, #504]	@ (8007f08 <HAL_FDCAN_Init+0x220>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d106      	bne.n	8007d22 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d106      	bne.n	8007d3c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7fb fd54 	bl	80037e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	699a      	ldr	r2, [r3, #24]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f022 0210 	bic.w	r2, r2, #16
 8007d4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d4c:	f7fc f974 	bl	8004038 <HAL_GetTick>
 8007d50:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007d52:	e014      	b.n	8007d7e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007d54:	f7fc f970 	bl	8004038 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	2b0a      	cmp	r3, #10
 8007d60:	d90d      	bls.n	8007d7e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d68:	f043 0201 	orr.w	r2, r3, #1
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2203      	movs	r2, #3
 8007d76:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e18c      	b.n	8008098 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	f003 0308 	and.w	r3, r3, #8
 8007d88:	2b08      	cmp	r3, #8
 8007d8a:	d0e3      	beq.n	8007d54 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	699a      	ldr	r2, [r3, #24]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0201 	orr.w	r2, r2, #1
 8007d9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d9c:	f7fc f94c 	bl	8004038 <HAL_GetTick>
 8007da0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007da2:	e014      	b.n	8007dce <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007da4:	f7fc f948 	bl	8004038 <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b0a      	cmp	r3, #10
 8007db0:	d90d      	bls.n	8007dce <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007db8:	f043 0201 	orr.w	r2, r3, #1
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2203      	movs	r2, #3
 8007dc6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e164      	b.n	8008098 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d0e3      	beq.n	8007da4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	699a      	ldr	r2, [r3, #24]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f042 0202 	orr.w	r2, r2, #2
 8007dea:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7c1b      	ldrb	r3, [r3, #16]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d108      	bne.n	8007e06 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	699a      	ldr	r2, [r3, #24]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e02:	619a      	str	r2, [r3, #24]
 8007e04:	e007      	b.n	8007e16 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	699a      	ldr	r2, [r3, #24]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e14:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	7c5b      	ldrb	r3, [r3, #17]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d108      	bne.n	8007e30 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	699a      	ldr	r2, [r3, #24]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e2c:	619a      	str	r2, [r3, #24]
 8007e2e:	e007      	b.n	8007e40 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699a      	ldr	r2, [r3, #24]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007e3e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	7c9b      	ldrb	r3, [r3, #18]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d108      	bne.n	8007e5a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	699a      	ldr	r2, [r3, #24]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007e56:	619a      	str	r2, [r3, #24]
 8007e58:	e007      	b.n	8007e6a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	699a      	ldr	r2, [r3, #24]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007e68:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8007e8e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	691a      	ldr	r2, [r3, #16]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f022 0210 	bic.w	r2, r2, #16
 8007e9e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d108      	bne.n	8007eba <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699a      	ldr	r2, [r3, #24]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f042 0204 	orr.w	r2, r2, #4
 8007eb6:	619a      	str	r2, [r3, #24]
 8007eb8:	e030      	b.n	8007f1c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d02c      	beq.n	8007f1c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d020      	beq.n	8007f0c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	699a      	ldr	r2, [r3, #24]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007ed8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	691a      	ldr	r2, [r3, #16]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0210 	orr.w	r2, r2, #16
 8007ee8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d114      	bne.n	8007f1c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	699a      	ldr	r2, [r3, #24]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f042 0220 	orr.w	r2, r2, #32
 8007f00:	619a      	str	r2, [r3, #24]
 8007f02:	e00b      	b.n	8007f1c <HAL_FDCAN_Init+0x234>
 8007f04:	08019e94 	.word	0x08019e94
 8007f08:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	699a      	ldr	r2, [r3, #24]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f042 0220 	orr.w	r2, r2, #32
 8007f1a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	69db      	ldr	r3, [r3, #28]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007f2c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007f34:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007f44:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007f46:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f50:	d115      	bne.n	8007f7e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f56:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007f60:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f66:	3b01      	subs	r3, #1
 8007f68:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007f6a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f72:	3b01      	subs	r3, #1
 8007f74:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007f7a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007f7c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00a      	beq.n	8007f9c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fa4:	4413      	add	r3, r2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d011      	beq.n	8007fce <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007fb2:	f023 0107 	bic.w	r1, r3, #7
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	3360      	adds	r3, #96	@ 0x60
 8007fbe:	443b      	add	r3, r7
 8007fc0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d011      	beq.n	8007ffa <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007fde:	f023 0107 	bic.w	r1, r3, #7
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	3360      	adds	r3, #96	@ 0x60
 8007fea:	443b      	add	r3, r7
 8007fec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	430a      	orrs	r2, r1
 8007ff6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d012      	beq.n	8008028 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800800a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	3360      	adds	r3, #96	@ 0x60
 8008016:	443b      	add	r3, r7
 8008018:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800801c:	011a      	lsls	r2, r3, #4
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800802c:	2b00      	cmp	r3, #0
 800802e:	d012      	beq.n	8008056 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008038:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	3360      	adds	r3, #96	@ 0x60
 8008044:	443b      	add	r3, r7
 8008046:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800804a:	021a      	lsls	r2, r3, #8
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a11      	ldr	r2, [pc, #68]	@ (80080a0 <HAL_FDCAN_Init+0x3b8>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d107      	bne.n	8008070 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f022 0203 	bic.w	r2, r2, #3
 800806e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f80b 	bl	80080a4 <FDCAN_CalcultateRamBlockAddresses>
 800808e:	4603      	mov	r3, r0
 8008090:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8008094:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8008098:	4618      	mov	r0, r3
 800809a:	3760      	adds	r7, #96	@ 0x60
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	4000a000 	.word	0x4000a000

080080a4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080b0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80080ba:	4ba7      	ldr	r3, [pc, #668]	@ (8008358 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80080bc:	4013      	ands	r3, r2
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	0091      	lsls	r1, r2, #2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	6812      	ldr	r2, [r2, #0]
 80080c6:	430b      	orrs	r3, r1
 80080c8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080d4:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080dc:	041a      	lsls	r2, r3, #16
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	430a      	orrs	r2, r1
 80080e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	4413      	add	r3, r2
 80080f0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80080fa:	4b97      	ldr	r3, [pc, #604]	@ (8008358 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	0091      	lsls	r1, r2, #2
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	6812      	ldr	r2, [r2, #0]
 8008106:	430b      	orrs	r3, r1
 8008108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008114:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800811c:	041a      	lsls	r2, r3, #16
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	4413      	add	r3, r2
 8008132:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800813c:	4b86      	ldr	r3, [pc, #536]	@ (8008358 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800813e:	4013      	ands	r3, r2
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	0091      	lsls	r1, r2, #2
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	6812      	ldr	r2, [r2, #0]
 8008148:	430b      	orrs	r3, r1
 800814a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008156:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815e:	041a      	lsls	r2, r3, #16
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008172:	fb02 f303 	mul.w	r3, r2, r3
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	4413      	add	r3, r2
 800817a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008184:	4b74      	ldr	r3, [pc, #464]	@ (8008358 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008186:	4013      	ands	r3, r2
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	0091      	lsls	r1, r2, #2
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6812      	ldr	r2, [r2, #0]
 8008190:	430b      	orrs	r3, r1
 8008192:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800819e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081a6:	041a      	lsls	r2, r3, #16
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80081ba:	fb02 f303 	mul.w	r3, r2, r3
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	4413      	add	r3, r2
 80081c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80081cc:	4b62      	ldr	r3, [pc, #392]	@ (8008358 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80081ce:	4013      	ands	r3, r2
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	0091      	lsls	r1, r2, #2
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	6812      	ldr	r2, [r2, #0]
 80081d8:	430b      	orrs	r3, r1
 80081da:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80081e6:	fb02 f303 	mul.w	r3, r2, r3
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	4413      	add	r3, r2
 80081ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80081f8:	4b57      	ldr	r3, [pc, #348]	@ (8008358 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80081fa:	4013      	ands	r3, r2
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	0091      	lsls	r1, r2, #2
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	6812      	ldr	r2, [r2, #0]
 8008204:	430b      	orrs	r3, r1
 8008206:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008212:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800821a:	041a      	lsls	r2, r3, #16
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	430a      	orrs	r2, r1
 8008222:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800822a:	005b      	lsls	r3, r3, #1
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	4413      	add	r3, r2
 8008230:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800823a:	4b47      	ldr	r3, [pc, #284]	@ (8008358 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800823c:	4013      	ands	r3, r2
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	0091      	lsls	r1, r2, #2
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	6812      	ldr	r2, [r2, #0]
 8008246:	430b      	orrs	r3, r1
 8008248:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008254:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800825c:	041a      	lsls	r2, r3, #16
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	430a      	orrs	r2, r1
 8008264:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008270:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008278:	061a      	lsls	r2, r3, #24
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	430a      	orrs	r2, r1
 8008280:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008288:	4b34      	ldr	r3, [pc, #208]	@ (800835c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800828a:	4413      	add	r3, r2
 800828c:	009a      	lsls	r2, r3, #2
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	441a      	add	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082aa:	00db      	lsls	r3, r3, #3
 80082ac:	441a      	add	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ba:	6879      	ldr	r1, [r7, #4]
 80082bc:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80082be:	fb01 f303 	mul.w	r3, r1, r3
 80082c2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80082c4:	441a      	add	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082d2:	6879      	ldr	r1, [r7, #4]
 80082d4:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80082d6:	fb01 f303 	mul.w	r3, r1, r3
 80082da:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80082dc:	441a      	add	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082ea:	6879      	ldr	r1, [r7, #4]
 80082ec:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80082ee:	fb01 f303 	mul.w	r3, r1, r3
 80082f2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80082f4:	441a      	add	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	441a      	add	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800831a:	6879      	ldr	r1, [r7, #4]
 800831c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800831e:	fb01 f303 	mul.w	r3, r1, r3
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	441a      	add	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008336:	6879      	ldr	r1, [r7, #4]
 8008338:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800833a:	fb01 f303 	mul.w	r3, r1, r3
 800833e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008340:	441a      	add	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800834e:	4a04      	ldr	r2, [pc, #16]	@ (8008360 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d915      	bls.n	8008380 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008354:	e006      	b.n	8008364 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008356:	bf00      	nop
 8008358:	ffff0003 	.word	0xffff0003
 800835c:	10002b00 	.word	0x10002b00
 8008360:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800836a:	f043 0220 	orr.w	r2, r3, #32
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2203      	movs	r2, #3
 8008378:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e010      	b.n	80083a2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	e005      	b.n	8008394 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3304      	adds	r3, #4
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	429a      	cmp	r2, r3
 800839e:	d3f3      	bcc.n	8008388 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop

080083b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b089      	sub	sp, #36	@ 0x24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80083ba:	2300      	movs	r3, #0
 80083bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80083be:	4b89      	ldr	r3, [pc, #548]	@ (80085e4 <HAL_GPIO_Init+0x234>)
 80083c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083c2:	e194      	b.n	80086ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	2101      	movs	r1, #1
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	fa01 f303 	lsl.w	r3, r1, r3
 80083d0:	4013      	ands	r3, r2
 80083d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f000 8186 	beq.w	80086e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f003 0303 	and.w	r3, r3, #3
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d005      	beq.n	80083f4 <HAL_GPIO_Init+0x44>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f003 0303 	and.w	r3, r3, #3
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d130      	bne.n	8008456 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	005b      	lsls	r3, r3, #1
 80083fe:	2203      	movs	r2, #3
 8008400:	fa02 f303 	lsl.w	r3, r2, r3
 8008404:	43db      	mvns	r3, r3
 8008406:	69ba      	ldr	r2, [r7, #24]
 8008408:	4013      	ands	r3, r2
 800840a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	005b      	lsls	r3, r3, #1
 8008414:	fa02 f303 	lsl.w	r3, r2, r3
 8008418:	69ba      	ldr	r2, [r7, #24]
 800841a:	4313      	orrs	r3, r2
 800841c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800842a:	2201      	movs	r2, #1
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	fa02 f303 	lsl.w	r3, r2, r3
 8008432:	43db      	mvns	r3, r3
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	4013      	ands	r3, r2
 8008438:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	091b      	lsrs	r3, r3, #4
 8008440:	f003 0201 	and.w	r2, r3, #1
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	fa02 f303 	lsl.w	r3, r2, r3
 800844a:	69ba      	ldr	r2, [r7, #24]
 800844c:	4313      	orrs	r3, r2
 800844e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	69ba      	ldr	r2, [r7, #24]
 8008454:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f003 0303 	and.w	r3, r3, #3
 800845e:	2b03      	cmp	r3, #3
 8008460:	d017      	beq.n	8008492 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	005b      	lsls	r3, r3, #1
 800846c:	2203      	movs	r2, #3
 800846e:	fa02 f303 	lsl.w	r3, r2, r3
 8008472:	43db      	mvns	r3, r3
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	4013      	ands	r3, r2
 8008478:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	689a      	ldr	r2, [r3, #8]
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	fa02 f303 	lsl.w	r3, r2, r3
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	4313      	orrs	r3, r2
 800848a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	69ba      	ldr	r2, [r7, #24]
 8008490:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	2b02      	cmp	r3, #2
 800849c:	d123      	bne.n	80084e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	08da      	lsrs	r2, r3, #3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	3208      	adds	r2, #8
 80084a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	220f      	movs	r2, #15
 80084b6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ba:	43db      	mvns	r3, r3
 80084bc:	69ba      	ldr	r2, [r7, #24]
 80084be:	4013      	ands	r3, r2
 80084c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	691a      	ldr	r2, [r3, #16]
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	fa02 f303 	lsl.w	r3, r2, r3
 80084d2:	69ba      	ldr	r2, [r7, #24]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	08da      	lsrs	r2, r3, #3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3208      	adds	r2, #8
 80084e0:	69b9      	ldr	r1, [r7, #24]
 80084e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	005b      	lsls	r3, r3, #1
 80084f0:	2203      	movs	r2, #3
 80084f2:	fa02 f303 	lsl.w	r3, r2, r3
 80084f6:	43db      	mvns	r3, r3
 80084f8:	69ba      	ldr	r2, [r7, #24]
 80084fa:	4013      	ands	r3, r2
 80084fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f003 0203 	and.w	r2, r3, #3
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	fa02 f303 	lsl.w	r3, r2, r3
 800850e:	69ba      	ldr	r2, [r7, #24]
 8008510:	4313      	orrs	r3, r2
 8008512:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 80e0 	beq.w	80086e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008528:	4b2f      	ldr	r3, [pc, #188]	@ (80085e8 <HAL_GPIO_Init+0x238>)
 800852a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800852e:	4a2e      	ldr	r2, [pc, #184]	@ (80085e8 <HAL_GPIO_Init+0x238>)
 8008530:	f043 0302 	orr.w	r3, r3, #2
 8008534:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008538:	4b2b      	ldr	r3, [pc, #172]	@ (80085e8 <HAL_GPIO_Init+0x238>)
 800853a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800853e:	f003 0302 	and.w	r3, r3, #2
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008546:	4a29      	ldr	r2, [pc, #164]	@ (80085ec <HAL_GPIO_Init+0x23c>)
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	089b      	lsrs	r3, r3, #2
 800854c:	3302      	adds	r3, #2
 800854e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	f003 0303 	and.w	r3, r3, #3
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	220f      	movs	r2, #15
 800855e:	fa02 f303 	lsl.w	r3, r2, r3
 8008562:	43db      	mvns	r3, r3
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	4013      	ands	r3, r2
 8008568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a20      	ldr	r2, [pc, #128]	@ (80085f0 <HAL_GPIO_Init+0x240>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d052      	beq.n	8008618 <HAL_GPIO_Init+0x268>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a1f      	ldr	r2, [pc, #124]	@ (80085f4 <HAL_GPIO_Init+0x244>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d031      	beq.n	80085de <HAL_GPIO_Init+0x22e>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a1e      	ldr	r2, [pc, #120]	@ (80085f8 <HAL_GPIO_Init+0x248>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d02b      	beq.n	80085da <HAL_GPIO_Init+0x22a>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a1d      	ldr	r2, [pc, #116]	@ (80085fc <HAL_GPIO_Init+0x24c>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d025      	beq.n	80085d6 <HAL_GPIO_Init+0x226>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a1c      	ldr	r2, [pc, #112]	@ (8008600 <HAL_GPIO_Init+0x250>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d01f      	beq.n	80085d2 <HAL_GPIO_Init+0x222>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a1b      	ldr	r2, [pc, #108]	@ (8008604 <HAL_GPIO_Init+0x254>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d019      	beq.n	80085ce <HAL_GPIO_Init+0x21e>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a1a      	ldr	r2, [pc, #104]	@ (8008608 <HAL_GPIO_Init+0x258>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d013      	beq.n	80085ca <HAL_GPIO_Init+0x21a>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a19      	ldr	r2, [pc, #100]	@ (800860c <HAL_GPIO_Init+0x25c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d00d      	beq.n	80085c6 <HAL_GPIO_Init+0x216>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a18      	ldr	r2, [pc, #96]	@ (8008610 <HAL_GPIO_Init+0x260>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d007      	beq.n	80085c2 <HAL_GPIO_Init+0x212>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a17      	ldr	r2, [pc, #92]	@ (8008614 <HAL_GPIO_Init+0x264>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d101      	bne.n	80085be <HAL_GPIO_Init+0x20e>
 80085ba:	2309      	movs	r3, #9
 80085bc:	e02d      	b.n	800861a <HAL_GPIO_Init+0x26a>
 80085be:	230a      	movs	r3, #10
 80085c0:	e02b      	b.n	800861a <HAL_GPIO_Init+0x26a>
 80085c2:	2308      	movs	r3, #8
 80085c4:	e029      	b.n	800861a <HAL_GPIO_Init+0x26a>
 80085c6:	2307      	movs	r3, #7
 80085c8:	e027      	b.n	800861a <HAL_GPIO_Init+0x26a>
 80085ca:	2306      	movs	r3, #6
 80085cc:	e025      	b.n	800861a <HAL_GPIO_Init+0x26a>
 80085ce:	2305      	movs	r3, #5
 80085d0:	e023      	b.n	800861a <HAL_GPIO_Init+0x26a>
 80085d2:	2304      	movs	r3, #4
 80085d4:	e021      	b.n	800861a <HAL_GPIO_Init+0x26a>
 80085d6:	2303      	movs	r3, #3
 80085d8:	e01f      	b.n	800861a <HAL_GPIO_Init+0x26a>
 80085da:	2302      	movs	r3, #2
 80085dc:	e01d      	b.n	800861a <HAL_GPIO_Init+0x26a>
 80085de:	2301      	movs	r3, #1
 80085e0:	e01b      	b.n	800861a <HAL_GPIO_Init+0x26a>
 80085e2:	bf00      	nop
 80085e4:	58000080 	.word	0x58000080
 80085e8:	58024400 	.word	0x58024400
 80085ec:	58000400 	.word	0x58000400
 80085f0:	58020000 	.word	0x58020000
 80085f4:	58020400 	.word	0x58020400
 80085f8:	58020800 	.word	0x58020800
 80085fc:	58020c00 	.word	0x58020c00
 8008600:	58021000 	.word	0x58021000
 8008604:	58021400 	.word	0x58021400
 8008608:	58021800 	.word	0x58021800
 800860c:	58021c00 	.word	0x58021c00
 8008610:	58022000 	.word	0x58022000
 8008614:	58022400 	.word	0x58022400
 8008618:	2300      	movs	r3, #0
 800861a:	69fa      	ldr	r2, [r7, #28]
 800861c:	f002 0203 	and.w	r2, r2, #3
 8008620:	0092      	lsls	r2, r2, #2
 8008622:	4093      	lsls	r3, r2
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	4313      	orrs	r3, r2
 8008628:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800862a:	4938      	ldr	r1, [pc, #224]	@ (800870c <HAL_GPIO_Init+0x35c>)
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	089b      	lsrs	r3, r3, #2
 8008630:	3302      	adds	r3, #2
 8008632:	69ba      	ldr	r2, [r7, #24]
 8008634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	43db      	mvns	r3, r3
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	4013      	ands	r3, r2
 8008648:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	4313      	orrs	r3, r2
 800865c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800865e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	43db      	mvns	r3, r3
 8008672:	69ba      	ldr	r2, [r7, #24]
 8008674:	4013      	ands	r3, r2
 8008676:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d003      	beq.n	800868c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008684:	69ba      	ldr	r2, [r7, #24]
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	4313      	orrs	r3, r2
 800868a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800868c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	43db      	mvns	r3, r3
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	4013      	ands	r3, r2
 80086a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	43db      	mvns	r3, r3
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	4013      	ands	r3, r2
 80086cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80086da:	69ba      	ldr	r2, [r7, #24]
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	4313      	orrs	r3, r2
 80086e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	3301      	adds	r3, #1
 80086ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	fa22 f303 	lsr.w	r3, r2, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f47f ae63 	bne.w	80083c4 <HAL_GPIO_Init+0x14>
  }
}
 80086fe:	bf00      	nop
 8008700:	bf00      	nop
 8008702:	3724      	adds	r7, #36	@ 0x24
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	58000400 	.word	0x58000400

08008710 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008710:	b480      	push	{r7}
 8008712:	b087      	sub	sp, #28
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800871a:	2300      	movs	r3, #0
 800871c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800871e:	4b75      	ldr	r3, [pc, #468]	@ (80088f4 <HAL_GPIO_DeInit+0x1e4>)
 8008720:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008722:	e0d9      	b.n	80088d8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008724:	2201      	movs	r2, #1
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	fa02 f303 	lsl.w	r3, r2, r3
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	4013      	ands	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 80cc 	beq.w	80088d2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800873a:	4a6f      	ldr	r2, [pc, #444]	@ (80088f8 <HAL_GPIO_DeInit+0x1e8>)
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	089b      	lsrs	r3, r3, #2
 8008740:	3302      	adds	r3, #2
 8008742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008746:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f003 0303 	and.w	r3, r3, #3
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	220f      	movs	r2, #15
 8008752:	fa02 f303 	lsl.w	r3, r2, r3
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	4013      	ands	r3, r2
 800875a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a67      	ldr	r2, [pc, #412]	@ (80088fc <HAL_GPIO_DeInit+0x1ec>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d037      	beq.n	80087d4 <HAL_GPIO_DeInit+0xc4>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a66      	ldr	r2, [pc, #408]	@ (8008900 <HAL_GPIO_DeInit+0x1f0>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d031      	beq.n	80087d0 <HAL_GPIO_DeInit+0xc0>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a65      	ldr	r2, [pc, #404]	@ (8008904 <HAL_GPIO_DeInit+0x1f4>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d02b      	beq.n	80087cc <HAL_GPIO_DeInit+0xbc>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a64      	ldr	r2, [pc, #400]	@ (8008908 <HAL_GPIO_DeInit+0x1f8>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d025      	beq.n	80087c8 <HAL_GPIO_DeInit+0xb8>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a63      	ldr	r2, [pc, #396]	@ (800890c <HAL_GPIO_DeInit+0x1fc>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d01f      	beq.n	80087c4 <HAL_GPIO_DeInit+0xb4>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a62      	ldr	r2, [pc, #392]	@ (8008910 <HAL_GPIO_DeInit+0x200>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d019      	beq.n	80087c0 <HAL_GPIO_DeInit+0xb0>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a61      	ldr	r2, [pc, #388]	@ (8008914 <HAL_GPIO_DeInit+0x204>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d013      	beq.n	80087bc <HAL_GPIO_DeInit+0xac>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a60      	ldr	r2, [pc, #384]	@ (8008918 <HAL_GPIO_DeInit+0x208>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d00d      	beq.n	80087b8 <HAL_GPIO_DeInit+0xa8>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a5f      	ldr	r2, [pc, #380]	@ (800891c <HAL_GPIO_DeInit+0x20c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d007      	beq.n	80087b4 <HAL_GPIO_DeInit+0xa4>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a5e      	ldr	r2, [pc, #376]	@ (8008920 <HAL_GPIO_DeInit+0x210>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d101      	bne.n	80087b0 <HAL_GPIO_DeInit+0xa0>
 80087ac:	2309      	movs	r3, #9
 80087ae:	e012      	b.n	80087d6 <HAL_GPIO_DeInit+0xc6>
 80087b0:	230a      	movs	r3, #10
 80087b2:	e010      	b.n	80087d6 <HAL_GPIO_DeInit+0xc6>
 80087b4:	2308      	movs	r3, #8
 80087b6:	e00e      	b.n	80087d6 <HAL_GPIO_DeInit+0xc6>
 80087b8:	2307      	movs	r3, #7
 80087ba:	e00c      	b.n	80087d6 <HAL_GPIO_DeInit+0xc6>
 80087bc:	2306      	movs	r3, #6
 80087be:	e00a      	b.n	80087d6 <HAL_GPIO_DeInit+0xc6>
 80087c0:	2305      	movs	r3, #5
 80087c2:	e008      	b.n	80087d6 <HAL_GPIO_DeInit+0xc6>
 80087c4:	2304      	movs	r3, #4
 80087c6:	e006      	b.n	80087d6 <HAL_GPIO_DeInit+0xc6>
 80087c8:	2303      	movs	r3, #3
 80087ca:	e004      	b.n	80087d6 <HAL_GPIO_DeInit+0xc6>
 80087cc:	2302      	movs	r3, #2
 80087ce:	e002      	b.n	80087d6 <HAL_GPIO_DeInit+0xc6>
 80087d0:	2301      	movs	r3, #1
 80087d2:	e000      	b.n	80087d6 <HAL_GPIO_DeInit+0xc6>
 80087d4:	2300      	movs	r3, #0
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	f002 0203 	and.w	r2, r2, #3
 80087dc:	0092      	lsls	r2, r2, #2
 80087de:	4093      	lsls	r3, r2
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d136      	bne.n	8008854 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	43db      	mvns	r3, r3
 80087ee:	401a      	ands	r2, r3
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	43db      	mvns	r3, r3
 80087fc:	401a      	ands	r2, r3
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008802:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	43db      	mvns	r3, r3
 800880c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008810:	4013      	ands	r3, r2
 8008812:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	43db      	mvns	r3, r3
 800881e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008822:	4013      	ands	r3, r2
 8008824:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	f003 0303 	and.w	r3, r3, #3
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	220f      	movs	r2, #15
 8008830:	fa02 f303 	lsl.w	r3, r2, r3
 8008834:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008836:	4a30      	ldr	r2, [pc, #192]	@ (80088f8 <HAL_GPIO_DeInit+0x1e8>)
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	089b      	lsrs	r3, r3, #2
 800883c:	3302      	adds	r3, #2
 800883e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	43da      	mvns	r2, r3
 8008846:	482c      	ldr	r0, [pc, #176]	@ (80088f8 <HAL_GPIO_DeInit+0x1e8>)
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	089b      	lsrs	r3, r3, #2
 800884c:	400a      	ands	r2, r1
 800884e:	3302      	adds	r3, #2
 8008850:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	2103      	movs	r1, #3
 800885e:	fa01 f303 	lsl.w	r3, r1, r3
 8008862:	431a      	orrs	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	08da      	lsrs	r2, r3, #3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3208      	adds	r2, #8
 8008870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f003 0307 	and.w	r3, r3, #7
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	220f      	movs	r2, #15
 800887e:	fa02 f303 	lsl.w	r3, r2, r3
 8008882:	43db      	mvns	r3, r3
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	08d2      	lsrs	r2, r2, #3
 8008888:	4019      	ands	r1, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	3208      	adds	r2, #8
 800888e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	005b      	lsls	r3, r3, #1
 800889a:	2103      	movs	r1, #3
 800889c:	fa01 f303 	lsl.w	r3, r1, r3
 80088a0:	43db      	mvns	r3, r3
 80088a2:	401a      	ands	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	2101      	movs	r1, #1
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	fa01 f303 	lsl.w	r3, r1, r3
 80088b4:	43db      	mvns	r3, r3
 80088b6:	401a      	ands	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	689a      	ldr	r2, [r3, #8]
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	005b      	lsls	r3, r3, #1
 80088c4:	2103      	movs	r1, #3
 80088c6:	fa01 f303 	lsl.w	r3, r1, r3
 80088ca:	43db      	mvns	r3, r3
 80088cc:	401a      	ands	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	3301      	adds	r3, #1
 80088d6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	fa22 f303 	lsr.w	r3, r2, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f47f af1f 	bne.w	8008724 <HAL_GPIO_DeInit+0x14>
  }
}
 80088e6:	bf00      	nop
 80088e8:	bf00      	nop
 80088ea:	371c      	adds	r7, #28
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr
 80088f4:	58000080 	.word	0x58000080
 80088f8:	58000400 	.word	0x58000400
 80088fc:	58020000 	.word	0x58020000
 8008900:	58020400 	.word	0x58020400
 8008904:	58020800 	.word	0x58020800
 8008908:	58020c00 	.word	0x58020c00
 800890c:	58021000 	.word	0x58021000
 8008910:	58021400 	.word	0x58021400
 8008914:	58021800 	.word	0x58021800
 8008918:	58021c00 	.word	0x58021c00
 800891c:	58022000 	.word	0x58022000
 8008920:	58022400 	.word	0x58022400

08008924 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	691a      	ldr	r2, [r3, #16]
 8008934:	887b      	ldrh	r3, [r7, #2]
 8008936:	4013      	ands	r3, r2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800893c:	2301      	movs	r3, #1
 800893e:	73fb      	strb	r3, [r7, #15]
 8008940:	e001      	b.n	8008946 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008946:	7bfb      	ldrb	r3, [r7, #15]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	807b      	strh	r3, [r7, #2]
 8008960:	4613      	mov	r3, r2
 8008962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008964:	787b      	ldrb	r3, [r7, #1]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800896a:	887a      	ldrh	r2, [r7, #2]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008970:	e003      	b.n	800897a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008972:	887b      	ldrh	r3, [r7, #2]
 8008974:	041a      	lsls	r2, r3, #16
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	619a      	str	r2, [r3, #24]
}
 800897a:	bf00      	nop
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008986:	b480      	push	{r7}
 8008988:	b085      	sub	sp, #20
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	460b      	mov	r3, r1
 8008990:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008998:	887a      	ldrh	r2, [r7, #2]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	4013      	ands	r3, r2
 800899e:	041a      	lsls	r2, r3, #16
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	43d9      	mvns	r1, r3
 80089a4:	887b      	ldrh	r3, [r7, #2]
 80089a6:	400b      	ands	r3, r1
 80089a8:	431a      	orrs	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	619a      	str	r2, [r3, #24]
}
 80089ae:	bf00      	nop
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b086      	sub	sp, #24
 80089be:	af02      	add	r7, sp, #8
 80089c0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e0fe      	b.n	8008bca <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d106      	bne.n	80089e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f00f facf 	bl	8017f84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2203      	movs	r2, #3
 80089ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f008 fe23 	bl	801163e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6818      	ldr	r0, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	7c1a      	ldrb	r2, [r3, #16]
 8008a00:	f88d 2000 	strb.w	r2, [sp]
 8008a04:	3304      	adds	r3, #4
 8008a06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a08:	f008 fcf4 	bl	80113f4 <USB_CoreInit>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d005      	beq.n	8008a1e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2202      	movs	r2, #2
 8008a16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e0d5      	b.n	8008bca <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2100      	movs	r1, #0
 8008a24:	4618      	mov	r0, r3
 8008a26:	f008 fe1b 	bl	8011660 <USB_SetCurrentMode>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2202      	movs	r2, #2
 8008a34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e0c6      	b.n	8008bca <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73fb      	strb	r3, [r7, #15]
 8008a40:	e04a      	b.n	8008ad8 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008a42:	7bfa      	ldrb	r2, [r7, #15]
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	4613      	mov	r3, r2
 8008a48:	00db      	lsls	r3, r3, #3
 8008a4a:	4413      	add	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	440b      	add	r3, r1
 8008a50:	3315      	adds	r3, #21
 8008a52:	2201      	movs	r2, #1
 8008a54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008a56:	7bfa      	ldrb	r2, [r7, #15]
 8008a58:	6879      	ldr	r1, [r7, #4]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	00db      	lsls	r3, r3, #3
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	440b      	add	r3, r1
 8008a64:	3314      	adds	r3, #20
 8008a66:	7bfa      	ldrb	r2, [r7, #15]
 8008a68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008a6a:	7bfa      	ldrb	r2, [r7, #15]
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	b298      	uxth	r0, r3
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	4613      	mov	r3, r2
 8008a74:	00db      	lsls	r3, r3, #3
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	440b      	add	r3, r1
 8008a7c:	332e      	adds	r3, #46	@ 0x2e
 8008a7e:	4602      	mov	r2, r0
 8008a80:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008a82:	7bfa      	ldrb	r2, [r7, #15]
 8008a84:	6879      	ldr	r1, [r7, #4]
 8008a86:	4613      	mov	r3, r2
 8008a88:	00db      	lsls	r3, r3, #3
 8008a8a:	4413      	add	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	440b      	add	r3, r1
 8008a90:	3318      	adds	r3, #24
 8008a92:	2200      	movs	r2, #0
 8008a94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008a96:	7bfa      	ldrb	r2, [r7, #15]
 8008a98:	6879      	ldr	r1, [r7, #4]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	00db      	lsls	r3, r3, #3
 8008a9e:	4413      	add	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	440b      	add	r3, r1
 8008aa4:	331c      	adds	r3, #28
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008aaa:	7bfa      	ldrb	r2, [r7, #15]
 8008aac:	6879      	ldr	r1, [r7, #4]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	00db      	lsls	r3, r3, #3
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	440b      	add	r3, r1
 8008ab8:	3320      	adds	r3, #32
 8008aba:	2200      	movs	r2, #0
 8008abc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008abe:	7bfa      	ldrb	r2, [r7, #15]
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	00db      	lsls	r3, r3, #3
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	440b      	add	r3, r1
 8008acc:	3324      	adds	r3, #36	@ 0x24
 8008ace:	2200      	movs	r2, #0
 8008ad0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	73fb      	strb	r3, [r7, #15]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	791b      	ldrb	r3, [r3, #4]
 8008adc:	7bfa      	ldrb	r2, [r7, #15]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d3af      	bcc.n	8008a42 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]
 8008ae6:	e044      	b.n	8008b72 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008ae8:	7bfa      	ldrb	r2, [r7, #15]
 8008aea:	6879      	ldr	r1, [r7, #4]
 8008aec:	4613      	mov	r3, r2
 8008aee:	00db      	lsls	r3, r3, #3
 8008af0:	4413      	add	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	440b      	add	r3, r1
 8008af6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008afa:	2200      	movs	r2, #0
 8008afc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008afe:	7bfa      	ldrb	r2, [r7, #15]
 8008b00:	6879      	ldr	r1, [r7, #4]
 8008b02:	4613      	mov	r3, r2
 8008b04:	00db      	lsls	r3, r3, #3
 8008b06:	4413      	add	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	440b      	add	r3, r1
 8008b0c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008b10:	7bfa      	ldrb	r2, [r7, #15]
 8008b12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008b14:	7bfa      	ldrb	r2, [r7, #15]
 8008b16:	6879      	ldr	r1, [r7, #4]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	00db      	lsls	r3, r3, #3
 8008b1c:	4413      	add	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	440b      	add	r3, r1
 8008b22:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008b26:	2200      	movs	r2, #0
 8008b28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008b2a:	7bfa      	ldrb	r2, [r7, #15]
 8008b2c:	6879      	ldr	r1, [r7, #4]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	00db      	lsls	r3, r3, #3
 8008b32:	4413      	add	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	440b      	add	r3, r1
 8008b38:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008b40:	7bfa      	ldrb	r2, [r7, #15]
 8008b42:	6879      	ldr	r1, [r7, #4]
 8008b44:	4613      	mov	r3, r2
 8008b46:	00db      	lsls	r3, r3, #3
 8008b48:	4413      	add	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	440b      	add	r3, r1
 8008b4e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008b52:	2200      	movs	r2, #0
 8008b54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008b56:	7bfa      	ldrb	r2, [r7, #15]
 8008b58:	6879      	ldr	r1, [r7, #4]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	4413      	add	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	440b      	add	r3, r1
 8008b64:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	73fb      	strb	r3, [r7, #15]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	791b      	ldrb	r3, [r3, #4]
 8008b76:	7bfa      	ldrb	r2, [r7, #15]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d3b5      	bcc.n	8008ae8 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6818      	ldr	r0, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	7c1a      	ldrb	r2, [r3, #16]
 8008b84:	f88d 2000 	strb.w	r2, [sp]
 8008b88:	3304      	adds	r3, #4
 8008b8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b8c:	f008 fdb4 	bl	80116f8 <USB_DevInit>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d005      	beq.n	8008ba2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e013      	b.n	8008bca <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	7b1b      	ldrb	r3, [r3, #12]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d102      	bne.n	8008bbe <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 f96d 	bl	8009e98 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f009 fdf3 	bl	80127ae <USB_DevDisconnect>

  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d101      	bne.n	8008bee <HAL_PCD_Start+0x1c>
 8008bea:	2302      	movs	r3, #2
 8008bec:	e022      	b.n	8008c34 <HAL_PCD_Start+0x62>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d009      	beq.n	8008c16 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d105      	bne.n	8008c16 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f008 fcfe 	bl	801161c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f009 fda1 	bl	801276c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008c3c:	b590      	push	{r4, r7, lr}
 8008c3e:	b08d      	sub	sp, #52	@ 0x34
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f009 fe5f 	bl	8012916 <USB_GetMode>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f040 84b9 	bne.w	80095d2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f009 fdc3 	bl	80127f0 <USB_ReadInterrupts>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 84af 	beq.w	80095d0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	0a1b      	lsrs	r3, r3, #8
 8008c7c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f009 fdb0 	bl	80127f0 <USB_ReadInterrupts>
 8008c90:	4603      	mov	r3, r0
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d107      	bne.n	8008caa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	695a      	ldr	r2, [r3, #20]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f002 0202 	and.w	r2, r2, #2
 8008ca8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f009 fd9e 	bl	80127f0 <USB_ReadInterrupts>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	f003 0310 	and.w	r3, r3, #16
 8008cba:	2b10      	cmp	r3, #16
 8008cbc:	d161      	bne.n	8008d82 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	699a      	ldr	r2, [r3, #24]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f022 0210 	bic.w	r2, r2, #16
 8008ccc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	f003 020f 	and.w	r2, r3, #15
 8008cda:	4613      	mov	r3, r2
 8008cdc:	00db      	lsls	r3, r3, #3
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	4413      	add	r3, r2
 8008cea:	3304      	adds	r3, #4
 8008cec:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	0c5b      	lsrs	r3, r3, #17
 8008cf2:	f003 030f 	and.w	r3, r3, #15
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d124      	bne.n	8008d44 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008cfa:	69ba      	ldr	r2, [r7, #24]
 8008cfc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008d00:	4013      	ands	r3, r2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d035      	beq.n	8008d72 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	091b      	lsrs	r3, r3, #4
 8008d0e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008d10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	461a      	mov	r2, r3
 8008d18:	6a38      	ldr	r0, [r7, #32]
 8008d1a:	f009 fbd5 	bl	80124c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	68da      	ldr	r2, [r3, #12]
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	091b      	lsrs	r3, r3, #4
 8008d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d2a:	441a      	add	r2, r3
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	695a      	ldr	r2, [r3, #20]
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	091b      	lsrs	r3, r3, #4
 8008d38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d3c:	441a      	add	r2, r3
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	615a      	str	r2, [r3, #20]
 8008d42:	e016      	b.n	8008d72 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	0c5b      	lsrs	r3, r3, #17
 8008d48:	f003 030f 	and.w	r3, r3, #15
 8008d4c:	2b06      	cmp	r3, #6
 8008d4e:	d110      	bne.n	8008d72 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008d56:	2208      	movs	r2, #8
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6a38      	ldr	r0, [r7, #32]
 8008d5c:	f009 fbb4 	bl	80124c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	695a      	ldr	r2, [r3, #20]
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	091b      	lsrs	r3, r3, #4
 8008d68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d6c:	441a      	add	r2, r3
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	699a      	ldr	r2, [r3, #24]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f042 0210 	orr.w	r2, r2, #16
 8008d80:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f009 fd32 	bl	80127f0 <USB_ReadInterrupts>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008d92:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008d96:	f040 80a7 	bne.w	8008ee8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f009 fd37 	bl	8012816 <USB_ReadDevAllOutEpInterrupt>
 8008da8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8008daa:	e099      	b.n	8008ee0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 808e 	beq.w	8008ed4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dbe:	b2d2      	uxtb	r2, r2
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f009 fd5b 	bl	801287e <USB_ReadDevOutEPInterrupt>
 8008dc8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00c      	beq.n	8008dee <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd6:	015a      	lsls	r2, r3, #5
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	4413      	add	r3, r2
 8008ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008de0:	461a      	mov	r2, r3
 8008de2:	2301      	movs	r3, #1
 8008de4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008de6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fecf 	bl	8009b8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	f003 0308 	and.w	r3, r3, #8
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00c      	beq.n	8008e12 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e04:	461a      	mov	r2, r3
 8008e06:	2308      	movs	r3, #8
 8008e08:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008e0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 ffa5 	bl	8009d5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f003 0310 	and.w	r3, r3, #16
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d008      	beq.n	8008e2e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e28:	461a      	mov	r2, r3
 8008e2a:	2310      	movs	r3, #16
 8008e2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	f003 0302 	and.w	r3, r3, #2
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d030      	beq.n	8008e9a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e40:	2b80      	cmp	r3, #128	@ 0x80
 8008e42:	d109      	bne.n	8008e58 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	69fa      	ldr	r2, [r7, #28]
 8008e4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008e52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008e56:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	00db      	lsls	r3, r3, #3
 8008e5e:	4413      	add	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	4413      	add	r3, r2
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	78db      	ldrb	r3, [r3, #3]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d108      	bne.n	8008e88 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	4619      	mov	r1, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f00f fa08 	bl	8018298 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8a:	015a      	lsls	r2, r3, #5
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	4413      	add	r3, r2
 8008e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e94:	461a      	mov	r2, r3
 8008e96:	2302      	movs	r3, #2
 8008e98:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f003 0320 	and.w	r3, r3, #32
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d008      	beq.n	8008eb6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea6:	015a      	lsls	r2, r3, #5
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	4413      	add	r3, r2
 8008eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	2320      	movs	r3, #32
 8008eb4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d009      	beq.n	8008ed4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec2:	015a      	lsls	r2, r3, #5
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ecc:	461a      	mov	r2, r3
 8008ece:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008ed2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008edc:	085b      	lsrs	r3, r3, #1
 8008ede:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f47f af62 	bne.w	8008dac <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f009 fc7f 	bl	80127f0 <USB_ReadInterrupts>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ef8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008efc:	f040 80db 	bne.w	80090b6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f009 fca0 	bl	801284a <USB_ReadDevAllInEpInterrupt>
 8008f0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8008f10:	e0cd      	b.n	80090ae <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f000 80c2 	beq.w	80090a2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f24:	b2d2      	uxtb	r2, r2
 8008f26:	4611      	mov	r1, r2
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f009 fcc6 	bl	80128ba <USB_ReadDevInEPInterrupt>
 8008f2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d057      	beq.n	8008fea <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	2201      	movs	r2, #1
 8008f42:	fa02 f303 	lsl.w	r3, r2, r3
 8008f46:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	43db      	mvns	r3, r3
 8008f54:	69f9      	ldr	r1, [r7, #28]
 8008f56:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f60:	015a      	lsls	r2, r3, #5
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	4413      	add	r3, r2
 8008f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	799b      	ldrb	r3, [r3, #6]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d132      	bne.n	8008fde <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008f78:	6879      	ldr	r1, [r7, #4]
 8008f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	00db      	lsls	r3, r3, #3
 8008f80:	4413      	add	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	440b      	add	r3, r1
 8008f86:	3320      	adds	r3, #32
 8008f88:	6819      	ldr	r1, [r3, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f8e:	4613      	mov	r3, r2
 8008f90:	00db      	lsls	r3, r3, #3
 8008f92:	4413      	add	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4403      	add	r3, r0
 8008f98:	331c      	adds	r3, #28
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4419      	add	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	00db      	lsls	r3, r3, #3
 8008fa6:	4413      	add	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4403      	add	r3, r0
 8008fac:	3320      	adds	r3, #32
 8008fae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d113      	bne.n	8008fde <HAL_PCD_IRQHandler+0x3a2>
 8008fb6:	6879      	ldr	r1, [r7, #4]
 8008fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fba:	4613      	mov	r3, r2
 8008fbc:	00db      	lsls	r3, r3, #3
 8008fbe:	4413      	add	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	440b      	add	r3, r1
 8008fc4:	3324      	adds	r3, #36	@ 0x24
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d108      	bne.n	8008fde <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6818      	ldr	r0, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	2101      	movs	r1, #1
 8008fda:	f009 fccf 	bl	801297c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f00f f8d2 	bl	801818e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f003 0308 	and.w	r3, r3, #8
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d008      	beq.n	8009006 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff6:	015a      	lsls	r2, r3, #5
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009000:	461a      	mov	r2, r3
 8009002:	2308      	movs	r3, #8
 8009004:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	f003 0310 	and.w	r3, r3, #16
 800900c:	2b00      	cmp	r3, #0
 800900e:	d008      	beq.n	8009022 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009012:	015a      	lsls	r2, r3, #5
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	4413      	add	r3, r2
 8009018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800901c:	461a      	mov	r2, r3
 800901e:	2310      	movs	r3, #16
 8009020:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009028:	2b00      	cmp	r3, #0
 800902a:	d008      	beq.n	800903e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800902c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	4413      	add	r3, r2
 8009034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009038:	461a      	mov	r2, r3
 800903a:	2340      	movs	r3, #64	@ 0x40
 800903c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	f003 0302 	and.w	r3, r3, #2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d023      	beq.n	8009090 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009048:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800904a:	6a38      	ldr	r0, [r7, #32]
 800904c:	f008 fcb2 	bl	80119b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009052:	4613      	mov	r3, r2
 8009054:	00db      	lsls	r3, r3, #3
 8009056:	4413      	add	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	3310      	adds	r3, #16
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	4413      	add	r3, r2
 8009060:	3304      	adds	r3, #4
 8009062:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	78db      	ldrb	r3, [r3, #3]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d108      	bne.n	800907e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	2200      	movs	r2, #0
 8009070:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009074:	b2db      	uxtb	r3, r3
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f00f f91f 	bl	80182bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800907e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009080:	015a      	lsls	r2, r3, #5
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	4413      	add	r3, r2
 8009086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800908a:	461a      	mov	r2, r3
 800908c:	2302      	movs	r3, #2
 800908e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800909a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fce8 	bl	8009a72 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80090a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a4:	3301      	adds	r3, #1
 80090a6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80090a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090aa:	085b      	lsrs	r3, r3, #1
 80090ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80090ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f47f af2e 	bne.w	8008f12 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f009 fb98 	bl	80127f0 <USB_ReadInterrupts>
 80090c0:	4603      	mov	r3, r0
 80090c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090ca:	d122      	bne.n	8009112 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	69fa      	ldr	r2, [r7, #28]
 80090d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090da:	f023 0301 	bic.w	r3, r3, #1
 80090de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d108      	bne.n	80090fc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80090f2:	2100      	movs	r1, #0
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fef3 	bl	8009ee0 <HAL_PCDEx_LPM_Callback>
 80090fa:	e002      	b.n	8009102 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f00f f8bd 	bl	801827c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	695a      	ldr	r2, [r3, #20]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8009110:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4618      	mov	r0, r3
 8009118:	f009 fb6a 	bl	80127f0 <USB_ReadInterrupts>
 800911c:	4603      	mov	r3, r0
 800911e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009122:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009126:	d112      	bne.n	800914e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b01      	cmp	r3, #1
 8009136:	d102      	bne.n	800913e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f00f f879 	bl	8018230 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	695a      	ldr	r2, [r3, #20]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800914c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4618      	mov	r0, r3
 8009154:	f009 fb4c 	bl	80127f0 <USB_ReadInterrupts>
 8009158:	4603      	mov	r3, r0
 800915a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800915e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009162:	d121      	bne.n	80091a8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	695a      	ldr	r2, [r3, #20]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8009172:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800917a:	2b00      	cmp	r3, #0
 800917c:	d111      	bne.n	80091a2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800918c:	089b      	lsrs	r3, r3, #2
 800918e:	f003 020f 	and.w	r2, r3, #15
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009198:	2101      	movs	r1, #1
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fea0 	bl	8009ee0 <HAL_PCDEx_LPM_Callback>
 80091a0:	e002      	b.n	80091a8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f00f f844 	bl	8018230 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f009 fb1f 	bl	80127f0 <USB_ReadInterrupts>
 80091b2:	4603      	mov	r3, r0
 80091b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80091b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091bc:	f040 80b7 	bne.w	800932e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	69fa      	ldr	r2, [r7, #28]
 80091ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091ce:	f023 0301 	bic.w	r3, r3, #1
 80091d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2110      	movs	r1, #16
 80091da:	4618      	mov	r0, r3
 80091dc:	f008 fbea 	bl	80119b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091e0:	2300      	movs	r3, #0
 80091e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091e4:	e046      	b.n	8009274 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80091e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e8:	015a      	lsls	r2, r3, #5
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	4413      	add	r3, r2
 80091ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091f2:	461a      	mov	r2, r3
 80091f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80091f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80091fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091fc:	015a      	lsls	r2, r3, #5
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	4413      	add	r3, r2
 8009202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800920a:	0151      	lsls	r1, r2, #5
 800920c:	69fa      	ldr	r2, [r7, #28]
 800920e:	440a      	add	r2, r1
 8009210:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009214:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009218:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800921a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	4413      	add	r3, r2
 8009222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009226:	461a      	mov	r2, r3
 8009228:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800922c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800922e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009230:	015a      	lsls	r2, r3, #5
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	4413      	add	r3, r2
 8009236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800923e:	0151      	lsls	r1, r2, #5
 8009240:	69fa      	ldr	r2, [r7, #28]
 8009242:	440a      	add	r2, r1
 8009244:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009248:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800924c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800924e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800925e:	0151      	lsls	r1, r2, #5
 8009260:	69fa      	ldr	r2, [r7, #28]
 8009262:	440a      	add	r2, r1
 8009264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009268:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800926c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800926e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009270:	3301      	adds	r3, #1
 8009272:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	791b      	ldrb	r3, [r3, #4]
 8009278:	461a      	mov	r2, r3
 800927a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800927c:	4293      	cmp	r3, r2
 800927e:	d3b2      	bcc.n	80091e6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	69fa      	ldr	r2, [r7, #28]
 800928a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800928e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8009292:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	7bdb      	ldrb	r3, [r3, #15]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d016      	beq.n	80092ca <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092a6:	69fa      	ldr	r2, [r7, #28]
 80092a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092ac:	f043 030b 	orr.w	r3, r3, #11
 80092b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092bc:	69fa      	ldr	r2, [r7, #28]
 80092be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092c2:	f043 030b 	orr.w	r3, r3, #11
 80092c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80092c8:	e015      	b.n	80092f6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092d0:	695a      	ldr	r2, [r3, #20]
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092d8:	4619      	mov	r1, r3
 80092da:	f242 032b 	movw	r3, #8235	@ 0x202b
 80092de:	4313      	orrs	r3, r2
 80092e0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	69fa      	ldr	r2, [r7, #28]
 80092ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092f0:	f043 030b 	orr.w	r3, r3, #11
 80092f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	69fa      	ldr	r2, [r7, #28]
 8009300:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009304:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009308:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6818      	ldr	r0, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009318:	461a      	mov	r2, r3
 800931a:	f009 fb2f 	bl	801297c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	695a      	ldr	r2, [r3, #20]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800932c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4618      	mov	r0, r3
 8009334:	f009 fa5c 	bl	80127f0 <USB_ReadInterrupts>
 8009338:	4603      	mov	r3, r0
 800933a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800933e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009342:	d123      	bne.n	800938c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4618      	mov	r0, r3
 800934a:	f009 faf3 	bl	8012934 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4618      	mov	r0, r3
 8009354:	f008 fba7 	bl	8011aa6 <USB_GetDevSpeed>
 8009358:	4603      	mov	r3, r0
 800935a:	461a      	mov	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681c      	ldr	r4, [r3, #0]
 8009364:	f001 fd9c 	bl	800aea0 <HAL_RCC_GetHCLKFreq>
 8009368:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800936e:	461a      	mov	r2, r3
 8009370:	4620      	mov	r0, r4
 8009372:	f008 f8b1 	bl	80114d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f00e ff31 	bl	80181de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	695a      	ldr	r2, [r3, #20]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800938a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4618      	mov	r0, r3
 8009392:	f009 fa2d 	bl	80127f0 <USB_ReadInterrupts>
 8009396:	4603      	mov	r3, r0
 8009398:	f003 0308 	and.w	r3, r3, #8
 800939c:	2b08      	cmp	r3, #8
 800939e:	d10a      	bne.n	80093b6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f00e ff0e 	bl	80181c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	695a      	ldr	r2, [r3, #20]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f002 0208 	and.w	r2, r2, #8
 80093b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f009 fa18 	bl	80127f0 <USB_ReadInterrupts>
 80093c0:	4603      	mov	r3, r0
 80093c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093c6:	2b80      	cmp	r3, #128	@ 0x80
 80093c8:	d123      	bne.n	8009412 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	699b      	ldr	r3, [r3, #24]
 80093ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80093d6:	2301      	movs	r3, #1
 80093d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80093da:	e014      	b.n	8009406 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80093dc:	6879      	ldr	r1, [r7, #4]
 80093de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093e0:	4613      	mov	r3, r2
 80093e2:	00db      	lsls	r3, r3, #3
 80093e4:	4413      	add	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	440b      	add	r3, r1
 80093ea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d105      	bne.n	8009400 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80093f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	4619      	mov	r1, r3
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fb08 	bl	8009a10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009402:	3301      	adds	r3, #1
 8009404:	627b      	str	r3, [r7, #36]	@ 0x24
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	791b      	ldrb	r3, [r3, #4]
 800940a:	461a      	mov	r2, r3
 800940c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940e:	4293      	cmp	r3, r2
 8009410:	d3e4      	bcc.n	80093dc <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4618      	mov	r0, r3
 8009418:	f009 f9ea 	bl	80127f0 <USB_ReadInterrupts>
 800941c:	4603      	mov	r3, r0
 800941e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009426:	d13c      	bne.n	80094a2 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009428:	2301      	movs	r3, #1
 800942a:	627b      	str	r3, [r7, #36]	@ 0x24
 800942c:	e02b      	b.n	8009486 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800942e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009430:	015a      	lsls	r2, r3, #5
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	4413      	add	r3, r2
 8009436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800943e:	6879      	ldr	r1, [r7, #4]
 8009440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009442:	4613      	mov	r3, r2
 8009444:	00db      	lsls	r3, r3, #3
 8009446:	4413      	add	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	440b      	add	r3, r1
 800944c:	3318      	adds	r3, #24
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d115      	bne.n	8009480 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009454:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009456:	2b00      	cmp	r3, #0
 8009458:	da12      	bge.n	8009480 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800945e:	4613      	mov	r3, r2
 8009460:	00db      	lsls	r3, r3, #3
 8009462:	4413      	add	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	440b      	add	r3, r1
 8009468:	3317      	adds	r3, #23
 800946a:	2201      	movs	r2, #1
 800946c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800946e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009470:	b2db      	uxtb	r3, r3
 8009472:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009476:	b2db      	uxtb	r3, r3
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 fac8 	bl	8009a10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009482:	3301      	adds	r3, #1
 8009484:	627b      	str	r3, [r7, #36]	@ 0x24
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	791b      	ldrb	r3, [r3, #4]
 800948a:	461a      	mov	r2, r3
 800948c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948e:	4293      	cmp	r3, r2
 8009490:	d3cd      	bcc.n	800942e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	695a      	ldr	r2, [r3, #20]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80094a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f009 f9a2 	bl	80127f0 <USB_ReadInterrupts>
 80094ac:	4603      	mov	r3, r0
 80094ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80094b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094b6:	d156      	bne.n	8009566 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80094b8:	2301      	movs	r3, #1
 80094ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80094bc:	e045      	b.n	800954a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80094be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c0:	015a      	lsls	r2, r3, #5
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	4413      	add	r3, r2
 80094c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094d2:	4613      	mov	r3, r2
 80094d4:	00db      	lsls	r3, r3, #3
 80094d6:	4413      	add	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	440b      	add	r3, r1
 80094dc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d12e      	bne.n	8009544 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80094e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	da2b      	bge.n	8009544 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80094f8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d121      	bne.n	8009544 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009500:	6879      	ldr	r1, [r7, #4]
 8009502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009504:	4613      	mov	r3, r2
 8009506:	00db      	lsls	r3, r3, #3
 8009508:	4413      	add	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	440b      	add	r3, r1
 800950e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009512:	2201      	movs	r2, #1
 8009514:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009522:	6a3b      	ldr	r3, [r7, #32]
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10a      	bne.n	8009544 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	69fa      	ldr	r2, [r7, #28]
 8009538:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800953c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009540:	6053      	str	r3, [r2, #4]
            break;
 8009542:	e008      	b.n	8009556 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009546:	3301      	adds	r3, #1
 8009548:	627b      	str	r3, [r7, #36]	@ 0x24
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	791b      	ldrb	r3, [r3, #4]
 800954e:	461a      	mov	r2, r3
 8009550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009552:	4293      	cmp	r3, r2
 8009554:	d3b3      	bcc.n	80094be <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	695a      	ldr	r2, [r3, #20]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4618      	mov	r0, r3
 800956c:	f009 f940 	bl	80127f0 <USB_ReadInterrupts>
 8009570:	4603      	mov	r3, r0
 8009572:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800957a:	d10a      	bne.n	8009592 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f00e feaf 	bl	80182e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	695a      	ldr	r2, [r3, #20]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009590:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4618      	mov	r0, r3
 8009598:	f009 f92a 	bl	80127f0 <USB_ReadInterrupts>
 800959c:	4603      	mov	r3, r0
 800959e:	f003 0304 	and.w	r3, r3, #4
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	d115      	bne.n	80095d2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	f003 0304 	and.w	r3, r3, #4
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f00e fe9f 	bl	80182fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	6859      	ldr	r1, [r3, #4]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	69ba      	ldr	r2, [r7, #24]
 80095ca:	430a      	orrs	r2, r1
 80095cc:	605a      	str	r2, [r3, #4]
 80095ce:	e000      	b.n	80095d2 <HAL_PCD_IRQHandler+0x996>
      return;
 80095d0:	bf00      	nop
    }
  }
}
 80095d2:	3734      	adds	r7, #52	@ 0x34
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd90      	pop	{r4, r7, pc}

080095d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d101      	bne.n	80095f2 <HAL_PCD_SetAddress+0x1a>
 80095ee:	2302      	movs	r3, #2
 80095f0:	e012      	b.n	8009618 <HAL_PCD_SetAddress+0x40>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	78fa      	ldrb	r2, [r7, #3]
 80095fe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	78fa      	ldrb	r2, [r7, #3]
 8009606:	4611      	mov	r1, r2
 8009608:	4618      	mov	r0, r3
 800960a:	f009 f889 	bl	8012720 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	4608      	mov	r0, r1
 800962a:	4611      	mov	r1, r2
 800962c:	461a      	mov	r2, r3
 800962e:	4603      	mov	r3, r0
 8009630:	70fb      	strb	r3, [r7, #3]
 8009632:	460b      	mov	r3, r1
 8009634:	803b      	strh	r3, [r7, #0]
 8009636:	4613      	mov	r3, r2
 8009638:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800963e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009642:	2b00      	cmp	r3, #0
 8009644:	da0f      	bge.n	8009666 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009646:	78fb      	ldrb	r3, [r7, #3]
 8009648:	f003 020f 	and.w	r2, r3, #15
 800964c:	4613      	mov	r3, r2
 800964e:	00db      	lsls	r3, r3, #3
 8009650:	4413      	add	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	3310      	adds	r3, #16
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	4413      	add	r3, r2
 800965a:	3304      	adds	r3, #4
 800965c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2201      	movs	r2, #1
 8009662:	705a      	strb	r2, [r3, #1]
 8009664:	e00f      	b.n	8009686 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009666:	78fb      	ldrb	r3, [r7, #3]
 8009668:	f003 020f 	and.w	r2, r3, #15
 800966c:	4613      	mov	r3, r2
 800966e:	00db      	lsls	r3, r3, #3
 8009670:	4413      	add	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	4413      	add	r3, r2
 800967c:	3304      	adds	r3, #4
 800967e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009686:	78fb      	ldrb	r3, [r7, #3]
 8009688:	f003 030f 	and.w	r3, r3, #15
 800968c:	b2da      	uxtb	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009692:	883a      	ldrh	r2, [r7, #0]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	78ba      	ldrb	r2, [r7, #2]
 800969c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	785b      	ldrb	r3, [r3, #1]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d004      	beq.n	80096b0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	461a      	mov	r2, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80096b0:	78bb      	ldrb	r3, [r7, #2]
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d102      	bne.n	80096bc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d101      	bne.n	80096ca <HAL_PCD_EP_Open+0xaa>
 80096c6:	2302      	movs	r3, #2
 80096c8:	e00e      	b.n	80096e8 <HAL_PCD_EP_Open+0xc8>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68f9      	ldr	r1, [r7, #12]
 80096d8:	4618      	mov	r0, r3
 80096da:	f008 fa09 	bl	8011af0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80096e6:	7afb      	ldrb	r3, [r7, #11]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	460b      	mov	r3, r1
 80096fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80096fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009700:	2b00      	cmp	r3, #0
 8009702:	da0f      	bge.n	8009724 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009704:	78fb      	ldrb	r3, [r7, #3]
 8009706:	f003 020f 	and.w	r2, r3, #15
 800970a:	4613      	mov	r3, r2
 800970c:	00db      	lsls	r3, r3, #3
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	3310      	adds	r3, #16
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	4413      	add	r3, r2
 8009718:	3304      	adds	r3, #4
 800971a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2201      	movs	r2, #1
 8009720:	705a      	strb	r2, [r3, #1]
 8009722:	e00f      	b.n	8009744 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	f003 020f 	and.w	r2, r3, #15
 800972a:	4613      	mov	r3, r2
 800972c:	00db      	lsls	r3, r3, #3
 800972e:	4413      	add	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	4413      	add	r3, r2
 800973a:	3304      	adds	r3, #4
 800973c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009744:	78fb      	ldrb	r3, [r7, #3]
 8009746:	f003 030f 	and.w	r3, r3, #15
 800974a:	b2da      	uxtb	r2, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009756:	2b01      	cmp	r3, #1
 8009758:	d101      	bne.n	800975e <HAL_PCD_EP_Close+0x6e>
 800975a:	2302      	movs	r3, #2
 800975c:	e00e      	b.n	800977c <HAL_PCD_EP_Close+0x8c>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68f9      	ldr	r1, [r7, #12]
 800976c:	4618      	mov	r0, r3
 800976e:	f008 fa47 	bl	8011c00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	607a      	str	r2, [r7, #4]
 800978e:	603b      	str	r3, [r7, #0]
 8009790:	460b      	mov	r3, r1
 8009792:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009794:	7afb      	ldrb	r3, [r7, #11]
 8009796:	f003 020f 	and.w	r2, r3, #15
 800979a:	4613      	mov	r3, r2
 800979c:	00db      	lsls	r3, r3, #3
 800979e:	4413      	add	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	4413      	add	r3, r2
 80097aa:	3304      	adds	r3, #4
 80097ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2200      	movs	r2, #0
 80097be:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	2200      	movs	r2, #0
 80097c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80097c6:	7afb      	ldrb	r3, [r7, #11]
 80097c8:	f003 030f 	and.w	r3, r3, #15
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	799b      	ldrb	r3, [r3, #6]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d102      	bne.n	80097e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6818      	ldr	r0, [r3, #0]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	799b      	ldrb	r3, [r3, #6]
 80097e8:	461a      	mov	r2, r3
 80097ea:	6979      	ldr	r1, [r7, #20]
 80097ec:	f008 fae4 	bl	8011db8 <USB_EPStartXfer>

  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3718      	adds	r7, #24
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b083      	sub	sp, #12
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	460b      	mov	r3, r1
 8009804:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009806:	78fb      	ldrb	r3, [r7, #3]
 8009808:	f003 020f 	and.w	r2, r3, #15
 800980c:	6879      	ldr	r1, [r7, #4]
 800980e:	4613      	mov	r3, r2
 8009810:	00db      	lsls	r3, r3, #3
 8009812:	4413      	add	r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	440b      	add	r3, r1
 8009818:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800981c:	681b      	ldr	r3, [r3, #0]
}
 800981e:	4618      	mov	r0, r3
 8009820:	370c      	adds	r7, #12
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b086      	sub	sp, #24
 800982e:	af00      	add	r7, sp, #0
 8009830:	60f8      	str	r0, [r7, #12]
 8009832:	607a      	str	r2, [r7, #4]
 8009834:	603b      	str	r3, [r7, #0]
 8009836:	460b      	mov	r3, r1
 8009838:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800983a:	7afb      	ldrb	r3, [r7, #11]
 800983c:	f003 020f 	and.w	r2, r3, #15
 8009840:	4613      	mov	r3, r2
 8009842:	00db      	lsls	r3, r3, #3
 8009844:	4413      	add	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	3310      	adds	r3, #16
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	4413      	add	r3, r2
 800984e:	3304      	adds	r3, #4
 8009850:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	2200      	movs	r2, #0
 8009862:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	2201      	movs	r2, #1
 8009868:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800986a:	7afb      	ldrb	r3, [r7, #11]
 800986c:	f003 030f 	and.w	r3, r3, #15
 8009870:	b2da      	uxtb	r2, r3
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	799b      	ldrb	r3, [r3, #6]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d102      	bne.n	8009884 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6818      	ldr	r0, [r3, #0]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	799b      	ldrb	r3, [r3, #6]
 800988c:	461a      	mov	r2, r3
 800988e:	6979      	ldr	r1, [r7, #20]
 8009890:	f008 fa92 	bl	8011db8 <USB_EPStartXfer>

  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	460b      	mov	r3, r1
 80098a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80098aa:	78fb      	ldrb	r3, [r7, #3]
 80098ac:	f003 030f 	and.w	r3, r3, #15
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	7912      	ldrb	r2, [r2, #4]
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d901      	bls.n	80098bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e04f      	b.n	800995c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80098bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	da0f      	bge.n	80098e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80098c4:	78fb      	ldrb	r3, [r7, #3]
 80098c6:	f003 020f 	and.w	r2, r3, #15
 80098ca:	4613      	mov	r3, r2
 80098cc:	00db      	lsls	r3, r3, #3
 80098ce:	4413      	add	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	3310      	adds	r3, #16
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	4413      	add	r3, r2
 80098d8:	3304      	adds	r3, #4
 80098da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2201      	movs	r2, #1
 80098e0:	705a      	strb	r2, [r3, #1]
 80098e2:	e00d      	b.n	8009900 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80098e4:	78fa      	ldrb	r2, [r7, #3]
 80098e6:	4613      	mov	r3, r2
 80098e8:	00db      	lsls	r3, r3, #3
 80098ea:	4413      	add	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	4413      	add	r3, r2
 80098f6:	3304      	adds	r3, #4
 80098f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009906:	78fb      	ldrb	r3, [r7, #3]
 8009908:	f003 030f 	and.w	r3, r3, #15
 800990c:	b2da      	uxtb	r2, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009918:	2b01      	cmp	r3, #1
 800991a:	d101      	bne.n	8009920 <HAL_PCD_EP_SetStall+0x82>
 800991c:	2302      	movs	r3, #2
 800991e:	e01d      	b.n	800995c <HAL_PCD_EP_SetStall+0xbe>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68f9      	ldr	r1, [r7, #12]
 800992e:	4618      	mov	r0, r3
 8009930:	f008 fe22 	bl	8012578 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009934:	78fb      	ldrb	r3, [r7, #3]
 8009936:	f003 030f 	and.w	r3, r3, #15
 800993a:	2b00      	cmp	r3, #0
 800993c:	d109      	bne.n	8009952 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6818      	ldr	r0, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	7999      	ldrb	r1, [r3, #6]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800994c:	461a      	mov	r2, r3
 800994e:	f009 f815 	bl	801297c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	460b      	mov	r3, r1
 800996e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	f003 030f 	and.w	r3, r3, #15
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	7912      	ldrb	r2, [r2, #4]
 800997a:	4293      	cmp	r3, r2
 800997c:	d901      	bls.n	8009982 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e042      	b.n	8009a08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009982:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009986:	2b00      	cmp	r3, #0
 8009988:	da0f      	bge.n	80099aa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800998a:	78fb      	ldrb	r3, [r7, #3]
 800998c:	f003 020f 	and.w	r2, r3, #15
 8009990:	4613      	mov	r3, r2
 8009992:	00db      	lsls	r3, r3, #3
 8009994:	4413      	add	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	3310      	adds	r3, #16
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	4413      	add	r3, r2
 800999e:	3304      	adds	r3, #4
 80099a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2201      	movs	r2, #1
 80099a6:	705a      	strb	r2, [r3, #1]
 80099a8:	e00f      	b.n	80099ca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80099aa:	78fb      	ldrb	r3, [r7, #3]
 80099ac:	f003 020f 	and.w	r2, r3, #15
 80099b0:	4613      	mov	r3, r2
 80099b2:	00db      	lsls	r3, r3, #3
 80099b4:	4413      	add	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	4413      	add	r3, r2
 80099c0:	3304      	adds	r3, #4
 80099c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80099d0:	78fb      	ldrb	r3, [r7, #3]
 80099d2:	f003 030f 	and.w	r3, r3, #15
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d101      	bne.n	80099ea <HAL_PCD_EP_ClrStall+0x86>
 80099e6:	2302      	movs	r3, #2
 80099e8:	e00e      	b.n	8009a08 <HAL_PCD_EP_ClrStall+0xa4>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68f9      	ldr	r1, [r7, #12]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f008 fe2b 	bl	8012654 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009a1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	da0c      	bge.n	8009a3e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a24:	78fb      	ldrb	r3, [r7, #3]
 8009a26:	f003 020f 	and.w	r2, r3, #15
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	00db      	lsls	r3, r3, #3
 8009a2e:	4413      	add	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	3310      	adds	r3, #16
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	4413      	add	r3, r2
 8009a38:	3304      	adds	r3, #4
 8009a3a:	60fb      	str	r3, [r7, #12]
 8009a3c:	e00c      	b.n	8009a58 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a3e:	78fb      	ldrb	r3, [r7, #3]
 8009a40:	f003 020f 	and.w	r2, r3, #15
 8009a44:	4613      	mov	r3, r2
 8009a46:	00db      	lsls	r3, r3, #3
 8009a48:	4413      	add	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	4413      	add	r3, r2
 8009a54:	3304      	adds	r3, #4
 8009a56:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68f9      	ldr	r1, [r7, #12]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f008 fc4a 	bl	80122f8 <USB_EPStopXfer>
 8009a64:	4603      	mov	r3, r0
 8009a66:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009a68:	7afb      	ldrb	r3, [r7, #11]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b08a      	sub	sp, #40	@ 0x28
 8009a76:	af02      	add	r7, sp, #8
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	4613      	mov	r3, r2
 8009a8a:	00db      	lsls	r3, r3, #3
 8009a8c:	4413      	add	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	3310      	adds	r3, #16
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	4413      	add	r3, r2
 8009a96:	3304      	adds	r3, #4
 8009a98:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	695a      	ldr	r2, [r3, #20]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d901      	bls.n	8009aaa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e06b      	b.n	8009b82 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	691a      	ldr	r2, [r3, #16]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	69fa      	ldr	r2, [r7, #28]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d902      	bls.n	8009ac6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	3303      	adds	r3, #3
 8009aca:	089b      	lsrs	r3, r3, #2
 8009acc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009ace:	e02a      	b.n	8009b26 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	691a      	ldr	r2, [r3, #16]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	695b      	ldr	r3, [r3, #20]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	69fa      	ldr	r2, [r7, #28]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d902      	bls.n	8009aec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	3303      	adds	r3, #3
 8009af0:	089b      	lsrs	r3, r3, #2
 8009af2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	68d9      	ldr	r1, [r3, #12]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	4603      	mov	r3, r0
 8009b08:	6978      	ldr	r0, [r7, #20]
 8009b0a:	f008 fc9f 	bl	801244c <USB_WritePacket>

    ep->xfer_buff  += len;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	68da      	ldr	r2, [r3, #12]
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	441a      	add	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	695a      	ldr	r2, [r3, #20]
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	441a      	add	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	015a      	lsls	r2, r3, #5
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009b36:	69ba      	ldr	r2, [r7, #24]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d809      	bhi.n	8009b50 <PCD_WriteEmptyTxFifo+0xde>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	695a      	ldr	r2, [r3, #20]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d203      	bcs.n	8009b50 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1bf      	bne.n	8009ad0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	691a      	ldr	r2, [r3, #16]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d811      	bhi.n	8009b80 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	f003 030f 	and.w	r3, r3, #15
 8009b62:	2201      	movs	r2, #1
 8009b64:	fa02 f303 	lsl.w	r3, r2, r3
 8009b68:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	43db      	mvns	r3, r3
 8009b76:	6939      	ldr	r1, [r7, #16]
 8009b78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3720      	adds	r7, #32
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
	...

08009b8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b088      	sub	sp, #32
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	333c      	adds	r3, #60	@ 0x3c
 8009ba4:	3304      	adds	r3, #4
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	015a      	lsls	r2, r3, #5
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	799b      	ldrb	r3, [r3, #6]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d17b      	bne.n	8009cba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f003 0308 	and.w	r3, r3, #8
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d015      	beq.n	8009bf8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	4a61      	ldr	r2, [pc, #388]	@ (8009d54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	f240 80b9 	bls.w	8009d48 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 80b3 	beq.w	8009d48 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	015a      	lsls	r2, r3, #5
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bee:	461a      	mov	r2, r3
 8009bf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bf4:	6093      	str	r3, [r2, #8]
 8009bf6:	e0a7      	b.n	8009d48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	f003 0320 	and.w	r3, r3, #32
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d009      	beq.n	8009c16 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	015a      	lsls	r2, r3, #5
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c0e:	461a      	mov	r2, r3
 8009c10:	2320      	movs	r3, #32
 8009c12:	6093      	str	r3, [r2, #8]
 8009c14:	e098      	b.n	8009d48 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f040 8093 	bne.w	8009d48 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	4a4b      	ldr	r2, [pc, #300]	@ (8009d54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d90f      	bls.n	8009c4a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00a      	beq.n	8009c4a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	015a      	lsls	r2, r3, #5
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c40:	461a      	mov	r2, r3
 8009c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c46:	6093      	str	r3, [r2, #8]
 8009c48:	e07e      	b.n	8009d48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	00db      	lsls	r3, r3, #3
 8009c50:	4413      	add	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6a1a      	ldr	r2, [r3, #32]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	0159      	lsls	r1, r3, #5
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	440b      	add	r3, r1
 8009c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c76:	1ad2      	subs	r2, r2, r3
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d114      	bne.n	8009cac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d109      	bne.n	8009c9e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6818      	ldr	r0, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009c94:	461a      	mov	r2, r3
 8009c96:	2101      	movs	r1, #1
 8009c98:	f008 fe70 	bl	801297c <USB_EP0_OutStart>
 8009c9c:	e006      	b.n	8009cac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	68da      	ldr	r2, [r3, #12]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	441a      	add	r2, r3
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f00e fa50 	bl	8018158 <HAL_PCD_DataOutStageCallback>
 8009cb8:	e046      	b.n	8009d48 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	4a26      	ldr	r2, [pc, #152]	@ (8009d58 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d124      	bne.n	8009d0c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00a      	beq.n	8009ce2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	015a      	lsls	r2, r3, #5
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cd8:	461a      	mov	r2, r3
 8009cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cde:	6093      	str	r3, [r2, #8]
 8009ce0:	e032      	b.n	8009d48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	f003 0320 	and.w	r3, r3, #32
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d008      	beq.n	8009cfe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	015a      	lsls	r2, r3, #5
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	2320      	movs	r3, #32
 8009cfc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f00e fa27 	bl	8018158 <HAL_PCD_DataOutStageCallback>
 8009d0a:	e01d      	b.n	8009d48 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d114      	bne.n	8009d3c <PCD_EP_OutXfrComplete_int+0x1b0>
 8009d12:	6879      	ldr	r1, [r7, #4]
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	4613      	mov	r3, r2
 8009d18:	00db      	lsls	r3, r3, #3
 8009d1a:	4413      	add	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	440b      	add	r3, r1
 8009d20:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d108      	bne.n	8009d3c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009d34:	461a      	mov	r2, r3
 8009d36:	2100      	movs	r1, #0
 8009d38:	f008 fe20 	bl	801297c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f00e fa08 	bl	8018158 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3720      	adds	r7, #32
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	4f54300a 	.word	0x4f54300a
 8009d58:	4f54310a 	.word	0x4f54310a

08009d5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	333c      	adds	r3, #60	@ 0x3c
 8009d74:	3304      	adds	r3, #4
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	015a      	lsls	r2, r3, #5
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	4413      	add	r3, r2
 8009d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	4a15      	ldr	r2, [pc, #84]	@ (8009de4 <PCD_EP_OutSetupPacket_int+0x88>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d90e      	bls.n	8009db0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d009      	beq.n	8009db0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009da8:	461a      	mov	r2, r3
 8009daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f00e f9bf 	bl	8018134 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	4a0a      	ldr	r2, [pc, #40]	@ (8009de4 <PCD_EP_OutSetupPacket_int+0x88>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d90c      	bls.n	8009dd8 <PCD_EP_OutSetupPacket_int+0x7c>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	799b      	ldrb	r3, [r3, #6]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d108      	bne.n	8009dd8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6818      	ldr	r0, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	f008 fdd2 	bl	801297c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3718      	adds	r7, #24
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	4f54300a 	.word	0x4f54300a

08009de8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	70fb      	strb	r3, [r7, #3]
 8009df4:	4613      	mov	r3, r2
 8009df6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dfe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009e00:	78fb      	ldrb	r3, [r7, #3]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d107      	bne.n	8009e16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009e06:	883b      	ldrh	r3, [r7, #0]
 8009e08:	0419      	lsls	r1, r3, #16
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	430a      	orrs	r2, r1
 8009e12:	629a      	str	r2, [r3, #40]	@ 0x28
 8009e14:	e028      	b.n	8009e68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e1c:	0c1b      	lsrs	r3, r3, #16
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	4413      	add	r3, r2
 8009e22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009e24:	2300      	movs	r3, #0
 8009e26:	73fb      	strb	r3, [r7, #15]
 8009e28:	e00d      	b.n	8009e46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
 8009e30:	3340      	adds	r3, #64	@ 0x40
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	4413      	add	r3, r2
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	0c1b      	lsrs	r3, r3, #16
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
 8009e42:	3301      	adds	r3, #1
 8009e44:	73fb      	strb	r3, [r7, #15]
 8009e46:	7bfa      	ldrb	r2, [r7, #15]
 8009e48:	78fb      	ldrb	r3, [r7, #3]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d3ec      	bcc.n	8009e2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009e50:	883b      	ldrh	r3, [r7, #0]
 8009e52:	0418      	lsls	r0, r3, #16
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6819      	ldr	r1, [r3, #0]
 8009e58:	78fb      	ldrb	r3, [r7, #3]
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	4302      	orrs	r2, r0
 8009e60:	3340      	adds	r3, #64	@ 0x40
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	440b      	add	r3, r1
 8009e66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b083      	sub	sp, #12
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	460b      	mov	r3, r1
 8009e80:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	887a      	ldrh	r2, [r7, #2]
 8009e88:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ec6:	4b05      	ldr	r3, [pc, #20]	@ (8009edc <HAL_PCDEx_ActivateLPM+0x44>)
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	10000003 	.word	0x10000003

08009ee0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009f00:	4b19      	ldr	r3, [pc, #100]	@ (8009f68 <HAL_PWREx_ConfigSupply+0x70>)
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	f003 0304 	and.w	r3, r3, #4
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	d00a      	beq.n	8009f22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009f0c:	4b16      	ldr	r3, [pc, #88]	@ (8009f68 <HAL_PWREx_ConfigSupply+0x70>)
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	f003 0307 	and.w	r3, r3, #7
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d001      	beq.n	8009f1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e01f      	b.n	8009f5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	e01d      	b.n	8009f5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009f22:	4b11      	ldr	r3, [pc, #68]	@ (8009f68 <HAL_PWREx_ConfigSupply+0x70>)
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	f023 0207 	bic.w	r2, r3, #7
 8009f2a:	490f      	ldr	r1, [pc, #60]	@ (8009f68 <HAL_PWREx_ConfigSupply+0x70>)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009f32:	f7fa f881 	bl	8004038 <HAL_GetTick>
 8009f36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009f38:	e009      	b.n	8009f4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009f3a:	f7fa f87d 	bl	8004038 <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f48:	d901      	bls.n	8009f4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e007      	b.n	8009f5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009f4e:	4b06      	ldr	r3, [pc, #24]	@ (8009f68 <HAL_PWREx_ConfigSupply+0x70>)
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f5a:	d1ee      	bne.n	8009f3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	58024800 	.word	0x58024800

08009f6c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009f70:	4b05      	ldr	r3, [pc, #20]	@ (8009f88 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	4a04      	ldr	r2, [pc, #16]	@ (8009f88 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009f76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f7a:	60d3      	str	r3, [r2, #12]
}
 8009f7c:	bf00      	nop
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	58024800 	.word	0x58024800

08009f8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08c      	sub	sp, #48	@ 0x30
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d102      	bne.n	8009fa0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	f000 bc48 	b.w	800a830 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 0301 	and.w	r3, r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 8088 	beq.w	800a0be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009fae:	4b99      	ldr	r3, [pc, #612]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009fb8:	4b96      	ldr	r3, [pc, #600]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 8009fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc0:	2b10      	cmp	r3, #16
 8009fc2:	d007      	beq.n	8009fd4 <HAL_RCC_OscConfig+0x48>
 8009fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc6:	2b18      	cmp	r3, #24
 8009fc8:	d111      	bne.n	8009fee <HAL_RCC_OscConfig+0x62>
 8009fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fcc:	f003 0303 	and.w	r3, r3, #3
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d10c      	bne.n	8009fee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fd4:	4b8f      	ldr	r3, [pc, #572]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d06d      	beq.n	800a0bc <HAL_RCC_OscConfig+0x130>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d169      	bne.n	800a0bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	f000 bc21 	b.w	800a830 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ff6:	d106      	bne.n	800a006 <HAL_RCC_OscConfig+0x7a>
 8009ff8:	4b86      	ldr	r3, [pc, #536]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a85      	ldr	r2, [pc, #532]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 8009ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a002:	6013      	str	r3, [r2, #0]
 800a004:	e02e      	b.n	800a064 <HAL_RCC_OscConfig+0xd8>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d10c      	bne.n	800a028 <HAL_RCC_OscConfig+0x9c>
 800a00e:	4b81      	ldr	r3, [pc, #516]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a80      	ldr	r2, [pc, #512]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a018:	6013      	str	r3, [r2, #0]
 800a01a:	4b7e      	ldr	r3, [pc, #504]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a7d      	ldr	r2, [pc, #500]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a020:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a024:	6013      	str	r3, [r2, #0]
 800a026:	e01d      	b.n	800a064 <HAL_RCC_OscConfig+0xd8>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a030:	d10c      	bne.n	800a04c <HAL_RCC_OscConfig+0xc0>
 800a032:	4b78      	ldr	r3, [pc, #480]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a77      	ldr	r2, [pc, #476]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a03c:	6013      	str	r3, [r2, #0]
 800a03e:	4b75      	ldr	r3, [pc, #468]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a74      	ldr	r2, [pc, #464]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a048:	6013      	str	r3, [r2, #0]
 800a04a:	e00b      	b.n	800a064 <HAL_RCC_OscConfig+0xd8>
 800a04c:	4b71      	ldr	r3, [pc, #452]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a70      	ldr	r2, [pc, #448]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a056:	6013      	str	r3, [r2, #0]
 800a058:	4b6e      	ldr	r3, [pc, #440]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a6d      	ldr	r2, [pc, #436]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a05e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d013      	beq.n	800a094 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a06c:	f7f9 ffe4 	bl	8004038 <HAL_GetTick>
 800a070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a072:	e008      	b.n	800a086 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a074:	f7f9 ffe0 	bl	8004038 <HAL_GetTick>
 800a078:	4602      	mov	r2, r0
 800a07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	2b64      	cmp	r3, #100	@ 0x64
 800a080:	d901      	bls.n	800a086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a082:	2303      	movs	r3, #3
 800a084:	e3d4      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a086:	4b63      	ldr	r3, [pc, #396]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d0f0      	beq.n	800a074 <HAL_RCC_OscConfig+0xe8>
 800a092:	e014      	b.n	800a0be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a094:	f7f9 ffd0 	bl	8004038 <HAL_GetTick>
 800a098:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a09a:	e008      	b.n	800a0ae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a09c:	f7f9 ffcc 	bl	8004038 <HAL_GetTick>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	2b64      	cmp	r3, #100	@ 0x64
 800a0a8:	d901      	bls.n	800a0ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e3c0      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a0ae:	4b59      	ldr	r3, [pc, #356]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1f0      	bne.n	800a09c <HAL_RCC_OscConfig+0x110>
 800a0ba:	e000      	b.n	800a0be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 0302 	and.w	r3, r3, #2
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f000 80ca 	beq.w	800a260 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0cc:	4b51      	ldr	r3, [pc, #324]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0d6:	4b4f      	ldr	r3, [pc, #316]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a0d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a0dc:	6a3b      	ldr	r3, [r7, #32]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d007      	beq.n	800a0f2 <HAL_RCC_OscConfig+0x166>
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	2b18      	cmp	r3, #24
 800a0e6:	d156      	bne.n	800a196 <HAL_RCC_OscConfig+0x20a>
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	f003 0303 	and.w	r3, r3, #3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d151      	bne.n	800a196 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0f2:	4b48      	ldr	r3, [pc, #288]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 0304 	and.w	r3, r3, #4
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d005      	beq.n	800a10a <HAL_RCC_OscConfig+0x17e>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d101      	bne.n	800a10a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e392      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a10a:	4b42      	ldr	r3, [pc, #264]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f023 0219 	bic.w	r2, r3, #25
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	493f      	ldr	r1, [pc, #252]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a118:	4313      	orrs	r3, r2
 800a11a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a11c:	f7f9 ff8c 	bl	8004038 <HAL_GetTick>
 800a120:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a122:	e008      	b.n	800a136 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a124:	f7f9 ff88 	bl	8004038 <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d901      	bls.n	800a136 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e37c      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a136:	4b37      	ldr	r3, [pc, #220]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f003 0304 	and.w	r3, r3, #4
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0f0      	beq.n	800a124 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a142:	f7f9 ffa9 	bl	8004098 <HAL_GetREVID>
 800a146:	4603      	mov	r3, r0
 800a148:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d817      	bhi.n	800a180 <HAL_RCC_OscConfig+0x1f4>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	691b      	ldr	r3, [r3, #16]
 800a154:	2b40      	cmp	r3, #64	@ 0x40
 800a156:	d108      	bne.n	800a16a <HAL_RCC_OscConfig+0x1de>
 800a158:	4b2e      	ldr	r3, [pc, #184]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a160:	4a2c      	ldr	r2, [pc, #176]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a166:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a168:	e07a      	b.n	800a260 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a16a:	4b2a      	ldr	r3, [pc, #168]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	031b      	lsls	r3, r3, #12
 800a178:	4926      	ldr	r1, [pc, #152]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a17a:	4313      	orrs	r3, r2
 800a17c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a17e:	e06f      	b.n	800a260 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a180:	4b24      	ldr	r3, [pc, #144]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	061b      	lsls	r3, r3, #24
 800a18e:	4921      	ldr	r1, [pc, #132]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a190:	4313      	orrs	r3, r2
 800a192:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a194:	e064      	b.n	800a260 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d047      	beq.n	800a22e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a19e:	4b1d      	ldr	r3, [pc, #116]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f023 0219 	bic.w	r2, r3, #25
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	491a      	ldr	r1, [pc, #104]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1b0:	f7f9 ff42 	bl	8004038 <HAL_GetTick>
 800a1b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1b6:	e008      	b.n	800a1ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1b8:	f7f9 ff3e 	bl	8004038 <HAL_GetTick>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d901      	bls.n	800a1ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	e332      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1ca:	4b12      	ldr	r3, [pc, #72]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 0304 	and.w	r3, r3, #4
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d0f0      	beq.n	800a1b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1d6:	f7f9 ff5f 	bl	8004098 <HAL_GetREVID>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d819      	bhi.n	800a218 <HAL_RCC_OscConfig+0x28c>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	2b40      	cmp	r3, #64	@ 0x40
 800a1ea:	d108      	bne.n	800a1fe <HAL_RCC_OscConfig+0x272>
 800a1ec:	4b09      	ldr	r3, [pc, #36]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a1f4:	4a07      	ldr	r2, [pc, #28]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a1f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1fa:	6053      	str	r3, [r2, #4]
 800a1fc:	e030      	b.n	800a260 <HAL_RCC_OscConfig+0x2d4>
 800a1fe:	4b05      	ldr	r3, [pc, #20]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	031b      	lsls	r3, r3, #12
 800a20c:	4901      	ldr	r1, [pc, #4]	@ (800a214 <HAL_RCC_OscConfig+0x288>)
 800a20e:	4313      	orrs	r3, r2
 800a210:	604b      	str	r3, [r1, #4]
 800a212:	e025      	b.n	800a260 <HAL_RCC_OscConfig+0x2d4>
 800a214:	58024400 	.word	0x58024400
 800a218:	4b9a      	ldr	r3, [pc, #616]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	061b      	lsls	r3, r3, #24
 800a226:	4997      	ldr	r1, [pc, #604]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a228:	4313      	orrs	r3, r2
 800a22a:	604b      	str	r3, [r1, #4]
 800a22c:	e018      	b.n	800a260 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a22e:	4b95      	ldr	r3, [pc, #596]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a94      	ldr	r2, [pc, #592]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a234:	f023 0301 	bic.w	r3, r3, #1
 800a238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a23a:	f7f9 fefd 	bl	8004038 <HAL_GetTick>
 800a23e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a240:	e008      	b.n	800a254 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a242:	f7f9 fef9 	bl	8004038 <HAL_GetTick>
 800a246:	4602      	mov	r2, r0
 800a248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d901      	bls.n	800a254 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e2ed      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a254:	4b8b      	ldr	r3, [pc, #556]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f003 0304 	and.w	r3, r3, #4
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1f0      	bne.n	800a242 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 0310 	and.w	r3, r3, #16
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 80a9 	beq.w	800a3c0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a26e:	4b85      	ldr	r3, [pc, #532]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a276:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a278:	4b82      	ldr	r3, [pc, #520]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a27a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a27c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	2b08      	cmp	r3, #8
 800a282:	d007      	beq.n	800a294 <HAL_RCC_OscConfig+0x308>
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	2b18      	cmp	r3, #24
 800a288:	d13a      	bne.n	800a300 <HAL_RCC_OscConfig+0x374>
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f003 0303 	and.w	r3, r3, #3
 800a290:	2b01      	cmp	r3, #1
 800a292:	d135      	bne.n	800a300 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a294:	4b7b      	ldr	r3, [pc, #492]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d005      	beq.n	800a2ac <HAL_RCC_OscConfig+0x320>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	69db      	ldr	r3, [r3, #28]
 800a2a4:	2b80      	cmp	r3, #128	@ 0x80
 800a2a6:	d001      	beq.n	800a2ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e2c1      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2ac:	f7f9 fef4 	bl	8004098 <HAL_GetREVID>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d817      	bhi.n	800a2ea <HAL_RCC_OscConfig+0x35e>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	2b20      	cmp	r3, #32
 800a2c0:	d108      	bne.n	800a2d4 <HAL_RCC_OscConfig+0x348>
 800a2c2:	4b70      	ldr	r3, [pc, #448]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800a2ca:	4a6e      	ldr	r2, [pc, #440]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a2cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a2d0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a2d2:	e075      	b.n	800a3c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2d4:	4b6b      	ldr	r3, [pc, #428]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a1b      	ldr	r3, [r3, #32]
 800a2e0:	069b      	lsls	r3, r3, #26
 800a2e2:	4968      	ldr	r1, [pc, #416]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a2e8:	e06a      	b.n	800a3c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2ea:	4b66      	ldr	r3, [pc, #408]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	061b      	lsls	r3, r3, #24
 800a2f8:	4962      	ldr	r1, [pc, #392]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a2fe:	e05f      	b.n	800a3c0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	69db      	ldr	r3, [r3, #28]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d042      	beq.n	800a38e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a308:	4b5e      	ldr	r3, [pc, #376]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a5d      	ldr	r2, [pc, #372]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a30e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a314:	f7f9 fe90 	bl	8004038 <HAL_GetTick>
 800a318:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a31a:	e008      	b.n	800a32e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a31c:	f7f9 fe8c 	bl	8004038 <HAL_GetTick>
 800a320:	4602      	mov	r2, r0
 800a322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a324:	1ad3      	subs	r3, r2, r3
 800a326:	2b02      	cmp	r3, #2
 800a328:	d901      	bls.n	800a32e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a32a:	2303      	movs	r3, #3
 800a32c:	e280      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a32e:	4b55      	ldr	r3, [pc, #340]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a336:	2b00      	cmp	r3, #0
 800a338:	d0f0      	beq.n	800a31c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a33a:	f7f9 fead 	bl	8004098 <HAL_GetREVID>
 800a33e:	4603      	mov	r3, r0
 800a340:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a344:	4293      	cmp	r3, r2
 800a346:	d817      	bhi.n	800a378 <HAL_RCC_OscConfig+0x3ec>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a1b      	ldr	r3, [r3, #32]
 800a34c:	2b20      	cmp	r3, #32
 800a34e:	d108      	bne.n	800a362 <HAL_RCC_OscConfig+0x3d6>
 800a350:	4b4c      	ldr	r3, [pc, #304]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800a358:	4a4a      	ldr	r2, [pc, #296]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a35a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a35e:	6053      	str	r3, [r2, #4]
 800a360:	e02e      	b.n	800a3c0 <HAL_RCC_OscConfig+0x434>
 800a362:	4b48      	ldr	r3, [pc, #288]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	069b      	lsls	r3, r3, #26
 800a370:	4944      	ldr	r1, [pc, #272]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a372:	4313      	orrs	r3, r2
 800a374:	604b      	str	r3, [r1, #4]
 800a376:	e023      	b.n	800a3c0 <HAL_RCC_OscConfig+0x434>
 800a378:	4b42      	ldr	r3, [pc, #264]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a1b      	ldr	r3, [r3, #32]
 800a384:	061b      	lsls	r3, r3, #24
 800a386:	493f      	ldr	r1, [pc, #252]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a388:	4313      	orrs	r3, r2
 800a38a:	60cb      	str	r3, [r1, #12]
 800a38c:	e018      	b.n	800a3c0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a38e:	4b3d      	ldr	r3, [pc, #244]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a3c      	ldr	r2, [pc, #240]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a394:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a39a:	f7f9 fe4d 	bl	8004038 <HAL_GetTick>
 800a39e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a3a0:	e008      	b.n	800a3b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a3a2:	f7f9 fe49 	bl	8004038 <HAL_GetTick>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d901      	bls.n	800a3b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e23d      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a3b4:	4b33      	ldr	r3, [pc, #204]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1f0      	bne.n	800a3a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 0308 	and.w	r3, r3, #8
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d036      	beq.n	800a43a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d019      	beq.n	800a408 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3d4:	4b2b      	ldr	r3, [pc, #172]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a3d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3d8:	4a2a      	ldr	r2, [pc, #168]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a3da:	f043 0301 	orr.w	r3, r3, #1
 800a3de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3e0:	f7f9 fe2a 	bl	8004038 <HAL_GetTick>
 800a3e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a3e6:	e008      	b.n	800a3fa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3e8:	f7f9 fe26 	bl	8004038 <HAL_GetTick>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f0:	1ad3      	subs	r3, r2, r3
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d901      	bls.n	800a3fa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	e21a      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a3fa:	4b22      	ldr	r3, [pc, #136]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a3fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3fe:	f003 0302 	and.w	r3, r3, #2
 800a402:	2b00      	cmp	r3, #0
 800a404:	d0f0      	beq.n	800a3e8 <HAL_RCC_OscConfig+0x45c>
 800a406:	e018      	b.n	800a43a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a408:	4b1e      	ldr	r3, [pc, #120]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a40a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a40c:	4a1d      	ldr	r2, [pc, #116]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a40e:	f023 0301 	bic.w	r3, r3, #1
 800a412:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a414:	f7f9 fe10 	bl	8004038 <HAL_GetTick>
 800a418:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a41a:	e008      	b.n	800a42e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a41c:	f7f9 fe0c 	bl	8004038 <HAL_GetTick>
 800a420:	4602      	mov	r2, r0
 800a422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	2b02      	cmp	r3, #2
 800a428:	d901      	bls.n	800a42e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a42a:	2303      	movs	r3, #3
 800a42c:	e200      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a42e:	4b15      	ldr	r3, [pc, #84]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a432:	f003 0302 	and.w	r3, r3, #2
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1f0      	bne.n	800a41c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 0320 	and.w	r3, r3, #32
 800a442:	2b00      	cmp	r3, #0
 800a444:	d039      	beq.n	800a4ba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d01c      	beq.n	800a488 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a44e:	4b0d      	ldr	r3, [pc, #52]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a0c      	ldr	r2, [pc, #48]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a454:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a458:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a45a:	f7f9 fded 	bl	8004038 <HAL_GetTick>
 800a45e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a460:	e008      	b.n	800a474 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a462:	f7f9 fde9 	bl	8004038 <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d901      	bls.n	800a474 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a470:	2303      	movs	r3, #3
 800a472:	e1dd      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a474:	4b03      	ldr	r3, [pc, #12]	@ (800a484 <HAL_RCC_OscConfig+0x4f8>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d0f0      	beq.n	800a462 <HAL_RCC_OscConfig+0x4d6>
 800a480:	e01b      	b.n	800a4ba <HAL_RCC_OscConfig+0x52e>
 800a482:	bf00      	nop
 800a484:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a488:	4b9b      	ldr	r3, [pc, #620]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a9a      	ldr	r2, [pc, #616]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a48e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a492:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a494:	f7f9 fdd0 	bl	8004038 <HAL_GetTick>
 800a498:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a49a:	e008      	b.n	800a4ae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a49c:	f7f9 fdcc 	bl	8004038 <HAL_GetTick>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d901      	bls.n	800a4ae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	e1c0      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a4ae:	4b92      	ldr	r3, [pc, #584]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1f0      	bne.n	800a49c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 0304 	and.w	r3, r3, #4
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 8081 	beq.w	800a5ca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a4c8:	4b8c      	ldr	r3, [pc, #560]	@ (800a6fc <HAL_RCC_OscConfig+0x770>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a8b      	ldr	r2, [pc, #556]	@ (800a6fc <HAL_RCC_OscConfig+0x770>)
 800a4ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a4d4:	f7f9 fdb0 	bl	8004038 <HAL_GetTick>
 800a4d8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4da:	e008      	b.n	800a4ee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4dc:	f7f9 fdac 	bl	8004038 <HAL_GetTick>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	2b64      	cmp	r3, #100	@ 0x64
 800a4e8:	d901      	bls.n	800a4ee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	e1a0      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4ee:	4b83      	ldr	r3, [pc, #524]	@ (800a6fc <HAL_RCC_OscConfig+0x770>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d0f0      	beq.n	800a4dc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d106      	bne.n	800a510 <HAL_RCC_OscConfig+0x584>
 800a502:	4b7d      	ldr	r3, [pc, #500]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a506:	4a7c      	ldr	r2, [pc, #496]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a508:	f043 0301 	orr.w	r3, r3, #1
 800a50c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a50e:	e02d      	b.n	800a56c <HAL_RCC_OscConfig+0x5e0>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10c      	bne.n	800a532 <HAL_RCC_OscConfig+0x5a6>
 800a518:	4b77      	ldr	r3, [pc, #476]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a51a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a51c:	4a76      	ldr	r2, [pc, #472]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a51e:	f023 0301 	bic.w	r3, r3, #1
 800a522:	6713      	str	r3, [r2, #112]	@ 0x70
 800a524:	4b74      	ldr	r3, [pc, #464]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a528:	4a73      	ldr	r2, [pc, #460]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a52a:	f023 0304 	bic.w	r3, r3, #4
 800a52e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a530:	e01c      	b.n	800a56c <HAL_RCC_OscConfig+0x5e0>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	2b05      	cmp	r3, #5
 800a538:	d10c      	bne.n	800a554 <HAL_RCC_OscConfig+0x5c8>
 800a53a:	4b6f      	ldr	r3, [pc, #444]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a53c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a53e:	4a6e      	ldr	r2, [pc, #440]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a540:	f043 0304 	orr.w	r3, r3, #4
 800a544:	6713      	str	r3, [r2, #112]	@ 0x70
 800a546:	4b6c      	ldr	r3, [pc, #432]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a54a:	4a6b      	ldr	r2, [pc, #428]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a54c:	f043 0301 	orr.w	r3, r3, #1
 800a550:	6713      	str	r3, [r2, #112]	@ 0x70
 800a552:	e00b      	b.n	800a56c <HAL_RCC_OscConfig+0x5e0>
 800a554:	4b68      	ldr	r3, [pc, #416]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a558:	4a67      	ldr	r2, [pc, #412]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a55a:	f023 0301 	bic.w	r3, r3, #1
 800a55e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a560:	4b65      	ldr	r3, [pc, #404]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a564:	4a64      	ldr	r2, [pc, #400]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a566:	f023 0304 	bic.w	r3, r3, #4
 800a56a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d015      	beq.n	800a5a0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a574:	f7f9 fd60 	bl	8004038 <HAL_GetTick>
 800a578:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a57a:	e00a      	b.n	800a592 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a57c:	f7f9 fd5c 	bl	8004038 <HAL_GetTick>
 800a580:	4602      	mov	r2, r0
 800a582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d901      	bls.n	800a592 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a58e:	2303      	movs	r3, #3
 800a590:	e14e      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a592:	4b59      	ldr	r3, [pc, #356]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a596:	f003 0302 	and.w	r3, r3, #2
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d0ee      	beq.n	800a57c <HAL_RCC_OscConfig+0x5f0>
 800a59e:	e014      	b.n	800a5ca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5a0:	f7f9 fd4a 	bl	8004038 <HAL_GetTick>
 800a5a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a5a6:	e00a      	b.n	800a5be <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5a8:	f7f9 fd46 	bl	8004038 <HAL_GetTick>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d901      	bls.n	800a5be <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a5ba:	2303      	movs	r3, #3
 800a5bc:	e138      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a5be:	4b4e      	ldr	r3, [pc, #312]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a5c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5c2:	f003 0302 	and.w	r3, r3, #2
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1ee      	bne.n	800a5a8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 812d 	beq.w	800a82e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a5d4:	4b48      	ldr	r3, [pc, #288]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5dc:	2b18      	cmp	r3, #24
 800a5de:	f000 80bd 	beq.w	800a75c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	f040 809e 	bne.w	800a728 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5ec:	4b42      	ldr	r3, [pc, #264]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a41      	ldr	r2, [pc, #260]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a5f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a5f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5f8:	f7f9 fd1e 	bl	8004038 <HAL_GetTick>
 800a5fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5fe:	e008      	b.n	800a612 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a600:	f7f9 fd1a 	bl	8004038 <HAL_GetTick>
 800a604:	4602      	mov	r2, r0
 800a606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d901      	bls.n	800a612 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a60e:	2303      	movs	r3, #3
 800a610:	e10e      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a612:	4b39      	ldr	r3, [pc, #228]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1f0      	bne.n	800a600 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a61e:	4b36      	ldr	r3, [pc, #216]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a620:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a622:	4b37      	ldr	r3, [pc, #220]	@ (800a700 <HAL_RCC_OscConfig+0x774>)
 800a624:	4013      	ands	r3, r2
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a62e:	0112      	lsls	r2, r2, #4
 800a630:	430a      	orrs	r2, r1
 800a632:	4931      	ldr	r1, [pc, #196]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a634:	4313      	orrs	r3, r2
 800a636:	628b      	str	r3, [r1, #40]	@ 0x28
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a63c:	3b01      	subs	r3, #1
 800a63e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a646:	3b01      	subs	r3, #1
 800a648:	025b      	lsls	r3, r3, #9
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	431a      	orrs	r2, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a652:	3b01      	subs	r3, #1
 800a654:	041b      	lsls	r3, r3, #16
 800a656:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a65a:	431a      	orrs	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a660:	3b01      	subs	r3, #1
 800a662:	061b      	lsls	r3, r3, #24
 800a664:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a668:	4923      	ldr	r1, [pc, #140]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a66a:	4313      	orrs	r3, r2
 800a66c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a66e:	4b22      	ldr	r3, [pc, #136]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a672:	4a21      	ldr	r2, [pc, #132]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a674:	f023 0301 	bic.w	r3, r3, #1
 800a678:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a67a:	4b1f      	ldr	r3, [pc, #124]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a67c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a67e:	4b21      	ldr	r3, [pc, #132]	@ (800a704 <HAL_RCC_OscConfig+0x778>)
 800a680:	4013      	ands	r3, r2
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a686:	00d2      	lsls	r2, r2, #3
 800a688:	491b      	ldr	r1, [pc, #108]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a68a:	4313      	orrs	r3, r2
 800a68c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a68e:	4b1a      	ldr	r3, [pc, #104]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a692:	f023 020c 	bic.w	r2, r3, #12
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a69a:	4917      	ldr	r1, [pc, #92]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a69c:	4313      	orrs	r3, r2
 800a69e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a6a0:	4b15      	ldr	r3, [pc, #84]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a6a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a4:	f023 0202 	bic.w	r2, r3, #2
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6ac:	4912      	ldr	r1, [pc, #72]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a6b2:	4b11      	ldr	r3, [pc, #68]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a6b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b6:	4a10      	ldr	r2, [pc, #64]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a6b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6be:	4b0e      	ldr	r3, [pc, #56]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a6c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6c2:	4a0d      	ldr	r2, [pc, #52]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a6c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a6ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a6d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a6d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a6d6:	4b08      	ldr	r3, [pc, #32]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6da:	4a07      	ldr	r2, [pc, #28]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a6dc:	f043 0301 	orr.w	r3, r3, #1
 800a6e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a6e2:	4b05      	ldr	r3, [pc, #20]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a04      	ldr	r2, [pc, #16]	@ (800a6f8 <HAL_RCC_OscConfig+0x76c>)
 800a6e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a6ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ee:	f7f9 fca3 	bl	8004038 <HAL_GetTick>
 800a6f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6f4:	e011      	b.n	800a71a <HAL_RCC_OscConfig+0x78e>
 800a6f6:	bf00      	nop
 800a6f8:	58024400 	.word	0x58024400
 800a6fc:	58024800 	.word	0x58024800
 800a700:	fffffc0c 	.word	0xfffffc0c
 800a704:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a708:	f7f9 fc96 	bl	8004038 <HAL_GetTick>
 800a70c:	4602      	mov	r2, r0
 800a70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	2b02      	cmp	r3, #2
 800a714:	d901      	bls.n	800a71a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	e08a      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a71a:	4b47      	ldr	r3, [pc, #284]	@ (800a838 <HAL_RCC_OscConfig+0x8ac>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a722:	2b00      	cmp	r3, #0
 800a724:	d0f0      	beq.n	800a708 <HAL_RCC_OscConfig+0x77c>
 800a726:	e082      	b.n	800a82e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a728:	4b43      	ldr	r3, [pc, #268]	@ (800a838 <HAL_RCC_OscConfig+0x8ac>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a42      	ldr	r2, [pc, #264]	@ (800a838 <HAL_RCC_OscConfig+0x8ac>)
 800a72e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a734:	f7f9 fc80 	bl	8004038 <HAL_GetTick>
 800a738:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a73a:	e008      	b.n	800a74e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a73c:	f7f9 fc7c 	bl	8004038 <HAL_GetTick>
 800a740:	4602      	mov	r2, r0
 800a742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	2b02      	cmp	r3, #2
 800a748:	d901      	bls.n	800a74e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e070      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a74e:	4b3a      	ldr	r3, [pc, #232]	@ (800a838 <HAL_RCC_OscConfig+0x8ac>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1f0      	bne.n	800a73c <HAL_RCC_OscConfig+0x7b0>
 800a75a:	e068      	b.n	800a82e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a75c:	4b36      	ldr	r3, [pc, #216]	@ (800a838 <HAL_RCC_OscConfig+0x8ac>)
 800a75e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a760:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a762:	4b35      	ldr	r3, [pc, #212]	@ (800a838 <HAL_RCC_OscConfig+0x8ac>)
 800a764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a766:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d031      	beq.n	800a7d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	f003 0203 	and.w	r2, r3, #3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d12a      	bne.n	800a7d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	091b      	lsrs	r3, r3, #4
 800a782:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d122      	bne.n	800a7d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a798:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d11a      	bne.n	800a7d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	0a5b      	lsrs	r3, r3, #9
 800a7a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d111      	bne.n	800a7d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	0c1b      	lsrs	r3, r3, #16
 800a7b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d108      	bne.n	800a7d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	0e1b      	lsrs	r3, r3, #24
 800a7c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d001      	beq.n	800a7d8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e02b      	b.n	800a830 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a7d8:	4b17      	ldr	r3, [pc, #92]	@ (800a838 <HAL_RCC_OscConfig+0x8ac>)
 800a7da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7dc:	08db      	lsrs	r3, r3, #3
 800a7de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a7e2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7e8:	693a      	ldr	r2, [r7, #16]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d01f      	beq.n	800a82e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a7ee:	4b12      	ldr	r3, [pc, #72]	@ (800a838 <HAL_RCC_OscConfig+0x8ac>)
 800a7f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7f2:	4a11      	ldr	r2, [pc, #68]	@ (800a838 <HAL_RCC_OscConfig+0x8ac>)
 800a7f4:	f023 0301 	bic.w	r3, r3, #1
 800a7f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a7fa:	f7f9 fc1d 	bl	8004038 <HAL_GetTick>
 800a7fe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a800:	bf00      	nop
 800a802:	f7f9 fc19 	bl	8004038 <HAL_GetTick>
 800a806:	4602      	mov	r2, r0
 800a808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d0f9      	beq.n	800a802 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a80e:	4b0a      	ldr	r3, [pc, #40]	@ (800a838 <HAL_RCC_OscConfig+0x8ac>)
 800a810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a812:	4b0a      	ldr	r3, [pc, #40]	@ (800a83c <HAL_RCC_OscConfig+0x8b0>)
 800a814:	4013      	ands	r3, r2
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a81a:	00d2      	lsls	r2, r2, #3
 800a81c:	4906      	ldr	r1, [pc, #24]	@ (800a838 <HAL_RCC_OscConfig+0x8ac>)
 800a81e:	4313      	orrs	r3, r2
 800a820:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a822:	4b05      	ldr	r3, [pc, #20]	@ (800a838 <HAL_RCC_OscConfig+0x8ac>)
 800a824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a826:	4a04      	ldr	r2, [pc, #16]	@ (800a838 <HAL_RCC_OscConfig+0x8ac>)
 800a828:	f043 0301 	orr.w	r3, r3, #1
 800a82c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3730      	adds	r7, #48	@ 0x30
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	58024400 	.word	0x58024400
 800a83c:	ffff0007 	.word	0xffff0007

0800a840 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d101      	bne.n	800a854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	e19c      	b.n	800ab8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a854:	4b8a      	ldr	r3, [pc, #552]	@ (800aa80 <HAL_RCC_ClockConfig+0x240>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 030f 	and.w	r3, r3, #15
 800a85c:	683a      	ldr	r2, [r7, #0]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d910      	bls.n	800a884 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a862:	4b87      	ldr	r3, [pc, #540]	@ (800aa80 <HAL_RCC_ClockConfig+0x240>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f023 020f 	bic.w	r2, r3, #15
 800a86a:	4985      	ldr	r1, [pc, #532]	@ (800aa80 <HAL_RCC_ClockConfig+0x240>)
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	4313      	orrs	r3, r2
 800a870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a872:	4b83      	ldr	r3, [pc, #524]	@ (800aa80 <HAL_RCC_ClockConfig+0x240>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 030f 	and.w	r3, r3, #15
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d001      	beq.n	800a884 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	e184      	b.n	800ab8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 0304 	and.w	r3, r3, #4
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d010      	beq.n	800a8b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	691a      	ldr	r2, [r3, #16]
 800a894:	4b7b      	ldr	r3, [pc, #492]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d908      	bls.n	800a8b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a8a0:	4b78      	ldr	r3, [pc, #480]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	4975      	ldr	r1, [pc, #468]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0308 	and.w	r3, r3, #8
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d010      	beq.n	800a8e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	695a      	ldr	r2, [r3, #20]
 800a8c2:	4b70      	ldr	r3, [pc, #448]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a8c4:	69db      	ldr	r3, [r3, #28]
 800a8c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d908      	bls.n	800a8e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a8ce:	4b6d      	ldr	r3, [pc, #436]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	695b      	ldr	r3, [r3, #20]
 800a8da:	496a      	ldr	r1, [pc, #424]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0310 	and.w	r3, r3, #16
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d010      	beq.n	800a90e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	699a      	ldr	r2, [r3, #24]
 800a8f0:	4b64      	ldr	r3, [pc, #400]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a8f2:	69db      	ldr	r3, [r3, #28]
 800a8f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d908      	bls.n	800a90e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a8fc:	4b61      	ldr	r3, [pc, #388]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a8fe:	69db      	ldr	r3, [r3, #28]
 800a900:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	699b      	ldr	r3, [r3, #24]
 800a908:	495e      	ldr	r1, [pc, #376]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a90a:	4313      	orrs	r3, r2
 800a90c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0320 	and.w	r3, r3, #32
 800a916:	2b00      	cmp	r3, #0
 800a918:	d010      	beq.n	800a93c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	69da      	ldr	r2, [r3, #28]
 800a91e:	4b59      	ldr	r3, [pc, #356]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a920:	6a1b      	ldr	r3, [r3, #32]
 800a922:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a926:	429a      	cmp	r2, r3
 800a928:	d908      	bls.n	800a93c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a92a:	4b56      	ldr	r3, [pc, #344]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a92c:	6a1b      	ldr	r3, [r3, #32]
 800a92e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	4953      	ldr	r1, [pc, #332]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a938:	4313      	orrs	r3, r2
 800a93a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 0302 	and.w	r3, r3, #2
 800a944:	2b00      	cmp	r3, #0
 800a946:	d010      	beq.n	800a96a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	68da      	ldr	r2, [r3, #12]
 800a94c:	4b4d      	ldr	r3, [pc, #308]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a94e:	699b      	ldr	r3, [r3, #24]
 800a950:	f003 030f 	and.w	r3, r3, #15
 800a954:	429a      	cmp	r2, r3
 800a956:	d908      	bls.n	800a96a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a958:	4b4a      	ldr	r3, [pc, #296]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a95a:	699b      	ldr	r3, [r3, #24]
 800a95c:	f023 020f 	bic.w	r2, r3, #15
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	4947      	ldr	r1, [pc, #284]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a966:	4313      	orrs	r3, r2
 800a968:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d055      	beq.n	800aa22 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a976:	4b43      	ldr	r3, [pc, #268]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	4940      	ldr	r1, [pc, #256]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a984:	4313      	orrs	r3, r2
 800a986:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d107      	bne.n	800a9a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a990:	4b3c      	ldr	r3, [pc, #240]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d121      	bne.n	800a9e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e0f6      	b.n	800ab8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	2b03      	cmp	r3, #3
 800a9a6:	d107      	bne.n	800a9b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a9a8:	4b36      	ldr	r3, [pc, #216]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d115      	bne.n	800a9e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e0ea      	b.n	800ab8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d107      	bne.n	800a9d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9c0:	4b30      	ldr	r3, [pc, #192]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d109      	bne.n	800a9e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e0de      	b.n	800ab8e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9d0:	4b2c      	ldr	r3, [pc, #176]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0304 	and.w	r3, r3, #4
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d101      	bne.n	800a9e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e0d6      	b.n	800ab8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a9e0:	4b28      	ldr	r3, [pc, #160]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	f023 0207 	bic.w	r2, r3, #7
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	4925      	ldr	r1, [pc, #148]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9f2:	f7f9 fb21 	bl	8004038 <HAL_GetTick>
 800a9f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9f8:	e00a      	b.n	800aa10 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9fa:	f7f9 fb1d 	bl	8004038 <HAL_GetTick>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d901      	bls.n	800aa10 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e0be      	b.n	800ab8e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa10:	4b1c      	ldr	r3, [pc, #112]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	00db      	lsls	r3, r3, #3
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d1eb      	bne.n	800a9fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f003 0302 	and.w	r3, r3, #2
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d010      	beq.n	800aa50 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68da      	ldr	r2, [r3, #12]
 800aa32:	4b14      	ldr	r3, [pc, #80]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	f003 030f 	and.w	r3, r3, #15
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d208      	bcs.n	800aa50 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa3e:	4b11      	ldr	r3, [pc, #68]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	f023 020f 	bic.w	r2, r3, #15
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	490e      	ldr	r1, [pc, #56]	@ (800aa84 <HAL_RCC_ClockConfig+0x244>)
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aa50:	4b0b      	ldr	r3, [pc, #44]	@ (800aa80 <HAL_RCC_ClockConfig+0x240>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f003 030f 	and.w	r3, r3, #15
 800aa58:	683a      	ldr	r2, [r7, #0]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d214      	bcs.n	800aa88 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa5e:	4b08      	ldr	r3, [pc, #32]	@ (800aa80 <HAL_RCC_ClockConfig+0x240>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f023 020f 	bic.w	r2, r3, #15
 800aa66:	4906      	ldr	r1, [pc, #24]	@ (800aa80 <HAL_RCC_ClockConfig+0x240>)
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa6e:	4b04      	ldr	r3, [pc, #16]	@ (800aa80 <HAL_RCC_ClockConfig+0x240>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 030f 	and.w	r3, r3, #15
 800aa76:	683a      	ldr	r2, [r7, #0]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d005      	beq.n	800aa88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e086      	b.n	800ab8e <HAL_RCC_ClockConfig+0x34e>
 800aa80:	52002000 	.word	0x52002000
 800aa84:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 0304 	and.w	r3, r3, #4
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d010      	beq.n	800aab6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	691a      	ldr	r2, [r3, #16]
 800aa98:	4b3f      	ldr	r3, [pc, #252]	@ (800ab98 <HAL_RCC_ClockConfig+0x358>)
 800aa9a:	699b      	ldr	r3, [r3, #24]
 800aa9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d208      	bcs.n	800aab6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aaa4:	4b3c      	ldr	r3, [pc, #240]	@ (800ab98 <HAL_RCC_ClockConfig+0x358>)
 800aaa6:	699b      	ldr	r3, [r3, #24]
 800aaa8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	4939      	ldr	r1, [pc, #228]	@ (800ab98 <HAL_RCC_ClockConfig+0x358>)
 800aab2:	4313      	orrs	r3, r2
 800aab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 0308 	and.w	r3, r3, #8
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d010      	beq.n	800aae4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	695a      	ldr	r2, [r3, #20]
 800aac6:	4b34      	ldr	r3, [pc, #208]	@ (800ab98 <HAL_RCC_ClockConfig+0x358>)
 800aac8:	69db      	ldr	r3, [r3, #28]
 800aaca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aace:	429a      	cmp	r2, r3
 800aad0:	d208      	bcs.n	800aae4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aad2:	4b31      	ldr	r3, [pc, #196]	@ (800ab98 <HAL_RCC_ClockConfig+0x358>)
 800aad4:	69db      	ldr	r3, [r3, #28]
 800aad6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	695b      	ldr	r3, [r3, #20]
 800aade:	492e      	ldr	r1, [pc, #184]	@ (800ab98 <HAL_RCC_ClockConfig+0x358>)
 800aae0:	4313      	orrs	r3, r2
 800aae2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f003 0310 	and.w	r3, r3, #16
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d010      	beq.n	800ab12 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	699a      	ldr	r2, [r3, #24]
 800aaf4:	4b28      	ldr	r3, [pc, #160]	@ (800ab98 <HAL_RCC_ClockConfig+0x358>)
 800aaf6:	69db      	ldr	r3, [r3, #28]
 800aaf8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d208      	bcs.n	800ab12 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab00:	4b25      	ldr	r3, [pc, #148]	@ (800ab98 <HAL_RCC_ClockConfig+0x358>)
 800ab02:	69db      	ldr	r3, [r3, #28]
 800ab04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	699b      	ldr	r3, [r3, #24]
 800ab0c:	4922      	ldr	r1, [pc, #136]	@ (800ab98 <HAL_RCC_ClockConfig+0x358>)
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 0320 	and.w	r3, r3, #32
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d010      	beq.n	800ab40 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	69da      	ldr	r2, [r3, #28]
 800ab22:	4b1d      	ldr	r3, [pc, #116]	@ (800ab98 <HAL_RCC_ClockConfig+0x358>)
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d208      	bcs.n	800ab40 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ab2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ab98 <HAL_RCC_ClockConfig+0x358>)
 800ab30:	6a1b      	ldr	r3, [r3, #32]
 800ab32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	69db      	ldr	r3, [r3, #28]
 800ab3a:	4917      	ldr	r1, [pc, #92]	@ (800ab98 <HAL_RCC_ClockConfig+0x358>)
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ab40:	f000 f834 	bl	800abac <HAL_RCC_GetSysClockFreq>
 800ab44:	4602      	mov	r2, r0
 800ab46:	4b14      	ldr	r3, [pc, #80]	@ (800ab98 <HAL_RCC_ClockConfig+0x358>)
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	0a1b      	lsrs	r3, r3, #8
 800ab4c:	f003 030f 	and.w	r3, r3, #15
 800ab50:	4912      	ldr	r1, [pc, #72]	@ (800ab9c <HAL_RCC_ClockConfig+0x35c>)
 800ab52:	5ccb      	ldrb	r3, [r1, r3]
 800ab54:	f003 031f 	and.w	r3, r3, #31
 800ab58:	fa22 f303 	lsr.w	r3, r2, r3
 800ab5c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ab98 <HAL_RCC_ClockConfig+0x358>)
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	f003 030f 	and.w	r3, r3, #15
 800ab66:	4a0d      	ldr	r2, [pc, #52]	@ (800ab9c <HAL_RCC_ClockConfig+0x35c>)
 800ab68:	5cd3      	ldrb	r3, [r2, r3]
 800ab6a:	f003 031f 	and.w	r3, r3, #31
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	fa22 f303 	lsr.w	r3, r2, r3
 800ab74:	4a0a      	ldr	r2, [pc, #40]	@ (800aba0 <HAL_RCC_ClockConfig+0x360>)
 800ab76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ab78:	4a0a      	ldr	r2, [pc, #40]	@ (800aba4 <HAL_RCC_ClockConfig+0x364>)
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ab7e:	4b0a      	ldr	r3, [pc, #40]	@ (800aba8 <HAL_RCC_ClockConfig+0x368>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7f8 ffe4 	bl	8003b50 <HAL_InitTick>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3718      	adds	r7, #24
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	58024400 	.word	0x58024400
 800ab9c:	0801a304 	.word	0x0801a304
 800aba0:	240000b8 	.word	0x240000b8
 800aba4:	240000b4 	.word	0x240000b4
 800aba8:	240000bc 	.word	0x240000bc

0800abac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800abac:	b480      	push	{r7}
 800abae:	b089      	sub	sp, #36	@ 0x24
 800abb0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800abb2:	4bb3      	ldr	r3, [pc, #716]	@ (800ae80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abba:	2b18      	cmp	r3, #24
 800abbc:	f200 8155 	bhi.w	800ae6a <HAL_RCC_GetSysClockFreq+0x2be>
 800abc0:	a201      	add	r2, pc, #4	@ (adr r2, 800abc8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800abc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc6:	bf00      	nop
 800abc8:	0800ac2d 	.word	0x0800ac2d
 800abcc:	0800ae6b 	.word	0x0800ae6b
 800abd0:	0800ae6b 	.word	0x0800ae6b
 800abd4:	0800ae6b 	.word	0x0800ae6b
 800abd8:	0800ae6b 	.word	0x0800ae6b
 800abdc:	0800ae6b 	.word	0x0800ae6b
 800abe0:	0800ae6b 	.word	0x0800ae6b
 800abe4:	0800ae6b 	.word	0x0800ae6b
 800abe8:	0800ac53 	.word	0x0800ac53
 800abec:	0800ae6b 	.word	0x0800ae6b
 800abf0:	0800ae6b 	.word	0x0800ae6b
 800abf4:	0800ae6b 	.word	0x0800ae6b
 800abf8:	0800ae6b 	.word	0x0800ae6b
 800abfc:	0800ae6b 	.word	0x0800ae6b
 800ac00:	0800ae6b 	.word	0x0800ae6b
 800ac04:	0800ae6b 	.word	0x0800ae6b
 800ac08:	0800ac59 	.word	0x0800ac59
 800ac0c:	0800ae6b 	.word	0x0800ae6b
 800ac10:	0800ae6b 	.word	0x0800ae6b
 800ac14:	0800ae6b 	.word	0x0800ae6b
 800ac18:	0800ae6b 	.word	0x0800ae6b
 800ac1c:	0800ae6b 	.word	0x0800ae6b
 800ac20:	0800ae6b 	.word	0x0800ae6b
 800ac24:	0800ae6b 	.word	0x0800ae6b
 800ac28:	0800ac5f 	.word	0x0800ac5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac2c:	4b94      	ldr	r3, [pc, #592]	@ (800ae80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f003 0320 	and.w	r3, r3, #32
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d009      	beq.n	800ac4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac38:	4b91      	ldr	r3, [pc, #580]	@ (800ae80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	08db      	lsrs	r3, r3, #3
 800ac3e:	f003 0303 	and.w	r3, r3, #3
 800ac42:	4a90      	ldr	r2, [pc, #576]	@ (800ae84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac44:	fa22 f303 	lsr.w	r3, r2, r3
 800ac48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ac4a:	e111      	b.n	800ae70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ac4c:	4b8d      	ldr	r3, [pc, #564]	@ (800ae84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac4e:	61bb      	str	r3, [r7, #24]
      break;
 800ac50:	e10e      	b.n	800ae70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ac52:	4b8d      	ldr	r3, [pc, #564]	@ (800ae88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ac54:	61bb      	str	r3, [r7, #24]
      break;
 800ac56:	e10b      	b.n	800ae70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ac58:	4b8c      	ldr	r3, [pc, #560]	@ (800ae8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ac5a:	61bb      	str	r3, [r7, #24]
      break;
 800ac5c:	e108      	b.n	800ae70 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac5e:	4b88      	ldr	r3, [pc, #544]	@ (800ae80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac62:	f003 0303 	and.w	r3, r3, #3
 800ac66:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ac68:	4b85      	ldr	r3, [pc, #532]	@ (800ae80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac6c:	091b      	lsrs	r3, r3, #4
 800ac6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac72:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ac74:	4b82      	ldr	r3, [pc, #520]	@ (800ae80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac78:	f003 0301 	and.w	r3, r3, #1
 800ac7c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ac7e:	4b80      	ldr	r3, [pc, #512]	@ (800ae80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac82:	08db      	lsrs	r3, r3, #3
 800ac84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	fb02 f303 	mul.w	r3, r2, r3
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac96:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 80e1 	beq.w	800ae64 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	f000 8083 	beq.w	800adb0 <HAL_RCC_GetSysClockFreq+0x204>
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b02      	cmp	r3, #2
 800acae:	f200 80a1 	bhi.w	800adf4 <HAL_RCC_GetSysClockFreq+0x248>
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d003      	beq.n	800acc0 <HAL_RCC_GetSysClockFreq+0x114>
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d056      	beq.n	800ad6c <HAL_RCC_GetSysClockFreq+0x1c0>
 800acbe:	e099      	b.n	800adf4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acc0:	4b6f      	ldr	r3, [pc, #444]	@ (800ae80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 0320 	and.w	r3, r3, #32
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d02d      	beq.n	800ad28 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800accc:	4b6c      	ldr	r3, [pc, #432]	@ (800ae80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	08db      	lsrs	r3, r3, #3
 800acd2:	f003 0303 	and.w	r3, r3, #3
 800acd6:	4a6b      	ldr	r2, [pc, #428]	@ (800ae84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800acd8:	fa22 f303 	lsr.w	r3, r2, r3
 800acdc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	ee07 3a90 	vmov	s15, r3
 800ace4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	ee07 3a90 	vmov	s15, r3
 800acee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acf6:	4b62      	ldr	r3, [pc, #392]	@ (800ae80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad06:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad0a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800ae90 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad22:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ad26:	e087      	b.n	800ae38 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	ee07 3a90 	vmov	s15, r3
 800ad2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad32:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800ae94 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ad36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad3a:	4b51      	ldr	r3, [pc, #324]	@ (800ae80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad42:	ee07 3a90 	vmov	s15, r3
 800ad46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad4a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad4e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800ae90 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad6a:	e065      	b.n	800ae38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	ee07 3a90 	vmov	s15, r3
 800ad72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad76:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800ae98 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad7e:	4b40      	ldr	r3, [pc, #256]	@ (800ae80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad86:	ee07 3a90 	vmov	s15, r3
 800ad8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad8e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad92:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ae90 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ada2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ada6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adae:	e043      	b.n	800ae38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	ee07 3a90 	vmov	s15, r3
 800adb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800ae9c <HAL_RCC_GetSysClockFreq+0x2f0>
 800adbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adc2:	4b2f      	ldr	r3, [pc, #188]	@ (800ae80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adca:	ee07 3a90 	vmov	s15, r3
 800adce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800add2:	ed97 6a02 	vldr	s12, [r7, #8]
 800add6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800ae90 <HAL_RCC_GetSysClockFreq+0x2e4>
 800adda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ade2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ade6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adf2:	e021      	b.n	800ae38 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	ee07 3a90 	vmov	s15, r3
 800adfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800ae98 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ae02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae06:	4b1e      	ldr	r3, [pc, #120]	@ (800ae80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae0e:	ee07 3a90 	vmov	s15, r3
 800ae12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae16:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae1a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800ae90 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae36:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ae38:	4b11      	ldr	r3, [pc, #68]	@ (800ae80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae3c:	0a5b      	lsrs	r3, r3, #9
 800ae3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae42:	3301      	adds	r3, #1
 800ae44:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	ee07 3a90 	vmov	s15, r3
 800ae4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ae50:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae5c:	ee17 3a90 	vmov	r3, s15
 800ae60:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ae62:	e005      	b.n	800ae70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ae64:	2300      	movs	r3, #0
 800ae66:	61bb      	str	r3, [r7, #24]
      break;
 800ae68:	e002      	b.n	800ae70 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ae6a:	4b07      	ldr	r3, [pc, #28]	@ (800ae88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ae6c:	61bb      	str	r3, [r7, #24]
      break;
 800ae6e:	bf00      	nop
  }

  return sysclockfreq;
 800ae70:	69bb      	ldr	r3, [r7, #24]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3724      	adds	r7, #36	@ 0x24
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	58024400 	.word	0x58024400
 800ae84:	03d09000 	.word	0x03d09000
 800ae88:	003d0900 	.word	0x003d0900
 800ae8c:	017d7840 	.word	0x017d7840
 800ae90:	46000000 	.word	0x46000000
 800ae94:	4c742400 	.word	0x4c742400
 800ae98:	4a742400 	.word	0x4a742400
 800ae9c:	4bbebc20 	.word	0x4bbebc20

0800aea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aea6:	f7ff fe81 	bl	800abac <HAL_RCC_GetSysClockFreq>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	4b10      	ldr	r3, [pc, #64]	@ (800aef0 <HAL_RCC_GetHCLKFreq+0x50>)
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	0a1b      	lsrs	r3, r3, #8
 800aeb2:	f003 030f 	and.w	r3, r3, #15
 800aeb6:	490f      	ldr	r1, [pc, #60]	@ (800aef4 <HAL_RCC_GetHCLKFreq+0x54>)
 800aeb8:	5ccb      	ldrb	r3, [r1, r3]
 800aeba:	f003 031f 	and.w	r3, r3, #31
 800aebe:	fa22 f303 	lsr.w	r3, r2, r3
 800aec2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aec4:	4b0a      	ldr	r3, [pc, #40]	@ (800aef0 <HAL_RCC_GetHCLKFreq+0x50>)
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	f003 030f 	and.w	r3, r3, #15
 800aecc:	4a09      	ldr	r2, [pc, #36]	@ (800aef4 <HAL_RCC_GetHCLKFreq+0x54>)
 800aece:	5cd3      	ldrb	r3, [r2, r3]
 800aed0:	f003 031f 	and.w	r3, r3, #31
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	fa22 f303 	lsr.w	r3, r2, r3
 800aeda:	4a07      	ldr	r2, [pc, #28]	@ (800aef8 <HAL_RCC_GetHCLKFreq+0x58>)
 800aedc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aede:	4a07      	ldr	r2, [pc, #28]	@ (800aefc <HAL_RCC_GetHCLKFreq+0x5c>)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800aee4:	4b04      	ldr	r3, [pc, #16]	@ (800aef8 <HAL_RCC_GetHCLKFreq+0x58>)
 800aee6:	681b      	ldr	r3, [r3, #0]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	58024400 	.word	0x58024400
 800aef4:	0801a304 	.word	0x0801a304
 800aef8:	240000b8 	.word	0x240000b8
 800aefc:	240000b4 	.word	0x240000b4

0800af00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800af04:	f7ff ffcc 	bl	800aea0 <HAL_RCC_GetHCLKFreq>
 800af08:	4602      	mov	r2, r0
 800af0a:	4b06      	ldr	r3, [pc, #24]	@ (800af24 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	091b      	lsrs	r3, r3, #4
 800af10:	f003 0307 	and.w	r3, r3, #7
 800af14:	4904      	ldr	r1, [pc, #16]	@ (800af28 <HAL_RCC_GetPCLK1Freq+0x28>)
 800af16:	5ccb      	ldrb	r3, [r1, r3]
 800af18:	f003 031f 	and.w	r3, r3, #31
 800af1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800af20:	4618      	mov	r0, r3
 800af22:	bd80      	pop	{r7, pc}
 800af24:	58024400 	.word	0x58024400
 800af28:	0801a304 	.word	0x0801a304

0800af2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800af30:	f7ff ffb6 	bl	800aea0 <HAL_RCC_GetHCLKFreq>
 800af34:	4602      	mov	r2, r0
 800af36:	4b06      	ldr	r3, [pc, #24]	@ (800af50 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af38:	69db      	ldr	r3, [r3, #28]
 800af3a:	0a1b      	lsrs	r3, r3, #8
 800af3c:	f003 0307 	and.w	r3, r3, #7
 800af40:	4904      	ldr	r1, [pc, #16]	@ (800af54 <HAL_RCC_GetPCLK2Freq+0x28>)
 800af42:	5ccb      	ldrb	r3, [r1, r3]
 800af44:	f003 031f 	and.w	r3, r3, #31
 800af48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	58024400 	.word	0x58024400
 800af54:	0801a304 	.word	0x0801a304

0800af58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	223f      	movs	r2, #63	@ 0x3f
 800af66:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800af68:	4b1a      	ldr	r3, [pc, #104]	@ (800afd4 <HAL_RCC_GetClockConfig+0x7c>)
 800af6a:	691b      	ldr	r3, [r3, #16]
 800af6c:	f003 0207 	and.w	r2, r3, #7
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800af74:	4b17      	ldr	r3, [pc, #92]	@ (800afd4 <HAL_RCC_GetClockConfig+0x7c>)
 800af76:	699b      	ldr	r3, [r3, #24]
 800af78:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800af80:	4b14      	ldr	r3, [pc, #80]	@ (800afd4 <HAL_RCC_GetClockConfig+0x7c>)
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	f003 020f 	and.w	r2, r3, #15
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800af8c:	4b11      	ldr	r3, [pc, #68]	@ (800afd4 <HAL_RCC_GetClockConfig+0x7c>)
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800af98:	4b0e      	ldr	r3, [pc, #56]	@ (800afd4 <HAL_RCC_GetClockConfig+0x7c>)
 800af9a:	69db      	ldr	r3, [r3, #28]
 800af9c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800afa4:	4b0b      	ldr	r3, [pc, #44]	@ (800afd4 <HAL_RCC_GetClockConfig+0x7c>)
 800afa6:	69db      	ldr	r3, [r3, #28]
 800afa8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800afb0:	4b08      	ldr	r3, [pc, #32]	@ (800afd4 <HAL_RCC_GetClockConfig+0x7c>)
 800afb2:	6a1b      	ldr	r3, [r3, #32]
 800afb4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800afbc:	4b06      	ldr	r3, [pc, #24]	@ (800afd8 <HAL_RCC_GetClockConfig+0x80>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f003 020f 	and.w	r2, r3, #15
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	601a      	str	r2, [r3, #0]
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr
 800afd4:	58024400 	.word	0x58024400
 800afd8:	52002000 	.word	0x52002000

0800afdc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800afdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afe0:	b0c8      	sub	sp, #288	@ 0x120
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800afe8:	2300      	movs	r3, #0
 800afea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800afee:	2300      	movs	r3, #0
 800aff0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b000:	2500      	movs	r5, #0
 800b002:	ea54 0305 	orrs.w	r3, r4, r5
 800b006:	d049      	beq.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b00c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b00e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b012:	d02f      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b014:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b018:	d828      	bhi.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b01a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b01e:	d01a      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b020:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b024:	d822      	bhi.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b026:	2b00      	cmp	r3, #0
 800b028:	d003      	beq.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b02a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b02e:	d007      	beq.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b030:	e01c      	b.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b032:	4bb8      	ldr	r3, [pc, #736]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b036:	4ab7      	ldr	r2, [pc, #732]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b03c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b03e:	e01a      	b.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b040:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b044:	3308      	adds	r3, #8
 800b046:	2102      	movs	r1, #2
 800b048:	4618      	mov	r0, r3
 800b04a:	f002 fb45 	bl	800d6d8 <RCCEx_PLL2_Config>
 800b04e:	4603      	mov	r3, r0
 800b050:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b054:	e00f      	b.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b05a:	3328      	adds	r3, #40	@ 0x28
 800b05c:	2102      	movs	r1, #2
 800b05e:	4618      	mov	r0, r3
 800b060:	f002 fbec 	bl	800d83c <RCCEx_PLL3_Config>
 800b064:	4603      	mov	r3, r0
 800b066:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b06a:	e004      	b.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b072:	e000      	b.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b074:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b076:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d10a      	bne.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b07e:	4ba5      	ldr	r3, [pc, #660]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b082:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b086:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b08a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b08c:	4aa1      	ldr	r2, [pc, #644]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b08e:	430b      	orrs	r3, r1
 800b090:	6513      	str	r3, [r2, #80]	@ 0x50
 800b092:	e003      	b.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b094:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b098:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b09c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b0a8:	f04f 0900 	mov.w	r9, #0
 800b0ac:	ea58 0309 	orrs.w	r3, r8, r9
 800b0b0:	d047      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b0b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0b8:	2b04      	cmp	r3, #4
 800b0ba:	d82a      	bhi.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b0bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b0c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c2:	bf00      	nop
 800b0c4:	0800b0d9 	.word	0x0800b0d9
 800b0c8:	0800b0e7 	.word	0x0800b0e7
 800b0cc:	0800b0fd 	.word	0x0800b0fd
 800b0d0:	0800b11b 	.word	0x0800b11b
 800b0d4:	0800b11b 	.word	0x0800b11b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0d8:	4b8e      	ldr	r3, [pc, #568]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0dc:	4a8d      	ldr	r2, [pc, #564]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b0e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0e4:	e01a      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0ea:	3308      	adds	r3, #8
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f002 faf2 	bl	800d6d8 <RCCEx_PLL2_Config>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0fa:	e00f      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b100:	3328      	adds	r3, #40	@ 0x28
 800b102:	2100      	movs	r1, #0
 800b104:	4618      	mov	r0, r3
 800b106:	f002 fb99 	bl	800d83c <RCCEx_PLL3_Config>
 800b10a:	4603      	mov	r3, r0
 800b10c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b110:	e004      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b118:	e000      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b11a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b11c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b120:	2b00      	cmp	r3, #0
 800b122:	d10a      	bne.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b124:	4b7b      	ldr	r3, [pc, #492]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b128:	f023 0107 	bic.w	r1, r3, #7
 800b12c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b132:	4a78      	ldr	r2, [pc, #480]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b134:	430b      	orrs	r3, r1
 800b136:	6513      	str	r3, [r2, #80]	@ 0x50
 800b138:	e003      	b.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b13a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b13e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b142:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800b14e:	f04f 0b00 	mov.w	fp, #0
 800b152:	ea5a 030b 	orrs.w	r3, sl, fp
 800b156:	d04c      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b15c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b15e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b162:	d030      	beq.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b168:	d829      	bhi.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b16a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b16c:	d02d      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b16e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b170:	d825      	bhi.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b172:	2b80      	cmp	r3, #128	@ 0x80
 800b174:	d018      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b176:	2b80      	cmp	r3, #128	@ 0x80
 800b178:	d821      	bhi.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d002      	beq.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b17e:	2b40      	cmp	r3, #64	@ 0x40
 800b180:	d007      	beq.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b182:	e01c      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b184:	4b63      	ldr	r3, [pc, #396]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b188:	4a62      	ldr	r2, [pc, #392]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b18a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b18e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b190:	e01c      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b196:	3308      	adds	r3, #8
 800b198:	2100      	movs	r1, #0
 800b19a:	4618      	mov	r0, r3
 800b19c:	f002 fa9c 	bl	800d6d8 <RCCEx_PLL2_Config>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b1a6:	e011      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1ac:	3328      	adds	r3, #40	@ 0x28
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f002 fb43 	bl	800d83c <RCCEx_PLL3_Config>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b1bc:	e006      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b1c4:	e002      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b1c6:	bf00      	nop
 800b1c8:	e000      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b1ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10a      	bne.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b1d4:	4b4f      	ldr	r3, [pc, #316]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800b1dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1e2:	4a4c      	ldr	r2, [pc, #304]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1e4:	430b      	orrs	r3, r1
 800b1e6:	6513      	str	r3, [r2, #80]	@ 0x50
 800b1e8:	e003      	b.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b1f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b1fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b202:	2300      	movs	r3, #0
 800b204:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b208:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b20c:	460b      	mov	r3, r1
 800b20e:	4313      	orrs	r3, r2
 800b210:	d053      	beq.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b212:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b216:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b21a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b21e:	d035      	beq.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b220:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b224:	d82e      	bhi.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b226:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b22a:	d031      	beq.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b22c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b230:	d828      	bhi.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b232:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b236:	d01a      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b238:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b23c:	d822      	bhi.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d003      	beq.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b242:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b246:	d007      	beq.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b248:	e01c      	b.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b24a:	4b32      	ldr	r3, [pc, #200]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b24c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b24e:	4a31      	ldr	r2, [pc, #196]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b254:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b256:	e01c      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b25c:	3308      	adds	r3, #8
 800b25e:	2100      	movs	r1, #0
 800b260:	4618      	mov	r0, r3
 800b262:	f002 fa39 	bl	800d6d8 <RCCEx_PLL2_Config>
 800b266:	4603      	mov	r3, r0
 800b268:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b26c:	e011      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b26e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b272:	3328      	adds	r3, #40	@ 0x28
 800b274:	2100      	movs	r1, #0
 800b276:	4618      	mov	r0, r3
 800b278:	f002 fae0 	bl	800d83c <RCCEx_PLL3_Config>
 800b27c:	4603      	mov	r3, r0
 800b27e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b282:	e006      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b284:	2301      	movs	r3, #1
 800b286:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b28a:	e002      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b28c:	bf00      	nop
 800b28e:	e000      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b290:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b292:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10b      	bne.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b29a:	4b1e      	ldr	r3, [pc, #120]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b29c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b29e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800b2a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b2aa:	4a1a      	ldr	r2, [pc, #104]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2ac:	430b      	orrs	r3, r1
 800b2ae:	6593      	str	r3, [r2, #88]	@ 0x58
 800b2b0:	e003      	b.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b2b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b2ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b2c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b2d0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	d056      	beq.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b2da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b2e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b2e6:	d038      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b2e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b2ec:	d831      	bhi.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b2ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b2f2:	d034      	beq.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b2f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b2f8:	d82b      	bhi.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b2fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b2fe:	d01d      	beq.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b300:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b304:	d825      	bhi.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b306:	2b00      	cmp	r3, #0
 800b308:	d006      	beq.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b30a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b30e:	d00a      	beq.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b310:	e01f      	b.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b312:	bf00      	nop
 800b314:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b318:	4ba2      	ldr	r3, [pc, #648]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b31a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b31c:	4aa1      	ldr	r2, [pc, #644]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b31e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b324:	e01c      	b.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b32a:	3308      	adds	r3, #8
 800b32c:	2100      	movs	r1, #0
 800b32e:	4618      	mov	r0, r3
 800b330:	f002 f9d2 	bl	800d6d8 <RCCEx_PLL2_Config>
 800b334:	4603      	mov	r3, r0
 800b336:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b33a:	e011      	b.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b33c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b340:	3328      	adds	r3, #40	@ 0x28
 800b342:	2100      	movs	r1, #0
 800b344:	4618      	mov	r0, r3
 800b346:	f002 fa79 	bl	800d83c <RCCEx_PLL3_Config>
 800b34a:	4603      	mov	r3, r0
 800b34c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b350:	e006      	b.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b358:	e002      	b.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b35a:	bf00      	nop
 800b35c:	e000      	b.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b35e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b360:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b364:	2b00      	cmp	r3, #0
 800b366:	d10b      	bne.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b368:	4b8e      	ldr	r3, [pc, #568]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b36a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b36c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800b370:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b374:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b378:	4a8a      	ldr	r2, [pc, #552]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b37a:	430b      	orrs	r3, r1
 800b37c:	6593      	str	r3, [r2, #88]	@ 0x58
 800b37e:	e003      	b.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b380:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b384:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b388:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b390:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b394:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b398:	2300      	movs	r3, #0
 800b39a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b39e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	d03a      	beq.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b3a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3ae:	2b30      	cmp	r3, #48	@ 0x30
 800b3b0:	d01f      	beq.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b3b2:	2b30      	cmp	r3, #48	@ 0x30
 800b3b4:	d819      	bhi.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b3b6:	2b20      	cmp	r3, #32
 800b3b8:	d00c      	beq.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b3ba:	2b20      	cmp	r3, #32
 800b3bc:	d815      	bhi.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d019      	beq.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b3c2:	2b10      	cmp	r3, #16
 800b3c4:	d111      	bne.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3c6:	4b77      	ldr	r3, [pc, #476]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ca:	4a76      	ldr	r2, [pc, #472]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b3d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b3d2:	e011      	b.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b3d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3d8:	3308      	adds	r3, #8
 800b3da:	2102      	movs	r1, #2
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f002 f97b 	bl	800d6d8 <RCCEx_PLL2_Config>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b3e8:	e006      	b.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b3f0:	e002      	b.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b3f2:	bf00      	nop
 800b3f4:	e000      	b.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b3f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d10a      	bne.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b400:	4b68      	ldr	r3, [pc, #416]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b404:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b408:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b40c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b40e:	4a65      	ldr	r2, [pc, #404]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b410:	430b      	orrs	r3, r1
 800b412:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b414:	e003      	b.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b416:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b41a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b41e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b426:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b42a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b42e:	2300      	movs	r3, #0
 800b430:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b434:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b438:	460b      	mov	r3, r1
 800b43a:	4313      	orrs	r3, r2
 800b43c:	d051      	beq.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b43e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b444:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b448:	d035      	beq.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b44a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b44e:	d82e      	bhi.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b450:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b454:	d031      	beq.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b456:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b45a:	d828      	bhi.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b45c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b460:	d01a      	beq.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b462:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b466:	d822      	bhi.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d003      	beq.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b46c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b470:	d007      	beq.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b472:	e01c      	b.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b474:	4b4b      	ldr	r3, [pc, #300]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b478:	4a4a      	ldr	r2, [pc, #296]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b47a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b47e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b480:	e01c      	b.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b482:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b486:	3308      	adds	r3, #8
 800b488:	2100      	movs	r1, #0
 800b48a:	4618      	mov	r0, r3
 800b48c:	f002 f924 	bl	800d6d8 <RCCEx_PLL2_Config>
 800b490:	4603      	mov	r3, r0
 800b492:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b496:	e011      	b.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b498:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b49c:	3328      	adds	r3, #40	@ 0x28
 800b49e:	2100      	movs	r1, #0
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f002 f9cb 	bl	800d83c <RCCEx_PLL3_Config>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b4ac:	e006      	b.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b4b4:	e002      	b.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b4b6:	bf00      	nop
 800b4b8:	e000      	b.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b4ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10a      	bne.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b4c4:	4b37      	ldr	r3, [pc, #220]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b4cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4d2:	4a34      	ldr	r2, [pc, #208]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4d4:	430b      	orrs	r3, r1
 800b4d6:	6513      	str	r3, [r2, #80]	@ 0x50
 800b4d8:	e003      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b4e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b4ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b4f8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4313      	orrs	r3, r2
 800b500:	d056      	beq.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b50c:	d033      	beq.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b50e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b512:	d82c      	bhi.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b514:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b518:	d02f      	beq.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b51a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b51e:	d826      	bhi.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b520:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b524:	d02b      	beq.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b526:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b52a:	d820      	bhi.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b52c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b530:	d012      	beq.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b532:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b536:	d81a      	bhi.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d022      	beq.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b53c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b540:	d115      	bne.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b546:	3308      	adds	r3, #8
 800b548:	2101      	movs	r1, #1
 800b54a:	4618      	mov	r0, r3
 800b54c:	f002 f8c4 	bl	800d6d8 <RCCEx_PLL2_Config>
 800b550:	4603      	mov	r3, r0
 800b552:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b556:	e015      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b55c:	3328      	adds	r3, #40	@ 0x28
 800b55e:	2101      	movs	r1, #1
 800b560:	4618      	mov	r0, r3
 800b562:	f002 f96b 	bl	800d83c <RCCEx_PLL3_Config>
 800b566:	4603      	mov	r3, r0
 800b568:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b56c:	e00a      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b56e:	2301      	movs	r3, #1
 800b570:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b574:	e006      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b576:	bf00      	nop
 800b578:	e004      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b57a:	bf00      	nop
 800b57c:	e002      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b57e:	bf00      	nop
 800b580:	e000      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b582:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b584:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10d      	bne.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b58c:	4b05      	ldr	r3, [pc, #20]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b58e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b590:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b59a:	4a02      	ldr	r2, [pc, #8]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b59c:	430b      	orrs	r3, r1
 800b59e:	6513      	str	r3, [r2, #80]	@ 0x50
 800b5a0:	e006      	b.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b5a2:	bf00      	nop
 800b5a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b5ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b5b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b5bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b5c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	d055      	beq.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b5d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b5d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b5dc:	d033      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b5de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b5e2:	d82c      	bhi.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b5e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5e8:	d02f      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5ee:	d826      	bhi.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b5f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b5f4:	d02b      	beq.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b5f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b5fa:	d820      	bhi.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b5fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b600:	d012      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b606:	d81a      	bhi.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d022      	beq.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b60c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b610:	d115      	bne.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b612:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b616:	3308      	adds	r3, #8
 800b618:	2101      	movs	r1, #1
 800b61a:	4618      	mov	r0, r3
 800b61c:	f002 f85c 	bl	800d6d8 <RCCEx_PLL2_Config>
 800b620:	4603      	mov	r3, r0
 800b622:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b626:	e015      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b62c:	3328      	adds	r3, #40	@ 0x28
 800b62e:	2101      	movs	r1, #1
 800b630:	4618      	mov	r0, r3
 800b632:	f002 f903 	bl	800d83c <RCCEx_PLL3_Config>
 800b636:	4603      	mov	r3, r0
 800b638:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b63c:	e00a      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b644:	e006      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b646:	bf00      	nop
 800b648:	e004      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b64a:	bf00      	nop
 800b64c:	e002      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b64e:	bf00      	nop
 800b650:	e000      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b652:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b654:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10b      	bne.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b65c:	4ba3      	ldr	r3, [pc, #652]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b65e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b660:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b664:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b668:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b66c:	4a9f      	ldr	r2, [pc, #636]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b66e:	430b      	orrs	r3, r1
 800b670:	6593      	str	r3, [r2, #88]	@ 0x58
 800b672:	e003      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b674:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b678:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b67c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b684:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b688:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b68c:	2300      	movs	r3, #0
 800b68e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b692:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b696:	460b      	mov	r3, r1
 800b698:	4313      	orrs	r3, r2
 800b69a:	d037      	beq.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b69c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6a6:	d00e      	beq.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b6a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6ac:	d816      	bhi.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d018      	beq.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b6b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6b6:	d111      	bne.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6b8:	4b8c      	ldr	r3, [pc, #560]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6bc:	4a8b      	ldr	r2, [pc, #556]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b6c4:	e00f      	b.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6ca:	3308      	adds	r3, #8
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f002 f802 	bl	800d6d8 <RCCEx_PLL2_Config>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b6da:	e004      	b.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b6e2:	e000      	b.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b6e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d10a      	bne.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b6ee:	4b7f      	ldr	r3, [pc, #508]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b6f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6fc:	4a7b      	ldr	r2, [pc, #492]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6fe:	430b      	orrs	r3, r1
 800b700:	6513      	str	r3, [r2, #80]	@ 0x50
 800b702:	e003      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b704:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b708:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b70c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b718:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b71c:	2300      	movs	r3, #0
 800b71e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b722:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b726:	460b      	mov	r3, r1
 800b728:	4313      	orrs	r3, r2
 800b72a:	d039      	beq.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b72c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b732:	2b03      	cmp	r3, #3
 800b734:	d81c      	bhi.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b736:	a201      	add	r2, pc, #4	@ (adr r2, 800b73c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b73c:	0800b779 	.word	0x0800b779
 800b740:	0800b74d 	.word	0x0800b74d
 800b744:	0800b75b 	.word	0x0800b75b
 800b748:	0800b779 	.word	0x0800b779
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b74c:	4b67      	ldr	r3, [pc, #412]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b750:	4a66      	ldr	r2, [pc, #408]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b758:	e00f      	b.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b75a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b75e:	3308      	adds	r3, #8
 800b760:	2102      	movs	r1, #2
 800b762:	4618      	mov	r0, r3
 800b764:	f001 ffb8 	bl	800d6d8 <RCCEx_PLL2_Config>
 800b768:	4603      	mov	r3, r0
 800b76a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b76e:	e004      	b.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b776:	e000      	b.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b77a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d10a      	bne.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b782:	4b5a      	ldr	r3, [pc, #360]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b786:	f023 0103 	bic.w	r1, r3, #3
 800b78a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b78e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b790:	4a56      	ldr	r2, [pc, #344]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b792:	430b      	orrs	r3, r1
 800b794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b796:	e003      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b798:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b79c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b7a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b7ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b7b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	f000 809f 	beq.w	800b900 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b7c2:	4b4b      	ldr	r3, [pc, #300]	@ (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a4a      	ldr	r2, [pc, #296]	@ (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b7c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b7ce:	f7f8 fc33 	bl	8004038 <HAL_GetTick>
 800b7d2:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7d6:	e00b      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7d8:	f7f8 fc2e 	bl	8004038 <HAL_GetTick>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b7e2:	1ad3      	subs	r3, r2, r3
 800b7e4:	2b64      	cmp	r3, #100	@ 0x64
 800b7e6:	d903      	bls.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b7ee:	e005      	b.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7f0:	4b3f      	ldr	r3, [pc, #252]	@ (800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d0ed      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b7fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b800:	2b00      	cmp	r3, #0
 800b802:	d179      	bne.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b804:	4b39      	ldr	r3, [pc, #228]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b806:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b808:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b80c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b810:	4053      	eors	r3, r2
 800b812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b816:	2b00      	cmp	r3, #0
 800b818:	d015      	beq.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b81a:	4b34      	ldr	r3, [pc, #208]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b81c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b81e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b822:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b826:	4b31      	ldr	r3, [pc, #196]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b82a:	4a30      	ldr	r2, [pc, #192]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b82c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b830:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b832:	4b2e      	ldr	r3, [pc, #184]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b836:	4a2d      	ldr	r2, [pc, #180]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b83c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b83e:	4a2b      	ldr	r2, [pc, #172]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b844:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b84a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b84e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b852:	d118      	bne.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b854:	f7f8 fbf0 	bl	8004038 <HAL_GetTick>
 800b858:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b85c:	e00d      	b.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b85e:	f7f8 fbeb 	bl	8004038 <HAL_GetTick>
 800b862:	4602      	mov	r2, r0
 800b864:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b868:	1ad2      	subs	r2, r2, r3
 800b86a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b86e:	429a      	cmp	r2, r3
 800b870:	d903      	bls.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b872:	2303      	movs	r3, #3
 800b874:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800b878:	e005      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b87a:	4b1c      	ldr	r3, [pc, #112]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b87c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b87e:	f003 0302 	and.w	r3, r3, #2
 800b882:	2b00      	cmp	r3, #0
 800b884:	d0eb      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b886:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d129      	bne.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b88e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b892:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b89a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b89e:	d10e      	bne.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b8a0:	4b12      	ldr	r3, [pc, #72]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b8a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b8b0:	091a      	lsrs	r2, r3, #4
 800b8b2:	4b10      	ldr	r3, [pc, #64]	@ (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b8b4:	4013      	ands	r3, r2
 800b8b6:	4a0d      	ldr	r2, [pc, #52]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8b8:	430b      	orrs	r3, r1
 800b8ba:	6113      	str	r3, [r2, #16]
 800b8bc:	e005      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b8be:	4b0b      	ldr	r3, [pc, #44]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	4a0a      	ldr	r2, [pc, #40]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b8c8:	6113      	str	r3, [r2, #16]
 800b8ca:	4b08      	ldr	r3, [pc, #32]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8cc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b8ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b8d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8da:	4a04      	ldr	r2, [pc, #16]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8dc:	430b      	orrs	r3, r1
 800b8de:	6713      	str	r3, [r2, #112]	@ 0x70
 800b8e0:	e00e      	b.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b8e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800b8ea:	e009      	b.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b8ec:	58024400 	.word	0x58024400
 800b8f0:	58024800 	.word	0x58024800
 800b8f4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b908:	f002 0301 	and.w	r3, r2, #1
 800b90c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b910:	2300      	movs	r3, #0
 800b912:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b916:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b91a:	460b      	mov	r3, r1
 800b91c:	4313      	orrs	r3, r2
 800b91e:	f000 8089 	beq.w	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b922:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b926:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b928:	2b28      	cmp	r3, #40	@ 0x28
 800b92a:	d86b      	bhi.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b92c:	a201      	add	r2, pc, #4	@ (adr r2, 800b934 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b932:	bf00      	nop
 800b934:	0800ba0d 	.word	0x0800ba0d
 800b938:	0800ba05 	.word	0x0800ba05
 800b93c:	0800ba05 	.word	0x0800ba05
 800b940:	0800ba05 	.word	0x0800ba05
 800b944:	0800ba05 	.word	0x0800ba05
 800b948:	0800ba05 	.word	0x0800ba05
 800b94c:	0800ba05 	.word	0x0800ba05
 800b950:	0800ba05 	.word	0x0800ba05
 800b954:	0800b9d9 	.word	0x0800b9d9
 800b958:	0800ba05 	.word	0x0800ba05
 800b95c:	0800ba05 	.word	0x0800ba05
 800b960:	0800ba05 	.word	0x0800ba05
 800b964:	0800ba05 	.word	0x0800ba05
 800b968:	0800ba05 	.word	0x0800ba05
 800b96c:	0800ba05 	.word	0x0800ba05
 800b970:	0800ba05 	.word	0x0800ba05
 800b974:	0800b9ef 	.word	0x0800b9ef
 800b978:	0800ba05 	.word	0x0800ba05
 800b97c:	0800ba05 	.word	0x0800ba05
 800b980:	0800ba05 	.word	0x0800ba05
 800b984:	0800ba05 	.word	0x0800ba05
 800b988:	0800ba05 	.word	0x0800ba05
 800b98c:	0800ba05 	.word	0x0800ba05
 800b990:	0800ba05 	.word	0x0800ba05
 800b994:	0800ba0d 	.word	0x0800ba0d
 800b998:	0800ba05 	.word	0x0800ba05
 800b99c:	0800ba05 	.word	0x0800ba05
 800b9a0:	0800ba05 	.word	0x0800ba05
 800b9a4:	0800ba05 	.word	0x0800ba05
 800b9a8:	0800ba05 	.word	0x0800ba05
 800b9ac:	0800ba05 	.word	0x0800ba05
 800b9b0:	0800ba05 	.word	0x0800ba05
 800b9b4:	0800ba0d 	.word	0x0800ba0d
 800b9b8:	0800ba05 	.word	0x0800ba05
 800b9bc:	0800ba05 	.word	0x0800ba05
 800b9c0:	0800ba05 	.word	0x0800ba05
 800b9c4:	0800ba05 	.word	0x0800ba05
 800b9c8:	0800ba05 	.word	0x0800ba05
 800b9cc:	0800ba05 	.word	0x0800ba05
 800b9d0:	0800ba05 	.word	0x0800ba05
 800b9d4:	0800ba0d 	.word	0x0800ba0d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9dc:	3308      	adds	r3, #8
 800b9de:	2101      	movs	r1, #1
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f001 fe79 	bl	800d6d8 <RCCEx_PLL2_Config>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b9ec:	e00f      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9f2:	3328      	adds	r3, #40	@ 0x28
 800b9f4:	2101      	movs	r1, #1
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f001 ff20 	bl	800d83c <RCCEx_PLL3_Config>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ba02:	e004      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ba0a:	e000      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800ba0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d10a      	bne.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ba16:	4bbf      	ldr	r3, [pc, #764]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba1a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ba1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba24:	4abb      	ldr	r2, [pc, #748]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba26:	430b      	orrs	r3, r1
 800ba28:	6553      	str	r3, [r2, #84]	@ 0x54
 800ba2a:	e003      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba30:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ba34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3c:	f002 0302 	and.w	r3, r2, #2
 800ba40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ba44:	2300      	movs	r3, #0
 800ba46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba4a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ba4e:	460b      	mov	r3, r1
 800ba50:	4313      	orrs	r3, r2
 800ba52:	d041      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ba54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ba5a:	2b05      	cmp	r3, #5
 800ba5c:	d824      	bhi.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800ba5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba64 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ba60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba64:	0800bab1 	.word	0x0800bab1
 800ba68:	0800ba7d 	.word	0x0800ba7d
 800ba6c:	0800ba93 	.word	0x0800ba93
 800ba70:	0800bab1 	.word	0x0800bab1
 800ba74:	0800bab1 	.word	0x0800bab1
 800ba78:	0800bab1 	.word	0x0800bab1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba80:	3308      	adds	r3, #8
 800ba82:	2101      	movs	r1, #1
 800ba84:	4618      	mov	r0, r3
 800ba86:	f001 fe27 	bl	800d6d8 <RCCEx_PLL2_Config>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ba90:	e00f      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba96:	3328      	adds	r3, #40	@ 0x28
 800ba98:	2101      	movs	r1, #1
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f001 fece 	bl	800d83c <RCCEx_PLL3_Config>
 800baa0:	4603      	mov	r3, r0
 800baa2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800baa6:	e004      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800baae:	e000      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bab2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d10a      	bne.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800baba:	4b96      	ldr	r3, [pc, #600]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800babc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800babe:	f023 0107 	bic.w	r1, r3, #7
 800bac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bac6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bac8:	4a92      	ldr	r2, [pc, #584]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800baca:	430b      	orrs	r3, r1
 800bacc:	6553      	str	r3, [r2, #84]	@ 0x54
 800bace:	e003      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bad0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bad4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	f002 0304 	and.w	r3, r2, #4
 800bae4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bae8:	2300      	movs	r3, #0
 800baea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800baee:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800baf2:	460b      	mov	r3, r1
 800baf4:	4313      	orrs	r3, r2
 800baf6:	d044      	beq.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800baf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bafc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bb00:	2b05      	cmp	r3, #5
 800bb02:	d825      	bhi.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bb04:	a201      	add	r2, pc, #4	@ (adr r2, 800bb0c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bb06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0a:	bf00      	nop
 800bb0c:	0800bb59 	.word	0x0800bb59
 800bb10:	0800bb25 	.word	0x0800bb25
 800bb14:	0800bb3b 	.word	0x0800bb3b
 800bb18:	0800bb59 	.word	0x0800bb59
 800bb1c:	0800bb59 	.word	0x0800bb59
 800bb20:	0800bb59 	.word	0x0800bb59
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb28:	3308      	adds	r3, #8
 800bb2a:	2101      	movs	r1, #1
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f001 fdd3 	bl	800d6d8 <RCCEx_PLL2_Config>
 800bb32:	4603      	mov	r3, r0
 800bb34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bb38:	e00f      	b.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb3e:	3328      	adds	r3, #40	@ 0x28
 800bb40:	2101      	movs	r1, #1
 800bb42:	4618      	mov	r0, r3
 800bb44:	f001 fe7a 	bl	800d83c <RCCEx_PLL3_Config>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bb4e:	e004      	b.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bb56:	e000      	b.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bb58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d10b      	bne.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bb62:	4b6c      	ldr	r3, [pc, #432]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb66:	f023 0107 	bic.w	r1, r3, #7
 800bb6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bb72:	4a68      	ldr	r2, [pc, #416]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb74:	430b      	orrs	r3, r1
 800bb76:	6593      	str	r3, [r2, #88]	@ 0x58
 800bb78:	e003      	b.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb7e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8a:	f002 0320 	and.w	r3, r2, #32
 800bb8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bb92:	2300      	movs	r3, #0
 800bb94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bb98:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	d055      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbae:	d033      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bbb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbb4:	d82c      	bhi.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bbb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbba:	d02f      	beq.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bbbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbc0:	d826      	bhi.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bbc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bbc6:	d02b      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bbc8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bbcc:	d820      	bhi.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bbce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbd2:	d012      	beq.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bbd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbd8:	d81a      	bhi.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d022      	beq.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bbde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbe2:	d115      	bne.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbe8:	3308      	adds	r3, #8
 800bbea:	2100      	movs	r1, #0
 800bbec:	4618      	mov	r0, r3
 800bbee:	f001 fd73 	bl	800d6d8 <RCCEx_PLL2_Config>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bbf8:	e015      	b.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbfe:	3328      	adds	r3, #40	@ 0x28
 800bc00:	2102      	movs	r1, #2
 800bc02:	4618      	mov	r0, r3
 800bc04:	f001 fe1a 	bl	800d83c <RCCEx_PLL3_Config>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bc0e:	e00a      	b.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc10:	2301      	movs	r3, #1
 800bc12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bc16:	e006      	b.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc18:	bf00      	nop
 800bc1a:	e004      	b.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc1c:	bf00      	nop
 800bc1e:	e002      	b.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc20:	bf00      	nop
 800bc22:	e000      	b.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d10b      	bne.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bc2e:	4b39      	ldr	r3, [pc, #228]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc32:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bc36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc3e:	4a35      	ldr	r2, [pc, #212]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc40:	430b      	orrs	r3, r1
 800bc42:	6553      	str	r3, [r2, #84]	@ 0x54
 800bc44:	e003      	b.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc4a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bc4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc56:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800bc5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bc64:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800bc68:	460b      	mov	r3, r1
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	d058      	beq.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bc6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bc76:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800bc7a:	d033      	beq.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bc7c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800bc80:	d82c      	bhi.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc86:	d02f      	beq.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bc88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc8c:	d826      	bhi.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bc92:	d02b      	beq.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bc94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bc98:	d820      	bhi.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc9e:	d012      	beq.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bca4:	d81a      	bhi.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d022      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bcaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bcae:	d115      	bne.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcb4:	3308      	adds	r3, #8
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f001 fd0d 	bl	800d6d8 <RCCEx_PLL2_Config>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bcc4:	e015      	b.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bcc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcca:	3328      	adds	r3, #40	@ 0x28
 800bccc:	2102      	movs	r1, #2
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f001 fdb4 	bl	800d83c <RCCEx_PLL3_Config>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bcda:	e00a      	b.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bce2:	e006      	b.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bce4:	bf00      	nop
 800bce6:	e004      	b.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bce8:	bf00      	nop
 800bcea:	e002      	b.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bcec:	bf00      	nop
 800bcee:	e000      	b.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bcf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d10e      	bne.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bcfa:	4b06      	ldr	r3, [pc, #24]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bcfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcfe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800bd02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bd0a:	4a02      	ldr	r2, [pc, #8]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd0c:	430b      	orrs	r3, r1
 800bd0e:	6593      	str	r3, [r2, #88]	@ 0x58
 800bd10:	e006      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bd12:	bf00      	nop
 800bd14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bd20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800bd2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bd30:	2300      	movs	r3, #0
 800bd32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bd36:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	d055      	beq.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bd40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bd48:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800bd4c:	d033      	beq.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bd4e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800bd52:	d82c      	bhi.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd58:	d02f      	beq.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bd5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd5e:	d826      	bhi.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd60:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800bd64:	d02b      	beq.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bd66:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800bd6a:	d820      	bhi.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd70:	d012      	beq.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bd72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd76:	d81a      	bhi.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d022      	beq.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bd7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd80:	d115      	bne.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd86:	3308      	adds	r3, #8
 800bd88:	2100      	movs	r1, #0
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f001 fca4 	bl	800d6d8 <RCCEx_PLL2_Config>
 800bd90:	4603      	mov	r3, r0
 800bd92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bd96:	e015      	b.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd9c:	3328      	adds	r3, #40	@ 0x28
 800bd9e:	2102      	movs	r1, #2
 800bda0:	4618      	mov	r0, r3
 800bda2:	f001 fd4b 	bl	800d83c <RCCEx_PLL3_Config>
 800bda6:	4603      	mov	r3, r0
 800bda8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bdac:	e00a      	b.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bdb4:	e006      	b.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bdb6:	bf00      	nop
 800bdb8:	e004      	b.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bdba:	bf00      	nop
 800bdbc:	e002      	b.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bdbe:	bf00      	nop
 800bdc0:	e000      	b.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bdc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d10b      	bne.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bdcc:	4bbb      	ldr	r3, [pc, #748]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800bdce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdd0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800bdd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bddc:	4ab7      	ldr	r2, [pc, #732]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800bdde:	430b      	orrs	r3, r1
 800bde0:	6593      	str	r3, [r2, #88]	@ 0x58
 800bde2:	e003      	b.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bde4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bde8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bdec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf4:	f002 0308 	and.w	r3, r2, #8
 800bdf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800be02:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800be06:	460b      	mov	r3, r1
 800be08:	4313      	orrs	r3, r2
 800be0a:	d01e      	beq.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800be0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be18:	d10c      	bne.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be1e:	3328      	adds	r3, #40	@ 0x28
 800be20:	2102      	movs	r1, #2
 800be22:	4618      	mov	r0, r3
 800be24:	f001 fd0a 	bl	800d83c <RCCEx_PLL3_Config>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d002      	beq.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800be34:	4ba1      	ldr	r3, [pc, #644]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800be36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be38:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800be3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be44:	4a9d      	ldr	r2, [pc, #628]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800be46:	430b      	orrs	r3, r1
 800be48:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	f002 0310 	and.w	r3, r2, #16
 800be56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800be5a:	2300      	movs	r3, #0
 800be5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800be60:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800be64:	460b      	mov	r3, r1
 800be66:	4313      	orrs	r3, r2
 800be68:	d01e      	beq.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800be6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800be72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be76:	d10c      	bne.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be7c:	3328      	adds	r3, #40	@ 0x28
 800be7e:	2102      	movs	r1, #2
 800be80:	4618      	mov	r0, r3
 800be82:	f001 fcdb 	bl	800d83c <RCCEx_PLL3_Config>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d002      	beq.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800be8c:	2301      	movs	r3, #1
 800be8e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be92:	4b8a      	ldr	r3, [pc, #552]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800be94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800be9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bea2:	4a86      	ldr	r2, [pc, #536]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800bea4:	430b      	orrs	r3, r1
 800bea6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800beac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800beb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800beb6:	2300      	movs	r3, #0
 800beb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800beba:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800bebe:	460b      	mov	r3, r1
 800bec0:	4313      	orrs	r3, r2
 800bec2:	d03e      	beq.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bec8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800becc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bed0:	d022      	beq.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800bed2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bed6:	d81b      	bhi.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d003      	beq.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800bedc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bee0:	d00b      	beq.n	800befa <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800bee2:	e015      	b.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bee8:	3308      	adds	r3, #8
 800beea:	2100      	movs	r1, #0
 800beec:	4618      	mov	r0, r3
 800beee:	f001 fbf3 	bl	800d6d8 <RCCEx_PLL2_Config>
 800bef2:	4603      	mov	r3, r0
 800bef4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bef8:	e00f      	b.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800befa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800befe:	3328      	adds	r3, #40	@ 0x28
 800bf00:	2102      	movs	r1, #2
 800bf02:	4618      	mov	r0, r3
 800bf04:	f001 fc9a 	bl	800d83c <RCCEx_PLL3_Config>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bf0e:	e004      	b.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bf16:	e000      	b.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800bf18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d10b      	bne.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bf22:	4b66      	ldr	r3, [pc, #408]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800bf24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf26:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800bf2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bf32:	4a62      	ldr	r2, [pc, #392]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800bf34:	430b      	orrs	r3, r1
 800bf36:	6593      	str	r3, [r2, #88]	@ 0x58
 800bf38:	e003      	b.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bf42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800bf4e:	673b      	str	r3, [r7, #112]	@ 0x70
 800bf50:	2300      	movs	r3, #0
 800bf52:	677b      	str	r3, [r7, #116]	@ 0x74
 800bf54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	d03b      	beq.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bf5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bf6a:	d01f      	beq.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0xfd0>
 800bf6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bf70:	d818      	bhi.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
 800bf72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf76:	d003      	beq.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
 800bf78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf7c:	d007      	beq.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0xfb2>
 800bf7e:	e011      	b.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf80:	4b4e      	ldr	r3, [pc, #312]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800bf82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf84:	4a4d      	ldr	r2, [pc, #308]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800bf86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bf8c:	e00f      	b.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0xfd2>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf92:	3328      	adds	r3, #40	@ 0x28
 800bf94:	2101      	movs	r1, #1
 800bf96:	4618      	mov	r0, r3
 800bf98:	f001 fc50 	bl	800d83c <RCCEx_PLL3_Config>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800bfa2:	e004      	b.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bfaa:	e000      	b.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        break;
 800bfac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10b      	bne.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0xff2>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bfb6:	4b41      	ldr	r3, [pc, #260]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800bfb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bfbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfc6:	4a3d      	ldr	r2, [pc, #244]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800bfc8:	430b      	orrs	r3, r1
 800bfca:	6553      	str	r3, [r2, #84]	@ 0x54
 800bfcc:	e003      	b.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0xffa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bfd2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bfd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfde:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800bfe2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bfe8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800bfec:	460b      	mov	r3, r1
 800bfee:	4313      	orrs	r3, r2
 800bff0:	d031      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x107a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d003      	beq.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x1028>
 800bffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c000:	d007      	beq.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 800c002:	e011      	b.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x104c>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c004:	4b2d      	ldr	r3, [pc, #180]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c008:	4a2c      	ldr	r2, [pc, #176]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c00a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c00e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c010:	e00e      	b.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c012:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c016:	3308      	adds	r3, #8
 800c018:	2102      	movs	r1, #2
 800c01a:	4618      	mov	r0, r3
 800c01c:	f001 fb5c 	bl	800d6d8 <RCCEx_PLL2_Config>
 800c020:	4603      	mov	r3, r0
 800c022:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c026:	e003      	b.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      default:
        ret = HAL_ERROR;
 800c028:	2301      	movs	r3, #1
 800c02a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c02e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c030:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10a      	bne.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x1072>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c038:	4b20      	ldr	r3, [pc, #128]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c03a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c03c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c040:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c046:	4a1d      	ldr	r2, [pc, #116]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c048:	430b      	orrs	r3, r1
 800c04a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c04c:	e003      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x107a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c04e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c052:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c062:	663b      	str	r3, [r7, #96]	@ 0x60
 800c064:	2300      	movs	r3, #0
 800c066:	667b      	str	r3, [r7, #100]	@ 0x64
 800c068:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c06c:	460b      	mov	r3, r1
 800c06e:	4313      	orrs	r3, r2
 800c070:	d03b      	beq.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c07a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c07e:	d018      	beq.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x10d6>
 800c080:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c084:	d811      	bhi.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 800c086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c08a:	d014      	beq.n	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0x10da>
 800c08c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c090:	d80b      	bhi.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 800c092:	2b00      	cmp	r3, #0
 800c094:	d014      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x10e4>
 800c096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c09a:	d106      	bne.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x10ce>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c09c:	4b07      	ldr	r3, [pc, #28]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0a0:	4a06      	ldr	r2, [pc, #24]	@ (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c0a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c0a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c0a8:	e00b      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c0b0:	e007      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 800c0b2:	bf00      	nop
 800c0b4:	e005      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 800c0b6:	bf00      	nop
 800c0b8:	e003      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
 800c0ba:	bf00      	nop
 800c0bc:	58024400 	.word	0x58024400
        break;
 800c0c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10b      	bne.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x1106>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c0ca:	4bba      	ldr	r3, [pc, #744]	@ (800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800c0cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c0d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0da:	4ab6      	ldr	r2, [pc, #728]	@ (800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800c0dc:	430b      	orrs	r3, r1
 800c0de:	6553      	str	r3, [r2, #84]	@ 0x54
 800c0e0:	e003      	b.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c0e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c0ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c0f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c0fc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c100:	460b      	mov	r3, r1
 800c102:	4313      	orrs	r3, r2
 800c104:	d009      	beq.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c106:	4bab      	ldr	r3, [pc, #684]	@ (800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800c108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c10a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c10e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c114:	4aa7      	ldr	r2, [pc, #668]	@ (800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800c116:	430b      	orrs	r3, r1
 800c118:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c11a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c122:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800c126:	653b      	str	r3, [r7, #80]	@ 0x50
 800c128:	2300      	movs	r3, #0
 800c12a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c12c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c130:	460b      	mov	r3, r1
 800c132:	4313      	orrs	r3, r2
 800c134:	d00a      	beq.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x1170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c136:	4b9f      	ldr	r3, [pc, #636]	@ (800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800c13e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c142:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c146:	4a9b      	ldr	r2, [pc, #620]	@ (800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800c148:	430b      	orrs	r3, r1
 800c14a:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c14c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c154:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c15a:	2300      	movs	r3, #0
 800c15c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c15e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c162:	460b      	mov	r3, r1
 800c164:	4313      	orrs	r3, r2
 800c166:	d009      	beq.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c168:	4b92      	ldr	r3, [pc, #584]	@ (800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800c16a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c16c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c170:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c176:	4a8f      	ldr	r2, [pc, #572]	@ (800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800c178:	430b      	orrs	r3, r1
 800c17a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c17c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c184:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c188:	643b      	str	r3, [r7, #64]	@ 0x40
 800c18a:	2300      	movs	r3, #0
 800c18c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c18e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c192:	460b      	mov	r3, r1
 800c194:	4313      	orrs	r3, r2
 800c196:	d00e      	beq.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c198:	4b86      	ldr	r3, [pc, #536]	@ (800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800c19a:	691b      	ldr	r3, [r3, #16]
 800c19c:	4a85      	ldr	r2, [pc, #532]	@ (800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800c19e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c1a2:	6113      	str	r3, [r2, #16]
 800c1a4:	4b83      	ldr	r3, [pc, #524]	@ (800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800c1a6:	6919      	ldr	r1, [r3, #16]
 800c1a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c1b0:	4a80      	ldr	r2, [pc, #512]	@ (800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800c1b2:	430b      	orrs	r3, r1
 800c1b4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c1b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1be:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c1c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1c8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	d009      	beq.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0x120a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c1d2:	4b78      	ldr	r3, [pc, #480]	@ (800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800c1d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c1da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1e0:	4a74      	ldr	r2, [pc, #464]	@ (800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800c1e2:	430b      	orrs	r3, r1
 800c1e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c1e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ee:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c1f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1f8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	4313      	orrs	r3, r2
 800c200:	d00a      	beq.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0x123c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c202:	4b6c      	ldr	r3, [pc, #432]	@ (800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800c204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c206:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c20a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c20e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c212:	4a68      	ldr	r2, [pc, #416]	@ (800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800c214:	430b      	orrs	r3, r1
 800c216:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c220:	2100      	movs	r1, #0
 800c222:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c224:	f003 0301 	and.w	r3, r3, #1
 800c228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c22a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c22e:	460b      	mov	r3, r1
 800c230:	4313      	orrs	r3, r2
 800c232:	d011      	beq.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x127c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c238:	3308      	adds	r3, #8
 800c23a:	2100      	movs	r1, #0
 800c23c:	4618      	mov	r0, r3
 800c23e:	f001 fa4b 	bl	800d6d8 <RCCEx_PLL2_Config>
 800c242:	4603      	mov	r3, r0
 800c244:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c248:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d003      	beq.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x127c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c250:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c254:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c260:	2100      	movs	r1, #0
 800c262:	6239      	str	r1, [r7, #32]
 800c264:	f003 0302 	and.w	r3, r3, #2
 800c268:	627b      	str	r3, [r7, #36]	@ 0x24
 800c26a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c26e:	460b      	mov	r3, r1
 800c270:	4313      	orrs	r3, r2
 800c272:	d011      	beq.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c278:	3308      	adds	r3, #8
 800c27a:	2101      	movs	r1, #1
 800c27c:	4618      	mov	r0, r3
 800c27e:	f001 fa2b 	bl	800d6d8 <RCCEx_PLL2_Config>
 800c282:	4603      	mov	r3, r0
 800c284:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c288:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d003      	beq.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c290:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c294:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c298:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	61b9      	str	r1, [r7, #24]
 800c2a4:	f003 0304 	and.w	r3, r3, #4
 800c2a8:	61fb      	str	r3, [r7, #28]
 800c2aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	d011      	beq.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c2b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2b8:	3308      	adds	r3, #8
 800c2ba:	2102      	movs	r1, #2
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f001 fa0b 	bl	800d6d8 <RCCEx_PLL2_Config>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c2c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d003      	beq.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c2d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c2d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	6139      	str	r1, [r7, #16]
 800c2e4:	f003 0308 	and.w	r3, r3, #8
 800c2e8:	617b      	str	r3, [r7, #20]
 800c2ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	d011      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x133c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c2f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2f8:	3328      	adds	r3, #40	@ 0x28
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f001 fa9d 	bl	800d83c <RCCEx_PLL3_Config>
 800c302:	4603      	mov	r3, r0
 800c304:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800c308:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d003      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x133c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c310:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c314:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c318:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c320:	2100      	movs	r1, #0
 800c322:	60b9      	str	r1, [r7, #8]
 800c324:	f003 0310 	and.w	r3, r3, #16
 800c328:	60fb      	str	r3, [r7, #12]
 800c32a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c32e:	460b      	mov	r3, r1
 800c330:	4313      	orrs	r3, r2
 800c332:	d011      	beq.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x137c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c334:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c338:	3328      	adds	r3, #40	@ 0x28
 800c33a:	2101      	movs	r1, #1
 800c33c:	4618      	mov	r0, r3
 800c33e:	f001 fa7d 	bl	800d83c <RCCEx_PLL3_Config>
 800c342:	4603      	mov	r3, r0
 800c344:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c348:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d003      	beq.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x137c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c350:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c354:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c360:	2100      	movs	r1, #0
 800c362:	6039      	str	r1, [r7, #0]
 800c364:	f003 0320 	and.w	r3, r3, #32
 800c368:	607b      	str	r3, [r7, #4]
 800c36a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c36e:	460b      	mov	r3, r1
 800c370:	4313      	orrs	r3, r2
 800c372:	d011      	beq.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c378:	3328      	adds	r3, #40	@ 0x28
 800c37a:	2102      	movs	r1, #2
 800c37c:	4618      	mov	r0, r3
 800c37e:	f001 fa5d 	bl	800d83c <RCCEx_PLL3_Config>
 800c382:	4603      	mov	r3, r0
 800c384:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c388:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d003      	beq.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c390:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c394:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800c398:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x13c8>
  {
    return HAL_OK;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	e000      	b.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0x13ca>
  }
  return HAL_ERROR;
 800c3a4:	2301      	movs	r3, #1
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c3b2:	bf00      	nop
 800c3b4:	58024400 	.word	0x58024400

0800c3b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b090      	sub	sp, #64	@ 0x40
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c3c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3c6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800c3ca:	430b      	orrs	r3, r1
 800c3cc:	f040 8094 	bne.w	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c3d0:	4b9e      	ldr	r3, [pc, #632]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3d4:	f003 0307 	and.w	r3, r3, #7
 800c3d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3dc:	2b04      	cmp	r3, #4
 800c3de:	f200 8087 	bhi.w	800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c3e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e8:	0800c3fd 	.word	0x0800c3fd
 800c3ec:	0800c425 	.word	0x0800c425
 800c3f0:	0800c44d 	.word	0x0800c44d
 800c3f4:	0800c4e9 	.word	0x0800c4e9
 800c3f8:	0800c475 	.word	0x0800c475
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3fc:	4b93      	ldr	r3, [pc, #588]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c404:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c408:	d108      	bne.n	800c41c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c40a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c40e:	4618      	mov	r0, r3
 800c410:	f001 f810 	bl	800d434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c418:	f000 bd45 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c41c:	2300      	movs	r3, #0
 800c41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c420:	f000 bd41 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c424:	4b89      	ldr	r3, [pc, #548]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c42c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c430:	d108      	bne.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c432:	f107 0318 	add.w	r3, r7, #24
 800c436:	4618      	mov	r0, r3
 800c438:	f000 fd54 	bl	800cee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c43c:	69bb      	ldr	r3, [r7, #24]
 800c43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c440:	f000 bd31 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c448:	f000 bd2d 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c44c:	4b7f      	ldr	r3, [pc, #508]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c454:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c458:	d108      	bne.n	800c46c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c45a:	f107 030c 	add.w	r3, r7, #12
 800c45e:	4618      	mov	r0, r3
 800c460:	f000 fe94 	bl	800d18c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c468:	f000 bd1d 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c46c:	2300      	movs	r3, #0
 800c46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c470:	f000 bd19 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c474:	4b75      	ldr	r3, [pc, #468]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c478:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c47c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c47e:	4b73      	ldr	r3, [pc, #460]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f003 0304 	and.w	r3, r3, #4
 800c486:	2b04      	cmp	r3, #4
 800c488:	d10c      	bne.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c48a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d109      	bne.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c490:	4b6e      	ldr	r3, [pc, #440]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	08db      	lsrs	r3, r3, #3
 800c496:	f003 0303 	and.w	r3, r3, #3
 800c49a:	4a6d      	ldr	r2, [pc, #436]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c49c:	fa22 f303 	lsr.w	r3, r2, r3
 800c4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4a2:	e01f      	b.n	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4a4:	4b69      	ldr	r3, [pc, #420]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c4b0:	d106      	bne.n	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c4b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c4b8:	d102      	bne.n	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4ba:	4b66      	ldr	r3, [pc, #408]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c4bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4be:	e011      	b.n	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4c0:	4b62      	ldr	r3, [pc, #392]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c4c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c4cc:	d106      	bne.n	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c4ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c4d4:	d102      	bne.n	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4d6:	4b60      	ldr	r3, [pc, #384]	@ (800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c4d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4da:	e003      	b.n	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c4e0:	f000 bce1 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4e4:	f000 bcdf 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4e8:	4b5c      	ldr	r3, [pc, #368]	@ (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4ec:	f000 bcdb 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4f4:	f000 bcd7 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c4f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4fc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800c500:	430b      	orrs	r3, r1
 800c502:	f040 80ad 	bne.w	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c506:	4b51      	ldr	r3, [pc, #324]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c50a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800c50e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c516:	d056      	beq.n	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c51a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c51e:	f200 8090 	bhi.w	800c642 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c524:	2bc0      	cmp	r3, #192	@ 0xc0
 800c526:	f000 8088 	beq.w	800c63a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c52c:	2bc0      	cmp	r3, #192	@ 0xc0
 800c52e:	f200 8088 	bhi.w	800c642 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c534:	2b80      	cmp	r3, #128	@ 0x80
 800c536:	d032      	beq.n	800c59e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c53a:	2b80      	cmp	r3, #128	@ 0x80
 800c53c:	f200 8081 	bhi.w	800c642 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c542:	2b00      	cmp	r3, #0
 800c544:	d003      	beq.n	800c54e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c548:	2b40      	cmp	r3, #64	@ 0x40
 800c54a:	d014      	beq.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c54c:	e079      	b.n	800c642 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c54e:	4b3f      	ldr	r3, [pc, #252]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c556:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c55a:	d108      	bne.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c55c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c560:	4618      	mov	r0, r3
 800c562:	f000 ff67 	bl	800d434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c56a:	f000 bc9c 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c56e:	2300      	movs	r3, #0
 800c570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c572:	f000 bc98 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c576:	4b35      	ldr	r3, [pc, #212]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c57e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c582:	d108      	bne.n	800c596 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c584:	f107 0318 	add.w	r3, r7, #24
 800c588:	4618      	mov	r0, r3
 800c58a:	f000 fcab 	bl	800cee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c592:	f000 bc88 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c596:	2300      	movs	r3, #0
 800c598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c59a:	f000 bc84 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c59e:	4b2b      	ldr	r3, [pc, #172]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c5a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c5aa:	d108      	bne.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5ac:	f107 030c 	add.w	r3, r7, #12
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f000 fdeb 	bl	800d18c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ba:	f000 bc74 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5c2:	f000 bc70 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5c6:	4b21      	ldr	r3, [pc, #132]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c5ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5d0:	4b1e      	ldr	r3, [pc, #120]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 0304 	and.w	r3, r3, #4
 800c5d8:	2b04      	cmp	r3, #4
 800c5da:	d10c      	bne.n	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c5dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d109      	bne.n	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5e2:	4b1a      	ldr	r3, [pc, #104]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	08db      	lsrs	r3, r3, #3
 800c5e8:	f003 0303 	and.w	r3, r3, #3
 800c5ec:	4a18      	ldr	r2, [pc, #96]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c5ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5f4:	e01f      	b.n	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5f6:	4b15      	ldr	r3, [pc, #84]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c602:	d106      	bne.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c60a:	d102      	bne.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c60c:	4b11      	ldr	r3, [pc, #68]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c610:	e011      	b.n	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c612:	4b0e      	ldr	r3, [pc, #56]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c61a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c61e:	d106      	bne.n	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c626:	d102      	bne.n	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c628:	4b0b      	ldr	r3, [pc, #44]	@ (800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c62c:	e003      	b.n	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c632:	f000 bc38 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c636:	f000 bc36 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c63a:	4b08      	ldr	r3, [pc, #32]	@ (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c63e:	f000 bc32 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c642:	2300      	movs	r3, #0
 800c644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c646:	f000 bc2e 	b.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c64a:	bf00      	nop
 800c64c:	58024400 	.word	0x58024400
 800c650:	03d09000 	.word	0x03d09000
 800c654:	003d0900 	.word	0x003d0900
 800c658:	017d7840 	.word	0x017d7840
 800c65c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c660:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c664:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800c668:	430b      	orrs	r3, r1
 800c66a:	f040 809c 	bne.w	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c66e:	4b9e      	ldr	r3, [pc, #632]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c672:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800c676:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c67a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c67e:	d054      	beq.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c682:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c686:	f200 808b 	bhi.w	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c690:	f000 8083 	beq.w	800c79a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c696:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c69a:	f200 8081 	bhi.w	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c6a4:	d02f      	beq.n	800c706 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c6ac:	d878      	bhi.n	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d004      	beq.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c6ba:	d012      	beq.n	800c6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c6bc:	e070      	b.n	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c6be:	4b8a      	ldr	r3, [pc, #552]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c6c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c6ca:	d107      	bne.n	800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 feaf 	bl	800d434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6da:	e3e4      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6e0:	e3e1      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6e2:	4b81      	ldr	r3, [pc, #516]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c6ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c6ee:	d107      	bne.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6f0:	f107 0318 	add.w	r3, r7, #24
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f000 fbf5 	bl	800cee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6fe:	e3d2      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c704:	e3cf      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c706:	4b78      	ldr	r3, [pc, #480]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c70e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c712:	d107      	bne.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c714:	f107 030c 	add.w	r3, r7, #12
 800c718:	4618      	mov	r0, r3
 800c71a:	f000 fd37 	bl	800d18c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c722:	e3c0      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c724:	2300      	movs	r3, #0
 800c726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c728:	e3bd      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c72a:	4b6f      	ldr	r3, [pc, #444]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c72c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c72e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c732:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c734:	4b6c      	ldr	r3, [pc, #432]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f003 0304 	and.w	r3, r3, #4
 800c73c:	2b04      	cmp	r3, #4
 800c73e:	d10c      	bne.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c742:	2b00      	cmp	r3, #0
 800c744:	d109      	bne.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c746:	4b68      	ldr	r3, [pc, #416]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	08db      	lsrs	r3, r3, #3
 800c74c:	f003 0303 	and.w	r3, r3, #3
 800c750:	4a66      	ldr	r2, [pc, #408]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c752:	fa22 f303 	lsr.w	r3, r2, r3
 800c756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c758:	e01e      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c75a:	4b63      	ldr	r3, [pc, #396]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c766:	d106      	bne.n	800c776 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c76a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c76e:	d102      	bne.n	800c776 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c770:	4b5f      	ldr	r3, [pc, #380]	@ (800c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c774:	e010      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c776:	4b5c      	ldr	r3, [pc, #368]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c77e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c782:	d106      	bne.n	800c792 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c78a:	d102      	bne.n	800c792 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c78c:	4b59      	ldr	r3, [pc, #356]	@ (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c78e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c790:	e002      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c792:	2300      	movs	r3, #0
 800c794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c796:	e386      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c798:	e385      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c79a:	4b57      	ldr	r3, [pc, #348]	@ (800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c79e:	e382      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7a4:	e37f      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c7a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7aa:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800c7ae:	430b      	orrs	r3, r1
 800c7b0:	f040 80a7 	bne.w	800c902 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c7b4:	4b4c      	ldr	r3, [pc, #304]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7b8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800c7bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c7c4:	d055      	beq.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c7cc:	f200 8096 	bhi.w	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c7d6:	f000 8084 	beq.w	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c7e0:	f200 808c 	bhi.w	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c7ea:	d030      	beq.n	800c84e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c7f2:	f200 8083 	bhi.w	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d004      	beq.n	800c806 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c802:	d012      	beq.n	800c82a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c804:	e07a      	b.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c806:	4b38      	ldr	r3, [pc, #224]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c80e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c812:	d107      	bne.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c818:	4618      	mov	r0, r3
 800c81a:	f000 fe0b 	bl	800d434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c822:	e340      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c824:	2300      	movs	r3, #0
 800c826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c828:	e33d      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c82a:	4b2f      	ldr	r3, [pc, #188]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c832:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c836:	d107      	bne.n	800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c838:	f107 0318 	add.w	r3, r7, #24
 800c83c:	4618      	mov	r0, r3
 800c83e:	f000 fb51 	bl	800cee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c846:	e32e      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c848:	2300      	movs	r3, #0
 800c84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c84c:	e32b      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c84e:	4b26      	ldr	r3, [pc, #152]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c85a:	d107      	bne.n	800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c85c:	f107 030c 	add.w	r3, r7, #12
 800c860:	4618      	mov	r0, r3
 800c862:	f000 fc93 	bl	800d18c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c86a:	e31c      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c870:	e319      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c872:	4b1d      	ldr	r3, [pc, #116]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c876:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c87a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c87c:	4b1a      	ldr	r3, [pc, #104]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f003 0304 	and.w	r3, r3, #4
 800c884:	2b04      	cmp	r3, #4
 800c886:	d10c      	bne.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d109      	bne.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c88e:	4b16      	ldr	r3, [pc, #88]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	08db      	lsrs	r3, r3, #3
 800c894:	f003 0303 	and.w	r3, r3, #3
 800c898:	4a14      	ldr	r2, [pc, #80]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c89a:	fa22 f303 	lsr.w	r3, r2, r3
 800c89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8a0:	e01e      	b.n	800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8a2:	4b11      	ldr	r3, [pc, #68]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8ae:	d106      	bne.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c8b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8b6:	d102      	bne.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c8b8:	4b0d      	ldr	r3, [pc, #52]	@ (800c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8bc:	e010      	b.n	800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8be:	4b0a      	ldr	r3, [pc, #40]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8ca:	d106      	bne.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c8cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c8d2:	d102      	bne.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c8d4:	4b07      	ldr	r3, [pc, #28]	@ (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8d8:	e002      	b.n	800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c8de:	e2e2      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8e0:	e2e1      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8e2:	4b05      	ldr	r3, [pc, #20]	@ (800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8e6:	e2de      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8e8:	58024400 	.word	0x58024400
 800c8ec:	03d09000 	.word	0x03d09000
 800c8f0:	003d0900 	.word	0x003d0900
 800c8f4:	017d7840 	.word	0x017d7840
 800c8f8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c900:	e2d1      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c902:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c906:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c90a:	430b      	orrs	r3, r1
 800c90c:	f040 809c 	bne.w	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c910:	4b93      	ldr	r3, [pc, #588]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c914:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c918:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c91c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c920:	d054      	beq.n	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c924:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c928:	f200 808b 	bhi.w	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c92e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c932:	f000 8083 	beq.w	800ca3c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c938:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c93c:	f200 8081 	bhi.w	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c946:	d02f      	beq.n	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c94a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c94e:	d878      	bhi.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c952:	2b00      	cmp	r3, #0
 800c954:	d004      	beq.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c95c:	d012      	beq.n	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c95e:	e070      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c960:	4b7f      	ldr	r3, [pc, #508]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c968:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c96c:	d107      	bne.n	800c97e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c96e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c972:	4618      	mov	r0, r3
 800c974:	f000 fd5e 	bl	800d434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c97c:	e293      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c982:	e290      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c984:	4b76      	ldr	r3, [pc, #472]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c98c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c990:	d107      	bne.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c992:	f107 0318 	add.w	r3, r7, #24
 800c996:	4618      	mov	r0, r3
 800c998:	f000 faa4 	bl	800cee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9a0:	e281      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9a6:	e27e      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9a8:	4b6d      	ldr	r3, [pc, #436]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c9b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c9b4:	d107      	bne.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9b6:	f107 030c 	add.w	r3, r7, #12
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f000 fbe6 	bl	800d18c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9c4:	e26f      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9ca:	e26c      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9cc:	4b64      	ldr	r3, [pc, #400]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c9d4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c9d6:	4b62      	ldr	r3, [pc, #392]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f003 0304 	and.w	r3, r3, #4
 800c9de:	2b04      	cmp	r3, #4
 800c9e0:	d10c      	bne.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d109      	bne.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9e8:	4b5d      	ldr	r3, [pc, #372]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	08db      	lsrs	r3, r3, #3
 800c9ee:	f003 0303 	and.w	r3, r3, #3
 800c9f2:	4a5c      	ldr	r2, [pc, #368]	@ (800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c9f4:	fa22 f303 	lsr.w	r3, r2, r3
 800c9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9fa:	e01e      	b.n	800ca3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9fc:	4b58      	ldr	r3, [pc, #352]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca08:	d106      	bne.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ca0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca10:	d102      	bne.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca12:	4b55      	ldr	r3, [pc, #340]	@ (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ca14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca16:	e010      	b.n	800ca3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca18:	4b51      	ldr	r3, [pc, #324]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca24:	d106      	bne.n	800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ca26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca2c:	d102      	bne.n	800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca2e:	4b4f      	ldr	r3, [pc, #316]	@ (800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ca30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca32:	e002      	b.n	800ca3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ca38:	e235      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca3a:	e234      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca3c:	4b4c      	ldr	r3, [pc, #304]	@ (800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ca3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca40:	e231      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ca42:	2300      	movs	r3, #0
 800ca44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca46:	e22e      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ca48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca4c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ca50:	430b      	orrs	r3, r1
 800ca52:	f040 808f 	bne.w	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ca56:	4b42      	ldr	r3, [pc, #264]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca5a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ca5e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ca60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ca66:	d06b      	beq.n	800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ca68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ca6e:	d874      	bhi.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ca76:	d056      	beq.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ca78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ca7e:	d86c      	bhi.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ca86:	d03b      	beq.n	800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ca88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ca8e:	d864      	bhi.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca96:	d021      	beq.n	800cadc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ca98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca9e:	d85c      	bhi.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800caa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d004      	beq.n	800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800caa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800caac:	d004      	beq.n	800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800caae:	e054      	b.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cab0:	f7fe fa26 	bl	800af00 <HAL_RCC_GetPCLK1Freq>
 800cab4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cab6:	e1f6      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cab8:	4b29      	ldr	r3, [pc, #164]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cac0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cac4:	d107      	bne.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cac6:	f107 0318 	add.w	r3, r7, #24
 800caca:	4618      	mov	r0, r3
 800cacc:	f000 fa0a 	bl	800cee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cad4:	e1e7      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cada:	e1e4      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cadc:	4b20      	ldr	r3, [pc, #128]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cae8:	d107      	bne.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800caea:	f107 030c 	add.w	r3, r7, #12
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 fb4c 	bl	800d18c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caf8:	e1d5      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cafa:	2300      	movs	r3, #0
 800cafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cafe:	e1d2      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb00:	4b17      	ldr	r3, [pc, #92]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f003 0304 	and.w	r3, r3, #4
 800cb08:	2b04      	cmp	r3, #4
 800cb0a:	d109      	bne.n	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb0c:	4b14      	ldr	r3, [pc, #80]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	08db      	lsrs	r3, r3, #3
 800cb12:	f003 0303 	and.w	r3, r3, #3
 800cb16:	4a13      	ldr	r2, [pc, #76]	@ (800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cb18:	fa22 f303 	lsr.w	r3, r2, r3
 800cb1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb1e:	e1c2      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb20:	2300      	movs	r3, #0
 800cb22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb24:	e1bf      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cb26:	4b0e      	ldr	r3, [pc, #56]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb32:	d102      	bne.n	800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cb34:	4b0c      	ldr	r3, [pc, #48]	@ (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cb36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb38:	e1b5      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb3e:	e1b2      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cb40:	4b07      	ldr	r3, [pc, #28]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb4c:	d102      	bne.n	800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cb4e:	4b07      	ldr	r3, [pc, #28]	@ (800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cb50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb52:	e1a8      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb54:	2300      	movs	r3, #0
 800cb56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb58:	e1a5      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb5e:	e1a2      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb60:	58024400 	.word	0x58024400
 800cb64:	03d09000 	.word	0x03d09000
 800cb68:	003d0900 	.word	0x003d0900
 800cb6c:	017d7840 	.word	0x017d7840
 800cb70:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cb74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb78:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800cb7c:	430b      	orrs	r3, r1
 800cb7e:	d173      	bne.n	800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cb80:	4b9c      	ldr	r3, [pc, #624]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cb88:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cb8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb90:	d02f      	beq.n	800cbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cb92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb98:	d863      	bhi.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cb9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d004      	beq.n	800cbaa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cba6:	d012      	beq.n	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cba8:	e05b      	b.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbaa:	4b92      	ldr	r3, [pc, #584]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cbb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cbb6:	d107      	bne.n	800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbb8:	f107 0318 	add.w	r3, r7, #24
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f000 f991 	bl	800cee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cbc2:	69bb      	ldr	r3, [r7, #24]
 800cbc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbc6:	e16e      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbcc:	e16b      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbce:	4b89      	ldr	r3, [pc, #548]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cbd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbda:	d107      	bne.n	800cbec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbdc:	f107 030c 	add.w	r3, r7, #12
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f000 fad3 	bl	800d18c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbea:	e15c      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbec:	2300      	movs	r3, #0
 800cbee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbf0:	e159      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cbf2:	4b80      	ldr	r3, [pc, #512]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cbf6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cbfa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cbfc:	4b7d      	ldr	r3, [pc, #500]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f003 0304 	and.w	r3, r3, #4
 800cc04:	2b04      	cmp	r3, #4
 800cc06:	d10c      	bne.n	800cc22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cc08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d109      	bne.n	800cc22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc0e:	4b79      	ldr	r3, [pc, #484]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	08db      	lsrs	r3, r3, #3
 800cc14:	f003 0303 	and.w	r3, r3, #3
 800cc18:	4a77      	ldr	r2, [pc, #476]	@ (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cc1a:	fa22 f303 	lsr.w	r3, r2, r3
 800cc1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc20:	e01e      	b.n	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc22:	4b74      	ldr	r3, [pc, #464]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc2e:	d106      	bne.n	800cc3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cc30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc36:	d102      	bne.n	800cc3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc38:	4b70      	ldr	r3, [pc, #448]	@ (800cdfc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc3c:	e010      	b.n	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc3e:	4b6d      	ldr	r3, [pc, #436]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc4a:	d106      	bne.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cc4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc52:	d102      	bne.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc54:	4b6a      	ldr	r3, [pc, #424]	@ (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cc56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc58:	e002      	b.n	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cc5e:	e122      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc60:	e121      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cc62:	2300      	movs	r3, #0
 800cc64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc66:	e11e      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cc68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc6c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800cc70:	430b      	orrs	r3, r1
 800cc72:	d133      	bne.n	800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cc74:	4b5f      	ldr	r3, [pc, #380]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc7c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d004      	beq.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cc84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc8a:	d012      	beq.n	800ccb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cc8c:	e023      	b.n	800ccd6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc8e:	4b59      	ldr	r3, [pc, #356]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cc96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cc9a:	d107      	bne.n	800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cca0:	4618      	mov	r0, r3
 800cca2:	f000 fbc7 	bl	800d434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccaa:	e0fc      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccac:	2300      	movs	r3, #0
 800ccae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccb0:	e0f9      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccb2:	4b50      	ldr	r3, [pc, #320]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ccba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ccbe:	d107      	bne.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccc0:	f107 0318 	add.w	r3, r7, #24
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f000 f90d 	bl	800cee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ccca:	6a3b      	ldr	r3, [r7, #32]
 800cccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccce:	e0ea      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccd4:	e0e7      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccda:	e0e4      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ccdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cce0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800cce4:	430b      	orrs	r3, r1
 800cce6:	f040 808d 	bne.w	800ce04 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ccea:	4b42      	ldr	r3, [pc, #264]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ccf2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ccf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ccfa:	d06b      	beq.n	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cd02:	d874      	bhi.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd0a:	d056      	beq.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd12:	d86c      	bhi.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cd1a:	d03b      	beq.n	800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cd22:	d864      	bhi.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd2a:	d021      	beq.n	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cd2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd32:	d85c      	bhi.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d004      	beq.n	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd40:	d004      	beq.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cd42:	e054      	b.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cd44:	f000 f8b8 	bl	800ceb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800cd48:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cd4a:	e0ac      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd4c:	4b29      	ldr	r3, [pc, #164]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd58:	d107      	bne.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd5a:	f107 0318 	add.w	r3, r7, #24
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f000 f8c0 	bl	800cee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd64:	69fb      	ldr	r3, [r7, #28]
 800cd66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd68:	e09d      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd6e:	e09a      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd70:	4b20      	ldr	r3, [pc, #128]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cd78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd7c:	d107      	bne.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd7e:	f107 030c 	add.w	r3, r7, #12
 800cd82:	4618      	mov	r0, r3
 800cd84:	f000 fa02 	bl	800d18c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd8c:	e08b      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd92:	e088      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd94:	4b17      	ldr	r3, [pc, #92]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f003 0304 	and.w	r3, r3, #4
 800cd9c:	2b04      	cmp	r3, #4
 800cd9e:	d109      	bne.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cda0:	4b14      	ldr	r3, [pc, #80]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	08db      	lsrs	r3, r3, #3
 800cda6:	f003 0303 	and.w	r3, r3, #3
 800cdaa:	4a13      	ldr	r2, [pc, #76]	@ (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cdac:	fa22 f303 	lsr.w	r3, r2, r3
 800cdb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdb2:	e078      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdb8:	e075      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cdba:	4b0e      	ldr	r3, [pc, #56]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdc6:	d102      	bne.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cdc8:	4b0c      	ldr	r3, [pc, #48]	@ (800cdfc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cdca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdcc:	e06b      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdd2:	e068      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cdd4:	4b07      	ldr	r3, [pc, #28]	@ (800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cddc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cde0:	d102      	bne.n	800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cde2:	4b07      	ldr	r3, [pc, #28]	@ (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cde4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cde6:	e05e      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cde8:	2300      	movs	r3, #0
 800cdea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdec:	e05b      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdf2:	e058      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cdf4:	58024400 	.word	0x58024400
 800cdf8:	03d09000 	.word	0x03d09000
 800cdfc:	003d0900 	.word	0x003d0900
 800ce00:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ce04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce08:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ce0c:	430b      	orrs	r3, r1
 800ce0e:	d148      	bne.n	800cea2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ce10:	4b27      	ldr	r3, [pc, #156]	@ (800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ce18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ce1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce20:	d02a      	beq.n	800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ce22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce28:	d838      	bhi.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ce2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d004      	beq.n	800ce3a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ce30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce36:	d00d      	beq.n	800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ce38:	e030      	b.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ce3a:	4b1d      	ldr	r3, [pc, #116]	@ (800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce46:	d102      	bne.n	800ce4e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ce48:	4b1a      	ldr	r3, [pc, #104]	@ (800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ce4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce4c:	e02b      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce52:	e028      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce54:	4b16      	ldr	r3, [pc, #88]	@ (800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce60:	d107      	bne.n	800ce72 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce66:	4618      	mov	r0, r3
 800ce68:	f000 fae4 	bl	800d434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce70:	e019      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce76:	e016      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce78:	4b0d      	ldr	r3, [pc, #52]	@ (800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce84:	d107      	bne.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce86:	f107 0318 	add.w	r3, r7, #24
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f000 f82a 	bl	800cee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce94:	e007      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce96:	2300      	movs	r3, #0
 800ce98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce9a:	e004      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cea0:	e001      	b.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800cea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3740      	adds	r7, #64	@ 0x40
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	58024400 	.word	0x58024400
 800ceb4:	017d7840 	.word	0x017d7840

0800ceb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cebc:	f7fd fff0 	bl	800aea0 <HAL_RCC_GetHCLKFreq>
 800cec0:	4602      	mov	r2, r0
 800cec2:	4b06      	ldr	r3, [pc, #24]	@ (800cedc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cec4:	6a1b      	ldr	r3, [r3, #32]
 800cec6:	091b      	lsrs	r3, r3, #4
 800cec8:	f003 0307 	and.w	r3, r3, #7
 800cecc:	4904      	ldr	r1, [pc, #16]	@ (800cee0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cece:	5ccb      	ldrb	r3, [r1, r3]
 800ced0:	f003 031f 	and.w	r3, r3, #31
 800ced4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	58024400 	.word	0x58024400
 800cee0:	0801a304 	.word	0x0801a304

0800cee4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b089      	sub	sp, #36	@ 0x24
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ceec:	4ba1      	ldr	r3, [pc, #644]	@ (800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ceee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cef0:	f003 0303 	and.w	r3, r3, #3
 800cef4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cef6:	4b9f      	ldr	r3, [pc, #636]	@ (800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cefa:	0b1b      	lsrs	r3, r3, #12
 800cefc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cf00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cf02:	4b9c      	ldr	r3, [pc, #624]	@ (800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf06:	091b      	lsrs	r3, r3, #4
 800cf08:	f003 0301 	and.w	r3, r3, #1
 800cf0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cf0e:	4b99      	ldr	r3, [pc, #612]	@ (800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf12:	08db      	lsrs	r3, r3, #3
 800cf14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf18:	693a      	ldr	r2, [r7, #16]
 800cf1a:	fb02 f303 	mul.w	r3, r2, r3
 800cf1e:	ee07 3a90 	vmov	s15, r3
 800cf22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f000 8111 	beq.w	800d154 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	f000 8083 	beq.w	800d040 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cf3a:	69bb      	ldr	r3, [r7, #24]
 800cf3c:	2b02      	cmp	r3, #2
 800cf3e:	f200 80a1 	bhi.w	800d084 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d003      	beq.n	800cf50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d056      	beq.n	800cffc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cf4e:	e099      	b.n	800d084 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf50:	4b88      	ldr	r3, [pc, #544]	@ (800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f003 0320 	and.w	r3, r3, #32
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d02d      	beq.n	800cfb8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf5c:	4b85      	ldr	r3, [pc, #532]	@ (800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	08db      	lsrs	r3, r3, #3
 800cf62:	f003 0303 	and.w	r3, r3, #3
 800cf66:	4a84      	ldr	r2, [pc, #528]	@ (800d178 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cf68:	fa22 f303 	lsr.w	r3, r2, r3
 800cf6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	ee07 3a90 	vmov	s15, r3
 800cf74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	ee07 3a90 	vmov	s15, r3
 800cf7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf86:	4b7b      	ldr	r3, [pc, #492]	@ (800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf8e:	ee07 3a90 	vmov	s15, r3
 800cf92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf96:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d17c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cfaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cfb6:	e087      	b.n	800d0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	ee07 3a90 	vmov	s15, r3
 800cfbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfc2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d180 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cfc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfca:	4b6a      	ldr	r3, [pc, #424]	@ (800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfd2:	ee07 3a90 	vmov	s15, r3
 800cfd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfda:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfde:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d17c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cfee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cffa:	e065      	b.n	800d0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	ee07 3a90 	vmov	s15, r3
 800d002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d006:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d184 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d00a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d00e:	4b59      	ldr	r3, [pc, #356]	@ (800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d016:	ee07 3a90 	vmov	s15, r3
 800d01a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d01e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d022:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d17c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d02a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d02e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d03a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d03e:	e043      	b.n	800d0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	ee07 3a90 	vmov	s15, r3
 800d046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d04a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d188 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d04e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d052:	4b48      	ldr	r3, [pc, #288]	@ (800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d05a:	ee07 3a90 	vmov	s15, r3
 800d05e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d062:	ed97 6a03 	vldr	s12, [r7, #12]
 800d066:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d17c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d06a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d06e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d07a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d07e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d082:	e021      	b.n	800d0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	ee07 3a90 	vmov	s15, r3
 800d08a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d08e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d184 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d096:	4b37      	ldr	r3, [pc, #220]	@ (800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d09a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d09e:	ee07 3a90 	vmov	s15, r3
 800d0a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d17c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d0ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d0c8:	4b2a      	ldr	r3, [pc, #168]	@ (800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0cc:	0a5b      	lsrs	r3, r3, #9
 800d0ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0d2:	ee07 3a90 	vmov	s15, r3
 800d0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d0de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0ee:	ee17 2a90 	vmov	r2, s15
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d0f6:	4b1f      	ldr	r3, [pc, #124]	@ (800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0fa:	0c1b      	lsrs	r3, r3, #16
 800d0fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d100:	ee07 3a90 	vmov	s15, r3
 800d104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d108:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d10c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d110:	edd7 6a07 	vldr	s13, [r7, #28]
 800d114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d11c:	ee17 2a90 	vmov	r2, s15
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d124:	4b13      	ldr	r3, [pc, #76]	@ (800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d128:	0e1b      	lsrs	r3, r3, #24
 800d12a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d12e:	ee07 3a90 	vmov	s15, r3
 800d132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d136:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d13a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d13e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d14a:	ee17 2a90 	vmov	r2, s15
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d152:	e008      	b.n	800d166 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	609a      	str	r2, [r3, #8]
}
 800d166:	bf00      	nop
 800d168:	3724      	adds	r7, #36	@ 0x24
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop
 800d174:	58024400 	.word	0x58024400
 800d178:	03d09000 	.word	0x03d09000
 800d17c:	46000000 	.word	0x46000000
 800d180:	4c742400 	.word	0x4c742400
 800d184:	4a742400 	.word	0x4a742400
 800d188:	4bbebc20 	.word	0x4bbebc20

0800d18c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b089      	sub	sp, #36	@ 0x24
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d194:	4ba1      	ldr	r3, [pc, #644]	@ (800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d198:	f003 0303 	and.w	r3, r3, #3
 800d19c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d19e:	4b9f      	ldr	r3, [pc, #636]	@ (800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1a2:	0d1b      	lsrs	r3, r3, #20
 800d1a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d1a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d1aa:	4b9c      	ldr	r3, [pc, #624]	@ (800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ae:	0a1b      	lsrs	r3, r3, #8
 800d1b0:	f003 0301 	and.w	r3, r3, #1
 800d1b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d1b6:	4b99      	ldr	r3, [pc, #612]	@ (800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1ba:	08db      	lsrs	r3, r3, #3
 800d1bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	fb02 f303 	mul.w	r3, r2, r3
 800d1c6:	ee07 3a90 	vmov	s15, r3
 800d1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f000 8111 	beq.w	800d3fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	2b02      	cmp	r3, #2
 800d1de:	f000 8083 	beq.w	800d2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	2b02      	cmp	r3, #2
 800d1e6:	f200 80a1 	bhi.w	800d32c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d003      	beq.n	800d1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d056      	beq.n	800d2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d1f6:	e099      	b.n	800d32c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1f8:	4b88      	ldr	r3, [pc, #544]	@ (800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f003 0320 	and.w	r3, r3, #32
 800d200:	2b00      	cmp	r3, #0
 800d202:	d02d      	beq.n	800d260 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d204:	4b85      	ldr	r3, [pc, #532]	@ (800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	08db      	lsrs	r3, r3, #3
 800d20a:	f003 0303 	and.w	r3, r3, #3
 800d20e:	4a84      	ldr	r2, [pc, #528]	@ (800d420 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d210:	fa22 f303 	lsr.w	r3, r2, r3
 800d214:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	ee07 3a90 	vmov	s15, r3
 800d21c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	ee07 3a90 	vmov	s15, r3
 800d226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d22a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d22e:	4b7b      	ldr	r3, [pc, #492]	@ (800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d236:	ee07 3a90 	vmov	s15, r3
 800d23a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d23e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d242:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d24a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d24e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d25a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d25e:	e087      	b.n	800d370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	ee07 3a90 	vmov	s15, r3
 800d266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d26a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d428 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d26e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d272:	4b6a      	ldr	r3, [pc, #424]	@ (800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d27a:	ee07 3a90 	vmov	s15, r3
 800d27e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d282:	ed97 6a03 	vldr	s12, [r7, #12]
 800d286:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d28a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d28e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d29a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d29e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2a2:	e065      	b.n	800d370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	ee07 3a90 	vmov	s15, r3
 800d2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d42c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d2b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2b6:	4b59      	ldr	r3, [pc, #356]	@ (800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2be:	ee07 3a90 	vmov	s15, r3
 800d2c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d2da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2e6:	e043      	b.n	800d370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	ee07 3a90 	vmov	s15, r3
 800d2ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d2f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2fa:	4b48      	ldr	r3, [pc, #288]	@ (800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d302:	ee07 3a90 	vmov	s15, r3
 800d306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d30a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d30e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d31a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d31e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d322:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d32a:	e021      	b.n	800d370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	ee07 3a90 	vmov	s15, r3
 800d332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d336:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d42c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d33a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d33e:	4b37      	ldr	r3, [pc, #220]	@ (800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d346:	ee07 3a90 	vmov	s15, r3
 800d34a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d34e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d352:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d35a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d35e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d36a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d36e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d370:	4b2a      	ldr	r3, [pc, #168]	@ (800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d374:	0a5b      	lsrs	r3, r3, #9
 800d376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d37a:	ee07 3a90 	vmov	s15, r3
 800d37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d382:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d38a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d38e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d396:	ee17 2a90 	vmov	r2, s15
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d39e:	4b1f      	ldr	r3, [pc, #124]	@ (800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3a2:	0c1b      	lsrs	r3, r3, #16
 800d3a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3a8:	ee07 3a90 	vmov	s15, r3
 800d3ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d3b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3c4:	ee17 2a90 	vmov	r2, s15
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d3cc:	4b13      	ldr	r3, [pc, #76]	@ (800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3d0:	0e1b      	lsrs	r3, r3, #24
 800d3d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3d6:	ee07 3a90 	vmov	s15, r3
 800d3da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d3e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3f2:	ee17 2a90 	vmov	r2, s15
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d3fa:	e008      	b.n	800d40e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2200      	movs	r2, #0
 800d406:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	609a      	str	r2, [r3, #8]
}
 800d40e:	bf00      	nop
 800d410:	3724      	adds	r7, #36	@ 0x24
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	58024400 	.word	0x58024400
 800d420:	03d09000 	.word	0x03d09000
 800d424:	46000000 	.word	0x46000000
 800d428:	4c742400 	.word	0x4c742400
 800d42c:	4a742400 	.word	0x4a742400
 800d430:	4bbebc20 	.word	0x4bbebc20

0800d434 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d434:	b480      	push	{r7}
 800d436:	b089      	sub	sp, #36	@ 0x24
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d43c:	4ba0      	ldr	r3, [pc, #640]	@ (800d6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d43e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d440:	f003 0303 	and.w	r3, r3, #3
 800d444:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d446:	4b9e      	ldr	r3, [pc, #632]	@ (800d6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d44a:	091b      	lsrs	r3, r3, #4
 800d44c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d450:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d452:	4b9b      	ldr	r3, [pc, #620]	@ (800d6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d456:	f003 0301 	and.w	r3, r3, #1
 800d45a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d45c:	4b98      	ldr	r3, [pc, #608]	@ (800d6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d45e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d460:	08db      	lsrs	r3, r3, #3
 800d462:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d466:	693a      	ldr	r2, [r7, #16]
 800d468:	fb02 f303 	mul.w	r3, r2, r3
 800d46c:	ee07 3a90 	vmov	s15, r3
 800d470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d474:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f000 8111 	beq.w	800d6a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	2b02      	cmp	r3, #2
 800d484:	f000 8083 	beq.w	800d58e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	2b02      	cmp	r3, #2
 800d48c:	f200 80a1 	bhi.w	800d5d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d490:	69bb      	ldr	r3, [r7, #24]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d003      	beq.n	800d49e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d496:	69bb      	ldr	r3, [r7, #24]
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d056      	beq.n	800d54a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d49c:	e099      	b.n	800d5d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d49e:	4b88      	ldr	r3, [pc, #544]	@ (800d6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f003 0320 	and.w	r3, r3, #32
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d02d      	beq.n	800d506 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4aa:	4b85      	ldr	r3, [pc, #532]	@ (800d6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	08db      	lsrs	r3, r3, #3
 800d4b0:	f003 0303 	and.w	r3, r3, #3
 800d4b4:	4a83      	ldr	r2, [pc, #524]	@ (800d6c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d4b6:	fa22 f303 	lsr.w	r3, r2, r3
 800d4ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	ee07 3a90 	vmov	s15, r3
 800d4c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	ee07 3a90 	vmov	s15, r3
 800d4cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4d4:	4b7a      	ldr	r3, [pc, #488]	@ (800d6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4dc:	ee07 3a90 	vmov	s15, r3
 800d4e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4e8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800d6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d4ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d4f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d500:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d504:	e087      	b.n	800d616 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	ee07 3a90 	vmov	s15, r3
 800d50c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d510:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800d6cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d518:	4b69      	ldr	r3, [pc, #420]	@ (800d6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d51a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d51c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d520:	ee07 3a90 	vmov	s15, r3
 800d524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d528:	ed97 6a03 	vldr	s12, [r7, #12]
 800d52c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800d6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d538:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d53c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d540:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d544:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d548:	e065      	b.n	800d616 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	ee07 3a90 	vmov	s15, r3
 800d550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d554:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800d6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d55c:	4b58      	ldr	r3, [pc, #352]	@ (800d6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d55e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d564:	ee07 3a90 	vmov	s15, r3
 800d568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d56c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d570:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800d6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d57c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d584:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d588:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d58c:	e043      	b.n	800d616 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	ee07 3a90 	vmov	s15, r3
 800d594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d598:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800d6d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d59c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5a0:	4b47      	ldr	r3, [pc, #284]	@ (800d6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5a8:	ee07 3a90 	vmov	s15, r3
 800d5ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5b4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800d6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5d0:	e021      	b.n	800d616 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	ee07 3a90 	vmov	s15, r3
 800d5d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5dc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800d6cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d5e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5e4:	4b36      	ldr	r3, [pc, #216]	@ (800d6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ec:	ee07 3a90 	vmov	s15, r3
 800d5f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5f8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d604:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d60c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d610:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d614:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d616:	4b2a      	ldr	r3, [pc, #168]	@ (800d6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d61a:	0a5b      	lsrs	r3, r3, #9
 800d61c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d620:	ee07 3a90 	vmov	s15, r3
 800d624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d628:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d62c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d630:	edd7 6a07 	vldr	s13, [r7, #28]
 800d634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d63c:	ee17 2a90 	vmov	r2, s15
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d644:	4b1e      	ldr	r3, [pc, #120]	@ (800d6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d648:	0c1b      	lsrs	r3, r3, #16
 800d64a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d64e:	ee07 3a90 	vmov	s15, r3
 800d652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d656:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d65a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d65e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d66a:	ee17 2a90 	vmov	r2, s15
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d672:	4b13      	ldr	r3, [pc, #76]	@ (800d6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d676:	0e1b      	lsrs	r3, r3, #24
 800d678:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d67c:	ee07 3a90 	vmov	s15, r3
 800d680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d684:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d688:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d68c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d698:	ee17 2a90 	vmov	r2, s15
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d6a0:	e008      	b.n	800d6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	609a      	str	r2, [r3, #8]
}
 800d6b4:	bf00      	nop
 800d6b6:	3724      	adds	r7, #36	@ 0x24
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr
 800d6c0:	58024400 	.word	0x58024400
 800d6c4:	03d09000 	.word	0x03d09000
 800d6c8:	46000000 	.word	0x46000000
 800d6cc:	4c742400 	.word	0x4c742400
 800d6d0:	4a742400 	.word	0x4a742400
 800d6d4:	4bbebc20 	.word	0x4bbebc20

0800d6d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d6e6:	4b53      	ldr	r3, [pc, #332]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d6e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ea:	f003 0303 	and.w	r3, r3, #3
 800d6ee:	2b03      	cmp	r3, #3
 800d6f0:	d101      	bne.n	800d6f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e099      	b.n	800d82a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d6f6:	4b4f      	ldr	r3, [pc, #316]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a4e      	ldr	r2, [pc, #312]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d6fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d702:	f7f6 fc99 	bl	8004038 <HAL_GetTick>
 800d706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d708:	e008      	b.n	800d71c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d70a:	f7f6 fc95 	bl	8004038 <HAL_GetTick>
 800d70e:	4602      	mov	r2, r0
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	1ad3      	subs	r3, r2, r3
 800d714:	2b02      	cmp	r3, #2
 800d716:	d901      	bls.n	800d71c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d718:	2303      	movs	r3, #3
 800d71a:	e086      	b.n	800d82a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d71c:	4b45      	ldr	r3, [pc, #276]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1f0      	bne.n	800d70a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d728:	4b42      	ldr	r3, [pc, #264]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d72a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d72c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	031b      	lsls	r3, r3, #12
 800d736:	493f      	ldr	r1, [pc, #252]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d738:	4313      	orrs	r3, r2
 800d73a:	628b      	str	r3, [r1, #40]	@ 0x28
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	3b01      	subs	r3, #1
 800d742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	689b      	ldr	r3, [r3, #8]
 800d74a:	3b01      	subs	r3, #1
 800d74c:	025b      	lsls	r3, r3, #9
 800d74e:	b29b      	uxth	r3, r3
 800d750:	431a      	orrs	r2, r3
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	68db      	ldr	r3, [r3, #12]
 800d756:	3b01      	subs	r3, #1
 800d758:	041b      	lsls	r3, r3, #16
 800d75a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d75e:	431a      	orrs	r2, r3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	691b      	ldr	r3, [r3, #16]
 800d764:	3b01      	subs	r3, #1
 800d766:	061b      	lsls	r3, r3, #24
 800d768:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d76c:	4931      	ldr	r1, [pc, #196]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d76e:	4313      	orrs	r3, r2
 800d770:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d772:	4b30      	ldr	r3, [pc, #192]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d776:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	695b      	ldr	r3, [r3, #20]
 800d77e:	492d      	ldr	r1, [pc, #180]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d780:	4313      	orrs	r3, r2
 800d782:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d784:	4b2b      	ldr	r3, [pc, #172]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d788:	f023 0220 	bic.w	r2, r3, #32
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	699b      	ldr	r3, [r3, #24]
 800d790:	4928      	ldr	r1, [pc, #160]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d792:	4313      	orrs	r3, r2
 800d794:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d796:	4b27      	ldr	r3, [pc, #156]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d79a:	4a26      	ldr	r2, [pc, #152]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d79c:	f023 0310 	bic.w	r3, r3, #16
 800d7a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d7a2:	4b24      	ldr	r3, [pc, #144]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d7a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d7a6:	4b24      	ldr	r3, [pc, #144]	@ (800d838 <RCCEx_PLL2_Config+0x160>)
 800d7a8:	4013      	ands	r3, r2
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	69d2      	ldr	r2, [r2, #28]
 800d7ae:	00d2      	lsls	r2, r2, #3
 800d7b0:	4920      	ldr	r1, [pc, #128]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d7b6:	4b1f      	ldr	r3, [pc, #124]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d7b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ba:	4a1e      	ldr	r2, [pc, #120]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d7bc:	f043 0310 	orr.w	r3, r3, #16
 800d7c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d106      	bne.n	800d7d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d7c8:	4b1a      	ldr	r3, [pc, #104]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d7ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7cc:	4a19      	ldr	r2, [pc, #100]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d7ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d7d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d7d4:	e00f      	b.n	800d7f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d106      	bne.n	800d7ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d7dc:	4b15      	ldr	r3, [pc, #84]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d7de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7e0:	4a14      	ldr	r2, [pc, #80]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d7e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d7e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d7e8:	e005      	b.n	800d7f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d7ea:	4b12      	ldr	r3, [pc, #72]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ee:	4a11      	ldr	r2, [pc, #68]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d7f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d7f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d7f6:	4b0f      	ldr	r3, [pc, #60]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	4a0e      	ldr	r2, [pc, #56]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d7fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d802:	f7f6 fc19 	bl	8004038 <HAL_GetTick>
 800d806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d808:	e008      	b.n	800d81c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d80a:	f7f6 fc15 	bl	8004038 <HAL_GetTick>
 800d80e:	4602      	mov	r2, r0
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	2b02      	cmp	r3, #2
 800d816:	d901      	bls.n	800d81c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d818:	2303      	movs	r3, #3
 800d81a:	e006      	b.n	800d82a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d81c:	4b05      	ldr	r3, [pc, #20]	@ (800d834 <RCCEx_PLL2_Config+0x15c>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d824:	2b00      	cmp	r3, #0
 800d826:	d0f0      	beq.n	800d80a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d828:	7bfb      	ldrb	r3, [r7, #15]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	58024400 	.word	0x58024400
 800d838:	ffff0007 	.word	0xffff0007

0800d83c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d846:	2300      	movs	r3, #0
 800d848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d84a:	4b53      	ldr	r3, [pc, #332]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d84c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d84e:	f003 0303 	and.w	r3, r3, #3
 800d852:	2b03      	cmp	r3, #3
 800d854:	d101      	bne.n	800d85a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d856:	2301      	movs	r3, #1
 800d858:	e099      	b.n	800d98e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d85a:	4b4f      	ldr	r3, [pc, #316]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	4a4e      	ldr	r2, [pc, #312]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d860:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d866:	f7f6 fbe7 	bl	8004038 <HAL_GetTick>
 800d86a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d86c:	e008      	b.n	800d880 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d86e:	f7f6 fbe3 	bl	8004038 <HAL_GetTick>
 800d872:	4602      	mov	r2, r0
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	1ad3      	subs	r3, r2, r3
 800d878:	2b02      	cmp	r3, #2
 800d87a:	d901      	bls.n	800d880 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d87c:	2303      	movs	r3, #3
 800d87e:	e086      	b.n	800d98e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d880:	4b45      	ldr	r3, [pc, #276]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1f0      	bne.n	800d86e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d88c:	4b42      	ldr	r3, [pc, #264]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d88e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d890:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	051b      	lsls	r3, r3, #20
 800d89a:	493f      	ldr	r1, [pc, #252]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d89c:	4313      	orrs	r3, r2
 800d89e:	628b      	str	r3, [r1, #40]	@ 0x28
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	3b01      	subs	r3, #1
 800d8a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	689b      	ldr	r3, [r3, #8]
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	025b      	lsls	r3, r3, #9
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	431a      	orrs	r2, r3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	041b      	lsls	r3, r3, #16
 800d8be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d8c2:	431a      	orrs	r2, r3
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	691b      	ldr	r3, [r3, #16]
 800d8c8:	3b01      	subs	r3, #1
 800d8ca:	061b      	lsls	r3, r3, #24
 800d8cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d8d0:	4931      	ldr	r1, [pc, #196]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d8d2:	4313      	orrs	r3, r2
 800d8d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d8d6:	4b30      	ldr	r3, [pc, #192]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d8d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	695b      	ldr	r3, [r3, #20]
 800d8e2:	492d      	ldr	r1, [pc, #180]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d8e8:	4b2b      	ldr	r3, [pc, #172]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d8ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	699b      	ldr	r3, [r3, #24]
 800d8f4:	4928      	ldr	r1, [pc, #160]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d8fa:	4b27      	ldr	r3, [pc, #156]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8fe:	4a26      	ldr	r2, [pc, #152]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d904:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d906:	4b24      	ldr	r3, [pc, #144]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d90a:	4b24      	ldr	r3, [pc, #144]	@ (800d99c <RCCEx_PLL3_Config+0x160>)
 800d90c:	4013      	ands	r3, r2
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	69d2      	ldr	r2, [r2, #28]
 800d912:	00d2      	lsls	r2, r2, #3
 800d914:	4920      	ldr	r1, [pc, #128]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d916:	4313      	orrs	r3, r2
 800d918:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d91a:	4b1f      	ldr	r3, [pc, #124]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d91c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d91e:	4a1e      	ldr	r2, [pc, #120]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d924:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d106      	bne.n	800d93a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d92c:	4b1a      	ldr	r3, [pc, #104]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d92e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d930:	4a19      	ldr	r2, [pc, #100]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d932:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d936:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d938:	e00f      	b.n	800d95a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d106      	bne.n	800d94e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d940:	4b15      	ldr	r3, [pc, #84]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d944:	4a14      	ldr	r2, [pc, #80]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d946:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d94a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d94c:	e005      	b.n	800d95a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d94e:	4b12      	ldr	r3, [pc, #72]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d952:	4a11      	ldr	r2, [pc, #68]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d954:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d958:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d95a:	4b0f      	ldr	r3, [pc, #60]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4a0e      	ldr	r2, [pc, #56]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d966:	f7f6 fb67 	bl	8004038 <HAL_GetTick>
 800d96a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d96c:	e008      	b.n	800d980 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d96e:	f7f6 fb63 	bl	8004038 <HAL_GetTick>
 800d972:	4602      	mov	r2, r0
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	1ad3      	subs	r3, r2, r3
 800d978:	2b02      	cmp	r3, #2
 800d97a:	d901      	bls.n	800d980 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d97c:	2303      	movs	r3, #3
 800d97e:	e006      	b.n	800d98e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d980:	4b05      	ldr	r3, [pc, #20]	@ (800d998 <RCCEx_PLL3_Config+0x15c>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d0f0      	beq.n	800d96e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	58024400 	.word	0x58024400
 800d99c:	ffff0007 	.word	0xffff0007

0800d9a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d101      	bne.n	800d9b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e049      	b.n	800da46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d106      	bne.n	800d9cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f7f5 ff76 	bl	80038b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2202      	movs	r2, #2
 800d9d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	3304      	adds	r3, #4
 800d9dc:	4619      	mov	r1, r3
 800d9de:	4610      	mov	r0, r2
 800d9e0:	f000 fb88 	bl	800e0f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2201      	movs	r2, #1
 800da00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2201      	movs	r2, #1
 800da08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2201      	movs	r2, #1
 800da10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2201      	movs	r2, #1
 800da18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2201      	movs	r2, #1
 800da20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2201      	movs	r2, #1
 800da30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2201      	movs	r2, #1
 800da38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2201      	movs	r2, #1
 800da40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800da44:	2300      	movs	r3, #0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
	...

0800da50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800da50:	b480      	push	{r7}
 800da52:	b085      	sub	sp, #20
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	2b01      	cmp	r3, #1
 800da62:	d001      	beq.n	800da68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800da64:	2301      	movs	r3, #1
 800da66:	e04c      	b.n	800db02 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2202      	movs	r2, #2
 800da6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4a26      	ldr	r2, [pc, #152]	@ (800db10 <HAL_TIM_Base_Start+0xc0>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d022      	beq.n	800dac0 <HAL_TIM_Base_Start+0x70>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da82:	d01d      	beq.n	800dac0 <HAL_TIM_Base_Start+0x70>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a22      	ldr	r2, [pc, #136]	@ (800db14 <HAL_TIM_Base_Start+0xc4>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d018      	beq.n	800dac0 <HAL_TIM_Base_Start+0x70>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4a21      	ldr	r2, [pc, #132]	@ (800db18 <HAL_TIM_Base_Start+0xc8>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d013      	beq.n	800dac0 <HAL_TIM_Base_Start+0x70>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a1f      	ldr	r2, [pc, #124]	@ (800db1c <HAL_TIM_Base_Start+0xcc>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d00e      	beq.n	800dac0 <HAL_TIM_Base_Start+0x70>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a1e      	ldr	r2, [pc, #120]	@ (800db20 <HAL_TIM_Base_Start+0xd0>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d009      	beq.n	800dac0 <HAL_TIM_Base_Start+0x70>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a1c      	ldr	r2, [pc, #112]	@ (800db24 <HAL_TIM_Base_Start+0xd4>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d004      	beq.n	800dac0 <HAL_TIM_Base_Start+0x70>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4a1b      	ldr	r2, [pc, #108]	@ (800db28 <HAL_TIM_Base_Start+0xd8>)
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d115      	bne.n	800daec <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	689a      	ldr	r2, [r3, #8]
 800dac6:	4b19      	ldr	r3, [pc, #100]	@ (800db2c <HAL_TIM_Base_Start+0xdc>)
 800dac8:	4013      	ands	r3, r2
 800daca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2b06      	cmp	r3, #6
 800dad0:	d015      	beq.n	800dafe <HAL_TIM_Base_Start+0xae>
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dad8:	d011      	beq.n	800dafe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f042 0201 	orr.w	r2, r2, #1
 800dae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800daea:	e008      	b.n	800dafe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f042 0201 	orr.w	r2, r2, #1
 800dafa:	601a      	str	r2, [r3, #0]
 800dafc:	e000      	b.n	800db00 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dafe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db00:	2300      	movs	r3, #0
}
 800db02:	4618      	mov	r0, r3
 800db04:	3714      	adds	r7, #20
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr
 800db0e:	bf00      	nop
 800db10:	40010000 	.word	0x40010000
 800db14:	40000400 	.word	0x40000400
 800db18:	40000800 	.word	0x40000800
 800db1c:	40000c00 	.word	0x40000c00
 800db20:	40010400 	.word	0x40010400
 800db24:	40001800 	.word	0x40001800
 800db28:	40014000 	.word	0x40014000
 800db2c:	00010007 	.word	0x00010007

0800db30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db30:	b480      	push	{r7}
 800db32:	b085      	sub	sp, #20
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	2b01      	cmp	r3, #1
 800db42:	d001      	beq.n	800db48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800db44:	2301      	movs	r3, #1
 800db46:	e054      	b.n	800dbf2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2202      	movs	r2, #2
 800db4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	68da      	ldr	r2, [r3, #12]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f042 0201 	orr.w	r2, r2, #1
 800db5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a26      	ldr	r2, [pc, #152]	@ (800dc00 <HAL_TIM_Base_Start_IT+0xd0>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d022      	beq.n	800dbb0 <HAL_TIM_Base_Start_IT+0x80>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db72:	d01d      	beq.n	800dbb0 <HAL_TIM_Base_Start_IT+0x80>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a22      	ldr	r2, [pc, #136]	@ (800dc04 <HAL_TIM_Base_Start_IT+0xd4>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d018      	beq.n	800dbb0 <HAL_TIM_Base_Start_IT+0x80>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4a21      	ldr	r2, [pc, #132]	@ (800dc08 <HAL_TIM_Base_Start_IT+0xd8>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d013      	beq.n	800dbb0 <HAL_TIM_Base_Start_IT+0x80>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a1f      	ldr	r2, [pc, #124]	@ (800dc0c <HAL_TIM_Base_Start_IT+0xdc>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d00e      	beq.n	800dbb0 <HAL_TIM_Base_Start_IT+0x80>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	4a1e      	ldr	r2, [pc, #120]	@ (800dc10 <HAL_TIM_Base_Start_IT+0xe0>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d009      	beq.n	800dbb0 <HAL_TIM_Base_Start_IT+0x80>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a1c      	ldr	r2, [pc, #112]	@ (800dc14 <HAL_TIM_Base_Start_IT+0xe4>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d004      	beq.n	800dbb0 <HAL_TIM_Base_Start_IT+0x80>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a1b      	ldr	r2, [pc, #108]	@ (800dc18 <HAL_TIM_Base_Start_IT+0xe8>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d115      	bne.n	800dbdc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	689a      	ldr	r2, [r3, #8]
 800dbb6:	4b19      	ldr	r3, [pc, #100]	@ (800dc1c <HAL_TIM_Base_Start_IT+0xec>)
 800dbb8:	4013      	ands	r3, r2
 800dbba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2b06      	cmp	r3, #6
 800dbc0:	d015      	beq.n	800dbee <HAL_TIM_Base_Start_IT+0xbe>
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbc8:	d011      	beq.n	800dbee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f042 0201 	orr.w	r2, r2, #1
 800dbd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbda:	e008      	b.n	800dbee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f042 0201 	orr.w	r2, r2, #1
 800dbea:	601a      	str	r2, [r3, #0]
 800dbec:	e000      	b.n	800dbf0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3714      	adds	r7, #20
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr
 800dbfe:	bf00      	nop
 800dc00:	40010000 	.word	0x40010000
 800dc04:	40000400 	.word	0x40000400
 800dc08:	40000800 	.word	0x40000800
 800dc0c:	40000c00 	.word	0x40000c00
 800dc10:	40010400 	.word	0x40010400
 800dc14:	40001800 	.word	0x40001800
 800dc18:	40014000 	.word	0x40014000
 800dc1c:	00010007 	.word	0x00010007

0800dc20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	68db      	ldr	r3, [r3, #12]
 800dc2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	691b      	ldr	r3, [r3, #16]
 800dc36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	f003 0302 	and.w	r3, r3, #2
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d020      	beq.n	800dc84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	f003 0302 	and.w	r3, r3, #2
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d01b      	beq.n	800dc84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f06f 0202 	mvn.w	r2, #2
 800dc54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	699b      	ldr	r3, [r3, #24]
 800dc62:	f003 0303 	and.w	r3, r3, #3
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d003      	beq.n	800dc72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 fa24 	bl	800e0b8 <HAL_TIM_IC_CaptureCallback>
 800dc70:	e005      	b.n	800dc7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 fa16 	bl	800e0a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 fa27 	bl	800e0cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2200      	movs	r2, #0
 800dc82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	f003 0304 	and.w	r3, r3, #4
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d020      	beq.n	800dcd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	f003 0304 	and.w	r3, r3, #4
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d01b      	beq.n	800dcd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f06f 0204 	mvn.w	r2, #4
 800dca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2202      	movs	r2, #2
 800dca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	699b      	ldr	r3, [r3, #24]
 800dcae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d003      	beq.n	800dcbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 f9fe 	bl	800e0b8 <HAL_TIM_IC_CaptureCallback>
 800dcbc:	e005      	b.n	800dcca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 f9f0 	bl	800e0a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 fa01 	bl	800e0cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2200      	movs	r2, #0
 800dcce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	f003 0308 	and.w	r3, r3, #8
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d020      	beq.n	800dd1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f003 0308 	and.w	r3, r3, #8
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d01b      	beq.n	800dd1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f06f 0208 	mvn.w	r2, #8
 800dcec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2204      	movs	r2, #4
 800dcf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	69db      	ldr	r3, [r3, #28]
 800dcfa:	f003 0303 	and.w	r3, r3, #3
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d003      	beq.n	800dd0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 f9d8 	bl	800e0b8 <HAL_TIM_IC_CaptureCallback>
 800dd08:	e005      	b.n	800dd16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 f9ca 	bl	800e0a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f000 f9db 	bl	800e0cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	f003 0310 	and.w	r3, r3, #16
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d020      	beq.n	800dd68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f003 0310 	and.w	r3, r3, #16
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d01b      	beq.n	800dd68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f06f 0210 	mvn.w	r2, #16
 800dd38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2208      	movs	r2, #8
 800dd3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	69db      	ldr	r3, [r3, #28]
 800dd46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d003      	beq.n	800dd56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 f9b2 	bl	800e0b8 <HAL_TIM_IC_CaptureCallback>
 800dd54:	e005      	b.n	800dd62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 f9a4 	bl	800e0a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f000 f9b5 	bl	800e0cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2200      	movs	r2, #0
 800dd66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	f003 0301 	and.w	r3, r3, #1
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d00c      	beq.n	800dd8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	f003 0301 	and.w	r3, r3, #1
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d007      	beq.n	800dd8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f06f 0201 	mvn.w	r2, #1
 800dd84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f7f5 fc84 	bl	8003694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d104      	bne.n	800dda0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d00c      	beq.n	800ddba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d007      	beq.n	800ddba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ddb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f000 fc63 	bl	800e680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d00c      	beq.n	800ddde <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d007      	beq.n	800ddde <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ddd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 fc5b 	bl	800e694 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d00c      	beq.n	800de02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d007      	beq.n	800de02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ddfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 f96f 	bl	800e0e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	f003 0320 	and.w	r3, r3, #32
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d00c      	beq.n	800de26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f003 0320 	and.w	r3, r3, #32
 800de12:	2b00      	cmp	r3, #0
 800de14:	d007      	beq.n	800de26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f06f 0220 	mvn.w	r2, #32
 800de1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f000 fc23 	bl	800e66c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800de26:	bf00      	nop
 800de28:	3710      	adds	r7, #16
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
	...

0800de30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800de3a:	2300      	movs	r3, #0
 800de3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800de44:	2b01      	cmp	r3, #1
 800de46:	d101      	bne.n	800de4c <HAL_TIM_ConfigClockSource+0x1c>
 800de48:	2302      	movs	r3, #2
 800de4a:	e0dc      	b.n	800e006 <HAL_TIM_ConfigClockSource+0x1d6>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2201      	movs	r2, #1
 800de50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2202      	movs	r2, #2
 800de58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	689b      	ldr	r3, [r3, #8]
 800de62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800de64:	68ba      	ldr	r2, [r7, #8]
 800de66:	4b6a      	ldr	r3, [pc, #424]	@ (800e010 <HAL_TIM_ConfigClockSource+0x1e0>)
 800de68:	4013      	ands	r3, r2
 800de6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800de72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	68ba      	ldr	r2, [r7, #8]
 800de7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a64      	ldr	r2, [pc, #400]	@ (800e014 <HAL_TIM_ConfigClockSource+0x1e4>)
 800de82:	4293      	cmp	r3, r2
 800de84:	f000 80a9 	beq.w	800dfda <HAL_TIM_ConfigClockSource+0x1aa>
 800de88:	4a62      	ldr	r2, [pc, #392]	@ (800e014 <HAL_TIM_ConfigClockSource+0x1e4>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	f200 80ae 	bhi.w	800dfec <HAL_TIM_ConfigClockSource+0x1bc>
 800de90:	4a61      	ldr	r2, [pc, #388]	@ (800e018 <HAL_TIM_ConfigClockSource+0x1e8>)
 800de92:	4293      	cmp	r3, r2
 800de94:	f000 80a1 	beq.w	800dfda <HAL_TIM_ConfigClockSource+0x1aa>
 800de98:	4a5f      	ldr	r2, [pc, #380]	@ (800e018 <HAL_TIM_ConfigClockSource+0x1e8>)
 800de9a:	4293      	cmp	r3, r2
 800de9c:	f200 80a6 	bhi.w	800dfec <HAL_TIM_ConfigClockSource+0x1bc>
 800dea0:	4a5e      	ldr	r2, [pc, #376]	@ (800e01c <HAL_TIM_ConfigClockSource+0x1ec>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	f000 8099 	beq.w	800dfda <HAL_TIM_ConfigClockSource+0x1aa>
 800dea8:	4a5c      	ldr	r2, [pc, #368]	@ (800e01c <HAL_TIM_ConfigClockSource+0x1ec>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	f200 809e 	bhi.w	800dfec <HAL_TIM_ConfigClockSource+0x1bc>
 800deb0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800deb4:	f000 8091 	beq.w	800dfda <HAL_TIM_ConfigClockSource+0x1aa>
 800deb8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800debc:	f200 8096 	bhi.w	800dfec <HAL_TIM_ConfigClockSource+0x1bc>
 800dec0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dec4:	f000 8089 	beq.w	800dfda <HAL_TIM_ConfigClockSource+0x1aa>
 800dec8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800decc:	f200 808e 	bhi.w	800dfec <HAL_TIM_ConfigClockSource+0x1bc>
 800ded0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ded4:	d03e      	beq.n	800df54 <HAL_TIM_ConfigClockSource+0x124>
 800ded6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800deda:	f200 8087 	bhi.w	800dfec <HAL_TIM_ConfigClockSource+0x1bc>
 800dede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dee2:	f000 8086 	beq.w	800dff2 <HAL_TIM_ConfigClockSource+0x1c2>
 800dee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800deea:	d87f      	bhi.n	800dfec <HAL_TIM_ConfigClockSource+0x1bc>
 800deec:	2b70      	cmp	r3, #112	@ 0x70
 800deee:	d01a      	beq.n	800df26 <HAL_TIM_ConfigClockSource+0xf6>
 800def0:	2b70      	cmp	r3, #112	@ 0x70
 800def2:	d87b      	bhi.n	800dfec <HAL_TIM_ConfigClockSource+0x1bc>
 800def4:	2b60      	cmp	r3, #96	@ 0x60
 800def6:	d050      	beq.n	800df9a <HAL_TIM_ConfigClockSource+0x16a>
 800def8:	2b60      	cmp	r3, #96	@ 0x60
 800defa:	d877      	bhi.n	800dfec <HAL_TIM_ConfigClockSource+0x1bc>
 800defc:	2b50      	cmp	r3, #80	@ 0x50
 800defe:	d03c      	beq.n	800df7a <HAL_TIM_ConfigClockSource+0x14a>
 800df00:	2b50      	cmp	r3, #80	@ 0x50
 800df02:	d873      	bhi.n	800dfec <HAL_TIM_ConfigClockSource+0x1bc>
 800df04:	2b40      	cmp	r3, #64	@ 0x40
 800df06:	d058      	beq.n	800dfba <HAL_TIM_ConfigClockSource+0x18a>
 800df08:	2b40      	cmp	r3, #64	@ 0x40
 800df0a:	d86f      	bhi.n	800dfec <HAL_TIM_ConfigClockSource+0x1bc>
 800df0c:	2b30      	cmp	r3, #48	@ 0x30
 800df0e:	d064      	beq.n	800dfda <HAL_TIM_ConfigClockSource+0x1aa>
 800df10:	2b30      	cmp	r3, #48	@ 0x30
 800df12:	d86b      	bhi.n	800dfec <HAL_TIM_ConfigClockSource+0x1bc>
 800df14:	2b20      	cmp	r3, #32
 800df16:	d060      	beq.n	800dfda <HAL_TIM_ConfigClockSource+0x1aa>
 800df18:	2b20      	cmp	r3, #32
 800df1a:	d867      	bhi.n	800dfec <HAL_TIM_ConfigClockSource+0x1bc>
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d05c      	beq.n	800dfda <HAL_TIM_ConfigClockSource+0x1aa>
 800df20:	2b10      	cmp	r3, #16
 800df22:	d05a      	beq.n	800dfda <HAL_TIM_ConfigClockSource+0x1aa>
 800df24:	e062      	b.n	800dfec <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800df36:	f000 faeb 	bl	800e510 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	689b      	ldr	r3, [r3, #8]
 800df40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800df48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	68ba      	ldr	r2, [r7, #8]
 800df50:	609a      	str	r2, [r3, #8]
      break;
 800df52:	e04f      	b.n	800dff4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800df64:	f000 fad4 	bl	800e510 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	689a      	ldr	r2, [r3, #8]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800df76:	609a      	str	r2, [r3, #8]
      break;
 800df78:	e03c      	b.n	800dff4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800df86:	461a      	mov	r2, r3
 800df88:	f000 fa44 	bl	800e414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2150      	movs	r1, #80	@ 0x50
 800df92:	4618      	mov	r0, r3
 800df94:	f000 fa9e 	bl	800e4d4 <TIM_ITRx_SetConfig>
      break;
 800df98:	e02c      	b.n	800dff4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	f000 fa63 	bl	800e472 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2160      	movs	r1, #96	@ 0x60
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f000 fa8e 	bl	800e4d4 <TIM_ITRx_SetConfig>
      break;
 800dfb8:	e01c      	b.n	800dff4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	f000 fa24 	bl	800e414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	2140      	movs	r1, #64	@ 0x40
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f000 fa7e 	bl	800e4d4 <TIM_ITRx_SetConfig>
      break;
 800dfd8:	e00c      	b.n	800dff4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681a      	ldr	r2, [r3, #0]
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	4610      	mov	r0, r2
 800dfe6:	f000 fa75 	bl	800e4d4 <TIM_ITRx_SetConfig>
      break;
 800dfea:	e003      	b.n	800dff4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dfec:	2301      	movs	r3, #1
 800dfee:	73fb      	strb	r3, [r7, #15]
      break;
 800dff0:	e000      	b.n	800dff4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dff2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2201      	movs	r2, #1
 800dff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e004:	7bfb      	ldrb	r3, [r7, #15]
}
 800e006:	4618      	mov	r0, r3
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	ffceff88 	.word	0xffceff88
 800e014:	00100040 	.word	0x00100040
 800e018:	00100030 	.word	0x00100030
 800e01c:	00100020 	.word	0x00100020

0800e020 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e030:	2b01      	cmp	r3, #1
 800e032:	d101      	bne.n	800e038 <HAL_TIM_SlaveConfigSynchro+0x18>
 800e034:	2302      	movs	r3, #2
 800e036:	e031      	b.n	800e09c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2201      	movs	r2, #1
 800e03c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2202      	movs	r2, #2
 800e044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800e048:	6839      	ldr	r1, [r7, #0]
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f000 f8f8 	bl	800e240 <TIM_SlaveTimer_SetConfig>
 800e050:	4603      	mov	r3, r0
 800e052:	2b00      	cmp	r3, #0
 800e054:	d009      	beq.n	800e06a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2201      	movs	r2, #1
 800e05a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2200      	movs	r2, #0
 800e062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800e066:	2301      	movs	r3, #1
 800e068:	e018      	b.n	800e09c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	68da      	ldr	r2, [r3, #12]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e078:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	68da      	ldr	r2, [r3, #12]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e088:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2201      	movs	r2, #1
 800e08e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2200      	movs	r2, #0
 800e096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e09a:	2300      	movs	r3, #0
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3708      	adds	r7, #8
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e0ac:	bf00      	nop
 800e0ae:	370c      	adds	r7, #12
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr

0800e0b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b083      	sub	sp, #12
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e0c0:	bf00      	nop
 800e0c2:	370c      	adds	r7, #12
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr

0800e0cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e0d4:	bf00      	nop
 800e0d6:	370c      	adds	r7, #12
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr

0800e0e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e0e8:	bf00      	nop
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b085      	sub	sp, #20
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	4a46      	ldr	r2, [pc, #280]	@ (800e220 <TIM_Base_SetConfig+0x12c>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d013      	beq.n	800e134 <TIM_Base_SetConfig+0x40>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e112:	d00f      	beq.n	800e134 <TIM_Base_SetConfig+0x40>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	4a43      	ldr	r2, [pc, #268]	@ (800e224 <TIM_Base_SetConfig+0x130>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d00b      	beq.n	800e134 <TIM_Base_SetConfig+0x40>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	4a42      	ldr	r2, [pc, #264]	@ (800e228 <TIM_Base_SetConfig+0x134>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d007      	beq.n	800e134 <TIM_Base_SetConfig+0x40>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	4a41      	ldr	r2, [pc, #260]	@ (800e22c <TIM_Base_SetConfig+0x138>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d003      	beq.n	800e134 <TIM_Base_SetConfig+0x40>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4a40      	ldr	r2, [pc, #256]	@ (800e230 <TIM_Base_SetConfig+0x13c>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d108      	bne.n	800e146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e13a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	68fa      	ldr	r2, [r7, #12]
 800e142:	4313      	orrs	r3, r2
 800e144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	4a35      	ldr	r2, [pc, #212]	@ (800e220 <TIM_Base_SetConfig+0x12c>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d01f      	beq.n	800e18e <TIM_Base_SetConfig+0x9a>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e154:	d01b      	beq.n	800e18e <TIM_Base_SetConfig+0x9a>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4a32      	ldr	r2, [pc, #200]	@ (800e224 <TIM_Base_SetConfig+0x130>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d017      	beq.n	800e18e <TIM_Base_SetConfig+0x9a>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	4a31      	ldr	r2, [pc, #196]	@ (800e228 <TIM_Base_SetConfig+0x134>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d013      	beq.n	800e18e <TIM_Base_SetConfig+0x9a>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4a30      	ldr	r2, [pc, #192]	@ (800e22c <TIM_Base_SetConfig+0x138>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d00f      	beq.n	800e18e <TIM_Base_SetConfig+0x9a>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	4a2f      	ldr	r2, [pc, #188]	@ (800e230 <TIM_Base_SetConfig+0x13c>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d00b      	beq.n	800e18e <TIM_Base_SetConfig+0x9a>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	4a2e      	ldr	r2, [pc, #184]	@ (800e234 <TIM_Base_SetConfig+0x140>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d007      	beq.n	800e18e <TIM_Base_SetConfig+0x9a>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	4a2d      	ldr	r2, [pc, #180]	@ (800e238 <TIM_Base_SetConfig+0x144>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d003      	beq.n	800e18e <TIM_Base_SetConfig+0x9a>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	4a2c      	ldr	r2, [pc, #176]	@ (800e23c <TIM_Base_SetConfig+0x148>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d108      	bne.n	800e1a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	4313      	orrs	r3, r2
 800e19e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	695b      	ldr	r3, [r3, #20]
 800e1aa:	4313      	orrs	r3, r2
 800e1ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	68fa      	ldr	r2, [r7, #12]
 800e1b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	689a      	ldr	r2, [r3, #8]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	4a16      	ldr	r2, [pc, #88]	@ (800e220 <TIM_Base_SetConfig+0x12c>)
 800e1c8:	4293      	cmp	r3, r2
 800e1ca:	d00f      	beq.n	800e1ec <TIM_Base_SetConfig+0xf8>
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	4a18      	ldr	r2, [pc, #96]	@ (800e230 <TIM_Base_SetConfig+0x13c>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d00b      	beq.n	800e1ec <TIM_Base_SetConfig+0xf8>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	4a17      	ldr	r2, [pc, #92]	@ (800e234 <TIM_Base_SetConfig+0x140>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d007      	beq.n	800e1ec <TIM_Base_SetConfig+0xf8>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	4a16      	ldr	r2, [pc, #88]	@ (800e238 <TIM_Base_SetConfig+0x144>)
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d003      	beq.n	800e1ec <TIM_Base_SetConfig+0xf8>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	4a15      	ldr	r2, [pc, #84]	@ (800e23c <TIM_Base_SetConfig+0x148>)
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	d103      	bne.n	800e1f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	691a      	ldr	r2, [r3, #16]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	691b      	ldr	r3, [r3, #16]
 800e1fe:	f003 0301 	and.w	r3, r3, #1
 800e202:	2b01      	cmp	r3, #1
 800e204:	d105      	bne.n	800e212 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	691b      	ldr	r3, [r3, #16]
 800e20a:	f023 0201 	bic.w	r2, r3, #1
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	611a      	str	r2, [r3, #16]
  }
}
 800e212:	bf00      	nop
 800e214:	3714      	adds	r7, #20
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr
 800e21e:	bf00      	nop
 800e220:	40010000 	.word	0x40010000
 800e224:	40000400 	.word	0x40000400
 800e228:	40000800 	.word	0x40000800
 800e22c:	40000c00 	.word	0x40000c00
 800e230:	40010400 	.word	0x40010400
 800e234:	40014000 	.word	0x40014000
 800e238:	40014400 	.word	0x40014400
 800e23c:	40014800 	.word	0x40014800

0800e240 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b086      	sub	sp, #24
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e24a:	2300      	movs	r3, #0
 800e24c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e256:	693a      	ldr	r2, [r7, #16]
 800e258:	4b65      	ldr	r3, [pc, #404]	@ (800e3f0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800e25a:	4013      	ands	r3, r2
 800e25c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	693a      	ldr	r2, [r7, #16]
 800e264:	4313      	orrs	r3, r2
 800e266:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800e268:	693a      	ldr	r2, [r7, #16]
 800e26a:	4b62      	ldr	r3, [pc, #392]	@ (800e3f4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800e26c:	4013      	ands	r3, r2
 800e26e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	693a      	ldr	r2, [r7, #16]
 800e276:	4313      	orrs	r3, r2
 800e278:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	693a      	ldr	r2, [r7, #16]
 800e280:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	4a5c      	ldr	r2, [pc, #368]	@ (800e3f8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800e288:	4293      	cmp	r3, r2
 800e28a:	f000 80ab 	beq.w	800e3e4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e28e:	4a5a      	ldr	r2, [pc, #360]	@ (800e3f8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800e290:	4293      	cmp	r3, r2
 800e292:	f200 80a4 	bhi.w	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
 800e296:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e29a:	f000 80a3 	beq.w	800e3e4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e29e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e2a2:	f200 809c 	bhi.w	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
 800e2a6:	4a55      	ldr	r2, [pc, #340]	@ (800e3fc <TIM_SlaveTimer_SetConfig+0x1bc>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	f000 809b 	beq.w	800e3e4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e2ae:	4a53      	ldr	r2, [pc, #332]	@ (800e3fc <TIM_SlaveTimer_SetConfig+0x1bc>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	f200 8094 	bhi.w	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
 800e2b6:	4a52      	ldr	r2, [pc, #328]	@ (800e400 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	f000 8093 	beq.w	800e3e4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e2be:	4a50      	ldr	r2, [pc, #320]	@ (800e400 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	f200 808c 	bhi.w	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
 800e2c6:	4a4f      	ldr	r2, [pc, #316]	@ (800e404 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	f000 808b 	beq.w	800e3e4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e2ce:	4a4d      	ldr	r2, [pc, #308]	@ (800e404 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	f200 8084 	bhi.w	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
 800e2d6:	4a4c      	ldr	r2, [pc, #304]	@ (800e408 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	f000 8083 	beq.w	800e3e4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e2de:	4a4a      	ldr	r2, [pc, #296]	@ (800e408 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d87c      	bhi.n	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
 800e2e4:	4a49      	ldr	r2, [pc, #292]	@ (800e40c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d07c      	beq.n	800e3e4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e2ea:	4a48      	ldr	r2, [pc, #288]	@ (800e40c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d876      	bhi.n	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
 800e2f0:	4a47      	ldr	r2, [pc, #284]	@ (800e410 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d076      	beq.n	800e3e4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e2f6:	4a46      	ldr	r2, [pc, #280]	@ (800e410 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d870      	bhi.n	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
 800e2fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e300:	d070      	beq.n	800e3e4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e302:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e306:	d86a      	bhi.n	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
 800e308:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e30c:	d06a      	beq.n	800e3e4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e30e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e312:	d864      	bhi.n	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
 800e314:	2b70      	cmp	r3, #112	@ 0x70
 800e316:	d01a      	beq.n	800e34e <TIM_SlaveTimer_SetConfig+0x10e>
 800e318:	2b70      	cmp	r3, #112	@ 0x70
 800e31a:	d860      	bhi.n	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
 800e31c:	2b60      	cmp	r3, #96	@ 0x60
 800e31e:	d054      	beq.n	800e3ca <TIM_SlaveTimer_SetConfig+0x18a>
 800e320:	2b60      	cmp	r3, #96	@ 0x60
 800e322:	d85c      	bhi.n	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
 800e324:	2b50      	cmp	r3, #80	@ 0x50
 800e326:	d046      	beq.n	800e3b6 <TIM_SlaveTimer_SetConfig+0x176>
 800e328:	2b50      	cmp	r3, #80	@ 0x50
 800e32a:	d858      	bhi.n	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
 800e32c:	2b40      	cmp	r3, #64	@ 0x40
 800e32e:	d019      	beq.n	800e364 <TIM_SlaveTimer_SetConfig+0x124>
 800e330:	2b40      	cmp	r3, #64	@ 0x40
 800e332:	d854      	bhi.n	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
 800e334:	2b30      	cmp	r3, #48	@ 0x30
 800e336:	d055      	beq.n	800e3e4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e338:	2b30      	cmp	r3, #48	@ 0x30
 800e33a:	d850      	bhi.n	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
 800e33c:	2b20      	cmp	r3, #32
 800e33e:	d051      	beq.n	800e3e4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e340:	2b20      	cmp	r3, #32
 800e342:	d84c      	bhi.n	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
 800e344:	2b00      	cmp	r3, #0
 800e346:	d04d      	beq.n	800e3e4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e348:	2b10      	cmp	r3, #16
 800e34a:	d04b      	beq.n	800e3e4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e34c:	e047      	b.n	800e3de <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800e35e:	f000 f8d7 	bl	800e510 <TIM_ETR_SetConfig>
      break;
 800e362:	e040      	b.n	800e3e6 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	2b05      	cmp	r3, #5
 800e36a:	d101      	bne.n	800e370 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800e36c:	2301      	movs	r3, #1
 800e36e:	e03b      	b.n	800e3e8 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	6a1b      	ldr	r3, [r3, #32]
 800e376:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	6a1a      	ldr	r2, [r3, #32]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f022 0201 	bic.w	r2, r2, #1
 800e386:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	699b      	ldr	r3, [r3, #24]
 800e38e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e396:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	691b      	ldr	r3, [r3, #16]
 800e39c:	011b      	lsls	r3, r3, #4
 800e39e:	68ba      	ldr	r2, [r7, #8]
 800e3a0:	4313      	orrs	r3, r2
 800e3a2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	68ba      	ldr	r2, [r7, #8]
 800e3aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	621a      	str	r2, [r3, #32]
      break;
 800e3b4:	e017      	b.n	800e3e6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	f000 f826 	bl	800e414 <TIM_TI1_ConfigInputStage>
      break;
 800e3c8:	e00d      	b.n	800e3e6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	f000 f84b 	bl	800e472 <TIM_TI2_ConfigInputStage>
      break;
 800e3dc:	e003      	b.n	800e3e6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800e3de:	2301      	movs	r3, #1
 800e3e0:	75fb      	strb	r3, [r7, #23]
      break;
 800e3e2:	e000      	b.n	800e3e6 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800e3e4:	bf00      	nop
  }

  return status;
 800e3e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3718      	adds	r7, #24
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	ffcfff8f 	.word	0xffcfff8f
 800e3f4:	fffefff8 	.word	0xfffefff8
 800e3f8:	00200010 	.word	0x00200010
 800e3fc:	00100070 	.word	0x00100070
 800e400:	00100060 	.word	0x00100060
 800e404:	00100050 	.word	0x00100050
 800e408:	00100040 	.word	0x00100040
 800e40c:	00100030 	.word	0x00100030
 800e410:	00100020 	.word	0x00100020

0800e414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e414:	b480      	push	{r7}
 800e416:	b087      	sub	sp, #28
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6a1b      	ldr	r3, [r3, #32]
 800e424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	6a1b      	ldr	r3, [r3, #32]
 800e42a:	f023 0201 	bic.w	r2, r3, #1
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	699b      	ldr	r3, [r3, #24]
 800e436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e43e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	011b      	lsls	r3, r3, #4
 800e444:	693a      	ldr	r2, [r7, #16]
 800e446:	4313      	orrs	r3, r2
 800e448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	f023 030a 	bic.w	r3, r3, #10
 800e450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e452:	697a      	ldr	r2, [r7, #20]
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	4313      	orrs	r3, r2
 800e458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	693a      	ldr	r2, [r7, #16]
 800e45e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	697a      	ldr	r2, [r7, #20]
 800e464:	621a      	str	r2, [r3, #32]
}
 800e466:	bf00      	nop
 800e468:	371c      	adds	r7, #28
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr

0800e472 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e472:	b480      	push	{r7}
 800e474:	b087      	sub	sp, #28
 800e476:	af00      	add	r7, sp, #0
 800e478:	60f8      	str	r0, [r7, #12]
 800e47a:	60b9      	str	r1, [r7, #8]
 800e47c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	6a1b      	ldr	r3, [r3, #32]
 800e482:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6a1b      	ldr	r3, [r3, #32]
 800e488:	f023 0210 	bic.w	r2, r3, #16
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	699b      	ldr	r3, [r3, #24]
 800e494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e49c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	031b      	lsls	r3, r3, #12
 800e4a2:	693a      	ldr	r2, [r7, #16]
 800e4a4:	4313      	orrs	r3, r2
 800e4a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e4ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	011b      	lsls	r3, r3, #4
 800e4b4:	697a      	ldr	r2, [r7, #20]
 800e4b6:	4313      	orrs	r3, r2
 800e4b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	693a      	ldr	r2, [r7, #16]
 800e4be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	697a      	ldr	r2, [r7, #20]
 800e4c4:	621a      	str	r2, [r3, #32]
}
 800e4c6:	bf00      	nop
 800e4c8:	371c      	adds	r7, #28
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr
	...

0800e4d4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b085      	sub	sp, #20
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	689b      	ldr	r3, [r3, #8]
 800e4e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e4e4:	68fa      	ldr	r2, [r7, #12]
 800e4e6:	4b09      	ldr	r3, [pc, #36]	@ (800e50c <TIM_ITRx_SetConfig+0x38>)
 800e4e8:	4013      	ands	r3, r2
 800e4ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e4ec:	683a      	ldr	r2, [r7, #0]
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	f043 0307 	orr.w	r3, r3, #7
 800e4f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	68fa      	ldr	r2, [r7, #12]
 800e4fc:	609a      	str	r2, [r3, #8]
}
 800e4fe:	bf00      	nop
 800e500:	3714      	adds	r7, #20
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop
 800e50c:	ffcfff8f 	.word	0xffcfff8f

0800e510 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e510:	b480      	push	{r7}
 800e512:	b087      	sub	sp, #28
 800e514:	af00      	add	r7, sp, #0
 800e516:	60f8      	str	r0, [r7, #12]
 800e518:	60b9      	str	r1, [r7, #8]
 800e51a:	607a      	str	r2, [r7, #4]
 800e51c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	689b      	ldr	r3, [r3, #8]
 800e522:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e52a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	021a      	lsls	r2, r3, #8
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	431a      	orrs	r2, r3
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	4313      	orrs	r3, r2
 800e538:	697a      	ldr	r2, [r7, #20]
 800e53a:	4313      	orrs	r3, r2
 800e53c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	697a      	ldr	r2, [r7, #20]
 800e542:	609a      	str	r2, [r3, #8]
}
 800e544:	bf00      	nop
 800e546:	371c      	adds	r7, #28
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr

0800e550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e550:	b480      	push	{r7}
 800e552:	b085      	sub	sp, #20
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e560:	2b01      	cmp	r3, #1
 800e562:	d101      	bne.n	800e568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e564:	2302      	movs	r3, #2
 800e566:	e06d      	b.n	800e644 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2201      	movs	r2, #1
 800e56c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2202      	movs	r2, #2
 800e574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	689b      	ldr	r3, [r3, #8]
 800e586:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4a30      	ldr	r2, [pc, #192]	@ (800e650 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d004      	beq.n	800e59c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	4a2f      	ldr	r2, [pc, #188]	@ (800e654 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e598:	4293      	cmp	r3, r2
 800e59a:	d108      	bne.n	800e5ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e5a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	4313      	orrs	r3, r2
 800e5ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e5b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	68fa      	ldr	r2, [r7, #12]
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	4a20      	ldr	r2, [pc, #128]	@ (800e650 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d022      	beq.n	800e618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5da:	d01d      	beq.n	800e618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a1d      	ldr	r2, [pc, #116]	@ (800e658 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d018      	beq.n	800e618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	4a1c      	ldr	r2, [pc, #112]	@ (800e65c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d013      	beq.n	800e618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a1a      	ldr	r2, [pc, #104]	@ (800e660 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d00e      	beq.n	800e618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4a15      	ldr	r2, [pc, #84]	@ (800e654 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d009      	beq.n	800e618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a16      	ldr	r2, [pc, #88]	@ (800e664 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d004      	beq.n	800e618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4a15      	ldr	r2, [pc, #84]	@ (800e668 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d10c      	bne.n	800e632 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e61e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	68ba      	ldr	r2, [r7, #8]
 800e626:	4313      	orrs	r3, r2
 800e628:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	68ba      	ldr	r2, [r7, #8]
 800e630:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2201      	movs	r2, #1
 800e636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2200      	movs	r2, #0
 800e63e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e642:	2300      	movs	r3, #0
}
 800e644:	4618      	mov	r0, r3
 800e646:	3714      	adds	r7, #20
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr
 800e650:	40010000 	.word	0x40010000
 800e654:	40010400 	.word	0x40010400
 800e658:	40000400 	.word	0x40000400
 800e65c:	40000800 	.word	0x40000800
 800e660:	40000c00 	.word	0x40000c00
 800e664:	40001800 	.word	0x40001800
 800e668:	40014000 	.word	0x40014000

0800e66c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e674:	bf00      	nop
 800e676:	370c      	adds	r7, #12
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr

0800e680 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e688:	bf00      	nop
 800e68a:	370c      	adds	r7, #12
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr

0800e694 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e69c:	bf00      	nop
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d101      	bne.n	800e6ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	e042      	b.n	800e740 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d106      	bne.n	800e6d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7f5 f92b 	bl	8003928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2224      	movs	r2, #36	@ 0x24
 800e6d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f022 0201 	bic.w	r2, r2, #1
 800e6e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d002      	beq.n	800e6f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f001 faca 	bl	800fc8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 fd5f 	bl	800f1bc <UART_SetConfig>
 800e6fe:	4603      	mov	r3, r0
 800e700:	2b01      	cmp	r3, #1
 800e702:	d101      	bne.n	800e708 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e704:	2301      	movs	r3, #1
 800e706:	e01b      	b.n	800e740 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	685a      	ldr	r2, [r3, #4]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	689a      	ldr	r2, [r3, #8]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e726:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f042 0201 	orr.w	r2, r2, #1
 800e736:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f001 fb49 	bl	800fdd0 <UART_CheckIdleState>
 800e73e:	4603      	mov	r3, r0
}
 800e740:	4618      	mov	r0, r3
 800e742:	3708      	adds	r7, #8
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d101      	bne.n	800e75a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800e756:	2301      	movs	r3, #1
 800e758:	e031      	b.n	800e7be <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2224      	movs	r2, #36	@ 0x24
 800e75e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	681a      	ldr	r2, [r3, #0]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f022 0201 	bic.w	r2, r2, #1
 800e770:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2200      	movs	r2, #0
 800e778:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	2200      	movs	r2, #0
 800e780:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2200      	movs	r2, #0
 800e788:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7f5 f9b2 	bl	8003af4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2200      	movs	r2, #0
 800e794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2200      	movs	r2, #0
 800e79c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e7bc:	2300      	movs	r3, #0
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3708      	adds	r7, #8
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b08a      	sub	sp, #40	@ 0x28
 800e7ca:	af02      	add	r7, sp, #8
 800e7cc:	60f8      	str	r0, [r7, #12]
 800e7ce:	60b9      	str	r1, [r7, #8]
 800e7d0:	603b      	str	r3, [r7, #0]
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7dc:	2b20      	cmp	r3, #32
 800e7de:	d17b      	bne.n	800e8d8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d002      	beq.n	800e7ec <HAL_UART_Transmit+0x26>
 800e7e6:	88fb      	ldrh	r3, [r7, #6]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d101      	bne.n	800e7f0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	e074      	b.n	800e8da <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2221      	movs	r2, #33	@ 0x21
 800e7fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e800:	f7f5 fc1a 	bl	8004038 <HAL_GetTick>
 800e804:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	88fa      	ldrh	r2, [r7, #6]
 800e80a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	88fa      	ldrh	r2, [r7, #6]
 800e812:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e81e:	d108      	bne.n	800e832 <HAL_UART_Transmit+0x6c>
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	691b      	ldr	r3, [r3, #16]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d104      	bne.n	800e832 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e828:	2300      	movs	r3, #0
 800e82a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	61bb      	str	r3, [r7, #24]
 800e830:	e003      	b.n	800e83a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e836:	2300      	movs	r3, #0
 800e838:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e83a:	e030      	b.n	800e89e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	9300      	str	r3, [sp, #0]
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	2200      	movs	r2, #0
 800e844:	2180      	movs	r1, #128	@ 0x80
 800e846:	68f8      	ldr	r0, [r7, #12]
 800e848:	f001 fb6c 	bl	800ff24 <UART_WaitOnFlagUntilTimeout>
 800e84c:	4603      	mov	r3, r0
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d005      	beq.n	800e85e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2220      	movs	r2, #32
 800e856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e85a:	2303      	movs	r3, #3
 800e85c:	e03d      	b.n	800e8da <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e85e:	69fb      	ldr	r3, [r7, #28]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d10b      	bne.n	800e87c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e864:	69bb      	ldr	r3, [r7, #24]
 800e866:	881b      	ldrh	r3, [r3, #0]
 800e868:	461a      	mov	r2, r3
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e872:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	3302      	adds	r3, #2
 800e878:	61bb      	str	r3, [r7, #24]
 800e87a:	e007      	b.n	800e88c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	781a      	ldrb	r2, [r3, #0]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	3301      	adds	r3, #1
 800e88a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e892:	b29b      	uxth	r3, r3
 800e894:	3b01      	subs	r3, #1
 800e896:	b29a      	uxth	r2, r3
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d1c8      	bne.n	800e83c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	9300      	str	r3, [sp, #0]
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	2140      	movs	r1, #64	@ 0x40
 800e8b4:	68f8      	ldr	r0, [r7, #12]
 800e8b6:	f001 fb35 	bl	800ff24 <UART_WaitOnFlagUntilTimeout>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d005      	beq.n	800e8cc <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	2220      	movs	r2, #32
 800e8c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e8c8:	2303      	movs	r3, #3
 800e8ca:	e006      	b.n	800e8da <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2220      	movs	r2, #32
 800e8d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	e000      	b.n	800e8da <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e8d8:	2302      	movs	r3, #2
  }
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3720      	adds	r7, #32
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
	...

0800e8e4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b091      	sub	sp, #68	@ 0x44
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	60b9      	str	r1, [r7, #8]
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8f8:	2b20      	cmp	r3, #32
 800e8fa:	d178      	bne.n	800e9ee <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d002      	beq.n	800e908 <HAL_UART_Transmit_IT+0x24>
 800e902:	88fb      	ldrh	r3, [r7, #6]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d101      	bne.n	800e90c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800e908:	2301      	movs	r3, #1
 800e90a:	e071      	b.n	800e9f0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	68ba      	ldr	r2, [r7, #8]
 800e910:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	88fa      	ldrh	r2, [r7, #6]
 800e916:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	88fa      	ldrh	r2, [r7, #6]
 800e91e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2200      	movs	r2, #0
 800e926:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2200      	movs	r2, #0
 800e92c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2221      	movs	r2, #33	@ 0x21
 800e934:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e93c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e940:	d12a      	bne.n	800e998 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	689b      	ldr	r3, [r3, #8]
 800e946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e94a:	d107      	bne.n	800e95c <HAL_UART_Transmit_IT+0x78>
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	691b      	ldr	r3, [r3, #16]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d103      	bne.n	800e95c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	4a29      	ldr	r2, [pc, #164]	@ (800e9fc <HAL_UART_Transmit_IT+0x118>)
 800e958:	679a      	str	r2, [r3, #120]	@ 0x78
 800e95a:	e002      	b.n	800e962 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	4a28      	ldr	r2, [pc, #160]	@ (800ea00 <HAL_UART_Transmit_IT+0x11c>)
 800e960:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	3308      	adds	r3, #8
 800e968:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e96c:	e853 3f00 	ldrex	r3, [r3]
 800e970:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e974:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e978:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	3308      	adds	r3, #8
 800e980:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e982:	637a      	str	r2, [r7, #52]	@ 0x34
 800e984:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e986:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e988:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e98a:	e841 2300 	strex	r3, r2, [r1]
 800e98e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e992:	2b00      	cmp	r3, #0
 800e994:	d1e5      	bne.n	800e962 <HAL_UART_Transmit_IT+0x7e>
 800e996:	e028      	b.n	800e9ea <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	689b      	ldr	r3, [r3, #8]
 800e99c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e9a0:	d107      	bne.n	800e9b2 <HAL_UART_Transmit_IT+0xce>
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	691b      	ldr	r3, [r3, #16]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d103      	bne.n	800e9b2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	4a15      	ldr	r2, [pc, #84]	@ (800ea04 <HAL_UART_Transmit_IT+0x120>)
 800e9ae:	679a      	str	r2, [r3, #120]	@ 0x78
 800e9b0:	e002      	b.n	800e9b8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	4a14      	ldr	r2, [pc, #80]	@ (800ea08 <HAL_UART_Transmit_IT+0x124>)
 800e9b6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	e853 3f00 	ldrex	r3, [r3]
 800e9c4:	613b      	str	r3, [r7, #16]
   return(result);
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	461a      	mov	r2, r3
 800e9d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9d6:	623b      	str	r3, [r7, #32]
 800e9d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9da:	69f9      	ldr	r1, [r7, #28]
 800e9dc:	6a3a      	ldr	r2, [r7, #32]
 800e9de:	e841 2300 	strex	r3, r2, [r1]
 800e9e2:	61bb      	str	r3, [r7, #24]
   return(result);
 800e9e4:	69bb      	ldr	r3, [r7, #24]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d1e6      	bne.n	800e9b8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	e000      	b.n	800e9f0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800e9ee:	2302      	movs	r3, #2
  }
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3744      	adds	r7, #68	@ 0x44
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr
 800e9fc:	08010597 	.word	0x08010597
 800ea00:	080104b7 	.word	0x080104b7
 800ea04:	080103f5 	.word	0x080103f5
 800ea08:	0801033d 	.word	0x0801033d

0800ea0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b0ba      	sub	sp, #232	@ 0xe8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	69db      	ldr	r3, [r3, #28]
 800ea1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	689b      	ldr	r3, [r3, #8]
 800ea2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ea32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ea36:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ea3a:	4013      	ands	r3, r2
 800ea3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ea40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d11b      	bne.n	800ea80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ea48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea4c:	f003 0320 	and.w	r3, r3, #32
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d015      	beq.n	800ea80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ea54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ea58:	f003 0320 	and.w	r3, r3, #32
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d105      	bne.n	800ea6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ea60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ea64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d009      	beq.n	800ea80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	f000 8377 	beq.w	800f164 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	4798      	blx	r3
      }
      return;
 800ea7e:	e371      	b.n	800f164 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ea80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	f000 8123 	beq.w	800ecd0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ea8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ea8e:	4b8d      	ldr	r3, [pc, #564]	@ (800ecc4 <HAL_UART_IRQHandler+0x2b8>)
 800ea90:	4013      	ands	r3, r2
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d106      	bne.n	800eaa4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ea96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ea9a:	4b8b      	ldr	r3, [pc, #556]	@ (800ecc8 <HAL_UART_IRQHandler+0x2bc>)
 800ea9c:	4013      	ands	r3, r2
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	f000 8116 	beq.w	800ecd0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eaa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eaa8:	f003 0301 	and.w	r3, r3, #1
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d011      	beq.n	800ead4 <HAL_UART_IRQHandler+0xc8>
 800eab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d00b      	beq.n	800ead4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	2201      	movs	r2, #1
 800eac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eaca:	f043 0201 	orr.w	r2, r3, #1
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ead4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ead8:	f003 0302 	and.w	r3, r3, #2
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d011      	beq.n	800eb04 <HAL_UART_IRQHandler+0xf8>
 800eae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eae4:	f003 0301 	and.w	r3, r3, #1
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d00b      	beq.n	800eb04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	2202      	movs	r2, #2
 800eaf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eafa:	f043 0204 	orr.w	r2, r3, #4
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb08:	f003 0304 	and.w	r3, r3, #4
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d011      	beq.n	800eb34 <HAL_UART_IRQHandler+0x128>
 800eb10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eb14:	f003 0301 	and.w	r3, r3, #1
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d00b      	beq.n	800eb34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	2204      	movs	r2, #4
 800eb22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb2a:	f043 0202 	orr.w	r2, r3, #2
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800eb34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb38:	f003 0308 	and.w	r3, r3, #8
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d017      	beq.n	800eb70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eb40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb44:	f003 0320 	and.w	r3, r3, #32
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d105      	bne.n	800eb58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800eb4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eb50:	4b5c      	ldr	r3, [pc, #368]	@ (800ecc4 <HAL_UART_IRQHandler+0x2b8>)
 800eb52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d00b      	beq.n	800eb70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	2208      	movs	r2, #8
 800eb5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb66:	f043 0208 	orr.w	r2, r3, #8
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800eb70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d012      	beq.n	800eba2 <HAL_UART_IRQHandler+0x196>
 800eb7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d00c      	beq.n	800eba2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800eb90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb98:	f043 0220 	orr.w	r2, r3, #32
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	f000 82dd 	beq.w	800f168 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ebae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebb2:	f003 0320 	and.w	r3, r3, #32
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d013      	beq.n	800ebe2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ebba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ebbe:	f003 0320 	and.w	r3, r3, #32
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d105      	bne.n	800ebd2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ebc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ebca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d007      	beq.n	800ebe2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d003      	beq.n	800ebe2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebe8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	689b      	ldr	r3, [r3, #8]
 800ebf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebf6:	2b40      	cmp	r3, #64	@ 0x40
 800ebf8:	d005      	beq.n	800ec06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ebfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ebfe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d054      	beq.n	800ecb0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f001 fb1c 	bl	8010244 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	689b      	ldr	r3, [r3, #8]
 800ec12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec16:	2b40      	cmp	r3, #64	@ 0x40
 800ec18:	d146      	bne.n	800eca8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	3308      	adds	r3, #8
 800ec20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ec28:	e853 3f00 	ldrex	r3, [r3]
 800ec2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ec30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ec34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	3308      	adds	r3, #8
 800ec42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ec46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ec4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ec52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ec56:	e841 2300 	strex	r3, r2, [r1]
 800ec5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ec5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d1d9      	bne.n	800ec1a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d017      	beq.n	800eca0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec76:	4a15      	ldr	r2, [pc, #84]	@ (800eccc <HAL_UART_IRQHandler+0x2c0>)
 800ec78:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7f7 fc85 	bl	8006590 <HAL_DMA_Abort_IT>
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d019      	beq.n	800ecc0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ec9a:	4610      	mov	r0, r2
 800ec9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec9e:	e00f      	b.n	800ecc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 fa81 	bl	800f1a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eca6:	e00b      	b.n	800ecc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f000 fa7d 	bl	800f1a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecae:	e007      	b.n	800ecc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 fa79 	bl	800f1a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ecbe:	e253      	b.n	800f168 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecc0:	bf00      	nop
    return;
 800ecc2:	e251      	b.n	800f168 <HAL_UART_IRQHandler+0x75c>
 800ecc4:	10000001 	.word	0x10000001
 800ecc8:	04000120 	.word	0x04000120
 800eccc:	08010311 	.word	0x08010311

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	f040 81e7 	bne.w	800f0a8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ecda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ecde:	f003 0310 	and.w	r3, r3, #16
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	f000 81e0 	beq.w	800f0a8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ece8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ecec:	f003 0310 	and.w	r3, r3, #16
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	f000 81d9 	beq.w	800f0a8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	2210      	movs	r2, #16
 800ecfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed08:	2b40      	cmp	r3, #64	@ 0x40
 800ed0a:	f040 8151 	bne.w	800efb0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	4a96      	ldr	r2, [pc, #600]	@ (800ef70 <HAL_UART_IRQHandler+0x564>)
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d068      	beq.n	800edee <HAL_UART_IRQHandler+0x3e2>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4a93      	ldr	r2, [pc, #588]	@ (800ef74 <HAL_UART_IRQHandler+0x568>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d061      	beq.n	800edee <HAL_UART_IRQHandler+0x3e2>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	4a91      	ldr	r2, [pc, #580]	@ (800ef78 <HAL_UART_IRQHandler+0x56c>)
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d05a      	beq.n	800edee <HAL_UART_IRQHandler+0x3e2>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a8e      	ldr	r2, [pc, #568]	@ (800ef7c <HAL_UART_IRQHandler+0x570>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d053      	beq.n	800edee <HAL_UART_IRQHandler+0x3e2>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	4a8c      	ldr	r2, [pc, #560]	@ (800ef80 <HAL_UART_IRQHandler+0x574>)
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d04c      	beq.n	800edee <HAL_UART_IRQHandler+0x3e2>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4a89      	ldr	r2, [pc, #548]	@ (800ef84 <HAL_UART_IRQHandler+0x578>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d045      	beq.n	800edee <HAL_UART_IRQHandler+0x3e2>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	4a87      	ldr	r2, [pc, #540]	@ (800ef88 <HAL_UART_IRQHandler+0x57c>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d03e      	beq.n	800edee <HAL_UART_IRQHandler+0x3e2>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	4a84      	ldr	r2, [pc, #528]	@ (800ef8c <HAL_UART_IRQHandler+0x580>)
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d037      	beq.n	800edee <HAL_UART_IRQHandler+0x3e2>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4a82      	ldr	r2, [pc, #520]	@ (800ef90 <HAL_UART_IRQHandler+0x584>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d030      	beq.n	800edee <HAL_UART_IRQHandler+0x3e2>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4a7f      	ldr	r2, [pc, #508]	@ (800ef94 <HAL_UART_IRQHandler+0x588>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d029      	beq.n	800edee <HAL_UART_IRQHandler+0x3e2>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	4a7d      	ldr	r2, [pc, #500]	@ (800ef98 <HAL_UART_IRQHandler+0x58c>)
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d022      	beq.n	800edee <HAL_UART_IRQHandler+0x3e2>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a7a      	ldr	r2, [pc, #488]	@ (800ef9c <HAL_UART_IRQHandler+0x590>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d01b      	beq.n	800edee <HAL_UART_IRQHandler+0x3e2>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4a78      	ldr	r2, [pc, #480]	@ (800efa0 <HAL_UART_IRQHandler+0x594>)
 800edc0:	4293      	cmp	r3, r2
 800edc2:	d014      	beq.n	800edee <HAL_UART_IRQHandler+0x3e2>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4a75      	ldr	r2, [pc, #468]	@ (800efa4 <HAL_UART_IRQHandler+0x598>)
 800edce:	4293      	cmp	r3, r2
 800edd0:	d00d      	beq.n	800edee <HAL_UART_IRQHandler+0x3e2>
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a73      	ldr	r2, [pc, #460]	@ (800efa8 <HAL_UART_IRQHandler+0x59c>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d006      	beq.n	800edee <HAL_UART_IRQHandler+0x3e2>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4a70      	ldr	r2, [pc, #448]	@ (800efac <HAL_UART_IRQHandler+0x5a0>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d106      	bne.n	800edfc <HAL_UART_IRQHandler+0x3f0>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	b29b      	uxth	r3, r3
 800edfa:	e005      	b.n	800ee08 <HAL_UART_IRQHandler+0x3fc>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ee0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	f000 81ab 	beq.w	800f16c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ee1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ee20:	429a      	cmp	r2, r3
 800ee22:	f080 81a3 	bcs.w	800f16c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ee2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee36:	69db      	ldr	r3, [r3, #28]
 800ee38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee3c:	f000 8087 	beq.w	800ef4e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ee4c:	e853 3f00 	ldrex	r3, [r3]
 800ee50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ee54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ee58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ee5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	461a      	mov	r2, r3
 800ee66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ee6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ee6e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ee76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ee7a:	e841 2300 	strex	r3, r2, [r1]
 800ee7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ee82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d1da      	bne.n	800ee40 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	3308      	adds	r3, #8
 800ee90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ee94:	e853 3f00 	ldrex	r3, [r3]
 800ee98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ee9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ee9c:	f023 0301 	bic.w	r3, r3, #1
 800eea0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	3308      	adds	r3, #8
 800eeaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800eeae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800eeb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeb4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800eeb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800eeba:	e841 2300 	strex	r3, r2, [r1]
 800eebe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800eec0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d1e1      	bne.n	800ee8a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	3308      	adds	r3, #8
 800eecc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eece:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eed0:	e853 3f00 	ldrex	r3, [r3]
 800eed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800eed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eed8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eedc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	3308      	adds	r3, #8
 800eee6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800eeea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800eeec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800eef0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800eef2:	e841 2300 	strex	r3, r2, [r1]
 800eef6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800eef8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d1e3      	bne.n	800eec6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2220      	movs	r2, #32
 800ef02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef14:	e853 3f00 	ldrex	r3, [r3]
 800ef18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ef1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef1c:	f023 0310 	bic.w	r3, r3, #16
 800ef20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	461a      	mov	r2, r3
 800ef2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ef30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ef34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ef36:	e841 2300 	strex	r3, r2, [r1]
 800ef3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ef3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d1e4      	bne.n	800ef0c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7f7 f803 	bl	8005f54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2202      	movs	r2, #2
 800ef52:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	1ad3      	subs	r3, r2, r3
 800ef64:	b29b      	uxth	r3, r3
 800ef66:	4619      	mov	r1, r3
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f7f2 fbf1 	bl	8001750 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ef6e:	e0fd      	b.n	800f16c <HAL_UART_IRQHandler+0x760>
 800ef70:	40020010 	.word	0x40020010
 800ef74:	40020028 	.word	0x40020028
 800ef78:	40020040 	.word	0x40020040
 800ef7c:	40020058 	.word	0x40020058
 800ef80:	40020070 	.word	0x40020070
 800ef84:	40020088 	.word	0x40020088
 800ef88:	400200a0 	.word	0x400200a0
 800ef8c:	400200b8 	.word	0x400200b8
 800ef90:	40020410 	.word	0x40020410
 800ef94:	40020428 	.word	0x40020428
 800ef98:	40020440 	.word	0x40020440
 800ef9c:	40020458 	.word	0x40020458
 800efa0:	40020470 	.word	0x40020470
 800efa4:	40020488 	.word	0x40020488
 800efa8:	400204a0 	.word	0x400204a0
 800efac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800efbc:	b29b      	uxth	r3, r3
 800efbe:	1ad3      	subs	r3, r2, r3
 800efc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800efca:	b29b      	uxth	r3, r3
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f000 80cf 	beq.w	800f170 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800efd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f000 80ca 	beq.w	800f170 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efe4:	e853 3f00 	ldrex	r3, [r3]
 800efe8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800efea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eff0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	461a      	mov	r2, r3
 800effa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800effe:	647b      	str	r3, [r7, #68]	@ 0x44
 800f000:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f002:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f004:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f006:	e841 2300 	strex	r3, r2, [r1]
 800f00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f00c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d1e4      	bne.n	800efdc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	3308      	adds	r3, #8
 800f018:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f01c:	e853 3f00 	ldrex	r3, [r3]
 800f020:	623b      	str	r3, [r7, #32]
   return(result);
 800f022:	6a3a      	ldr	r2, [r7, #32]
 800f024:	4b55      	ldr	r3, [pc, #340]	@ (800f17c <HAL_UART_IRQHandler+0x770>)
 800f026:	4013      	ands	r3, r2
 800f028:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	3308      	adds	r3, #8
 800f032:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f036:	633a      	str	r2, [r7, #48]	@ 0x30
 800f038:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f03a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f03c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f03e:	e841 2300 	strex	r3, r2, [r1]
 800f042:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1e3      	bne.n	800f012 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2220      	movs	r2, #32
 800f04e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2200      	movs	r2, #0
 800f056:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	e853 3f00 	ldrex	r3, [r3]
 800f06a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f023 0310 	bic.w	r3, r3, #16
 800f072:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	461a      	mov	r2, r3
 800f07c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f080:	61fb      	str	r3, [r7, #28]
 800f082:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f084:	69b9      	ldr	r1, [r7, #24]
 800f086:	69fa      	ldr	r2, [r7, #28]
 800f088:	e841 2300 	strex	r3, r2, [r1]
 800f08c:	617b      	str	r3, [r7, #20]
   return(result);
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d1e4      	bne.n	800f05e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2202      	movs	r2, #2
 800f098:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f09a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f09e:	4619      	mov	r1, r3
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f7f2 fb55 	bl	8001750 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f0a6:	e063      	b.n	800f170 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f0ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d00e      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x6c6>
 800f0b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f0b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d008      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f0c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f002 f820 	bl	8011110 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f0d0:	e051      	b.n	800f176 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f0d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f0d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d014      	beq.n	800f108 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f0de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f0e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d105      	bne.n	800f0f6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f0ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f0ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d008      	beq.n	800f108 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d03a      	beq.n	800f174 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	4798      	blx	r3
    }
    return;
 800f106:	e035      	b.n	800f174 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f10c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f110:	2b00      	cmp	r3, #0
 800f112:	d009      	beq.n	800f128 <HAL_UART_IRQHandler+0x71c>
 800f114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d003      	beq.n	800f128 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f001 faad 	bl	8010680 <UART_EndTransmit_IT>
    return;
 800f126:	e026      	b.n	800f176 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f12c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f130:	2b00      	cmp	r3, #0
 800f132:	d009      	beq.n	800f148 <HAL_UART_IRQHandler+0x73c>
 800f134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f138:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d003      	beq.n	800f148 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f001 fff9 	bl	8011138 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f146:	e016      	b.n	800f176 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f14c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f150:	2b00      	cmp	r3, #0
 800f152:	d010      	beq.n	800f176 <HAL_UART_IRQHandler+0x76a>
 800f154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f158:	2b00      	cmp	r3, #0
 800f15a:	da0c      	bge.n	800f176 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f001 ffe1 	bl	8011124 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f162:	e008      	b.n	800f176 <HAL_UART_IRQHandler+0x76a>
      return;
 800f164:	bf00      	nop
 800f166:	e006      	b.n	800f176 <HAL_UART_IRQHandler+0x76a>
    return;
 800f168:	bf00      	nop
 800f16a:	e004      	b.n	800f176 <HAL_UART_IRQHandler+0x76a>
      return;
 800f16c:	bf00      	nop
 800f16e:	e002      	b.n	800f176 <HAL_UART_IRQHandler+0x76a>
      return;
 800f170:	bf00      	nop
 800f172:	e000      	b.n	800f176 <HAL_UART_IRQHandler+0x76a>
    return;
 800f174:	bf00      	nop
  }
}
 800f176:	37e8      	adds	r7, #232	@ 0xe8
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	effffffe 	.word	0xeffffffe

0800f180 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f180:	b480      	push	{r7}
 800f182:	b083      	sub	sp, #12
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f188:	bf00      	nop
 800f18a:	370c      	adds	r7, #12
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr

0800f194 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f19c:	bf00      	nop
 800f19e:	370c      	adds	r7, #12
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr

0800f1a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f1b0:	bf00      	nop
 800f1b2:	370c      	adds	r7, #12
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr

0800f1bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f1bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f1c0:	b092      	sub	sp, #72	@ 0x48
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	689a      	ldr	r2, [r3, #8]
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	691b      	ldr	r3, [r3, #16]
 800f1d4:	431a      	orrs	r2, r3
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	695b      	ldr	r3, [r3, #20]
 800f1da:	431a      	orrs	r2, r3
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	69db      	ldr	r3, [r3, #28]
 800f1e0:	4313      	orrs	r3, r2
 800f1e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	4bbe      	ldr	r3, [pc, #760]	@ (800f4e4 <UART_SetConfig+0x328>)
 800f1ec:	4013      	ands	r3, r2
 800f1ee:	697a      	ldr	r2, [r7, #20]
 800f1f0:	6812      	ldr	r2, [r2, #0]
 800f1f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f1f4:	430b      	orrs	r3, r1
 800f1f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	68da      	ldr	r2, [r3, #12]
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	430a      	orrs	r2, r1
 800f20c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	699b      	ldr	r3, [r3, #24]
 800f212:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	4ab3      	ldr	r2, [pc, #716]	@ (800f4e8 <UART_SetConfig+0x32c>)
 800f21a:	4293      	cmp	r3, r2
 800f21c:	d004      	beq.n	800f228 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	6a1b      	ldr	r3, [r3, #32]
 800f222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f224:	4313      	orrs	r3, r2
 800f226:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	689a      	ldr	r2, [r3, #8]
 800f22e:	4baf      	ldr	r3, [pc, #700]	@ (800f4ec <UART_SetConfig+0x330>)
 800f230:	4013      	ands	r3, r2
 800f232:	697a      	ldr	r2, [r7, #20]
 800f234:	6812      	ldr	r2, [r2, #0]
 800f236:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f238:	430b      	orrs	r3, r1
 800f23a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f242:	f023 010f 	bic.w	r1, r3, #15
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	430a      	orrs	r2, r1
 800f250:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	4aa6      	ldr	r2, [pc, #664]	@ (800f4f0 <UART_SetConfig+0x334>)
 800f258:	4293      	cmp	r3, r2
 800f25a:	d177      	bne.n	800f34c <UART_SetConfig+0x190>
 800f25c:	4ba5      	ldr	r3, [pc, #660]	@ (800f4f4 <UART_SetConfig+0x338>)
 800f25e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f260:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f264:	2b28      	cmp	r3, #40	@ 0x28
 800f266:	d86d      	bhi.n	800f344 <UART_SetConfig+0x188>
 800f268:	a201      	add	r2, pc, #4	@ (adr r2, 800f270 <UART_SetConfig+0xb4>)
 800f26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f26e:	bf00      	nop
 800f270:	0800f315 	.word	0x0800f315
 800f274:	0800f345 	.word	0x0800f345
 800f278:	0800f345 	.word	0x0800f345
 800f27c:	0800f345 	.word	0x0800f345
 800f280:	0800f345 	.word	0x0800f345
 800f284:	0800f345 	.word	0x0800f345
 800f288:	0800f345 	.word	0x0800f345
 800f28c:	0800f345 	.word	0x0800f345
 800f290:	0800f31d 	.word	0x0800f31d
 800f294:	0800f345 	.word	0x0800f345
 800f298:	0800f345 	.word	0x0800f345
 800f29c:	0800f345 	.word	0x0800f345
 800f2a0:	0800f345 	.word	0x0800f345
 800f2a4:	0800f345 	.word	0x0800f345
 800f2a8:	0800f345 	.word	0x0800f345
 800f2ac:	0800f345 	.word	0x0800f345
 800f2b0:	0800f325 	.word	0x0800f325
 800f2b4:	0800f345 	.word	0x0800f345
 800f2b8:	0800f345 	.word	0x0800f345
 800f2bc:	0800f345 	.word	0x0800f345
 800f2c0:	0800f345 	.word	0x0800f345
 800f2c4:	0800f345 	.word	0x0800f345
 800f2c8:	0800f345 	.word	0x0800f345
 800f2cc:	0800f345 	.word	0x0800f345
 800f2d0:	0800f32d 	.word	0x0800f32d
 800f2d4:	0800f345 	.word	0x0800f345
 800f2d8:	0800f345 	.word	0x0800f345
 800f2dc:	0800f345 	.word	0x0800f345
 800f2e0:	0800f345 	.word	0x0800f345
 800f2e4:	0800f345 	.word	0x0800f345
 800f2e8:	0800f345 	.word	0x0800f345
 800f2ec:	0800f345 	.word	0x0800f345
 800f2f0:	0800f335 	.word	0x0800f335
 800f2f4:	0800f345 	.word	0x0800f345
 800f2f8:	0800f345 	.word	0x0800f345
 800f2fc:	0800f345 	.word	0x0800f345
 800f300:	0800f345 	.word	0x0800f345
 800f304:	0800f345 	.word	0x0800f345
 800f308:	0800f345 	.word	0x0800f345
 800f30c:	0800f345 	.word	0x0800f345
 800f310:	0800f33d 	.word	0x0800f33d
 800f314:	2301      	movs	r3, #1
 800f316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f31a:	e222      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f31c:	2304      	movs	r3, #4
 800f31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f322:	e21e      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f324:	2308      	movs	r3, #8
 800f326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f32a:	e21a      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f32c:	2310      	movs	r3, #16
 800f32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f332:	e216      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f334:	2320      	movs	r3, #32
 800f336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f33a:	e212      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f33c:	2340      	movs	r3, #64	@ 0x40
 800f33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f342:	e20e      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f344:	2380      	movs	r3, #128	@ 0x80
 800f346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f34a:	e20a      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	4a69      	ldr	r2, [pc, #420]	@ (800f4f8 <UART_SetConfig+0x33c>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d130      	bne.n	800f3b8 <UART_SetConfig+0x1fc>
 800f356:	4b67      	ldr	r3, [pc, #412]	@ (800f4f4 <UART_SetConfig+0x338>)
 800f358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f35a:	f003 0307 	and.w	r3, r3, #7
 800f35e:	2b05      	cmp	r3, #5
 800f360:	d826      	bhi.n	800f3b0 <UART_SetConfig+0x1f4>
 800f362:	a201      	add	r2, pc, #4	@ (adr r2, 800f368 <UART_SetConfig+0x1ac>)
 800f364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f368:	0800f381 	.word	0x0800f381
 800f36c:	0800f389 	.word	0x0800f389
 800f370:	0800f391 	.word	0x0800f391
 800f374:	0800f399 	.word	0x0800f399
 800f378:	0800f3a1 	.word	0x0800f3a1
 800f37c:	0800f3a9 	.word	0x0800f3a9
 800f380:	2300      	movs	r3, #0
 800f382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f386:	e1ec      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f388:	2304      	movs	r3, #4
 800f38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f38e:	e1e8      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f390:	2308      	movs	r3, #8
 800f392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f396:	e1e4      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f398:	2310      	movs	r3, #16
 800f39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f39e:	e1e0      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f3a0:	2320      	movs	r3, #32
 800f3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3a6:	e1dc      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f3a8:	2340      	movs	r3, #64	@ 0x40
 800f3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ae:	e1d8      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f3b0:	2380      	movs	r3, #128	@ 0x80
 800f3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3b6:	e1d4      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	4a4f      	ldr	r2, [pc, #316]	@ (800f4fc <UART_SetConfig+0x340>)
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	d130      	bne.n	800f424 <UART_SetConfig+0x268>
 800f3c2:	4b4c      	ldr	r3, [pc, #304]	@ (800f4f4 <UART_SetConfig+0x338>)
 800f3c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3c6:	f003 0307 	and.w	r3, r3, #7
 800f3ca:	2b05      	cmp	r3, #5
 800f3cc:	d826      	bhi.n	800f41c <UART_SetConfig+0x260>
 800f3ce:	a201      	add	r2, pc, #4	@ (adr r2, 800f3d4 <UART_SetConfig+0x218>)
 800f3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3d4:	0800f3ed 	.word	0x0800f3ed
 800f3d8:	0800f3f5 	.word	0x0800f3f5
 800f3dc:	0800f3fd 	.word	0x0800f3fd
 800f3e0:	0800f405 	.word	0x0800f405
 800f3e4:	0800f40d 	.word	0x0800f40d
 800f3e8:	0800f415 	.word	0x0800f415
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3f2:	e1b6      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f3f4:	2304      	movs	r3, #4
 800f3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3fa:	e1b2      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f3fc:	2308      	movs	r3, #8
 800f3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f402:	e1ae      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f404:	2310      	movs	r3, #16
 800f406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f40a:	e1aa      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f40c:	2320      	movs	r3, #32
 800f40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f412:	e1a6      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f414:	2340      	movs	r3, #64	@ 0x40
 800f416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f41a:	e1a2      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f41c:	2380      	movs	r3, #128	@ 0x80
 800f41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f422:	e19e      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4a35      	ldr	r2, [pc, #212]	@ (800f500 <UART_SetConfig+0x344>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d130      	bne.n	800f490 <UART_SetConfig+0x2d4>
 800f42e:	4b31      	ldr	r3, [pc, #196]	@ (800f4f4 <UART_SetConfig+0x338>)
 800f430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f432:	f003 0307 	and.w	r3, r3, #7
 800f436:	2b05      	cmp	r3, #5
 800f438:	d826      	bhi.n	800f488 <UART_SetConfig+0x2cc>
 800f43a:	a201      	add	r2, pc, #4	@ (adr r2, 800f440 <UART_SetConfig+0x284>)
 800f43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f440:	0800f459 	.word	0x0800f459
 800f444:	0800f461 	.word	0x0800f461
 800f448:	0800f469 	.word	0x0800f469
 800f44c:	0800f471 	.word	0x0800f471
 800f450:	0800f479 	.word	0x0800f479
 800f454:	0800f481 	.word	0x0800f481
 800f458:	2300      	movs	r3, #0
 800f45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f45e:	e180      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f460:	2304      	movs	r3, #4
 800f462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f466:	e17c      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f468:	2308      	movs	r3, #8
 800f46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f46e:	e178      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f470:	2310      	movs	r3, #16
 800f472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f476:	e174      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f478:	2320      	movs	r3, #32
 800f47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f47e:	e170      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f480:	2340      	movs	r3, #64	@ 0x40
 800f482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f486:	e16c      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f488:	2380      	movs	r3, #128	@ 0x80
 800f48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f48e:	e168      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4a1b      	ldr	r2, [pc, #108]	@ (800f504 <UART_SetConfig+0x348>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d142      	bne.n	800f520 <UART_SetConfig+0x364>
 800f49a:	4b16      	ldr	r3, [pc, #88]	@ (800f4f4 <UART_SetConfig+0x338>)
 800f49c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f49e:	f003 0307 	and.w	r3, r3, #7
 800f4a2:	2b05      	cmp	r3, #5
 800f4a4:	d838      	bhi.n	800f518 <UART_SetConfig+0x35c>
 800f4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800f4ac <UART_SetConfig+0x2f0>)
 800f4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ac:	0800f4c5 	.word	0x0800f4c5
 800f4b0:	0800f4cd 	.word	0x0800f4cd
 800f4b4:	0800f4d5 	.word	0x0800f4d5
 800f4b8:	0800f4dd 	.word	0x0800f4dd
 800f4bc:	0800f509 	.word	0x0800f509
 800f4c0:	0800f511 	.word	0x0800f511
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ca:	e14a      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f4cc:	2304      	movs	r3, #4
 800f4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4d2:	e146      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f4d4:	2308      	movs	r3, #8
 800f4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4da:	e142      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f4dc:	2310      	movs	r3, #16
 800f4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4e2:	e13e      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f4e4:	cfff69f3 	.word	0xcfff69f3
 800f4e8:	58000c00 	.word	0x58000c00
 800f4ec:	11fff4ff 	.word	0x11fff4ff
 800f4f0:	40011000 	.word	0x40011000
 800f4f4:	58024400 	.word	0x58024400
 800f4f8:	40004400 	.word	0x40004400
 800f4fc:	40004800 	.word	0x40004800
 800f500:	40004c00 	.word	0x40004c00
 800f504:	40005000 	.word	0x40005000
 800f508:	2320      	movs	r3, #32
 800f50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f50e:	e128      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f510:	2340      	movs	r3, #64	@ 0x40
 800f512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f516:	e124      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f518:	2380      	movs	r3, #128	@ 0x80
 800f51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f51e:	e120      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	4acb      	ldr	r2, [pc, #812]	@ (800f854 <UART_SetConfig+0x698>)
 800f526:	4293      	cmp	r3, r2
 800f528:	d176      	bne.n	800f618 <UART_SetConfig+0x45c>
 800f52a:	4bcb      	ldr	r3, [pc, #812]	@ (800f858 <UART_SetConfig+0x69c>)
 800f52c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f52e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f532:	2b28      	cmp	r3, #40	@ 0x28
 800f534:	d86c      	bhi.n	800f610 <UART_SetConfig+0x454>
 800f536:	a201      	add	r2, pc, #4	@ (adr r2, 800f53c <UART_SetConfig+0x380>)
 800f538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f53c:	0800f5e1 	.word	0x0800f5e1
 800f540:	0800f611 	.word	0x0800f611
 800f544:	0800f611 	.word	0x0800f611
 800f548:	0800f611 	.word	0x0800f611
 800f54c:	0800f611 	.word	0x0800f611
 800f550:	0800f611 	.word	0x0800f611
 800f554:	0800f611 	.word	0x0800f611
 800f558:	0800f611 	.word	0x0800f611
 800f55c:	0800f5e9 	.word	0x0800f5e9
 800f560:	0800f611 	.word	0x0800f611
 800f564:	0800f611 	.word	0x0800f611
 800f568:	0800f611 	.word	0x0800f611
 800f56c:	0800f611 	.word	0x0800f611
 800f570:	0800f611 	.word	0x0800f611
 800f574:	0800f611 	.word	0x0800f611
 800f578:	0800f611 	.word	0x0800f611
 800f57c:	0800f5f1 	.word	0x0800f5f1
 800f580:	0800f611 	.word	0x0800f611
 800f584:	0800f611 	.word	0x0800f611
 800f588:	0800f611 	.word	0x0800f611
 800f58c:	0800f611 	.word	0x0800f611
 800f590:	0800f611 	.word	0x0800f611
 800f594:	0800f611 	.word	0x0800f611
 800f598:	0800f611 	.word	0x0800f611
 800f59c:	0800f5f9 	.word	0x0800f5f9
 800f5a0:	0800f611 	.word	0x0800f611
 800f5a4:	0800f611 	.word	0x0800f611
 800f5a8:	0800f611 	.word	0x0800f611
 800f5ac:	0800f611 	.word	0x0800f611
 800f5b0:	0800f611 	.word	0x0800f611
 800f5b4:	0800f611 	.word	0x0800f611
 800f5b8:	0800f611 	.word	0x0800f611
 800f5bc:	0800f601 	.word	0x0800f601
 800f5c0:	0800f611 	.word	0x0800f611
 800f5c4:	0800f611 	.word	0x0800f611
 800f5c8:	0800f611 	.word	0x0800f611
 800f5cc:	0800f611 	.word	0x0800f611
 800f5d0:	0800f611 	.word	0x0800f611
 800f5d4:	0800f611 	.word	0x0800f611
 800f5d8:	0800f611 	.word	0x0800f611
 800f5dc:	0800f609 	.word	0x0800f609
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5e6:	e0bc      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f5e8:	2304      	movs	r3, #4
 800f5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ee:	e0b8      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f5f0:	2308      	movs	r3, #8
 800f5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5f6:	e0b4      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f5f8:	2310      	movs	r3, #16
 800f5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5fe:	e0b0      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f600:	2320      	movs	r3, #32
 800f602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f606:	e0ac      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f608:	2340      	movs	r3, #64	@ 0x40
 800f60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f60e:	e0a8      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f610:	2380      	movs	r3, #128	@ 0x80
 800f612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f616:	e0a4      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	4a8f      	ldr	r2, [pc, #572]	@ (800f85c <UART_SetConfig+0x6a0>)
 800f61e:	4293      	cmp	r3, r2
 800f620:	d130      	bne.n	800f684 <UART_SetConfig+0x4c8>
 800f622:	4b8d      	ldr	r3, [pc, #564]	@ (800f858 <UART_SetConfig+0x69c>)
 800f624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f626:	f003 0307 	and.w	r3, r3, #7
 800f62a:	2b05      	cmp	r3, #5
 800f62c:	d826      	bhi.n	800f67c <UART_SetConfig+0x4c0>
 800f62e:	a201      	add	r2, pc, #4	@ (adr r2, 800f634 <UART_SetConfig+0x478>)
 800f630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f634:	0800f64d 	.word	0x0800f64d
 800f638:	0800f655 	.word	0x0800f655
 800f63c:	0800f65d 	.word	0x0800f65d
 800f640:	0800f665 	.word	0x0800f665
 800f644:	0800f66d 	.word	0x0800f66d
 800f648:	0800f675 	.word	0x0800f675
 800f64c:	2300      	movs	r3, #0
 800f64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f652:	e086      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f654:	2304      	movs	r3, #4
 800f656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f65a:	e082      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f65c:	2308      	movs	r3, #8
 800f65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f662:	e07e      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f664:	2310      	movs	r3, #16
 800f666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f66a:	e07a      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f66c:	2320      	movs	r3, #32
 800f66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f672:	e076      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f674:	2340      	movs	r3, #64	@ 0x40
 800f676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f67a:	e072      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f67c:	2380      	movs	r3, #128	@ 0x80
 800f67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f682:	e06e      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	4a75      	ldr	r2, [pc, #468]	@ (800f860 <UART_SetConfig+0x6a4>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d130      	bne.n	800f6f0 <UART_SetConfig+0x534>
 800f68e:	4b72      	ldr	r3, [pc, #456]	@ (800f858 <UART_SetConfig+0x69c>)
 800f690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f692:	f003 0307 	and.w	r3, r3, #7
 800f696:	2b05      	cmp	r3, #5
 800f698:	d826      	bhi.n	800f6e8 <UART_SetConfig+0x52c>
 800f69a:	a201      	add	r2, pc, #4	@ (adr r2, 800f6a0 <UART_SetConfig+0x4e4>)
 800f69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6a0:	0800f6b9 	.word	0x0800f6b9
 800f6a4:	0800f6c1 	.word	0x0800f6c1
 800f6a8:	0800f6c9 	.word	0x0800f6c9
 800f6ac:	0800f6d1 	.word	0x0800f6d1
 800f6b0:	0800f6d9 	.word	0x0800f6d9
 800f6b4:	0800f6e1 	.word	0x0800f6e1
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6be:	e050      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f6c0:	2304      	movs	r3, #4
 800f6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6c6:	e04c      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f6c8:	2308      	movs	r3, #8
 800f6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ce:	e048      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f6d0:	2310      	movs	r3, #16
 800f6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6d6:	e044      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f6d8:	2320      	movs	r3, #32
 800f6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6de:	e040      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f6e0:	2340      	movs	r3, #64	@ 0x40
 800f6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6e6:	e03c      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f6e8:	2380      	movs	r3, #128	@ 0x80
 800f6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ee:	e038      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a5b      	ldr	r2, [pc, #364]	@ (800f864 <UART_SetConfig+0x6a8>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d130      	bne.n	800f75c <UART_SetConfig+0x5a0>
 800f6fa:	4b57      	ldr	r3, [pc, #348]	@ (800f858 <UART_SetConfig+0x69c>)
 800f6fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6fe:	f003 0307 	and.w	r3, r3, #7
 800f702:	2b05      	cmp	r3, #5
 800f704:	d826      	bhi.n	800f754 <UART_SetConfig+0x598>
 800f706:	a201      	add	r2, pc, #4	@ (adr r2, 800f70c <UART_SetConfig+0x550>)
 800f708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f70c:	0800f725 	.word	0x0800f725
 800f710:	0800f72d 	.word	0x0800f72d
 800f714:	0800f735 	.word	0x0800f735
 800f718:	0800f73d 	.word	0x0800f73d
 800f71c:	0800f745 	.word	0x0800f745
 800f720:	0800f74d 	.word	0x0800f74d
 800f724:	2302      	movs	r3, #2
 800f726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f72a:	e01a      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f72c:	2304      	movs	r3, #4
 800f72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f732:	e016      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f734:	2308      	movs	r3, #8
 800f736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f73a:	e012      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f73c:	2310      	movs	r3, #16
 800f73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f742:	e00e      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f744:	2320      	movs	r3, #32
 800f746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f74a:	e00a      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f74c:	2340      	movs	r3, #64	@ 0x40
 800f74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f752:	e006      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f754:	2380      	movs	r3, #128	@ 0x80
 800f756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f75a:	e002      	b.n	800f762 <UART_SetConfig+0x5a6>
 800f75c:	2380      	movs	r3, #128	@ 0x80
 800f75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	4a3f      	ldr	r2, [pc, #252]	@ (800f864 <UART_SetConfig+0x6a8>)
 800f768:	4293      	cmp	r3, r2
 800f76a:	f040 80f8 	bne.w	800f95e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f76e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f772:	2b20      	cmp	r3, #32
 800f774:	dc46      	bgt.n	800f804 <UART_SetConfig+0x648>
 800f776:	2b02      	cmp	r3, #2
 800f778:	f2c0 8082 	blt.w	800f880 <UART_SetConfig+0x6c4>
 800f77c:	3b02      	subs	r3, #2
 800f77e:	2b1e      	cmp	r3, #30
 800f780:	d87e      	bhi.n	800f880 <UART_SetConfig+0x6c4>
 800f782:	a201      	add	r2, pc, #4	@ (adr r2, 800f788 <UART_SetConfig+0x5cc>)
 800f784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f788:	0800f80b 	.word	0x0800f80b
 800f78c:	0800f881 	.word	0x0800f881
 800f790:	0800f813 	.word	0x0800f813
 800f794:	0800f881 	.word	0x0800f881
 800f798:	0800f881 	.word	0x0800f881
 800f79c:	0800f881 	.word	0x0800f881
 800f7a0:	0800f823 	.word	0x0800f823
 800f7a4:	0800f881 	.word	0x0800f881
 800f7a8:	0800f881 	.word	0x0800f881
 800f7ac:	0800f881 	.word	0x0800f881
 800f7b0:	0800f881 	.word	0x0800f881
 800f7b4:	0800f881 	.word	0x0800f881
 800f7b8:	0800f881 	.word	0x0800f881
 800f7bc:	0800f881 	.word	0x0800f881
 800f7c0:	0800f833 	.word	0x0800f833
 800f7c4:	0800f881 	.word	0x0800f881
 800f7c8:	0800f881 	.word	0x0800f881
 800f7cc:	0800f881 	.word	0x0800f881
 800f7d0:	0800f881 	.word	0x0800f881
 800f7d4:	0800f881 	.word	0x0800f881
 800f7d8:	0800f881 	.word	0x0800f881
 800f7dc:	0800f881 	.word	0x0800f881
 800f7e0:	0800f881 	.word	0x0800f881
 800f7e4:	0800f881 	.word	0x0800f881
 800f7e8:	0800f881 	.word	0x0800f881
 800f7ec:	0800f881 	.word	0x0800f881
 800f7f0:	0800f881 	.word	0x0800f881
 800f7f4:	0800f881 	.word	0x0800f881
 800f7f8:	0800f881 	.word	0x0800f881
 800f7fc:	0800f881 	.word	0x0800f881
 800f800:	0800f873 	.word	0x0800f873
 800f804:	2b40      	cmp	r3, #64	@ 0x40
 800f806:	d037      	beq.n	800f878 <UART_SetConfig+0x6bc>
 800f808:	e03a      	b.n	800f880 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f80a:	f7fd fb55 	bl	800ceb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800f80e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f810:	e03c      	b.n	800f88c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f816:	4618      	mov	r0, r3
 800f818:	f7fd fb64 	bl	800cee4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f820:	e034      	b.n	800f88c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f822:	f107 0318 	add.w	r3, r7, #24
 800f826:	4618      	mov	r0, r3
 800f828:	f7fd fcb0 	bl	800d18c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f82c:	69fb      	ldr	r3, [r7, #28]
 800f82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f830:	e02c      	b.n	800f88c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f832:	4b09      	ldr	r3, [pc, #36]	@ (800f858 <UART_SetConfig+0x69c>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f003 0320 	and.w	r3, r3, #32
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d016      	beq.n	800f86c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f83e:	4b06      	ldr	r3, [pc, #24]	@ (800f858 <UART_SetConfig+0x69c>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	08db      	lsrs	r3, r3, #3
 800f844:	f003 0303 	and.w	r3, r3, #3
 800f848:	4a07      	ldr	r2, [pc, #28]	@ (800f868 <UART_SetConfig+0x6ac>)
 800f84a:	fa22 f303 	lsr.w	r3, r2, r3
 800f84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f850:	e01c      	b.n	800f88c <UART_SetConfig+0x6d0>
 800f852:	bf00      	nop
 800f854:	40011400 	.word	0x40011400
 800f858:	58024400 	.word	0x58024400
 800f85c:	40007800 	.word	0x40007800
 800f860:	40007c00 	.word	0x40007c00
 800f864:	58000c00 	.word	0x58000c00
 800f868:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f86c:	4b9d      	ldr	r3, [pc, #628]	@ (800fae4 <UART_SetConfig+0x928>)
 800f86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f870:	e00c      	b.n	800f88c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f872:	4b9d      	ldr	r3, [pc, #628]	@ (800fae8 <UART_SetConfig+0x92c>)
 800f874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f876:	e009      	b.n	800f88c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f878:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f87e:	e005      	b.n	800f88c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f880:	2300      	movs	r3, #0
 800f882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f884:	2301      	movs	r3, #1
 800f886:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f88a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f88c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f000 81de 	beq.w	800fc50 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f898:	4a94      	ldr	r2, [pc, #592]	@ (800faec <UART_SetConfig+0x930>)
 800f89a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f89e:	461a      	mov	r2, r3
 800f8a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8a6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	685a      	ldr	r2, [r3, #4]
 800f8ac:	4613      	mov	r3, r2
 800f8ae:	005b      	lsls	r3, r3, #1
 800f8b0:	4413      	add	r3, r2
 800f8b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d305      	bcc.n	800f8c4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f8be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d903      	bls.n	800f8cc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f8ca:	e1c1      	b.n	800fc50 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f8cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	60bb      	str	r3, [r7, #8]
 800f8d2:	60fa      	str	r2, [r7, #12]
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8d8:	4a84      	ldr	r2, [pc, #528]	@ (800faec <UART_SetConfig+0x930>)
 800f8da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	603b      	str	r3, [r7, #0]
 800f8e4:	607a      	str	r2, [r7, #4]
 800f8e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f8ee:	f7f0 fd4f 	bl	8000390 <__aeabi_uldivmod>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	4610      	mov	r0, r2
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	f04f 0200 	mov.w	r2, #0
 800f8fe:	f04f 0300 	mov.w	r3, #0
 800f902:	020b      	lsls	r3, r1, #8
 800f904:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f908:	0202      	lsls	r2, r0, #8
 800f90a:	6979      	ldr	r1, [r7, #20]
 800f90c:	6849      	ldr	r1, [r1, #4]
 800f90e:	0849      	lsrs	r1, r1, #1
 800f910:	2000      	movs	r0, #0
 800f912:	460c      	mov	r4, r1
 800f914:	4605      	mov	r5, r0
 800f916:	eb12 0804 	adds.w	r8, r2, r4
 800f91a:	eb43 0905 	adc.w	r9, r3, r5
 800f91e:	697b      	ldr	r3, [r7, #20]
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	2200      	movs	r2, #0
 800f924:	469a      	mov	sl, r3
 800f926:	4693      	mov	fp, r2
 800f928:	4652      	mov	r2, sl
 800f92a:	465b      	mov	r3, fp
 800f92c:	4640      	mov	r0, r8
 800f92e:	4649      	mov	r1, r9
 800f930:	f7f0 fd2e 	bl	8000390 <__aeabi_uldivmod>
 800f934:	4602      	mov	r2, r0
 800f936:	460b      	mov	r3, r1
 800f938:	4613      	mov	r3, r2
 800f93a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f93e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f942:	d308      	bcc.n	800f956 <UART_SetConfig+0x79a>
 800f944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f94a:	d204      	bcs.n	800f956 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f952:	60da      	str	r2, [r3, #12]
 800f954:	e17c      	b.n	800fc50 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f956:	2301      	movs	r3, #1
 800f958:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f95c:	e178      	b.n	800fc50 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	69db      	ldr	r3, [r3, #28]
 800f962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f966:	f040 80c5 	bne.w	800faf4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f96a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f96e:	2b20      	cmp	r3, #32
 800f970:	dc48      	bgt.n	800fa04 <UART_SetConfig+0x848>
 800f972:	2b00      	cmp	r3, #0
 800f974:	db7b      	blt.n	800fa6e <UART_SetConfig+0x8b2>
 800f976:	2b20      	cmp	r3, #32
 800f978:	d879      	bhi.n	800fa6e <UART_SetConfig+0x8b2>
 800f97a:	a201      	add	r2, pc, #4	@ (adr r2, 800f980 <UART_SetConfig+0x7c4>)
 800f97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f980:	0800fa0b 	.word	0x0800fa0b
 800f984:	0800fa13 	.word	0x0800fa13
 800f988:	0800fa6f 	.word	0x0800fa6f
 800f98c:	0800fa6f 	.word	0x0800fa6f
 800f990:	0800fa1b 	.word	0x0800fa1b
 800f994:	0800fa6f 	.word	0x0800fa6f
 800f998:	0800fa6f 	.word	0x0800fa6f
 800f99c:	0800fa6f 	.word	0x0800fa6f
 800f9a0:	0800fa2b 	.word	0x0800fa2b
 800f9a4:	0800fa6f 	.word	0x0800fa6f
 800f9a8:	0800fa6f 	.word	0x0800fa6f
 800f9ac:	0800fa6f 	.word	0x0800fa6f
 800f9b0:	0800fa6f 	.word	0x0800fa6f
 800f9b4:	0800fa6f 	.word	0x0800fa6f
 800f9b8:	0800fa6f 	.word	0x0800fa6f
 800f9bc:	0800fa6f 	.word	0x0800fa6f
 800f9c0:	0800fa3b 	.word	0x0800fa3b
 800f9c4:	0800fa6f 	.word	0x0800fa6f
 800f9c8:	0800fa6f 	.word	0x0800fa6f
 800f9cc:	0800fa6f 	.word	0x0800fa6f
 800f9d0:	0800fa6f 	.word	0x0800fa6f
 800f9d4:	0800fa6f 	.word	0x0800fa6f
 800f9d8:	0800fa6f 	.word	0x0800fa6f
 800f9dc:	0800fa6f 	.word	0x0800fa6f
 800f9e0:	0800fa6f 	.word	0x0800fa6f
 800f9e4:	0800fa6f 	.word	0x0800fa6f
 800f9e8:	0800fa6f 	.word	0x0800fa6f
 800f9ec:	0800fa6f 	.word	0x0800fa6f
 800f9f0:	0800fa6f 	.word	0x0800fa6f
 800f9f4:	0800fa6f 	.word	0x0800fa6f
 800f9f8:	0800fa6f 	.word	0x0800fa6f
 800f9fc:	0800fa6f 	.word	0x0800fa6f
 800fa00:	0800fa61 	.word	0x0800fa61
 800fa04:	2b40      	cmp	r3, #64	@ 0x40
 800fa06:	d02e      	beq.n	800fa66 <UART_SetConfig+0x8aa>
 800fa08:	e031      	b.n	800fa6e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fa0a:	f7fb fa79 	bl	800af00 <HAL_RCC_GetPCLK1Freq>
 800fa0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fa10:	e033      	b.n	800fa7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fa12:	f7fb fa8b 	bl	800af2c <HAL_RCC_GetPCLK2Freq>
 800fa16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fa18:	e02f      	b.n	800fa7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7fd fa60 	bl	800cee4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fa24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa28:	e027      	b.n	800fa7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa2a:	f107 0318 	add.w	r3, r7, #24
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7fd fbac 	bl	800d18c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa38:	e01f      	b.n	800fa7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa3a:	4b2d      	ldr	r3, [pc, #180]	@ (800faf0 <UART_SetConfig+0x934>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	f003 0320 	and.w	r3, r3, #32
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d009      	beq.n	800fa5a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa46:	4b2a      	ldr	r3, [pc, #168]	@ (800faf0 <UART_SetConfig+0x934>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	08db      	lsrs	r3, r3, #3
 800fa4c:	f003 0303 	and.w	r3, r3, #3
 800fa50:	4a24      	ldr	r2, [pc, #144]	@ (800fae4 <UART_SetConfig+0x928>)
 800fa52:	fa22 f303 	lsr.w	r3, r2, r3
 800fa56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa58:	e00f      	b.n	800fa7a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fa5a:	4b22      	ldr	r3, [pc, #136]	@ (800fae4 <UART_SetConfig+0x928>)
 800fa5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa5e:	e00c      	b.n	800fa7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa60:	4b21      	ldr	r3, [pc, #132]	@ (800fae8 <UART_SetConfig+0x92c>)
 800fa62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa64:	e009      	b.n	800fa7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fa6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa6c:	e005      	b.n	800fa7a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fa72:	2301      	movs	r3, #1
 800fa74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fa78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fa7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	f000 80e7 	beq.w	800fc50 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa86:	4a19      	ldr	r2, [pc, #100]	@ (800faec <UART_SetConfig+0x930>)
 800fa88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa8c:	461a      	mov	r2, r3
 800fa8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa90:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa94:	005a      	lsls	r2, r3, #1
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	685b      	ldr	r3, [r3, #4]
 800fa9a:	085b      	lsrs	r3, r3, #1
 800fa9c:	441a      	add	r2, r3
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	685b      	ldr	r3, [r3, #4]
 800faa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800faa6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800faa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faaa:	2b0f      	cmp	r3, #15
 800faac:	d916      	bls.n	800fadc <UART_SetConfig+0x920>
 800faae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fab4:	d212      	bcs.n	800fadc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab8:	b29b      	uxth	r3, r3
 800faba:	f023 030f 	bic.w	r3, r3, #15
 800fabe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fac2:	085b      	lsrs	r3, r3, #1
 800fac4:	b29b      	uxth	r3, r3
 800fac6:	f003 0307 	and.w	r3, r3, #7
 800faca:	b29a      	uxth	r2, r3
 800facc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800face:	4313      	orrs	r3, r2
 800fad0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fad8:	60da      	str	r2, [r3, #12]
 800fada:	e0b9      	b.n	800fc50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fadc:	2301      	movs	r3, #1
 800fade:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fae2:	e0b5      	b.n	800fc50 <UART_SetConfig+0xa94>
 800fae4:	03d09000 	.word	0x03d09000
 800fae8:	003d0900 	.word	0x003d0900
 800faec:	0801a31c 	.word	0x0801a31c
 800faf0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800faf4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800faf8:	2b20      	cmp	r3, #32
 800fafa:	dc49      	bgt.n	800fb90 <UART_SetConfig+0x9d4>
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	db7c      	blt.n	800fbfa <UART_SetConfig+0xa3e>
 800fb00:	2b20      	cmp	r3, #32
 800fb02:	d87a      	bhi.n	800fbfa <UART_SetConfig+0xa3e>
 800fb04:	a201      	add	r2, pc, #4	@ (adr r2, 800fb0c <UART_SetConfig+0x950>)
 800fb06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb0a:	bf00      	nop
 800fb0c:	0800fb97 	.word	0x0800fb97
 800fb10:	0800fb9f 	.word	0x0800fb9f
 800fb14:	0800fbfb 	.word	0x0800fbfb
 800fb18:	0800fbfb 	.word	0x0800fbfb
 800fb1c:	0800fba7 	.word	0x0800fba7
 800fb20:	0800fbfb 	.word	0x0800fbfb
 800fb24:	0800fbfb 	.word	0x0800fbfb
 800fb28:	0800fbfb 	.word	0x0800fbfb
 800fb2c:	0800fbb7 	.word	0x0800fbb7
 800fb30:	0800fbfb 	.word	0x0800fbfb
 800fb34:	0800fbfb 	.word	0x0800fbfb
 800fb38:	0800fbfb 	.word	0x0800fbfb
 800fb3c:	0800fbfb 	.word	0x0800fbfb
 800fb40:	0800fbfb 	.word	0x0800fbfb
 800fb44:	0800fbfb 	.word	0x0800fbfb
 800fb48:	0800fbfb 	.word	0x0800fbfb
 800fb4c:	0800fbc7 	.word	0x0800fbc7
 800fb50:	0800fbfb 	.word	0x0800fbfb
 800fb54:	0800fbfb 	.word	0x0800fbfb
 800fb58:	0800fbfb 	.word	0x0800fbfb
 800fb5c:	0800fbfb 	.word	0x0800fbfb
 800fb60:	0800fbfb 	.word	0x0800fbfb
 800fb64:	0800fbfb 	.word	0x0800fbfb
 800fb68:	0800fbfb 	.word	0x0800fbfb
 800fb6c:	0800fbfb 	.word	0x0800fbfb
 800fb70:	0800fbfb 	.word	0x0800fbfb
 800fb74:	0800fbfb 	.word	0x0800fbfb
 800fb78:	0800fbfb 	.word	0x0800fbfb
 800fb7c:	0800fbfb 	.word	0x0800fbfb
 800fb80:	0800fbfb 	.word	0x0800fbfb
 800fb84:	0800fbfb 	.word	0x0800fbfb
 800fb88:	0800fbfb 	.word	0x0800fbfb
 800fb8c:	0800fbed 	.word	0x0800fbed
 800fb90:	2b40      	cmp	r3, #64	@ 0x40
 800fb92:	d02e      	beq.n	800fbf2 <UART_SetConfig+0xa36>
 800fb94:	e031      	b.n	800fbfa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fb96:	f7fb f9b3 	bl	800af00 <HAL_RCC_GetPCLK1Freq>
 800fb9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fb9c:	e033      	b.n	800fc06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fb9e:	f7fb f9c5 	bl	800af2c <HAL_RCC_GetPCLK2Freq>
 800fba2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fba4:	e02f      	b.n	800fc06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7fd f99a 	bl	800cee4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbb4:	e027      	b.n	800fc06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fbb6:	f107 0318 	add.w	r3, r7, #24
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fd fae6 	bl	800d18c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbc4:	e01f      	b.n	800fc06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fbc6:	4b2d      	ldr	r3, [pc, #180]	@ (800fc7c <UART_SetConfig+0xac0>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f003 0320 	and.w	r3, r3, #32
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d009      	beq.n	800fbe6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fbd2:	4b2a      	ldr	r3, [pc, #168]	@ (800fc7c <UART_SetConfig+0xac0>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	08db      	lsrs	r3, r3, #3
 800fbd8:	f003 0303 	and.w	r3, r3, #3
 800fbdc:	4a28      	ldr	r2, [pc, #160]	@ (800fc80 <UART_SetConfig+0xac4>)
 800fbde:	fa22 f303 	lsr.w	r3, r2, r3
 800fbe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fbe4:	e00f      	b.n	800fc06 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800fbe6:	4b26      	ldr	r3, [pc, #152]	@ (800fc80 <UART_SetConfig+0xac4>)
 800fbe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbea:	e00c      	b.n	800fc06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fbec:	4b25      	ldr	r3, [pc, #148]	@ (800fc84 <UART_SetConfig+0xac8>)
 800fbee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbf0:	e009      	b.n	800fc06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fbf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fbf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbf8:	e005      	b.n	800fc06 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fbfe:	2301      	movs	r3, #1
 800fc00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fc04:	bf00      	nop
    }

    if (pclk != 0U)
 800fc06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d021      	beq.n	800fc50 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc10:	4a1d      	ldr	r2, [pc, #116]	@ (800fc88 <UART_SetConfig+0xacc>)
 800fc12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc16:	461a      	mov	r2, r3
 800fc18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc1a:	fbb3 f2f2 	udiv	r2, r3, r2
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	685b      	ldr	r3, [r3, #4]
 800fc22:	085b      	lsrs	r3, r3, #1
 800fc24:	441a      	add	r2, r3
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc32:	2b0f      	cmp	r3, #15
 800fc34:	d909      	bls.n	800fc4a <UART_SetConfig+0xa8e>
 800fc36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fc3c:	d205      	bcs.n	800fc4a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fc3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc40:	b29a      	uxth	r2, r3
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	60da      	str	r2, [r3, #12]
 800fc48:	e002      	b.n	800fc50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	2201      	movs	r2, #1
 800fc54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	2201      	movs	r2, #1
 800fc5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	2200      	movs	r2, #0
 800fc64:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fc6c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3748      	adds	r7, #72	@ 0x48
 800fc74:	46bd      	mov	sp, r7
 800fc76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fc7a:	bf00      	nop
 800fc7c:	58024400 	.word	0x58024400
 800fc80:	03d09000 	.word	0x03d09000
 800fc84:	003d0900 	.word	0x003d0900
 800fc88:	0801a31c 	.word	0x0801a31c

0800fc8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc98:	f003 0308 	and.w	r3, r3, #8
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d00a      	beq.n	800fcb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	685b      	ldr	r3, [r3, #4]
 800fca6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	430a      	orrs	r2, r1
 800fcb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcba:	f003 0301 	and.w	r3, r3, #1
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d00a      	beq.n	800fcd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	685b      	ldr	r3, [r3, #4]
 800fcc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	430a      	orrs	r2, r1
 800fcd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcdc:	f003 0302 	and.w	r3, r3, #2
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d00a      	beq.n	800fcfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	430a      	orrs	r2, r1
 800fcf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcfe:	f003 0304 	and.w	r3, r3, #4
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d00a      	beq.n	800fd1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	685b      	ldr	r3, [r3, #4]
 800fd0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	430a      	orrs	r2, r1
 800fd1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd20:	f003 0310 	and.w	r3, r3, #16
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d00a      	beq.n	800fd3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	689b      	ldr	r3, [r3, #8]
 800fd2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	430a      	orrs	r2, r1
 800fd3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd42:	f003 0320 	and.w	r3, r3, #32
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d00a      	beq.n	800fd60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	689b      	ldr	r3, [r3, #8]
 800fd50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	430a      	orrs	r2, r1
 800fd5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d01a      	beq.n	800fda2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	430a      	orrs	r2, r1
 800fd80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fd8a:	d10a      	bne.n	800fda2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	430a      	orrs	r2, r1
 800fda0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fda6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d00a      	beq.n	800fdc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	430a      	orrs	r2, r1
 800fdc2:	605a      	str	r2, [r3, #4]
  }
}
 800fdc4:	bf00      	nop
 800fdc6:	370c      	adds	r7, #12
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr

0800fdd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b098      	sub	sp, #96	@ 0x60
 800fdd4:	af02      	add	r7, sp, #8
 800fdd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2200      	movs	r2, #0
 800fddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fde0:	f7f4 f92a 	bl	8004038 <HAL_GetTick>
 800fde4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f003 0308 	and.w	r3, r3, #8
 800fdf0:	2b08      	cmp	r3, #8
 800fdf2:	d12f      	bne.n	800fe54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fdf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fdf8:	9300      	str	r3, [sp, #0]
 800fdfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 f88e 	bl	800ff24 <UART_WaitOnFlagUntilTimeout>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d022      	beq.n	800fe54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe16:	e853 3f00 	ldrex	r3, [r3]
 800fe1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fe1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fe22:	653b      	str	r3, [r7, #80]	@ 0x50
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	461a      	mov	r2, r3
 800fe2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe2c:	647b      	str	r3, [r7, #68]	@ 0x44
 800fe2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fe32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe34:	e841 2300 	strex	r3, r2, [r1]
 800fe38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fe3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d1e6      	bne.n	800fe0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2220      	movs	r2, #32
 800fe44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fe50:	2303      	movs	r3, #3
 800fe52:	e063      	b.n	800ff1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	f003 0304 	and.w	r3, r3, #4
 800fe5e:	2b04      	cmp	r3, #4
 800fe60:	d149      	bne.n	800fef6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fe62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fe66:	9300      	str	r3, [sp, #0]
 800fe68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f000 f857 	bl	800ff24 <UART_WaitOnFlagUntilTimeout>
 800fe76:	4603      	mov	r3, r0
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d03c      	beq.n	800fef6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe84:	e853 3f00 	ldrex	r3, [r3]
 800fe88:	623b      	str	r3, [r7, #32]
   return(result);
 800fe8a:	6a3b      	ldr	r3, [r7, #32]
 800fe8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fe90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	461a      	mov	r2, r3
 800fe98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe9a:	633b      	str	r3, [r7, #48]	@ 0x30
 800fe9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fea2:	e841 2300 	strex	r3, r2, [r1]
 800fea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d1e6      	bne.n	800fe7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	3308      	adds	r3, #8
 800feb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	e853 3f00 	ldrex	r3, [r3]
 800febc:	60fb      	str	r3, [r7, #12]
   return(result);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f023 0301 	bic.w	r3, r3, #1
 800fec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	3308      	adds	r3, #8
 800fecc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fece:	61fa      	str	r2, [r7, #28]
 800fed0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fed2:	69b9      	ldr	r1, [r7, #24]
 800fed4:	69fa      	ldr	r2, [r7, #28]
 800fed6:	e841 2300 	strex	r3, r2, [r1]
 800feda:	617b      	str	r3, [r7, #20]
   return(result);
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d1e5      	bne.n	800feae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2220      	movs	r2, #32
 800fee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2200      	movs	r2, #0
 800feee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fef2:	2303      	movs	r3, #3
 800fef4:	e012      	b.n	800ff1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2220      	movs	r2, #32
 800fefa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2220      	movs	r2, #32
 800ff02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2200      	movs	r2, #0
 800ff16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ff1a:	2300      	movs	r3, #0
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3758      	adds	r7, #88	@ 0x58
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b084      	sub	sp, #16
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	60f8      	str	r0, [r7, #12]
 800ff2c:	60b9      	str	r1, [r7, #8]
 800ff2e:	603b      	str	r3, [r7, #0]
 800ff30:	4613      	mov	r3, r2
 800ff32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ff34:	e04f      	b.n	800ffd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ff36:	69bb      	ldr	r3, [r7, #24]
 800ff38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff3c:	d04b      	beq.n	800ffd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ff3e:	f7f4 f87b 	bl	8004038 <HAL_GetTick>
 800ff42:	4602      	mov	r2, r0
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	1ad3      	subs	r3, r2, r3
 800ff48:	69ba      	ldr	r2, [r7, #24]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d302      	bcc.n	800ff54 <UART_WaitOnFlagUntilTimeout+0x30>
 800ff4e:	69bb      	ldr	r3, [r7, #24]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d101      	bne.n	800ff58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ff54:	2303      	movs	r3, #3
 800ff56:	e04e      	b.n	800fff6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f003 0304 	and.w	r3, r3, #4
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d037      	beq.n	800ffd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	2b80      	cmp	r3, #128	@ 0x80
 800ff6a:	d034      	beq.n	800ffd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	2b40      	cmp	r3, #64	@ 0x40
 800ff70:	d031      	beq.n	800ffd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	69db      	ldr	r3, [r3, #28]
 800ff78:	f003 0308 	and.w	r3, r3, #8
 800ff7c:	2b08      	cmp	r3, #8
 800ff7e:	d110      	bne.n	800ffa2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	2208      	movs	r2, #8
 800ff86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ff88:	68f8      	ldr	r0, [r7, #12]
 800ff8a:	f000 f95b 	bl	8010244 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	2208      	movs	r2, #8
 800ff92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	e029      	b.n	800fff6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	69db      	ldr	r3, [r3, #28]
 800ffa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ffac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ffb0:	d111      	bne.n	800ffd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ffba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ffbc:	68f8      	ldr	r0, [r7, #12]
 800ffbe:	f000 f941 	bl	8010244 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	2220      	movs	r2, #32
 800ffc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ffd2:	2303      	movs	r3, #3
 800ffd4:	e00f      	b.n	800fff6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	69da      	ldr	r2, [r3, #28]
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	4013      	ands	r3, r2
 800ffe0:	68ba      	ldr	r2, [r7, #8]
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	bf0c      	ite	eq
 800ffe6:	2301      	moveq	r3, #1
 800ffe8:	2300      	movne	r3, #0
 800ffea:	b2db      	uxtb	r3, r3
 800ffec:	461a      	mov	r2, r3
 800ffee:	79fb      	ldrb	r3, [r7, #7]
 800fff0:	429a      	cmp	r2, r3
 800fff2:	d0a0      	beq.n	800ff36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fff4:	2300      	movs	r3, #0
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3710      	adds	r7, #16
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
	...

08010000 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010000:	b480      	push	{r7}
 8010002:	b0a3      	sub	sp, #140	@ 0x8c
 8010004:	af00      	add	r7, sp, #0
 8010006:	60f8      	str	r0, [r7, #12]
 8010008:	60b9      	str	r1, [r7, #8]
 801000a:	4613      	mov	r3, r2
 801000c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	68ba      	ldr	r2, [r7, #8]
 8010012:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	88fa      	ldrh	r2, [r7, #6]
 8010018:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	88fa      	ldrh	r2, [r7, #6]
 8010020:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	2200      	movs	r2, #0
 8010028:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	689b      	ldr	r3, [r3, #8]
 801002e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010032:	d10e      	bne.n	8010052 <UART_Start_Receive_IT+0x52>
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	691b      	ldr	r3, [r3, #16]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d105      	bne.n	8010048 <UART_Start_Receive_IT+0x48>
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8010042:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010046:	e02d      	b.n	80100a4 <UART_Start_Receive_IT+0xa4>
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	22ff      	movs	r2, #255	@ 0xff
 801004c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010050:	e028      	b.n	80100a4 <UART_Start_Receive_IT+0xa4>
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	689b      	ldr	r3, [r3, #8]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d10d      	bne.n	8010076 <UART_Start_Receive_IT+0x76>
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	691b      	ldr	r3, [r3, #16]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d104      	bne.n	801006c <UART_Start_Receive_IT+0x6c>
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	22ff      	movs	r2, #255	@ 0xff
 8010066:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801006a:	e01b      	b.n	80100a4 <UART_Start_Receive_IT+0xa4>
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	227f      	movs	r2, #127	@ 0x7f
 8010070:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010074:	e016      	b.n	80100a4 <UART_Start_Receive_IT+0xa4>
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	689b      	ldr	r3, [r3, #8]
 801007a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801007e:	d10d      	bne.n	801009c <UART_Start_Receive_IT+0x9c>
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	691b      	ldr	r3, [r3, #16]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d104      	bne.n	8010092 <UART_Start_Receive_IT+0x92>
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	227f      	movs	r2, #127	@ 0x7f
 801008c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010090:	e008      	b.n	80100a4 <UART_Start_Receive_IT+0xa4>
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	223f      	movs	r2, #63	@ 0x3f
 8010096:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801009a:	e003      	b.n	80100a4 <UART_Start_Receive_IT+0xa4>
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2200      	movs	r2, #0
 80100a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2200      	movs	r2, #0
 80100a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	2222      	movs	r2, #34	@ 0x22
 80100b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	3308      	adds	r3, #8
 80100ba:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80100be:	e853 3f00 	ldrex	r3, [r3]
 80100c2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80100c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80100c6:	f043 0301 	orr.w	r3, r3, #1
 80100ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	3308      	adds	r3, #8
 80100d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80100d8:	673a      	str	r2, [r7, #112]	@ 0x70
 80100da:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100dc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80100de:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80100e0:	e841 2300 	strex	r3, r2, [r1]
 80100e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80100e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d1e3      	bne.n	80100b4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80100f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80100f4:	d14f      	bne.n	8010196 <UART_Start_Receive_IT+0x196>
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80100fc:	88fa      	ldrh	r2, [r7, #6]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d349      	bcc.n	8010196 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	689b      	ldr	r3, [r3, #8]
 8010106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801010a:	d107      	bne.n	801011c <UART_Start_Receive_IT+0x11c>
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	691b      	ldr	r3, [r3, #16]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d103      	bne.n	801011c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	4a47      	ldr	r2, [pc, #284]	@ (8010234 <UART_Start_Receive_IT+0x234>)
 8010118:	675a      	str	r2, [r3, #116]	@ 0x74
 801011a:	e002      	b.n	8010122 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	4a46      	ldr	r2, [pc, #280]	@ (8010238 <UART_Start_Receive_IT+0x238>)
 8010120:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	691b      	ldr	r3, [r3, #16]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d01a      	beq.n	8010160 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010132:	e853 3f00 	ldrex	r3, [r3]
 8010136:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801013a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801013e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	461a      	mov	r2, r3
 8010148:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801014c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801014e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010150:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010152:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010154:	e841 2300 	strex	r3, r2, [r1]
 8010158:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801015a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801015c:	2b00      	cmp	r3, #0
 801015e:	d1e4      	bne.n	801012a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	3308      	adds	r3, #8
 8010166:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801016a:	e853 3f00 	ldrex	r3, [r3]
 801016e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010176:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	3308      	adds	r3, #8
 801017e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010180:	64ba      	str	r2, [r7, #72]	@ 0x48
 8010182:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010184:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010186:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010188:	e841 2300 	strex	r3, r2, [r1]
 801018c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801018e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010190:	2b00      	cmp	r3, #0
 8010192:	d1e5      	bne.n	8010160 <UART_Start_Receive_IT+0x160>
 8010194:	e046      	b.n	8010224 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	689b      	ldr	r3, [r3, #8]
 801019a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801019e:	d107      	bne.n	80101b0 <UART_Start_Receive_IT+0x1b0>
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	691b      	ldr	r3, [r3, #16]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d103      	bne.n	80101b0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	4a24      	ldr	r2, [pc, #144]	@ (801023c <UART_Start_Receive_IT+0x23c>)
 80101ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80101ae:	e002      	b.n	80101b6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	4a23      	ldr	r2, [pc, #140]	@ (8010240 <UART_Start_Receive_IT+0x240>)
 80101b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	691b      	ldr	r3, [r3, #16]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d019      	beq.n	80101f2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c6:	e853 3f00 	ldrex	r3, [r3]
 80101ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80101cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ce:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80101d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	461a      	mov	r2, r3
 80101da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80101dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80101de:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80101e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80101e4:	e841 2300 	strex	r3, r2, [r1]
 80101e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80101ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d1e6      	bne.n	80101be <UART_Start_Receive_IT+0x1be>
 80101f0:	e018      	b.n	8010224 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	e853 3f00 	ldrex	r3, [r3]
 80101fe:	613b      	str	r3, [r7, #16]
   return(result);
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	f043 0320 	orr.w	r3, r3, #32
 8010206:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	461a      	mov	r2, r3
 801020e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010210:	623b      	str	r3, [r7, #32]
 8010212:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010214:	69f9      	ldr	r1, [r7, #28]
 8010216:	6a3a      	ldr	r2, [r7, #32]
 8010218:	e841 2300 	strex	r3, r2, [r1]
 801021c:	61bb      	str	r3, [r7, #24]
   return(result);
 801021e:	69bb      	ldr	r3, [r7, #24]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d1e6      	bne.n	80101f2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010224:	2300      	movs	r3, #0
}
 8010226:	4618      	mov	r0, r3
 8010228:	378c      	adds	r7, #140	@ 0x8c
 801022a:	46bd      	mov	sp, r7
 801022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010230:	4770      	bx	lr
 8010232:	bf00      	nop
 8010234:	08010da9 	.word	0x08010da9
 8010238:	08010a49 	.word	0x08010a49
 801023c:	08010891 	.word	0x08010891
 8010240:	080106d9 	.word	0x080106d9

08010244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010244:	b480      	push	{r7}
 8010246:	b095      	sub	sp, #84	@ 0x54
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010254:	e853 3f00 	ldrex	r3, [r3]
 8010258:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801025a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801025c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010260:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	461a      	mov	r2, r3
 8010268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801026a:	643b      	str	r3, [r7, #64]	@ 0x40
 801026c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801026e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010270:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010272:	e841 2300 	strex	r3, r2, [r1]
 8010276:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801027a:	2b00      	cmp	r3, #0
 801027c:	d1e6      	bne.n	801024c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	3308      	adds	r3, #8
 8010284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010286:	6a3b      	ldr	r3, [r7, #32]
 8010288:	e853 3f00 	ldrex	r3, [r3]
 801028c:	61fb      	str	r3, [r7, #28]
   return(result);
 801028e:	69fa      	ldr	r2, [r7, #28]
 8010290:	4b1e      	ldr	r3, [pc, #120]	@ (801030c <UART_EndRxTransfer+0xc8>)
 8010292:	4013      	ands	r3, r2
 8010294:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	3308      	adds	r3, #8
 801029c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801029e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80102a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80102a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102a6:	e841 2300 	strex	r3, r2, [r1]
 80102aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80102ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d1e5      	bne.n	801027e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102b6:	2b01      	cmp	r3, #1
 80102b8:	d118      	bne.n	80102ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	e853 3f00 	ldrex	r3, [r3]
 80102c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	f023 0310 	bic.w	r3, r3, #16
 80102ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	461a      	mov	r2, r3
 80102d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102d8:	61bb      	str	r3, [r7, #24]
 80102da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102dc:	6979      	ldr	r1, [r7, #20]
 80102de:	69ba      	ldr	r2, [r7, #24]
 80102e0:	e841 2300 	strex	r3, r2, [r1]
 80102e4:	613b      	str	r3, [r7, #16]
   return(result);
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d1e6      	bne.n	80102ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2220      	movs	r2, #32
 80102f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2200      	movs	r2, #0
 80102f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2200      	movs	r2, #0
 80102fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010300:	bf00      	nop
 8010302:	3754      	adds	r7, #84	@ 0x54
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr
 801030c:	effffffe 	.word	0xeffffffe

08010310 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b084      	sub	sp, #16
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801031c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	2200      	movs	r2, #0
 8010322:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2200      	movs	r2, #0
 801032a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801032e:	68f8      	ldr	r0, [r7, #12]
 8010330:	f7fe ff3a 	bl	800f1a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010334:	bf00      	nop
 8010336:	3710      	adds	r7, #16
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}

0801033c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801033c:	b480      	push	{r7}
 801033e:	b08f      	sub	sp, #60	@ 0x3c
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801034a:	2b21      	cmp	r3, #33	@ 0x21
 801034c:	d14c      	bne.n	80103e8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010354:	b29b      	uxth	r3, r3
 8010356:	2b00      	cmp	r3, #0
 8010358:	d132      	bne.n	80103c0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010360:	6a3b      	ldr	r3, [r7, #32]
 8010362:	e853 3f00 	ldrex	r3, [r3]
 8010366:	61fb      	str	r3, [r7, #28]
   return(result);
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801036e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	461a      	mov	r2, r3
 8010376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010378:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801037a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801037c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801037e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010380:	e841 2300 	strex	r3, r2, [r1]
 8010384:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010388:	2b00      	cmp	r3, #0
 801038a:	d1e6      	bne.n	801035a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	e853 3f00 	ldrex	r3, [r3]
 8010398:	60bb      	str	r3, [r7, #8]
   return(result);
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	461a      	mov	r2, r3
 80103a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103aa:	61bb      	str	r3, [r7, #24]
 80103ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ae:	6979      	ldr	r1, [r7, #20]
 80103b0:	69ba      	ldr	r2, [r7, #24]
 80103b2:	e841 2300 	strex	r3, r2, [r1]
 80103b6:	613b      	str	r3, [r7, #16]
   return(result);
 80103b8:	693b      	ldr	r3, [r7, #16]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d1e6      	bne.n	801038c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80103be:	e013      	b.n	80103e8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80103c4:	781a      	ldrb	r2, [r3, #0]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80103d0:	1c5a      	adds	r2, r3, #1
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80103dc:	b29b      	uxth	r3, r3
 80103de:	3b01      	subs	r3, #1
 80103e0:	b29a      	uxth	r2, r3
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80103e8:	bf00      	nop
 80103ea:	373c      	adds	r7, #60	@ 0x3c
 80103ec:	46bd      	mov	sp, r7
 80103ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f2:	4770      	bx	lr

080103f4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b091      	sub	sp, #68	@ 0x44
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010402:	2b21      	cmp	r3, #33	@ 0x21
 8010404:	d151      	bne.n	80104aa <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801040c:	b29b      	uxth	r3, r3
 801040e:	2b00      	cmp	r3, #0
 8010410:	d132      	bne.n	8010478 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801041a:	e853 3f00 	ldrex	r3, [r3]
 801041e:	623b      	str	r3, [r7, #32]
   return(result);
 8010420:	6a3b      	ldr	r3, [r7, #32]
 8010422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010426:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	461a      	mov	r2, r3
 801042e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010430:	633b      	str	r3, [r7, #48]	@ 0x30
 8010432:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010434:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010438:	e841 2300 	strex	r3, r2, [r1]
 801043c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801043e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010440:	2b00      	cmp	r3, #0
 8010442:	d1e6      	bne.n	8010412 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	e853 3f00 	ldrex	r3, [r3]
 8010450:	60fb      	str	r3, [r7, #12]
   return(result);
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010458:	637b      	str	r3, [r7, #52]	@ 0x34
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	461a      	mov	r2, r3
 8010460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010462:	61fb      	str	r3, [r7, #28]
 8010464:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010466:	69b9      	ldr	r1, [r7, #24]
 8010468:	69fa      	ldr	r2, [r7, #28]
 801046a:	e841 2300 	strex	r3, r2, [r1]
 801046e:	617b      	str	r3, [r7, #20]
   return(result);
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d1e6      	bne.n	8010444 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8010476:	e018      	b.n	80104aa <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801047c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801047e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010480:	881b      	ldrh	r3, [r3, #0]
 8010482:	461a      	mov	r2, r3
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801048c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010492:	1c9a      	adds	r2, r3, #2
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801049e:	b29b      	uxth	r3, r3
 80104a0:	3b01      	subs	r3, #1
 80104a2:	b29a      	uxth	r2, r3
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80104aa:	bf00      	nop
 80104ac:	3744      	adds	r7, #68	@ 0x44
 80104ae:	46bd      	mov	sp, r7
 80104b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b4:	4770      	bx	lr

080104b6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80104b6:	b480      	push	{r7}
 80104b8:	b091      	sub	sp, #68	@ 0x44
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80104c4:	2b21      	cmp	r3, #33	@ 0x21
 80104c6:	d160      	bne.n	801058a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80104ce:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80104d0:	e057      	b.n	8010582 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80104d8:	b29b      	uxth	r3, r3
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d133      	bne.n	8010546 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	3308      	adds	r3, #8
 80104e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104e8:	e853 3f00 	ldrex	r3, [r3]
 80104ec:	623b      	str	r3, [r7, #32]
   return(result);
 80104ee:	6a3b      	ldr	r3, [r7, #32]
 80104f0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80104f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	3308      	adds	r3, #8
 80104fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80104fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8010500:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010502:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010506:	e841 2300 	strex	r3, r2, [r1]
 801050a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801050c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801050e:	2b00      	cmp	r3, #0
 8010510:	d1e5      	bne.n	80104de <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	e853 3f00 	ldrex	r3, [r3]
 801051e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010526:	637b      	str	r3, [r7, #52]	@ 0x34
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	461a      	mov	r2, r3
 801052e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010530:	61fb      	str	r3, [r7, #28]
 8010532:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010534:	69b9      	ldr	r1, [r7, #24]
 8010536:	69fa      	ldr	r2, [r7, #28]
 8010538:	e841 2300 	strex	r3, r2, [r1]
 801053c:	617b      	str	r3, [r7, #20]
   return(result);
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d1e6      	bne.n	8010512 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8010544:	e021      	b.n	801058a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	69db      	ldr	r3, [r3, #28]
 801054c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010550:	2b00      	cmp	r3, #0
 8010552:	d013      	beq.n	801057c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010558:	781a      	ldrb	r2, [r3, #0]
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010564:	1c5a      	adds	r2, r3, #1
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010570:	b29b      	uxth	r3, r3
 8010572:	3b01      	subs	r3, #1
 8010574:	b29a      	uxth	r2, r3
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801057c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801057e:	3b01      	subs	r3, #1
 8010580:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010582:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010584:	2b00      	cmp	r3, #0
 8010586:	d1a4      	bne.n	80104d2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8010588:	e7ff      	b.n	801058a <UART_TxISR_8BIT_FIFOEN+0xd4>
 801058a:	bf00      	nop
 801058c:	3744      	adds	r7, #68	@ 0x44
 801058e:	46bd      	mov	sp, r7
 8010590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010594:	4770      	bx	lr

08010596 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010596:	b480      	push	{r7}
 8010598:	b091      	sub	sp, #68	@ 0x44
 801059a:	af00      	add	r7, sp, #0
 801059c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80105a4:	2b21      	cmp	r3, #33	@ 0x21
 80105a6:	d165      	bne.n	8010674 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80105ae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80105b0:	e05c      	b.n	801066c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80105b8:	b29b      	uxth	r3, r3
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d133      	bne.n	8010626 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	3308      	adds	r3, #8
 80105c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c6:	6a3b      	ldr	r3, [r7, #32]
 80105c8:	e853 3f00 	ldrex	r3, [r3]
 80105cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80105ce:	69fb      	ldr	r3, [r7, #28]
 80105d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80105d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	3308      	adds	r3, #8
 80105dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80105de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80105e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80105e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80105e6:	e841 2300 	strex	r3, r2, [r1]
 80105ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80105ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d1e5      	bne.n	80105be <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	e853 3f00 	ldrex	r3, [r3]
 80105fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010606:	633b      	str	r3, [r7, #48]	@ 0x30
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	461a      	mov	r2, r3
 801060e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010610:	61bb      	str	r3, [r7, #24]
 8010612:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010614:	6979      	ldr	r1, [r7, #20]
 8010616:	69ba      	ldr	r2, [r7, #24]
 8010618:	e841 2300 	strex	r3, r2, [r1]
 801061c:	613b      	str	r3, [r7, #16]
   return(result);
 801061e:	693b      	ldr	r3, [r7, #16]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d1e6      	bne.n	80105f2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8010624:	e026      	b.n	8010674 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	69db      	ldr	r3, [r3, #28]
 801062c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010630:	2b00      	cmp	r3, #0
 8010632:	d018      	beq.n	8010666 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010638:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801063a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801063c:	881b      	ldrh	r3, [r3, #0]
 801063e:	461a      	mov	r2, r3
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010648:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801064e:	1c9a      	adds	r2, r3, #2
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801065a:	b29b      	uxth	r3, r3
 801065c:	3b01      	subs	r3, #1
 801065e:	b29a      	uxth	r2, r3
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010666:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010668:	3b01      	subs	r3, #1
 801066a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801066c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801066e:	2b00      	cmp	r3, #0
 8010670:	d19f      	bne.n	80105b2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8010672:	e7ff      	b.n	8010674 <UART_TxISR_16BIT_FIFOEN+0xde>
 8010674:	bf00      	nop
 8010676:	3744      	adds	r7, #68	@ 0x44
 8010678:	46bd      	mov	sp, r7
 801067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067e:	4770      	bx	lr

08010680 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b088      	sub	sp, #32
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	e853 3f00 	ldrex	r3, [r3]
 8010694:	60bb      	str	r3, [r7, #8]
   return(result);
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801069c:	61fb      	str	r3, [r7, #28]
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	461a      	mov	r2, r3
 80106a4:	69fb      	ldr	r3, [r7, #28]
 80106a6:	61bb      	str	r3, [r7, #24]
 80106a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106aa:	6979      	ldr	r1, [r7, #20]
 80106ac:	69ba      	ldr	r2, [r7, #24]
 80106ae:	e841 2300 	strex	r3, r2, [r1]
 80106b2:	613b      	str	r3, [r7, #16]
   return(result);
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d1e6      	bne.n	8010688 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2220      	movs	r2, #32
 80106be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2200      	movs	r2, #0
 80106c6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f7fe fd59 	bl	800f180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80106ce:	bf00      	nop
 80106d0:	3720      	adds	r7, #32
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
	...

080106d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b09c      	sub	sp, #112	@ 0x70
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80106e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80106f0:	2b22      	cmp	r3, #34	@ 0x22
 80106f2:	f040 80be 	bne.w	8010872 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010700:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010704:	b2d9      	uxtb	r1, r3
 8010706:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801070a:	b2da      	uxtb	r2, r3
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010710:	400a      	ands	r2, r1
 8010712:	b2d2      	uxtb	r2, r2
 8010714:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801071a:	1c5a      	adds	r2, r3, #1
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010726:	b29b      	uxth	r3, r3
 8010728:	3b01      	subs	r3, #1
 801072a:	b29a      	uxth	r2, r3
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010738:	b29b      	uxth	r3, r3
 801073a:	2b00      	cmp	r3, #0
 801073c:	f040 80a1 	bne.w	8010882 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010748:	e853 3f00 	ldrex	r3, [r3]
 801074c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801074e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010750:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010754:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	461a      	mov	r2, r3
 801075c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801075e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010760:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010762:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010764:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010766:	e841 2300 	strex	r3, r2, [r1]
 801076a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801076c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801076e:	2b00      	cmp	r3, #0
 8010770:	d1e6      	bne.n	8010740 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	3308      	adds	r3, #8
 8010778:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801077a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801077c:	e853 3f00 	ldrex	r3, [r3]
 8010780:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010784:	f023 0301 	bic.w	r3, r3, #1
 8010788:	667b      	str	r3, [r7, #100]	@ 0x64
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	3308      	adds	r3, #8
 8010790:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010792:	647a      	str	r2, [r7, #68]	@ 0x44
 8010794:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010796:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010798:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801079a:	e841 2300 	strex	r3, r2, [r1]
 801079e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80107a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d1e5      	bne.n	8010772 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2220      	movs	r2, #32
 80107aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2200      	movs	r2, #0
 80107b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2200      	movs	r2, #0
 80107b8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	4a33      	ldr	r2, [pc, #204]	@ (801088c <UART_RxISR_8BIT+0x1b4>)
 80107c0:	4293      	cmp	r3, r2
 80107c2:	d01f      	beq.n	8010804 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	685b      	ldr	r3, [r3, #4]
 80107ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d018      	beq.n	8010804 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107da:	e853 3f00 	ldrex	r3, [r3]
 80107de:	623b      	str	r3, [r7, #32]
   return(result);
 80107e0:	6a3b      	ldr	r3, [r7, #32]
 80107e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80107e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	461a      	mov	r2, r3
 80107ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80107f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80107f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80107f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107f8:	e841 2300 	strex	r3, r2, [r1]
 80107fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80107fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010800:	2b00      	cmp	r3, #0
 8010802:	d1e6      	bne.n	80107d2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010808:	2b01      	cmp	r3, #1
 801080a:	d12e      	bne.n	801086a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2200      	movs	r2, #0
 8010810:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010818:	693b      	ldr	r3, [r7, #16]
 801081a:	e853 3f00 	ldrex	r3, [r3]
 801081e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	f023 0310 	bic.w	r3, r3, #16
 8010826:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	461a      	mov	r2, r3
 801082e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010830:	61fb      	str	r3, [r7, #28]
 8010832:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010834:	69b9      	ldr	r1, [r7, #24]
 8010836:	69fa      	ldr	r2, [r7, #28]
 8010838:	e841 2300 	strex	r3, r2, [r1]
 801083c:	617b      	str	r3, [r7, #20]
   return(result);
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d1e6      	bne.n	8010812 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	69db      	ldr	r3, [r3, #28]
 801084a:	f003 0310 	and.w	r3, r3, #16
 801084e:	2b10      	cmp	r3, #16
 8010850:	d103      	bne.n	801085a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	2210      	movs	r2, #16
 8010858:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010860:	4619      	mov	r1, r3
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	f7f0 ff74 	bl	8001750 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010868:	e00b      	b.n	8010882 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f7fe fc92 	bl	800f194 <HAL_UART_RxCpltCallback>
}
 8010870:	e007      	b.n	8010882 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	699a      	ldr	r2, [r3, #24]
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	f042 0208 	orr.w	r2, r2, #8
 8010880:	619a      	str	r2, [r3, #24]
}
 8010882:	bf00      	nop
 8010884:	3770      	adds	r7, #112	@ 0x70
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	58000c00 	.word	0x58000c00

08010890 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b09c      	sub	sp, #112	@ 0x70
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801089e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80108a8:	2b22      	cmp	r3, #34	@ 0x22
 80108aa:	f040 80be 	bne.w	8010a2a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80108bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80108be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80108c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80108c6:	4013      	ands	r3, r2
 80108c8:	b29a      	uxth	r2, r3
 80108ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80108cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80108d2:	1c9a      	adds	r2, r3, #2
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80108de:	b29b      	uxth	r3, r3
 80108e0:	3b01      	subs	r3, #1
 80108e2:	b29a      	uxth	r2, r3
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	f040 80a1 	bne.w	8010a3a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010900:	e853 3f00 	ldrex	r3, [r3]
 8010904:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801090c:	667b      	str	r3, [r7, #100]	@ 0x64
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	461a      	mov	r2, r3
 8010914:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010916:	657b      	str	r3, [r7, #84]	@ 0x54
 8010918:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801091a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801091c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801091e:	e841 2300 	strex	r3, r2, [r1]
 8010922:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010926:	2b00      	cmp	r3, #0
 8010928:	d1e6      	bne.n	80108f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	3308      	adds	r3, #8
 8010930:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010934:	e853 3f00 	ldrex	r3, [r3]
 8010938:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801093a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801093c:	f023 0301 	bic.w	r3, r3, #1
 8010940:	663b      	str	r3, [r7, #96]	@ 0x60
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	3308      	adds	r3, #8
 8010948:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801094a:	643a      	str	r2, [r7, #64]	@ 0x40
 801094c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801094e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010950:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010952:	e841 2300 	strex	r3, r2, [r1]
 8010956:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801095a:	2b00      	cmp	r3, #0
 801095c:	d1e5      	bne.n	801092a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2220      	movs	r2, #32
 8010962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2200      	movs	r2, #0
 801096a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2200      	movs	r2, #0
 8010970:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	4a33      	ldr	r2, [pc, #204]	@ (8010a44 <UART_RxISR_16BIT+0x1b4>)
 8010978:	4293      	cmp	r3, r2
 801097a:	d01f      	beq.n	80109bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	685b      	ldr	r3, [r3, #4]
 8010982:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010986:	2b00      	cmp	r3, #0
 8010988:	d018      	beq.n	80109bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010990:	6a3b      	ldr	r3, [r7, #32]
 8010992:	e853 3f00 	ldrex	r3, [r3]
 8010996:	61fb      	str	r3, [r7, #28]
   return(result);
 8010998:	69fb      	ldr	r3, [r7, #28]
 801099a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801099e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	461a      	mov	r2, r3
 80109a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80109a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80109aa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80109ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80109b0:	e841 2300 	strex	r3, r2, [r1]
 80109b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80109b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d1e6      	bne.n	801098a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d12e      	bne.n	8010a22 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2200      	movs	r2, #0
 80109c8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	e853 3f00 	ldrex	r3, [r3]
 80109d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	f023 0310 	bic.w	r3, r3, #16
 80109de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	461a      	mov	r2, r3
 80109e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80109e8:	61bb      	str	r3, [r7, #24]
 80109ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ec:	6979      	ldr	r1, [r7, #20]
 80109ee:	69ba      	ldr	r2, [r7, #24]
 80109f0:	e841 2300 	strex	r3, r2, [r1]
 80109f4:	613b      	str	r3, [r7, #16]
   return(result);
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d1e6      	bne.n	80109ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	69db      	ldr	r3, [r3, #28]
 8010a02:	f003 0310 	and.w	r3, r3, #16
 8010a06:	2b10      	cmp	r3, #16
 8010a08:	d103      	bne.n	8010a12 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	2210      	movs	r2, #16
 8010a10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010a18:	4619      	mov	r1, r3
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f7f0 fe98 	bl	8001750 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010a20:	e00b      	b.n	8010a3a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	f7fe fbb6 	bl	800f194 <HAL_UART_RxCpltCallback>
}
 8010a28:	e007      	b.n	8010a3a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	699a      	ldr	r2, [r3, #24]
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	f042 0208 	orr.w	r2, r2, #8
 8010a38:	619a      	str	r2, [r3, #24]
}
 8010a3a:	bf00      	nop
 8010a3c:	3770      	adds	r7, #112	@ 0x70
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	58000c00 	.word	0x58000c00

08010a48 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b0ac      	sub	sp, #176	@ 0xb0
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010a56:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	69db      	ldr	r3, [r3, #28]
 8010a60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	689b      	ldr	r3, [r3, #8]
 8010a74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a7e:	2b22      	cmp	r3, #34	@ 0x22
 8010a80:	f040 8180 	bne.w	8010d84 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010a8a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010a8e:	e123      	b.n	8010cd8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a96:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010a9a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8010a9e:	b2d9      	uxtb	r1, r3
 8010aa0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8010aa4:	b2da      	uxtb	r2, r3
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010aaa:	400a      	ands	r2, r1
 8010aac:	b2d2      	uxtb	r2, r2
 8010aae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010ab4:	1c5a      	adds	r2, r3, #1
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	3b01      	subs	r3, #1
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	69db      	ldr	r3, [r3, #28]
 8010ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ada:	f003 0307 	and.w	r3, r3, #7
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d053      	beq.n	8010b8a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ae6:	f003 0301 	and.w	r3, r3, #1
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d011      	beq.n	8010b12 <UART_RxISR_8BIT_FIFOEN+0xca>
 8010aee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d00b      	beq.n	8010b12 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	2201      	movs	r2, #1
 8010b00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b08:	f043 0201 	orr.w	r2, r3, #1
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b16:	f003 0302 	and.w	r3, r3, #2
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d011      	beq.n	8010b42 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010b22:	f003 0301 	and.w	r3, r3, #1
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d00b      	beq.n	8010b42 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	2202      	movs	r2, #2
 8010b30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b38:	f043 0204 	orr.w	r2, r3, #4
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b46:	f003 0304 	and.w	r3, r3, #4
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d011      	beq.n	8010b72 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010b52:	f003 0301 	and.w	r3, r3, #1
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d00b      	beq.n	8010b72 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	2204      	movs	r2, #4
 8010b60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b68:	f043 0202 	orr.w	r2, r3, #2
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d006      	beq.n	8010b8a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	f7fe fb13 	bl	800f1a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2200      	movs	r2, #0
 8010b86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010b90:	b29b      	uxth	r3, r3
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f040 80a0 	bne.w	8010cd8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010ba0:	e853 3f00 	ldrex	r3, [r3]
 8010ba4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8010ba6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010bac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010bba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010bbc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bbe:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8010bc0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010bc2:	e841 2300 	strex	r3, r2, [r1]
 8010bc6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8010bc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d1e4      	bne.n	8010b98 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	3308      	adds	r3, #8
 8010bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010bd8:	e853 3f00 	ldrex	r3, [r3]
 8010bdc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8010bde:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010be0:	4b6e      	ldr	r3, [pc, #440]	@ (8010d9c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8010be2:	4013      	ands	r3, r2
 8010be4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	3308      	adds	r3, #8
 8010bee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010bf2:	66ba      	str	r2, [r7, #104]	@ 0x68
 8010bf4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bf6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8010bf8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010bfa:	e841 2300 	strex	r3, r2, [r1]
 8010bfe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8010c00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d1e3      	bne.n	8010bce <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2220      	movs	r2, #32
 8010c0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	2200      	movs	r2, #0
 8010c12:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2200      	movs	r2, #0
 8010c18:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	4a60      	ldr	r2, [pc, #384]	@ (8010da0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d021      	beq.n	8010c68 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d01a      	beq.n	8010c68 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c3a:	e853 3f00 	ldrex	r3, [r3]
 8010c3e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010c46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	461a      	mov	r2, r3
 8010c50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010c54:	657b      	str	r3, [r7, #84]	@ 0x54
 8010c56:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c58:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010c5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010c5c:	e841 2300 	strex	r3, r2, [r1]
 8010c60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d1e4      	bne.n	8010c32 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c6c:	2b01      	cmp	r3, #1
 8010c6e:	d130      	bne.n	8010cd2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2200      	movs	r2, #0
 8010c74:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c7e:	e853 3f00 	ldrex	r3, [r3]
 8010c82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c86:	f023 0310 	bic.w	r3, r3, #16
 8010c8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	461a      	mov	r2, r3
 8010c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010c98:	643b      	str	r3, [r7, #64]	@ 0x40
 8010c9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010c9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010ca0:	e841 2300 	strex	r3, r2, [r1]
 8010ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d1e4      	bne.n	8010c76 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	69db      	ldr	r3, [r3, #28]
 8010cb2:	f003 0310 	and.w	r3, r3, #16
 8010cb6:	2b10      	cmp	r3, #16
 8010cb8:	d103      	bne.n	8010cc2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	2210      	movs	r2, #16
 8010cc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010cc8:	4619      	mov	r1, r3
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f7f0 fd40 	bl	8001750 <HAL_UARTEx_RxEventCallback>
 8010cd0:	e002      	b.n	8010cd8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f7fe fa5e 	bl	800f194 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010cd8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d006      	beq.n	8010cee <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ce4:	f003 0320 	and.w	r3, r3, #32
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	f47f aed1 	bne.w	8010a90 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010cf4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010cf8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d049      	beq.n	8010d94 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010d06:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d242      	bcs.n	8010d94 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	3308      	adds	r3, #8
 8010d14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d16:	6a3b      	ldr	r3, [r7, #32]
 8010d18:	e853 3f00 	ldrex	r3, [r3]
 8010d1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d1e:	69fb      	ldr	r3, [r7, #28]
 8010d20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010d24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	3308      	adds	r3, #8
 8010d2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010d32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010d34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010d38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d3a:	e841 2300 	strex	r3, r2, [r1]
 8010d3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d1e3      	bne.n	8010d0e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	4a16      	ldr	r2, [pc, #88]	@ (8010da4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010d4a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	e853 3f00 	ldrex	r3, [r3]
 8010d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	f043 0320 	orr.w	r3, r3, #32
 8010d60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	461a      	mov	r2, r3
 8010d6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010d6e:	61bb      	str	r3, [r7, #24]
 8010d70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d72:	6979      	ldr	r1, [r7, #20]
 8010d74:	69ba      	ldr	r2, [r7, #24]
 8010d76:	e841 2300 	strex	r3, r2, [r1]
 8010d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d1e4      	bne.n	8010d4c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010d82:	e007      	b.n	8010d94 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	699a      	ldr	r2, [r3, #24]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	f042 0208 	orr.w	r2, r2, #8
 8010d92:	619a      	str	r2, [r3, #24]
}
 8010d94:	bf00      	nop
 8010d96:	37b0      	adds	r7, #176	@ 0xb0
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	effffffe 	.word	0xeffffffe
 8010da0:	58000c00 	.word	0x58000c00
 8010da4:	080106d9 	.word	0x080106d9

08010da8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b0ae      	sub	sp, #184	@ 0xb8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010db6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	69db      	ldr	r3, [r3, #28]
 8010dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	689b      	ldr	r3, [r3, #8]
 8010dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010dde:	2b22      	cmp	r3, #34	@ 0x22
 8010de0:	f040 8184 	bne.w	80110ec <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010dea:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010dee:	e127      	b.n	8011040 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010df6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010e02:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8010e06:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8010e0a:	4013      	ands	r3, r2
 8010e0c:	b29a      	uxth	r2, r3
 8010e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010e12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010e18:	1c9a      	adds	r2, r3, #2
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010e24:	b29b      	uxth	r3, r3
 8010e26:	3b01      	subs	r3, #1
 8010e28:	b29a      	uxth	r2, r3
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	69db      	ldr	r3, [r3, #28]
 8010e36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010e3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010e3e:	f003 0307 	and.w	r3, r3, #7
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d053      	beq.n	8010eee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010e46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010e4a:	f003 0301 	and.w	r3, r3, #1
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d011      	beq.n	8010e76 <UART_RxISR_16BIT_FIFOEN+0xce>
 8010e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d00b      	beq.n	8010e76 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	2201      	movs	r2, #1
 8010e64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e6c:	f043 0201 	orr.w	r2, r3, #1
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010e76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010e7a:	f003 0302 	and.w	r3, r3, #2
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d011      	beq.n	8010ea6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010e82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010e86:	f003 0301 	and.w	r3, r3, #1
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d00b      	beq.n	8010ea6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2202      	movs	r2, #2
 8010e94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e9c:	f043 0204 	orr.w	r2, r3, #4
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010ea6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010eaa:	f003 0304 	and.w	r3, r3, #4
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d011      	beq.n	8010ed6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010eb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010eb6:	f003 0301 	and.w	r3, r3, #1
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d00b      	beq.n	8010ed6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	2204      	movs	r2, #4
 8010ec4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ecc:	f043 0202 	orr.w	r2, r3, #2
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d006      	beq.n	8010eee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f7fe f961 	bl	800f1a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010ef4:	b29b      	uxth	r3, r3
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	f040 80a2 	bne.w	8011040 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010f04:	e853 3f00 	ldrex	r3, [r3]
 8010f08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010f0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010f0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010f10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	461a      	mov	r2, r3
 8010f1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010f1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010f22:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010f26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010f2a:	e841 2300 	strex	r3, r2, [r1]
 8010f2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010f30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d1e2      	bne.n	8010efc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	3308      	adds	r3, #8
 8010f3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010f40:	e853 3f00 	ldrex	r3, [r3]
 8010f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010f46:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010f48:	4b6e      	ldr	r3, [pc, #440]	@ (8011104 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010f4a:	4013      	ands	r3, r2
 8010f4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	3308      	adds	r3, #8
 8010f56:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8010f5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010f60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010f62:	e841 2300 	strex	r3, r2, [r1]
 8010f66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010f68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d1e3      	bne.n	8010f36 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2220      	movs	r2, #32
 8010f72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2200      	movs	r2, #0
 8010f7a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	4a60      	ldr	r2, [pc, #384]	@ (8011108 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010f88:	4293      	cmp	r3, r2
 8010f8a:	d021      	beq.n	8010fd0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d01a      	beq.n	8010fd0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fa2:	e853 3f00 	ldrex	r3, [r3]
 8010fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010fa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010faa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010fae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	461a      	mov	r2, r3
 8010fb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010fbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010fbe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010fc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010fc4:	e841 2300 	strex	r3, r2, [r1]
 8010fc8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010fca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d1e4      	bne.n	8010f9a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fd4:	2b01      	cmp	r3, #1
 8010fd6:	d130      	bne.n	801103a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fe6:	e853 3f00 	ldrex	r3, [r3]
 8010fea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fee:	f023 0310 	bic.w	r3, r3, #16
 8010ff2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	461a      	mov	r2, r3
 8010ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011000:	647b      	str	r3, [r7, #68]	@ 0x44
 8011002:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011004:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011006:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011008:	e841 2300 	strex	r3, r2, [r1]
 801100c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801100e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011010:	2b00      	cmp	r3, #0
 8011012:	d1e4      	bne.n	8010fde <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	69db      	ldr	r3, [r3, #28]
 801101a:	f003 0310 	and.w	r3, r3, #16
 801101e:	2b10      	cmp	r3, #16
 8011020:	d103      	bne.n	801102a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	2210      	movs	r2, #16
 8011028:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011030:	4619      	mov	r1, r3
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f7f0 fb8c 	bl	8001750 <HAL_UARTEx_RxEventCallback>
 8011038:	e002      	b.n	8011040 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f7fe f8aa 	bl	800f194 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011040:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8011044:	2b00      	cmp	r3, #0
 8011046:	d006      	beq.n	8011056 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8011048:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801104c:	f003 0320 	and.w	r3, r3, #32
 8011050:	2b00      	cmp	r3, #0
 8011052:	f47f aecd 	bne.w	8010df0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801105c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011060:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011064:	2b00      	cmp	r3, #0
 8011066:	d049      	beq.n	80110fc <UART_RxISR_16BIT_FIFOEN+0x354>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801106e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8011072:	429a      	cmp	r2, r3
 8011074:	d242      	bcs.n	80110fc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	3308      	adds	r3, #8
 801107c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011080:	e853 3f00 	ldrex	r3, [r3]
 8011084:	623b      	str	r3, [r7, #32]
   return(result);
 8011086:	6a3b      	ldr	r3, [r7, #32]
 8011088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801108c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	3308      	adds	r3, #8
 8011096:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801109a:	633a      	str	r2, [r7, #48]	@ 0x30
 801109c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801109e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80110a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110a2:	e841 2300 	strex	r3, r2, [r1]
 80110a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80110a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d1e3      	bne.n	8011076 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	4a16      	ldr	r2, [pc, #88]	@ (801110c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80110b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	e853 3f00 	ldrex	r3, [r3]
 80110c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	f043 0320 	orr.w	r3, r3, #32
 80110c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	461a      	mov	r2, r3
 80110d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80110d6:	61fb      	str	r3, [r7, #28]
 80110d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110da:	69b9      	ldr	r1, [r7, #24]
 80110dc:	69fa      	ldr	r2, [r7, #28]
 80110de:	e841 2300 	strex	r3, r2, [r1]
 80110e2:	617b      	str	r3, [r7, #20]
   return(result);
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d1e4      	bne.n	80110b4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80110ea:	e007      	b.n	80110fc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	699a      	ldr	r2, [r3, #24]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	f042 0208 	orr.w	r2, r2, #8
 80110fa:	619a      	str	r2, [r3, #24]
}
 80110fc:	bf00      	nop
 80110fe:	37b8      	adds	r7, #184	@ 0xb8
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}
 8011104:	effffffe 	.word	0xeffffffe
 8011108:	58000c00 	.word	0x58000c00
 801110c:	08010891 	.word	0x08010891

08011110 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011110:	b480      	push	{r7}
 8011112:	b083      	sub	sp, #12
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011118:	bf00      	nop
 801111a:	370c      	adds	r7, #12
 801111c:	46bd      	mov	sp, r7
 801111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011122:	4770      	bx	lr

08011124 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011124:	b480      	push	{r7}
 8011126:	b083      	sub	sp, #12
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801112c:	bf00      	nop
 801112e:	370c      	adds	r7, #12
 8011130:	46bd      	mov	sp, r7
 8011132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011136:	4770      	bx	lr

08011138 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011138:	b480      	push	{r7}
 801113a:	b083      	sub	sp, #12
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011140:	bf00      	nop
 8011142:	370c      	adds	r7, #12
 8011144:	46bd      	mov	sp, r7
 8011146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114a:	4770      	bx	lr

0801114c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801114c:	b480      	push	{r7}
 801114e:	b085      	sub	sp, #20
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801115a:	2b01      	cmp	r3, #1
 801115c:	d101      	bne.n	8011162 <HAL_UARTEx_DisableFifoMode+0x16>
 801115e:	2302      	movs	r3, #2
 8011160:	e027      	b.n	80111b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2201      	movs	r2, #1
 8011166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	2224      	movs	r2, #36	@ 0x24
 801116e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	f022 0201 	bic.w	r2, r2, #1
 8011188:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011190:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2200      	movs	r2, #0
 8011196:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	68fa      	ldr	r2, [r7, #12]
 801119e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2220      	movs	r2, #32
 80111a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2200      	movs	r2, #0
 80111ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80111b0:	2300      	movs	r3, #0
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3714      	adds	r7, #20
 80111b6:	46bd      	mov	sp, r7
 80111b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111bc:	4770      	bx	lr

080111be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80111be:	b580      	push	{r7, lr}
 80111c0:	b084      	sub	sp, #16
 80111c2:	af00      	add	r7, sp, #0
 80111c4:	6078      	str	r0, [r7, #4]
 80111c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80111ce:	2b01      	cmp	r3, #1
 80111d0:	d101      	bne.n	80111d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80111d2:	2302      	movs	r3, #2
 80111d4:	e02d      	b.n	8011232 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2201      	movs	r2, #1
 80111da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2224      	movs	r2, #36	@ 0x24
 80111e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	681a      	ldr	r2, [r3, #0]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f022 0201 	bic.w	r2, r2, #1
 80111fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	689b      	ldr	r3, [r3, #8]
 8011204:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	683a      	ldr	r2, [r7, #0]
 801120e:	430a      	orrs	r2, r1
 8011210:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f000 f8a0 	bl	8011358 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	68fa      	ldr	r2, [r7, #12]
 801121e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2220      	movs	r2, #32
 8011224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2200      	movs	r2, #0
 801122c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011230:	2300      	movs	r3, #0
}
 8011232:	4618      	mov	r0, r3
 8011234:	3710      	adds	r7, #16
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}

0801123a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801123a:	b580      	push	{r7, lr}
 801123c:	b084      	sub	sp, #16
 801123e:	af00      	add	r7, sp, #0
 8011240:	6078      	str	r0, [r7, #4]
 8011242:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801124a:	2b01      	cmp	r3, #1
 801124c:	d101      	bne.n	8011252 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801124e:	2302      	movs	r3, #2
 8011250:	e02d      	b.n	80112ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	2201      	movs	r2, #1
 8011256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	2224      	movs	r2, #36	@ 0x24
 801125e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	681a      	ldr	r2, [r3, #0]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	f022 0201 	bic.w	r2, r2, #1
 8011278:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	689b      	ldr	r3, [r3, #8]
 8011280:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	683a      	ldr	r2, [r7, #0]
 801128a:	430a      	orrs	r2, r1
 801128c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f000 f862 	bl	8011358 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	68fa      	ldr	r2, [r7, #12]
 801129a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2220      	movs	r2, #32
 80112a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2200      	movs	r2, #0
 80112a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80112ac:	2300      	movs	r3, #0
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	3710      	adds	r7, #16
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}

080112b6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80112b6:	b580      	push	{r7, lr}
 80112b8:	b08c      	sub	sp, #48	@ 0x30
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	60f8      	str	r0, [r7, #12]
 80112be:	60b9      	str	r1, [r7, #8]
 80112c0:	4613      	mov	r3, r2
 80112c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80112c4:	2300      	movs	r3, #0
 80112c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80112d0:	2b20      	cmp	r3, #32
 80112d2:	d13b      	bne.n	801134c <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d002      	beq.n	80112e0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 80112da:	88fb      	ldrh	r3, [r7, #6]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d101      	bne.n	80112e4 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 80112e0:	2301      	movs	r3, #1
 80112e2:	e034      	b.n	801134e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2201      	movs	r2, #1
 80112e8:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	2200      	movs	r2, #0
 80112ee:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 80112f0:	88fb      	ldrh	r3, [r7, #6]
 80112f2:	461a      	mov	r2, r3
 80112f4:	68b9      	ldr	r1, [r7, #8]
 80112f6:	68f8      	ldr	r0, [r7, #12]
 80112f8:	f7fe fe82 	bl	8010000 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011300:	2b01      	cmp	r3, #1
 8011302:	d11d      	bne.n	8011340 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	2210      	movs	r2, #16
 801130a:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011312:	69bb      	ldr	r3, [r7, #24]
 8011314:	e853 3f00 	ldrex	r3, [r3]
 8011318:	617b      	str	r3, [r7, #20]
   return(result);
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	f043 0310 	orr.w	r3, r3, #16
 8011320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	461a      	mov	r2, r3
 8011328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801132a:	627b      	str	r3, [r7, #36]	@ 0x24
 801132c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801132e:	6a39      	ldr	r1, [r7, #32]
 8011330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011332:	e841 2300 	strex	r3, r2, [r1]
 8011336:	61fb      	str	r3, [r7, #28]
   return(result);
 8011338:	69fb      	ldr	r3, [r7, #28]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d1e6      	bne.n	801130c <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 801133e:	e002      	b.n	8011346 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8011340:	2301      	movs	r3, #1
 8011342:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8011346:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801134a:	e000      	b.n	801134e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 801134c:	2302      	movs	r3, #2
  }
}
 801134e:	4618      	mov	r0, r3
 8011350:	3730      	adds	r7, #48	@ 0x30
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}
	...

08011358 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011358:	b480      	push	{r7}
 801135a:	b085      	sub	sp, #20
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011364:	2b00      	cmp	r3, #0
 8011366:	d108      	bne.n	801137a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2201      	movs	r2, #1
 801136c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2201      	movs	r2, #1
 8011374:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011378:	e031      	b.n	80113de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801137a:	2310      	movs	r3, #16
 801137c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801137e:	2310      	movs	r3, #16
 8011380:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	689b      	ldr	r3, [r3, #8]
 8011388:	0e5b      	lsrs	r3, r3, #25
 801138a:	b2db      	uxtb	r3, r3
 801138c:	f003 0307 	and.w	r3, r3, #7
 8011390:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	689b      	ldr	r3, [r3, #8]
 8011398:	0f5b      	lsrs	r3, r3, #29
 801139a:	b2db      	uxtb	r3, r3
 801139c:	f003 0307 	and.w	r3, r3, #7
 80113a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80113a2:	7bbb      	ldrb	r3, [r7, #14]
 80113a4:	7b3a      	ldrb	r2, [r7, #12]
 80113a6:	4911      	ldr	r1, [pc, #68]	@ (80113ec <UARTEx_SetNbDataToProcess+0x94>)
 80113a8:	5c8a      	ldrb	r2, [r1, r2]
 80113aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80113ae:	7b3a      	ldrb	r2, [r7, #12]
 80113b0:	490f      	ldr	r1, [pc, #60]	@ (80113f0 <UARTEx_SetNbDataToProcess+0x98>)
 80113b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80113b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80113b8:	b29a      	uxth	r2, r3
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80113c0:	7bfb      	ldrb	r3, [r7, #15]
 80113c2:	7b7a      	ldrb	r2, [r7, #13]
 80113c4:	4909      	ldr	r1, [pc, #36]	@ (80113ec <UARTEx_SetNbDataToProcess+0x94>)
 80113c6:	5c8a      	ldrb	r2, [r1, r2]
 80113c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80113cc:	7b7a      	ldrb	r2, [r7, #13]
 80113ce:	4908      	ldr	r1, [pc, #32]	@ (80113f0 <UARTEx_SetNbDataToProcess+0x98>)
 80113d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80113d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80113de:	bf00      	nop
 80113e0:	3714      	adds	r7, #20
 80113e2:	46bd      	mov	sp, r7
 80113e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e8:	4770      	bx	lr
 80113ea:	bf00      	nop
 80113ec:	0801a334 	.word	0x0801a334
 80113f0:	0801a33c 	.word	0x0801a33c

080113f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80113f4:	b084      	sub	sp, #16
 80113f6:	b580      	push	{r7, lr}
 80113f8:	b084      	sub	sp, #16
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	6078      	str	r0, [r7, #4]
 80113fe:	f107 001c 	add.w	r0, r7, #28
 8011402:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011406:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801140a:	2b01      	cmp	r3, #1
 801140c:	d121      	bne.n	8011452 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011412:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	68da      	ldr	r2, [r3, #12]
 801141e:	4b2c      	ldr	r3, [pc, #176]	@ (80114d0 <USB_CoreInit+0xdc>)
 8011420:	4013      	ands	r3, r2
 8011422:	687a      	ldr	r2, [r7, #4]
 8011424:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	68db      	ldr	r3, [r3, #12]
 801142a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011432:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011436:	2b01      	cmp	r3, #1
 8011438:	d105      	bne.n	8011446 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	68db      	ldr	r3, [r3, #12]
 801143e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f001 faf6 	bl	8012a38 <USB_CoreReset>
 801144c:	4603      	mov	r3, r0
 801144e:	73fb      	strb	r3, [r7, #15]
 8011450:	e01b      	b.n	801148a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f001 faea 	bl	8012a38 <USB_CoreReset>
 8011464:	4603      	mov	r3, r0
 8011466:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011468:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801146c:	2b00      	cmp	r3, #0
 801146e:	d106      	bne.n	801147e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011474:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	639a      	str	r2, [r3, #56]	@ 0x38
 801147c:	e005      	b.n	801148a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011482:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801148a:	7fbb      	ldrb	r3, [r7, #30]
 801148c:	2b01      	cmp	r3, #1
 801148e:	d116      	bne.n	80114be <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011494:	b29a      	uxth	r2, r3
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801149e:	4b0d      	ldr	r3, [pc, #52]	@ (80114d4 <USB_CoreInit+0xe0>)
 80114a0:	4313      	orrs	r3, r2
 80114a2:	687a      	ldr	r2, [r7, #4]
 80114a4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	689b      	ldr	r3, [r3, #8]
 80114aa:	f043 0206 	orr.w	r2, r3, #6
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	689b      	ldr	r3, [r3, #8]
 80114b6:	f043 0220 	orr.w	r2, r3, #32
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80114be:	7bfb      	ldrb	r3, [r7, #15]
}
 80114c0:	4618      	mov	r0, r3
 80114c2:	3710      	adds	r7, #16
 80114c4:	46bd      	mov	sp, r7
 80114c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80114ca:	b004      	add	sp, #16
 80114cc:	4770      	bx	lr
 80114ce:	bf00      	nop
 80114d0:	ffbdffbf 	.word	0xffbdffbf
 80114d4:	03ee0000 	.word	0x03ee0000

080114d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80114d8:	b480      	push	{r7}
 80114da:	b087      	sub	sp, #28
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	60b9      	str	r1, [r7, #8]
 80114e2:	4613      	mov	r3, r2
 80114e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80114e6:	79fb      	ldrb	r3, [r7, #7]
 80114e8:	2b02      	cmp	r3, #2
 80114ea:	d165      	bne.n	80115b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	4a41      	ldr	r2, [pc, #260]	@ (80115f4 <USB_SetTurnaroundTime+0x11c>)
 80114f0:	4293      	cmp	r3, r2
 80114f2:	d906      	bls.n	8011502 <USB_SetTurnaroundTime+0x2a>
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	4a40      	ldr	r2, [pc, #256]	@ (80115f8 <USB_SetTurnaroundTime+0x120>)
 80114f8:	4293      	cmp	r3, r2
 80114fa:	d202      	bcs.n	8011502 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80114fc:	230f      	movs	r3, #15
 80114fe:	617b      	str	r3, [r7, #20]
 8011500:	e062      	b.n	80115c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	4a3c      	ldr	r2, [pc, #240]	@ (80115f8 <USB_SetTurnaroundTime+0x120>)
 8011506:	4293      	cmp	r3, r2
 8011508:	d306      	bcc.n	8011518 <USB_SetTurnaroundTime+0x40>
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	4a3b      	ldr	r2, [pc, #236]	@ (80115fc <USB_SetTurnaroundTime+0x124>)
 801150e:	4293      	cmp	r3, r2
 8011510:	d202      	bcs.n	8011518 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011512:	230e      	movs	r3, #14
 8011514:	617b      	str	r3, [r7, #20]
 8011516:	e057      	b.n	80115c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	4a38      	ldr	r2, [pc, #224]	@ (80115fc <USB_SetTurnaroundTime+0x124>)
 801151c:	4293      	cmp	r3, r2
 801151e:	d306      	bcc.n	801152e <USB_SetTurnaroundTime+0x56>
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	4a37      	ldr	r2, [pc, #220]	@ (8011600 <USB_SetTurnaroundTime+0x128>)
 8011524:	4293      	cmp	r3, r2
 8011526:	d202      	bcs.n	801152e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011528:	230d      	movs	r3, #13
 801152a:	617b      	str	r3, [r7, #20]
 801152c:	e04c      	b.n	80115c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	4a33      	ldr	r2, [pc, #204]	@ (8011600 <USB_SetTurnaroundTime+0x128>)
 8011532:	4293      	cmp	r3, r2
 8011534:	d306      	bcc.n	8011544 <USB_SetTurnaroundTime+0x6c>
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	4a32      	ldr	r2, [pc, #200]	@ (8011604 <USB_SetTurnaroundTime+0x12c>)
 801153a:	4293      	cmp	r3, r2
 801153c:	d802      	bhi.n	8011544 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801153e:	230c      	movs	r3, #12
 8011540:	617b      	str	r3, [r7, #20]
 8011542:	e041      	b.n	80115c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	4a2f      	ldr	r2, [pc, #188]	@ (8011604 <USB_SetTurnaroundTime+0x12c>)
 8011548:	4293      	cmp	r3, r2
 801154a:	d906      	bls.n	801155a <USB_SetTurnaroundTime+0x82>
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	4a2e      	ldr	r2, [pc, #184]	@ (8011608 <USB_SetTurnaroundTime+0x130>)
 8011550:	4293      	cmp	r3, r2
 8011552:	d802      	bhi.n	801155a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011554:	230b      	movs	r3, #11
 8011556:	617b      	str	r3, [r7, #20]
 8011558:	e036      	b.n	80115c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	4a2a      	ldr	r2, [pc, #168]	@ (8011608 <USB_SetTurnaroundTime+0x130>)
 801155e:	4293      	cmp	r3, r2
 8011560:	d906      	bls.n	8011570 <USB_SetTurnaroundTime+0x98>
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	4a29      	ldr	r2, [pc, #164]	@ (801160c <USB_SetTurnaroundTime+0x134>)
 8011566:	4293      	cmp	r3, r2
 8011568:	d802      	bhi.n	8011570 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801156a:	230a      	movs	r3, #10
 801156c:	617b      	str	r3, [r7, #20]
 801156e:	e02b      	b.n	80115c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	4a26      	ldr	r2, [pc, #152]	@ (801160c <USB_SetTurnaroundTime+0x134>)
 8011574:	4293      	cmp	r3, r2
 8011576:	d906      	bls.n	8011586 <USB_SetTurnaroundTime+0xae>
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	4a25      	ldr	r2, [pc, #148]	@ (8011610 <USB_SetTurnaroundTime+0x138>)
 801157c:	4293      	cmp	r3, r2
 801157e:	d202      	bcs.n	8011586 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011580:	2309      	movs	r3, #9
 8011582:	617b      	str	r3, [r7, #20]
 8011584:	e020      	b.n	80115c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	4a21      	ldr	r2, [pc, #132]	@ (8011610 <USB_SetTurnaroundTime+0x138>)
 801158a:	4293      	cmp	r3, r2
 801158c:	d306      	bcc.n	801159c <USB_SetTurnaroundTime+0xc4>
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	4a20      	ldr	r2, [pc, #128]	@ (8011614 <USB_SetTurnaroundTime+0x13c>)
 8011592:	4293      	cmp	r3, r2
 8011594:	d802      	bhi.n	801159c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011596:	2308      	movs	r3, #8
 8011598:	617b      	str	r3, [r7, #20]
 801159a:	e015      	b.n	80115c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	4a1d      	ldr	r2, [pc, #116]	@ (8011614 <USB_SetTurnaroundTime+0x13c>)
 80115a0:	4293      	cmp	r3, r2
 80115a2:	d906      	bls.n	80115b2 <USB_SetTurnaroundTime+0xda>
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	4a1c      	ldr	r2, [pc, #112]	@ (8011618 <USB_SetTurnaroundTime+0x140>)
 80115a8:	4293      	cmp	r3, r2
 80115aa:	d202      	bcs.n	80115b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80115ac:	2307      	movs	r3, #7
 80115ae:	617b      	str	r3, [r7, #20]
 80115b0:	e00a      	b.n	80115c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80115b2:	2306      	movs	r3, #6
 80115b4:	617b      	str	r3, [r7, #20]
 80115b6:	e007      	b.n	80115c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80115b8:	79fb      	ldrb	r3, [r7, #7]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d102      	bne.n	80115c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80115be:	2309      	movs	r3, #9
 80115c0:	617b      	str	r3, [r7, #20]
 80115c2:	e001      	b.n	80115c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80115c4:	2309      	movs	r3, #9
 80115c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	68db      	ldr	r3, [r3, #12]
 80115cc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	68da      	ldr	r2, [r3, #12]
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	029b      	lsls	r3, r3, #10
 80115dc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80115e0:	431a      	orrs	r2, r3
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80115e6:	2300      	movs	r3, #0
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	371c      	adds	r7, #28
 80115ec:	46bd      	mov	sp, r7
 80115ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f2:	4770      	bx	lr
 80115f4:	00d8acbf 	.word	0x00d8acbf
 80115f8:	00e4e1c0 	.word	0x00e4e1c0
 80115fc:	00f42400 	.word	0x00f42400
 8011600:	01067380 	.word	0x01067380
 8011604:	011a499f 	.word	0x011a499f
 8011608:	01312cff 	.word	0x01312cff
 801160c:	014ca43f 	.word	0x014ca43f
 8011610:	016e3600 	.word	0x016e3600
 8011614:	01a6ab1f 	.word	0x01a6ab1f
 8011618:	01e84800 	.word	0x01e84800

0801161c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801161c:	b480      	push	{r7}
 801161e:	b083      	sub	sp, #12
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	689b      	ldr	r3, [r3, #8]
 8011628:	f043 0201 	orr.w	r2, r3, #1
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011630:	2300      	movs	r3, #0
}
 8011632:	4618      	mov	r0, r3
 8011634:	370c      	adds	r7, #12
 8011636:	46bd      	mov	sp, r7
 8011638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163c:	4770      	bx	lr

0801163e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801163e:	b480      	push	{r7}
 8011640:	b083      	sub	sp, #12
 8011642:	af00      	add	r7, sp, #0
 8011644:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	689b      	ldr	r3, [r3, #8]
 801164a:	f023 0201 	bic.w	r2, r3, #1
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011652:	2300      	movs	r3, #0
}
 8011654:	4618      	mov	r0, r3
 8011656:	370c      	adds	r7, #12
 8011658:	46bd      	mov	sp, r7
 801165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165e:	4770      	bx	lr

08011660 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b084      	sub	sp, #16
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
 8011668:	460b      	mov	r3, r1
 801166a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801166c:	2300      	movs	r3, #0
 801166e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	68db      	ldr	r3, [r3, #12]
 8011674:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801167c:	78fb      	ldrb	r3, [r7, #3]
 801167e:	2b01      	cmp	r3, #1
 8011680:	d115      	bne.n	80116ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	68db      	ldr	r3, [r3, #12]
 8011686:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801168e:	200a      	movs	r0, #10
 8011690:	f7f2 fcde 	bl	8004050 <HAL_Delay>
      ms += 10U;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	330a      	adds	r3, #10
 8011698:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f001 f93b 	bl	8012916 <USB_GetMode>
 80116a0:	4603      	mov	r3, r0
 80116a2:	2b01      	cmp	r3, #1
 80116a4:	d01e      	beq.n	80116e4 <USB_SetCurrentMode+0x84>
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80116aa:	d9f0      	bls.n	801168e <USB_SetCurrentMode+0x2e>
 80116ac:	e01a      	b.n	80116e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80116ae:	78fb      	ldrb	r3, [r7, #3]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d115      	bne.n	80116e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	68db      	ldr	r3, [r3, #12]
 80116b8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80116c0:	200a      	movs	r0, #10
 80116c2:	f7f2 fcc5 	bl	8004050 <HAL_Delay>
      ms += 10U;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	330a      	adds	r3, #10
 80116ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f001 f922 	bl	8012916 <USB_GetMode>
 80116d2:	4603      	mov	r3, r0
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d005      	beq.n	80116e4 <USB_SetCurrentMode+0x84>
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	2bc7      	cmp	r3, #199	@ 0xc7
 80116dc:	d9f0      	bls.n	80116c0 <USB_SetCurrentMode+0x60>
 80116de:	e001      	b.n	80116e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80116e0:	2301      	movs	r3, #1
 80116e2:	e005      	b.n	80116f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2bc8      	cmp	r3, #200	@ 0xc8
 80116e8:	d101      	bne.n	80116ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80116ea:	2301      	movs	r3, #1
 80116ec:	e000      	b.n	80116f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80116ee:	2300      	movs	r3, #0
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3710      	adds	r7, #16
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}

080116f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80116f8:	b084      	sub	sp, #16
 80116fa:	b580      	push	{r7, lr}
 80116fc:	b086      	sub	sp, #24
 80116fe:	af00      	add	r7, sp, #0
 8011700:	6078      	str	r0, [r7, #4]
 8011702:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801170a:	2300      	movs	r3, #0
 801170c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011712:	2300      	movs	r3, #0
 8011714:	613b      	str	r3, [r7, #16]
 8011716:	e009      	b.n	801172c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011718:	687a      	ldr	r2, [r7, #4]
 801171a:	693b      	ldr	r3, [r7, #16]
 801171c:	3340      	adds	r3, #64	@ 0x40
 801171e:	009b      	lsls	r3, r3, #2
 8011720:	4413      	add	r3, r2
 8011722:	2200      	movs	r2, #0
 8011724:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	3301      	adds	r3, #1
 801172a:	613b      	str	r3, [r7, #16]
 801172c:	693b      	ldr	r3, [r7, #16]
 801172e:	2b0e      	cmp	r3, #14
 8011730:	d9f2      	bls.n	8011718 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011732:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011736:	2b00      	cmp	r3, #0
 8011738:	d11c      	bne.n	8011774 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	68fa      	ldr	r2, [r7, #12]
 8011744:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011748:	f043 0302 	orr.w	r3, r3, #2
 801174c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011752:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	601a      	str	r2, [r3, #0]
 8011772:	e005      	b.n	8011780 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011778:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011786:	461a      	mov	r2, r3
 8011788:	2300      	movs	r3, #0
 801178a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801178c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8011790:	2b01      	cmp	r3, #1
 8011792:	d10d      	bne.n	80117b0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011798:	2b00      	cmp	r3, #0
 801179a:	d104      	bne.n	80117a6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801179c:	2100      	movs	r1, #0
 801179e:	6878      	ldr	r0, [r7, #4]
 80117a0:	f000 f968 	bl	8011a74 <USB_SetDevSpeed>
 80117a4:	e008      	b.n	80117b8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80117a6:	2101      	movs	r1, #1
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	f000 f963 	bl	8011a74 <USB_SetDevSpeed>
 80117ae:	e003      	b.n	80117b8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80117b0:	2103      	movs	r1, #3
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f000 f95e 	bl	8011a74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80117b8:	2110      	movs	r1, #16
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	f000 f8fa 	bl	80119b4 <USB_FlushTxFifo>
 80117c0:	4603      	mov	r3, r0
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d001      	beq.n	80117ca <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80117c6:	2301      	movs	r3, #1
 80117c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f000 f924 	bl	8011a18 <USB_FlushRxFifo>
 80117d0:	4603      	mov	r3, r0
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d001      	beq.n	80117da <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80117d6:	2301      	movs	r3, #1
 80117d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117e0:	461a      	mov	r2, r3
 80117e2:	2300      	movs	r3, #0
 80117e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117ec:	461a      	mov	r2, r3
 80117ee:	2300      	movs	r3, #0
 80117f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117f8:	461a      	mov	r2, r3
 80117fa:	2300      	movs	r3, #0
 80117fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80117fe:	2300      	movs	r3, #0
 8011800:	613b      	str	r3, [r7, #16]
 8011802:	e043      	b.n	801188c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	015a      	lsls	r2, r3, #5
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	4413      	add	r3, r2
 801180c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011816:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801181a:	d118      	bne.n	801184e <USB_DevInit+0x156>
    {
      if (i == 0U)
 801181c:	693b      	ldr	r3, [r7, #16]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d10a      	bne.n	8011838 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	015a      	lsls	r2, r3, #5
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	4413      	add	r3, r2
 801182a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801182e:	461a      	mov	r2, r3
 8011830:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011834:	6013      	str	r3, [r2, #0]
 8011836:	e013      	b.n	8011860 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	015a      	lsls	r2, r3, #5
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	4413      	add	r3, r2
 8011840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011844:	461a      	mov	r2, r3
 8011846:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801184a:	6013      	str	r3, [r2, #0]
 801184c:	e008      	b.n	8011860 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801184e:	693b      	ldr	r3, [r7, #16]
 8011850:	015a      	lsls	r2, r3, #5
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	4413      	add	r3, r2
 8011856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801185a:	461a      	mov	r2, r3
 801185c:	2300      	movs	r3, #0
 801185e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011860:	693b      	ldr	r3, [r7, #16]
 8011862:	015a      	lsls	r2, r3, #5
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	4413      	add	r3, r2
 8011868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801186c:	461a      	mov	r2, r3
 801186e:	2300      	movs	r3, #0
 8011870:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	015a      	lsls	r2, r3, #5
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	4413      	add	r3, r2
 801187a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801187e:	461a      	mov	r2, r3
 8011880:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011884:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011886:	693b      	ldr	r3, [r7, #16]
 8011888:	3301      	adds	r3, #1
 801188a:	613b      	str	r3, [r7, #16]
 801188c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011890:	461a      	mov	r2, r3
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	4293      	cmp	r3, r2
 8011896:	d3b5      	bcc.n	8011804 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011898:	2300      	movs	r3, #0
 801189a:	613b      	str	r3, [r7, #16]
 801189c:	e043      	b.n	8011926 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	015a      	lsls	r2, r3, #5
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	4413      	add	r3, r2
 80118a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80118b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80118b4:	d118      	bne.n	80118e8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d10a      	bne.n	80118d2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80118bc:	693b      	ldr	r3, [r7, #16]
 80118be:	015a      	lsls	r2, r3, #5
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	4413      	add	r3, r2
 80118c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118c8:	461a      	mov	r2, r3
 80118ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80118ce:	6013      	str	r3, [r2, #0]
 80118d0:	e013      	b.n	80118fa <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	015a      	lsls	r2, r3, #5
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	4413      	add	r3, r2
 80118da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118de:	461a      	mov	r2, r3
 80118e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80118e4:	6013      	str	r3, [r2, #0]
 80118e6:	e008      	b.n	80118fa <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	015a      	lsls	r2, r3, #5
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	4413      	add	r3, r2
 80118f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118f4:	461a      	mov	r2, r3
 80118f6:	2300      	movs	r3, #0
 80118f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	015a      	lsls	r2, r3, #5
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	4413      	add	r3, r2
 8011902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011906:	461a      	mov	r2, r3
 8011908:	2300      	movs	r3, #0
 801190a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801190c:	693b      	ldr	r3, [r7, #16]
 801190e:	015a      	lsls	r2, r3, #5
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	4413      	add	r3, r2
 8011914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011918:	461a      	mov	r2, r3
 801191a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801191e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	3301      	adds	r3, #1
 8011924:	613b      	str	r3, [r7, #16]
 8011926:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801192a:	461a      	mov	r2, r3
 801192c:	693b      	ldr	r3, [r7, #16]
 801192e:	4293      	cmp	r3, r2
 8011930:	d3b5      	bcc.n	801189e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011938:	691b      	ldr	r3, [r3, #16]
 801193a:	68fa      	ldr	r2, [r7, #12]
 801193c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011944:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2200      	movs	r2, #0
 801194a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8011952:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011954:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011958:	2b00      	cmp	r3, #0
 801195a:	d105      	bne.n	8011968 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	699b      	ldr	r3, [r3, #24]
 8011960:	f043 0210 	orr.w	r2, r3, #16
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	699a      	ldr	r2, [r3, #24]
 801196c:	4b0f      	ldr	r3, [pc, #60]	@ (80119ac <USB_DevInit+0x2b4>)
 801196e:	4313      	orrs	r3, r2
 8011970:	687a      	ldr	r2, [r7, #4]
 8011972:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011974:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011978:	2b00      	cmp	r3, #0
 801197a:	d005      	beq.n	8011988 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	699b      	ldr	r3, [r3, #24]
 8011980:	f043 0208 	orr.w	r2, r3, #8
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011988:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801198c:	2b01      	cmp	r3, #1
 801198e:	d105      	bne.n	801199c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	699a      	ldr	r2, [r3, #24]
 8011994:	4b06      	ldr	r3, [pc, #24]	@ (80119b0 <USB_DevInit+0x2b8>)
 8011996:	4313      	orrs	r3, r2
 8011998:	687a      	ldr	r2, [r7, #4]
 801199a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801199c:	7dfb      	ldrb	r3, [r7, #23]
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3718      	adds	r7, #24
 80119a2:	46bd      	mov	sp, r7
 80119a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80119a8:	b004      	add	sp, #16
 80119aa:	4770      	bx	lr
 80119ac:	803c3800 	.word	0x803c3800
 80119b0:	40000004 	.word	0x40000004

080119b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80119b4:	b480      	push	{r7}
 80119b6:	b085      	sub	sp, #20
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80119be:	2300      	movs	r3, #0
 80119c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	3301      	adds	r3, #1
 80119c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80119ce:	d901      	bls.n	80119d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80119d0:	2303      	movs	r3, #3
 80119d2:	e01b      	b.n	8011a0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	691b      	ldr	r3, [r3, #16]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	daf2      	bge.n	80119c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80119dc:	2300      	movs	r3, #0
 80119de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	019b      	lsls	r3, r3, #6
 80119e4:	f043 0220 	orr.w	r2, r3, #32
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	3301      	adds	r3, #1
 80119f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80119f8:	d901      	bls.n	80119fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80119fa:	2303      	movs	r3, #3
 80119fc:	e006      	b.n	8011a0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	691b      	ldr	r3, [r3, #16]
 8011a02:	f003 0320 	and.w	r3, r3, #32
 8011a06:	2b20      	cmp	r3, #32
 8011a08:	d0f0      	beq.n	80119ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011a0a:	2300      	movs	r3, #0
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3714      	adds	r7, #20
 8011a10:	46bd      	mov	sp, r7
 8011a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a16:	4770      	bx	lr

08011a18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011a18:	b480      	push	{r7}
 8011a1a:	b085      	sub	sp, #20
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011a20:	2300      	movs	r3, #0
 8011a22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	3301      	adds	r3, #1
 8011a28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011a30:	d901      	bls.n	8011a36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011a32:	2303      	movs	r3, #3
 8011a34:	e018      	b.n	8011a68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	691b      	ldr	r3, [r3, #16]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	daf2      	bge.n	8011a24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	2210      	movs	r2, #16
 8011a46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	3301      	adds	r3, #1
 8011a4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011a54:	d901      	bls.n	8011a5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011a56:	2303      	movs	r3, #3
 8011a58:	e006      	b.n	8011a68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	691b      	ldr	r3, [r3, #16]
 8011a5e:	f003 0310 	and.w	r3, r3, #16
 8011a62:	2b10      	cmp	r3, #16
 8011a64:	d0f0      	beq.n	8011a48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011a66:	2300      	movs	r3, #0
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3714      	adds	r7, #20
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a72:	4770      	bx	lr

08011a74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011a74:	b480      	push	{r7}
 8011a76:	b085      	sub	sp, #20
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	460b      	mov	r3, r1
 8011a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011a8a:	681a      	ldr	r2, [r3, #0]
 8011a8c:	78fb      	ldrb	r3, [r7, #3]
 8011a8e:	68f9      	ldr	r1, [r7, #12]
 8011a90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011a94:	4313      	orrs	r3, r2
 8011a96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011a98:	2300      	movs	r3, #0
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3714      	adds	r7, #20
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa4:	4770      	bx	lr

08011aa6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8011aa6:	b480      	push	{r7}
 8011aa8:	b087      	sub	sp, #28
 8011aaa:	af00      	add	r7, sp, #0
 8011aac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ab8:	689b      	ldr	r3, [r3, #8]
 8011aba:	f003 0306 	and.w	r3, r3, #6
 8011abe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d102      	bne.n	8011acc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	75fb      	strb	r3, [r7, #23]
 8011aca:	e00a      	b.n	8011ae2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2b02      	cmp	r3, #2
 8011ad0:	d002      	beq.n	8011ad8 <USB_GetDevSpeed+0x32>
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	2b06      	cmp	r3, #6
 8011ad6:	d102      	bne.n	8011ade <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011ad8:	2302      	movs	r3, #2
 8011ada:	75fb      	strb	r3, [r7, #23]
 8011adc:	e001      	b.n	8011ae2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8011ade:	230f      	movs	r3, #15
 8011ae0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	371c      	adds	r7, #28
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aee:	4770      	bx	lr

08011af0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011af0:	b480      	push	{r7}
 8011af2:	b085      	sub	sp, #20
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	785b      	ldrb	r3, [r3, #1]
 8011b08:	2b01      	cmp	r3, #1
 8011b0a:	d139      	bne.n	8011b80 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011b12:	69da      	ldr	r2, [r3, #28]
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	f003 030f 	and.w	r3, r3, #15
 8011b1c:	2101      	movs	r1, #1
 8011b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	68f9      	ldr	r1, [r7, #12]
 8011b26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011b2a:	4313      	orrs	r3, r2
 8011b2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	015a      	lsls	r2, r3, #5
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	4413      	add	r3, r2
 8011b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d153      	bne.n	8011bec <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	015a      	lsls	r2, r3, #5
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	4413      	add	r3, r2
 8011b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b50:	681a      	ldr	r2, [r3, #0]
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	689b      	ldr	r3, [r3, #8]
 8011b56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	791b      	ldrb	r3, [r3, #4]
 8011b5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011b60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	059b      	lsls	r3, r3, #22
 8011b66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011b68:	431a      	orrs	r2, r3
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	0159      	lsls	r1, r3, #5
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	440b      	add	r3, r1
 8011b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b76:	4619      	mov	r1, r3
 8011b78:	4b20      	ldr	r3, [pc, #128]	@ (8011bfc <USB_ActivateEndpoint+0x10c>)
 8011b7a:	4313      	orrs	r3, r2
 8011b7c:	600b      	str	r3, [r1, #0]
 8011b7e:	e035      	b.n	8011bec <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011b86:	69da      	ldr	r2, [r3, #28]
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	781b      	ldrb	r3, [r3, #0]
 8011b8c:	f003 030f 	and.w	r3, r3, #15
 8011b90:	2101      	movs	r1, #1
 8011b92:	fa01 f303 	lsl.w	r3, r1, r3
 8011b96:	041b      	lsls	r3, r3, #16
 8011b98:	68f9      	ldr	r1, [r7, #12]
 8011b9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011b9e:	4313      	orrs	r3, r2
 8011ba0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	015a      	lsls	r2, r3, #5
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	4413      	add	r3, r2
 8011baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d119      	bne.n	8011bec <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	015a      	lsls	r2, r3, #5
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	4413      	add	r3, r2
 8011bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011bc4:	681a      	ldr	r2, [r3, #0]
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	689b      	ldr	r3, [r3, #8]
 8011bca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	791b      	ldrb	r3, [r3, #4]
 8011bd2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011bd4:	430b      	orrs	r3, r1
 8011bd6:	431a      	orrs	r2, r3
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	0159      	lsls	r1, r3, #5
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	440b      	add	r3, r1
 8011be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011be4:	4619      	mov	r1, r3
 8011be6:	4b05      	ldr	r3, [pc, #20]	@ (8011bfc <USB_ActivateEndpoint+0x10c>)
 8011be8:	4313      	orrs	r3, r2
 8011bea:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011bec:	2300      	movs	r3, #0
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	3714      	adds	r7, #20
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf8:	4770      	bx	lr
 8011bfa:	bf00      	nop
 8011bfc:	10008000 	.word	0x10008000

08011c00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011c00:	b480      	push	{r7}
 8011c02:	b085      	sub	sp, #20
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	785b      	ldrb	r3, [r3, #1]
 8011c18:	2b01      	cmp	r3, #1
 8011c1a:	d161      	bne.n	8011ce0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	015a      	lsls	r2, r3, #5
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	4413      	add	r3, r2
 8011c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011c32:	d11f      	bne.n	8011c74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	015a      	lsls	r2, r3, #5
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	4413      	add	r3, r2
 8011c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	68ba      	ldr	r2, [r7, #8]
 8011c44:	0151      	lsls	r1, r2, #5
 8011c46:	68fa      	ldr	r2, [r7, #12]
 8011c48:	440a      	add	r2, r1
 8011c4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011c4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011c52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	015a      	lsls	r2, r3, #5
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	4413      	add	r3, r2
 8011c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	68ba      	ldr	r2, [r7, #8]
 8011c64:	0151      	lsls	r1, r2, #5
 8011c66:	68fa      	ldr	r2, [r7, #12]
 8011c68:	440a      	add	r2, r1
 8011c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011c6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011c72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	781b      	ldrb	r3, [r3, #0]
 8011c80:	f003 030f 	and.w	r3, r3, #15
 8011c84:	2101      	movs	r1, #1
 8011c86:	fa01 f303 	lsl.w	r3, r1, r3
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	43db      	mvns	r3, r3
 8011c8e:	68f9      	ldr	r1, [r7, #12]
 8011c90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011c94:	4013      	ands	r3, r2
 8011c96:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c9e:	69da      	ldr	r2, [r3, #28]
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	781b      	ldrb	r3, [r3, #0]
 8011ca4:	f003 030f 	and.w	r3, r3, #15
 8011ca8:	2101      	movs	r1, #1
 8011caa:	fa01 f303 	lsl.w	r3, r1, r3
 8011cae:	b29b      	uxth	r3, r3
 8011cb0:	43db      	mvns	r3, r3
 8011cb2:	68f9      	ldr	r1, [r7, #12]
 8011cb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011cb8:	4013      	ands	r3, r2
 8011cba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	015a      	lsls	r2, r3, #5
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	4413      	add	r3, r2
 8011cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011cc8:	681a      	ldr	r2, [r3, #0]
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	0159      	lsls	r1, r3, #5
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	440b      	add	r3, r1
 8011cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	4b35      	ldr	r3, [pc, #212]	@ (8011db0 <USB_DeactivateEndpoint+0x1b0>)
 8011cda:	4013      	ands	r3, r2
 8011cdc:	600b      	str	r3, [r1, #0]
 8011cde:	e060      	b.n	8011da2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	015a      	lsls	r2, r3, #5
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	4413      	add	r3, r2
 8011ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011cf6:	d11f      	bne.n	8011d38 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	015a      	lsls	r2, r3, #5
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	4413      	add	r3, r2
 8011d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	68ba      	ldr	r2, [r7, #8]
 8011d08:	0151      	lsls	r1, r2, #5
 8011d0a:	68fa      	ldr	r2, [r7, #12]
 8011d0c:	440a      	add	r2, r1
 8011d0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011d12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011d16:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	015a      	lsls	r2, r3, #5
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	4413      	add	r3, r2
 8011d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	68ba      	ldr	r2, [r7, #8]
 8011d28:	0151      	lsls	r1, r2, #5
 8011d2a:	68fa      	ldr	r2, [r7, #12]
 8011d2c:	440a      	add	r2, r1
 8011d2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011d32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011d36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011d3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	781b      	ldrb	r3, [r3, #0]
 8011d44:	f003 030f 	and.w	r3, r3, #15
 8011d48:	2101      	movs	r1, #1
 8011d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8011d4e:	041b      	lsls	r3, r3, #16
 8011d50:	43db      	mvns	r3, r3
 8011d52:	68f9      	ldr	r1, [r7, #12]
 8011d54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011d58:	4013      	ands	r3, r2
 8011d5a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011d62:	69da      	ldr	r2, [r3, #28]
 8011d64:	683b      	ldr	r3, [r7, #0]
 8011d66:	781b      	ldrb	r3, [r3, #0]
 8011d68:	f003 030f 	and.w	r3, r3, #15
 8011d6c:	2101      	movs	r1, #1
 8011d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8011d72:	041b      	lsls	r3, r3, #16
 8011d74:	43db      	mvns	r3, r3
 8011d76:	68f9      	ldr	r1, [r7, #12]
 8011d78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011d7c:	4013      	ands	r3, r2
 8011d7e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	015a      	lsls	r2, r3, #5
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	4413      	add	r3, r2
 8011d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d8c:	681a      	ldr	r2, [r3, #0]
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	0159      	lsls	r1, r3, #5
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	440b      	add	r3, r1
 8011d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d9a:	4619      	mov	r1, r3
 8011d9c:	4b05      	ldr	r3, [pc, #20]	@ (8011db4 <USB_DeactivateEndpoint+0x1b4>)
 8011d9e:	4013      	ands	r3, r2
 8011da0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011da2:	2300      	movs	r3, #0
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	3714      	adds	r7, #20
 8011da8:	46bd      	mov	sp, r7
 8011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dae:	4770      	bx	lr
 8011db0:	ec337800 	.word	0xec337800
 8011db4:	eff37800 	.word	0xeff37800

08011db8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b08a      	sub	sp, #40	@ 0x28
 8011dbc:	af02      	add	r7, sp, #8
 8011dbe:	60f8      	str	r0, [r7, #12]
 8011dc0:	60b9      	str	r1, [r7, #8]
 8011dc2:	4613      	mov	r3, r2
 8011dc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	785b      	ldrb	r3, [r3, #1]
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	f040 8181 	bne.w	80120dc <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011dda:	68bb      	ldr	r3, [r7, #8]
 8011ddc:	691b      	ldr	r3, [r3, #16]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d132      	bne.n	8011e48 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011de2:	69bb      	ldr	r3, [r7, #24]
 8011de4:	015a      	lsls	r2, r3, #5
 8011de6:	69fb      	ldr	r3, [r7, #28]
 8011de8:	4413      	add	r3, r2
 8011dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011dee:	691a      	ldr	r2, [r3, #16]
 8011df0:	69bb      	ldr	r3, [r7, #24]
 8011df2:	0159      	lsls	r1, r3, #5
 8011df4:	69fb      	ldr	r3, [r7, #28]
 8011df6:	440b      	add	r3, r1
 8011df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011dfc:	4619      	mov	r1, r3
 8011dfe:	4ba5      	ldr	r3, [pc, #660]	@ (8012094 <USB_EPStartXfer+0x2dc>)
 8011e00:	4013      	ands	r3, r2
 8011e02:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011e04:	69bb      	ldr	r3, [r7, #24]
 8011e06:	015a      	lsls	r2, r3, #5
 8011e08:	69fb      	ldr	r3, [r7, #28]
 8011e0a:	4413      	add	r3, r2
 8011e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e10:	691b      	ldr	r3, [r3, #16]
 8011e12:	69ba      	ldr	r2, [r7, #24]
 8011e14:	0151      	lsls	r1, r2, #5
 8011e16:	69fa      	ldr	r2, [r7, #28]
 8011e18:	440a      	add	r2, r1
 8011e1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011e1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011e22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011e24:	69bb      	ldr	r3, [r7, #24]
 8011e26:	015a      	lsls	r2, r3, #5
 8011e28:	69fb      	ldr	r3, [r7, #28]
 8011e2a:	4413      	add	r3, r2
 8011e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e30:	691a      	ldr	r2, [r3, #16]
 8011e32:	69bb      	ldr	r3, [r7, #24]
 8011e34:	0159      	lsls	r1, r3, #5
 8011e36:	69fb      	ldr	r3, [r7, #28]
 8011e38:	440b      	add	r3, r1
 8011e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e3e:	4619      	mov	r1, r3
 8011e40:	4b95      	ldr	r3, [pc, #596]	@ (8012098 <USB_EPStartXfer+0x2e0>)
 8011e42:	4013      	ands	r3, r2
 8011e44:	610b      	str	r3, [r1, #16]
 8011e46:	e092      	b.n	8011f6e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011e48:	69bb      	ldr	r3, [r7, #24]
 8011e4a:	015a      	lsls	r2, r3, #5
 8011e4c:	69fb      	ldr	r3, [r7, #28]
 8011e4e:	4413      	add	r3, r2
 8011e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e54:	691a      	ldr	r2, [r3, #16]
 8011e56:	69bb      	ldr	r3, [r7, #24]
 8011e58:	0159      	lsls	r1, r3, #5
 8011e5a:	69fb      	ldr	r3, [r7, #28]
 8011e5c:	440b      	add	r3, r1
 8011e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e62:	4619      	mov	r1, r3
 8011e64:	4b8c      	ldr	r3, [pc, #560]	@ (8012098 <USB_EPStartXfer+0x2e0>)
 8011e66:	4013      	ands	r3, r2
 8011e68:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011e6a:	69bb      	ldr	r3, [r7, #24]
 8011e6c:	015a      	lsls	r2, r3, #5
 8011e6e:	69fb      	ldr	r3, [r7, #28]
 8011e70:	4413      	add	r3, r2
 8011e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e76:	691a      	ldr	r2, [r3, #16]
 8011e78:	69bb      	ldr	r3, [r7, #24]
 8011e7a:	0159      	lsls	r1, r3, #5
 8011e7c:	69fb      	ldr	r3, [r7, #28]
 8011e7e:	440b      	add	r3, r1
 8011e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e84:	4619      	mov	r1, r3
 8011e86:	4b83      	ldr	r3, [pc, #524]	@ (8012094 <USB_EPStartXfer+0x2dc>)
 8011e88:	4013      	ands	r3, r2
 8011e8a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8011e8c:	69bb      	ldr	r3, [r7, #24]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d11a      	bne.n	8011ec8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	691a      	ldr	r2, [r3, #16]
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	689b      	ldr	r3, [r3, #8]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d903      	bls.n	8011ea6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8011e9e:	68bb      	ldr	r3, [r7, #8]
 8011ea0:	689a      	ldr	r2, [r3, #8]
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011ea6:	69bb      	ldr	r3, [r7, #24]
 8011ea8:	015a      	lsls	r2, r3, #5
 8011eaa:	69fb      	ldr	r3, [r7, #28]
 8011eac:	4413      	add	r3, r2
 8011eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011eb2:	691b      	ldr	r3, [r3, #16]
 8011eb4:	69ba      	ldr	r2, [r7, #24]
 8011eb6:	0151      	lsls	r1, r2, #5
 8011eb8:	69fa      	ldr	r2, [r7, #28]
 8011eba:	440a      	add	r2, r1
 8011ebc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011ec0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011ec4:	6113      	str	r3, [r2, #16]
 8011ec6:	e01b      	b.n	8011f00 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011ec8:	69bb      	ldr	r3, [r7, #24]
 8011eca:	015a      	lsls	r2, r3, #5
 8011ecc:	69fb      	ldr	r3, [r7, #28]
 8011ece:	4413      	add	r3, r2
 8011ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ed4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	6919      	ldr	r1, [r3, #16]
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	689b      	ldr	r3, [r3, #8]
 8011ede:	440b      	add	r3, r1
 8011ee0:	1e59      	subs	r1, r3, #1
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	689b      	ldr	r3, [r3, #8]
 8011ee6:	fbb1 f3f3 	udiv	r3, r1, r3
 8011eea:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011eec:	4b6b      	ldr	r3, [pc, #428]	@ (801209c <USB_EPStartXfer+0x2e4>)
 8011eee:	400b      	ands	r3, r1
 8011ef0:	69b9      	ldr	r1, [r7, #24]
 8011ef2:	0148      	lsls	r0, r1, #5
 8011ef4:	69f9      	ldr	r1, [r7, #28]
 8011ef6:	4401      	add	r1, r0
 8011ef8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011efc:	4313      	orrs	r3, r2
 8011efe:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011f00:	69bb      	ldr	r3, [r7, #24]
 8011f02:	015a      	lsls	r2, r3, #5
 8011f04:	69fb      	ldr	r3, [r7, #28]
 8011f06:	4413      	add	r3, r2
 8011f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f0c:	691a      	ldr	r2, [r3, #16]
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	691b      	ldr	r3, [r3, #16]
 8011f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011f16:	69b9      	ldr	r1, [r7, #24]
 8011f18:	0148      	lsls	r0, r1, #5
 8011f1a:	69f9      	ldr	r1, [r7, #28]
 8011f1c:	4401      	add	r1, r0
 8011f1e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011f22:	4313      	orrs	r3, r2
 8011f24:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	791b      	ldrb	r3, [r3, #4]
 8011f2a:	2b01      	cmp	r3, #1
 8011f2c:	d11f      	bne.n	8011f6e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011f2e:	69bb      	ldr	r3, [r7, #24]
 8011f30:	015a      	lsls	r2, r3, #5
 8011f32:	69fb      	ldr	r3, [r7, #28]
 8011f34:	4413      	add	r3, r2
 8011f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f3a:	691b      	ldr	r3, [r3, #16]
 8011f3c:	69ba      	ldr	r2, [r7, #24]
 8011f3e:	0151      	lsls	r1, r2, #5
 8011f40:	69fa      	ldr	r2, [r7, #28]
 8011f42:	440a      	add	r2, r1
 8011f44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011f48:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8011f4c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011f4e:	69bb      	ldr	r3, [r7, #24]
 8011f50:	015a      	lsls	r2, r3, #5
 8011f52:	69fb      	ldr	r3, [r7, #28]
 8011f54:	4413      	add	r3, r2
 8011f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f5a:	691b      	ldr	r3, [r3, #16]
 8011f5c:	69ba      	ldr	r2, [r7, #24]
 8011f5e:	0151      	lsls	r1, r2, #5
 8011f60:	69fa      	ldr	r2, [r7, #28]
 8011f62:	440a      	add	r2, r1
 8011f64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011f68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011f6c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8011f6e:	79fb      	ldrb	r3, [r7, #7]
 8011f70:	2b01      	cmp	r3, #1
 8011f72:	d14b      	bne.n	801200c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011f74:	68bb      	ldr	r3, [r7, #8]
 8011f76:	69db      	ldr	r3, [r3, #28]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d009      	beq.n	8011f90 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011f7c:	69bb      	ldr	r3, [r7, #24]
 8011f7e:	015a      	lsls	r2, r3, #5
 8011f80:	69fb      	ldr	r3, [r7, #28]
 8011f82:	4413      	add	r3, r2
 8011f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f88:	461a      	mov	r2, r3
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	69db      	ldr	r3, [r3, #28]
 8011f8e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	791b      	ldrb	r3, [r3, #4]
 8011f94:	2b01      	cmp	r3, #1
 8011f96:	d128      	bne.n	8011fea <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011f98:	69fb      	ldr	r3, [r7, #28]
 8011f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f9e:	689b      	ldr	r3, [r3, #8]
 8011fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d110      	bne.n	8011fca <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011fa8:	69bb      	ldr	r3, [r7, #24]
 8011faa:	015a      	lsls	r2, r3, #5
 8011fac:	69fb      	ldr	r3, [r7, #28]
 8011fae:	4413      	add	r3, r2
 8011fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	69ba      	ldr	r2, [r7, #24]
 8011fb8:	0151      	lsls	r1, r2, #5
 8011fba:	69fa      	ldr	r2, [r7, #28]
 8011fbc:	440a      	add	r2, r1
 8011fbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011fc2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011fc6:	6013      	str	r3, [r2, #0]
 8011fc8:	e00f      	b.n	8011fea <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011fca:	69bb      	ldr	r3, [r7, #24]
 8011fcc:	015a      	lsls	r2, r3, #5
 8011fce:	69fb      	ldr	r3, [r7, #28]
 8011fd0:	4413      	add	r3, r2
 8011fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	69ba      	ldr	r2, [r7, #24]
 8011fda:	0151      	lsls	r1, r2, #5
 8011fdc:	69fa      	ldr	r2, [r7, #28]
 8011fde:	440a      	add	r2, r1
 8011fe0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011fe8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011fea:	69bb      	ldr	r3, [r7, #24]
 8011fec:	015a      	lsls	r2, r3, #5
 8011fee:	69fb      	ldr	r3, [r7, #28]
 8011ff0:	4413      	add	r3, r2
 8011ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	69ba      	ldr	r2, [r7, #24]
 8011ffa:	0151      	lsls	r1, r2, #5
 8011ffc:	69fa      	ldr	r2, [r7, #28]
 8011ffe:	440a      	add	r2, r1
 8012000:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012004:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8012008:	6013      	str	r3, [r2, #0]
 801200a:	e16a      	b.n	80122e2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801200c:	69bb      	ldr	r3, [r7, #24]
 801200e:	015a      	lsls	r2, r3, #5
 8012010:	69fb      	ldr	r3, [r7, #28]
 8012012:	4413      	add	r3, r2
 8012014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	69ba      	ldr	r2, [r7, #24]
 801201c:	0151      	lsls	r1, r2, #5
 801201e:	69fa      	ldr	r2, [r7, #28]
 8012020:	440a      	add	r2, r1
 8012022:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012026:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801202a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	791b      	ldrb	r3, [r3, #4]
 8012030:	2b01      	cmp	r3, #1
 8012032:	d015      	beq.n	8012060 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	691b      	ldr	r3, [r3, #16]
 8012038:	2b00      	cmp	r3, #0
 801203a:	f000 8152 	beq.w	80122e2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801203e:	69fb      	ldr	r3, [r7, #28]
 8012040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	f003 030f 	and.w	r3, r3, #15
 801204e:	2101      	movs	r1, #1
 8012050:	fa01 f303 	lsl.w	r3, r1, r3
 8012054:	69f9      	ldr	r1, [r7, #28]
 8012056:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801205a:	4313      	orrs	r3, r2
 801205c:	634b      	str	r3, [r1, #52]	@ 0x34
 801205e:	e140      	b.n	80122e2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012060:	69fb      	ldr	r3, [r7, #28]
 8012062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012066:	689b      	ldr	r3, [r3, #8]
 8012068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801206c:	2b00      	cmp	r3, #0
 801206e:	d117      	bne.n	80120a0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012070:	69bb      	ldr	r3, [r7, #24]
 8012072:	015a      	lsls	r2, r3, #5
 8012074:	69fb      	ldr	r3, [r7, #28]
 8012076:	4413      	add	r3, r2
 8012078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	69ba      	ldr	r2, [r7, #24]
 8012080:	0151      	lsls	r1, r2, #5
 8012082:	69fa      	ldr	r2, [r7, #28]
 8012084:	440a      	add	r2, r1
 8012086:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801208a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801208e:	6013      	str	r3, [r2, #0]
 8012090:	e016      	b.n	80120c0 <USB_EPStartXfer+0x308>
 8012092:	bf00      	nop
 8012094:	e007ffff 	.word	0xe007ffff
 8012098:	fff80000 	.word	0xfff80000
 801209c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80120a0:	69bb      	ldr	r3, [r7, #24]
 80120a2:	015a      	lsls	r2, r3, #5
 80120a4:	69fb      	ldr	r3, [r7, #28]
 80120a6:	4413      	add	r3, r2
 80120a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	69ba      	ldr	r2, [r7, #24]
 80120b0:	0151      	lsls	r1, r2, #5
 80120b2:	69fa      	ldr	r2, [r7, #28]
 80120b4:	440a      	add	r2, r1
 80120b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80120ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80120be:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	68d9      	ldr	r1, [r3, #12]
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	781a      	ldrb	r2, [r3, #0]
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	691b      	ldr	r3, [r3, #16]
 80120cc:	b298      	uxth	r0, r3
 80120ce:	79fb      	ldrb	r3, [r7, #7]
 80120d0:	9300      	str	r3, [sp, #0]
 80120d2:	4603      	mov	r3, r0
 80120d4:	68f8      	ldr	r0, [r7, #12]
 80120d6:	f000 f9b9 	bl	801244c <USB_WritePacket>
 80120da:	e102      	b.n	80122e2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80120dc:	69bb      	ldr	r3, [r7, #24]
 80120de:	015a      	lsls	r2, r3, #5
 80120e0:	69fb      	ldr	r3, [r7, #28]
 80120e2:	4413      	add	r3, r2
 80120e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120e8:	691a      	ldr	r2, [r3, #16]
 80120ea:	69bb      	ldr	r3, [r7, #24]
 80120ec:	0159      	lsls	r1, r3, #5
 80120ee:	69fb      	ldr	r3, [r7, #28]
 80120f0:	440b      	add	r3, r1
 80120f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120f6:	4619      	mov	r1, r3
 80120f8:	4b7c      	ldr	r3, [pc, #496]	@ (80122ec <USB_EPStartXfer+0x534>)
 80120fa:	4013      	ands	r3, r2
 80120fc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80120fe:	69bb      	ldr	r3, [r7, #24]
 8012100:	015a      	lsls	r2, r3, #5
 8012102:	69fb      	ldr	r3, [r7, #28]
 8012104:	4413      	add	r3, r2
 8012106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801210a:	691a      	ldr	r2, [r3, #16]
 801210c:	69bb      	ldr	r3, [r7, #24]
 801210e:	0159      	lsls	r1, r3, #5
 8012110:	69fb      	ldr	r3, [r7, #28]
 8012112:	440b      	add	r3, r1
 8012114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012118:	4619      	mov	r1, r3
 801211a:	4b75      	ldr	r3, [pc, #468]	@ (80122f0 <USB_EPStartXfer+0x538>)
 801211c:	4013      	ands	r3, r2
 801211e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8012120:	69bb      	ldr	r3, [r7, #24]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d12f      	bne.n	8012186 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	691b      	ldr	r3, [r3, #16]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d003      	beq.n	8012136 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	689a      	ldr	r2, [r3, #8]
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	689a      	ldr	r2, [r3, #8]
 801213a:	68bb      	ldr	r3, [r7, #8]
 801213c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801213e:	69bb      	ldr	r3, [r7, #24]
 8012140:	015a      	lsls	r2, r3, #5
 8012142:	69fb      	ldr	r3, [r7, #28]
 8012144:	4413      	add	r3, r2
 8012146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801214a:	691a      	ldr	r2, [r3, #16]
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	6a1b      	ldr	r3, [r3, #32]
 8012150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012154:	69b9      	ldr	r1, [r7, #24]
 8012156:	0148      	lsls	r0, r1, #5
 8012158:	69f9      	ldr	r1, [r7, #28]
 801215a:	4401      	add	r1, r0
 801215c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012160:	4313      	orrs	r3, r2
 8012162:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012164:	69bb      	ldr	r3, [r7, #24]
 8012166:	015a      	lsls	r2, r3, #5
 8012168:	69fb      	ldr	r3, [r7, #28]
 801216a:	4413      	add	r3, r2
 801216c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012170:	691b      	ldr	r3, [r3, #16]
 8012172:	69ba      	ldr	r2, [r7, #24]
 8012174:	0151      	lsls	r1, r2, #5
 8012176:	69fa      	ldr	r2, [r7, #28]
 8012178:	440a      	add	r2, r1
 801217a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801217e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012182:	6113      	str	r3, [r2, #16]
 8012184:	e05f      	b.n	8012246 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8012186:	68bb      	ldr	r3, [r7, #8]
 8012188:	691b      	ldr	r3, [r3, #16]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d123      	bne.n	80121d6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801218e:	69bb      	ldr	r3, [r7, #24]
 8012190:	015a      	lsls	r2, r3, #5
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	4413      	add	r3, r2
 8012196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801219a:	691a      	ldr	r2, [r3, #16]
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	689b      	ldr	r3, [r3, #8]
 80121a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80121a4:	69b9      	ldr	r1, [r7, #24]
 80121a6:	0148      	lsls	r0, r1, #5
 80121a8:	69f9      	ldr	r1, [r7, #28]
 80121aa:	4401      	add	r1, r0
 80121ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80121b0:	4313      	orrs	r3, r2
 80121b2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80121b4:	69bb      	ldr	r3, [r7, #24]
 80121b6:	015a      	lsls	r2, r3, #5
 80121b8:	69fb      	ldr	r3, [r7, #28]
 80121ba:	4413      	add	r3, r2
 80121bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121c0:	691b      	ldr	r3, [r3, #16]
 80121c2:	69ba      	ldr	r2, [r7, #24]
 80121c4:	0151      	lsls	r1, r2, #5
 80121c6:	69fa      	ldr	r2, [r7, #28]
 80121c8:	440a      	add	r2, r1
 80121ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80121ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80121d2:	6113      	str	r3, [r2, #16]
 80121d4:	e037      	b.n	8012246 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	691a      	ldr	r2, [r3, #16]
 80121da:	68bb      	ldr	r3, [r7, #8]
 80121dc:	689b      	ldr	r3, [r3, #8]
 80121de:	4413      	add	r3, r2
 80121e0:	1e5a      	subs	r2, r3, #1
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	689b      	ldr	r3, [r3, #8]
 80121e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80121ea:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	689b      	ldr	r3, [r3, #8]
 80121f0:	8afa      	ldrh	r2, [r7, #22]
 80121f2:	fb03 f202 	mul.w	r2, r3, r2
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80121fa:	69bb      	ldr	r3, [r7, #24]
 80121fc:	015a      	lsls	r2, r3, #5
 80121fe:	69fb      	ldr	r3, [r7, #28]
 8012200:	4413      	add	r3, r2
 8012202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012206:	691a      	ldr	r2, [r3, #16]
 8012208:	8afb      	ldrh	r3, [r7, #22]
 801220a:	04d9      	lsls	r1, r3, #19
 801220c:	4b39      	ldr	r3, [pc, #228]	@ (80122f4 <USB_EPStartXfer+0x53c>)
 801220e:	400b      	ands	r3, r1
 8012210:	69b9      	ldr	r1, [r7, #24]
 8012212:	0148      	lsls	r0, r1, #5
 8012214:	69f9      	ldr	r1, [r7, #28]
 8012216:	4401      	add	r1, r0
 8012218:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801221c:	4313      	orrs	r3, r2
 801221e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012220:	69bb      	ldr	r3, [r7, #24]
 8012222:	015a      	lsls	r2, r3, #5
 8012224:	69fb      	ldr	r3, [r7, #28]
 8012226:	4413      	add	r3, r2
 8012228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801222c:	691a      	ldr	r2, [r3, #16]
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	6a1b      	ldr	r3, [r3, #32]
 8012232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012236:	69b9      	ldr	r1, [r7, #24]
 8012238:	0148      	lsls	r0, r1, #5
 801223a:	69f9      	ldr	r1, [r7, #28]
 801223c:	4401      	add	r1, r0
 801223e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012242:	4313      	orrs	r3, r2
 8012244:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8012246:	79fb      	ldrb	r3, [r7, #7]
 8012248:	2b01      	cmp	r3, #1
 801224a:	d10d      	bne.n	8012268 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	68db      	ldr	r3, [r3, #12]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d009      	beq.n	8012268 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	68d9      	ldr	r1, [r3, #12]
 8012258:	69bb      	ldr	r3, [r7, #24]
 801225a:	015a      	lsls	r2, r3, #5
 801225c:	69fb      	ldr	r3, [r7, #28]
 801225e:	4413      	add	r3, r2
 8012260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012264:	460a      	mov	r2, r1
 8012266:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012268:	68bb      	ldr	r3, [r7, #8]
 801226a:	791b      	ldrb	r3, [r3, #4]
 801226c:	2b01      	cmp	r3, #1
 801226e:	d128      	bne.n	80122c2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012270:	69fb      	ldr	r3, [r7, #28]
 8012272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012276:	689b      	ldr	r3, [r3, #8]
 8012278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801227c:	2b00      	cmp	r3, #0
 801227e:	d110      	bne.n	80122a2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012280:	69bb      	ldr	r3, [r7, #24]
 8012282:	015a      	lsls	r2, r3, #5
 8012284:	69fb      	ldr	r3, [r7, #28]
 8012286:	4413      	add	r3, r2
 8012288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	69ba      	ldr	r2, [r7, #24]
 8012290:	0151      	lsls	r1, r2, #5
 8012292:	69fa      	ldr	r2, [r7, #28]
 8012294:	440a      	add	r2, r1
 8012296:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801229a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801229e:	6013      	str	r3, [r2, #0]
 80122a0:	e00f      	b.n	80122c2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80122a2:	69bb      	ldr	r3, [r7, #24]
 80122a4:	015a      	lsls	r2, r3, #5
 80122a6:	69fb      	ldr	r3, [r7, #28]
 80122a8:	4413      	add	r3, r2
 80122aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	69ba      	ldr	r2, [r7, #24]
 80122b2:	0151      	lsls	r1, r2, #5
 80122b4:	69fa      	ldr	r2, [r7, #28]
 80122b6:	440a      	add	r2, r1
 80122b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80122bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80122c0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80122c2:	69bb      	ldr	r3, [r7, #24]
 80122c4:	015a      	lsls	r2, r3, #5
 80122c6:	69fb      	ldr	r3, [r7, #28]
 80122c8:	4413      	add	r3, r2
 80122ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	69ba      	ldr	r2, [r7, #24]
 80122d2:	0151      	lsls	r1, r2, #5
 80122d4:	69fa      	ldr	r2, [r7, #28]
 80122d6:	440a      	add	r2, r1
 80122d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80122dc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80122e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80122e2:	2300      	movs	r3, #0
}
 80122e4:	4618      	mov	r0, r3
 80122e6:	3720      	adds	r7, #32
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}
 80122ec:	fff80000 	.word	0xfff80000
 80122f0:	e007ffff 	.word	0xe007ffff
 80122f4:	1ff80000 	.word	0x1ff80000

080122f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80122f8:	b480      	push	{r7}
 80122fa:	b087      	sub	sp, #28
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012302:	2300      	movs	r3, #0
 8012304:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8012306:	2300      	movs	r3, #0
 8012308:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	785b      	ldrb	r3, [r3, #1]
 8012312:	2b01      	cmp	r3, #1
 8012314:	d14a      	bne.n	80123ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	781b      	ldrb	r3, [r3, #0]
 801231a:	015a      	lsls	r2, r3, #5
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	4413      	add	r3, r2
 8012320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801232a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801232e:	f040 8086 	bne.w	801243e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	781b      	ldrb	r3, [r3, #0]
 8012336:	015a      	lsls	r2, r3, #5
 8012338:	693b      	ldr	r3, [r7, #16]
 801233a:	4413      	add	r3, r2
 801233c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	683a      	ldr	r2, [r7, #0]
 8012344:	7812      	ldrb	r2, [r2, #0]
 8012346:	0151      	lsls	r1, r2, #5
 8012348:	693a      	ldr	r2, [r7, #16]
 801234a:	440a      	add	r2, r1
 801234c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012350:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012354:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	781b      	ldrb	r3, [r3, #0]
 801235a:	015a      	lsls	r2, r3, #5
 801235c:	693b      	ldr	r3, [r7, #16]
 801235e:	4413      	add	r3, r2
 8012360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	683a      	ldr	r2, [r7, #0]
 8012368:	7812      	ldrb	r2, [r2, #0]
 801236a:	0151      	lsls	r1, r2, #5
 801236c:	693a      	ldr	r2, [r7, #16]
 801236e:	440a      	add	r2, r1
 8012370:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012374:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012378:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	3301      	adds	r3, #1
 801237e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	f242 7210 	movw	r2, #10000	@ 0x2710
 8012386:	4293      	cmp	r3, r2
 8012388:	d902      	bls.n	8012390 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801238a:	2301      	movs	r3, #1
 801238c:	75fb      	strb	r3, [r7, #23]
          break;
 801238e:	e056      	b.n	801243e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	781b      	ldrb	r3, [r3, #0]
 8012394:	015a      	lsls	r2, r3, #5
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	4413      	add	r3, r2
 801239a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80123a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80123a8:	d0e7      	beq.n	801237a <USB_EPStopXfer+0x82>
 80123aa:	e048      	b.n	801243e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	781b      	ldrb	r3, [r3, #0]
 80123b0:	015a      	lsls	r2, r3, #5
 80123b2:	693b      	ldr	r3, [r7, #16]
 80123b4:	4413      	add	r3, r2
 80123b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80123c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80123c4:	d13b      	bne.n	801243e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	781b      	ldrb	r3, [r3, #0]
 80123ca:	015a      	lsls	r2, r3, #5
 80123cc:	693b      	ldr	r3, [r7, #16]
 80123ce:	4413      	add	r3, r2
 80123d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	683a      	ldr	r2, [r7, #0]
 80123d8:	7812      	ldrb	r2, [r2, #0]
 80123da:	0151      	lsls	r1, r2, #5
 80123dc:	693a      	ldr	r2, [r7, #16]
 80123de:	440a      	add	r2, r1
 80123e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80123e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80123e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	015a      	lsls	r2, r3, #5
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	4413      	add	r3, r2
 80123f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	683a      	ldr	r2, [r7, #0]
 80123fc:	7812      	ldrb	r2, [r2, #0]
 80123fe:	0151      	lsls	r1, r2, #5
 8012400:	693a      	ldr	r2, [r7, #16]
 8012402:	440a      	add	r2, r1
 8012404:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012408:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801240c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	3301      	adds	r3, #1
 8012412:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	f242 7210 	movw	r2, #10000	@ 0x2710
 801241a:	4293      	cmp	r3, r2
 801241c:	d902      	bls.n	8012424 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801241e:	2301      	movs	r3, #1
 8012420:	75fb      	strb	r3, [r7, #23]
          break;
 8012422:	e00c      	b.n	801243e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	781b      	ldrb	r3, [r3, #0]
 8012428:	015a      	lsls	r2, r3, #5
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	4413      	add	r3, r2
 801242e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012438:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801243c:	d0e7      	beq.n	801240e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801243e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012440:	4618      	mov	r0, r3
 8012442:	371c      	adds	r7, #28
 8012444:	46bd      	mov	sp, r7
 8012446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244a:	4770      	bx	lr

0801244c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801244c:	b480      	push	{r7}
 801244e:	b089      	sub	sp, #36	@ 0x24
 8012450:	af00      	add	r7, sp, #0
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	4611      	mov	r1, r2
 8012458:	461a      	mov	r2, r3
 801245a:	460b      	mov	r3, r1
 801245c:	71fb      	strb	r3, [r7, #7]
 801245e:	4613      	mov	r3, r2
 8012460:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801246a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801246e:	2b00      	cmp	r3, #0
 8012470:	d123      	bne.n	80124ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012472:	88bb      	ldrh	r3, [r7, #4]
 8012474:	3303      	adds	r3, #3
 8012476:	089b      	lsrs	r3, r3, #2
 8012478:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801247a:	2300      	movs	r3, #0
 801247c:	61bb      	str	r3, [r7, #24]
 801247e:	e018      	b.n	80124b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012480:	79fb      	ldrb	r3, [r7, #7]
 8012482:	031a      	lsls	r2, r3, #12
 8012484:	697b      	ldr	r3, [r7, #20]
 8012486:	4413      	add	r3, r2
 8012488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801248c:	461a      	mov	r2, r3
 801248e:	69fb      	ldr	r3, [r7, #28]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012494:	69fb      	ldr	r3, [r7, #28]
 8012496:	3301      	adds	r3, #1
 8012498:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801249a:	69fb      	ldr	r3, [r7, #28]
 801249c:	3301      	adds	r3, #1
 801249e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80124a0:	69fb      	ldr	r3, [r7, #28]
 80124a2:	3301      	adds	r3, #1
 80124a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80124a6:	69fb      	ldr	r3, [r7, #28]
 80124a8:	3301      	adds	r3, #1
 80124aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80124ac:	69bb      	ldr	r3, [r7, #24]
 80124ae:	3301      	adds	r3, #1
 80124b0:	61bb      	str	r3, [r7, #24]
 80124b2:	69ba      	ldr	r2, [r7, #24]
 80124b4:	693b      	ldr	r3, [r7, #16]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d3e2      	bcc.n	8012480 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80124ba:	2300      	movs	r3, #0
}
 80124bc:	4618      	mov	r0, r3
 80124be:	3724      	adds	r7, #36	@ 0x24
 80124c0:	46bd      	mov	sp, r7
 80124c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c6:	4770      	bx	lr

080124c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80124c8:	b480      	push	{r7}
 80124ca:	b08b      	sub	sp, #44	@ 0x2c
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	60f8      	str	r0, [r7, #12]
 80124d0:	60b9      	str	r1, [r7, #8]
 80124d2:	4613      	mov	r3, r2
 80124d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80124de:	88fb      	ldrh	r3, [r7, #6]
 80124e0:	089b      	lsrs	r3, r3, #2
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80124e6:	88fb      	ldrh	r3, [r7, #6]
 80124e8:	f003 0303 	and.w	r3, r3, #3
 80124ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80124ee:	2300      	movs	r3, #0
 80124f0:	623b      	str	r3, [r7, #32]
 80124f2:	e014      	b.n	801251e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80124f4:	69bb      	ldr	r3, [r7, #24]
 80124f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80124fa:	681a      	ldr	r2, [r3, #0]
 80124fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8012500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012502:	3301      	adds	r3, #1
 8012504:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012508:	3301      	adds	r3, #1
 801250a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801250e:	3301      	adds	r3, #1
 8012510:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012514:	3301      	adds	r3, #1
 8012516:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8012518:	6a3b      	ldr	r3, [r7, #32]
 801251a:	3301      	adds	r3, #1
 801251c:	623b      	str	r3, [r7, #32]
 801251e:	6a3a      	ldr	r2, [r7, #32]
 8012520:	697b      	ldr	r3, [r7, #20]
 8012522:	429a      	cmp	r2, r3
 8012524:	d3e6      	bcc.n	80124f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012526:	8bfb      	ldrh	r3, [r7, #30]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d01e      	beq.n	801256a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801252c:	2300      	movs	r3, #0
 801252e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012530:	69bb      	ldr	r3, [r7, #24]
 8012532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012536:	461a      	mov	r2, r3
 8012538:	f107 0310 	add.w	r3, r7, #16
 801253c:	6812      	ldr	r2, [r2, #0]
 801253e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012540:	693a      	ldr	r2, [r7, #16]
 8012542:	6a3b      	ldr	r3, [r7, #32]
 8012544:	b2db      	uxtb	r3, r3
 8012546:	00db      	lsls	r3, r3, #3
 8012548:	fa22 f303 	lsr.w	r3, r2, r3
 801254c:	b2da      	uxtb	r2, r3
 801254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012550:	701a      	strb	r2, [r3, #0]
      i++;
 8012552:	6a3b      	ldr	r3, [r7, #32]
 8012554:	3301      	adds	r3, #1
 8012556:	623b      	str	r3, [r7, #32]
      pDest++;
 8012558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801255a:	3301      	adds	r3, #1
 801255c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801255e:	8bfb      	ldrh	r3, [r7, #30]
 8012560:	3b01      	subs	r3, #1
 8012562:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012564:	8bfb      	ldrh	r3, [r7, #30]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d1ea      	bne.n	8012540 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801256c:	4618      	mov	r0, r3
 801256e:	372c      	adds	r7, #44	@ 0x2c
 8012570:	46bd      	mov	sp, r7
 8012572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012576:	4770      	bx	lr

08012578 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012578:	b480      	push	{r7}
 801257a:	b085      	sub	sp, #20
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	781b      	ldrb	r3, [r3, #0]
 801258a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	785b      	ldrb	r3, [r3, #1]
 8012590:	2b01      	cmp	r3, #1
 8012592:	d12c      	bne.n	80125ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012594:	68bb      	ldr	r3, [r7, #8]
 8012596:	015a      	lsls	r2, r3, #5
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	4413      	add	r3, r2
 801259c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	db12      	blt.n	80125cc <USB_EPSetStall+0x54>
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d00f      	beq.n	80125cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	015a      	lsls	r2, r3, #5
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	4413      	add	r3, r2
 80125b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	68ba      	ldr	r2, [r7, #8]
 80125bc:	0151      	lsls	r1, r2, #5
 80125be:	68fa      	ldr	r2, [r7, #12]
 80125c0:	440a      	add	r2, r1
 80125c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80125c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80125ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	015a      	lsls	r2, r3, #5
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	4413      	add	r3, r2
 80125d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	68ba      	ldr	r2, [r7, #8]
 80125dc:	0151      	lsls	r1, r2, #5
 80125de:	68fa      	ldr	r2, [r7, #12]
 80125e0:	440a      	add	r2, r1
 80125e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80125e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80125ea:	6013      	str	r3, [r2, #0]
 80125ec:	e02b      	b.n	8012646 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	015a      	lsls	r2, r3, #5
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	4413      	add	r3, r2
 80125f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	db12      	blt.n	8012626 <USB_EPSetStall+0xae>
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d00f      	beq.n	8012626 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	015a      	lsls	r2, r3, #5
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	4413      	add	r3, r2
 801260e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	68ba      	ldr	r2, [r7, #8]
 8012616:	0151      	lsls	r1, r2, #5
 8012618:	68fa      	ldr	r2, [r7, #12]
 801261a:	440a      	add	r2, r1
 801261c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012620:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012624:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	015a      	lsls	r2, r3, #5
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	4413      	add	r3, r2
 801262e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	68ba      	ldr	r2, [r7, #8]
 8012636:	0151      	lsls	r1, r2, #5
 8012638:	68fa      	ldr	r2, [r7, #12]
 801263a:	440a      	add	r2, r1
 801263c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012640:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012644:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012646:	2300      	movs	r3, #0
}
 8012648:	4618      	mov	r0, r3
 801264a:	3714      	adds	r7, #20
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr

08012654 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012654:	b480      	push	{r7}
 8012656:	b085      	sub	sp, #20
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012662:	683b      	ldr	r3, [r7, #0]
 8012664:	781b      	ldrb	r3, [r3, #0]
 8012666:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	785b      	ldrb	r3, [r3, #1]
 801266c:	2b01      	cmp	r3, #1
 801266e:	d128      	bne.n	80126c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	015a      	lsls	r2, r3, #5
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	4413      	add	r3, r2
 8012678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	68ba      	ldr	r2, [r7, #8]
 8012680:	0151      	lsls	r1, r2, #5
 8012682:	68fa      	ldr	r2, [r7, #12]
 8012684:	440a      	add	r2, r1
 8012686:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801268a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801268e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	791b      	ldrb	r3, [r3, #4]
 8012694:	2b03      	cmp	r3, #3
 8012696:	d003      	beq.n	80126a0 <USB_EPClearStall+0x4c>
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	791b      	ldrb	r3, [r3, #4]
 801269c:	2b02      	cmp	r3, #2
 801269e:	d138      	bne.n	8012712 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	015a      	lsls	r2, r3, #5
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	4413      	add	r3, r2
 80126a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	68ba      	ldr	r2, [r7, #8]
 80126b0:	0151      	lsls	r1, r2, #5
 80126b2:	68fa      	ldr	r2, [r7, #12]
 80126b4:	440a      	add	r2, r1
 80126b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80126ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80126be:	6013      	str	r3, [r2, #0]
 80126c0:	e027      	b.n	8012712 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	015a      	lsls	r2, r3, #5
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	4413      	add	r3, r2
 80126ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	68ba      	ldr	r2, [r7, #8]
 80126d2:	0151      	lsls	r1, r2, #5
 80126d4:	68fa      	ldr	r2, [r7, #12]
 80126d6:	440a      	add	r2, r1
 80126d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80126dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80126e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	791b      	ldrb	r3, [r3, #4]
 80126e6:	2b03      	cmp	r3, #3
 80126e8:	d003      	beq.n	80126f2 <USB_EPClearStall+0x9e>
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	791b      	ldrb	r3, [r3, #4]
 80126ee:	2b02      	cmp	r3, #2
 80126f0:	d10f      	bne.n	8012712 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80126f2:	68bb      	ldr	r3, [r7, #8]
 80126f4:	015a      	lsls	r2, r3, #5
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	4413      	add	r3, r2
 80126fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	68ba      	ldr	r2, [r7, #8]
 8012702:	0151      	lsls	r1, r2, #5
 8012704:	68fa      	ldr	r2, [r7, #12]
 8012706:	440a      	add	r2, r1
 8012708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801270c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012710:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012712:	2300      	movs	r3, #0
}
 8012714:	4618      	mov	r0, r3
 8012716:	3714      	adds	r7, #20
 8012718:	46bd      	mov	sp, r7
 801271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271e:	4770      	bx	lr

08012720 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012720:	b480      	push	{r7}
 8012722:	b085      	sub	sp, #20
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
 8012728:	460b      	mov	r3, r1
 801272a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	68fa      	ldr	r2, [r7, #12]
 801273a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801273e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8012742:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801274a:	681a      	ldr	r2, [r3, #0]
 801274c:	78fb      	ldrb	r3, [r7, #3]
 801274e:	011b      	lsls	r3, r3, #4
 8012750:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8012754:	68f9      	ldr	r1, [r7, #12]
 8012756:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801275a:	4313      	orrs	r3, r2
 801275c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801275e:	2300      	movs	r3, #0
}
 8012760:	4618      	mov	r0, r3
 8012762:	3714      	adds	r7, #20
 8012764:	46bd      	mov	sp, r7
 8012766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276a:	4770      	bx	lr

0801276c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801276c:	b480      	push	{r7}
 801276e:	b085      	sub	sp, #20
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	68fa      	ldr	r2, [r7, #12]
 8012782:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012786:	f023 0303 	bic.w	r3, r3, #3
 801278a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012792:	685b      	ldr	r3, [r3, #4]
 8012794:	68fa      	ldr	r2, [r7, #12]
 8012796:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801279a:	f023 0302 	bic.w	r3, r3, #2
 801279e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80127a0:	2300      	movs	r3, #0
}
 80127a2:	4618      	mov	r0, r3
 80127a4:	3714      	adds	r7, #20
 80127a6:	46bd      	mov	sp, r7
 80127a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ac:	4770      	bx	lr

080127ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80127ae:	b480      	push	{r7}
 80127b0:	b085      	sub	sp, #20
 80127b2:	af00      	add	r7, sp, #0
 80127b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	68fa      	ldr	r2, [r7, #12]
 80127c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80127c8:	f023 0303 	bic.w	r3, r3, #3
 80127cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80127d4:	685b      	ldr	r3, [r3, #4]
 80127d6:	68fa      	ldr	r2, [r7, #12]
 80127d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80127dc:	f043 0302 	orr.w	r3, r3, #2
 80127e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80127e2:	2300      	movs	r3, #0
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3714      	adds	r7, #20
 80127e8:	46bd      	mov	sp, r7
 80127ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ee:	4770      	bx	lr

080127f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80127f0:	b480      	push	{r7}
 80127f2:	b085      	sub	sp, #20
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	695b      	ldr	r3, [r3, #20]
 80127fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	699b      	ldr	r3, [r3, #24]
 8012802:	68fa      	ldr	r2, [r7, #12]
 8012804:	4013      	ands	r3, r2
 8012806:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012808:	68fb      	ldr	r3, [r7, #12]
}
 801280a:	4618      	mov	r0, r3
 801280c:	3714      	adds	r7, #20
 801280e:	46bd      	mov	sp, r7
 8012810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012814:	4770      	bx	lr

08012816 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012816:	b480      	push	{r7}
 8012818:	b085      	sub	sp, #20
 801281a:	af00      	add	r7, sp, #0
 801281c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012828:	699b      	ldr	r3, [r3, #24]
 801282a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012832:	69db      	ldr	r3, [r3, #28]
 8012834:	68ba      	ldr	r2, [r7, #8]
 8012836:	4013      	ands	r3, r2
 8012838:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	0c1b      	lsrs	r3, r3, #16
}
 801283e:	4618      	mov	r0, r3
 8012840:	3714      	adds	r7, #20
 8012842:	46bd      	mov	sp, r7
 8012844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012848:	4770      	bx	lr

0801284a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801284a:	b480      	push	{r7}
 801284c:	b085      	sub	sp, #20
 801284e:	af00      	add	r7, sp, #0
 8012850:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801285c:	699b      	ldr	r3, [r3, #24]
 801285e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012866:	69db      	ldr	r3, [r3, #28]
 8012868:	68ba      	ldr	r2, [r7, #8]
 801286a:	4013      	ands	r3, r2
 801286c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	b29b      	uxth	r3, r3
}
 8012872:	4618      	mov	r0, r3
 8012874:	3714      	adds	r7, #20
 8012876:	46bd      	mov	sp, r7
 8012878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287c:	4770      	bx	lr

0801287e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801287e:	b480      	push	{r7}
 8012880:	b085      	sub	sp, #20
 8012882:	af00      	add	r7, sp, #0
 8012884:	6078      	str	r0, [r7, #4]
 8012886:	460b      	mov	r3, r1
 8012888:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801288e:	78fb      	ldrb	r3, [r7, #3]
 8012890:	015a      	lsls	r2, r3, #5
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	4413      	add	r3, r2
 8012896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801289a:	689b      	ldr	r3, [r3, #8]
 801289c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80128a4:	695b      	ldr	r3, [r3, #20]
 80128a6:	68ba      	ldr	r2, [r7, #8]
 80128a8:	4013      	ands	r3, r2
 80128aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80128ac:	68bb      	ldr	r3, [r7, #8]
}
 80128ae:	4618      	mov	r0, r3
 80128b0:	3714      	adds	r7, #20
 80128b2:	46bd      	mov	sp, r7
 80128b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b8:	4770      	bx	lr

080128ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80128ba:	b480      	push	{r7}
 80128bc:	b087      	sub	sp, #28
 80128be:	af00      	add	r7, sp, #0
 80128c0:	6078      	str	r0, [r7, #4]
 80128c2:	460b      	mov	r3, r1
 80128c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80128d0:	691b      	ldr	r3, [r3, #16]
 80128d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80128da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80128dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80128de:	78fb      	ldrb	r3, [r7, #3]
 80128e0:	f003 030f 	and.w	r3, r3, #15
 80128e4:	68fa      	ldr	r2, [r7, #12]
 80128e6:	fa22 f303 	lsr.w	r3, r2, r3
 80128ea:	01db      	lsls	r3, r3, #7
 80128ec:	b2db      	uxtb	r3, r3
 80128ee:	693a      	ldr	r2, [r7, #16]
 80128f0:	4313      	orrs	r3, r2
 80128f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80128f4:	78fb      	ldrb	r3, [r7, #3]
 80128f6:	015a      	lsls	r2, r3, #5
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	4413      	add	r3, r2
 80128fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012900:	689b      	ldr	r3, [r3, #8]
 8012902:	693a      	ldr	r2, [r7, #16]
 8012904:	4013      	ands	r3, r2
 8012906:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012908:	68bb      	ldr	r3, [r7, #8]
}
 801290a:	4618      	mov	r0, r3
 801290c:	371c      	adds	r7, #28
 801290e:	46bd      	mov	sp, r7
 8012910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012914:	4770      	bx	lr

08012916 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8012916:	b480      	push	{r7}
 8012918:	b083      	sub	sp, #12
 801291a:	af00      	add	r7, sp, #0
 801291c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	695b      	ldr	r3, [r3, #20]
 8012922:	f003 0301 	and.w	r3, r3, #1
}
 8012926:	4618      	mov	r0, r3
 8012928:	370c      	adds	r7, #12
 801292a:	46bd      	mov	sp, r7
 801292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012930:	4770      	bx	lr
	...

08012934 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8012934:	b480      	push	{r7}
 8012936:	b085      	sub	sp, #20
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012946:	681a      	ldr	r2, [r3, #0]
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801294e:	4619      	mov	r1, r3
 8012950:	4b09      	ldr	r3, [pc, #36]	@ (8012978 <USB_ActivateSetup+0x44>)
 8012952:	4013      	ands	r3, r2
 8012954:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801295c:	685b      	ldr	r3, [r3, #4]
 801295e:	68fa      	ldr	r2, [r7, #12]
 8012960:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012968:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801296a:	2300      	movs	r3, #0
}
 801296c:	4618      	mov	r0, r3
 801296e:	3714      	adds	r7, #20
 8012970:	46bd      	mov	sp, r7
 8012972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012976:	4770      	bx	lr
 8012978:	fffff800 	.word	0xfffff800

0801297c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 801297c:	b480      	push	{r7}
 801297e:	b087      	sub	sp, #28
 8012980:	af00      	add	r7, sp, #0
 8012982:	60f8      	str	r0, [r7, #12]
 8012984:	460b      	mov	r3, r1
 8012986:	607a      	str	r2, [r7, #4]
 8012988:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	333c      	adds	r3, #60	@ 0x3c
 8012992:	3304      	adds	r3, #4
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012998:	693b      	ldr	r3, [r7, #16]
 801299a:	4a26      	ldr	r2, [pc, #152]	@ (8012a34 <USB_EP0_OutStart+0xb8>)
 801299c:	4293      	cmp	r3, r2
 801299e:	d90a      	bls.n	80129b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80129ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80129b0:	d101      	bne.n	80129b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80129b2:	2300      	movs	r3, #0
 80129b4:	e037      	b.n	8012a26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80129b6:	697b      	ldr	r3, [r7, #20]
 80129b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129bc:	461a      	mov	r2, r3
 80129be:	2300      	movs	r3, #0
 80129c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129c8:	691b      	ldr	r3, [r3, #16]
 80129ca:	697a      	ldr	r2, [r7, #20]
 80129cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80129d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80129d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129dc:	691b      	ldr	r3, [r3, #16]
 80129de:	697a      	ldr	r2, [r7, #20]
 80129e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80129e4:	f043 0318 	orr.w	r3, r3, #24
 80129e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129f0:	691b      	ldr	r3, [r3, #16]
 80129f2:	697a      	ldr	r2, [r7, #20]
 80129f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80129f8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80129fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80129fe:	7afb      	ldrb	r3, [r7, #11]
 8012a00:	2b01      	cmp	r3, #1
 8012a02:	d10f      	bne.n	8012a24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a0a:	461a      	mov	r2, r3
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	697a      	ldr	r2, [r7, #20]
 8012a1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012a1e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8012a22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012a24:	2300      	movs	r3, #0
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	371c      	adds	r7, #28
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a30:	4770      	bx	lr
 8012a32:	bf00      	nop
 8012a34:	4f54300a 	.word	0x4f54300a

08012a38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012a38:	b480      	push	{r7}
 8012a3a:	b085      	sub	sp, #20
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012a40:	2300      	movs	r3, #0
 8012a42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	3301      	adds	r3, #1
 8012a48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012a50:	d901      	bls.n	8012a56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012a52:	2303      	movs	r3, #3
 8012a54:	e01b      	b.n	8012a8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	691b      	ldr	r3, [r3, #16]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	daf2      	bge.n	8012a44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	691b      	ldr	r3, [r3, #16]
 8012a66:	f043 0201 	orr.w	r2, r3, #1
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	3301      	adds	r3, #1
 8012a72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012a7a:	d901      	bls.n	8012a80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012a7c:	2303      	movs	r3, #3
 8012a7e:	e006      	b.n	8012a8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	691b      	ldr	r3, [r3, #16]
 8012a84:	f003 0301 	and.w	r3, r3, #1
 8012a88:	2b01      	cmp	r3, #1
 8012a8a:	d0f0      	beq.n	8012a6e <USB_CoreReset+0x36>

  return HAL_OK;
 8012a8c:	2300      	movs	r3, #0
}
 8012a8e:	4618      	mov	r0, r3
 8012a90:	3714      	adds	r7, #20
 8012a92:	46bd      	mov	sp, r7
 8012a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a98:	4770      	bx	lr
	...

08012a9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b084      	sub	sp, #16
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
 8012aa4:	460b      	mov	r3, r1
 8012aa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012aa8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012aac:	f005 fdc2 	bl	8018634 <USBD_static_malloc>
 8012ab0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d109      	bne.n	8012acc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	32b0      	adds	r2, #176	@ 0xb0
 8012ac2:	2100      	movs	r1, #0
 8012ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012ac8:	2302      	movs	r3, #2
 8012aca:	e0d4      	b.n	8012c76 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012acc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8012ad0:	2100      	movs	r1, #0
 8012ad2:	68f8      	ldr	r0, [r7, #12]
 8012ad4:	f005 ff31 	bl	801893a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	32b0      	adds	r2, #176	@ 0xb0
 8012ae2:	68f9      	ldr	r1, [r7, #12]
 8012ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	32b0      	adds	r2, #176	@ 0xb0
 8012af2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	7c1b      	ldrb	r3, [r3, #16]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d138      	bne.n	8012b76 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012b04:	4b5e      	ldr	r3, [pc, #376]	@ (8012c80 <USBD_CDC_Init+0x1e4>)
 8012b06:	7819      	ldrb	r1, [r3, #0]
 8012b08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012b0c:	2202      	movs	r2, #2
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f005 fc6d 	bl	80183ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012b14:	4b5a      	ldr	r3, [pc, #360]	@ (8012c80 <USBD_CDC_Init+0x1e4>)
 8012b16:	781b      	ldrb	r3, [r3, #0]
 8012b18:	f003 020f 	and.w	r2, r3, #15
 8012b1c:	6879      	ldr	r1, [r7, #4]
 8012b1e:	4613      	mov	r3, r2
 8012b20:	009b      	lsls	r3, r3, #2
 8012b22:	4413      	add	r3, r2
 8012b24:	009b      	lsls	r3, r3, #2
 8012b26:	440b      	add	r3, r1
 8012b28:	3324      	adds	r3, #36	@ 0x24
 8012b2a:	2201      	movs	r2, #1
 8012b2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012b2e:	4b55      	ldr	r3, [pc, #340]	@ (8012c84 <USBD_CDC_Init+0x1e8>)
 8012b30:	7819      	ldrb	r1, [r3, #0]
 8012b32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012b36:	2202      	movs	r2, #2
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f005 fc58 	bl	80183ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012b3e:	4b51      	ldr	r3, [pc, #324]	@ (8012c84 <USBD_CDC_Init+0x1e8>)
 8012b40:	781b      	ldrb	r3, [r3, #0]
 8012b42:	f003 020f 	and.w	r2, r3, #15
 8012b46:	6879      	ldr	r1, [r7, #4]
 8012b48:	4613      	mov	r3, r2
 8012b4a:	009b      	lsls	r3, r3, #2
 8012b4c:	4413      	add	r3, r2
 8012b4e:	009b      	lsls	r3, r3, #2
 8012b50:	440b      	add	r3, r1
 8012b52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012b56:	2201      	movs	r2, #1
 8012b58:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012b5a:	4b4b      	ldr	r3, [pc, #300]	@ (8012c88 <USBD_CDC_Init+0x1ec>)
 8012b5c:	781b      	ldrb	r3, [r3, #0]
 8012b5e:	f003 020f 	and.w	r2, r3, #15
 8012b62:	6879      	ldr	r1, [r7, #4]
 8012b64:	4613      	mov	r3, r2
 8012b66:	009b      	lsls	r3, r3, #2
 8012b68:	4413      	add	r3, r2
 8012b6a:	009b      	lsls	r3, r3, #2
 8012b6c:	440b      	add	r3, r1
 8012b6e:	3326      	adds	r3, #38	@ 0x26
 8012b70:	2210      	movs	r2, #16
 8012b72:	801a      	strh	r2, [r3, #0]
 8012b74:	e035      	b.n	8012be2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012b76:	4b42      	ldr	r3, [pc, #264]	@ (8012c80 <USBD_CDC_Init+0x1e4>)
 8012b78:	7819      	ldrb	r1, [r3, #0]
 8012b7a:	2340      	movs	r3, #64	@ 0x40
 8012b7c:	2202      	movs	r2, #2
 8012b7e:	6878      	ldr	r0, [r7, #4]
 8012b80:	f005 fc35 	bl	80183ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012b84:	4b3e      	ldr	r3, [pc, #248]	@ (8012c80 <USBD_CDC_Init+0x1e4>)
 8012b86:	781b      	ldrb	r3, [r3, #0]
 8012b88:	f003 020f 	and.w	r2, r3, #15
 8012b8c:	6879      	ldr	r1, [r7, #4]
 8012b8e:	4613      	mov	r3, r2
 8012b90:	009b      	lsls	r3, r3, #2
 8012b92:	4413      	add	r3, r2
 8012b94:	009b      	lsls	r3, r3, #2
 8012b96:	440b      	add	r3, r1
 8012b98:	3324      	adds	r3, #36	@ 0x24
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012b9e:	4b39      	ldr	r3, [pc, #228]	@ (8012c84 <USBD_CDC_Init+0x1e8>)
 8012ba0:	7819      	ldrb	r1, [r3, #0]
 8012ba2:	2340      	movs	r3, #64	@ 0x40
 8012ba4:	2202      	movs	r2, #2
 8012ba6:	6878      	ldr	r0, [r7, #4]
 8012ba8:	f005 fc21 	bl	80183ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012bac:	4b35      	ldr	r3, [pc, #212]	@ (8012c84 <USBD_CDC_Init+0x1e8>)
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	f003 020f 	and.w	r2, r3, #15
 8012bb4:	6879      	ldr	r1, [r7, #4]
 8012bb6:	4613      	mov	r3, r2
 8012bb8:	009b      	lsls	r3, r3, #2
 8012bba:	4413      	add	r3, r2
 8012bbc:	009b      	lsls	r3, r3, #2
 8012bbe:	440b      	add	r3, r1
 8012bc0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012bc4:	2201      	movs	r2, #1
 8012bc6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8012c88 <USBD_CDC_Init+0x1ec>)
 8012bca:	781b      	ldrb	r3, [r3, #0]
 8012bcc:	f003 020f 	and.w	r2, r3, #15
 8012bd0:	6879      	ldr	r1, [r7, #4]
 8012bd2:	4613      	mov	r3, r2
 8012bd4:	009b      	lsls	r3, r3, #2
 8012bd6:	4413      	add	r3, r2
 8012bd8:	009b      	lsls	r3, r3, #2
 8012bda:	440b      	add	r3, r1
 8012bdc:	3326      	adds	r3, #38	@ 0x26
 8012bde:	2210      	movs	r2, #16
 8012be0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012be2:	4b29      	ldr	r3, [pc, #164]	@ (8012c88 <USBD_CDC_Init+0x1ec>)
 8012be4:	7819      	ldrb	r1, [r3, #0]
 8012be6:	2308      	movs	r3, #8
 8012be8:	2203      	movs	r2, #3
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	f005 fbff 	bl	80183ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012bf0:	4b25      	ldr	r3, [pc, #148]	@ (8012c88 <USBD_CDC_Init+0x1ec>)
 8012bf2:	781b      	ldrb	r3, [r3, #0]
 8012bf4:	f003 020f 	and.w	r2, r3, #15
 8012bf8:	6879      	ldr	r1, [r7, #4]
 8012bfa:	4613      	mov	r3, r2
 8012bfc:	009b      	lsls	r3, r3, #2
 8012bfe:	4413      	add	r3, r2
 8012c00:	009b      	lsls	r3, r3, #2
 8012c02:	440b      	add	r3, r1
 8012c04:	3324      	adds	r3, #36	@ 0x24
 8012c06:	2201      	movs	r2, #1
 8012c08:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012c18:	687a      	ldr	r2, [r7, #4]
 8012c1a:	33b0      	adds	r3, #176	@ 0xb0
 8012c1c:	009b      	lsls	r3, r3, #2
 8012c1e:	4413      	add	r3, r2
 8012c20:	685b      	ldr	r3, [r3, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	2200      	movs	r2, #0
 8012c2a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	2200      	movs	r2, #0
 8012c32:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d101      	bne.n	8012c44 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012c40:	2302      	movs	r3, #2
 8012c42:	e018      	b.n	8012c76 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	7c1b      	ldrb	r3, [r3, #16]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d10a      	bne.n	8012c62 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8012c84 <USBD_CDC_Init+0x1e8>)
 8012c4e:	7819      	ldrb	r1, [r3, #0]
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012c56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012c5a:	6878      	ldr	r0, [r7, #4]
 8012c5c:	f005 fcb6 	bl	80185cc <USBD_LL_PrepareReceive>
 8012c60:	e008      	b.n	8012c74 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012c62:	4b08      	ldr	r3, [pc, #32]	@ (8012c84 <USBD_CDC_Init+0x1e8>)
 8012c64:	7819      	ldrb	r1, [r3, #0]
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012c6c:	2340      	movs	r3, #64	@ 0x40
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f005 fcac 	bl	80185cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012c74:	2300      	movs	r3, #0
}
 8012c76:	4618      	mov	r0, r3
 8012c78:	3710      	adds	r7, #16
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	bd80      	pop	{r7, pc}
 8012c7e:	bf00      	nop
 8012c80:	2400014b 	.word	0x2400014b
 8012c84:	2400014c 	.word	0x2400014c
 8012c88:	2400014d 	.word	0x2400014d

08012c8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b082      	sub	sp, #8
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	460b      	mov	r3, r1
 8012c96:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012c98:	4b3a      	ldr	r3, [pc, #232]	@ (8012d84 <USBD_CDC_DeInit+0xf8>)
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f005 fbcb 	bl	801843a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012ca4:	4b37      	ldr	r3, [pc, #220]	@ (8012d84 <USBD_CDC_DeInit+0xf8>)
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	f003 020f 	and.w	r2, r3, #15
 8012cac:	6879      	ldr	r1, [r7, #4]
 8012cae:	4613      	mov	r3, r2
 8012cb0:	009b      	lsls	r3, r3, #2
 8012cb2:	4413      	add	r3, r2
 8012cb4:	009b      	lsls	r3, r3, #2
 8012cb6:	440b      	add	r3, r1
 8012cb8:	3324      	adds	r3, #36	@ 0x24
 8012cba:	2200      	movs	r2, #0
 8012cbc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8012cbe:	4b32      	ldr	r3, [pc, #200]	@ (8012d88 <USBD_CDC_DeInit+0xfc>)
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	4619      	mov	r1, r3
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f005 fbb8 	bl	801843a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012cca:	4b2f      	ldr	r3, [pc, #188]	@ (8012d88 <USBD_CDC_DeInit+0xfc>)
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	f003 020f 	and.w	r2, r3, #15
 8012cd2:	6879      	ldr	r1, [r7, #4]
 8012cd4:	4613      	mov	r3, r2
 8012cd6:	009b      	lsls	r3, r3, #2
 8012cd8:	4413      	add	r3, r2
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	440b      	add	r3, r1
 8012cde:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012ce6:	4b29      	ldr	r3, [pc, #164]	@ (8012d8c <USBD_CDC_DeInit+0x100>)
 8012ce8:	781b      	ldrb	r3, [r3, #0]
 8012cea:	4619      	mov	r1, r3
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f005 fba4 	bl	801843a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012cf2:	4b26      	ldr	r3, [pc, #152]	@ (8012d8c <USBD_CDC_DeInit+0x100>)
 8012cf4:	781b      	ldrb	r3, [r3, #0]
 8012cf6:	f003 020f 	and.w	r2, r3, #15
 8012cfa:	6879      	ldr	r1, [r7, #4]
 8012cfc:	4613      	mov	r3, r2
 8012cfe:	009b      	lsls	r3, r3, #2
 8012d00:	4413      	add	r3, r2
 8012d02:	009b      	lsls	r3, r3, #2
 8012d04:	440b      	add	r3, r1
 8012d06:	3324      	adds	r3, #36	@ 0x24
 8012d08:	2200      	movs	r2, #0
 8012d0a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8012d8c <USBD_CDC_DeInit+0x100>)
 8012d0e:	781b      	ldrb	r3, [r3, #0]
 8012d10:	f003 020f 	and.w	r2, r3, #15
 8012d14:	6879      	ldr	r1, [r7, #4]
 8012d16:	4613      	mov	r3, r2
 8012d18:	009b      	lsls	r3, r3, #2
 8012d1a:	4413      	add	r3, r2
 8012d1c:	009b      	lsls	r3, r3, #2
 8012d1e:	440b      	add	r3, r1
 8012d20:	3326      	adds	r3, #38	@ 0x26
 8012d22:	2200      	movs	r2, #0
 8012d24:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	32b0      	adds	r2, #176	@ 0xb0
 8012d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d01f      	beq.n	8012d78 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012d3e:	687a      	ldr	r2, [r7, #4]
 8012d40:	33b0      	adds	r3, #176	@ 0xb0
 8012d42:	009b      	lsls	r3, r3, #2
 8012d44:	4413      	add	r3, r2
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	685b      	ldr	r3, [r3, #4]
 8012d4a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	32b0      	adds	r2, #176	@ 0xb0
 8012d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f005 fc78 	bl	8018650 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	32b0      	adds	r2, #176	@ 0xb0
 8012d6a:	2100      	movs	r1, #0
 8012d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2200      	movs	r2, #0
 8012d74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012d78:	2300      	movs	r3, #0
}
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	3708      	adds	r7, #8
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}
 8012d82:	bf00      	nop
 8012d84:	2400014b 	.word	0x2400014b
 8012d88:	2400014c 	.word	0x2400014c
 8012d8c:	2400014d 	.word	0x2400014d

08012d90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b086      	sub	sp, #24
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
 8012d98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	32b0      	adds	r2, #176	@ 0xb0
 8012da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012da8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012daa:	2300      	movs	r3, #0
 8012dac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012dae:	2300      	movs	r3, #0
 8012db0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012db2:	2300      	movs	r3, #0
 8012db4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012db6:	693b      	ldr	r3, [r7, #16]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d101      	bne.n	8012dc0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012dbc:	2303      	movs	r3, #3
 8012dbe:	e0bf      	b.n	8012f40 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012dc0:	683b      	ldr	r3, [r7, #0]
 8012dc2:	781b      	ldrb	r3, [r3, #0]
 8012dc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d050      	beq.n	8012e6e <USBD_CDC_Setup+0xde>
 8012dcc:	2b20      	cmp	r3, #32
 8012dce:	f040 80af 	bne.w	8012f30 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	88db      	ldrh	r3, [r3, #6]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d03a      	beq.n	8012e50 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	781b      	ldrb	r3, [r3, #0]
 8012dde:	b25b      	sxtb	r3, r3
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	da1b      	bge.n	8012e1c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012dea:	687a      	ldr	r2, [r7, #4]
 8012dec:	33b0      	adds	r3, #176	@ 0xb0
 8012dee:	009b      	lsls	r3, r3, #2
 8012df0:	4413      	add	r3, r2
 8012df2:	685b      	ldr	r3, [r3, #4]
 8012df4:	689b      	ldr	r3, [r3, #8]
 8012df6:	683a      	ldr	r2, [r7, #0]
 8012df8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012dfa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012dfc:	683a      	ldr	r2, [r7, #0]
 8012dfe:	88d2      	ldrh	r2, [r2, #6]
 8012e00:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	88db      	ldrh	r3, [r3, #6]
 8012e06:	2b07      	cmp	r3, #7
 8012e08:	bf28      	it	cs
 8012e0a:	2307      	movcs	r3, #7
 8012e0c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	89fa      	ldrh	r2, [r7, #14]
 8012e12:	4619      	mov	r1, r3
 8012e14:	6878      	ldr	r0, [r7, #4]
 8012e16:	f001 fdd9 	bl	80149cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012e1a:	e090      	b.n	8012f3e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	785a      	ldrb	r2, [r3, #1]
 8012e20:	693b      	ldr	r3, [r7, #16]
 8012e22:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	88db      	ldrh	r3, [r3, #6]
 8012e2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8012e2c:	d803      	bhi.n	8012e36 <USBD_CDC_Setup+0xa6>
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	88db      	ldrh	r3, [r3, #6]
 8012e32:	b2da      	uxtb	r2, r3
 8012e34:	e000      	b.n	8012e38 <USBD_CDC_Setup+0xa8>
 8012e36:	2240      	movs	r2, #64	@ 0x40
 8012e38:	693b      	ldr	r3, [r7, #16]
 8012e3a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012e3e:	6939      	ldr	r1, [r7, #16]
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8012e46:	461a      	mov	r2, r3
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f001 fdeb 	bl	8014a24 <USBD_CtlPrepareRx>
      break;
 8012e4e:	e076      	b.n	8012f3e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012e56:	687a      	ldr	r2, [r7, #4]
 8012e58:	33b0      	adds	r3, #176	@ 0xb0
 8012e5a:	009b      	lsls	r3, r3, #2
 8012e5c:	4413      	add	r3, r2
 8012e5e:	685b      	ldr	r3, [r3, #4]
 8012e60:	689b      	ldr	r3, [r3, #8]
 8012e62:	683a      	ldr	r2, [r7, #0]
 8012e64:	7850      	ldrb	r0, [r2, #1]
 8012e66:	2200      	movs	r2, #0
 8012e68:	6839      	ldr	r1, [r7, #0]
 8012e6a:	4798      	blx	r3
      break;
 8012e6c:	e067      	b.n	8012f3e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	785b      	ldrb	r3, [r3, #1]
 8012e72:	2b0b      	cmp	r3, #11
 8012e74:	d851      	bhi.n	8012f1a <USBD_CDC_Setup+0x18a>
 8012e76:	a201      	add	r2, pc, #4	@ (adr r2, 8012e7c <USBD_CDC_Setup+0xec>)
 8012e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e7c:	08012ead 	.word	0x08012ead
 8012e80:	08012f29 	.word	0x08012f29
 8012e84:	08012f1b 	.word	0x08012f1b
 8012e88:	08012f1b 	.word	0x08012f1b
 8012e8c:	08012f1b 	.word	0x08012f1b
 8012e90:	08012f1b 	.word	0x08012f1b
 8012e94:	08012f1b 	.word	0x08012f1b
 8012e98:	08012f1b 	.word	0x08012f1b
 8012e9c:	08012f1b 	.word	0x08012f1b
 8012ea0:	08012f1b 	.word	0x08012f1b
 8012ea4:	08012ed7 	.word	0x08012ed7
 8012ea8:	08012f01 	.word	0x08012f01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012eb2:	b2db      	uxtb	r3, r3
 8012eb4:	2b03      	cmp	r3, #3
 8012eb6:	d107      	bne.n	8012ec8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012eb8:	f107 030a 	add.w	r3, r7, #10
 8012ebc:	2202      	movs	r2, #2
 8012ebe:	4619      	mov	r1, r3
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	f001 fd83 	bl	80149cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012ec6:	e032      	b.n	8012f2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012ec8:	6839      	ldr	r1, [r7, #0]
 8012eca:	6878      	ldr	r0, [r7, #4]
 8012ecc:	f001 fd01 	bl	80148d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8012ed0:	2303      	movs	r3, #3
 8012ed2:	75fb      	strb	r3, [r7, #23]
          break;
 8012ed4:	e02b      	b.n	8012f2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012edc:	b2db      	uxtb	r3, r3
 8012ede:	2b03      	cmp	r3, #3
 8012ee0:	d107      	bne.n	8012ef2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012ee2:	f107 030d 	add.w	r3, r7, #13
 8012ee6:	2201      	movs	r2, #1
 8012ee8:	4619      	mov	r1, r3
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f001 fd6e 	bl	80149cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012ef0:	e01d      	b.n	8012f2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012ef2:	6839      	ldr	r1, [r7, #0]
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f001 fcec 	bl	80148d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8012efa:	2303      	movs	r3, #3
 8012efc:	75fb      	strb	r3, [r7, #23]
          break;
 8012efe:	e016      	b.n	8012f2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f06:	b2db      	uxtb	r3, r3
 8012f08:	2b03      	cmp	r3, #3
 8012f0a:	d00f      	beq.n	8012f2c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012f0c:	6839      	ldr	r1, [r7, #0]
 8012f0e:	6878      	ldr	r0, [r7, #4]
 8012f10:	f001 fcdf 	bl	80148d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8012f14:	2303      	movs	r3, #3
 8012f16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012f18:	e008      	b.n	8012f2c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012f1a:	6839      	ldr	r1, [r7, #0]
 8012f1c:	6878      	ldr	r0, [r7, #4]
 8012f1e:	f001 fcd8 	bl	80148d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8012f22:	2303      	movs	r3, #3
 8012f24:	75fb      	strb	r3, [r7, #23]
          break;
 8012f26:	e002      	b.n	8012f2e <USBD_CDC_Setup+0x19e>
          break;
 8012f28:	bf00      	nop
 8012f2a:	e008      	b.n	8012f3e <USBD_CDC_Setup+0x1ae>
          break;
 8012f2c:	bf00      	nop
      }
      break;
 8012f2e:	e006      	b.n	8012f3e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012f30:	6839      	ldr	r1, [r7, #0]
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f001 fccd 	bl	80148d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8012f38:	2303      	movs	r3, #3
 8012f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8012f3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8012f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3718      	adds	r7, #24
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b084      	sub	sp, #16
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	460b      	mov	r3, r1
 8012f52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012f5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	32b0      	adds	r2, #176	@ 0xb0
 8012f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d101      	bne.n	8012f72 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012f6e:	2303      	movs	r3, #3
 8012f70:	e065      	b.n	801303e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	32b0      	adds	r2, #176	@ 0xb0
 8012f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f80:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012f82:	78fb      	ldrb	r3, [r7, #3]
 8012f84:	f003 020f 	and.w	r2, r3, #15
 8012f88:	6879      	ldr	r1, [r7, #4]
 8012f8a:	4613      	mov	r3, r2
 8012f8c:	009b      	lsls	r3, r3, #2
 8012f8e:	4413      	add	r3, r2
 8012f90:	009b      	lsls	r3, r3, #2
 8012f92:	440b      	add	r3, r1
 8012f94:	3318      	adds	r3, #24
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d02f      	beq.n	8012ffc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8012f9c:	78fb      	ldrb	r3, [r7, #3]
 8012f9e:	f003 020f 	and.w	r2, r3, #15
 8012fa2:	6879      	ldr	r1, [r7, #4]
 8012fa4:	4613      	mov	r3, r2
 8012fa6:	009b      	lsls	r3, r3, #2
 8012fa8:	4413      	add	r3, r2
 8012faa:	009b      	lsls	r3, r3, #2
 8012fac:	440b      	add	r3, r1
 8012fae:	3318      	adds	r3, #24
 8012fb0:	681a      	ldr	r2, [r3, #0]
 8012fb2:	78fb      	ldrb	r3, [r7, #3]
 8012fb4:	f003 010f 	and.w	r1, r3, #15
 8012fb8:	68f8      	ldr	r0, [r7, #12]
 8012fba:	460b      	mov	r3, r1
 8012fbc:	00db      	lsls	r3, r3, #3
 8012fbe:	440b      	add	r3, r1
 8012fc0:	009b      	lsls	r3, r3, #2
 8012fc2:	4403      	add	r3, r0
 8012fc4:	331c      	adds	r3, #28
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	fbb2 f1f3 	udiv	r1, r2, r3
 8012fcc:	fb01 f303 	mul.w	r3, r1, r3
 8012fd0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d112      	bne.n	8012ffc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8012fd6:	78fb      	ldrb	r3, [r7, #3]
 8012fd8:	f003 020f 	and.w	r2, r3, #15
 8012fdc:	6879      	ldr	r1, [r7, #4]
 8012fde:	4613      	mov	r3, r2
 8012fe0:	009b      	lsls	r3, r3, #2
 8012fe2:	4413      	add	r3, r2
 8012fe4:	009b      	lsls	r3, r3, #2
 8012fe6:	440b      	add	r3, r1
 8012fe8:	3318      	adds	r3, #24
 8012fea:	2200      	movs	r2, #0
 8012fec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012fee:	78f9      	ldrb	r1, [r7, #3]
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f005 fac8 	bl	801858a <USBD_LL_Transmit>
 8012ffa:	e01f      	b.n	801303c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	2200      	movs	r2, #0
 8013000:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801300a:	687a      	ldr	r2, [r7, #4]
 801300c:	33b0      	adds	r3, #176	@ 0xb0
 801300e:	009b      	lsls	r3, r3, #2
 8013010:	4413      	add	r3, r2
 8013012:	685b      	ldr	r3, [r3, #4]
 8013014:	691b      	ldr	r3, [r3, #16]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d010      	beq.n	801303c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013020:	687a      	ldr	r2, [r7, #4]
 8013022:	33b0      	adds	r3, #176	@ 0xb0
 8013024:	009b      	lsls	r3, r3, #2
 8013026:	4413      	add	r3, r2
 8013028:	685b      	ldr	r3, [r3, #4]
 801302a:	691b      	ldr	r3, [r3, #16]
 801302c:	68ba      	ldr	r2, [r7, #8]
 801302e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8013032:	68ba      	ldr	r2, [r7, #8]
 8013034:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8013038:	78fa      	ldrb	r2, [r7, #3]
 801303a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801303c:	2300      	movs	r3, #0
}
 801303e:	4618      	mov	r0, r3
 8013040:	3710      	adds	r7, #16
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}

08013046 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013046:	b580      	push	{r7, lr}
 8013048:	b084      	sub	sp, #16
 801304a:	af00      	add	r7, sp, #0
 801304c:	6078      	str	r0, [r7, #4]
 801304e:	460b      	mov	r3, r1
 8013050:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	32b0      	adds	r2, #176	@ 0xb0
 801305c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013060:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	32b0      	adds	r2, #176	@ 0xb0
 801306c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d101      	bne.n	8013078 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013074:	2303      	movs	r3, #3
 8013076:	e01a      	b.n	80130ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013078:	78fb      	ldrb	r3, [r7, #3]
 801307a:	4619      	mov	r1, r3
 801307c:	6878      	ldr	r0, [r7, #4]
 801307e:	f005 fac6 	bl	801860e <USBD_LL_GetRxDataSize>
 8013082:	4602      	mov	r2, r0
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013090:	687a      	ldr	r2, [r7, #4]
 8013092:	33b0      	adds	r3, #176	@ 0xb0
 8013094:	009b      	lsls	r3, r3, #2
 8013096:	4413      	add	r3, r2
 8013098:	685b      	ldr	r3, [r3, #4]
 801309a:	68db      	ldr	r3, [r3, #12]
 801309c:	68fa      	ldr	r2, [r7, #12]
 801309e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80130a2:	68fa      	ldr	r2, [r7, #12]
 80130a4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80130a8:	4611      	mov	r1, r2
 80130aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80130ac:	2300      	movs	r3, #0
}
 80130ae:	4618      	mov	r0, r3
 80130b0:	3710      	adds	r7, #16
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}

080130b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80130b6:	b580      	push	{r7, lr}
 80130b8:	b084      	sub	sp, #16
 80130ba:	af00      	add	r7, sp, #0
 80130bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	32b0      	adds	r2, #176	@ 0xb0
 80130c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d101      	bne.n	80130d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80130d4:	2303      	movs	r3, #3
 80130d6:	e024      	b.n	8013122 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80130de:	687a      	ldr	r2, [r7, #4]
 80130e0:	33b0      	adds	r3, #176	@ 0xb0
 80130e2:	009b      	lsls	r3, r3, #2
 80130e4:	4413      	add	r3, r2
 80130e6:	685b      	ldr	r3, [r3, #4]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d019      	beq.n	8013120 <USBD_CDC_EP0_RxReady+0x6a>
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80130f2:	2bff      	cmp	r3, #255	@ 0xff
 80130f4:	d014      	beq.n	8013120 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80130fc:	687a      	ldr	r2, [r7, #4]
 80130fe:	33b0      	adds	r3, #176	@ 0xb0
 8013100:	009b      	lsls	r3, r3, #2
 8013102:	4413      	add	r3, r2
 8013104:	685b      	ldr	r3, [r3, #4]
 8013106:	689b      	ldr	r3, [r3, #8]
 8013108:	68fa      	ldr	r2, [r7, #12]
 801310a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801310e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013110:	68fa      	ldr	r2, [r7, #12]
 8013112:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013116:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	22ff      	movs	r2, #255	@ 0xff
 801311c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8013120:	2300      	movs	r3, #0
}
 8013122:	4618      	mov	r0, r3
 8013124:	3710      	adds	r7, #16
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}
	...

0801312c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b086      	sub	sp, #24
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013134:	2182      	movs	r1, #130	@ 0x82
 8013136:	4818      	ldr	r0, [pc, #96]	@ (8013198 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013138:	f000 fd6b 	bl	8013c12 <USBD_GetEpDesc>
 801313c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801313e:	2101      	movs	r1, #1
 8013140:	4815      	ldr	r0, [pc, #84]	@ (8013198 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013142:	f000 fd66 	bl	8013c12 <USBD_GetEpDesc>
 8013146:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013148:	2181      	movs	r1, #129	@ 0x81
 801314a:	4813      	ldr	r0, [pc, #76]	@ (8013198 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801314c:	f000 fd61 	bl	8013c12 <USBD_GetEpDesc>
 8013150:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d002      	beq.n	801315e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013158:	697b      	ldr	r3, [r7, #20]
 801315a:	2210      	movs	r2, #16
 801315c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801315e:	693b      	ldr	r3, [r7, #16]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d006      	beq.n	8013172 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013164:	693b      	ldr	r3, [r7, #16]
 8013166:	2200      	movs	r2, #0
 8013168:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801316c:	711a      	strb	r2, [r3, #4]
 801316e:	2200      	movs	r2, #0
 8013170:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d006      	beq.n	8013186 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	2200      	movs	r2, #0
 801317c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013180:	711a      	strb	r2, [r3, #4]
 8013182:	2200      	movs	r2, #0
 8013184:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2243      	movs	r2, #67	@ 0x43
 801318a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801318c:	4b02      	ldr	r3, [pc, #8]	@ (8013198 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801318e:	4618      	mov	r0, r3
 8013190:	3718      	adds	r7, #24
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}
 8013196:	bf00      	nop
 8013198:	24000108 	.word	0x24000108

0801319c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b086      	sub	sp, #24
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80131a4:	2182      	movs	r1, #130	@ 0x82
 80131a6:	4818      	ldr	r0, [pc, #96]	@ (8013208 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80131a8:	f000 fd33 	bl	8013c12 <USBD_GetEpDesc>
 80131ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80131ae:	2101      	movs	r1, #1
 80131b0:	4815      	ldr	r0, [pc, #84]	@ (8013208 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80131b2:	f000 fd2e 	bl	8013c12 <USBD_GetEpDesc>
 80131b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80131b8:	2181      	movs	r1, #129	@ 0x81
 80131ba:	4813      	ldr	r0, [pc, #76]	@ (8013208 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80131bc:	f000 fd29 	bl	8013c12 <USBD_GetEpDesc>
 80131c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d002      	beq.n	80131ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	2210      	movs	r2, #16
 80131cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80131ce:	693b      	ldr	r3, [r7, #16]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d006      	beq.n	80131e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80131d4:	693b      	ldr	r3, [r7, #16]
 80131d6:	2200      	movs	r2, #0
 80131d8:	711a      	strb	r2, [r3, #4]
 80131da:	2200      	movs	r2, #0
 80131dc:	f042 0202 	orr.w	r2, r2, #2
 80131e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d006      	beq.n	80131f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	2200      	movs	r2, #0
 80131ec:	711a      	strb	r2, [r3, #4]
 80131ee:	2200      	movs	r2, #0
 80131f0:	f042 0202 	orr.w	r2, r2, #2
 80131f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2243      	movs	r2, #67	@ 0x43
 80131fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80131fc:	4b02      	ldr	r3, [pc, #8]	@ (8013208 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80131fe:	4618      	mov	r0, r3
 8013200:	3718      	adds	r7, #24
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}
 8013206:	bf00      	nop
 8013208:	24000108 	.word	0x24000108

0801320c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b086      	sub	sp, #24
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013214:	2182      	movs	r1, #130	@ 0x82
 8013216:	4818      	ldr	r0, [pc, #96]	@ (8013278 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013218:	f000 fcfb 	bl	8013c12 <USBD_GetEpDesc>
 801321c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801321e:	2101      	movs	r1, #1
 8013220:	4815      	ldr	r0, [pc, #84]	@ (8013278 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013222:	f000 fcf6 	bl	8013c12 <USBD_GetEpDesc>
 8013226:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013228:	2181      	movs	r1, #129	@ 0x81
 801322a:	4813      	ldr	r0, [pc, #76]	@ (8013278 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801322c:	f000 fcf1 	bl	8013c12 <USBD_GetEpDesc>
 8013230:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d002      	beq.n	801323e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	2210      	movs	r2, #16
 801323c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801323e:	693b      	ldr	r3, [r7, #16]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d006      	beq.n	8013252 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	2200      	movs	r2, #0
 8013248:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801324c:	711a      	strb	r2, [r3, #4]
 801324e:	2200      	movs	r2, #0
 8013250:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d006      	beq.n	8013266 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	2200      	movs	r2, #0
 801325c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013260:	711a      	strb	r2, [r3, #4]
 8013262:	2200      	movs	r2, #0
 8013264:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	2243      	movs	r2, #67	@ 0x43
 801326a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801326c:	4b02      	ldr	r3, [pc, #8]	@ (8013278 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801326e:	4618      	mov	r0, r3
 8013270:	3718      	adds	r7, #24
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}
 8013276:	bf00      	nop
 8013278:	24000108 	.word	0x24000108

0801327c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801327c:	b480      	push	{r7}
 801327e:	b083      	sub	sp, #12
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	220a      	movs	r2, #10
 8013288:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801328a:	4b03      	ldr	r3, [pc, #12]	@ (8013298 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801328c:	4618      	mov	r0, r3
 801328e:	370c      	adds	r7, #12
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr
 8013298:	240000c4 	.word	0x240000c4

0801329c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801329c:	b480      	push	{r7}
 801329e:	b083      	sub	sp, #12
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
 80132a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80132a6:	683b      	ldr	r3, [r7, #0]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d101      	bne.n	80132b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80132ac:	2303      	movs	r3, #3
 80132ae:	e009      	b.n	80132c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80132b6:	687a      	ldr	r2, [r7, #4]
 80132b8:	33b0      	adds	r3, #176	@ 0xb0
 80132ba:	009b      	lsls	r3, r3, #2
 80132bc:	4413      	add	r3, r2
 80132be:	683a      	ldr	r2, [r7, #0]
 80132c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80132c2:	2300      	movs	r3, #0
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	370c      	adds	r7, #12
 80132c8:	46bd      	mov	sp, r7
 80132ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ce:	4770      	bx	lr

080132d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80132d0:	b480      	push	{r7}
 80132d2:	b087      	sub	sp, #28
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	32b0      	adds	r2, #176	@ 0xb0
 80132e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80132ec:	697b      	ldr	r3, [r7, #20]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d101      	bne.n	80132f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80132f2:	2303      	movs	r3, #3
 80132f4:	e008      	b.n	8013308 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80132f6:	697b      	ldr	r3, [r7, #20]
 80132f8:	68ba      	ldr	r2, [r7, #8]
 80132fa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	687a      	ldr	r2, [r7, #4]
 8013302:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8013306:	2300      	movs	r3, #0
}
 8013308:	4618      	mov	r0, r3
 801330a:	371c      	adds	r7, #28
 801330c:	46bd      	mov	sp, r7
 801330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013312:	4770      	bx	lr

08013314 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013314:	b480      	push	{r7}
 8013316:	b085      	sub	sp, #20
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	32b0      	adds	r2, #176	@ 0xb0
 8013328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801332c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d101      	bne.n	8013338 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013334:	2303      	movs	r3, #3
 8013336:	e004      	b.n	8013342 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	683a      	ldr	r2, [r7, #0]
 801333c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8013340:	2300      	movs	r3, #0
}
 8013342:	4618      	mov	r0, r3
 8013344:	3714      	adds	r7, #20
 8013346:	46bd      	mov	sp, r7
 8013348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334c:	4770      	bx	lr
	...

08013350 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b084      	sub	sp, #16
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	32b0      	adds	r2, #176	@ 0xb0
 8013362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013366:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013368:	2301      	movs	r3, #1
 801336a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d101      	bne.n	8013376 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013372:	2303      	movs	r3, #3
 8013374:	e025      	b.n	80133c2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013376:	68bb      	ldr	r3, [r7, #8]
 8013378:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801337c:	2b00      	cmp	r3, #0
 801337e:	d11f      	bne.n	80133c0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013380:	68bb      	ldr	r3, [r7, #8]
 8013382:	2201      	movs	r2, #1
 8013384:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013388:	4b10      	ldr	r3, [pc, #64]	@ (80133cc <USBD_CDC_TransmitPacket+0x7c>)
 801338a:	781b      	ldrb	r3, [r3, #0]
 801338c:	f003 020f 	and.w	r2, r3, #15
 8013390:	68bb      	ldr	r3, [r7, #8]
 8013392:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013396:	6878      	ldr	r0, [r7, #4]
 8013398:	4613      	mov	r3, r2
 801339a:	009b      	lsls	r3, r3, #2
 801339c:	4413      	add	r3, r2
 801339e:	009b      	lsls	r3, r3, #2
 80133a0:	4403      	add	r3, r0
 80133a2:	3318      	adds	r3, #24
 80133a4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80133a6:	4b09      	ldr	r3, [pc, #36]	@ (80133cc <USBD_CDC_TransmitPacket+0x7c>)
 80133a8:	7819      	ldrb	r1, [r3, #0]
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80133b6:	6878      	ldr	r0, [r7, #4]
 80133b8:	f005 f8e7 	bl	801858a <USBD_LL_Transmit>

    ret = USBD_OK;
 80133bc:	2300      	movs	r3, #0
 80133be:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80133c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3710      	adds	r7, #16
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}
 80133ca:	bf00      	nop
 80133cc:	2400014b 	.word	0x2400014b

080133d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b084      	sub	sp, #16
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	32b0      	adds	r2, #176	@ 0xb0
 80133e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	32b0      	adds	r2, #176	@ 0xb0
 80133f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d101      	bne.n	80133fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80133fa:	2303      	movs	r3, #3
 80133fc:	e018      	b.n	8013430 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	7c1b      	ldrb	r3, [r3, #16]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d10a      	bne.n	801341c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013406:	4b0c      	ldr	r3, [pc, #48]	@ (8013438 <USBD_CDC_ReceivePacket+0x68>)
 8013408:	7819      	ldrb	r1, [r3, #0]
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013410:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f005 f8d9 	bl	80185cc <USBD_LL_PrepareReceive>
 801341a:	e008      	b.n	801342e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801341c:	4b06      	ldr	r3, [pc, #24]	@ (8013438 <USBD_CDC_ReceivePacket+0x68>)
 801341e:	7819      	ldrb	r1, [r3, #0]
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013426:	2340      	movs	r3, #64	@ 0x40
 8013428:	6878      	ldr	r0, [r7, #4]
 801342a:	f005 f8cf 	bl	80185cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801342e:	2300      	movs	r3, #0
}
 8013430:	4618      	mov	r0, r3
 8013432:	3710      	adds	r7, #16
 8013434:	46bd      	mov	sp, r7
 8013436:	bd80      	pop	{r7, pc}
 8013438:	2400014c 	.word	0x2400014c

0801343c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b086      	sub	sp, #24
 8013440:	af00      	add	r7, sp, #0
 8013442:	60f8      	str	r0, [r7, #12]
 8013444:	60b9      	str	r1, [r7, #8]
 8013446:	4613      	mov	r3, r2
 8013448:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d10a      	bne.n	8013466 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8013450:	4817      	ldr	r0, [pc, #92]	@ (80134b0 <USBD_Init+0x74>)
 8013452:	f005 f9f5 	bl	8018840 <iprintf>
 8013456:	4817      	ldr	r0, [pc, #92]	@ (80134b4 <USBD_Init+0x78>)
 8013458:	f005 f9f2 	bl	8018840 <iprintf>
 801345c:	200a      	movs	r0, #10
 801345e:	f005 fa01 	bl	8018864 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013462:	2303      	movs	r3, #3
 8013464:	e01f      	b.n	80134a6 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2200      	movs	r2, #0
 801346a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	2200      	movs	r2, #0
 8013472:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	2200      	movs	r2, #0
 801347a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d003      	beq.n	801348c <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	68ba      	ldr	r2, [r7, #8]
 8013488:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	2201      	movs	r2, #1
 8013490:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	79fa      	ldrb	r2, [r7, #7]
 8013498:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801349a:	68f8      	ldr	r0, [r7, #12]
 801349c:	f004 ff3c 	bl	8018318 <USBD_LL_Init>
 80134a0:	4603      	mov	r3, r0
 80134a2:	75fb      	strb	r3, [r7, #23]

  return ret;
 80134a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80134a6:	4618      	mov	r0, r3
 80134a8:	3718      	adds	r7, #24
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}
 80134ae:	bf00      	nop
 80134b0:	08019ee0 	.word	0x08019ee0
 80134b4:	08019ee8 	.word	0x08019ee8

080134b8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b084      	sub	sp, #16
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
 80134c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80134c2:	2300      	movs	r3, #0
 80134c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d10a      	bne.n	80134e2 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80134cc:	481a      	ldr	r0, [pc, #104]	@ (8013538 <USBD_RegisterClass+0x80>)
 80134ce:	f005 f9b7 	bl	8018840 <iprintf>
 80134d2:	481a      	ldr	r0, [pc, #104]	@ (801353c <USBD_RegisterClass+0x84>)
 80134d4:	f005 f9b4 	bl	8018840 <iprintf>
 80134d8:	200a      	movs	r0, #10
 80134da:	f005 f9c3 	bl	8018864 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80134de:	2303      	movs	r3, #3
 80134e0:	e025      	b.n	801352e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	683a      	ldr	r2, [r7, #0]
 80134e6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	32ae      	adds	r2, #174	@ 0xae
 80134f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d00f      	beq.n	801351e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	32ae      	adds	r2, #174	@ 0xae
 8013508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801350e:	f107 020e 	add.w	r2, r7, #14
 8013512:	4610      	mov	r0, r2
 8013514:	4798      	blx	r3
 8013516:	4602      	mov	r2, r0
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013524:	1c5a      	adds	r2, r3, #1
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801352c:	2300      	movs	r3, #0
}
 801352e:	4618      	mov	r0, r3
 8013530:	3710      	adds	r7, #16
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
 8013536:	bf00      	nop
 8013538:	08019ee0 	.word	0x08019ee0
 801353c:	08019f00 	.word	0x08019f00

08013540 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b082      	sub	sp, #8
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f004 ff35 	bl	80183b8 <USBD_LL_Start>
 801354e:	4603      	mov	r3, r0
}
 8013550:	4618      	mov	r0, r3
 8013552:	3708      	adds	r7, #8
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}

08013558 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013558:	b480      	push	{r7}
 801355a:	b083      	sub	sp, #12
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013560:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013562:	4618      	mov	r0, r3
 8013564:	370c      	adds	r7, #12
 8013566:	46bd      	mov	sp, r7
 8013568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356c:	4770      	bx	lr

0801356e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801356e:	b580      	push	{r7, lr}
 8013570:	b084      	sub	sp, #16
 8013572:	af00      	add	r7, sp, #0
 8013574:	6078      	str	r0, [r7, #4]
 8013576:	460b      	mov	r3, r1
 8013578:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801357a:	2300      	movs	r3, #0
 801357c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013584:	2b00      	cmp	r3, #0
 8013586:	d009      	beq.n	801359c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	78fa      	ldrb	r2, [r7, #3]
 8013592:	4611      	mov	r1, r2
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	4798      	blx	r3
 8013598:	4603      	mov	r3, r0
 801359a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801359c:	7bfb      	ldrb	r3, [r7, #15]
}
 801359e:	4618      	mov	r0, r3
 80135a0:	3710      	adds	r7, #16
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd80      	pop	{r7, pc}

080135a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80135a6:	b580      	push	{r7, lr}
 80135a8:	b084      	sub	sp, #16
 80135aa:	af00      	add	r7, sp, #0
 80135ac:	6078      	str	r0, [r7, #4]
 80135ae:	460b      	mov	r3, r1
 80135b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80135b2:	2300      	movs	r3, #0
 80135b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80135bc:	685b      	ldr	r3, [r3, #4]
 80135be:	78fa      	ldrb	r2, [r7, #3]
 80135c0:	4611      	mov	r1, r2
 80135c2:	6878      	ldr	r0, [r7, #4]
 80135c4:	4798      	blx	r3
 80135c6:	4603      	mov	r3, r0
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d001      	beq.n	80135d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80135cc:	2303      	movs	r3, #3
 80135ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80135d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	3710      	adds	r7, #16
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}

080135da <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80135da:	b580      	push	{r7, lr}
 80135dc:	b084      	sub	sp, #16
 80135de:	af00      	add	r7, sp, #0
 80135e0:	6078      	str	r0, [r7, #4]
 80135e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80135ea:	6839      	ldr	r1, [r7, #0]
 80135ec:	4618      	mov	r0, r3
 80135ee:	f001 f936 	bl	801485e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2201      	movs	r2, #1
 80135f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013600:	461a      	mov	r2, r3
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801360e:	f003 031f 	and.w	r3, r3, #31
 8013612:	2b02      	cmp	r3, #2
 8013614:	d01a      	beq.n	801364c <USBD_LL_SetupStage+0x72>
 8013616:	2b02      	cmp	r3, #2
 8013618:	d822      	bhi.n	8013660 <USBD_LL_SetupStage+0x86>
 801361a:	2b00      	cmp	r3, #0
 801361c:	d002      	beq.n	8013624 <USBD_LL_SetupStage+0x4a>
 801361e:	2b01      	cmp	r3, #1
 8013620:	d00a      	beq.n	8013638 <USBD_LL_SetupStage+0x5e>
 8013622:	e01d      	b.n	8013660 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801362a:	4619      	mov	r1, r3
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f000 fb63 	bl	8013cf8 <USBD_StdDevReq>
 8013632:	4603      	mov	r3, r0
 8013634:	73fb      	strb	r3, [r7, #15]
      break;
 8013636:	e020      	b.n	801367a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801363e:	4619      	mov	r1, r3
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f000 fbcb 	bl	8013ddc <USBD_StdItfReq>
 8013646:	4603      	mov	r3, r0
 8013648:	73fb      	strb	r3, [r7, #15]
      break;
 801364a:	e016      	b.n	801367a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013652:	4619      	mov	r1, r3
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f000 fc2d 	bl	8013eb4 <USBD_StdEPReq>
 801365a:	4603      	mov	r3, r0
 801365c:	73fb      	strb	r3, [r7, #15]
      break;
 801365e:	e00c      	b.n	801367a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013666:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801366a:	b2db      	uxtb	r3, r3
 801366c:	4619      	mov	r1, r3
 801366e:	6878      	ldr	r0, [r7, #4]
 8013670:	f004 ff02 	bl	8018478 <USBD_LL_StallEP>
 8013674:	4603      	mov	r3, r0
 8013676:	73fb      	strb	r3, [r7, #15]
      break;
 8013678:	bf00      	nop
  }

  return ret;
 801367a:	7bfb      	ldrb	r3, [r7, #15]
}
 801367c:	4618      	mov	r0, r3
 801367e:	3710      	adds	r7, #16
 8013680:	46bd      	mov	sp, r7
 8013682:	bd80      	pop	{r7, pc}

08013684 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b086      	sub	sp, #24
 8013688:	af00      	add	r7, sp, #0
 801368a:	60f8      	str	r0, [r7, #12]
 801368c:	460b      	mov	r3, r1
 801368e:	607a      	str	r2, [r7, #4]
 8013690:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013692:	2300      	movs	r3, #0
 8013694:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013696:	7afb      	ldrb	r3, [r7, #11]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d16e      	bne.n	801377a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80136a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80136aa:	2b03      	cmp	r3, #3
 80136ac:	f040 8098 	bne.w	80137e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	689a      	ldr	r2, [r3, #8]
 80136b4:	693b      	ldr	r3, [r7, #16]
 80136b6:	68db      	ldr	r3, [r3, #12]
 80136b8:	429a      	cmp	r2, r3
 80136ba:	d913      	bls.n	80136e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80136bc:	693b      	ldr	r3, [r7, #16]
 80136be:	689a      	ldr	r2, [r3, #8]
 80136c0:	693b      	ldr	r3, [r7, #16]
 80136c2:	68db      	ldr	r3, [r3, #12]
 80136c4:	1ad2      	subs	r2, r2, r3
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80136ca:	693b      	ldr	r3, [r7, #16]
 80136cc:	68da      	ldr	r2, [r3, #12]
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	689b      	ldr	r3, [r3, #8]
 80136d2:	4293      	cmp	r3, r2
 80136d4:	bf28      	it	cs
 80136d6:	4613      	movcs	r3, r2
 80136d8:	461a      	mov	r2, r3
 80136da:	6879      	ldr	r1, [r7, #4]
 80136dc:	68f8      	ldr	r0, [r7, #12]
 80136de:	f001 f9be 	bl	8014a5e <USBD_CtlContinueRx>
 80136e2:	e07d      	b.n	80137e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80136ea:	f003 031f 	and.w	r3, r3, #31
 80136ee:	2b02      	cmp	r3, #2
 80136f0:	d014      	beq.n	801371c <USBD_LL_DataOutStage+0x98>
 80136f2:	2b02      	cmp	r3, #2
 80136f4:	d81d      	bhi.n	8013732 <USBD_LL_DataOutStage+0xae>
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d002      	beq.n	8013700 <USBD_LL_DataOutStage+0x7c>
 80136fa:	2b01      	cmp	r3, #1
 80136fc:	d003      	beq.n	8013706 <USBD_LL_DataOutStage+0x82>
 80136fe:	e018      	b.n	8013732 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013700:	2300      	movs	r3, #0
 8013702:	75bb      	strb	r3, [r7, #22]
            break;
 8013704:	e018      	b.n	8013738 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801370c:	b2db      	uxtb	r3, r3
 801370e:	4619      	mov	r1, r3
 8013710:	68f8      	ldr	r0, [r7, #12]
 8013712:	f000 fa64 	bl	8013bde <USBD_CoreFindIF>
 8013716:	4603      	mov	r3, r0
 8013718:	75bb      	strb	r3, [r7, #22]
            break;
 801371a:	e00d      	b.n	8013738 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013722:	b2db      	uxtb	r3, r3
 8013724:	4619      	mov	r1, r3
 8013726:	68f8      	ldr	r0, [r7, #12]
 8013728:	f000 fa66 	bl	8013bf8 <USBD_CoreFindEP>
 801372c:	4603      	mov	r3, r0
 801372e:	75bb      	strb	r3, [r7, #22]
            break;
 8013730:	e002      	b.n	8013738 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013732:	2300      	movs	r3, #0
 8013734:	75bb      	strb	r3, [r7, #22]
            break;
 8013736:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013738:	7dbb      	ldrb	r3, [r7, #22]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d119      	bne.n	8013772 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013744:	b2db      	uxtb	r3, r3
 8013746:	2b03      	cmp	r3, #3
 8013748:	d113      	bne.n	8013772 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801374a:	7dba      	ldrb	r2, [r7, #22]
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	32ae      	adds	r2, #174	@ 0xae
 8013750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013754:	691b      	ldr	r3, [r3, #16]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d00b      	beq.n	8013772 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801375a:	7dba      	ldrb	r2, [r7, #22]
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013762:	7dba      	ldrb	r2, [r7, #22]
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	32ae      	adds	r2, #174	@ 0xae
 8013768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801376c:	691b      	ldr	r3, [r3, #16]
 801376e:	68f8      	ldr	r0, [r7, #12]
 8013770:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013772:	68f8      	ldr	r0, [r7, #12]
 8013774:	f001 f984 	bl	8014a80 <USBD_CtlSendStatus>
 8013778:	e032      	b.n	80137e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801377a:	7afb      	ldrb	r3, [r7, #11]
 801377c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013780:	b2db      	uxtb	r3, r3
 8013782:	4619      	mov	r1, r3
 8013784:	68f8      	ldr	r0, [r7, #12]
 8013786:	f000 fa37 	bl	8013bf8 <USBD_CoreFindEP>
 801378a:	4603      	mov	r3, r0
 801378c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801378e:	7dbb      	ldrb	r3, [r7, #22]
 8013790:	2bff      	cmp	r3, #255	@ 0xff
 8013792:	d025      	beq.n	80137e0 <USBD_LL_DataOutStage+0x15c>
 8013794:	7dbb      	ldrb	r3, [r7, #22]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d122      	bne.n	80137e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80137a0:	b2db      	uxtb	r3, r3
 80137a2:	2b03      	cmp	r3, #3
 80137a4:	d117      	bne.n	80137d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80137a6:	7dba      	ldrb	r2, [r7, #22]
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	32ae      	adds	r2, #174	@ 0xae
 80137ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137b0:	699b      	ldr	r3, [r3, #24]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d00f      	beq.n	80137d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80137b6:	7dba      	ldrb	r2, [r7, #22]
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80137be:	7dba      	ldrb	r2, [r7, #22]
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	32ae      	adds	r2, #174	@ 0xae
 80137c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137c8:	699b      	ldr	r3, [r3, #24]
 80137ca:	7afa      	ldrb	r2, [r7, #11]
 80137cc:	4611      	mov	r1, r2
 80137ce:	68f8      	ldr	r0, [r7, #12]
 80137d0:	4798      	blx	r3
 80137d2:	4603      	mov	r3, r0
 80137d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80137d6:	7dfb      	ldrb	r3, [r7, #23]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d001      	beq.n	80137e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80137dc:	7dfb      	ldrb	r3, [r7, #23]
 80137de:	e000      	b.n	80137e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80137e0:	2300      	movs	r3, #0
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	3718      	adds	r7, #24
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd80      	pop	{r7, pc}

080137ea <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80137ea:	b580      	push	{r7, lr}
 80137ec:	b086      	sub	sp, #24
 80137ee:	af00      	add	r7, sp, #0
 80137f0:	60f8      	str	r0, [r7, #12]
 80137f2:	460b      	mov	r3, r1
 80137f4:	607a      	str	r2, [r7, #4]
 80137f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80137f8:	7afb      	ldrb	r3, [r7, #11]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d16f      	bne.n	80138de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	3314      	adds	r3, #20
 8013802:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801380a:	2b02      	cmp	r3, #2
 801380c:	d15a      	bne.n	80138c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801380e:	693b      	ldr	r3, [r7, #16]
 8013810:	689a      	ldr	r2, [r3, #8]
 8013812:	693b      	ldr	r3, [r7, #16]
 8013814:	68db      	ldr	r3, [r3, #12]
 8013816:	429a      	cmp	r2, r3
 8013818:	d914      	bls.n	8013844 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801381a:	693b      	ldr	r3, [r7, #16]
 801381c:	689a      	ldr	r2, [r3, #8]
 801381e:	693b      	ldr	r3, [r7, #16]
 8013820:	68db      	ldr	r3, [r3, #12]
 8013822:	1ad2      	subs	r2, r2, r3
 8013824:	693b      	ldr	r3, [r7, #16]
 8013826:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013828:	693b      	ldr	r3, [r7, #16]
 801382a:	689b      	ldr	r3, [r3, #8]
 801382c:	461a      	mov	r2, r3
 801382e:	6879      	ldr	r1, [r7, #4]
 8013830:	68f8      	ldr	r0, [r7, #12]
 8013832:	f001 f8e6 	bl	8014a02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013836:	2300      	movs	r3, #0
 8013838:	2200      	movs	r2, #0
 801383a:	2100      	movs	r1, #0
 801383c:	68f8      	ldr	r0, [r7, #12]
 801383e:	f004 fec5 	bl	80185cc <USBD_LL_PrepareReceive>
 8013842:	e03f      	b.n	80138c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013844:	693b      	ldr	r3, [r7, #16]
 8013846:	68da      	ldr	r2, [r3, #12]
 8013848:	693b      	ldr	r3, [r7, #16]
 801384a:	689b      	ldr	r3, [r3, #8]
 801384c:	429a      	cmp	r2, r3
 801384e:	d11c      	bne.n	801388a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013850:	693b      	ldr	r3, [r7, #16]
 8013852:	685a      	ldr	r2, [r3, #4]
 8013854:	693b      	ldr	r3, [r7, #16]
 8013856:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013858:	429a      	cmp	r2, r3
 801385a:	d316      	bcc.n	801388a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801385c:	693b      	ldr	r3, [r7, #16]
 801385e:	685a      	ldr	r2, [r3, #4]
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013866:	429a      	cmp	r2, r3
 8013868:	d20f      	bcs.n	801388a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801386a:	2200      	movs	r2, #0
 801386c:	2100      	movs	r1, #0
 801386e:	68f8      	ldr	r0, [r7, #12]
 8013870:	f001 f8c7 	bl	8014a02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	2200      	movs	r2, #0
 8013878:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801387c:	2300      	movs	r3, #0
 801387e:	2200      	movs	r2, #0
 8013880:	2100      	movs	r1, #0
 8013882:	68f8      	ldr	r0, [r7, #12]
 8013884:	f004 fea2 	bl	80185cc <USBD_LL_PrepareReceive>
 8013888:	e01c      	b.n	80138c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013890:	b2db      	uxtb	r3, r3
 8013892:	2b03      	cmp	r3, #3
 8013894:	d10f      	bne.n	80138b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801389c:	68db      	ldr	r3, [r3, #12]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d009      	beq.n	80138b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	2200      	movs	r2, #0
 80138a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80138b0:	68db      	ldr	r3, [r3, #12]
 80138b2:	68f8      	ldr	r0, [r7, #12]
 80138b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80138b6:	2180      	movs	r1, #128	@ 0x80
 80138b8:	68f8      	ldr	r0, [r7, #12]
 80138ba:	f004 fddd 	bl	8018478 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80138be:	68f8      	ldr	r0, [r7, #12]
 80138c0:	f001 f8f1 	bl	8014aa6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d03a      	beq.n	8013944 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80138ce:	68f8      	ldr	r0, [r7, #12]
 80138d0:	f7ff fe42 	bl	8013558 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	2200      	movs	r2, #0
 80138d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80138dc:	e032      	b.n	8013944 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80138de:	7afb      	ldrb	r3, [r7, #11]
 80138e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80138e4:	b2db      	uxtb	r3, r3
 80138e6:	4619      	mov	r1, r3
 80138e8:	68f8      	ldr	r0, [r7, #12]
 80138ea:	f000 f985 	bl	8013bf8 <USBD_CoreFindEP>
 80138ee:	4603      	mov	r3, r0
 80138f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80138f2:	7dfb      	ldrb	r3, [r7, #23]
 80138f4:	2bff      	cmp	r3, #255	@ 0xff
 80138f6:	d025      	beq.n	8013944 <USBD_LL_DataInStage+0x15a>
 80138f8:	7dfb      	ldrb	r3, [r7, #23]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d122      	bne.n	8013944 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013904:	b2db      	uxtb	r3, r3
 8013906:	2b03      	cmp	r3, #3
 8013908:	d11c      	bne.n	8013944 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801390a:	7dfa      	ldrb	r2, [r7, #23]
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	32ae      	adds	r2, #174	@ 0xae
 8013910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013914:	695b      	ldr	r3, [r3, #20]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d014      	beq.n	8013944 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801391a:	7dfa      	ldrb	r2, [r7, #23]
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013922:	7dfa      	ldrb	r2, [r7, #23]
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	32ae      	adds	r2, #174	@ 0xae
 8013928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801392c:	695b      	ldr	r3, [r3, #20]
 801392e:	7afa      	ldrb	r2, [r7, #11]
 8013930:	4611      	mov	r1, r2
 8013932:	68f8      	ldr	r0, [r7, #12]
 8013934:	4798      	blx	r3
 8013936:	4603      	mov	r3, r0
 8013938:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801393a:	7dbb      	ldrb	r3, [r7, #22]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d001      	beq.n	8013944 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013940:	7dbb      	ldrb	r3, [r7, #22]
 8013942:	e000      	b.n	8013946 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013944:	2300      	movs	r3, #0
}
 8013946:	4618      	mov	r0, r3
 8013948:	3718      	adds	r7, #24
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}

0801394e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801394e:	b580      	push	{r7, lr}
 8013950:	b084      	sub	sp, #16
 8013952:	af00      	add	r7, sp, #0
 8013954:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013956:	2300      	movs	r3, #0
 8013958:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2201      	movs	r2, #1
 801395e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2200      	movs	r2, #0
 8013966:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2200      	movs	r2, #0
 801396e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	2200      	movs	r2, #0
 8013974:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	2200      	movs	r2, #0
 801397c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013986:	2b00      	cmp	r3, #0
 8013988:	d014      	beq.n	80139b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013990:	685b      	ldr	r3, [r3, #4]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d00e      	beq.n	80139b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801399c:	685b      	ldr	r3, [r3, #4]
 801399e:	687a      	ldr	r2, [r7, #4]
 80139a0:	6852      	ldr	r2, [r2, #4]
 80139a2:	b2d2      	uxtb	r2, r2
 80139a4:	4611      	mov	r1, r2
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	4798      	blx	r3
 80139aa:	4603      	mov	r3, r0
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d001      	beq.n	80139b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80139b0:	2303      	movs	r3, #3
 80139b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80139b4:	2340      	movs	r3, #64	@ 0x40
 80139b6:	2200      	movs	r2, #0
 80139b8:	2100      	movs	r1, #0
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f004 fd17 	bl	80183ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	2201      	movs	r2, #1
 80139c4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2240      	movs	r2, #64	@ 0x40
 80139cc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80139d0:	2340      	movs	r3, #64	@ 0x40
 80139d2:	2200      	movs	r2, #0
 80139d4:	2180      	movs	r1, #128	@ 0x80
 80139d6:	6878      	ldr	r0, [r7, #4]
 80139d8:	f004 fd09 	bl	80183ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2201      	movs	r2, #1
 80139e0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2240      	movs	r2, #64	@ 0x40
 80139e6:	621a      	str	r2, [r3, #32]

  return ret;
 80139e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80139ea:	4618      	mov	r0, r3
 80139ec:	3710      	adds	r7, #16
 80139ee:	46bd      	mov	sp, r7
 80139f0:	bd80      	pop	{r7, pc}

080139f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80139f2:	b480      	push	{r7}
 80139f4:	b083      	sub	sp, #12
 80139f6:	af00      	add	r7, sp, #0
 80139f8:	6078      	str	r0, [r7, #4]
 80139fa:	460b      	mov	r3, r1
 80139fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	78fa      	ldrb	r2, [r7, #3]
 8013a02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013a04:	2300      	movs	r3, #0
}
 8013a06:	4618      	mov	r0, r3
 8013a08:	370c      	adds	r7, #12
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a10:	4770      	bx	lr

08013a12 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013a12:	b480      	push	{r7}
 8013a14:	b083      	sub	sp, #12
 8013a16:	af00      	add	r7, sp, #0
 8013a18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a20:	b2db      	uxtb	r3, r3
 8013a22:	2b04      	cmp	r3, #4
 8013a24:	d006      	beq.n	8013a34 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a2c:	b2da      	uxtb	r2, r3
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2204      	movs	r2, #4
 8013a38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013a3c:	2300      	movs	r3, #0
}
 8013a3e:	4618      	mov	r0, r3
 8013a40:	370c      	adds	r7, #12
 8013a42:	46bd      	mov	sp, r7
 8013a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a48:	4770      	bx	lr

08013a4a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013a4a:	b480      	push	{r7}
 8013a4c:	b083      	sub	sp, #12
 8013a4e:	af00      	add	r7, sp, #0
 8013a50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a58:	b2db      	uxtb	r3, r3
 8013a5a:	2b04      	cmp	r3, #4
 8013a5c:	d106      	bne.n	8013a6c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013a64:	b2da      	uxtb	r2, r3
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013a6c:	2300      	movs	r3, #0
}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	370c      	adds	r7, #12
 8013a72:	46bd      	mov	sp, r7
 8013a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a78:	4770      	bx	lr

08013a7a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013a7a:	b580      	push	{r7, lr}
 8013a7c:	b082      	sub	sp, #8
 8013a7e:	af00      	add	r7, sp, #0
 8013a80:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a88:	b2db      	uxtb	r3, r3
 8013a8a:	2b03      	cmp	r3, #3
 8013a8c:	d110      	bne.n	8013ab0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d00b      	beq.n	8013ab0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a9e:	69db      	ldr	r3, [r3, #28]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d005      	beq.n	8013ab0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013aaa:	69db      	ldr	r3, [r3, #28]
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013ab0:	2300      	movs	r3, #0
}
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	3708      	adds	r7, #8
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}

08013aba <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013aba:	b580      	push	{r7, lr}
 8013abc:	b082      	sub	sp, #8
 8013abe:	af00      	add	r7, sp, #0
 8013ac0:	6078      	str	r0, [r7, #4]
 8013ac2:	460b      	mov	r3, r1
 8013ac4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	32ae      	adds	r2, #174	@ 0xae
 8013ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d101      	bne.n	8013adc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8013ad8:	2303      	movs	r3, #3
 8013ada:	e01c      	b.n	8013b16 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ae2:	b2db      	uxtb	r3, r3
 8013ae4:	2b03      	cmp	r3, #3
 8013ae6:	d115      	bne.n	8013b14 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	32ae      	adds	r2, #174	@ 0xae
 8013af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013af6:	6a1b      	ldr	r3, [r3, #32]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d00b      	beq.n	8013b14 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	32ae      	adds	r2, #174	@ 0xae
 8013b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b0a:	6a1b      	ldr	r3, [r3, #32]
 8013b0c:	78fa      	ldrb	r2, [r7, #3]
 8013b0e:	4611      	mov	r1, r2
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013b14:	2300      	movs	r3, #0
}
 8013b16:	4618      	mov	r0, r3
 8013b18:	3708      	adds	r7, #8
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bd80      	pop	{r7, pc}

08013b1e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013b1e:	b580      	push	{r7, lr}
 8013b20:	b082      	sub	sp, #8
 8013b22:	af00      	add	r7, sp, #0
 8013b24:	6078      	str	r0, [r7, #4]
 8013b26:	460b      	mov	r3, r1
 8013b28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	32ae      	adds	r2, #174	@ 0xae
 8013b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d101      	bne.n	8013b40 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013b3c:	2303      	movs	r3, #3
 8013b3e:	e01c      	b.n	8013b7a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b46:	b2db      	uxtb	r3, r3
 8013b48:	2b03      	cmp	r3, #3
 8013b4a:	d115      	bne.n	8013b78 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	32ae      	adds	r2, #174	@ 0xae
 8013b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d00b      	beq.n	8013b78 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	32ae      	adds	r2, #174	@ 0xae
 8013b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b70:	78fa      	ldrb	r2, [r7, #3]
 8013b72:	4611      	mov	r1, r2
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013b78:	2300      	movs	r3, #0
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	3708      	adds	r7, #8
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}

08013b82 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013b82:	b480      	push	{r7}
 8013b84:	b083      	sub	sp, #12
 8013b86:	af00      	add	r7, sp, #0
 8013b88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013b8a:	2300      	movs	r3, #0
}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	370c      	adds	r7, #12
 8013b90:	46bd      	mov	sp, r7
 8013b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b96:	4770      	bx	lr

08013b98 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b084      	sub	sp, #16
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2201      	movs	r2, #1
 8013ba8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d00e      	beq.n	8013bd4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013bbc:	685b      	ldr	r3, [r3, #4]
 8013bbe:	687a      	ldr	r2, [r7, #4]
 8013bc0:	6852      	ldr	r2, [r2, #4]
 8013bc2:	b2d2      	uxtb	r2, r2
 8013bc4:	4611      	mov	r1, r2
 8013bc6:	6878      	ldr	r0, [r7, #4]
 8013bc8:	4798      	blx	r3
 8013bca:	4603      	mov	r3, r0
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d001      	beq.n	8013bd4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8013bd0:	2303      	movs	r3, #3
 8013bd2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	3710      	adds	r7, #16
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}

08013bde <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013bde:	b480      	push	{r7}
 8013be0:	b083      	sub	sp, #12
 8013be2:	af00      	add	r7, sp, #0
 8013be4:	6078      	str	r0, [r7, #4]
 8013be6:	460b      	mov	r3, r1
 8013be8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013bea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013bec:	4618      	mov	r0, r3
 8013bee:	370c      	adds	r7, #12
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf6:	4770      	bx	lr

08013bf8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013bf8:	b480      	push	{r7}
 8013bfa:	b083      	sub	sp, #12
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
 8013c00:	460b      	mov	r3, r1
 8013c02:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013c04:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013c06:	4618      	mov	r0, r3
 8013c08:	370c      	adds	r7, #12
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c10:	4770      	bx	lr

08013c12 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013c12:	b580      	push	{r7, lr}
 8013c14:	b086      	sub	sp, #24
 8013c16:	af00      	add	r7, sp, #0
 8013c18:	6078      	str	r0, [r7, #4]
 8013c1a:	460b      	mov	r3, r1
 8013c1c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013c26:	2300      	movs	r3, #0
 8013c28:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	885b      	ldrh	r3, [r3, #2]
 8013c2e:	b29b      	uxth	r3, r3
 8013c30:	68fa      	ldr	r2, [r7, #12]
 8013c32:	7812      	ldrb	r2, [r2, #0]
 8013c34:	4293      	cmp	r3, r2
 8013c36:	d91f      	bls.n	8013c78 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	781b      	ldrb	r3, [r3, #0]
 8013c3c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013c3e:	e013      	b.n	8013c68 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013c40:	f107 030a 	add.w	r3, r7, #10
 8013c44:	4619      	mov	r1, r3
 8013c46:	6978      	ldr	r0, [r7, #20]
 8013c48:	f000 f81b 	bl	8013c82 <USBD_GetNextDesc>
 8013c4c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013c4e:	697b      	ldr	r3, [r7, #20]
 8013c50:	785b      	ldrb	r3, [r3, #1]
 8013c52:	2b05      	cmp	r3, #5
 8013c54:	d108      	bne.n	8013c68 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013c56:	697b      	ldr	r3, [r7, #20]
 8013c58:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013c5a:	693b      	ldr	r3, [r7, #16]
 8013c5c:	789b      	ldrb	r3, [r3, #2]
 8013c5e:	78fa      	ldrb	r2, [r7, #3]
 8013c60:	429a      	cmp	r2, r3
 8013c62:	d008      	beq.n	8013c76 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013c64:	2300      	movs	r3, #0
 8013c66:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	885b      	ldrh	r3, [r3, #2]
 8013c6c:	b29a      	uxth	r2, r3
 8013c6e:	897b      	ldrh	r3, [r7, #10]
 8013c70:	429a      	cmp	r2, r3
 8013c72:	d8e5      	bhi.n	8013c40 <USBD_GetEpDesc+0x2e>
 8013c74:	e000      	b.n	8013c78 <USBD_GetEpDesc+0x66>
          break;
 8013c76:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013c78:	693b      	ldr	r3, [r7, #16]
}
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	3718      	adds	r7, #24
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}

08013c82 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013c82:	b480      	push	{r7}
 8013c84:	b085      	sub	sp, #20
 8013c86:	af00      	add	r7, sp, #0
 8013c88:	6078      	str	r0, [r7, #4]
 8013c8a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	881b      	ldrh	r3, [r3, #0]
 8013c94:	68fa      	ldr	r2, [r7, #12]
 8013c96:	7812      	ldrb	r2, [r2, #0]
 8013c98:	4413      	add	r3, r2
 8013c9a:	b29a      	uxth	r2, r3
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	781b      	ldrb	r3, [r3, #0]
 8013ca4:	461a      	mov	r2, r3
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	4413      	add	r3, r2
 8013caa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013cac:	68fb      	ldr	r3, [r7, #12]
}
 8013cae:	4618      	mov	r0, r3
 8013cb0:	3714      	adds	r7, #20
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb8:	4770      	bx	lr

08013cba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013cba:	b480      	push	{r7}
 8013cbc:	b087      	sub	sp, #28
 8013cbe:	af00      	add	r7, sp, #0
 8013cc0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013cc6:	697b      	ldr	r3, [r7, #20]
 8013cc8:	781b      	ldrb	r3, [r3, #0]
 8013cca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013ccc:	697b      	ldr	r3, [r7, #20]
 8013cce:	3301      	adds	r3, #1
 8013cd0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	781b      	ldrb	r3, [r3, #0]
 8013cd6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013cd8:	8a3b      	ldrh	r3, [r7, #16]
 8013cda:	021b      	lsls	r3, r3, #8
 8013cdc:	b21a      	sxth	r2, r3
 8013cde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013ce2:	4313      	orrs	r3, r2
 8013ce4:	b21b      	sxth	r3, r3
 8013ce6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013ce8:	89fb      	ldrh	r3, [r7, #14]
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	371c      	adds	r7, #28
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf4:	4770      	bx	lr
	...

08013cf8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b084      	sub	sp, #16
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
 8013d00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013d02:	2300      	movs	r3, #0
 8013d04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	781b      	ldrb	r3, [r3, #0]
 8013d0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013d0e:	2b40      	cmp	r3, #64	@ 0x40
 8013d10:	d005      	beq.n	8013d1e <USBD_StdDevReq+0x26>
 8013d12:	2b40      	cmp	r3, #64	@ 0x40
 8013d14:	d857      	bhi.n	8013dc6 <USBD_StdDevReq+0xce>
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d00f      	beq.n	8013d3a <USBD_StdDevReq+0x42>
 8013d1a:	2b20      	cmp	r3, #32
 8013d1c:	d153      	bne.n	8013dc6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	32ae      	adds	r2, #174	@ 0xae
 8013d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d2c:	689b      	ldr	r3, [r3, #8]
 8013d2e:	6839      	ldr	r1, [r7, #0]
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	4798      	blx	r3
 8013d34:	4603      	mov	r3, r0
 8013d36:	73fb      	strb	r3, [r7, #15]
      break;
 8013d38:	e04a      	b.n	8013dd0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	785b      	ldrb	r3, [r3, #1]
 8013d3e:	2b09      	cmp	r3, #9
 8013d40:	d83b      	bhi.n	8013dba <USBD_StdDevReq+0xc2>
 8013d42:	a201      	add	r2, pc, #4	@ (adr r2, 8013d48 <USBD_StdDevReq+0x50>)
 8013d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d48:	08013d9d 	.word	0x08013d9d
 8013d4c:	08013db1 	.word	0x08013db1
 8013d50:	08013dbb 	.word	0x08013dbb
 8013d54:	08013da7 	.word	0x08013da7
 8013d58:	08013dbb 	.word	0x08013dbb
 8013d5c:	08013d7b 	.word	0x08013d7b
 8013d60:	08013d71 	.word	0x08013d71
 8013d64:	08013dbb 	.word	0x08013dbb
 8013d68:	08013d93 	.word	0x08013d93
 8013d6c:	08013d85 	.word	0x08013d85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013d70:	6839      	ldr	r1, [r7, #0]
 8013d72:	6878      	ldr	r0, [r7, #4]
 8013d74:	f000 fa3c 	bl	80141f0 <USBD_GetDescriptor>
          break;
 8013d78:	e024      	b.n	8013dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013d7a:	6839      	ldr	r1, [r7, #0]
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f000 fbcb 	bl	8014518 <USBD_SetAddress>
          break;
 8013d82:	e01f      	b.n	8013dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013d84:	6839      	ldr	r1, [r7, #0]
 8013d86:	6878      	ldr	r0, [r7, #4]
 8013d88:	f000 fc0a 	bl	80145a0 <USBD_SetConfig>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	73fb      	strb	r3, [r7, #15]
          break;
 8013d90:	e018      	b.n	8013dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013d92:	6839      	ldr	r1, [r7, #0]
 8013d94:	6878      	ldr	r0, [r7, #4]
 8013d96:	f000 fcad 	bl	80146f4 <USBD_GetConfig>
          break;
 8013d9a:	e013      	b.n	8013dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013d9c:	6839      	ldr	r1, [r7, #0]
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f000 fcde 	bl	8014760 <USBD_GetStatus>
          break;
 8013da4:	e00e      	b.n	8013dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013da6:	6839      	ldr	r1, [r7, #0]
 8013da8:	6878      	ldr	r0, [r7, #4]
 8013daa:	f000 fd0d 	bl	80147c8 <USBD_SetFeature>
          break;
 8013dae:	e009      	b.n	8013dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013db0:	6839      	ldr	r1, [r7, #0]
 8013db2:	6878      	ldr	r0, [r7, #4]
 8013db4:	f000 fd31 	bl	801481a <USBD_ClrFeature>
          break;
 8013db8:	e004      	b.n	8013dc4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013dba:	6839      	ldr	r1, [r7, #0]
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f000 fd88 	bl	80148d2 <USBD_CtlError>
          break;
 8013dc2:	bf00      	nop
      }
      break;
 8013dc4:	e004      	b.n	8013dd0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013dc6:	6839      	ldr	r1, [r7, #0]
 8013dc8:	6878      	ldr	r0, [r7, #4]
 8013dca:	f000 fd82 	bl	80148d2 <USBD_CtlError>
      break;
 8013dce:	bf00      	nop
  }

  return ret;
 8013dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3710      	adds	r7, #16
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}
 8013dda:	bf00      	nop

08013ddc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b084      	sub	sp, #16
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
 8013de4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013de6:	2300      	movs	r3, #0
 8013de8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	781b      	ldrb	r3, [r3, #0]
 8013dee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013df2:	2b40      	cmp	r3, #64	@ 0x40
 8013df4:	d005      	beq.n	8013e02 <USBD_StdItfReq+0x26>
 8013df6:	2b40      	cmp	r3, #64	@ 0x40
 8013df8:	d852      	bhi.n	8013ea0 <USBD_StdItfReq+0xc4>
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d001      	beq.n	8013e02 <USBD_StdItfReq+0x26>
 8013dfe:	2b20      	cmp	r3, #32
 8013e00:	d14e      	bne.n	8013ea0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e08:	b2db      	uxtb	r3, r3
 8013e0a:	3b01      	subs	r3, #1
 8013e0c:	2b02      	cmp	r3, #2
 8013e0e:	d840      	bhi.n	8013e92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013e10:	683b      	ldr	r3, [r7, #0]
 8013e12:	889b      	ldrh	r3, [r3, #4]
 8013e14:	b2db      	uxtb	r3, r3
 8013e16:	2b01      	cmp	r3, #1
 8013e18:	d836      	bhi.n	8013e88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	889b      	ldrh	r3, [r3, #4]
 8013e1e:	b2db      	uxtb	r3, r3
 8013e20:	4619      	mov	r1, r3
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f7ff fedb 	bl	8013bde <USBD_CoreFindIF>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013e2c:	7bbb      	ldrb	r3, [r7, #14]
 8013e2e:	2bff      	cmp	r3, #255	@ 0xff
 8013e30:	d01d      	beq.n	8013e6e <USBD_StdItfReq+0x92>
 8013e32:	7bbb      	ldrb	r3, [r7, #14]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d11a      	bne.n	8013e6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013e38:	7bba      	ldrb	r2, [r7, #14]
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	32ae      	adds	r2, #174	@ 0xae
 8013e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e42:	689b      	ldr	r3, [r3, #8]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d00f      	beq.n	8013e68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013e48:	7bba      	ldrb	r2, [r7, #14]
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013e50:	7bba      	ldrb	r2, [r7, #14]
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	32ae      	adds	r2, #174	@ 0xae
 8013e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e5a:	689b      	ldr	r3, [r3, #8]
 8013e5c:	6839      	ldr	r1, [r7, #0]
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	4798      	blx	r3
 8013e62:	4603      	mov	r3, r0
 8013e64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013e66:	e004      	b.n	8013e72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013e68:	2303      	movs	r3, #3
 8013e6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013e6c:	e001      	b.n	8013e72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013e6e:	2303      	movs	r3, #3
 8013e70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013e72:	683b      	ldr	r3, [r7, #0]
 8013e74:	88db      	ldrh	r3, [r3, #6]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d110      	bne.n	8013e9c <USBD_StdItfReq+0xc0>
 8013e7a:	7bfb      	ldrb	r3, [r7, #15]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d10d      	bne.n	8013e9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013e80:	6878      	ldr	r0, [r7, #4]
 8013e82:	f000 fdfd 	bl	8014a80 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013e86:	e009      	b.n	8013e9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013e88:	6839      	ldr	r1, [r7, #0]
 8013e8a:	6878      	ldr	r0, [r7, #4]
 8013e8c:	f000 fd21 	bl	80148d2 <USBD_CtlError>
          break;
 8013e90:	e004      	b.n	8013e9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013e92:	6839      	ldr	r1, [r7, #0]
 8013e94:	6878      	ldr	r0, [r7, #4]
 8013e96:	f000 fd1c 	bl	80148d2 <USBD_CtlError>
          break;
 8013e9a:	e000      	b.n	8013e9e <USBD_StdItfReq+0xc2>
          break;
 8013e9c:	bf00      	nop
      }
      break;
 8013e9e:	e004      	b.n	8013eaa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013ea0:	6839      	ldr	r1, [r7, #0]
 8013ea2:	6878      	ldr	r0, [r7, #4]
 8013ea4:	f000 fd15 	bl	80148d2 <USBD_CtlError>
      break;
 8013ea8:	bf00      	nop
  }

  return ret;
 8013eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	3710      	adds	r7, #16
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}

08013eb4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b084      	sub	sp, #16
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
 8013ebc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013ec2:	683b      	ldr	r3, [r7, #0]
 8013ec4:	889b      	ldrh	r3, [r3, #4]
 8013ec6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013ed0:	2b40      	cmp	r3, #64	@ 0x40
 8013ed2:	d007      	beq.n	8013ee4 <USBD_StdEPReq+0x30>
 8013ed4:	2b40      	cmp	r3, #64	@ 0x40
 8013ed6:	f200 817f 	bhi.w	80141d8 <USBD_StdEPReq+0x324>
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d02a      	beq.n	8013f34 <USBD_StdEPReq+0x80>
 8013ede:	2b20      	cmp	r3, #32
 8013ee0:	f040 817a 	bne.w	80141d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013ee4:	7bbb      	ldrb	r3, [r7, #14]
 8013ee6:	4619      	mov	r1, r3
 8013ee8:	6878      	ldr	r0, [r7, #4]
 8013eea:	f7ff fe85 	bl	8013bf8 <USBD_CoreFindEP>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013ef2:	7b7b      	ldrb	r3, [r7, #13]
 8013ef4:	2bff      	cmp	r3, #255	@ 0xff
 8013ef6:	f000 8174 	beq.w	80141e2 <USBD_StdEPReq+0x32e>
 8013efa:	7b7b      	ldrb	r3, [r7, #13]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	f040 8170 	bne.w	80141e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013f02:	7b7a      	ldrb	r2, [r7, #13]
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013f0a:	7b7a      	ldrb	r2, [r7, #13]
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	32ae      	adds	r2, #174	@ 0xae
 8013f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f14:	689b      	ldr	r3, [r3, #8]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	f000 8163 	beq.w	80141e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013f1c:	7b7a      	ldrb	r2, [r7, #13]
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	32ae      	adds	r2, #174	@ 0xae
 8013f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f26:	689b      	ldr	r3, [r3, #8]
 8013f28:	6839      	ldr	r1, [r7, #0]
 8013f2a:	6878      	ldr	r0, [r7, #4]
 8013f2c:	4798      	blx	r3
 8013f2e:	4603      	mov	r3, r0
 8013f30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013f32:	e156      	b.n	80141e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013f34:	683b      	ldr	r3, [r7, #0]
 8013f36:	785b      	ldrb	r3, [r3, #1]
 8013f38:	2b03      	cmp	r3, #3
 8013f3a:	d008      	beq.n	8013f4e <USBD_StdEPReq+0x9a>
 8013f3c:	2b03      	cmp	r3, #3
 8013f3e:	f300 8145 	bgt.w	80141cc <USBD_StdEPReq+0x318>
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	f000 809b 	beq.w	801407e <USBD_StdEPReq+0x1ca>
 8013f48:	2b01      	cmp	r3, #1
 8013f4a:	d03c      	beq.n	8013fc6 <USBD_StdEPReq+0x112>
 8013f4c:	e13e      	b.n	80141cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f54:	b2db      	uxtb	r3, r3
 8013f56:	2b02      	cmp	r3, #2
 8013f58:	d002      	beq.n	8013f60 <USBD_StdEPReq+0xac>
 8013f5a:	2b03      	cmp	r3, #3
 8013f5c:	d016      	beq.n	8013f8c <USBD_StdEPReq+0xd8>
 8013f5e:	e02c      	b.n	8013fba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013f60:	7bbb      	ldrb	r3, [r7, #14]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d00d      	beq.n	8013f82 <USBD_StdEPReq+0xce>
 8013f66:	7bbb      	ldrb	r3, [r7, #14]
 8013f68:	2b80      	cmp	r3, #128	@ 0x80
 8013f6a:	d00a      	beq.n	8013f82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013f6c:	7bbb      	ldrb	r3, [r7, #14]
 8013f6e:	4619      	mov	r1, r3
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f004 fa81 	bl	8018478 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013f76:	2180      	movs	r1, #128	@ 0x80
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	f004 fa7d 	bl	8018478 <USBD_LL_StallEP>
 8013f7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013f80:	e020      	b.n	8013fc4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013f82:	6839      	ldr	r1, [r7, #0]
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f000 fca4 	bl	80148d2 <USBD_CtlError>
              break;
 8013f8a:	e01b      	b.n	8013fc4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013f8c:	683b      	ldr	r3, [r7, #0]
 8013f8e:	885b      	ldrh	r3, [r3, #2]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d10e      	bne.n	8013fb2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013f94:	7bbb      	ldrb	r3, [r7, #14]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d00b      	beq.n	8013fb2 <USBD_StdEPReq+0xfe>
 8013f9a:	7bbb      	ldrb	r3, [r7, #14]
 8013f9c:	2b80      	cmp	r3, #128	@ 0x80
 8013f9e:	d008      	beq.n	8013fb2 <USBD_StdEPReq+0xfe>
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	88db      	ldrh	r3, [r3, #6]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d104      	bne.n	8013fb2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013fa8:	7bbb      	ldrb	r3, [r7, #14]
 8013faa:	4619      	mov	r1, r3
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f004 fa63 	bl	8018478 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	f000 fd64 	bl	8014a80 <USBD_CtlSendStatus>

              break;
 8013fb8:	e004      	b.n	8013fc4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013fba:	6839      	ldr	r1, [r7, #0]
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	f000 fc88 	bl	80148d2 <USBD_CtlError>
              break;
 8013fc2:	bf00      	nop
          }
          break;
 8013fc4:	e107      	b.n	80141d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013fcc:	b2db      	uxtb	r3, r3
 8013fce:	2b02      	cmp	r3, #2
 8013fd0:	d002      	beq.n	8013fd8 <USBD_StdEPReq+0x124>
 8013fd2:	2b03      	cmp	r3, #3
 8013fd4:	d016      	beq.n	8014004 <USBD_StdEPReq+0x150>
 8013fd6:	e04b      	b.n	8014070 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013fd8:	7bbb      	ldrb	r3, [r7, #14]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d00d      	beq.n	8013ffa <USBD_StdEPReq+0x146>
 8013fde:	7bbb      	ldrb	r3, [r7, #14]
 8013fe0:	2b80      	cmp	r3, #128	@ 0x80
 8013fe2:	d00a      	beq.n	8013ffa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013fe4:	7bbb      	ldrb	r3, [r7, #14]
 8013fe6:	4619      	mov	r1, r3
 8013fe8:	6878      	ldr	r0, [r7, #4]
 8013fea:	f004 fa45 	bl	8018478 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013fee:	2180      	movs	r1, #128	@ 0x80
 8013ff0:	6878      	ldr	r0, [r7, #4]
 8013ff2:	f004 fa41 	bl	8018478 <USBD_LL_StallEP>
 8013ff6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013ff8:	e040      	b.n	801407c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013ffa:	6839      	ldr	r1, [r7, #0]
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f000 fc68 	bl	80148d2 <USBD_CtlError>
              break;
 8014002:	e03b      	b.n	801407c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	885b      	ldrh	r3, [r3, #2]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d136      	bne.n	801407a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801400c:	7bbb      	ldrb	r3, [r7, #14]
 801400e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014012:	2b00      	cmp	r3, #0
 8014014:	d004      	beq.n	8014020 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014016:	7bbb      	ldrb	r3, [r7, #14]
 8014018:	4619      	mov	r1, r3
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f004 fa4b 	bl	80184b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f000 fd2d 	bl	8014a80 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014026:	7bbb      	ldrb	r3, [r7, #14]
 8014028:	4619      	mov	r1, r3
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	f7ff fde4 	bl	8013bf8 <USBD_CoreFindEP>
 8014030:	4603      	mov	r3, r0
 8014032:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014034:	7b7b      	ldrb	r3, [r7, #13]
 8014036:	2bff      	cmp	r3, #255	@ 0xff
 8014038:	d01f      	beq.n	801407a <USBD_StdEPReq+0x1c6>
 801403a:	7b7b      	ldrb	r3, [r7, #13]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d11c      	bne.n	801407a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014040:	7b7a      	ldrb	r2, [r7, #13]
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014048:	7b7a      	ldrb	r2, [r7, #13]
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	32ae      	adds	r2, #174	@ 0xae
 801404e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014052:	689b      	ldr	r3, [r3, #8]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d010      	beq.n	801407a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014058:	7b7a      	ldrb	r2, [r7, #13]
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	32ae      	adds	r2, #174	@ 0xae
 801405e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014062:	689b      	ldr	r3, [r3, #8]
 8014064:	6839      	ldr	r1, [r7, #0]
 8014066:	6878      	ldr	r0, [r7, #4]
 8014068:	4798      	blx	r3
 801406a:	4603      	mov	r3, r0
 801406c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801406e:	e004      	b.n	801407a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014070:	6839      	ldr	r1, [r7, #0]
 8014072:	6878      	ldr	r0, [r7, #4]
 8014074:	f000 fc2d 	bl	80148d2 <USBD_CtlError>
              break;
 8014078:	e000      	b.n	801407c <USBD_StdEPReq+0x1c8>
              break;
 801407a:	bf00      	nop
          }
          break;
 801407c:	e0ab      	b.n	80141d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014084:	b2db      	uxtb	r3, r3
 8014086:	2b02      	cmp	r3, #2
 8014088:	d002      	beq.n	8014090 <USBD_StdEPReq+0x1dc>
 801408a:	2b03      	cmp	r3, #3
 801408c:	d032      	beq.n	80140f4 <USBD_StdEPReq+0x240>
 801408e:	e097      	b.n	80141c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014090:	7bbb      	ldrb	r3, [r7, #14]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d007      	beq.n	80140a6 <USBD_StdEPReq+0x1f2>
 8014096:	7bbb      	ldrb	r3, [r7, #14]
 8014098:	2b80      	cmp	r3, #128	@ 0x80
 801409a:	d004      	beq.n	80140a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801409c:	6839      	ldr	r1, [r7, #0]
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f000 fc17 	bl	80148d2 <USBD_CtlError>
                break;
 80140a4:	e091      	b.n	80141ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80140a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	da0b      	bge.n	80140c6 <USBD_StdEPReq+0x212>
 80140ae:	7bbb      	ldrb	r3, [r7, #14]
 80140b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80140b4:	4613      	mov	r3, r2
 80140b6:	009b      	lsls	r3, r3, #2
 80140b8:	4413      	add	r3, r2
 80140ba:	009b      	lsls	r3, r3, #2
 80140bc:	3310      	adds	r3, #16
 80140be:	687a      	ldr	r2, [r7, #4]
 80140c0:	4413      	add	r3, r2
 80140c2:	3304      	adds	r3, #4
 80140c4:	e00b      	b.n	80140de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80140c6:	7bbb      	ldrb	r3, [r7, #14]
 80140c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80140cc:	4613      	mov	r3, r2
 80140ce:	009b      	lsls	r3, r3, #2
 80140d0:	4413      	add	r3, r2
 80140d2:	009b      	lsls	r3, r3, #2
 80140d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80140d8:	687a      	ldr	r2, [r7, #4]
 80140da:	4413      	add	r3, r2
 80140dc:	3304      	adds	r3, #4
 80140de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	2200      	movs	r2, #0
 80140e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80140e6:	68bb      	ldr	r3, [r7, #8]
 80140e8:	2202      	movs	r2, #2
 80140ea:	4619      	mov	r1, r3
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f000 fc6d 	bl	80149cc <USBD_CtlSendData>
              break;
 80140f2:	e06a      	b.n	80141ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80140f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	da11      	bge.n	8014120 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80140fc:	7bbb      	ldrb	r3, [r7, #14]
 80140fe:	f003 020f 	and.w	r2, r3, #15
 8014102:	6879      	ldr	r1, [r7, #4]
 8014104:	4613      	mov	r3, r2
 8014106:	009b      	lsls	r3, r3, #2
 8014108:	4413      	add	r3, r2
 801410a:	009b      	lsls	r3, r3, #2
 801410c:	440b      	add	r3, r1
 801410e:	3324      	adds	r3, #36	@ 0x24
 8014110:	881b      	ldrh	r3, [r3, #0]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d117      	bne.n	8014146 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014116:	6839      	ldr	r1, [r7, #0]
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f000 fbda 	bl	80148d2 <USBD_CtlError>
                  break;
 801411e:	e054      	b.n	80141ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014120:	7bbb      	ldrb	r3, [r7, #14]
 8014122:	f003 020f 	and.w	r2, r3, #15
 8014126:	6879      	ldr	r1, [r7, #4]
 8014128:	4613      	mov	r3, r2
 801412a:	009b      	lsls	r3, r3, #2
 801412c:	4413      	add	r3, r2
 801412e:	009b      	lsls	r3, r3, #2
 8014130:	440b      	add	r3, r1
 8014132:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014136:	881b      	ldrh	r3, [r3, #0]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d104      	bne.n	8014146 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801413c:	6839      	ldr	r1, [r7, #0]
 801413e:	6878      	ldr	r0, [r7, #4]
 8014140:	f000 fbc7 	bl	80148d2 <USBD_CtlError>
                  break;
 8014144:	e041      	b.n	80141ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801414a:	2b00      	cmp	r3, #0
 801414c:	da0b      	bge.n	8014166 <USBD_StdEPReq+0x2b2>
 801414e:	7bbb      	ldrb	r3, [r7, #14]
 8014150:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014154:	4613      	mov	r3, r2
 8014156:	009b      	lsls	r3, r3, #2
 8014158:	4413      	add	r3, r2
 801415a:	009b      	lsls	r3, r3, #2
 801415c:	3310      	adds	r3, #16
 801415e:	687a      	ldr	r2, [r7, #4]
 8014160:	4413      	add	r3, r2
 8014162:	3304      	adds	r3, #4
 8014164:	e00b      	b.n	801417e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014166:	7bbb      	ldrb	r3, [r7, #14]
 8014168:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801416c:	4613      	mov	r3, r2
 801416e:	009b      	lsls	r3, r3, #2
 8014170:	4413      	add	r3, r2
 8014172:	009b      	lsls	r3, r3, #2
 8014174:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014178:	687a      	ldr	r2, [r7, #4]
 801417a:	4413      	add	r3, r2
 801417c:	3304      	adds	r3, #4
 801417e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014180:	7bbb      	ldrb	r3, [r7, #14]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d002      	beq.n	801418c <USBD_StdEPReq+0x2d8>
 8014186:	7bbb      	ldrb	r3, [r7, #14]
 8014188:	2b80      	cmp	r3, #128	@ 0x80
 801418a:	d103      	bne.n	8014194 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	2200      	movs	r2, #0
 8014190:	601a      	str	r2, [r3, #0]
 8014192:	e00e      	b.n	80141b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014194:	7bbb      	ldrb	r3, [r7, #14]
 8014196:	4619      	mov	r1, r3
 8014198:	6878      	ldr	r0, [r7, #4]
 801419a:	f004 f9ab 	bl	80184f4 <USBD_LL_IsStallEP>
 801419e:	4603      	mov	r3, r0
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d003      	beq.n	80141ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	2201      	movs	r2, #1
 80141a8:	601a      	str	r2, [r3, #0]
 80141aa:	e002      	b.n	80141b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	2200      	movs	r2, #0
 80141b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	2202      	movs	r2, #2
 80141b6:	4619      	mov	r1, r3
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f000 fc07 	bl	80149cc <USBD_CtlSendData>
              break;
 80141be:	e004      	b.n	80141ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80141c0:	6839      	ldr	r1, [r7, #0]
 80141c2:	6878      	ldr	r0, [r7, #4]
 80141c4:	f000 fb85 	bl	80148d2 <USBD_CtlError>
              break;
 80141c8:	bf00      	nop
          }
          break;
 80141ca:	e004      	b.n	80141d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80141cc:	6839      	ldr	r1, [r7, #0]
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f000 fb7f 	bl	80148d2 <USBD_CtlError>
          break;
 80141d4:	bf00      	nop
      }
      break;
 80141d6:	e005      	b.n	80141e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80141d8:	6839      	ldr	r1, [r7, #0]
 80141da:	6878      	ldr	r0, [r7, #4]
 80141dc:	f000 fb79 	bl	80148d2 <USBD_CtlError>
      break;
 80141e0:	e000      	b.n	80141e4 <USBD_StdEPReq+0x330>
      break;
 80141e2:	bf00      	nop
  }

  return ret;
 80141e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	3710      	adds	r7, #16
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}
	...

080141f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b084      	sub	sp, #16
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
 80141f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80141fa:	2300      	movs	r3, #0
 80141fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80141fe:	2300      	movs	r3, #0
 8014200:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014202:	2300      	movs	r3, #0
 8014204:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	885b      	ldrh	r3, [r3, #2]
 801420a:	0a1b      	lsrs	r3, r3, #8
 801420c:	b29b      	uxth	r3, r3
 801420e:	3b01      	subs	r3, #1
 8014210:	2b0e      	cmp	r3, #14
 8014212:	f200 8152 	bhi.w	80144ba <USBD_GetDescriptor+0x2ca>
 8014216:	a201      	add	r2, pc, #4	@ (adr r2, 801421c <USBD_GetDescriptor+0x2c>)
 8014218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801421c:	0801428d 	.word	0x0801428d
 8014220:	080142a5 	.word	0x080142a5
 8014224:	080142e5 	.word	0x080142e5
 8014228:	080144bb 	.word	0x080144bb
 801422c:	080144bb 	.word	0x080144bb
 8014230:	0801445b 	.word	0x0801445b
 8014234:	08014487 	.word	0x08014487
 8014238:	080144bb 	.word	0x080144bb
 801423c:	080144bb 	.word	0x080144bb
 8014240:	080144bb 	.word	0x080144bb
 8014244:	080144bb 	.word	0x080144bb
 8014248:	080144bb 	.word	0x080144bb
 801424c:	080144bb 	.word	0x080144bb
 8014250:	080144bb 	.word	0x080144bb
 8014254:	08014259 	.word	0x08014259
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801425e:	69db      	ldr	r3, [r3, #28]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d00b      	beq.n	801427c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801426a:	69db      	ldr	r3, [r3, #28]
 801426c:	687a      	ldr	r2, [r7, #4]
 801426e:	7c12      	ldrb	r2, [r2, #16]
 8014270:	f107 0108 	add.w	r1, r7, #8
 8014274:	4610      	mov	r0, r2
 8014276:	4798      	blx	r3
 8014278:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801427a:	e126      	b.n	80144ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801427c:	6839      	ldr	r1, [r7, #0]
 801427e:	6878      	ldr	r0, [r7, #4]
 8014280:	f000 fb27 	bl	80148d2 <USBD_CtlError>
        err++;
 8014284:	7afb      	ldrb	r3, [r7, #11]
 8014286:	3301      	adds	r3, #1
 8014288:	72fb      	strb	r3, [r7, #11]
      break;
 801428a:	e11e      	b.n	80144ca <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	687a      	ldr	r2, [r7, #4]
 8014296:	7c12      	ldrb	r2, [r2, #16]
 8014298:	f107 0108 	add.w	r1, r7, #8
 801429c:	4610      	mov	r0, r2
 801429e:	4798      	blx	r3
 80142a0:	60f8      	str	r0, [r7, #12]
      break;
 80142a2:	e112      	b.n	80144ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	7c1b      	ldrb	r3, [r3, #16]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d10d      	bne.n	80142c8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80142b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142b4:	f107 0208 	add.w	r2, r7, #8
 80142b8:	4610      	mov	r0, r2
 80142ba:	4798      	blx	r3
 80142bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	3301      	adds	r3, #1
 80142c2:	2202      	movs	r2, #2
 80142c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80142c6:	e100      	b.n	80144ca <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80142ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142d0:	f107 0208 	add.w	r2, r7, #8
 80142d4:	4610      	mov	r0, r2
 80142d6:	4798      	blx	r3
 80142d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	3301      	adds	r3, #1
 80142de:	2202      	movs	r2, #2
 80142e0:	701a      	strb	r2, [r3, #0]
      break;
 80142e2:	e0f2      	b.n	80144ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80142e4:	683b      	ldr	r3, [r7, #0]
 80142e6:	885b      	ldrh	r3, [r3, #2]
 80142e8:	b2db      	uxtb	r3, r3
 80142ea:	2b05      	cmp	r3, #5
 80142ec:	f200 80ac 	bhi.w	8014448 <USBD_GetDescriptor+0x258>
 80142f0:	a201      	add	r2, pc, #4	@ (adr r2, 80142f8 <USBD_GetDescriptor+0x108>)
 80142f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142f6:	bf00      	nop
 80142f8:	08014311 	.word	0x08014311
 80142fc:	08014345 	.word	0x08014345
 8014300:	08014379 	.word	0x08014379
 8014304:	080143ad 	.word	0x080143ad
 8014308:	080143e1 	.word	0x080143e1
 801430c:	08014415 	.word	0x08014415
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014316:	685b      	ldr	r3, [r3, #4]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d00b      	beq.n	8014334 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014322:	685b      	ldr	r3, [r3, #4]
 8014324:	687a      	ldr	r2, [r7, #4]
 8014326:	7c12      	ldrb	r2, [r2, #16]
 8014328:	f107 0108 	add.w	r1, r7, #8
 801432c:	4610      	mov	r0, r2
 801432e:	4798      	blx	r3
 8014330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014332:	e091      	b.n	8014458 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014334:	6839      	ldr	r1, [r7, #0]
 8014336:	6878      	ldr	r0, [r7, #4]
 8014338:	f000 facb 	bl	80148d2 <USBD_CtlError>
            err++;
 801433c:	7afb      	ldrb	r3, [r7, #11]
 801433e:	3301      	adds	r3, #1
 8014340:	72fb      	strb	r3, [r7, #11]
          break;
 8014342:	e089      	b.n	8014458 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801434a:	689b      	ldr	r3, [r3, #8]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d00b      	beq.n	8014368 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014356:	689b      	ldr	r3, [r3, #8]
 8014358:	687a      	ldr	r2, [r7, #4]
 801435a:	7c12      	ldrb	r2, [r2, #16]
 801435c:	f107 0108 	add.w	r1, r7, #8
 8014360:	4610      	mov	r0, r2
 8014362:	4798      	blx	r3
 8014364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014366:	e077      	b.n	8014458 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014368:	6839      	ldr	r1, [r7, #0]
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f000 fab1 	bl	80148d2 <USBD_CtlError>
            err++;
 8014370:	7afb      	ldrb	r3, [r7, #11]
 8014372:	3301      	adds	r3, #1
 8014374:	72fb      	strb	r3, [r7, #11]
          break;
 8014376:	e06f      	b.n	8014458 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801437e:	68db      	ldr	r3, [r3, #12]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d00b      	beq.n	801439c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801438a:	68db      	ldr	r3, [r3, #12]
 801438c:	687a      	ldr	r2, [r7, #4]
 801438e:	7c12      	ldrb	r2, [r2, #16]
 8014390:	f107 0108 	add.w	r1, r7, #8
 8014394:	4610      	mov	r0, r2
 8014396:	4798      	blx	r3
 8014398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801439a:	e05d      	b.n	8014458 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801439c:	6839      	ldr	r1, [r7, #0]
 801439e:	6878      	ldr	r0, [r7, #4]
 80143a0:	f000 fa97 	bl	80148d2 <USBD_CtlError>
            err++;
 80143a4:	7afb      	ldrb	r3, [r7, #11]
 80143a6:	3301      	adds	r3, #1
 80143a8:	72fb      	strb	r3, [r7, #11]
          break;
 80143aa:	e055      	b.n	8014458 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143b2:	691b      	ldr	r3, [r3, #16]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d00b      	beq.n	80143d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143be:	691b      	ldr	r3, [r3, #16]
 80143c0:	687a      	ldr	r2, [r7, #4]
 80143c2:	7c12      	ldrb	r2, [r2, #16]
 80143c4:	f107 0108 	add.w	r1, r7, #8
 80143c8:	4610      	mov	r0, r2
 80143ca:	4798      	blx	r3
 80143cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80143ce:	e043      	b.n	8014458 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80143d0:	6839      	ldr	r1, [r7, #0]
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	f000 fa7d 	bl	80148d2 <USBD_CtlError>
            err++;
 80143d8:	7afb      	ldrb	r3, [r7, #11]
 80143da:	3301      	adds	r3, #1
 80143dc:	72fb      	strb	r3, [r7, #11]
          break;
 80143de:	e03b      	b.n	8014458 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143e6:	695b      	ldr	r3, [r3, #20]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d00b      	beq.n	8014404 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143f2:	695b      	ldr	r3, [r3, #20]
 80143f4:	687a      	ldr	r2, [r7, #4]
 80143f6:	7c12      	ldrb	r2, [r2, #16]
 80143f8:	f107 0108 	add.w	r1, r7, #8
 80143fc:	4610      	mov	r0, r2
 80143fe:	4798      	blx	r3
 8014400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014402:	e029      	b.n	8014458 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014404:	6839      	ldr	r1, [r7, #0]
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f000 fa63 	bl	80148d2 <USBD_CtlError>
            err++;
 801440c:	7afb      	ldrb	r3, [r7, #11]
 801440e:	3301      	adds	r3, #1
 8014410:	72fb      	strb	r3, [r7, #11]
          break;
 8014412:	e021      	b.n	8014458 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801441a:	699b      	ldr	r3, [r3, #24]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d00b      	beq.n	8014438 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014426:	699b      	ldr	r3, [r3, #24]
 8014428:	687a      	ldr	r2, [r7, #4]
 801442a:	7c12      	ldrb	r2, [r2, #16]
 801442c:	f107 0108 	add.w	r1, r7, #8
 8014430:	4610      	mov	r0, r2
 8014432:	4798      	blx	r3
 8014434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014436:	e00f      	b.n	8014458 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014438:	6839      	ldr	r1, [r7, #0]
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	f000 fa49 	bl	80148d2 <USBD_CtlError>
            err++;
 8014440:	7afb      	ldrb	r3, [r7, #11]
 8014442:	3301      	adds	r3, #1
 8014444:	72fb      	strb	r3, [r7, #11]
          break;
 8014446:	e007      	b.n	8014458 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014448:	6839      	ldr	r1, [r7, #0]
 801444a:	6878      	ldr	r0, [r7, #4]
 801444c:	f000 fa41 	bl	80148d2 <USBD_CtlError>
          err++;
 8014450:	7afb      	ldrb	r3, [r7, #11]
 8014452:	3301      	adds	r3, #1
 8014454:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014456:	bf00      	nop
      }
      break;
 8014458:	e037      	b.n	80144ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	7c1b      	ldrb	r3, [r3, #16]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d109      	bne.n	8014476 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801446a:	f107 0208 	add.w	r2, r7, #8
 801446e:	4610      	mov	r0, r2
 8014470:	4798      	blx	r3
 8014472:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014474:	e029      	b.n	80144ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014476:	6839      	ldr	r1, [r7, #0]
 8014478:	6878      	ldr	r0, [r7, #4]
 801447a:	f000 fa2a 	bl	80148d2 <USBD_CtlError>
        err++;
 801447e:	7afb      	ldrb	r3, [r7, #11]
 8014480:	3301      	adds	r3, #1
 8014482:	72fb      	strb	r3, [r7, #11]
      break;
 8014484:	e021      	b.n	80144ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	7c1b      	ldrb	r3, [r3, #16]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d10d      	bne.n	80144aa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014496:	f107 0208 	add.w	r2, r7, #8
 801449a:	4610      	mov	r0, r2
 801449c:	4798      	blx	r3
 801449e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	3301      	adds	r3, #1
 80144a4:	2207      	movs	r2, #7
 80144a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80144a8:	e00f      	b.n	80144ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80144aa:	6839      	ldr	r1, [r7, #0]
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f000 fa10 	bl	80148d2 <USBD_CtlError>
        err++;
 80144b2:	7afb      	ldrb	r3, [r7, #11]
 80144b4:	3301      	adds	r3, #1
 80144b6:	72fb      	strb	r3, [r7, #11]
      break;
 80144b8:	e007      	b.n	80144ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80144ba:	6839      	ldr	r1, [r7, #0]
 80144bc:	6878      	ldr	r0, [r7, #4]
 80144be:	f000 fa08 	bl	80148d2 <USBD_CtlError>
      err++;
 80144c2:	7afb      	ldrb	r3, [r7, #11]
 80144c4:	3301      	adds	r3, #1
 80144c6:	72fb      	strb	r3, [r7, #11]
      break;
 80144c8:	bf00      	nop
  }

  if (err != 0U)
 80144ca:	7afb      	ldrb	r3, [r7, #11]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d11e      	bne.n	801450e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80144d0:	683b      	ldr	r3, [r7, #0]
 80144d2:	88db      	ldrh	r3, [r3, #6]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d016      	beq.n	8014506 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80144d8:	893b      	ldrh	r3, [r7, #8]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d00e      	beq.n	80144fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	88da      	ldrh	r2, [r3, #6]
 80144e2:	893b      	ldrh	r3, [r7, #8]
 80144e4:	4293      	cmp	r3, r2
 80144e6:	bf28      	it	cs
 80144e8:	4613      	movcs	r3, r2
 80144ea:	b29b      	uxth	r3, r3
 80144ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80144ee:	893b      	ldrh	r3, [r7, #8]
 80144f0:	461a      	mov	r2, r3
 80144f2:	68f9      	ldr	r1, [r7, #12]
 80144f4:	6878      	ldr	r0, [r7, #4]
 80144f6:	f000 fa69 	bl	80149cc <USBD_CtlSendData>
 80144fa:	e009      	b.n	8014510 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80144fc:	6839      	ldr	r1, [r7, #0]
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f000 f9e7 	bl	80148d2 <USBD_CtlError>
 8014504:	e004      	b.n	8014510 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f000 faba 	bl	8014a80 <USBD_CtlSendStatus>
 801450c:	e000      	b.n	8014510 <USBD_GetDescriptor+0x320>
    return;
 801450e:	bf00      	nop
  }
}
 8014510:	3710      	adds	r7, #16
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}
 8014516:	bf00      	nop

08014518 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
 8014520:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014522:	683b      	ldr	r3, [r7, #0]
 8014524:	889b      	ldrh	r3, [r3, #4]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d131      	bne.n	801458e <USBD_SetAddress+0x76>
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	88db      	ldrh	r3, [r3, #6]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d12d      	bne.n	801458e <USBD_SetAddress+0x76>
 8014532:	683b      	ldr	r3, [r7, #0]
 8014534:	885b      	ldrh	r3, [r3, #2]
 8014536:	2b7f      	cmp	r3, #127	@ 0x7f
 8014538:	d829      	bhi.n	801458e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	885b      	ldrh	r3, [r3, #2]
 801453e:	b2db      	uxtb	r3, r3
 8014540:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014544:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801454c:	b2db      	uxtb	r3, r3
 801454e:	2b03      	cmp	r3, #3
 8014550:	d104      	bne.n	801455c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014552:	6839      	ldr	r1, [r7, #0]
 8014554:	6878      	ldr	r0, [r7, #4]
 8014556:	f000 f9bc 	bl	80148d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801455a:	e01d      	b.n	8014598 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	7bfa      	ldrb	r2, [r7, #15]
 8014560:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014564:	7bfb      	ldrb	r3, [r7, #15]
 8014566:	4619      	mov	r1, r3
 8014568:	6878      	ldr	r0, [r7, #4]
 801456a:	f003 ffef 	bl	801854c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801456e:	6878      	ldr	r0, [r7, #4]
 8014570:	f000 fa86 	bl	8014a80 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014574:	7bfb      	ldrb	r3, [r7, #15]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d004      	beq.n	8014584 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2202      	movs	r2, #2
 801457e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014582:	e009      	b.n	8014598 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	2201      	movs	r2, #1
 8014588:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801458c:	e004      	b.n	8014598 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801458e:	6839      	ldr	r1, [r7, #0]
 8014590:	6878      	ldr	r0, [r7, #4]
 8014592:	f000 f99e 	bl	80148d2 <USBD_CtlError>
  }
}
 8014596:	bf00      	nop
 8014598:	bf00      	nop
 801459a:	3710      	adds	r7, #16
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}

080145a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b084      	sub	sp, #16
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
 80145a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80145aa:	2300      	movs	r3, #0
 80145ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80145ae:	683b      	ldr	r3, [r7, #0]
 80145b0:	885b      	ldrh	r3, [r3, #2]
 80145b2:	b2da      	uxtb	r2, r3
 80145b4:	4b4e      	ldr	r3, [pc, #312]	@ (80146f0 <USBD_SetConfig+0x150>)
 80145b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80145b8:	4b4d      	ldr	r3, [pc, #308]	@ (80146f0 <USBD_SetConfig+0x150>)
 80145ba:	781b      	ldrb	r3, [r3, #0]
 80145bc:	2b01      	cmp	r3, #1
 80145be:	d905      	bls.n	80145cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80145c0:	6839      	ldr	r1, [r7, #0]
 80145c2:	6878      	ldr	r0, [r7, #4]
 80145c4:	f000 f985 	bl	80148d2 <USBD_CtlError>
    return USBD_FAIL;
 80145c8:	2303      	movs	r3, #3
 80145ca:	e08c      	b.n	80146e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80145d2:	b2db      	uxtb	r3, r3
 80145d4:	2b02      	cmp	r3, #2
 80145d6:	d002      	beq.n	80145de <USBD_SetConfig+0x3e>
 80145d8:	2b03      	cmp	r3, #3
 80145da:	d029      	beq.n	8014630 <USBD_SetConfig+0x90>
 80145dc:	e075      	b.n	80146ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80145de:	4b44      	ldr	r3, [pc, #272]	@ (80146f0 <USBD_SetConfig+0x150>)
 80145e0:	781b      	ldrb	r3, [r3, #0]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d020      	beq.n	8014628 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80145e6:	4b42      	ldr	r3, [pc, #264]	@ (80146f0 <USBD_SetConfig+0x150>)
 80145e8:	781b      	ldrb	r3, [r3, #0]
 80145ea:	461a      	mov	r2, r3
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80145f0:	4b3f      	ldr	r3, [pc, #252]	@ (80146f0 <USBD_SetConfig+0x150>)
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	4619      	mov	r1, r3
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f7fe ffb9 	bl	801356e <USBD_SetClassConfig>
 80145fc:	4603      	mov	r3, r0
 80145fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014600:	7bfb      	ldrb	r3, [r7, #15]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d008      	beq.n	8014618 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014606:	6839      	ldr	r1, [r7, #0]
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f000 f962 	bl	80148d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	2202      	movs	r2, #2
 8014612:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014616:	e065      	b.n	80146e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	f000 fa31 	bl	8014a80 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	2203      	movs	r2, #3
 8014622:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014626:	e05d      	b.n	80146e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014628:	6878      	ldr	r0, [r7, #4]
 801462a:	f000 fa29 	bl	8014a80 <USBD_CtlSendStatus>
      break;
 801462e:	e059      	b.n	80146e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014630:	4b2f      	ldr	r3, [pc, #188]	@ (80146f0 <USBD_SetConfig+0x150>)
 8014632:	781b      	ldrb	r3, [r3, #0]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d112      	bne.n	801465e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	2202      	movs	r2, #2
 801463c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014640:	4b2b      	ldr	r3, [pc, #172]	@ (80146f0 <USBD_SetConfig+0x150>)
 8014642:	781b      	ldrb	r3, [r3, #0]
 8014644:	461a      	mov	r2, r3
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801464a:	4b29      	ldr	r3, [pc, #164]	@ (80146f0 <USBD_SetConfig+0x150>)
 801464c:	781b      	ldrb	r3, [r3, #0]
 801464e:	4619      	mov	r1, r3
 8014650:	6878      	ldr	r0, [r7, #4]
 8014652:	f7fe ffa8 	bl	80135a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014656:	6878      	ldr	r0, [r7, #4]
 8014658:	f000 fa12 	bl	8014a80 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801465c:	e042      	b.n	80146e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801465e:	4b24      	ldr	r3, [pc, #144]	@ (80146f0 <USBD_SetConfig+0x150>)
 8014660:	781b      	ldrb	r3, [r3, #0]
 8014662:	461a      	mov	r2, r3
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	685b      	ldr	r3, [r3, #4]
 8014668:	429a      	cmp	r2, r3
 801466a:	d02a      	beq.n	80146c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	685b      	ldr	r3, [r3, #4]
 8014670:	b2db      	uxtb	r3, r3
 8014672:	4619      	mov	r1, r3
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f7fe ff96 	bl	80135a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801467a:	4b1d      	ldr	r3, [pc, #116]	@ (80146f0 <USBD_SetConfig+0x150>)
 801467c:	781b      	ldrb	r3, [r3, #0]
 801467e:	461a      	mov	r2, r3
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014684:	4b1a      	ldr	r3, [pc, #104]	@ (80146f0 <USBD_SetConfig+0x150>)
 8014686:	781b      	ldrb	r3, [r3, #0]
 8014688:	4619      	mov	r1, r3
 801468a:	6878      	ldr	r0, [r7, #4]
 801468c:	f7fe ff6f 	bl	801356e <USBD_SetClassConfig>
 8014690:	4603      	mov	r3, r0
 8014692:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014694:	7bfb      	ldrb	r3, [r7, #15]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d00f      	beq.n	80146ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801469a:	6839      	ldr	r1, [r7, #0]
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f000 f918 	bl	80148d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	685b      	ldr	r3, [r3, #4]
 80146a6:	b2db      	uxtb	r3, r3
 80146a8:	4619      	mov	r1, r3
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f7fe ff7b 	bl	80135a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	2202      	movs	r2, #2
 80146b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80146b8:	e014      	b.n	80146e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f000 f9e0 	bl	8014a80 <USBD_CtlSendStatus>
      break;
 80146c0:	e010      	b.n	80146e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f000 f9dc 	bl	8014a80 <USBD_CtlSendStatus>
      break;
 80146c8:	e00c      	b.n	80146e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80146ca:	6839      	ldr	r1, [r7, #0]
 80146cc:	6878      	ldr	r0, [r7, #4]
 80146ce:	f000 f900 	bl	80148d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80146d2:	4b07      	ldr	r3, [pc, #28]	@ (80146f0 <USBD_SetConfig+0x150>)
 80146d4:	781b      	ldrb	r3, [r3, #0]
 80146d6:	4619      	mov	r1, r3
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f7fe ff64 	bl	80135a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80146de:	2303      	movs	r3, #3
 80146e0:	73fb      	strb	r3, [r7, #15]
      break;
 80146e2:	bf00      	nop
  }

  return ret;
 80146e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80146e6:	4618      	mov	r0, r3
 80146e8:	3710      	adds	r7, #16
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}
 80146ee:	bf00      	nop
 80146f0:	24001938 	.word	0x24001938

080146f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b082      	sub	sp, #8
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
 80146fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	88db      	ldrh	r3, [r3, #6]
 8014702:	2b01      	cmp	r3, #1
 8014704:	d004      	beq.n	8014710 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014706:	6839      	ldr	r1, [r7, #0]
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f000 f8e2 	bl	80148d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801470e:	e023      	b.n	8014758 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014716:	b2db      	uxtb	r3, r3
 8014718:	2b02      	cmp	r3, #2
 801471a:	dc02      	bgt.n	8014722 <USBD_GetConfig+0x2e>
 801471c:	2b00      	cmp	r3, #0
 801471e:	dc03      	bgt.n	8014728 <USBD_GetConfig+0x34>
 8014720:	e015      	b.n	801474e <USBD_GetConfig+0x5a>
 8014722:	2b03      	cmp	r3, #3
 8014724:	d00b      	beq.n	801473e <USBD_GetConfig+0x4a>
 8014726:	e012      	b.n	801474e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	2200      	movs	r2, #0
 801472c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	3308      	adds	r3, #8
 8014732:	2201      	movs	r2, #1
 8014734:	4619      	mov	r1, r3
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f000 f948 	bl	80149cc <USBD_CtlSendData>
        break;
 801473c:	e00c      	b.n	8014758 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	3304      	adds	r3, #4
 8014742:	2201      	movs	r2, #1
 8014744:	4619      	mov	r1, r3
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f000 f940 	bl	80149cc <USBD_CtlSendData>
        break;
 801474c:	e004      	b.n	8014758 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801474e:	6839      	ldr	r1, [r7, #0]
 8014750:	6878      	ldr	r0, [r7, #4]
 8014752:	f000 f8be 	bl	80148d2 <USBD_CtlError>
        break;
 8014756:	bf00      	nop
}
 8014758:	bf00      	nop
 801475a:	3708      	adds	r7, #8
 801475c:	46bd      	mov	sp, r7
 801475e:	bd80      	pop	{r7, pc}

08014760 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b082      	sub	sp, #8
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
 8014768:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014770:	b2db      	uxtb	r3, r3
 8014772:	3b01      	subs	r3, #1
 8014774:	2b02      	cmp	r3, #2
 8014776:	d81e      	bhi.n	80147b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	88db      	ldrh	r3, [r3, #6]
 801477c:	2b02      	cmp	r3, #2
 801477e:	d004      	beq.n	801478a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014780:	6839      	ldr	r1, [r7, #0]
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f000 f8a5 	bl	80148d2 <USBD_CtlError>
        break;
 8014788:	e01a      	b.n	80147c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	2201      	movs	r2, #1
 801478e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014796:	2b00      	cmp	r3, #0
 8014798:	d005      	beq.n	80147a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	68db      	ldr	r3, [r3, #12]
 801479e:	f043 0202 	orr.w	r2, r3, #2
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	330c      	adds	r3, #12
 80147aa:	2202      	movs	r2, #2
 80147ac:	4619      	mov	r1, r3
 80147ae:	6878      	ldr	r0, [r7, #4]
 80147b0:	f000 f90c 	bl	80149cc <USBD_CtlSendData>
      break;
 80147b4:	e004      	b.n	80147c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80147b6:	6839      	ldr	r1, [r7, #0]
 80147b8:	6878      	ldr	r0, [r7, #4]
 80147ba:	f000 f88a 	bl	80148d2 <USBD_CtlError>
      break;
 80147be:	bf00      	nop
  }
}
 80147c0:	bf00      	nop
 80147c2:	3708      	adds	r7, #8
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b082      	sub	sp, #8
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
 80147d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80147d2:	683b      	ldr	r3, [r7, #0]
 80147d4:	885b      	ldrh	r3, [r3, #2]
 80147d6:	2b01      	cmp	r3, #1
 80147d8:	d107      	bne.n	80147ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	2201      	movs	r2, #1
 80147de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f000 f94c 	bl	8014a80 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80147e8:	e013      	b.n	8014812 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	885b      	ldrh	r3, [r3, #2]
 80147ee:	2b02      	cmp	r3, #2
 80147f0:	d10b      	bne.n	801480a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	889b      	ldrh	r3, [r3, #4]
 80147f6:	0a1b      	lsrs	r3, r3, #8
 80147f8:	b29b      	uxth	r3, r3
 80147fa:	b2da      	uxtb	r2, r3
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f000 f93c 	bl	8014a80 <USBD_CtlSendStatus>
}
 8014808:	e003      	b.n	8014812 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801480a:	6839      	ldr	r1, [r7, #0]
 801480c:	6878      	ldr	r0, [r7, #4]
 801480e:	f000 f860 	bl	80148d2 <USBD_CtlError>
}
 8014812:	bf00      	nop
 8014814:	3708      	adds	r7, #8
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}

0801481a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801481a:	b580      	push	{r7, lr}
 801481c:	b082      	sub	sp, #8
 801481e:	af00      	add	r7, sp, #0
 8014820:	6078      	str	r0, [r7, #4]
 8014822:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801482a:	b2db      	uxtb	r3, r3
 801482c:	3b01      	subs	r3, #1
 801482e:	2b02      	cmp	r3, #2
 8014830:	d80b      	bhi.n	801484a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	885b      	ldrh	r3, [r3, #2]
 8014836:	2b01      	cmp	r3, #1
 8014838:	d10c      	bne.n	8014854 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	2200      	movs	r2, #0
 801483e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014842:	6878      	ldr	r0, [r7, #4]
 8014844:	f000 f91c 	bl	8014a80 <USBD_CtlSendStatus>
      }
      break;
 8014848:	e004      	b.n	8014854 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801484a:	6839      	ldr	r1, [r7, #0]
 801484c:	6878      	ldr	r0, [r7, #4]
 801484e:	f000 f840 	bl	80148d2 <USBD_CtlError>
      break;
 8014852:	e000      	b.n	8014856 <USBD_ClrFeature+0x3c>
      break;
 8014854:	bf00      	nop
  }
}
 8014856:	bf00      	nop
 8014858:	3708      	adds	r7, #8
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}

0801485e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801485e:	b580      	push	{r7, lr}
 8014860:	b084      	sub	sp, #16
 8014862:	af00      	add	r7, sp, #0
 8014864:	6078      	str	r0, [r7, #4]
 8014866:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	781a      	ldrb	r2, [r3, #0]
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	3301      	adds	r3, #1
 8014878:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	781a      	ldrb	r2, [r3, #0]
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	3301      	adds	r3, #1
 8014886:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014888:	68f8      	ldr	r0, [r7, #12]
 801488a:	f7ff fa16 	bl	8013cba <SWAPBYTE>
 801488e:	4603      	mov	r3, r0
 8014890:	461a      	mov	r2, r3
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	3301      	adds	r3, #1
 801489a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	3301      	adds	r3, #1
 80148a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80148a2:	68f8      	ldr	r0, [r7, #12]
 80148a4:	f7ff fa09 	bl	8013cba <SWAPBYTE>
 80148a8:	4603      	mov	r3, r0
 80148aa:	461a      	mov	r2, r3
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	3301      	adds	r3, #1
 80148b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	3301      	adds	r3, #1
 80148ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80148bc:	68f8      	ldr	r0, [r7, #12]
 80148be:	f7ff f9fc 	bl	8013cba <SWAPBYTE>
 80148c2:	4603      	mov	r3, r0
 80148c4:	461a      	mov	r2, r3
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	80da      	strh	r2, [r3, #6]
}
 80148ca:	bf00      	nop
 80148cc:	3710      	adds	r7, #16
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}

080148d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148d2:	b580      	push	{r7, lr}
 80148d4:	b082      	sub	sp, #8
 80148d6:	af00      	add	r7, sp, #0
 80148d8:	6078      	str	r0, [r7, #4]
 80148da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80148dc:	2180      	movs	r1, #128	@ 0x80
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f003 fdca 	bl	8018478 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80148e4:	2100      	movs	r1, #0
 80148e6:	6878      	ldr	r0, [r7, #4]
 80148e8:	f003 fdc6 	bl	8018478 <USBD_LL_StallEP>
}
 80148ec:	bf00      	nop
 80148ee:	3708      	adds	r7, #8
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}

080148f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b086      	sub	sp, #24
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	60f8      	str	r0, [r7, #12]
 80148fc:	60b9      	str	r1, [r7, #8]
 80148fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014900:	2300      	movs	r3, #0
 8014902:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d042      	beq.n	8014990 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801490e:	6938      	ldr	r0, [r7, #16]
 8014910:	f000 f842 	bl	8014998 <USBD_GetLen>
 8014914:	4603      	mov	r3, r0
 8014916:	3301      	adds	r3, #1
 8014918:	005b      	lsls	r3, r3, #1
 801491a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801491e:	d808      	bhi.n	8014932 <USBD_GetString+0x3e>
 8014920:	6938      	ldr	r0, [r7, #16]
 8014922:	f000 f839 	bl	8014998 <USBD_GetLen>
 8014926:	4603      	mov	r3, r0
 8014928:	3301      	adds	r3, #1
 801492a:	b29b      	uxth	r3, r3
 801492c:	005b      	lsls	r3, r3, #1
 801492e:	b29a      	uxth	r2, r3
 8014930:	e001      	b.n	8014936 <USBD_GetString+0x42>
 8014932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801493a:	7dfb      	ldrb	r3, [r7, #23]
 801493c:	68ba      	ldr	r2, [r7, #8]
 801493e:	4413      	add	r3, r2
 8014940:	687a      	ldr	r2, [r7, #4]
 8014942:	7812      	ldrb	r2, [r2, #0]
 8014944:	701a      	strb	r2, [r3, #0]
  idx++;
 8014946:	7dfb      	ldrb	r3, [r7, #23]
 8014948:	3301      	adds	r3, #1
 801494a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801494c:	7dfb      	ldrb	r3, [r7, #23]
 801494e:	68ba      	ldr	r2, [r7, #8]
 8014950:	4413      	add	r3, r2
 8014952:	2203      	movs	r2, #3
 8014954:	701a      	strb	r2, [r3, #0]
  idx++;
 8014956:	7dfb      	ldrb	r3, [r7, #23]
 8014958:	3301      	adds	r3, #1
 801495a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801495c:	e013      	b.n	8014986 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801495e:	7dfb      	ldrb	r3, [r7, #23]
 8014960:	68ba      	ldr	r2, [r7, #8]
 8014962:	4413      	add	r3, r2
 8014964:	693a      	ldr	r2, [r7, #16]
 8014966:	7812      	ldrb	r2, [r2, #0]
 8014968:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801496a:	693b      	ldr	r3, [r7, #16]
 801496c:	3301      	adds	r3, #1
 801496e:	613b      	str	r3, [r7, #16]
    idx++;
 8014970:	7dfb      	ldrb	r3, [r7, #23]
 8014972:	3301      	adds	r3, #1
 8014974:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014976:	7dfb      	ldrb	r3, [r7, #23]
 8014978:	68ba      	ldr	r2, [r7, #8]
 801497a:	4413      	add	r3, r2
 801497c:	2200      	movs	r2, #0
 801497e:	701a      	strb	r2, [r3, #0]
    idx++;
 8014980:	7dfb      	ldrb	r3, [r7, #23]
 8014982:	3301      	adds	r3, #1
 8014984:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014986:	693b      	ldr	r3, [r7, #16]
 8014988:	781b      	ldrb	r3, [r3, #0]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d1e7      	bne.n	801495e <USBD_GetString+0x6a>
 801498e:	e000      	b.n	8014992 <USBD_GetString+0x9e>
    return;
 8014990:	bf00      	nop
  }
}
 8014992:	3718      	adds	r7, #24
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}

08014998 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014998:	b480      	push	{r7}
 801499a:	b085      	sub	sp, #20
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80149a0:	2300      	movs	r3, #0
 80149a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80149a8:	e005      	b.n	80149b6 <USBD_GetLen+0x1e>
  {
    len++;
 80149aa:	7bfb      	ldrb	r3, [r7, #15]
 80149ac:	3301      	adds	r3, #1
 80149ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80149b0:	68bb      	ldr	r3, [r7, #8]
 80149b2:	3301      	adds	r3, #1
 80149b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80149b6:	68bb      	ldr	r3, [r7, #8]
 80149b8:	781b      	ldrb	r3, [r3, #0]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d1f5      	bne.n	80149aa <USBD_GetLen+0x12>
  }

  return len;
 80149be:	7bfb      	ldrb	r3, [r7, #15]
}
 80149c0:	4618      	mov	r0, r3
 80149c2:	3714      	adds	r7, #20
 80149c4:	46bd      	mov	sp, r7
 80149c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ca:	4770      	bx	lr

080149cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b084      	sub	sp, #16
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	60f8      	str	r0, [r7, #12]
 80149d4:	60b9      	str	r1, [r7, #8]
 80149d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	2202      	movs	r2, #2
 80149dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	687a      	ldr	r2, [r7, #4]
 80149e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	687a      	ldr	r2, [r7, #4]
 80149ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	68ba      	ldr	r2, [r7, #8]
 80149f0:	2100      	movs	r1, #0
 80149f2:	68f8      	ldr	r0, [r7, #12]
 80149f4:	f003 fdc9 	bl	801858a <USBD_LL_Transmit>

  return USBD_OK;
 80149f8:	2300      	movs	r3, #0
}
 80149fa:	4618      	mov	r0, r3
 80149fc:	3710      	adds	r7, #16
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}

08014a02 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014a02:	b580      	push	{r7, lr}
 8014a04:	b084      	sub	sp, #16
 8014a06:	af00      	add	r7, sp, #0
 8014a08:	60f8      	str	r0, [r7, #12]
 8014a0a:	60b9      	str	r1, [r7, #8]
 8014a0c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	68ba      	ldr	r2, [r7, #8]
 8014a12:	2100      	movs	r1, #0
 8014a14:	68f8      	ldr	r0, [r7, #12]
 8014a16:	f003 fdb8 	bl	801858a <USBD_LL_Transmit>

  return USBD_OK;
 8014a1a:	2300      	movs	r3, #0
}
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	3710      	adds	r7, #16
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}

08014a24 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b084      	sub	sp, #16
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	60f8      	str	r0, [r7, #12]
 8014a2c:	60b9      	str	r1, [r7, #8]
 8014a2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	2203      	movs	r2, #3
 8014a34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	687a      	ldr	r2, [r7, #4]
 8014a3c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	687a      	ldr	r2, [r7, #4]
 8014a44:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	68ba      	ldr	r2, [r7, #8]
 8014a4c:	2100      	movs	r1, #0
 8014a4e:	68f8      	ldr	r0, [r7, #12]
 8014a50:	f003 fdbc 	bl	80185cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014a54:	2300      	movs	r3, #0
}
 8014a56:	4618      	mov	r0, r3
 8014a58:	3710      	adds	r7, #16
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}

08014a5e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014a5e:	b580      	push	{r7, lr}
 8014a60:	b084      	sub	sp, #16
 8014a62:	af00      	add	r7, sp, #0
 8014a64:	60f8      	str	r0, [r7, #12]
 8014a66:	60b9      	str	r1, [r7, #8]
 8014a68:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	68ba      	ldr	r2, [r7, #8]
 8014a6e:	2100      	movs	r1, #0
 8014a70:	68f8      	ldr	r0, [r7, #12]
 8014a72:	f003 fdab 	bl	80185cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014a76:	2300      	movs	r3, #0
}
 8014a78:	4618      	mov	r0, r3
 8014a7a:	3710      	adds	r7, #16
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bd80      	pop	{r7, pc}

08014a80 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b082      	sub	sp, #8
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2204      	movs	r2, #4
 8014a8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014a90:	2300      	movs	r3, #0
 8014a92:	2200      	movs	r2, #0
 8014a94:	2100      	movs	r1, #0
 8014a96:	6878      	ldr	r0, [r7, #4]
 8014a98:	f003 fd77 	bl	801858a <USBD_LL_Transmit>

  return USBD_OK;
 8014a9c:	2300      	movs	r3, #0
}
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	3708      	adds	r7, #8
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	bd80      	pop	{r7, pc}

08014aa6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014aa6:	b580      	push	{r7, lr}
 8014aa8:	b082      	sub	sp, #8
 8014aaa:	af00      	add	r7, sp, #0
 8014aac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	2205      	movs	r2, #5
 8014ab2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	2200      	movs	r2, #0
 8014aba:	2100      	movs	r1, #0
 8014abc:	6878      	ldr	r0, [r7, #4]
 8014abe:	f003 fd85 	bl	80185cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014ac2:	2300      	movs	r3, #0
}
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	3708      	adds	r7, #8
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	bd80      	pop	{r7, pc}

08014acc <__NVIC_SetPriority>:
{
 8014acc:	b480      	push	{r7}
 8014ace:	b083      	sub	sp, #12
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	6039      	str	r1, [r7, #0]
 8014ad6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8014ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	db0a      	blt.n	8014af6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014ae0:	683b      	ldr	r3, [r7, #0]
 8014ae2:	b2da      	uxtb	r2, r3
 8014ae4:	490c      	ldr	r1, [pc, #48]	@ (8014b18 <__NVIC_SetPriority+0x4c>)
 8014ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014aea:	0112      	lsls	r2, r2, #4
 8014aec:	b2d2      	uxtb	r2, r2
 8014aee:	440b      	add	r3, r1
 8014af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8014af4:	e00a      	b.n	8014b0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014af6:	683b      	ldr	r3, [r7, #0]
 8014af8:	b2da      	uxtb	r2, r3
 8014afa:	4908      	ldr	r1, [pc, #32]	@ (8014b1c <__NVIC_SetPriority+0x50>)
 8014afc:	88fb      	ldrh	r3, [r7, #6]
 8014afe:	f003 030f 	and.w	r3, r3, #15
 8014b02:	3b04      	subs	r3, #4
 8014b04:	0112      	lsls	r2, r2, #4
 8014b06:	b2d2      	uxtb	r2, r2
 8014b08:	440b      	add	r3, r1
 8014b0a:	761a      	strb	r2, [r3, #24]
}
 8014b0c:	bf00      	nop
 8014b0e:	370c      	adds	r7, #12
 8014b10:	46bd      	mov	sp, r7
 8014b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b16:	4770      	bx	lr
 8014b18:	e000e100 	.word	0xe000e100
 8014b1c:	e000ed00 	.word	0xe000ed00

08014b20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8014b20:	b580      	push	{r7, lr}
 8014b22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8014b24:	4b05      	ldr	r3, [pc, #20]	@ (8014b3c <SysTick_Handler+0x1c>)
 8014b26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014b28:	f001 ff52 	bl	80169d0 <xTaskGetSchedulerState>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	2b01      	cmp	r3, #1
 8014b30:	d001      	beq.n	8014b36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8014b32:	f002 fd49 	bl	80175c8 <xPortSysTickHandler>
  }
}
 8014b36:	bf00      	nop
 8014b38:	bd80      	pop	{r7, pc}
 8014b3a:	bf00      	nop
 8014b3c:	e000e010 	.word	0xe000e010

08014b40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014b40:	b580      	push	{r7, lr}
 8014b42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014b44:	2100      	movs	r1, #0
 8014b46:	f06f 0004 	mvn.w	r0, #4
 8014b4a:	f7ff ffbf 	bl	8014acc <__NVIC_SetPriority>
#endif
}
 8014b4e:	bf00      	nop
 8014b50:	bd80      	pop	{r7, pc}
	...

08014b54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014b54:	b480      	push	{r7}
 8014b56:	b083      	sub	sp, #12
 8014b58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014b5a:	f3ef 8305 	mrs	r3, IPSR
 8014b5e:	603b      	str	r3, [r7, #0]
  return(result);
 8014b60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d003      	beq.n	8014b6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014b66:	f06f 0305 	mvn.w	r3, #5
 8014b6a:	607b      	str	r3, [r7, #4]
 8014b6c:	e00c      	b.n	8014b88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8014b98 <osKernelInitialize+0x44>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d105      	bne.n	8014b82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014b76:	4b08      	ldr	r3, [pc, #32]	@ (8014b98 <osKernelInitialize+0x44>)
 8014b78:	2201      	movs	r2, #1
 8014b7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	607b      	str	r3, [r7, #4]
 8014b80:	e002      	b.n	8014b88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8014b82:	f04f 33ff 	mov.w	r3, #4294967295
 8014b86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014b88:	687b      	ldr	r3, [r7, #4]
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	370c      	adds	r7, #12
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b94:	4770      	bx	lr
 8014b96:	bf00      	nop
 8014b98:	2400193c 	.word	0x2400193c

08014b9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b082      	sub	sp, #8
 8014ba0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ba2:	f3ef 8305 	mrs	r3, IPSR
 8014ba6:	603b      	str	r3, [r7, #0]
  return(result);
 8014ba8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d003      	beq.n	8014bb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8014bae:	f06f 0305 	mvn.w	r3, #5
 8014bb2:	607b      	str	r3, [r7, #4]
 8014bb4:	e010      	b.n	8014bd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8014be4 <osKernelStart+0x48>)
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	2b01      	cmp	r3, #1
 8014bbc:	d109      	bne.n	8014bd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8014bbe:	f7ff ffbf 	bl	8014b40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014bc2:	4b08      	ldr	r3, [pc, #32]	@ (8014be4 <osKernelStart+0x48>)
 8014bc4:	2202      	movs	r2, #2
 8014bc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014bc8:	f001 fa82 	bl	80160d0 <vTaskStartScheduler>
      stat = osOK;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	607b      	str	r3, [r7, #4]
 8014bd0:	e002      	b.n	8014bd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8014bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8014bd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014bd8:	687b      	ldr	r3, [r7, #4]
}
 8014bda:	4618      	mov	r0, r3
 8014bdc:	3708      	adds	r7, #8
 8014bde:	46bd      	mov	sp, r7
 8014be0:	bd80      	pop	{r7, pc}
 8014be2:	bf00      	nop
 8014be4:	2400193c 	.word	0x2400193c

08014be8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b08e      	sub	sp, #56	@ 0x38
 8014bec:	af04      	add	r7, sp, #16
 8014bee:	60f8      	str	r0, [r7, #12]
 8014bf0:	60b9      	str	r1, [r7, #8]
 8014bf2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014bf8:	f3ef 8305 	mrs	r3, IPSR
 8014bfc:	617b      	str	r3, [r7, #20]
  return(result);
 8014bfe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d17e      	bne.n	8014d02 <osThreadNew+0x11a>
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d07b      	beq.n	8014d02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8014c0a:	2380      	movs	r3, #128	@ 0x80
 8014c0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8014c0e:	2318      	movs	r3, #24
 8014c10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8014c12:	2300      	movs	r3, #0
 8014c14:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8014c16:	f04f 33ff 	mov.w	r3, #4294967295
 8014c1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d045      	beq.n	8014cae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d002      	beq.n	8014c30 <osThreadNew+0x48>
        name = attr->name;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	699b      	ldr	r3, [r3, #24]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d002      	beq.n	8014c3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	699b      	ldr	r3, [r3, #24]
 8014c3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014c3e:	69fb      	ldr	r3, [r7, #28]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d008      	beq.n	8014c56 <osThreadNew+0x6e>
 8014c44:	69fb      	ldr	r3, [r7, #28]
 8014c46:	2b38      	cmp	r3, #56	@ 0x38
 8014c48:	d805      	bhi.n	8014c56 <osThreadNew+0x6e>
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	685b      	ldr	r3, [r3, #4]
 8014c4e:	f003 0301 	and.w	r3, r3, #1
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d001      	beq.n	8014c5a <osThreadNew+0x72>
        return (NULL);
 8014c56:	2300      	movs	r3, #0
 8014c58:	e054      	b.n	8014d04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	695b      	ldr	r3, [r3, #20]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d003      	beq.n	8014c6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	695b      	ldr	r3, [r3, #20]
 8014c66:	089b      	lsrs	r3, r3, #2
 8014c68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	689b      	ldr	r3, [r3, #8]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d00e      	beq.n	8014c90 <osThreadNew+0xa8>
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	68db      	ldr	r3, [r3, #12]
 8014c76:	2bab      	cmp	r3, #171	@ 0xab
 8014c78:	d90a      	bls.n	8014c90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d006      	beq.n	8014c90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	695b      	ldr	r3, [r3, #20]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d002      	beq.n	8014c90 <osThreadNew+0xa8>
        mem = 1;
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	61bb      	str	r3, [r7, #24]
 8014c8e:	e010      	b.n	8014cb2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	689b      	ldr	r3, [r3, #8]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d10c      	bne.n	8014cb2 <osThreadNew+0xca>
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	68db      	ldr	r3, [r3, #12]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d108      	bne.n	8014cb2 <osThreadNew+0xca>
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	691b      	ldr	r3, [r3, #16]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d104      	bne.n	8014cb2 <osThreadNew+0xca>
          mem = 0;
 8014ca8:	2300      	movs	r3, #0
 8014caa:	61bb      	str	r3, [r7, #24]
 8014cac:	e001      	b.n	8014cb2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8014cae:	2300      	movs	r3, #0
 8014cb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014cb2:	69bb      	ldr	r3, [r7, #24]
 8014cb4:	2b01      	cmp	r3, #1
 8014cb6:	d110      	bne.n	8014cda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8014cbc:	687a      	ldr	r2, [r7, #4]
 8014cbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014cc0:	9202      	str	r2, [sp, #8]
 8014cc2:	9301      	str	r3, [sp, #4]
 8014cc4:	69fb      	ldr	r3, [r7, #28]
 8014cc6:	9300      	str	r3, [sp, #0]
 8014cc8:	68bb      	ldr	r3, [r7, #8]
 8014cca:	6a3a      	ldr	r2, [r7, #32]
 8014ccc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014cce:	68f8      	ldr	r0, [r7, #12]
 8014cd0:	f001 f808 	bl	8015ce4 <xTaskCreateStatic>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	613b      	str	r3, [r7, #16]
 8014cd8:	e013      	b.n	8014d02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8014cda:	69bb      	ldr	r3, [r7, #24]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d110      	bne.n	8014d02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014ce0:	6a3b      	ldr	r3, [r7, #32]
 8014ce2:	b29a      	uxth	r2, r3
 8014ce4:	f107 0310 	add.w	r3, r7, #16
 8014ce8:	9301      	str	r3, [sp, #4]
 8014cea:	69fb      	ldr	r3, [r7, #28]
 8014cec:	9300      	str	r3, [sp, #0]
 8014cee:	68bb      	ldr	r3, [r7, #8]
 8014cf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014cf2:	68f8      	ldr	r0, [r7, #12]
 8014cf4:	f001 f856 	bl	8015da4 <xTaskCreate>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	2b01      	cmp	r3, #1
 8014cfc:	d001      	beq.n	8014d02 <osThreadNew+0x11a>
            hTask = NULL;
 8014cfe:	2300      	movs	r3, #0
 8014d00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014d02:	693b      	ldr	r3, [r7, #16]
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	3728      	adds	r7, #40	@ 0x28
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}

08014d0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b084      	sub	sp, #16
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014d14:	f3ef 8305 	mrs	r3, IPSR
 8014d18:	60bb      	str	r3, [r7, #8]
  return(result);
 8014d1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d003      	beq.n	8014d28 <osDelay+0x1c>
    stat = osErrorISR;
 8014d20:	f06f 0305 	mvn.w	r3, #5
 8014d24:	60fb      	str	r3, [r7, #12]
 8014d26:	e007      	b.n	8014d38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014d28:	2300      	movs	r3, #0
 8014d2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d002      	beq.n	8014d38 <osDelay+0x2c>
      vTaskDelay(ticks);
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f001 f996 	bl	8016064 <vTaskDelay>
    }
  }

  return (stat);
 8014d38:	68fb      	ldr	r3, [r7, #12]
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	3710      	adds	r7, #16
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}

08014d42 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8014d42:	b580      	push	{r7, lr}
 8014d44:	b08a      	sub	sp, #40	@ 0x28
 8014d46:	af02      	add	r7, sp, #8
 8014d48:	60f8      	str	r0, [r7, #12]
 8014d4a:	60b9      	str	r1, [r7, #8]
 8014d4c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8014d4e:	2300      	movs	r3, #0
 8014d50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014d52:	f3ef 8305 	mrs	r3, IPSR
 8014d56:	613b      	str	r3, [r7, #16]
  return(result);
 8014d58:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d15f      	bne.n	8014e1e <osMessageQueueNew+0xdc>
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d05c      	beq.n	8014e1e <osMessageQueueNew+0xdc>
 8014d64:	68bb      	ldr	r3, [r7, #8]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d059      	beq.n	8014e1e <osMessageQueueNew+0xdc>
    mem = -1;
 8014d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d029      	beq.n	8014dca <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	689b      	ldr	r3, [r3, #8]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d012      	beq.n	8014da4 <osMessageQueueNew+0x62>
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	68db      	ldr	r3, [r3, #12]
 8014d82:	2b4f      	cmp	r3, #79	@ 0x4f
 8014d84:	d90e      	bls.n	8014da4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d00a      	beq.n	8014da4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	695a      	ldr	r2, [r3, #20]
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	68b9      	ldr	r1, [r7, #8]
 8014d96:	fb01 f303 	mul.w	r3, r1, r3
 8014d9a:	429a      	cmp	r2, r3
 8014d9c:	d302      	bcc.n	8014da4 <osMessageQueueNew+0x62>
        mem = 1;
 8014d9e:	2301      	movs	r3, #1
 8014da0:	61bb      	str	r3, [r7, #24]
 8014da2:	e014      	b.n	8014dce <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	689b      	ldr	r3, [r3, #8]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d110      	bne.n	8014dce <osMessageQueueNew+0x8c>
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	68db      	ldr	r3, [r3, #12]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d10c      	bne.n	8014dce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d108      	bne.n	8014dce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	695b      	ldr	r3, [r3, #20]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d104      	bne.n	8014dce <osMessageQueueNew+0x8c>
          mem = 0;
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	61bb      	str	r3, [r7, #24]
 8014dc8:	e001      	b.n	8014dce <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8014dca:	2300      	movs	r3, #0
 8014dcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014dce:	69bb      	ldr	r3, [r7, #24]
 8014dd0:	2b01      	cmp	r3, #1
 8014dd2:	d10b      	bne.n	8014dec <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	691a      	ldr	r2, [r3, #16]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	689b      	ldr	r3, [r3, #8]
 8014ddc:	2100      	movs	r1, #0
 8014dde:	9100      	str	r1, [sp, #0]
 8014de0:	68b9      	ldr	r1, [r7, #8]
 8014de2:	68f8      	ldr	r0, [r7, #12]
 8014de4:	f000 fa30 	bl	8015248 <xQueueGenericCreateStatic>
 8014de8:	61f8      	str	r0, [r7, #28]
 8014dea:	e008      	b.n	8014dfe <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8014dec:	69bb      	ldr	r3, [r7, #24]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d105      	bne.n	8014dfe <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8014df2:	2200      	movs	r2, #0
 8014df4:	68b9      	ldr	r1, [r7, #8]
 8014df6:	68f8      	ldr	r0, [r7, #12]
 8014df8:	f000 faa3 	bl	8015342 <xQueueGenericCreate>
 8014dfc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8014dfe:	69fb      	ldr	r3, [r7, #28]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d00c      	beq.n	8014e1e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d003      	beq.n	8014e12 <osMessageQueueNew+0xd0>
        name = attr->name;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	617b      	str	r3, [r7, #20]
 8014e10:	e001      	b.n	8014e16 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8014e12:	2300      	movs	r3, #0
 8014e14:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8014e16:	6979      	ldr	r1, [r7, #20]
 8014e18:	69f8      	ldr	r0, [r7, #28]
 8014e1a:	f000 ff05 	bl	8015c28 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8014e1e:	69fb      	ldr	r3, [r7, #28]
}
 8014e20:	4618      	mov	r0, r3
 8014e22:	3720      	adds	r7, #32
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}

08014e28 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b088      	sub	sp, #32
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	60f8      	str	r0, [r7, #12]
 8014e30:	60b9      	str	r1, [r7, #8]
 8014e32:	603b      	str	r3, [r7, #0]
 8014e34:	4613      	mov	r3, r2
 8014e36:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014e40:	f3ef 8305 	mrs	r3, IPSR
 8014e44:	617b      	str	r3, [r7, #20]
  return(result);
 8014e46:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d028      	beq.n	8014e9e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014e4c:	69bb      	ldr	r3, [r7, #24]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d005      	beq.n	8014e5e <osMessageQueuePut+0x36>
 8014e52:	68bb      	ldr	r3, [r7, #8]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d002      	beq.n	8014e5e <osMessageQueuePut+0x36>
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d003      	beq.n	8014e66 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8014e5e:	f06f 0303 	mvn.w	r3, #3
 8014e62:	61fb      	str	r3, [r7, #28]
 8014e64:	e038      	b.n	8014ed8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8014e66:	2300      	movs	r3, #0
 8014e68:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8014e6a:	f107 0210 	add.w	r2, r7, #16
 8014e6e:	2300      	movs	r3, #0
 8014e70:	68b9      	ldr	r1, [r7, #8]
 8014e72:	69b8      	ldr	r0, [r7, #24]
 8014e74:	f000 fbc6 	bl	8015604 <xQueueGenericSendFromISR>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	2b01      	cmp	r3, #1
 8014e7c:	d003      	beq.n	8014e86 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8014e7e:	f06f 0302 	mvn.w	r3, #2
 8014e82:	61fb      	str	r3, [r7, #28]
 8014e84:	e028      	b.n	8014ed8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8014e86:	693b      	ldr	r3, [r7, #16]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d025      	beq.n	8014ed8 <osMessageQueuePut+0xb0>
 8014e8c:	4b15      	ldr	r3, [pc, #84]	@ (8014ee4 <osMessageQueuePut+0xbc>)
 8014e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e92:	601a      	str	r2, [r3, #0]
 8014e94:	f3bf 8f4f 	dsb	sy
 8014e98:	f3bf 8f6f 	isb	sy
 8014e9c:	e01c      	b.n	8014ed8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8014e9e:	69bb      	ldr	r3, [r7, #24]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d002      	beq.n	8014eaa <osMessageQueuePut+0x82>
 8014ea4:	68bb      	ldr	r3, [r7, #8]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d103      	bne.n	8014eb2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8014eaa:	f06f 0303 	mvn.w	r3, #3
 8014eae:	61fb      	str	r3, [r7, #28]
 8014eb0:	e012      	b.n	8014ed8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	683a      	ldr	r2, [r7, #0]
 8014eb6:	68b9      	ldr	r1, [r7, #8]
 8014eb8:	69b8      	ldr	r0, [r7, #24]
 8014eba:	f000 faa1 	bl	8015400 <xQueueGenericSend>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	2b01      	cmp	r3, #1
 8014ec2:	d009      	beq.n	8014ed8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d003      	beq.n	8014ed2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8014eca:	f06f 0301 	mvn.w	r3, #1
 8014ece:	61fb      	str	r3, [r7, #28]
 8014ed0:	e002      	b.n	8014ed8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8014ed2:	f06f 0302 	mvn.w	r3, #2
 8014ed6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014ed8:	69fb      	ldr	r3, [r7, #28]
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3720      	adds	r7, #32
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	e000ed04 	.word	0xe000ed04

08014ee8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b088      	sub	sp, #32
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	60f8      	str	r0, [r7, #12]
 8014ef0:	60b9      	str	r1, [r7, #8]
 8014ef2:	607a      	str	r2, [r7, #4]
 8014ef4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8014efa:	2300      	movs	r3, #0
 8014efc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014efe:	f3ef 8305 	mrs	r3, IPSR
 8014f02:	617b      	str	r3, [r7, #20]
  return(result);
 8014f04:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d028      	beq.n	8014f5c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014f0a:	69bb      	ldr	r3, [r7, #24]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d005      	beq.n	8014f1c <osMessageQueueGet+0x34>
 8014f10:	68bb      	ldr	r3, [r7, #8]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d002      	beq.n	8014f1c <osMessageQueueGet+0x34>
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d003      	beq.n	8014f24 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8014f1c:	f06f 0303 	mvn.w	r3, #3
 8014f20:	61fb      	str	r3, [r7, #28]
 8014f22:	e037      	b.n	8014f94 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8014f24:	2300      	movs	r3, #0
 8014f26:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8014f28:	f107 0310 	add.w	r3, r7, #16
 8014f2c:	461a      	mov	r2, r3
 8014f2e:	68b9      	ldr	r1, [r7, #8]
 8014f30:	69b8      	ldr	r0, [r7, #24]
 8014f32:	f000 fce7 	bl	8015904 <xQueueReceiveFromISR>
 8014f36:	4603      	mov	r3, r0
 8014f38:	2b01      	cmp	r3, #1
 8014f3a:	d003      	beq.n	8014f44 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8014f3c:	f06f 0302 	mvn.w	r3, #2
 8014f40:	61fb      	str	r3, [r7, #28]
 8014f42:	e027      	b.n	8014f94 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8014f44:	693b      	ldr	r3, [r7, #16]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d024      	beq.n	8014f94 <osMessageQueueGet+0xac>
 8014f4a:	4b15      	ldr	r3, [pc, #84]	@ (8014fa0 <osMessageQueueGet+0xb8>)
 8014f4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014f50:	601a      	str	r2, [r3, #0]
 8014f52:	f3bf 8f4f 	dsb	sy
 8014f56:	f3bf 8f6f 	isb	sy
 8014f5a:	e01b      	b.n	8014f94 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8014f5c:	69bb      	ldr	r3, [r7, #24]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d002      	beq.n	8014f68 <osMessageQueueGet+0x80>
 8014f62:	68bb      	ldr	r3, [r7, #8]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d103      	bne.n	8014f70 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8014f68:	f06f 0303 	mvn.w	r3, #3
 8014f6c:	61fb      	str	r3, [r7, #28]
 8014f6e:	e011      	b.n	8014f94 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014f70:	683a      	ldr	r2, [r7, #0]
 8014f72:	68b9      	ldr	r1, [r7, #8]
 8014f74:	69b8      	ldr	r0, [r7, #24]
 8014f76:	f000 fbe3 	bl	8015740 <xQueueReceive>
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	2b01      	cmp	r3, #1
 8014f7e:	d009      	beq.n	8014f94 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d003      	beq.n	8014f8e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8014f86:	f06f 0301 	mvn.w	r3, #1
 8014f8a:	61fb      	str	r3, [r7, #28]
 8014f8c:	e002      	b.n	8014f94 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8014f8e:	f06f 0302 	mvn.w	r3, #2
 8014f92:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014f94:	69fb      	ldr	r3, [r7, #28]
}
 8014f96:	4618      	mov	r0, r3
 8014f98:	3720      	adds	r7, #32
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	bd80      	pop	{r7, pc}
 8014f9e:	bf00      	nop
 8014fa0:	e000ed04 	.word	0xe000ed04

08014fa4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8014fa4:	b480      	push	{r7}
 8014fa6:	b085      	sub	sp, #20
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	60f8      	str	r0, [r7, #12]
 8014fac:	60b9      	str	r1, [r7, #8]
 8014fae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	4a07      	ldr	r2, [pc, #28]	@ (8014fd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8014fb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8014fb6:	68bb      	ldr	r3, [r7, #8]
 8014fb8:	4a06      	ldr	r2, [pc, #24]	@ (8014fd4 <vApplicationGetIdleTaskMemory+0x30>)
 8014fba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	2280      	movs	r2, #128	@ 0x80
 8014fc0:	601a      	str	r2, [r3, #0]
}
 8014fc2:	bf00      	nop
 8014fc4:	3714      	adds	r7, #20
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fcc:	4770      	bx	lr
 8014fce:	bf00      	nop
 8014fd0:	24001940 	.word	0x24001940
 8014fd4:	240019ec 	.word	0x240019ec

08014fd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8014fd8:	b480      	push	{r7}
 8014fda:	b085      	sub	sp, #20
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	60f8      	str	r0, [r7, #12]
 8014fe0:	60b9      	str	r1, [r7, #8]
 8014fe2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	4a07      	ldr	r2, [pc, #28]	@ (8015004 <vApplicationGetTimerTaskMemory+0x2c>)
 8014fe8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8014fea:	68bb      	ldr	r3, [r7, #8]
 8014fec:	4a06      	ldr	r2, [pc, #24]	@ (8015008 <vApplicationGetTimerTaskMemory+0x30>)
 8014fee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014ff6:	601a      	str	r2, [r3, #0]
}
 8014ff8:	bf00      	nop
 8014ffa:	3714      	adds	r7, #20
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015002:	4770      	bx	lr
 8015004:	24001bec 	.word	0x24001bec
 8015008:	24001c98 	.word	0x24001c98

0801500c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801500c:	b480      	push	{r7}
 801500e:	b083      	sub	sp, #12
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f103 0208 	add.w	r2, r3, #8
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	f04f 32ff 	mov.w	r2, #4294967295
 8015024:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	f103 0208 	add.w	r2, r3, #8
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f103 0208 	add.w	r2, r3, #8
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	2200      	movs	r2, #0
 801503e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015040:	bf00      	nop
 8015042:	370c      	adds	r7, #12
 8015044:	46bd      	mov	sp, r7
 8015046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801504a:	4770      	bx	lr

0801504c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801504c:	b480      	push	{r7}
 801504e:	b083      	sub	sp, #12
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	2200      	movs	r2, #0
 8015058:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801505a:	bf00      	nop
 801505c:	370c      	adds	r7, #12
 801505e:	46bd      	mov	sp, r7
 8015060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015064:	4770      	bx	lr

08015066 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015066:	b480      	push	{r7}
 8015068:	b085      	sub	sp, #20
 801506a:	af00      	add	r7, sp, #0
 801506c:	6078      	str	r0, [r7, #4]
 801506e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	685b      	ldr	r3, [r3, #4]
 8015074:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015076:	683b      	ldr	r3, [r7, #0]
 8015078:	68fa      	ldr	r2, [r7, #12]
 801507a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	689a      	ldr	r2, [r3, #8]
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	689b      	ldr	r3, [r3, #8]
 8015088:	683a      	ldr	r2, [r7, #0]
 801508a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	683a      	ldr	r2, [r7, #0]
 8015090:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	687a      	ldr	r2, [r7, #4]
 8015096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	1c5a      	adds	r2, r3, #1
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	601a      	str	r2, [r3, #0]
}
 80150a2:	bf00      	nop
 80150a4:	3714      	adds	r7, #20
 80150a6:	46bd      	mov	sp, r7
 80150a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ac:	4770      	bx	lr

080150ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80150ae:	b480      	push	{r7}
 80150b0:	b085      	sub	sp, #20
 80150b2:	af00      	add	r7, sp, #0
 80150b4:	6078      	str	r0, [r7, #4]
 80150b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80150b8:	683b      	ldr	r3, [r7, #0]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80150be:	68bb      	ldr	r3, [r7, #8]
 80150c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150c4:	d103      	bne.n	80150ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	691b      	ldr	r3, [r3, #16]
 80150ca:	60fb      	str	r3, [r7, #12]
 80150cc:	e00c      	b.n	80150e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	3308      	adds	r3, #8
 80150d2:	60fb      	str	r3, [r7, #12]
 80150d4:	e002      	b.n	80150dc <vListInsert+0x2e>
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	685b      	ldr	r3, [r3, #4]
 80150da:	60fb      	str	r3, [r7, #12]
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	685b      	ldr	r3, [r3, #4]
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	68ba      	ldr	r2, [r7, #8]
 80150e4:	429a      	cmp	r2, r3
 80150e6:	d2f6      	bcs.n	80150d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	685a      	ldr	r2, [r3, #4]
 80150ec:	683b      	ldr	r3, [r7, #0]
 80150ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80150f0:	683b      	ldr	r3, [r7, #0]
 80150f2:	685b      	ldr	r3, [r3, #4]
 80150f4:	683a      	ldr	r2, [r7, #0]
 80150f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80150f8:	683b      	ldr	r3, [r7, #0]
 80150fa:	68fa      	ldr	r2, [r7, #12]
 80150fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	683a      	ldr	r2, [r7, #0]
 8015102:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015104:	683b      	ldr	r3, [r7, #0]
 8015106:	687a      	ldr	r2, [r7, #4]
 8015108:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	1c5a      	adds	r2, r3, #1
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	601a      	str	r2, [r3, #0]
}
 8015114:	bf00      	nop
 8015116:	3714      	adds	r7, #20
 8015118:	46bd      	mov	sp, r7
 801511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511e:	4770      	bx	lr

08015120 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015120:	b480      	push	{r7}
 8015122:	b085      	sub	sp, #20
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	691b      	ldr	r3, [r3, #16]
 801512c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	685b      	ldr	r3, [r3, #4]
 8015132:	687a      	ldr	r2, [r7, #4]
 8015134:	6892      	ldr	r2, [r2, #8]
 8015136:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	689b      	ldr	r3, [r3, #8]
 801513c:	687a      	ldr	r2, [r7, #4]
 801513e:	6852      	ldr	r2, [r2, #4]
 8015140:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	685b      	ldr	r3, [r3, #4]
 8015146:	687a      	ldr	r2, [r7, #4]
 8015148:	429a      	cmp	r2, r3
 801514a:	d103      	bne.n	8015154 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	689a      	ldr	r2, [r3, #8]
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2200      	movs	r2, #0
 8015158:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	1e5a      	subs	r2, r3, #1
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	681b      	ldr	r3, [r3, #0]
}
 8015168:	4618      	mov	r0, r3
 801516a:	3714      	adds	r7, #20
 801516c:	46bd      	mov	sp, r7
 801516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015172:	4770      	bx	lr

08015174 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b084      	sub	sp, #16
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
 801517c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d10b      	bne.n	80151a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801518c:	f383 8811 	msr	BASEPRI, r3
 8015190:	f3bf 8f6f 	isb	sy
 8015194:	f3bf 8f4f 	dsb	sy
 8015198:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801519a:	bf00      	nop
 801519c:	bf00      	nop
 801519e:	e7fd      	b.n	801519c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80151a0:	f002 f982 	bl	80174a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	681a      	ldr	r2, [r3, #0]
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80151ac:	68f9      	ldr	r1, [r7, #12]
 80151ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80151b0:	fb01 f303 	mul.w	r3, r1, r3
 80151b4:	441a      	add	r2, r3
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	2200      	movs	r2, #0
 80151be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	681a      	ldr	r2, [r3, #0]
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	681a      	ldr	r2, [r3, #0]
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80151d0:	3b01      	subs	r3, #1
 80151d2:	68f9      	ldr	r1, [r7, #12]
 80151d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80151d6:	fb01 f303 	mul.w	r3, r1, r3
 80151da:	441a      	add	r2, r3
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	22ff      	movs	r2, #255	@ 0xff
 80151e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	22ff      	movs	r2, #255	@ 0xff
 80151ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80151f0:	683b      	ldr	r3, [r7, #0]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d114      	bne.n	8015220 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	691b      	ldr	r3, [r3, #16]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d01a      	beq.n	8015234 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	3310      	adds	r3, #16
 8015202:	4618      	mov	r0, r3
 8015204:	f001 fa1e 	bl	8016644 <xTaskRemoveFromEventList>
 8015208:	4603      	mov	r3, r0
 801520a:	2b00      	cmp	r3, #0
 801520c:	d012      	beq.n	8015234 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801520e:	4b0d      	ldr	r3, [pc, #52]	@ (8015244 <xQueueGenericReset+0xd0>)
 8015210:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015214:	601a      	str	r2, [r3, #0]
 8015216:	f3bf 8f4f 	dsb	sy
 801521a:	f3bf 8f6f 	isb	sy
 801521e:	e009      	b.n	8015234 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	3310      	adds	r3, #16
 8015224:	4618      	mov	r0, r3
 8015226:	f7ff fef1 	bl	801500c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	3324      	adds	r3, #36	@ 0x24
 801522e:	4618      	mov	r0, r3
 8015230:	f7ff feec 	bl	801500c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015234:	f002 f96a 	bl	801750c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015238:	2301      	movs	r3, #1
}
 801523a:	4618      	mov	r0, r3
 801523c:	3710      	adds	r7, #16
 801523e:	46bd      	mov	sp, r7
 8015240:	bd80      	pop	{r7, pc}
 8015242:	bf00      	nop
 8015244:	e000ed04 	.word	0xe000ed04

08015248 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015248:	b580      	push	{r7, lr}
 801524a:	b08e      	sub	sp, #56	@ 0x38
 801524c:	af02      	add	r7, sp, #8
 801524e:	60f8      	str	r0, [r7, #12]
 8015250:	60b9      	str	r1, [r7, #8]
 8015252:	607a      	str	r2, [r7, #4]
 8015254:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d10b      	bne.n	8015274 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 801525c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015260:	f383 8811 	msr	BASEPRI, r3
 8015264:	f3bf 8f6f 	isb	sy
 8015268:	f3bf 8f4f 	dsb	sy
 801526c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801526e:	bf00      	nop
 8015270:	bf00      	nop
 8015272:	e7fd      	b.n	8015270 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015274:	683b      	ldr	r3, [r7, #0]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d10b      	bne.n	8015292 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 801527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801527e:	f383 8811 	msr	BASEPRI, r3
 8015282:	f3bf 8f6f 	isb	sy
 8015286:	f3bf 8f4f 	dsb	sy
 801528a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801528c:	bf00      	nop
 801528e:	bf00      	nop
 8015290:	e7fd      	b.n	801528e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d002      	beq.n	801529e <xQueueGenericCreateStatic+0x56>
 8015298:	68bb      	ldr	r3, [r7, #8]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d001      	beq.n	80152a2 <xQueueGenericCreateStatic+0x5a>
 801529e:	2301      	movs	r3, #1
 80152a0:	e000      	b.n	80152a4 <xQueueGenericCreateStatic+0x5c>
 80152a2:	2300      	movs	r3, #0
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d10b      	bne.n	80152c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80152a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152ac:	f383 8811 	msr	BASEPRI, r3
 80152b0:	f3bf 8f6f 	isb	sy
 80152b4:	f3bf 8f4f 	dsb	sy
 80152b8:	623b      	str	r3, [r7, #32]
}
 80152ba:	bf00      	nop
 80152bc:	bf00      	nop
 80152be:	e7fd      	b.n	80152bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d102      	bne.n	80152cc <xQueueGenericCreateStatic+0x84>
 80152c6:	68bb      	ldr	r3, [r7, #8]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d101      	bne.n	80152d0 <xQueueGenericCreateStatic+0x88>
 80152cc:	2301      	movs	r3, #1
 80152ce:	e000      	b.n	80152d2 <xQueueGenericCreateStatic+0x8a>
 80152d0:	2300      	movs	r3, #0
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d10b      	bne.n	80152ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80152d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152da:	f383 8811 	msr	BASEPRI, r3
 80152de:	f3bf 8f6f 	isb	sy
 80152e2:	f3bf 8f4f 	dsb	sy
 80152e6:	61fb      	str	r3, [r7, #28]
}
 80152e8:	bf00      	nop
 80152ea:	bf00      	nop
 80152ec:	e7fd      	b.n	80152ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80152ee:	2350      	movs	r3, #80	@ 0x50
 80152f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80152f2:	697b      	ldr	r3, [r7, #20]
 80152f4:	2b50      	cmp	r3, #80	@ 0x50
 80152f6:	d00b      	beq.n	8015310 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80152f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152fc:	f383 8811 	msr	BASEPRI, r3
 8015300:	f3bf 8f6f 	isb	sy
 8015304:	f3bf 8f4f 	dsb	sy
 8015308:	61bb      	str	r3, [r7, #24]
}
 801530a:	bf00      	nop
 801530c:	bf00      	nop
 801530e:	e7fd      	b.n	801530c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015310:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015312:	683b      	ldr	r3, [r7, #0]
 8015314:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8015316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015318:	2b00      	cmp	r3, #0
 801531a:	d00d      	beq.n	8015338 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801531e:	2201      	movs	r2, #1
 8015320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015324:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8015328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801532a:	9300      	str	r3, [sp, #0]
 801532c:	4613      	mov	r3, r2
 801532e:	687a      	ldr	r2, [r7, #4]
 8015330:	68b9      	ldr	r1, [r7, #8]
 8015332:	68f8      	ldr	r0, [r7, #12]
 8015334:	f000 f840 	bl	80153b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801533a:	4618      	mov	r0, r3
 801533c:	3730      	adds	r7, #48	@ 0x30
 801533e:	46bd      	mov	sp, r7
 8015340:	bd80      	pop	{r7, pc}

08015342 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015342:	b580      	push	{r7, lr}
 8015344:	b08a      	sub	sp, #40	@ 0x28
 8015346:	af02      	add	r7, sp, #8
 8015348:	60f8      	str	r0, [r7, #12]
 801534a:	60b9      	str	r1, [r7, #8]
 801534c:	4613      	mov	r3, r2
 801534e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d10b      	bne.n	801536e <xQueueGenericCreate+0x2c>
	__asm volatile
 8015356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801535a:	f383 8811 	msr	BASEPRI, r3
 801535e:	f3bf 8f6f 	isb	sy
 8015362:	f3bf 8f4f 	dsb	sy
 8015366:	613b      	str	r3, [r7, #16]
}
 8015368:	bf00      	nop
 801536a:	bf00      	nop
 801536c:	e7fd      	b.n	801536a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	68ba      	ldr	r2, [r7, #8]
 8015372:	fb02 f303 	mul.w	r3, r2, r3
 8015376:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015378:	69fb      	ldr	r3, [r7, #28]
 801537a:	3350      	adds	r3, #80	@ 0x50
 801537c:	4618      	mov	r0, r3
 801537e:	f002 f9b5 	bl	80176ec <pvPortMalloc>
 8015382:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015384:	69bb      	ldr	r3, [r7, #24]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d011      	beq.n	80153ae <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801538a:	69bb      	ldr	r3, [r7, #24]
 801538c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801538e:	697b      	ldr	r3, [r7, #20]
 8015390:	3350      	adds	r3, #80	@ 0x50
 8015392:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015394:	69bb      	ldr	r3, [r7, #24]
 8015396:	2200      	movs	r2, #0
 8015398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801539c:	79fa      	ldrb	r2, [r7, #7]
 801539e:	69bb      	ldr	r3, [r7, #24]
 80153a0:	9300      	str	r3, [sp, #0]
 80153a2:	4613      	mov	r3, r2
 80153a4:	697a      	ldr	r2, [r7, #20]
 80153a6:	68b9      	ldr	r1, [r7, #8]
 80153a8:	68f8      	ldr	r0, [r7, #12]
 80153aa:	f000 f805 	bl	80153b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80153ae:	69bb      	ldr	r3, [r7, #24]
	}
 80153b0:	4618      	mov	r0, r3
 80153b2:	3720      	adds	r7, #32
 80153b4:	46bd      	mov	sp, r7
 80153b6:	bd80      	pop	{r7, pc}

080153b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b084      	sub	sp, #16
 80153bc:	af00      	add	r7, sp, #0
 80153be:	60f8      	str	r0, [r7, #12]
 80153c0:	60b9      	str	r1, [r7, #8]
 80153c2:	607a      	str	r2, [r7, #4]
 80153c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d103      	bne.n	80153d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80153cc:	69bb      	ldr	r3, [r7, #24]
 80153ce:	69ba      	ldr	r2, [r7, #24]
 80153d0:	601a      	str	r2, [r3, #0]
 80153d2:	e002      	b.n	80153da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80153d4:	69bb      	ldr	r3, [r7, #24]
 80153d6:	687a      	ldr	r2, [r7, #4]
 80153d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80153da:	69bb      	ldr	r3, [r7, #24]
 80153dc:	68fa      	ldr	r2, [r7, #12]
 80153de:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80153e0:	69bb      	ldr	r3, [r7, #24]
 80153e2:	68ba      	ldr	r2, [r7, #8]
 80153e4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80153e6:	2101      	movs	r1, #1
 80153e8:	69b8      	ldr	r0, [r7, #24]
 80153ea:	f7ff fec3 	bl	8015174 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80153ee:	69bb      	ldr	r3, [r7, #24]
 80153f0:	78fa      	ldrb	r2, [r7, #3]
 80153f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80153f6:	bf00      	nop
 80153f8:	3710      	adds	r7, #16
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}
	...

08015400 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b08e      	sub	sp, #56	@ 0x38
 8015404:	af00      	add	r7, sp, #0
 8015406:	60f8      	str	r0, [r7, #12]
 8015408:	60b9      	str	r1, [r7, #8]
 801540a:	607a      	str	r2, [r7, #4]
 801540c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801540e:	2300      	movs	r3, #0
 8015410:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015418:	2b00      	cmp	r3, #0
 801541a:	d10b      	bne.n	8015434 <xQueueGenericSend+0x34>
	__asm volatile
 801541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015420:	f383 8811 	msr	BASEPRI, r3
 8015424:	f3bf 8f6f 	isb	sy
 8015428:	f3bf 8f4f 	dsb	sy
 801542c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801542e:	bf00      	nop
 8015430:	bf00      	nop
 8015432:	e7fd      	b.n	8015430 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015434:	68bb      	ldr	r3, [r7, #8]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d103      	bne.n	8015442 <xQueueGenericSend+0x42>
 801543a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801543c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801543e:	2b00      	cmp	r3, #0
 8015440:	d101      	bne.n	8015446 <xQueueGenericSend+0x46>
 8015442:	2301      	movs	r3, #1
 8015444:	e000      	b.n	8015448 <xQueueGenericSend+0x48>
 8015446:	2300      	movs	r3, #0
 8015448:	2b00      	cmp	r3, #0
 801544a:	d10b      	bne.n	8015464 <xQueueGenericSend+0x64>
	__asm volatile
 801544c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015450:	f383 8811 	msr	BASEPRI, r3
 8015454:	f3bf 8f6f 	isb	sy
 8015458:	f3bf 8f4f 	dsb	sy
 801545c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801545e:	bf00      	nop
 8015460:	bf00      	nop
 8015462:	e7fd      	b.n	8015460 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015464:	683b      	ldr	r3, [r7, #0]
 8015466:	2b02      	cmp	r3, #2
 8015468:	d103      	bne.n	8015472 <xQueueGenericSend+0x72>
 801546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801546c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801546e:	2b01      	cmp	r3, #1
 8015470:	d101      	bne.n	8015476 <xQueueGenericSend+0x76>
 8015472:	2301      	movs	r3, #1
 8015474:	e000      	b.n	8015478 <xQueueGenericSend+0x78>
 8015476:	2300      	movs	r3, #0
 8015478:	2b00      	cmp	r3, #0
 801547a:	d10b      	bne.n	8015494 <xQueueGenericSend+0x94>
	__asm volatile
 801547c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015480:	f383 8811 	msr	BASEPRI, r3
 8015484:	f3bf 8f6f 	isb	sy
 8015488:	f3bf 8f4f 	dsb	sy
 801548c:	623b      	str	r3, [r7, #32]
}
 801548e:	bf00      	nop
 8015490:	bf00      	nop
 8015492:	e7fd      	b.n	8015490 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015494:	f001 fa9c 	bl	80169d0 <xTaskGetSchedulerState>
 8015498:	4603      	mov	r3, r0
 801549a:	2b00      	cmp	r3, #0
 801549c:	d102      	bne.n	80154a4 <xQueueGenericSend+0xa4>
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d101      	bne.n	80154a8 <xQueueGenericSend+0xa8>
 80154a4:	2301      	movs	r3, #1
 80154a6:	e000      	b.n	80154aa <xQueueGenericSend+0xaa>
 80154a8:	2300      	movs	r3, #0
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d10b      	bne.n	80154c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80154ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154b2:	f383 8811 	msr	BASEPRI, r3
 80154b6:	f3bf 8f6f 	isb	sy
 80154ba:	f3bf 8f4f 	dsb	sy
 80154be:	61fb      	str	r3, [r7, #28]
}
 80154c0:	bf00      	nop
 80154c2:	bf00      	nop
 80154c4:	e7fd      	b.n	80154c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80154c6:	f001 ffef 	bl	80174a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80154ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80154ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80154d2:	429a      	cmp	r2, r3
 80154d4:	d302      	bcc.n	80154dc <xQueueGenericSend+0xdc>
 80154d6:	683b      	ldr	r3, [r7, #0]
 80154d8:	2b02      	cmp	r3, #2
 80154da:	d129      	bne.n	8015530 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80154dc:	683a      	ldr	r2, [r7, #0]
 80154de:	68b9      	ldr	r1, [r7, #8]
 80154e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80154e2:	f000 fa91 	bl	8015a08 <prvCopyDataToQueue>
 80154e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80154e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d010      	beq.n	8015512 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80154f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154f2:	3324      	adds	r3, #36	@ 0x24
 80154f4:	4618      	mov	r0, r3
 80154f6:	f001 f8a5 	bl	8016644 <xTaskRemoveFromEventList>
 80154fa:	4603      	mov	r3, r0
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d013      	beq.n	8015528 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015500:	4b3f      	ldr	r3, [pc, #252]	@ (8015600 <xQueueGenericSend+0x200>)
 8015502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015506:	601a      	str	r2, [r3, #0]
 8015508:	f3bf 8f4f 	dsb	sy
 801550c:	f3bf 8f6f 	isb	sy
 8015510:	e00a      	b.n	8015528 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015514:	2b00      	cmp	r3, #0
 8015516:	d007      	beq.n	8015528 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015518:	4b39      	ldr	r3, [pc, #228]	@ (8015600 <xQueueGenericSend+0x200>)
 801551a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801551e:	601a      	str	r2, [r3, #0]
 8015520:	f3bf 8f4f 	dsb	sy
 8015524:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015528:	f001 fff0 	bl	801750c <vPortExitCritical>
				return pdPASS;
 801552c:	2301      	movs	r3, #1
 801552e:	e063      	b.n	80155f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d103      	bne.n	801553e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015536:	f001 ffe9 	bl	801750c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801553a:	2300      	movs	r3, #0
 801553c:	e05c      	b.n	80155f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801553e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015540:	2b00      	cmp	r3, #0
 8015542:	d106      	bne.n	8015552 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015544:	f107 0314 	add.w	r3, r7, #20
 8015548:	4618      	mov	r0, r3
 801554a:	f001 f8df 	bl	801670c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801554e:	2301      	movs	r3, #1
 8015550:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015552:	f001 ffdb 	bl	801750c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015556:	f000 fe2d 	bl	80161b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801555a:	f001 ffa5 	bl	80174a8 <vPortEnterCritical>
 801555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015560:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015564:	b25b      	sxtb	r3, r3
 8015566:	f1b3 3fff 	cmp.w	r3, #4294967295
 801556a:	d103      	bne.n	8015574 <xQueueGenericSend+0x174>
 801556c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801556e:	2200      	movs	r2, #0
 8015570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015576:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801557a:	b25b      	sxtb	r3, r3
 801557c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015580:	d103      	bne.n	801558a <xQueueGenericSend+0x18a>
 8015582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015584:	2200      	movs	r2, #0
 8015586:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801558a:	f001 ffbf 	bl	801750c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801558e:	1d3a      	adds	r2, r7, #4
 8015590:	f107 0314 	add.w	r3, r7, #20
 8015594:	4611      	mov	r1, r2
 8015596:	4618      	mov	r0, r3
 8015598:	f001 f8ce 	bl	8016738 <xTaskCheckForTimeOut>
 801559c:	4603      	mov	r3, r0
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d124      	bne.n	80155ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80155a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80155a4:	f000 fb28 	bl	8015bf8 <prvIsQueueFull>
 80155a8:	4603      	mov	r3, r0
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d018      	beq.n	80155e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80155ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155b0:	3310      	adds	r3, #16
 80155b2:	687a      	ldr	r2, [r7, #4]
 80155b4:	4611      	mov	r1, r2
 80155b6:	4618      	mov	r0, r3
 80155b8:	f000 fff2 	bl	80165a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80155bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80155be:	f000 fab3 	bl	8015b28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80155c2:	f000 fe05 	bl	80161d0 <xTaskResumeAll>
 80155c6:	4603      	mov	r3, r0
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	f47f af7c 	bne.w	80154c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80155ce:	4b0c      	ldr	r3, [pc, #48]	@ (8015600 <xQueueGenericSend+0x200>)
 80155d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80155d4:	601a      	str	r2, [r3, #0]
 80155d6:	f3bf 8f4f 	dsb	sy
 80155da:	f3bf 8f6f 	isb	sy
 80155de:	e772      	b.n	80154c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80155e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80155e2:	f000 faa1 	bl	8015b28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80155e6:	f000 fdf3 	bl	80161d0 <xTaskResumeAll>
 80155ea:	e76c      	b.n	80154c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80155ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80155ee:	f000 fa9b 	bl	8015b28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80155f2:	f000 fded 	bl	80161d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80155f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80155f8:	4618      	mov	r0, r3
 80155fa:	3738      	adds	r7, #56	@ 0x38
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd80      	pop	{r7, pc}
 8015600:	e000ed04 	.word	0xe000ed04

08015604 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b090      	sub	sp, #64	@ 0x40
 8015608:	af00      	add	r7, sp, #0
 801560a:	60f8      	str	r0, [r7, #12]
 801560c:	60b9      	str	r1, [r7, #8]
 801560e:	607a      	str	r2, [r7, #4]
 8015610:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8015616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015618:	2b00      	cmp	r3, #0
 801561a:	d10b      	bne.n	8015634 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 801561c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015620:	f383 8811 	msr	BASEPRI, r3
 8015624:	f3bf 8f6f 	isb	sy
 8015628:	f3bf 8f4f 	dsb	sy
 801562c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801562e:	bf00      	nop
 8015630:	bf00      	nop
 8015632:	e7fd      	b.n	8015630 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015634:	68bb      	ldr	r3, [r7, #8]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d103      	bne.n	8015642 <xQueueGenericSendFromISR+0x3e>
 801563a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801563c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801563e:	2b00      	cmp	r3, #0
 8015640:	d101      	bne.n	8015646 <xQueueGenericSendFromISR+0x42>
 8015642:	2301      	movs	r3, #1
 8015644:	e000      	b.n	8015648 <xQueueGenericSendFromISR+0x44>
 8015646:	2300      	movs	r3, #0
 8015648:	2b00      	cmp	r3, #0
 801564a:	d10b      	bne.n	8015664 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 801564c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015650:	f383 8811 	msr	BASEPRI, r3
 8015654:	f3bf 8f6f 	isb	sy
 8015658:	f3bf 8f4f 	dsb	sy
 801565c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801565e:	bf00      	nop
 8015660:	bf00      	nop
 8015662:	e7fd      	b.n	8015660 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	2b02      	cmp	r3, #2
 8015668:	d103      	bne.n	8015672 <xQueueGenericSendFromISR+0x6e>
 801566a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801566c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801566e:	2b01      	cmp	r3, #1
 8015670:	d101      	bne.n	8015676 <xQueueGenericSendFromISR+0x72>
 8015672:	2301      	movs	r3, #1
 8015674:	e000      	b.n	8015678 <xQueueGenericSendFromISR+0x74>
 8015676:	2300      	movs	r3, #0
 8015678:	2b00      	cmp	r3, #0
 801567a:	d10b      	bne.n	8015694 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 801567c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015680:	f383 8811 	msr	BASEPRI, r3
 8015684:	f3bf 8f6f 	isb	sy
 8015688:	f3bf 8f4f 	dsb	sy
 801568c:	623b      	str	r3, [r7, #32]
}
 801568e:	bf00      	nop
 8015690:	bf00      	nop
 8015692:	e7fd      	b.n	8015690 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015694:	f001 ffe8 	bl	8017668 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015698:	f3ef 8211 	mrs	r2, BASEPRI
 801569c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156a0:	f383 8811 	msr	BASEPRI, r3
 80156a4:	f3bf 8f6f 	isb	sy
 80156a8:	f3bf 8f4f 	dsb	sy
 80156ac:	61fa      	str	r2, [r7, #28]
 80156ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80156b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80156b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80156b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80156b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80156bc:	429a      	cmp	r2, r3
 80156be:	d302      	bcc.n	80156c6 <xQueueGenericSendFromISR+0xc2>
 80156c0:	683b      	ldr	r3, [r7, #0]
 80156c2:	2b02      	cmp	r3, #2
 80156c4:	d12f      	bne.n	8015726 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80156c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80156cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80156d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80156d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80156d6:	683a      	ldr	r2, [r7, #0]
 80156d8:	68b9      	ldr	r1, [r7, #8]
 80156da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80156dc:	f000 f994 	bl	8015a08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80156e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80156e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156e8:	d112      	bne.n	8015710 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80156ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d016      	beq.n	8015720 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80156f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156f4:	3324      	adds	r3, #36	@ 0x24
 80156f6:	4618      	mov	r0, r3
 80156f8:	f000 ffa4 	bl	8016644 <xTaskRemoveFromEventList>
 80156fc:	4603      	mov	r3, r0
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d00e      	beq.n	8015720 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d00b      	beq.n	8015720 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	2201      	movs	r2, #1
 801570c:	601a      	str	r2, [r3, #0]
 801570e:	e007      	b.n	8015720 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015710:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015714:	3301      	adds	r3, #1
 8015716:	b2db      	uxtb	r3, r3
 8015718:	b25a      	sxtb	r2, r3
 801571a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801571c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8015720:	2301      	movs	r3, #1
 8015722:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8015724:	e001      	b.n	801572a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015726:	2300      	movs	r3, #0
 8015728:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801572a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801572c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801572e:	697b      	ldr	r3, [r7, #20]
 8015730:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015734:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8015738:	4618      	mov	r0, r3
 801573a:	3740      	adds	r7, #64	@ 0x40
 801573c:	46bd      	mov	sp, r7
 801573e:	bd80      	pop	{r7, pc}

08015740 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015740:	b580      	push	{r7, lr}
 8015742:	b08c      	sub	sp, #48	@ 0x30
 8015744:	af00      	add	r7, sp, #0
 8015746:	60f8      	str	r0, [r7, #12]
 8015748:	60b9      	str	r1, [r7, #8]
 801574a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801574c:	2300      	movs	r3, #0
 801574e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015756:	2b00      	cmp	r3, #0
 8015758:	d10b      	bne.n	8015772 <xQueueReceive+0x32>
	__asm volatile
 801575a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801575e:	f383 8811 	msr	BASEPRI, r3
 8015762:	f3bf 8f6f 	isb	sy
 8015766:	f3bf 8f4f 	dsb	sy
 801576a:	623b      	str	r3, [r7, #32]
}
 801576c:	bf00      	nop
 801576e:	bf00      	nop
 8015770:	e7fd      	b.n	801576e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015772:	68bb      	ldr	r3, [r7, #8]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d103      	bne.n	8015780 <xQueueReceive+0x40>
 8015778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801577a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801577c:	2b00      	cmp	r3, #0
 801577e:	d101      	bne.n	8015784 <xQueueReceive+0x44>
 8015780:	2301      	movs	r3, #1
 8015782:	e000      	b.n	8015786 <xQueueReceive+0x46>
 8015784:	2300      	movs	r3, #0
 8015786:	2b00      	cmp	r3, #0
 8015788:	d10b      	bne.n	80157a2 <xQueueReceive+0x62>
	__asm volatile
 801578a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801578e:	f383 8811 	msr	BASEPRI, r3
 8015792:	f3bf 8f6f 	isb	sy
 8015796:	f3bf 8f4f 	dsb	sy
 801579a:	61fb      	str	r3, [r7, #28]
}
 801579c:	bf00      	nop
 801579e:	bf00      	nop
 80157a0:	e7fd      	b.n	801579e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80157a2:	f001 f915 	bl	80169d0 <xTaskGetSchedulerState>
 80157a6:	4603      	mov	r3, r0
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d102      	bne.n	80157b2 <xQueueReceive+0x72>
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d101      	bne.n	80157b6 <xQueueReceive+0x76>
 80157b2:	2301      	movs	r3, #1
 80157b4:	e000      	b.n	80157b8 <xQueueReceive+0x78>
 80157b6:	2300      	movs	r3, #0
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d10b      	bne.n	80157d4 <xQueueReceive+0x94>
	__asm volatile
 80157bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157c0:	f383 8811 	msr	BASEPRI, r3
 80157c4:	f3bf 8f6f 	isb	sy
 80157c8:	f3bf 8f4f 	dsb	sy
 80157cc:	61bb      	str	r3, [r7, #24]
}
 80157ce:	bf00      	nop
 80157d0:	bf00      	nop
 80157d2:	e7fd      	b.n	80157d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80157d4:	f001 fe68 	bl	80174a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80157d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80157de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d01f      	beq.n	8015824 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80157e4:	68b9      	ldr	r1, [r7, #8]
 80157e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80157e8:	f000 f978 	bl	8015adc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80157ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157ee:	1e5a      	subs	r2, r3, #1
 80157f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80157f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157f6:	691b      	ldr	r3, [r3, #16]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d00f      	beq.n	801581c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80157fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157fe:	3310      	adds	r3, #16
 8015800:	4618      	mov	r0, r3
 8015802:	f000 ff1f 	bl	8016644 <xTaskRemoveFromEventList>
 8015806:	4603      	mov	r3, r0
 8015808:	2b00      	cmp	r3, #0
 801580a:	d007      	beq.n	801581c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801580c:	4b3c      	ldr	r3, [pc, #240]	@ (8015900 <xQueueReceive+0x1c0>)
 801580e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015812:	601a      	str	r2, [r3, #0]
 8015814:	f3bf 8f4f 	dsb	sy
 8015818:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801581c:	f001 fe76 	bl	801750c <vPortExitCritical>
				return pdPASS;
 8015820:	2301      	movs	r3, #1
 8015822:	e069      	b.n	80158f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d103      	bne.n	8015832 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801582a:	f001 fe6f 	bl	801750c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801582e:	2300      	movs	r3, #0
 8015830:	e062      	b.n	80158f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015834:	2b00      	cmp	r3, #0
 8015836:	d106      	bne.n	8015846 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015838:	f107 0310 	add.w	r3, r7, #16
 801583c:	4618      	mov	r0, r3
 801583e:	f000 ff65 	bl	801670c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015842:	2301      	movs	r3, #1
 8015844:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015846:	f001 fe61 	bl	801750c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801584a:	f000 fcb3 	bl	80161b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801584e:	f001 fe2b 	bl	80174a8 <vPortEnterCritical>
 8015852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015854:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015858:	b25b      	sxtb	r3, r3
 801585a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801585e:	d103      	bne.n	8015868 <xQueueReceive+0x128>
 8015860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015862:	2200      	movs	r2, #0
 8015864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801586a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801586e:	b25b      	sxtb	r3, r3
 8015870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015874:	d103      	bne.n	801587e <xQueueReceive+0x13e>
 8015876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015878:	2200      	movs	r2, #0
 801587a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801587e:	f001 fe45 	bl	801750c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015882:	1d3a      	adds	r2, r7, #4
 8015884:	f107 0310 	add.w	r3, r7, #16
 8015888:	4611      	mov	r1, r2
 801588a:	4618      	mov	r0, r3
 801588c:	f000 ff54 	bl	8016738 <xTaskCheckForTimeOut>
 8015890:	4603      	mov	r3, r0
 8015892:	2b00      	cmp	r3, #0
 8015894:	d123      	bne.n	80158de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015898:	f000 f998 	bl	8015bcc <prvIsQueueEmpty>
 801589c:	4603      	mov	r3, r0
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d017      	beq.n	80158d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80158a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158a4:	3324      	adds	r3, #36	@ 0x24
 80158a6:	687a      	ldr	r2, [r7, #4]
 80158a8:	4611      	mov	r1, r2
 80158aa:	4618      	mov	r0, r3
 80158ac:	f000 fe78 	bl	80165a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80158b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80158b2:	f000 f939 	bl	8015b28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80158b6:	f000 fc8b 	bl	80161d0 <xTaskResumeAll>
 80158ba:	4603      	mov	r3, r0
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d189      	bne.n	80157d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80158c0:	4b0f      	ldr	r3, [pc, #60]	@ (8015900 <xQueueReceive+0x1c0>)
 80158c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80158c6:	601a      	str	r2, [r3, #0]
 80158c8:	f3bf 8f4f 	dsb	sy
 80158cc:	f3bf 8f6f 	isb	sy
 80158d0:	e780      	b.n	80157d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80158d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80158d4:	f000 f928 	bl	8015b28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80158d8:	f000 fc7a 	bl	80161d0 <xTaskResumeAll>
 80158dc:	e77a      	b.n	80157d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80158de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80158e0:	f000 f922 	bl	8015b28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80158e4:	f000 fc74 	bl	80161d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80158e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80158ea:	f000 f96f 	bl	8015bcc <prvIsQueueEmpty>
 80158ee:	4603      	mov	r3, r0
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	f43f af6f 	beq.w	80157d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80158f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80158f8:	4618      	mov	r0, r3
 80158fa:	3730      	adds	r7, #48	@ 0x30
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}
 8015900:	e000ed04 	.word	0xe000ed04

08015904 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b08e      	sub	sp, #56	@ 0x38
 8015908:	af00      	add	r7, sp, #0
 801590a:	60f8      	str	r0, [r7, #12]
 801590c:	60b9      	str	r1, [r7, #8]
 801590e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015916:	2b00      	cmp	r3, #0
 8015918:	d10b      	bne.n	8015932 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801591a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801591e:	f383 8811 	msr	BASEPRI, r3
 8015922:	f3bf 8f6f 	isb	sy
 8015926:	f3bf 8f4f 	dsb	sy
 801592a:	623b      	str	r3, [r7, #32]
}
 801592c:	bf00      	nop
 801592e:	bf00      	nop
 8015930:	e7fd      	b.n	801592e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015932:	68bb      	ldr	r3, [r7, #8]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d103      	bne.n	8015940 <xQueueReceiveFromISR+0x3c>
 8015938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801593a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801593c:	2b00      	cmp	r3, #0
 801593e:	d101      	bne.n	8015944 <xQueueReceiveFromISR+0x40>
 8015940:	2301      	movs	r3, #1
 8015942:	e000      	b.n	8015946 <xQueueReceiveFromISR+0x42>
 8015944:	2300      	movs	r3, #0
 8015946:	2b00      	cmp	r3, #0
 8015948:	d10b      	bne.n	8015962 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801594a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801594e:	f383 8811 	msr	BASEPRI, r3
 8015952:	f3bf 8f6f 	isb	sy
 8015956:	f3bf 8f4f 	dsb	sy
 801595a:	61fb      	str	r3, [r7, #28]
}
 801595c:	bf00      	nop
 801595e:	bf00      	nop
 8015960:	e7fd      	b.n	801595e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015962:	f001 fe81 	bl	8017668 <vPortValidateInterruptPriority>
	__asm volatile
 8015966:	f3ef 8211 	mrs	r2, BASEPRI
 801596a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801596e:	f383 8811 	msr	BASEPRI, r3
 8015972:	f3bf 8f6f 	isb	sy
 8015976:	f3bf 8f4f 	dsb	sy
 801597a:	61ba      	str	r2, [r7, #24]
 801597c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801597e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015980:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015986:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801598a:	2b00      	cmp	r3, #0
 801598c:	d02f      	beq.n	80159ee <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015990:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015998:	68b9      	ldr	r1, [r7, #8]
 801599a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801599c:	f000 f89e 	bl	8015adc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80159a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159a2:	1e5a      	subs	r2, r3, #1
 80159a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80159a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80159ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159b0:	d112      	bne.n	80159d8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80159b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159b4:	691b      	ldr	r3, [r3, #16]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d016      	beq.n	80159e8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80159ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159bc:	3310      	adds	r3, #16
 80159be:	4618      	mov	r0, r3
 80159c0:	f000 fe40 	bl	8016644 <xTaskRemoveFromEventList>
 80159c4:	4603      	mov	r3, r0
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d00e      	beq.n	80159e8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d00b      	beq.n	80159e8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	2201      	movs	r2, #1
 80159d4:	601a      	str	r2, [r3, #0]
 80159d6:	e007      	b.n	80159e8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80159d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80159dc:	3301      	adds	r3, #1
 80159de:	b2db      	uxtb	r3, r3
 80159e0:	b25a      	sxtb	r2, r3
 80159e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80159e8:	2301      	movs	r3, #1
 80159ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80159ec:	e001      	b.n	80159f2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80159ee:	2300      	movs	r3, #0
 80159f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80159f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80159f6:	693b      	ldr	r3, [r7, #16]
 80159f8:	f383 8811 	msr	BASEPRI, r3
}
 80159fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80159fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015a00:	4618      	mov	r0, r3
 8015a02:	3738      	adds	r7, #56	@ 0x38
 8015a04:	46bd      	mov	sp, r7
 8015a06:	bd80      	pop	{r7, pc}

08015a08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b086      	sub	sp, #24
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	60f8      	str	r0, [r7, #12]
 8015a10:	60b9      	str	r1, [r7, #8]
 8015a12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015a14:	2300      	movs	r3, #0
 8015a16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015a1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d10d      	bne.n	8015a42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d14d      	bne.n	8015aca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	689b      	ldr	r3, [r3, #8]
 8015a32:	4618      	mov	r0, r3
 8015a34:	f000 ffea 	bl	8016a0c <xTaskPriorityDisinherit>
 8015a38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	609a      	str	r2, [r3, #8]
 8015a40:	e043      	b.n	8015aca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d119      	bne.n	8015a7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	6858      	ldr	r0, [r3, #4]
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a50:	461a      	mov	r2, r3
 8015a52:	68b9      	ldr	r1, [r7, #8]
 8015a54:	f003 f843 	bl	8018ade <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	685a      	ldr	r2, [r3, #4]
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a60:	441a      	add	r2, r3
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	685a      	ldr	r2, [r3, #4]
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	689b      	ldr	r3, [r3, #8]
 8015a6e:	429a      	cmp	r2, r3
 8015a70:	d32b      	bcc.n	8015aca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	681a      	ldr	r2, [r3, #0]
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	605a      	str	r2, [r3, #4]
 8015a7a:	e026      	b.n	8015aca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	68d8      	ldr	r0, [r3, #12]
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a84:	461a      	mov	r2, r3
 8015a86:	68b9      	ldr	r1, [r7, #8]
 8015a88:	f003 f829 	bl	8018ade <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	68da      	ldr	r2, [r3, #12]
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a94:	425b      	negs	r3, r3
 8015a96:	441a      	add	r2, r3
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	68da      	ldr	r2, [r3, #12]
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	429a      	cmp	r2, r3
 8015aa6:	d207      	bcs.n	8015ab8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	689a      	ldr	r2, [r3, #8]
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015ab0:	425b      	negs	r3, r3
 8015ab2:	441a      	add	r2, r3
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	2b02      	cmp	r3, #2
 8015abc:	d105      	bne.n	8015aca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015abe:	693b      	ldr	r3, [r7, #16]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d002      	beq.n	8015aca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015ac4:	693b      	ldr	r3, [r7, #16]
 8015ac6:	3b01      	subs	r3, #1
 8015ac8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015aca:	693b      	ldr	r3, [r7, #16]
 8015acc:	1c5a      	adds	r2, r3, #1
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8015ad2:	697b      	ldr	r3, [r7, #20]
}
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	3718      	adds	r7, #24
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	bd80      	pop	{r7, pc}

08015adc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b082      	sub	sp, #8
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
 8015ae4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d018      	beq.n	8015b20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	68da      	ldr	r2, [r3, #12]
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015af6:	441a      	add	r2, r3
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	68da      	ldr	r2, [r3, #12]
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	689b      	ldr	r3, [r3, #8]
 8015b04:	429a      	cmp	r2, r3
 8015b06:	d303      	bcc.n	8015b10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681a      	ldr	r2, [r3, #0]
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	68d9      	ldr	r1, [r3, #12]
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015b18:	461a      	mov	r2, r3
 8015b1a:	6838      	ldr	r0, [r7, #0]
 8015b1c:	f002 ffdf 	bl	8018ade <memcpy>
	}
}
 8015b20:	bf00      	nop
 8015b22:	3708      	adds	r7, #8
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}

08015b28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b084      	sub	sp, #16
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015b30:	f001 fcba 	bl	80174a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015b3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015b3c:	e011      	b.n	8015b62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d012      	beq.n	8015b6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	3324      	adds	r3, #36	@ 0x24
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f000 fd7a 	bl	8016644 <xTaskRemoveFromEventList>
 8015b50:	4603      	mov	r3, r0
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d001      	beq.n	8015b5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015b56:	f000 fe53 	bl	8016800 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015b5a:	7bfb      	ldrb	r3, [r7, #15]
 8015b5c:	3b01      	subs	r3, #1
 8015b5e:	b2db      	uxtb	r3, r3
 8015b60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	dce9      	bgt.n	8015b3e <prvUnlockQueue+0x16>
 8015b6a:	e000      	b.n	8015b6e <prvUnlockQueue+0x46>
					break;
 8015b6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	22ff      	movs	r2, #255	@ 0xff
 8015b72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8015b76:	f001 fcc9 	bl	801750c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015b7a:	f001 fc95 	bl	80174a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015b84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015b86:	e011      	b.n	8015bac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	691b      	ldr	r3, [r3, #16]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d012      	beq.n	8015bb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	3310      	adds	r3, #16
 8015b94:	4618      	mov	r0, r3
 8015b96:	f000 fd55 	bl	8016644 <xTaskRemoveFromEventList>
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d001      	beq.n	8015ba4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015ba0:	f000 fe2e 	bl	8016800 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015ba4:	7bbb      	ldrb	r3, [r7, #14]
 8015ba6:	3b01      	subs	r3, #1
 8015ba8:	b2db      	uxtb	r3, r3
 8015baa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	dce9      	bgt.n	8015b88 <prvUnlockQueue+0x60>
 8015bb4:	e000      	b.n	8015bb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015bb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	22ff      	movs	r2, #255	@ 0xff
 8015bbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015bc0:	f001 fca4 	bl	801750c <vPortExitCritical>
}
 8015bc4:	bf00      	nop
 8015bc6:	3710      	adds	r7, #16
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	bd80      	pop	{r7, pc}

08015bcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b084      	sub	sp, #16
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015bd4:	f001 fc68 	bl	80174a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d102      	bne.n	8015be6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015be0:	2301      	movs	r3, #1
 8015be2:	60fb      	str	r3, [r7, #12]
 8015be4:	e001      	b.n	8015bea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015be6:	2300      	movs	r3, #0
 8015be8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015bea:	f001 fc8f 	bl	801750c <vPortExitCritical>

	return xReturn;
 8015bee:	68fb      	ldr	r3, [r7, #12]
}
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	3710      	adds	r7, #16
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	bd80      	pop	{r7, pc}

08015bf8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b084      	sub	sp, #16
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015c00:	f001 fc52 	bl	80174a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015c0c:	429a      	cmp	r2, r3
 8015c0e:	d102      	bne.n	8015c16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015c10:	2301      	movs	r3, #1
 8015c12:	60fb      	str	r3, [r7, #12]
 8015c14:	e001      	b.n	8015c1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015c16:	2300      	movs	r3, #0
 8015c18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015c1a:	f001 fc77 	bl	801750c <vPortExitCritical>

	return xReturn;
 8015c1e:	68fb      	ldr	r3, [r7, #12]
}
 8015c20:	4618      	mov	r0, r3
 8015c22:	3710      	adds	r7, #16
 8015c24:	46bd      	mov	sp, r7
 8015c26:	bd80      	pop	{r7, pc}

08015c28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015c28:	b480      	push	{r7}
 8015c2a:	b085      	sub	sp, #20
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
 8015c30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015c32:	2300      	movs	r3, #0
 8015c34:	60fb      	str	r3, [r7, #12]
 8015c36:	e014      	b.n	8015c62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015c38:	4a0f      	ldr	r2, [pc, #60]	@ (8015c78 <vQueueAddToRegistry+0x50>)
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d10b      	bne.n	8015c5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015c44:	490c      	ldr	r1, [pc, #48]	@ (8015c78 <vQueueAddToRegistry+0x50>)
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	683a      	ldr	r2, [r7, #0]
 8015c4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8015c78 <vQueueAddToRegistry+0x50>)
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	00db      	lsls	r3, r3, #3
 8015c54:	4413      	add	r3, r2
 8015c56:	687a      	ldr	r2, [r7, #4]
 8015c58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8015c5a:	e006      	b.n	8015c6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	3301      	adds	r3, #1
 8015c60:	60fb      	str	r3, [r7, #12]
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	2b07      	cmp	r3, #7
 8015c66:	d9e7      	bls.n	8015c38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015c68:	bf00      	nop
 8015c6a:	bf00      	nop
 8015c6c:	3714      	adds	r7, #20
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c74:	4770      	bx	lr
 8015c76:	bf00      	nop
 8015c78:	24002098 	.word	0x24002098

08015c7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b086      	sub	sp, #24
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	60f8      	str	r0, [r7, #12]
 8015c84:	60b9      	str	r1, [r7, #8]
 8015c86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015c8c:	f001 fc0c 	bl	80174a8 <vPortEnterCritical>
 8015c90:	697b      	ldr	r3, [r7, #20]
 8015c92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015c96:	b25b      	sxtb	r3, r3
 8015c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c9c:	d103      	bne.n	8015ca6 <vQueueWaitForMessageRestricted+0x2a>
 8015c9e:	697b      	ldr	r3, [r7, #20]
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015ca6:	697b      	ldr	r3, [r7, #20]
 8015ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015cac:	b25b      	sxtb	r3, r3
 8015cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cb2:	d103      	bne.n	8015cbc <vQueueWaitForMessageRestricted+0x40>
 8015cb4:	697b      	ldr	r3, [r7, #20]
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015cbc:	f001 fc26 	bl	801750c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015cc0:	697b      	ldr	r3, [r7, #20]
 8015cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d106      	bne.n	8015cd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015cc8:	697b      	ldr	r3, [r7, #20]
 8015cca:	3324      	adds	r3, #36	@ 0x24
 8015ccc:	687a      	ldr	r2, [r7, #4]
 8015cce:	68b9      	ldr	r1, [r7, #8]
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	f000 fc8b 	bl	80165ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8015cd6:	6978      	ldr	r0, [r7, #20]
 8015cd8:	f7ff ff26 	bl	8015b28 <prvUnlockQueue>
	}
 8015cdc:	bf00      	nop
 8015cde:	3718      	adds	r7, #24
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	bd80      	pop	{r7, pc}

08015ce4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b08e      	sub	sp, #56	@ 0x38
 8015ce8:	af04      	add	r7, sp, #16
 8015cea:	60f8      	str	r0, [r7, #12]
 8015cec:	60b9      	str	r1, [r7, #8]
 8015cee:	607a      	str	r2, [r7, #4]
 8015cf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d10b      	bne.n	8015d10 <xTaskCreateStatic+0x2c>
	__asm volatile
 8015cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cfc:	f383 8811 	msr	BASEPRI, r3
 8015d00:	f3bf 8f6f 	isb	sy
 8015d04:	f3bf 8f4f 	dsb	sy
 8015d08:	623b      	str	r3, [r7, #32]
}
 8015d0a:	bf00      	nop
 8015d0c:	bf00      	nop
 8015d0e:	e7fd      	b.n	8015d0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d10b      	bne.n	8015d2e <xTaskCreateStatic+0x4a>
	__asm volatile
 8015d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d1a:	f383 8811 	msr	BASEPRI, r3
 8015d1e:	f3bf 8f6f 	isb	sy
 8015d22:	f3bf 8f4f 	dsb	sy
 8015d26:	61fb      	str	r3, [r7, #28]
}
 8015d28:	bf00      	nop
 8015d2a:	bf00      	nop
 8015d2c:	e7fd      	b.n	8015d2a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015d2e:	23ac      	movs	r3, #172	@ 0xac
 8015d30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015d32:	693b      	ldr	r3, [r7, #16]
 8015d34:	2bac      	cmp	r3, #172	@ 0xac
 8015d36:	d00b      	beq.n	8015d50 <xTaskCreateStatic+0x6c>
	__asm volatile
 8015d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d3c:	f383 8811 	msr	BASEPRI, r3
 8015d40:	f3bf 8f6f 	isb	sy
 8015d44:	f3bf 8f4f 	dsb	sy
 8015d48:	61bb      	str	r3, [r7, #24]
}
 8015d4a:	bf00      	nop
 8015d4c:	bf00      	nop
 8015d4e:	e7fd      	b.n	8015d4c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015d50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d01e      	beq.n	8015d96 <xTaskCreateStatic+0xb2>
 8015d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d01b      	beq.n	8015d96 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d60:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015d66:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d6a:	2202      	movs	r2, #2
 8015d6c:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015d70:	2300      	movs	r3, #0
 8015d72:	9303      	str	r3, [sp, #12]
 8015d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d76:	9302      	str	r3, [sp, #8]
 8015d78:	f107 0314 	add.w	r3, r7, #20
 8015d7c:	9301      	str	r3, [sp, #4]
 8015d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d80:	9300      	str	r3, [sp, #0]
 8015d82:	683b      	ldr	r3, [r7, #0]
 8015d84:	687a      	ldr	r2, [r7, #4]
 8015d86:	68b9      	ldr	r1, [r7, #8]
 8015d88:	68f8      	ldr	r0, [r7, #12]
 8015d8a:	f000 f851 	bl	8015e30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015d8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015d90:	f000 f8f8 	bl	8015f84 <prvAddNewTaskToReadyList>
 8015d94:	e001      	b.n	8015d9a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8015d96:	2300      	movs	r3, #0
 8015d98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015d9a:	697b      	ldr	r3, [r7, #20]
	}
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	3728      	adds	r7, #40	@ 0x28
 8015da0:	46bd      	mov	sp, r7
 8015da2:	bd80      	pop	{r7, pc}

08015da4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b08c      	sub	sp, #48	@ 0x30
 8015da8:	af04      	add	r7, sp, #16
 8015daa:	60f8      	str	r0, [r7, #12]
 8015dac:	60b9      	str	r1, [r7, #8]
 8015dae:	603b      	str	r3, [r7, #0]
 8015db0:	4613      	mov	r3, r2
 8015db2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015db4:	88fb      	ldrh	r3, [r7, #6]
 8015db6:	009b      	lsls	r3, r3, #2
 8015db8:	4618      	mov	r0, r3
 8015dba:	f001 fc97 	bl	80176ec <pvPortMalloc>
 8015dbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015dc0:	697b      	ldr	r3, [r7, #20]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d00e      	beq.n	8015de4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015dc6:	20ac      	movs	r0, #172	@ 0xac
 8015dc8:	f001 fc90 	bl	80176ec <pvPortMalloc>
 8015dcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015dce:	69fb      	ldr	r3, [r7, #28]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d003      	beq.n	8015ddc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015dd4:	69fb      	ldr	r3, [r7, #28]
 8015dd6:	697a      	ldr	r2, [r7, #20]
 8015dd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8015dda:	e005      	b.n	8015de8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015ddc:	6978      	ldr	r0, [r7, #20]
 8015dde:	f001 fd53 	bl	8017888 <vPortFree>
 8015de2:	e001      	b.n	8015de8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015de4:	2300      	movs	r3, #0
 8015de6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015de8:	69fb      	ldr	r3, [r7, #28]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d017      	beq.n	8015e1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015dee:	69fb      	ldr	r3, [r7, #28]
 8015df0:	2200      	movs	r2, #0
 8015df2:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015df6:	88fa      	ldrh	r2, [r7, #6]
 8015df8:	2300      	movs	r3, #0
 8015dfa:	9303      	str	r3, [sp, #12]
 8015dfc:	69fb      	ldr	r3, [r7, #28]
 8015dfe:	9302      	str	r3, [sp, #8]
 8015e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e02:	9301      	str	r3, [sp, #4]
 8015e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e06:	9300      	str	r3, [sp, #0]
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	68b9      	ldr	r1, [r7, #8]
 8015e0c:	68f8      	ldr	r0, [r7, #12]
 8015e0e:	f000 f80f 	bl	8015e30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015e12:	69f8      	ldr	r0, [r7, #28]
 8015e14:	f000 f8b6 	bl	8015f84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015e18:	2301      	movs	r3, #1
 8015e1a:	61bb      	str	r3, [r7, #24]
 8015e1c:	e002      	b.n	8015e24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8015e22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015e24:	69bb      	ldr	r3, [r7, #24]
	}
 8015e26:	4618      	mov	r0, r3
 8015e28:	3720      	adds	r7, #32
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	bd80      	pop	{r7, pc}
	...

08015e30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b088      	sub	sp, #32
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	60f8      	str	r0, [r7, #12]
 8015e38:	60b9      	str	r1, [r7, #8]
 8015e3a:	607a      	str	r2, [r7, #4]
 8015e3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e40:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	009b      	lsls	r3, r3, #2
 8015e46:	461a      	mov	r2, r3
 8015e48:	21a5      	movs	r1, #165	@ 0xa5
 8015e4a:	f002 fd76 	bl	801893a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015e52:	6879      	ldr	r1, [r7, #4]
 8015e54:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015e58:	440b      	add	r3, r1
 8015e5a:	009b      	lsls	r3, r3, #2
 8015e5c:	4413      	add	r3, r2
 8015e5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015e60:	69bb      	ldr	r3, [r7, #24]
 8015e62:	f023 0307 	bic.w	r3, r3, #7
 8015e66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015e68:	69bb      	ldr	r3, [r7, #24]
 8015e6a:	f003 0307 	and.w	r3, r3, #7
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d00b      	beq.n	8015e8a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8015e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e76:	f383 8811 	msr	BASEPRI, r3
 8015e7a:	f3bf 8f6f 	isb	sy
 8015e7e:	f3bf 8f4f 	dsb	sy
 8015e82:	617b      	str	r3, [r7, #20]
}
 8015e84:	bf00      	nop
 8015e86:	bf00      	nop
 8015e88:	e7fd      	b.n	8015e86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015e8a:	68bb      	ldr	r3, [r7, #8]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d01f      	beq.n	8015ed0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015e90:	2300      	movs	r3, #0
 8015e92:	61fb      	str	r3, [r7, #28]
 8015e94:	e012      	b.n	8015ebc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015e96:	68ba      	ldr	r2, [r7, #8]
 8015e98:	69fb      	ldr	r3, [r7, #28]
 8015e9a:	4413      	add	r3, r2
 8015e9c:	7819      	ldrb	r1, [r3, #0]
 8015e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015ea0:	69fb      	ldr	r3, [r7, #28]
 8015ea2:	4413      	add	r3, r2
 8015ea4:	3334      	adds	r3, #52	@ 0x34
 8015ea6:	460a      	mov	r2, r1
 8015ea8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015eaa:	68ba      	ldr	r2, [r7, #8]
 8015eac:	69fb      	ldr	r3, [r7, #28]
 8015eae:	4413      	add	r3, r2
 8015eb0:	781b      	ldrb	r3, [r3, #0]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d006      	beq.n	8015ec4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015eb6:	69fb      	ldr	r3, [r7, #28]
 8015eb8:	3301      	adds	r3, #1
 8015eba:	61fb      	str	r3, [r7, #28]
 8015ebc:	69fb      	ldr	r3, [r7, #28]
 8015ebe:	2b0f      	cmp	r3, #15
 8015ec0:	d9e9      	bls.n	8015e96 <prvInitialiseNewTask+0x66>
 8015ec2:	e000      	b.n	8015ec6 <prvInitialiseNewTask+0x96>
			{
				break;
 8015ec4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ec8:	2200      	movs	r2, #0
 8015eca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015ece:	e003      	b.n	8015ed8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eda:	2b37      	cmp	r3, #55	@ 0x37
 8015edc:	d901      	bls.n	8015ee2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015ede:	2337      	movs	r3, #55	@ 0x37
 8015ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ee4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015eea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015eec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8015eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ef0:	2200      	movs	r2, #0
 8015ef2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ef6:	3304      	adds	r3, #4
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f7ff f8a7 	bl	801504c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f00:	3318      	adds	r3, #24
 8015f02:	4618      	mov	r0, r3
 8015f04:	f7ff f8a2 	bl	801504c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015f0c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f10:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f16:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015f1c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8015f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f20:	2200      	movs	r2, #0
 8015f22:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f26:	2200      	movs	r2, #0
 8015f28:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f2e:	2200      	movs	r2, #0
 8015f30:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f36:	3358      	adds	r3, #88	@ 0x58
 8015f38:	224c      	movs	r2, #76	@ 0x4c
 8015f3a:	2100      	movs	r1, #0
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	f002 fcfc 	bl	801893a <memset>
 8015f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f44:	4a0c      	ldr	r2, [pc, #48]	@ (8015f78 <prvInitialiseNewTask+0x148>)
 8015f46:	65da      	str	r2, [r3, #92]	@ 0x5c
 8015f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8015f7c <prvInitialiseNewTask+0x14c>)
 8015f4c:	661a      	str	r2, [r3, #96]	@ 0x60
 8015f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f50:	4a0b      	ldr	r2, [pc, #44]	@ (8015f80 <prvInitialiseNewTask+0x150>)
 8015f52:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015f54:	683a      	ldr	r2, [r7, #0]
 8015f56:	68f9      	ldr	r1, [r7, #12]
 8015f58:	69b8      	ldr	r0, [r7, #24]
 8015f5a:	f001 f975 	bl	8017248 <pxPortInitialiseStack>
 8015f5e:	4602      	mov	r2, r0
 8015f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f62:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d002      	beq.n	8015f70 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015f6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015f70:	bf00      	nop
 8015f72:	3720      	adds	r7, #32
 8015f74:	46bd      	mov	sp, r7
 8015f76:	bd80      	pop	{r7, pc}
 8015f78:	24028e6c 	.word	0x24028e6c
 8015f7c:	24028ed4 	.word	0x24028ed4
 8015f80:	24028f3c 	.word	0x24028f3c

08015f84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b082      	sub	sp, #8
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015f8c:	f001 fa8c 	bl	80174a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015f90:	4b2d      	ldr	r3, [pc, #180]	@ (8016048 <prvAddNewTaskToReadyList+0xc4>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	3301      	adds	r3, #1
 8015f96:	4a2c      	ldr	r2, [pc, #176]	@ (8016048 <prvAddNewTaskToReadyList+0xc4>)
 8015f98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015f9a:	4b2c      	ldr	r3, [pc, #176]	@ (801604c <prvAddNewTaskToReadyList+0xc8>)
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d109      	bne.n	8015fb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015fa2:	4a2a      	ldr	r2, [pc, #168]	@ (801604c <prvAddNewTaskToReadyList+0xc8>)
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015fa8:	4b27      	ldr	r3, [pc, #156]	@ (8016048 <prvAddNewTaskToReadyList+0xc4>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	2b01      	cmp	r3, #1
 8015fae:	d110      	bne.n	8015fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015fb0:	f000 fc4a 	bl	8016848 <prvInitialiseTaskLists>
 8015fb4:	e00d      	b.n	8015fd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015fb6:	4b26      	ldr	r3, [pc, #152]	@ (8016050 <prvAddNewTaskToReadyList+0xcc>)
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d109      	bne.n	8015fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015fbe:	4b23      	ldr	r3, [pc, #140]	@ (801604c <prvAddNewTaskToReadyList+0xc8>)
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fc8:	429a      	cmp	r2, r3
 8015fca:	d802      	bhi.n	8015fd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015fcc:	4a1f      	ldr	r2, [pc, #124]	@ (801604c <prvAddNewTaskToReadyList+0xc8>)
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015fd2:	4b20      	ldr	r3, [pc, #128]	@ (8016054 <prvAddNewTaskToReadyList+0xd0>)
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	3301      	adds	r3, #1
 8015fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8016054 <prvAddNewTaskToReadyList+0xd0>)
 8015fda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8016054 <prvAddNewTaskToReadyList+0xd0>)
 8015fde:	681a      	ldr	r2, [r3, #0]
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8016058 <prvAddNewTaskToReadyList+0xd4>)
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	429a      	cmp	r2, r3
 8015fee:	d903      	bls.n	8015ff8 <prvAddNewTaskToReadyList+0x74>
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ff4:	4a18      	ldr	r2, [pc, #96]	@ (8016058 <prvAddNewTaskToReadyList+0xd4>)
 8015ff6:	6013      	str	r3, [r2, #0]
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ffc:	4613      	mov	r3, r2
 8015ffe:	009b      	lsls	r3, r3, #2
 8016000:	4413      	add	r3, r2
 8016002:	009b      	lsls	r3, r3, #2
 8016004:	4a15      	ldr	r2, [pc, #84]	@ (801605c <prvAddNewTaskToReadyList+0xd8>)
 8016006:	441a      	add	r2, r3
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	3304      	adds	r3, #4
 801600c:	4619      	mov	r1, r3
 801600e:	4610      	mov	r0, r2
 8016010:	f7ff f829 	bl	8015066 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016014:	f001 fa7a 	bl	801750c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016018:	4b0d      	ldr	r3, [pc, #52]	@ (8016050 <prvAddNewTaskToReadyList+0xcc>)
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d00e      	beq.n	801603e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016020:	4b0a      	ldr	r3, [pc, #40]	@ (801604c <prvAddNewTaskToReadyList+0xc8>)
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801602a:	429a      	cmp	r2, r3
 801602c:	d207      	bcs.n	801603e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801602e:	4b0c      	ldr	r3, [pc, #48]	@ (8016060 <prvAddNewTaskToReadyList+0xdc>)
 8016030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016034:	601a      	str	r2, [r3, #0]
 8016036:	f3bf 8f4f 	dsb	sy
 801603a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801603e:	bf00      	nop
 8016040:	3708      	adds	r7, #8
 8016042:	46bd      	mov	sp, r7
 8016044:	bd80      	pop	{r7, pc}
 8016046:	bf00      	nop
 8016048:	240025ac 	.word	0x240025ac
 801604c:	240020d8 	.word	0x240020d8
 8016050:	240025b8 	.word	0x240025b8
 8016054:	240025c8 	.word	0x240025c8
 8016058:	240025b4 	.word	0x240025b4
 801605c:	240020dc 	.word	0x240020dc
 8016060:	e000ed04 	.word	0xe000ed04

08016064 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016064:	b580      	push	{r7, lr}
 8016066:	b084      	sub	sp, #16
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801606c:	2300      	movs	r3, #0
 801606e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d018      	beq.n	80160a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016076:	4b14      	ldr	r3, [pc, #80]	@ (80160c8 <vTaskDelay+0x64>)
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d00b      	beq.n	8016096 <vTaskDelay+0x32>
	__asm volatile
 801607e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016082:	f383 8811 	msr	BASEPRI, r3
 8016086:	f3bf 8f6f 	isb	sy
 801608a:	f3bf 8f4f 	dsb	sy
 801608e:	60bb      	str	r3, [r7, #8]
}
 8016090:	bf00      	nop
 8016092:	bf00      	nop
 8016094:	e7fd      	b.n	8016092 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016096:	f000 f88d 	bl	80161b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801609a:	2100      	movs	r1, #0
 801609c:	6878      	ldr	r0, [r7, #4]
 801609e:	f000 fd25 	bl	8016aec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80160a2:	f000 f895 	bl	80161d0 <xTaskResumeAll>
 80160a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d107      	bne.n	80160be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80160ae:	4b07      	ldr	r3, [pc, #28]	@ (80160cc <vTaskDelay+0x68>)
 80160b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80160b4:	601a      	str	r2, [r3, #0]
 80160b6:	f3bf 8f4f 	dsb	sy
 80160ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80160be:	bf00      	nop
 80160c0:	3710      	adds	r7, #16
 80160c2:	46bd      	mov	sp, r7
 80160c4:	bd80      	pop	{r7, pc}
 80160c6:	bf00      	nop
 80160c8:	240025d4 	.word	0x240025d4
 80160cc:	e000ed04 	.word	0xe000ed04

080160d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b08a      	sub	sp, #40	@ 0x28
 80160d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80160d6:	2300      	movs	r3, #0
 80160d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80160da:	2300      	movs	r3, #0
 80160dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80160de:	463a      	mov	r2, r7
 80160e0:	1d39      	adds	r1, r7, #4
 80160e2:	f107 0308 	add.w	r3, r7, #8
 80160e6:	4618      	mov	r0, r3
 80160e8:	f7fe ff5c 	bl	8014fa4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80160ec:	6839      	ldr	r1, [r7, #0]
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	68ba      	ldr	r2, [r7, #8]
 80160f2:	9202      	str	r2, [sp, #8]
 80160f4:	9301      	str	r3, [sp, #4]
 80160f6:	2300      	movs	r3, #0
 80160f8:	9300      	str	r3, [sp, #0]
 80160fa:	2300      	movs	r3, #0
 80160fc:	460a      	mov	r2, r1
 80160fe:	4925      	ldr	r1, [pc, #148]	@ (8016194 <vTaskStartScheduler+0xc4>)
 8016100:	4825      	ldr	r0, [pc, #148]	@ (8016198 <vTaskStartScheduler+0xc8>)
 8016102:	f7ff fdef 	bl	8015ce4 <xTaskCreateStatic>
 8016106:	4603      	mov	r3, r0
 8016108:	4a24      	ldr	r2, [pc, #144]	@ (801619c <vTaskStartScheduler+0xcc>)
 801610a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801610c:	4b23      	ldr	r3, [pc, #140]	@ (801619c <vTaskStartScheduler+0xcc>)
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d002      	beq.n	801611a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016114:	2301      	movs	r3, #1
 8016116:	617b      	str	r3, [r7, #20]
 8016118:	e001      	b.n	801611e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801611a:	2300      	movs	r3, #0
 801611c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801611e:	697b      	ldr	r3, [r7, #20]
 8016120:	2b01      	cmp	r3, #1
 8016122:	d102      	bne.n	801612a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016124:	f000 fd36 	bl	8016b94 <xTimerCreateTimerTask>
 8016128:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801612a:	697b      	ldr	r3, [r7, #20]
 801612c:	2b01      	cmp	r3, #1
 801612e:	d11d      	bne.n	801616c <vTaskStartScheduler+0x9c>
	__asm volatile
 8016130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016134:	f383 8811 	msr	BASEPRI, r3
 8016138:	f3bf 8f6f 	isb	sy
 801613c:	f3bf 8f4f 	dsb	sy
 8016140:	613b      	str	r3, [r7, #16]
}
 8016142:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016144:	4b16      	ldr	r3, [pc, #88]	@ (80161a0 <vTaskStartScheduler+0xd0>)
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	3358      	adds	r3, #88	@ 0x58
 801614a:	4a16      	ldr	r2, [pc, #88]	@ (80161a4 <vTaskStartScheduler+0xd4>)
 801614c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801614e:	4b16      	ldr	r3, [pc, #88]	@ (80161a8 <vTaskStartScheduler+0xd8>)
 8016150:	f04f 32ff 	mov.w	r2, #4294967295
 8016154:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016156:	4b15      	ldr	r3, [pc, #84]	@ (80161ac <vTaskStartScheduler+0xdc>)
 8016158:	2201      	movs	r2, #1
 801615a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801615c:	4b14      	ldr	r3, [pc, #80]	@ (80161b0 <vTaskStartScheduler+0xe0>)
 801615e:	2200      	movs	r2, #0
 8016160:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8016162:	f7eb facb 	bl	80016fc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016166:	f001 f8fb 	bl	8017360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801616a:	e00f      	b.n	801618c <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801616c:	697b      	ldr	r3, [r7, #20]
 801616e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016172:	d10b      	bne.n	801618c <vTaskStartScheduler+0xbc>
	__asm volatile
 8016174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016178:	f383 8811 	msr	BASEPRI, r3
 801617c:	f3bf 8f6f 	isb	sy
 8016180:	f3bf 8f4f 	dsb	sy
 8016184:	60fb      	str	r3, [r7, #12]
}
 8016186:	bf00      	nop
 8016188:	bf00      	nop
 801618a:	e7fd      	b.n	8016188 <vTaskStartScheduler+0xb8>
}
 801618c:	bf00      	nop
 801618e:	3718      	adds	r7, #24
 8016190:	46bd      	mov	sp, r7
 8016192:	bd80      	pop	{r7, pc}
 8016194:	08019f18 	.word	0x08019f18
 8016198:	08016819 	.word	0x08016819
 801619c:	240025d0 	.word	0x240025d0
 80161a0:	240020d8 	.word	0x240020d8
 80161a4:	240001d0 	.word	0x240001d0
 80161a8:	240025cc 	.word	0x240025cc
 80161ac:	240025b8 	.word	0x240025b8
 80161b0:	240025b0 	.word	0x240025b0

080161b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80161b4:	b480      	push	{r7}
 80161b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80161b8:	4b04      	ldr	r3, [pc, #16]	@ (80161cc <vTaskSuspendAll+0x18>)
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	3301      	adds	r3, #1
 80161be:	4a03      	ldr	r2, [pc, #12]	@ (80161cc <vTaskSuspendAll+0x18>)
 80161c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80161c2:	bf00      	nop
 80161c4:	46bd      	mov	sp, r7
 80161c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ca:	4770      	bx	lr
 80161cc:	240025d4 	.word	0x240025d4

080161d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80161d0:	b580      	push	{r7, lr}
 80161d2:	b084      	sub	sp, #16
 80161d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80161d6:	2300      	movs	r3, #0
 80161d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80161da:	2300      	movs	r3, #0
 80161dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80161de:	4b42      	ldr	r3, [pc, #264]	@ (80162e8 <xTaskResumeAll+0x118>)
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d10b      	bne.n	80161fe <xTaskResumeAll+0x2e>
	__asm volatile
 80161e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161ea:	f383 8811 	msr	BASEPRI, r3
 80161ee:	f3bf 8f6f 	isb	sy
 80161f2:	f3bf 8f4f 	dsb	sy
 80161f6:	603b      	str	r3, [r7, #0]
}
 80161f8:	bf00      	nop
 80161fa:	bf00      	nop
 80161fc:	e7fd      	b.n	80161fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80161fe:	f001 f953 	bl	80174a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016202:	4b39      	ldr	r3, [pc, #228]	@ (80162e8 <xTaskResumeAll+0x118>)
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	3b01      	subs	r3, #1
 8016208:	4a37      	ldr	r2, [pc, #220]	@ (80162e8 <xTaskResumeAll+0x118>)
 801620a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801620c:	4b36      	ldr	r3, [pc, #216]	@ (80162e8 <xTaskResumeAll+0x118>)
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d162      	bne.n	80162da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016214:	4b35      	ldr	r3, [pc, #212]	@ (80162ec <xTaskResumeAll+0x11c>)
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d05e      	beq.n	80162da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801621c:	e02f      	b.n	801627e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801621e:	4b34      	ldr	r3, [pc, #208]	@ (80162f0 <xTaskResumeAll+0x120>)
 8016220:	68db      	ldr	r3, [r3, #12]
 8016222:	68db      	ldr	r3, [r3, #12]
 8016224:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	3318      	adds	r3, #24
 801622a:	4618      	mov	r0, r3
 801622c:	f7fe ff78 	bl	8015120 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	3304      	adds	r3, #4
 8016234:	4618      	mov	r0, r3
 8016236:	f7fe ff73 	bl	8015120 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801623e:	4b2d      	ldr	r3, [pc, #180]	@ (80162f4 <xTaskResumeAll+0x124>)
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	429a      	cmp	r2, r3
 8016244:	d903      	bls.n	801624e <xTaskResumeAll+0x7e>
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801624a:	4a2a      	ldr	r2, [pc, #168]	@ (80162f4 <xTaskResumeAll+0x124>)
 801624c:	6013      	str	r3, [r2, #0]
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016252:	4613      	mov	r3, r2
 8016254:	009b      	lsls	r3, r3, #2
 8016256:	4413      	add	r3, r2
 8016258:	009b      	lsls	r3, r3, #2
 801625a:	4a27      	ldr	r2, [pc, #156]	@ (80162f8 <xTaskResumeAll+0x128>)
 801625c:	441a      	add	r2, r3
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	3304      	adds	r3, #4
 8016262:	4619      	mov	r1, r3
 8016264:	4610      	mov	r0, r2
 8016266:	f7fe fefe 	bl	8015066 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801626e:	4b23      	ldr	r3, [pc, #140]	@ (80162fc <xTaskResumeAll+0x12c>)
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016274:	429a      	cmp	r2, r3
 8016276:	d302      	bcc.n	801627e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8016278:	4b21      	ldr	r3, [pc, #132]	@ (8016300 <xTaskResumeAll+0x130>)
 801627a:	2201      	movs	r2, #1
 801627c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801627e:	4b1c      	ldr	r3, [pc, #112]	@ (80162f0 <xTaskResumeAll+0x120>)
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d1cb      	bne.n	801621e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d001      	beq.n	8016290 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801628c:	f000 fb80 	bl	8016990 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016290:	4b1c      	ldr	r3, [pc, #112]	@ (8016304 <xTaskResumeAll+0x134>)
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d010      	beq.n	80162be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801629c:	f000 f846 	bl	801632c <xTaskIncrementTick>
 80162a0:	4603      	mov	r3, r0
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d002      	beq.n	80162ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80162a6:	4b16      	ldr	r3, [pc, #88]	@ (8016300 <xTaskResumeAll+0x130>)
 80162a8:	2201      	movs	r2, #1
 80162aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	3b01      	subs	r3, #1
 80162b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d1f1      	bne.n	801629c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80162b8:	4b12      	ldr	r3, [pc, #72]	@ (8016304 <xTaskResumeAll+0x134>)
 80162ba:	2200      	movs	r2, #0
 80162bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80162be:	4b10      	ldr	r3, [pc, #64]	@ (8016300 <xTaskResumeAll+0x130>)
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d009      	beq.n	80162da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80162c6:	2301      	movs	r3, #1
 80162c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80162ca:	4b0f      	ldr	r3, [pc, #60]	@ (8016308 <xTaskResumeAll+0x138>)
 80162cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80162d0:	601a      	str	r2, [r3, #0]
 80162d2:	f3bf 8f4f 	dsb	sy
 80162d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80162da:	f001 f917 	bl	801750c <vPortExitCritical>

	return xAlreadyYielded;
 80162de:	68bb      	ldr	r3, [r7, #8]
}
 80162e0:	4618      	mov	r0, r3
 80162e2:	3710      	adds	r7, #16
 80162e4:	46bd      	mov	sp, r7
 80162e6:	bd80      	pop	{r7, pc}
 80162e8:	240025d4 	.word	0x240025d4
 80162ec:	240025ac 	.word	0x240025ac
 80162f0:	2400256c 	.word	0x2400256c
 80162f4:	240025b4 	.word	0x240025b4
 80162f8:	240020dc 	.word	0x240020dc
 80162fc:	240020d8 	.word	0x240020d8
 8016300:	240025c0 	.word	0x240025c0
 8016304:	240025bc 	.word	0x240025bc
 8016308:	e000ed04 	.word	0xe000ed04

0801630c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801630c:	b480      	push	{r7}
 801630e:	b083      	sub	sp, #12
 8016310:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016312:	4b05      	ldr	r3, [pc, #20]	@ (8016328 <xTaskGetTickCount+0x1c>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016318:	687b      	ldr	r3, [r7, #4]
}
 801631a:	4618      	mov	r0, r3
 801631c:	370c      	adds	r7, #12
 801631e:	46bd      	mov	sp, r7
 8016320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016324:	4770      	bx	lr
 8016326:	bf00      	nop
 8016328:	240025b0 	.word	0x240025b0

0801632c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801632c:	b580      	push	{r7, lr}
 801632e:	b086      	sub	sp, #24
 8016330:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016332:	2300      	movs	r3, #0
 8016334:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016336:	4b4f      	ldr	r3, [pc, #316]	@ (8016474 <xTaskIncrementTick+0x148>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	2b00      	cmp	r3, #0
 801633c:	f040 8090 	bne.w	8016460 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016340:	4b4d      	ldr	r3, [pc, #308]	@ (8016478 <xTaskIncrementTick+0x14c>)
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	3301      	adds	r3, #1
 8016346:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016348:	4a4b      	ldr	r2, [pc, #300]	@ (8016478 <xTaskIncrementTick+0x14c>)
 801634a:	693b      	ldr	r3, [r7, #16]
 801634c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801634e:	693b      	ldr	r3, [r7, #16]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d121      	bne.n	8016398 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8016354:	4b49      	ldr	r3, [pc, #292]	@ (801647c <xTaskIncrementTick+0x150>)
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d00b      	beq.n	8016376 <xTaskIncrementTick+0x4a>
	__asm volatile
 801635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016362:	f383 8811 	msr	BASEPRI, r3
 8016366:	f3bf 8f6f 	isb	sy
 801636a:	f3bf 8f4f 	dsb	sy
 801636e:	603b      	str	r3, [r7, #0]
}
 8016370:	bf00      	nop
 8016372:	bf00      	nop
 8016374:	e7fd      	b.n	8016372 <xTaskIncrementTick+0x46>
 8016376:	4b41      	ldr	r3, [pc, #260]	@ (801647c <xTaskIncrementTick+0x150>)
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	60fb      	str	r3, [r7, #12]
 801637c:	4b40      	ldr	r3, [pc, #256]	@ (8016480 <xTaskIncrementTick+0x154>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	4a3e      	ldr	r2, [pc, #248]	@ (801647c <xTaskIncrementTick+0x150>)
 8016382:	6013      	str	r3, [r2, #0]
 8016384:	4a3e      	ldr	r2, [pc, #248]	@ (8016480 <xTaskIncrementTick+0x154>)
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	6013      	str	r3, [r2, #0]
 801638a:	4b3e      	ldr	r3, [pc, #248]	@ (8016484 <xTaskIncrementTick+0x158>)
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	3301      	adds	r3, #1
 8016390:	4a3c      	ldr	r2, [pc, #240]	@ (8016484 <xTaskIncrementTick+0x158>)
 8016392:	6013      	str	r3, [r2, #0]
 8016394:	f000 fafc 	bl	8016990 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016398:	4b3b      	ldr	r3, [pc, #236]	@ (8016488 <xTaskIncrementTick+0x15c>)
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	693a      	ldr	r2, [r7, #16]
 801639e:	429a      	cmp	r2, r3
 80163a0:	d349      	bcc.n	8016436 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80163a2:	4b36      	ldr	r3, [pc, #216]	@ (801647c <xTaskIncrementTick+0x150>)
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d104      	bne.n	80163b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80163ac:	4b36      	ldr	r3, [pc, #216]	@ (8016488 <xTaskIncrementTick+0x15c>)
 80163ae:	f04f 32ff 	mov.w	r2, #4294967295
 80163b2:	601a      	str	r2, [r3, #0]
					break;
 80163b4:	e03f      	b.n	8016436 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80163b6:	4b31      	ldr	r3, [pc, #196]	@ (801647c <xTaskIncrementTick+0x150>)
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	68db      	ldr	r3, [r3, #12]
 80163bc:	68db      	ldr	r3, [r3, #12]
 80163be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80163c0:	68bb      	ldr	r3, [r7, #8]
 80163c2:	685b      	ldr	r3, [r3, #4]
 80163c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80163c6:	693a      	ldr	r2, [r7, #16]
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	429a      	cmp	r2, r3
 80163cc:	d203      	bcs.n	80163d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80163ce:	4a2e      	ldr	r2, [pc, #184]	@ (8016488 <xTaskIncrementTick+0x15c>)
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80163d4:	e02f      	b.n	8016436 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80163d6:	68bb      	ldr	r3, [r7, #8]
 80163d8:	3304      	adds	r3, #4
 80163da:	4618      	mov	r0, r3
 80163dc:	f7fe fea0 	bl	8015120 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80163e0:	68bb      	ldr	r3, [r7, #8]
 80163e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d004      	beq.n	80163f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80163e8:	68bb      	ldr	r3, [r7, #8]
 80163ea:	3318      	adds	r3, #24
 80163ec:	4618      	mov	r0, r3
 80163ee:	f7fe fe97 	bl	8015120 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80163f2:	68bb      	ldr	r3, [r7, #8]
 80163f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80163f6:	4b25      	ldr	r3, [pc, #148]	@ (801648c <xTaskIncrementTick+0x160>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	429a      	cmp	r2, r3
 80163fc:	d903      	bls.n	8016406 <xTaskIncrementTick+0xda>
 80163fe:	68bb      	ldr	r3, [r7, #8]
 8016400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016402:	4a22      	ldr	r2, [pc, #136]	@ (801648c <xTaskIncrementTick+0x160>)
 8016404:	6013      	str	r3, [r2, #0]
 8016406:	68bb      	ldr	r3, [r7, #8]
 8016408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801640a:	4613      	mov	r3, r2
 801640c:	009b      	lsls	r3, r3, #2
 801640e:	4413      	add	r3, r2
 8016410:	009b      	lsls	r3, r3, #2
 8016412:	4a1f      	ldr	r2, [pc, #124]	@ (8016490 <xTaskIncrementTick+0x164>)
 8016414:	441a      	add	r2, r3
 8016416:	68bb      	ldr	r3, [r7, #8]
 8016418:	3304      	adds	r3, #4
 801641a:	4619      	mov	r1, r3
 801641c:	4610      	mov	r0, r2
 801641e:	f7fe fe22 	bl	8015066 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016422:	68bb      	ldr	r3, [r7, #8]
 8016424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016426:	4b1b      	ldr	r3, [pc, #108]	@ (8016494 <xTaskIncrementTick+0x168>)
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801642c:	429a      	cmp	r2, r3
 801642e:	d3b8      	bcc.n	80163a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8016430:	2301      	movs	r3, #1
 8016432:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016434:	e7b5      	b.n	80163a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016436:	4b17      	ldr	r3, [pc, #92]	@ (8016494 <xTaskIncrementTick+0x168>)
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801643c:	4914      	ldr	r1, [pc, #80]	@ (8016490 <xTaskIncrementTick+0x164>)
 801643e:	4613      	mov	r3, r2
 8016440:	009b      	lsls	r3, r3, #2
 8016442:	4413      	add	r3, r2
 8016444:	009b      	lsls	r3, r3, #2
 8016446:	440b      	add	r3, r1
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	2b01      	cmp	r3, #1
 801644c:	d901      	bls.n	8016452 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801644e:	2301      	movs	r3, #1
 8016450:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016452:	4b11      	ldr	r3, [pc, #68]	@ (8016498 <xTaskIncrementTick+0x16c>)
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d007      	beq.n	801646a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 801645a:	2301      	movs	r3, #1
 801645c:	617b      	str	r3, [r7, #20]
 801645e:	e004      	b.n	801646a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016460:	4b0e      	ldr	r3, [pc, #56]	@ (801649c <xTaskIncrementTick+0x170>)
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	3301      	adds	r3, #1
 8016466:	4a0d      	ldr	r2, [pc, #52]	@ (801649c <xTaskIncrementTick+0x170>)
 8016468:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801646a:	697b      	ldr	r3, [r7, #20]
}
 801646c:	4618      	mov	r0, r3
 801646e:	3718      	adds	r7, #24
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}
 8016474:	240025d4 	.word	0x240025d4
 8016478:	240025b0 	.word	0x240025b0
 801647c:	24002564 	.word	0x24002564
 8016480:	24002568 	.word	0x24002568
 8016484:	240025c4 	.word	0x240025c4
 8016488:	240025cc 	.word	0x240025cc
 801648c:	240025b4 	.word	0x240025b4
 8016490:	240020dc 	.word	0x240020dc
 8016494:	240020d8 	.word	0x240020d8
 8016498:	240025c0 	.word	0x240025c0
 801649c:	240025bc 	.word	0x240025bc

080164a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b084      	sub	sp, #16
 80164a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80164a6:	4b36      	ldr	r3, [pc, #216]	@ (8016580 <vTaskSwitchContext+0xe0>)
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d003      	beq.n	80164b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80164ae:	4b35      	ldr	r3, [pc, #212]	@ (8016584 <vTaskSwitchContext+0xe4>)
 80164b0:	2201      	movs	r2, #1
 80164b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80164b4:	e060      	b.n	8016578 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 80164b6:	4b33      	ldr	r3, [pc, #204]	@ (8016584 <vTaskSwitchContext+0xe4>)
 80164b8:	2200      	movs	r2, #0
 80164ba:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80164bc:	f7eb f925 	bl	800170a <getRunTimeCounterValue>
 80164c0:	4603      	mov	r3, r0
 80164c2:	4a31      	ldr	r2, [pc, #196]	@ (8016588 <vTaskSwitchContext+0xe8>)
 80164c4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80164c6:	4b30      	ldr	r3, [pc, #192]	@ (8016588 <vTaskSwitchContext+0xe8>)
 80164c8:	681a      	ldr	r2, [r3, #0]
 80164ca:	4b30      	ldr	r3, [pc, #192]	@ (801658c <vTaskSwitchContext+0xec>)
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	429a      	cmp	r2, r3
 80164d0:	d909      	bls.n	80164e6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80164d2:	4b2f      	ldr	r3, [pc, #188]	@ (8016590 <vTaskSwitchContext+0xf0>)
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80164d8:	4a2b      	ldr	r2, [pc, #172]	@ (8016588 <vTaskSwitchContext+0xe8>)
 80164da:	6810      	ldr	r0, [r2, #0]
 80164dc:	4a2b      	ldr	r2, [pc, #172]	@ (801658c <vTaskSwitchContext+0xec>)
 80164de:	6812      	ldr	r2, [r2, #0]
 80164e0:	1a82      	subs	r2, r0, r2
 80164e2:	440a      	add	r2, r1
 80164e4:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80164e6:	4b28      	ldr	r3, [pc, #160]	@ (8016588 <vTaskSwitchContext+0xe8>)
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	4a28      	ldr	r2, [pc, #160]	@ (801658c <vTaskSwitchContext+0xec>)
 80164ec:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80164ee:	4b29      	ldr	r3, [pc, #164]	@ (8016594 <vTaskSwitchContext+0xf4>)
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	60fb      	str	r3, [r7, #12]
 80164f4:	e011      	b.n	801651a <vTaskSwitchContext+0x7a>
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d10b      	bne.n	8016514 <vTaskSwitchContext+0x74>
	__asm volatile
 80164fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016500:	f383 8811 	msr	BASEPRI, r3
 8016504:	f3bf 8f6f 	isb	sy
 8016508:	f3bf 8f4f 	dsb	sy
 801650c:	607b      	str	r3, [r7, #4]
}
 801650e:	bf00      	nop
 8016510:	bf00      	nop
 8016512:	e7fd      	b.n	8016510 <vTaskSwitchContext+0x70>
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	3b01      	subs	r3, #1
 8016518:	60fb      	str	r3, [r7, #12]
 801651a:	491f      	ldr	r1, [pc, #124]	@ (8016598 <vTaskSwitchContext+0xf8>)
 801651c:	68fa      	ldr	r2, [r7, #12]
 801651e:	4613      	mov	r3, r2
 8016520:	009b      	lsls	r3, r3, #2
 8016522:	4413      	add	r3, r2
 8016524:	009b      	lsls	r3, r3, #2
 8016526:	440b      	add	r3, r1
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d0e3      	beq.n	80164f6 <vTaskSwitchContext+0x56>
 801652e:	68fa      	ldr	r2, [r7, #12]
 8016530:	4613      	mov	r3, r2
 8016532:	009b      	lsls	r3, r3, #2
 8016534:	4413      	add	r3, r2
 8016536:	009b      	lsls	r3, r3, #2
 8016538:	4a17      	ldr	r2, [pc, #92]	@ (8016598 <vTaskSwitchContext+0xf8>)
 801653a:	4413      	add	r3, r2
 801653c:	60bb      	str	r3, [r7, #8]
 801653e:	68bb      	ldr	r3, [r7, #8]
 8016540:	685b      	ldr	r3, [r3, #4]
 8016542:	685a      	ldr	r2, [r3, #4]
 8016544:	68bb      	ldr	r3, [r7, #8]
 8016546:	605a      	str	r2, [r3, #4]
 8016548:	68bb      	ldr	r3, [r7, #8]
 801654a:	685a      	ldr	r2, [r3, #4]
 801654c:	68bb      	ldr	r3, [r7, #8]
 801654e:	3308      	adds	r3, #8
 8016550:	429a      	cmp	r2, r3
 8016552:	d104      	bne.n	801655e <vTaskSwitchContext+0xbe>
 8016554:	68bb      	ldr	r3, [r7, #8]
 8016556:	685b      	ldr	r3, [r3, #4]
 8016558:	685a      	ldr	r2, [r3, #4]
 801655a:	68bb      	ldr	r3, [r7, #8]
 801655c:	605a      	str	r2, [r3, #4]
 801655e:	68bb      	ldr	r3, [r7, #8]
 8016560:	685b      	ldr	r3, [r3, #4]
 8016562:	68db      	ldr	r3, [r3, #12]
 8016564:	4a0a      	ldr	r2, [pc, #40]	@ (8016590 <vTaskSwitchContext+0xf0>)
 8016566:	6013      	str	r3, [r2, #0]
 8016568:	4a0a      	ldr	r2, [pc, #40]	@ (8016594 <vTaskSwitchContext+0xf4>)
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801656e:	4b08      	ldr	r3, [pc, #32]	@ (8016590 <vTaskSwitchContext+0xf0>)
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	3358      	adds	r3, #88	@ 0x58
 8016574:	4a09      	ldr	r2, [pc, #36]	@ (801659c <vTaskSwitchContext+0xfc>)
 8016576:	6013      	str	r3, [r2, #0]
}
 8016578:	bf00      	nop
 801657a:	3710      	adds	r7, #16
 801657c:	46bd      	mov	sp, r7
 801657e:	bd80      	pop	{r7, pc}
 8016580:	240025d4 	.word	0x240025d4
 8016584:	240025c0 	.word	0x240025c0
 8016588:	240025dc 	.word	0x240025dc
 801658c:	240025d8 	.word	0x240025d8
 8016590:	240020d8 	.word	0x240020d8
 8016594:	240025b4 	.word	0x240025b4
 8016598:	240020dc 	.word	0x240020dc
 801659c:	240001d0 	.word	0x240001d0

080165a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b084      	sub	sp, #16
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
 80165a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d10b      	bne.n	80165c8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80165b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165b4:	f383 8811 	msr	BASEPRI, r3
 80165b8:	f3bf 8f6f 	isb	sy
 80165bc:	f3bf 8f4f 	dsb	sy
 80165c0:	60fb      	str	r3, [r7, #12]
}
 80165c2:	bf00      	nop
 80165c4:	bf00      	nop
 80165c6:	e7fd      	b.n	80165c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80165c8:	4b07      	ldr	r3, [pc, #28]	@ (80165e8 <vTaskPlaceOnEventList+0x48>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	3318      	adds	r3, #24
 80165ce:	4619      	mov	r1, r3
 80165d0:	6878      	ldr	r0, [r7, #4]
 80165d2:	f7fe fd6c 	bl	80150ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80165d6:	2101      	movs	r1, #1
 80165d8:	6838      	ldr	r0, [r7, #0]
 80165da:	f000 fa87 	bl	8016aec <prvAddCurrentTaskToDelayedList>
}
 80165de:	bf00      	nop
 80165e0:	3710      	adds	r7, #16
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}
 80165e6:	bf00      	nop
 80165e8:	240020d8 	.word	0x240020d8

080165ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b086      	sub	sp, #24
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	60f8      	str	r0, [r7, #12]
 80165f4:	60b9      	str	r1, [r7, #8]
 80165f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d10b      	bne.n	8016616 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80165fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016602:	f383 8811 	msr	BASEPRI, r3
 8016606:	f3bf 8f6f 	isb	sy
 801660a:	f3bf 8f4f 	dsb	sy
 801660e:	617b      	str	r3, [r7, #20]
}
 8016610:	bf00      	nop
 8016612:	bf00      	nop
 8016614:	e7fd      	b.n	8016612 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016616:	4b0a      	ldr	r3, [pc, #40]	@ (8016640 <vTaskPlaceOnEventListRestricted+0x54>)
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	3318      	adds	r3, #24
 801661c:	4619      	mov	r1, r3
 801661e:	68f8      	ldr	r0, [r7, #12]
 8016620:	f7fe fd21 	bl	8015066 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d002      	beq.n	8016630 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801662a:	f04f 33ff 	mov.w	r3, #4294967295
 801662e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016630:	6879      	ldr	r1, [r7, #4]
 8016632:	68b8      	ldr	r0, [r7, #8]
 8016634:	f000 fa5a 	bl	8016aec <prvAddCurrentTaskToDelayedList>
	}
 8016638:	bf00      	nop
 801663a:	3718      	adds	r7, #24
 801663c:	46bd      	mov	sp, r7
 801663e:	bd80      	pop	{r7, pc}
 8016640:	240020d8 	.word	0x240020d8

08016644 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b086      	sub	sp, #24
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	68db      	ldr	r3, [r3, #12]
 8016650:	68db      	ldr	r3, [r3, #12]
 8016652:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016654:	693b      	ldr	r3, [r7, #16]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d10b      	bne.n	8016672 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801665e:	f383 8811 	msr	BASEPRI, r3
 8016662:	f3bf 8f6f 	isb	sy
 8016666:	f3bf 8f4f 	dsb	sy
 801666a:	60fb      	str	r3, [r7, #12]
}
 801666c:	bf00      	nop
 801666e:	bf00      	nop
 8016670:	e7fd      	b.n	801666e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016672:	693b      	ldr	r3, [r7, #16]
 8016674:	3318      	adds	r3, #24
 8016676:	4618      	mov	r0, r3
 8016678:	f7fe fd52 	bl	8015120 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801667c:	4b1d      	ldr	r3, [pc, #116]	@ (80166f4 <xTaskRemoveFromEventList+0xb0>)
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d11d      	bne.n	80166c0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016684:	693b      	ldr	r3, [r7, #16]
 8016686:	3304      	adds	r3, #4
 8016688:	4618      	mov	r0, r3
 801668a:	f7fe fd49 	bl	8015120 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801668e:	693b      	ldr	r3, [r7, #16]
 8016690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016692:	4b19      	ldr	r3, [pc, #100]	@ (80166f8 <xTaskRemoveFromEventList+0xb4>)
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	429a      	cmp	r2, r3
 8016698:	d903      	bls.n	80166a2 <xTaskRemoveFromEventList+0x5e>
 801669a:	693b      	ldr	r3, [r7, #16]
 801669c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801669e:	4a16      	ldr	r2, [pc, #88]	@ (80166f8 <xTaskRemoveFromEventList+0xb4>)
 80166a0:	6013      	str	r3, [r2, #0]
 80166a2:	693b      	ldr	r3, [r7, #16]
 80166a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166a6:	4613      	mov	r3, r2
 80166a8:	009b      	lsls	r3, r3, #2
 80166aa:	4413      	add	r3, r2
 80166ac:	009b      	lsls	r3, r3, #2
 80166ae:	4a13      	ldr	r2, [pc, #76]	@ (80166fc <xTaskRemoveFromEventList+0xb8>)
 80166b0:	441a      	add	r2, r3
 80166b2:	693b      	ldr	r3, [r7, #16]
 80166b4:	3304      	adds	r3, #4
 80166b6:	4619      	mov	r1, r3
 80166b8:	4610      	mov	r0, r2
 80166ba:	f7fe fcd4 	bl	8015066 <vListInsertEnd>
 80166be:	e005      	b.n	80166cc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80166c0:	693b      	ldr	r3, [r7, #16]
 80166c2:	3318      	adds	r3, #24
 80166c4:	4619      	mov	r1, r3
 80166c6:	480e      	ldr	r0, [pc, #56]	@ (8016700 <xTaskRemoveFromEventList+0xbc>)
 80166c8:	f7fe fccd 	bl	8015066 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80166cc:	693b      	ldr	r3, [r7, #16]
 80166ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166d0:	4b0c      	ldr	r3, [pc, #48]	@ (8016704 <xTaskRemoveFromEventList+0xc0>)
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166d6:	429a      	cmp	r2, r3
 80166d8:	d905      	bls.n	80166e6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80166da:	2301      	movs	r3, #1
 80166dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80166de:	4b0a      	ldr	r3, [pc, #40]	@ (8016708 <xTaskRemoveFromEventList+0xc4>)
 80166e0:	2201      	movs	r2, #1
 80166e2:	601a      	str	r2, [r3, #0]
 80166e4:	e001      	b.n	80166ea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80166e6:	2300      	movs	r3, #0
 80166e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80166ea:	697b      	ldr	r3, [r7, #20]
}
 80166ec:	4618      	mov	r0, r3
 80166ee:	3718      	adds	r7, #24
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}
 80166f4:	240025d4 	.word	0x240025d4
 80166f8:	240025b4 	.word	0x240025b4
 80166fc:	240020dc 	.word	0x240020dc
 8016700:	2400256c 	.word	0x2400256c
 8016704:	240020d8 	.word	0x240020d8
 8016708:	240025c0 	.word	0x240025c0

0801670c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801670c:	b480      	push	{r7}
 801670e:	b083      	sub	sp, #12
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016714:	4b06      	ldr	r3, [pc, #24]	@ (8016730 <vTaskInternalSetTimeOutState+0x24>)
 8016716:	681a      	ldr	r2, [r3, #0]
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801671c:	4b05      	ldr	r3, [pc, #20]	@ (8016734 <vTaskInternalSetTimeOutState+0x28>)
 801671e:	681a      	ldr	r2, [r3, #0]
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	605a      	str	r2, [r3, #4]
}
 8016724:	bf00      	nop
 8016726:	370c      	adds	r7, #12
 8016728:	46bd      	mov	sp, r7
 801672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672e:	4770      	bx	lr
 8016730:	240025c4 	.word	0x240025c4
 8016734:	240025b0 	.word	0x240025b0

08016738 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b088      	sub	sp, #32
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
 8016740:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d10b      	bne.n	8016760 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8016748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801674c:	f383 8811 	msr	BASEPRI, r3
 8016750:	f3bf 8f6f 	isb	sy
 8016754:	f3bf 8f4f 	dsb	sy
 8016758:	613b      	str	r3, [r7, #16]
}
 801675a:	bf00      	nop
 801675c:	bf00      	nop
 801675e:	e7fd      	b.n	801675c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016760:	683b      	ldr	r3, [r7, #0]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d10b      	bne.n	801677e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8016766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801676a:	f383 8811 	msr	BASEPRI, r3
 801676e:	f3bf 8f6f 	isb	sy
 8016772:	f3bf 8f4f 	dsb	sy
 8016776:	60fb      	str	r3, [r7, #12]
}
 8016778:	bf00      	nop
 801677a:	bf00      	nop
 801677c:	e7fd      	b.n	801677a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801677e:	f000 fe93 	bl	80174a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016782:	4b1d      	ldr	r3, [pc, #116]	@ (80167f8 <xTaskCheckForTimeOut+0xc0>)
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	685b      	ldr	r3, [r3, #4]
 801678c:	69ba      	ldr	r2, [r7, #24]
 801678e:	1ad3      	subs	r3, r2, r3
 8016790:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016792:	683b      	ldr	r3, [r7, #0]
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	f1b3 3fff 	cmp.w	r3, #4294967295
 801679a:	d102      	bne.n	80167a2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801679c:	2300      	movs	r3, #0
 801679e:	61fb      	str	r3, [r7, #28]
 80167a0:	e023      	b.n	80167ea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	681a      	ldr	r2, [r3, #0]
 80167a6:	4b15      	ldr	r3, [pc, #84]	@ (80167fc <xTaskCheckForTimeOut+0xc4>)
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	429a      	cmp	r2, r3
 80167ac:	d007      	beq.n	80167be <xTaskCheckForTimeOut+0x86>
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	685b      	ldr	r3, [r3, #4]
 80167b2:	69ba      	ldr	r2, [r7, #24]
 80167b4:	429a      	cmp	r2, r3
 80167b6:	d302      	bcc.n	80167be <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80167b8:	2301      	movs	r3, #1
 80167ba:	61fb      	str	r3, [r7, #28]
 80167bc:	e015      	b.n	80167ea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80167be:	683b      	ldr	r3, [r7, #0]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	697a      	ldr	r2, [r7, #20]
 80167c4:	429a      	cmp	r2, r3
 80167c6:	d20b      	bcs.n	80167e0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80167c8:	683b      	ldr	r3, [r7, #0]
 80167ca:	681a      	ldr	r2, [r3, #0]
 80167cc:	697b      	ldr	r3, [r7, #20]
 80167ce:	1ad2      	subs	r2, r2, r3
 80167d0:	683b      	ldr	r3, [r7, #0]
 80167d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80167d4:	6878      	ldr	r0, [r7, #4]
 80167d6:	f7ff ff99 	bl	801670c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80167da:	2300      	movs	r3, #0
 80167dc:	61fb      	str	r3, [r7, #28]
 80167de:	e004      	b.n	80167ea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80167e0:	683b      	ldr	r3, [r7, #0]
 80167e2:	2200      	movs	r2, #0
 80167e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80167e6:	2301      	movs	r3, #1
 80167e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80167ea:	f000 fe8f 	bl	801750c <vPortExitCritical>

	return xReturn;
 80167ee:	69fb      	ldr	r3, [r7, #28]
}
 80167f0:	4618      	mov	r0, r3
 80167f2:	3720      	adds	r7, #32
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd80      	pop	{r7, pc}
 80167f8:	240025b0 	.word	0x240025b0
 80167fc:	240025c4 	.word	0x240025c4

08016800 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016800:	b480      	push	{r7}
 8016802:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016804:	4b03      	ldr	r3, [pc, #12]	@ (8016814 <vTaskMissedYield+0x14>)
 8016806:	2201      	movs	r2, #1
 8016808:	601a      	str	r2, [r3, #0]
}
 801680a:	bf00      	nop
 801680c:	46bd      	mov	sp, r7
 801680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016812:	4770      	bx	lr
 8016814:	240025c0 	.word	0x240025c0

08016818 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016818:	b580      	push	{r7, lr}
 801681a:	b082      	sub	sp, #8
 801681c:	af00      	add	r7, sp, #0
 801681e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016820:	f000 f852 	bl	80168c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016824:	4b06      	ldr	r3, [pc, #24]	@ (8016840 <prvIdleTask+0x28>)
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	2b01      	cmp	r3, #1
 801682a:	d9f9      	bls.n	8016820 <prvIdleTask+0x8>
			{
				taskYIELD();
 801682c:	4b05      	ldr	r3, [pc, #20]	@ (8016844 <prvIdleTask+0x2c>)
 801682e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016832:	601a      	str	r2, [r3, #0]
 8016834:	f3bf 8f4f 	dsb	sy
 8016838:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801683c:	e7f0      	b.n	8016820 <prvIdleTask+0x8>
 801683e:	bf00      	nop
 8016840:	240020dc 	.word	0x240020dc
 8016844:	e000ed04 	.word	0xe000ed04

08016848 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016848:	b580      	push	{r7, lr}
 801684a:	b082      	sub	sp, #8
 801684c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801684e:	2300      	movs	r3, #0
 8016850:	607b      	str	r3, [r7, #4]
 8016852:	e00c      	b.n	801686e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016854:	687a      	ldr	r2, [r7, #4]
 8016856:	4613      	mov	r3, r2
 8016858:	009b      	lsls	r3, r3, #2
 801685a:	4413      	add	r3, r2
 801685c:	009b      	lsls	r3, r3, #2
 801685e:	4a12      	ldr	r2, [pc, #72]	@ (80168a8 <prvInitialiseTaskLists+0x60>)
 8016860:	4413      	add	r3, r2
 8016862:	4618      	mov	r0, r3
 8016864:	f7fe fbd2 	bl	801500c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	3301      	adds	r3, #1
 801686c:	607b      	str	r3, [r7, #4]
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	2b37      	cmp	r3, #55	@ 0x37
 8016872:	d9ef      	bls.n	8016854 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016874:	480d      	ldr	r0, [pc, #52]	@ (80168ac <prvInitialiseTaskLists+0x64>)
 8016876:	f7fe fbc9 	bl	801500c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801687a:	480d      	ldr	r0, [pc, #52]	@ (80168b0 <prvInitialiseTaskLists+0x68>)
 801687c:	f7fe fbc6 	bl	801500c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016880:	480c      	ldr	r0, [pc, #48]	@ (80168b4 <prvInitialiseTaskLists+0x6c>)
 8016882:	f7fe fbc3 	bl	801500c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016886:	480c      	ldr	r0, [pc, #48]	@ (80168b8 <prvInitialiseTaskLists+0x70>)
 8016888:	f7fe fbc0 	bl	801500c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801688c:	480b      	ldr	r0, [pc, #44]	@ (80168bc <prvInitialiseTaskLists+0x74>)
 801688e:	f7fe fbbd 	bl	801500c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016892:	4b0b      	ldr	r3, [pc, #44]	@ (80168c0 <prvInitialiseTaskLists+0x78>)
 8016894:	4a05      	ldr	r2, [pc, #20]	@ (80168ac <prvInitialiseTaskLists+0x64>)
 8016896:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016898:	4b0a      	ldr	r3, [pc, #40]	@ (80168c4 <prvInitialiseTaskLists+0x7c>)
 801689a:	4a05      	ldr	r2, [pc, #20]	@ (80168b0 <prvInitialiseTaskLists+0x68>)
 801689c:	601a      	str	r2, [r3, #0]
}
 801689e:	bf00      	nop
 80168a0:	3708      	adds	r7, #8
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}
 80168a6:	bf00      	nop
 80168a8:	240020dc 	.word	0x240020dc
 80168ac:	2400253c 	.word	0x2400253c
 80168b0:	24002550 	.word	0x24002550
 80168b4:	2400256c 	.word	0x2400256c
 80168b8:	24002580 	.word	0x24002580
 80168bc:	24002598 	.word	0x24002598
 80168c0:	24002564 	.word	0x24002564
 80168c4:	24002568 	.word	0x24002568

080168c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b082      	sub	sp, #8
 80168cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80168ce:	e019      	b.n	8016904 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80168d0:	f000 fdea 	bl	80174a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80168d4:	4b10      	ldr	r3, [pc, #64]	@ (8016918 <prvCheckTasksWaitingTermination+0x50>)
 80168d6:	68db      	ldr	r3, [r3, #12]
 80168d8:	68db      	ldr	r3, [r3, #12]
 80168da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	3304      	adds	r3, #4
 80168e0:	4618      	mov	r0, r3
 80168e2:	f7fe fc1d 	bl	8015120 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80168e6:	4b0d      	ldr	r3, [pc, #52]	@ (801691c <prvCheckTasksWaitingTermination+0x54>)
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	3b01      	subs	r3, #1
 80168ec:	4a0b      	ldr	r2, [pc, #44]	@ (801691c <prvCheckTasksWaitingTermination+0x54>)
 80168ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80168f0:	4b0b      	ldr	r3, [pc, #44]	@ (8016920 <prvCheckTasksWaitingTermination+0x58>)
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	3b01      	subs	r3, #1
 80168f6:	4a0a      	ldr	r2, [pc, #40]	@ (8016920 <prvCheckTasksWaitingTermination+0x58>)
 80168f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80168fa:	f000 fe07 	bl	801750c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80168fe:	6878      	ldr	r0, [r7, #4]
 8016900:	f000 f810 	bl	8016924 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016904:	4b06      	ldr	r3, [pc, #24]	@ (8016920 <prvCheckTasksWaitingTermination+0x58>)
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d1e1      	bne.n	80168d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801690c:	bf00      	nop
 801690e:	bf00      	nop
 8016910:	3708      	adds	r7, #8
 8016912:	46bd      	mov	sp, r7
 8016914:	bd80      	pop	{r7, pc}
 8016916:	bf00      	nop
 8016918:	24002580 	.word	0x24002580
 801691c:	240025ac 	.word	0x240025ac
 8016920:	24002594 	.word	0x24002594

08016924 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016924:	b580      	push	{r7, lr}
 8016926:	b084      	sub	sp, #16
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	3358      	adds	r3, #88	@ 0x58
 8016930:	4618      	mov	r0, r3
 8016932:	f002 f81b 	bl	801896c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 801693c:	2b00      	cmp	r3, #0
 801693e:	d108      	bne.n	8016952 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016944:	4618      	mov	r0, r3
 8016946:	f000 ff9f 	bl	8017888 <vPortFree>
				vPortFree( pxTCB );
 801694a:	6878      	ldr	r0, [r7, #4]
 801694c:	f000 ff9c 	bl	8017888 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016950:	e019      	b.n	8016986 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8016958:	2b01      	cmp	r3, #1
 801695a:	d103      	bne.n	8016964 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801695c:	6878      	ldr	r0, [r7, #4]
 801695e:	f000 ff93 	bl	8017888 <vPortFree>
	}
 8016962:	e010      	b.n	8016986 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 801696a:	2b02      	cmp	r3, #2
 801696c:	d00b      	beq.n	8016986 <prvDeleteTCB+0x62>
	__asm volatile
 801696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016972:	f383 8811 	msr	BASEPRI, r3
 8016976:	f3bf 8f6f 	isb	sy
 801697a:	f3bf 8f4f 	dsb	sy
 801697e:	60fb      	str	r3, [r7, #12]
}
 8016980:	bf00      	nop
 8016982:	bf00      	nop
 8016984:	e7fd      	b.n	8016982 <prvDeleteTCB+0x5e>
	}
 8016986:	bf00      	nop
 8016988:	3710      	adds	r7, #16
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}
	...

08016990 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016990:	b480      	push	{r7}
 8016992:	b083      	sub	sp, #12
 8016994:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016996:	4b0c      	ldr	r3, [pc, #48]	@ (80169c8 <prvResetNextTaskUnblockTime+0x38>)
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d104      	bne.n	80169aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80169a0:	4b0a      	ldr	r3, [pc, #40]	@ (80169cc <prvResetNextTaskUnblockTime+0x3c>)
 80169a2:	f04f 32ff 	mov.w	r2, #4294967295
 80169a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80169a8:	e008      	b.n	80169bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80169aa:	4b07      	ldr	r3, [pc, #28]	@ (80169c8 <prvResetNextTaskUnblockTime+0x38>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	68db      	ldr	r3, [r3, #12]
 80169b0:	68db      	ldr	r3, [r3, #12]
 80169b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	685b      	ldr	r3, [r3, #4]
 80169b8:	4a04      	ldr	r2, [pc, #16]	@ (80169cc <prvResetNextTaskUnblockTime+0x3c>)
 80169ba:	6013      	str	r3, [r2, #0]
}
 80169bc:	bf00      	nop
 80169be:	370c      	adds	r7, #12
 80169c0:	46bd      	mov	sp, r7
 80169c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c6:	4770      	bx	lr
 80169c8:	24002564 	.word	0x24002564
 80169cc:	240025cc 	.word	0x240025cc

080169d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80169d0:	b480      	push	{r7}
 80169d2:	b083      	sub	sp, #12
 80169d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80169d6:	4b0b      	ldr	r3, [pc, #44]	@ (8016a04 <xTaskGetSchedulerState+0x34>)
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d102      	bne.n	80169e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80169de:	2301      	movs	r3, #1
 80169e0:	607b      	str	r3, [r7, #4]
 80169e2:	e008      	b.n	80169f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80169e4:	4b08      	ldr	r3, [pc, #32]	@ (8016a08 <xTaskGetSchedulerState+0x38>)
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d102      	bne.n	80169f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80169ec:	2302      	movs	r3, #2
 80169ee:	607b      	str	r3, [r7, #4]
 80169f0:	e001      	b.n	80169f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80169f2:	2300      	movs	r3, #0
 80169f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80169f6:	687b      	ldr	r3, [r7, #4]
	}
 80169f8:	4618      	mov	r0, r3
 80169fa:	370c      	adds	r7, #12
 80169fc:	46bd      	mov	sp, r7
 80169fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a02:	4770      	bx	lr
 8016a04:	240025b8 	.word	0x240025b8
 8016a08:	240025d4 	.word	0x240025d4

08016a0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b086      	sub	sp, #24
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016a18:	2300      	movs	r3, #0
 8016a1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d058      	beq.n	8016ad4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016a22:	4b2f      	ldr	r3, [pc, #188]	@ (8016ae0 <xTaskPriorityDisinherit+0xd4>)
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	693a      	ldr	r2, [r7, #16]
 8016a28:	429a      	cmp	r2, r3
 8016a2a:	d00b      	beq.n	8016a44 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8016a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a30:	f383 8811 	msr	BASEPRI, r3
 8016a34:	f3bf 8f6f 	isb	sy
 8016a38:	f3bf 8f4f 	dsb	sy
 8016a3c:	60fb      	str	r3, [r7, #12]
}
 8016a3e:	bf00      	nop
 8016a40:	bf00      	nop
 8016a42:	e7fd      	b.n	8016a40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016a44:	693b      	ldr	r3, [r7, #16]
 8016a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d10b      	bne.n	8016a64 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8016a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a50:	f383 8811 	msr	BASEPRI, r3
 8016a54:	f3bf 8f6f 	isb	sy
 8016a58:	f3bf 8f4f 	dsb	sy
 8016a5c:	60bb      	str	r3, [r7, #8]
}
 8016a5e:	bf00      	nop
 8016a60:	bf00      	nop
 8016a62:	e7fd      	b.n	8016a60 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8016a64:	693b      	ldr	r3, [r7, #16]
 8016a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016a68:	1e5a      	subs	r2, r3, #1
 8016a6a:	693b      	ldr	r3, [r7, #16]
 8016a6c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016a6e:	693b      	ldr	r3, [r7, #16]
 8016a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016a72:	693b      	ldr	r3, [r7, #16]
 8016a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016a76:	429a      	cmp	r2, r3
 8016a78:	d02c      	beq.n	8016ad4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016a7a:	693b      	ldr	r3, [r7, #16]
 8016a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d128      	bne.n	8016ad4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016a82:	693b      	ldr	r3, [r7, #16]
 8016a84:	3304      	adds	r3, #4
 8016a86:	4618      	mov	r0, r3
 8016a88:	f7fe fb4a 	bl	8015120 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016a8c:	693b      	ldr	r3, [r7, #16]
 8016a8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016a90:	693b      	ldr	r3, [r7, #16]
 8016a92:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016a94:	693b      	ldr	r3, [r7, #16]
 8016a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a98:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8016a9c:	693b      	ldr	r3, [r7, #16]
 8016a9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016aa0:	693b      	ldr	r3, [r7, #16]
 8016aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8016ae4 <xTaskPriorityDisinherit+0xd8>)
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	429a      	cmp	r2, r3
 8016aaa:	d903      	bls.n	8016ab4 <xTaskPriorityDisinherit+0xa8>
 8016aac:	693b      	ldr	r3, [r7, #16]
 8016aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8016ae4 <xTaskPriorityDisinherit+0xd8>)
 8016ab2:	6013      	str	r3, [r2, #0]
 8016ab4:	693b      	ldr	r3, [r7, #16]
 8016ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016ab8:	4613      	mov	r3, r2
 8016aba:	009b      	lsls	r3, r3, #2
 8016abc:	4413      	add	r3, r2
 8016abe:	009b      	lsls	r3, r3, #2
 8016ac0:	4a09      	ldr	r2, [pc, #36]	@ (8016ae8 <xTaskPriorityDisinherit+0xdc>)
 8016ac2:	441a      	add	r2, r3
 8016ac4:	693b      	ldr	r3, [r7, #16]
 8016ac6:	3304      	adds	r3, #4
 8016ac8:	4619      	mov	r1, r3
 8016aca:	4610      	mov	r0, r2
 8016acc:	f7fe facb 	bl	8015066 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016ad0:	2301      	movs	r3, #1
 8016ad2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016ad4:	697b      	ldr	r3, [r7, #20]
	}
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	3718      	adds	r7, #24
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}
 8016ade:	bf00      	nop
 8016ae0:	240020d8 	.word	0x240020d8
 8016ae4:	240025b4 	.word	0x240025b4
 8016ae8:	240020dc 	.word	0x240020dc

08016aec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b084      	sub	sp, #16
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
 8016af4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016af6:	4b21      	ldr	r3, [pc, #132]	@ (8016b7c <prvAddCurrentTaskToDelayedList+0x90>)
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016afc:	4b20      	ldr	r3, [pc, #128]	@ (8016b80 <prvAddCurrentTaskToDelayedList+0x94>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	3304      	adds	r3, #4
 8016b02:	4618      	mov	r0, r3
 8016b04:	f7fe fb0c 	bl	8015120 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b0e:	d10a      	bne.n	8016b26 <prvAddCurrentTaskToDelayedList+0x3a>
 8016b10:	683b      	ldr	r3, [r7, #0]
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d007      	beq.n	8016b26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016b16:	4b1a      	ldr	r3, [pc, #104]	@ (8016b80 <prvAddCurrentTaskToDelayedList+0x94>)
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	3304      	adds	r3, #4
 8016b1c:	4619      	mov	r1, r3
 8016b1e:	4819      	ldr	r0, [pc, #100]	@ (8016b84 <prvAddCurrentTaskToDelayedList+0x98>)
 8016b20:	f7fe faa1 	bl	8015066 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016b24:	e026      	b.n	8016b74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016b26:	68fa      	ldr	r2, [r7, #12]
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	4413      	add	r3, r2
 8016b2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016b2e:	4b14      	ldr	r3, [pc, #80]	@ (8016b80 <prvAddCurrentTaskToDelayedList+0x94>)
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	68ba      	ldr	r2, [r7, #8]
 8016b34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016b36:	68ba      	ldr	r2, [r7, #8]
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	429a      	cmp	r2, r3
 8016b3c:	d209      	bcs.n	8016b52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016b3e:	4b12      	ldr	r3, [pc, #72]	@ (8016b88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8016b40:	681a      	ldr	r2, [r3, #0]
 8016b42:	4b0f      	ldr	r3, [pc, #60]	@ (8016b80 <prvAddCurrentTaskToDelayedList+0x94>)
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	3304      	adds	r3, #4
 8016b48:	4619      	mov	r1, r3
 8016b4a:	4610      	mov	r0, r2
 8016b4c:	f7fe faaf 	bl	80150ae <vListInsert>
}
 8016b50:	e010      	b.n	8016b74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016b52:	4b0e      	ldr	r3, [pc, #56]	@ (8016b8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8016b54:	681a      	ldr	r2, [r3, #0]
 8016b56:	4b0a      	ldr	r3, [pc, #40]	@ (8016b80 <prvAddCurrentTaskToDelayedList+0x94>)
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	3304      	adds	r3, #4
 8016b5c:	4619      	mov	r1, r3
 8016b5e:	4610      	mov	r0, r2
 8016b60:	f7fe faa5 	bl	80150ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016b64:	4b0a      	ldr	r3, [pc, #40]	@ (8016b90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	68ba      	ldr	r2, [r7, #8]
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	d202      	bcs.n	8016b74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8016b6e:	4a08      	ldr	r2, [pc, #32]	@ (8016b90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016b70:	68bb      	ldr	r3, [r7, #8]
 8016b72:	6013      	str	r3, [r2, #0]
}
 8016b74:	bf00      	nop
 8016b76:	3710      	adds	r7, #16
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}
 8016b7c:	240025b0 	.word	0x240025b0
 8016b80:	240020d8 	.word	0x240020d8
 8016b84:	24002598 	.word	0x24002598
 8016b88:	24002568 	.word	0x24002568
 8016b8c:	24002564 	.word	0x24002564
 8016b90:	240025cc 	.word	0x240025cc

08016b94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016b94:	b580      	push	{r7, lr}
 8016b96:	b08a      	sub	sp, #40	@ 0x28
 8016b98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8016b9e:	f000 fb13 	bl	80171c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8016ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8016c18 <xTimerCreateTimerTask+0x84>)
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d021      	beq.n	8016bee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016baa:	2300      	movs	r3, #0
 8016bac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016bae:	2300      	movs	r3, #0
 8016bb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016bb2:	1d3a      	adds	r2, r7, #4
 8016bb4:	f107 0108 	add.w	r1, r7, #8
 8016bb8:	f107 030c 	add.w	r3, r7, #12
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f7fe fa0b 	bl	8014fd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016bc2:	6879      	ldr	r1, [r7, #4]
 8016bc4:	68bb      	ldr	r3, [r7, #8]
 8016bc6:	68fa      	ldr	r2, [r7, #12]
 8016bc8:	9202      	str	r2, [sp, #8]
 8016bca:	9301      	str	r3, [sp, #4]
 8016bcc:	2302      	movs	r3, #2
 8016bce:	9300      	str	r3, [sp, #0]
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	460a      	mov	r2, r1
 8016bd4:	4911      	ldr	r1, [pc, #68]	@ (8016c1c <xTimerCreateTimerTask+0x88>)
 8016bd6:	4812      	ldr	r0, [pc, #72]	@ (8016c20 <xTimerCreateTimerTask+0x8c>)
 8016bd8:	f7ff f884 	bl	8015ce4 <xTaskCreateStatic>
 8016bdc:	4603      	mov	r3, r0
 8016bde:	4a11      	ldr	r2, [pc, #68]	@ (8016c24 <xTimerCreateTimerTask+0x90>)
 8016be0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8016be2:	4b10      	ldr	r3, [pc, #64]	@ (8016c24 <xTimerCreateTimerTask+0x90>)
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d001      	beq.n	8016bee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8016bea:	2301      	movs	r3, #1
 8016bec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8016bee:	697b      	ldr	r3, [r7, #20]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d10b      	bne.n	8016c0c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8016bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016bf8:	f383 8811 	msr	BASEPRI, r3
 8016bfc:	f3bf 8f6f 	isb	sy
 8016c00:	f3bf 8f4f 	dsb	sy
 8016c04:	613b      	str	r3, [r7, #16]
}
 8016c06:	bf00      	nop
 8016c08:	bf00      	nop
 8016c0a:	e7fd      	b.n	8016c08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8016c0c:	697b      	ldr	r3, [r7, #20]
}
 8016c0e:	4618      	mov	r0, r3
 8016c10:	3718      	adds	r7, #24
 8016c12:	46bd      	mov	sp, r7
 8016c14:	bd80      	pop	{r7, pc}
 8016c16:	bf00      	nop
 8016c18:	24002610 	.word	0x24002610
 8016c1c:	08019f48 	.word	0x08019f48
 8016c20:	08016d61 	.word	0x08016d61
 8016c24:	24002614 	.word	0x24002614

08016c28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b08a      	sub	sp, #40	@ 0x28
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	60f8      	str	r0, [r7, #12]
 8016c30:	60b9      	str	r1, [r7, #8]
 8016c32:	607a      	str	r2, [r7, #4]
 8016c34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8016c36:	2300      	movs	r3, #0
 8016c38:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d10b      	bne.n	8016c58 <xTimerGenericCommand+0x30>
	__asm volatile
 8016c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c44:	f383 8811 	msr	BASEPRI, r3
 8016c48:	f3bf 8f6f 	isb	sy
 8016c4c:	f3bf 8f4f 	dsb	sy
 8016c50:	623b      	str	r3, [r7, #32]
}
 8016c52:	bf00      	nop
 8016c54:	bf00      	nop
 8016c56:	e7fd      	b.n	8016c54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016c58:	4b19      	ldr	r3, [pc, #100]	@ (8016cc0 <xTimerGenericCommand+0x98>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d02a      	beq.n	8016cb6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8016c60:	68bb      	ldr	r3, [r7, #8]
 8016c62:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016c6c:	68bb      	ldr	r3, [r7, #8]
 8016c6e:	2b05      	cmp	r3, #5
 8016c70:	dc18      	bgt.n	8016ca4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016c72:	f7ff fead 	bl	80169d0 <xTaskGetSchedulerState>
 8016c76:	4603      	mov	r3, r0
 8016c78:	2b02      	cmp	r3, #2
 8016c7a:	d109      	bne.n	8016c90 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016c7c:	4b10      	ldr	r3, [pc, #64]	@ (8016cc0 <xTimerGenericCommand+0x98>)
 8016c7e:	6818      	ldr	r0, [r3, #0]
 8016c80:	f107 0110 	add.w	r1, r7, #16
 8016c84:	2300      	movs	r3, #0
 8016c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016c88:	f7fe fbba 	bl	8015400 <xQueueGenericSend>
 8016c8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8016c8e:	e012      	b.n	8016cb6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016c90:	4b0b      	ldr	r3, [pc, #44]	@ (8016cc0 <xTimerGenericCommand+0x98>)
 8016c92:	6818      	ldr	r0, [r3, #0]
 8016c94:	f107 0110 	add.w	r1, r7, #16
 8016c98:	2300      	movs	r3, #0
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	f7fe fbb0 	bl	8015400 <xQueueGenericSend>
 8016ca0:	6278      	str	r0, [r7, #36]	@ 0x24
 8016ca2:	e008      	b.n	8016cb6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016ca4:	4b06      	ldr	r3, [pc, #24]	@ (8016cc0 <xTimerGenericCommand+0x98>)
 8016ca6:	6818      	ldr	r0, [r3, #0]
 8016ca8:	f107 0110 	add.w	r1, r7, #16
 8016cac:	2300      	movs	r3, #0
 8016cae:	683a      	ldr	r2, [r7, #0]
 8016cb0:	f7fe fca8 	bl	8015604 <xQueueGenericSendFromISR>
 8016cb4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016cb8:	4618      	mov	r0, r3
 8016cba:	3728      	adds	r7, #40	@ 0x28
 8016cbc:	46bd      	mov	sp, r7
 8016cbe:	bd80      	pop	{r7, pc}
 8016cc0:	24002610 	.word	0x24002610

08016cc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b088      	sub	sp, #32
 8016cc8:	af02      	add	r7, sp, #8
 8016cca:	6078      	str	r0, [r7, #4]
 8016ccc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016cce:	4b23      	ldr	r3, [pc, #140]	@ (8016d5c <prvProcessExpiredTimer+0x98>)
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	68db      	ldr	r3, [r3, #12]
 8016cd4:	68db      	ldr	r3, [r3, #12]
 8016cd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016cd8:	697b      	ldr	r3, [r7, #20]
 8016cda:	3304      	adds	r3, #4
 8016cdc:	4618      	mov	r0, r3
 8016cde:	f7fe fa1f 	bl	8015120 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016ce2:	697b      	ldr	r3, [r7, #20]
 8016ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016ce8:	f003 0304 	and.w	r3, r3, #4
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d023      	beq.n	8016d38 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8016cf0:	697b      	ldr	r3, [r7, #20]
 8016cf2:	699a      	ldr	r2, [r3, #24]
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	18d1      	adds	r1, r2, r3
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	683a      	ldr	r2, [r7, #0]
 8016cfc:	6978      	ldr	r0, [r7, #20]
 8016cfe:	f000 f8d5 	bl	8016eac <prvInsertTimerInActiveList>
 8016d02:	4603      	mov	r3, r0
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d020      	beq.n	8016d4a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016d08:	2300      	movs	r3, #0
 8016d0a:	9300      	str	r3, [sp, #0]
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	687a      	ldr	r2, [r7, #4]
 8016d10:	2100      	movs	r1, #0
 8016d12:	6978      	ldr	r0, [r7, #20]
 8016d14:	f7ff ff88 	bl	8016c28 <xTimerGenericCommand>
 8016d18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8016d1a:	693b      	ldr	r3, [r7, #16]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d114      	bne.n	8016d4a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8016d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d24:	f383 8811 	msr	BASEPRI, r3
 8016d28:	f3bf 8f6f 	isb	sy
 8016d2c:	f3bf 8f4f 	dsb	sy
 8016d30:	60fb      	str	r3, [r7, #12]
}
 8016d32:	bf00      	nop
 8016d34:	bf00      	nop
 8016d36:	e7fd      	b.n	8016d34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016d38:	697b      	ldr	r3, [r7, #20]
 8016d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016d3e:	f023 0301 	bic.w	r3, r3, #1
 8016d42:	b2da      	uxtb	r2, r3
 8016d44:	697b      	ldr	r3, [r7, #20]
 8016d46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016d4a:	697b      	ldr	r3, [r7, #20]
 8016d4c:	6a1b      	ldr	r3, [r3, #32]
 8016d4e:	6978      	ldr	r0, [r7, #20]
 8016d50:	4798      	blx	r3
}
 8016d52:	bf00      	nop
 8016d54:	3718      	adds	r7, #24
 8016d56:	46bd      	mov	sp, r7
 8016d58:	bd80      	pop	{r7, pc}
 8016d5a:	bf00      	nop
 8016d5c:	24002608 	.word	0x24002608

08016d60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b084      	sub	sp, #16
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016d68:	f107 0308 	add.w	r3, r7, #8
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f000 f859 	bl	8016e24 <prvGetNextExpireTime>
 8016d72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016d74:	68bb      	ldr	r3, [r7, #8]
 8016d76:	4619      	mov	r1, r3
 8016d78:	68f8      	ldr	r0, [r7, #12]
 8016d7a:	f000 f805 	bl	8016d88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8016d7e:	f000 f8d7 	bl	8016f30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016d82:	bf00      	nop
 8016d84:	e7f0      	b.n	8016d68 <prvTimerTask+0x8>
	...

08016d88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	b084      	sub	sp, #16
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
 8016d90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8016d92:	f7ff fa0f 	bl	80161b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016d96:	f107 0308 	add.w	r3, r7, #8
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f000 f866 	bl	8016e6c <prvSampleTimeNow>
 8016da0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8016da2:	68bb      	ldr	r3, [r7, #8]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d130      	bne.n	8016e0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016da8:	683b      	ldr	r3, [r7, #0]
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d10a      	bne.n	8016dc4 <prvProcessTimerOrBlockTask+0x3c>
 8016dae:	687a      	ldr	r2, [r7, #4]
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	429a      	cmp	r2, r3
 8016db4:	d806      	bhi.n	8016dc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8016db6:	f7ff fa0b 	bl	80161d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8016dba:	68f9      	ldr	r1, [r7, #12]
 8016dbc:	6878      	ldr	r0, [r7, #4]
 8016dbe:	f7ff ff81 	bl	8016cc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8016dc2:	e024      	b.n	8016e0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8016dc4:	683b      	ldr	r3, [r7, #0]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d008      	beq.n	8016ddc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8016dca:	4b13      	ldr	r3, [pc, #76]	@ (8016e18 <prvProcessTimerOrBlockTask+0x90>)
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d101      	bne.n	8016dd8 <prvProcessTimerOrBlockTask+0x50>
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	e000      	b.n	8016dda <prvProcessTimerOrBlockTask+0x52>
 8016dd8:	2300      	movs	r3, #0
 8016dda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8016e1c <prvProcessTimerOrBlockTask+0x94>)
 8016dde:	6818      	ldr	r0, [r3, #0]
 8016de0:	687a      	ldr	r2, [r7, #4]
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	1ad3      	subs	r3, r2, r3
 8016de6:	683a      	ldr	r2, [r7, #0]
 8016de8:	4619      	mov	r1, r3
 8016dea:	f7fe ff47 	bl	8015c7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8016dee:	f7ff f9ef 	bl	80161d0 <xTaskResumeAll>
 8016df2:	4603      	mov	r3, r0
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d10a      	bne.n	8016e0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8016df8:	4b09      	ldr	r3, [pc, #36]	@ (8016e20 <prvProcessTimerOrBlockTask+0x98>)
 8016dfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016dfe:	601a      	str	r2, [r3, #0]
 8016e00:	f3bf 8f4f 	dsb	sy
 8016e04:	f3bf 8f6f 	isb	sy
}
 8016e08:	e001      	b.n	8016e0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8016e0a:	f7ff f9e1 	bl	80161d0 <xTaskResumeAll>
}
 8016e0e:	bf00      	nop
 8016e10:	3710      	adds	r7, #16
 8016e12:	46bd      	mov	sp, r7
 8016e14:	bd80      	pop	{r7, pc}
 8016e16:	bf00      	nop
 8016e18:	2400260c 	.word	0x2400260c
 8016e1c:	24002610 	.word	0x24002610
 8016e20:	e000ed04 	.word	0xe000ed04

08016e24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8016e24:	b480      	push	{r7}
 8016e26:	b085      	sub	sp, #20
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8016e68 <prvGetNextExpireTime+0x44>)
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d101      	bne.n	8016e3a <prvGetNextExpireTime+0x16>
 8016e36:	2201      	movs	r2, #1
 8016e38:	e000      	b.n	8016e3c <prvGetNextExpireTime+0x18>
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d105      	bne.n	8016e54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016e48:	4b07      	ldr	r3, [pc, #28]	@ (8016e68 <prvGetNextExpireTime+0x44>)
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	68db      	ldr	r3, [r3, #12]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	60fb      	str	r3, [r7, #12]
 8016e52:	e001      	b.n	8016e58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016e54:	2300      	movs	r3, #0
 8016e56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016e58:	68fb      	ldr	r3, [r7, #12]
}
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	3714      	adds	r7, #20
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e64:	4770      	bx	lr
 8016e66:	bf00      	nop
 8016e68:	24002608 	.word	0x24002608

08016e6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b084      	sub	sp, #16
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016e74:	f7ff fa4a 	bl	801630c <xTaskGetTickCount>
 8016e78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8016e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8016ea8 <prvSampleTimeNow+0x3c>)
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	68fa      	ldr	r2, [r7, #12]
 8016e80:	429a      	cmp	r2, r3
 8016e82:	d205      	bcs.n	8016e90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016e84:	f000 f93a 	bl	80170fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	2201      	movs	r2, #1
 8016e8c:	601a      	str	r2, [r3, #0]
 8016e8e:	e002      	b.n	8016e96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	2200      	movs	r2, #0
 8016e94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8016e96:	4a04      	ldr	r2, [pc, #16]	@ (8016ea8 <prvSampleTimeNow+0x3c>)
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016e9c:	68fb      	ldr	r3, [r7, #12]
}
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	3710      	adds	r7, #16
 8016ea2:	46bd      	mov	sp, r7
 8016ea4:	bd80      	pop	{r7, pc}
 8016ea6:	bf00      	nop
 8016ea8:	24002618 	.word	0x24002618

08016eac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b086      	sub	sp, #24
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	60f8      	str	r0, [r7, #12]
 8016eb4:	60b9      	str	r1, [r7, #8]
 8016eb6:	607a      	str	r2, [r7, #4]
 8016eb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8016eba:	2300      	movs	r3, #0
 8016ebc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	68ba      	ldr	r2, [r7, #8]
 8016ec2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	68fa      	ldr	r2, [r7, #12]
 8016ec8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8016eca:	68ba      	ldr	r2, [r7, #8]
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	429a      	cmp	r2, r3
 8016ed0:	d812      	bhi.n	8016ef8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ed2:	687a      	ldr	r2, [r7, #4]
 8016ed4:	683b      	ldr	r3, [r7, #0]
 8016ed6:	1ad2      	subs	r2, r2, r3
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	699b      	ldr	r3, [r3, #24]
 8016edc:	429a      	cmp	r2, r3
 8016ede:	d302      	bcc.n	8016ee6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8016ee0:	2301      	movs	r3, #1
 8016ee2:	617b      	str	r3, [r7, #20]
 8016ee4:	e01b      	b.n	8016f1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016ee6:	4b10      	ldr	r3, [pc, #64]	@ (8016f28 <prvInsertTimerInActiveList+0x7c>)
 8016ee8:	681a      	ldr	r2, [r3, #0]
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	3304      	adds	r3, #4
 8016eee:	4619      	mov	r1, r3
 8016ef0:	4610      	mov	r0, r2
 8016ef2:	f7fe f8dc 	bl	80150ae <vListInsert>
 8016ef6:	e012      	b.n	8016f1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8016ef8:	687a      	ldr	r2, [r7, #4]
 8016efa:	683b      	ldr	r3, [r7, #0]
 8016efc:	429a      	cmp	r2, r3
 8016efe:	d206      	bcs.n	8016f0e <prvInsertTimerInActiveList+0x62>
 8016f00:	68ba      	ldr	r2, [r7, #8]
 8016f02:	683b      	ldr	r3, [r7, #0]
 8016f04:	429a      	cmp	r2, r3
 8016f06:	d302      	bcc.n	8016f0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8016f08:	2301      	movs	r3, #1
 8016f0a:	617b      	str	r3, [r7, #20]
 8016f0c:	e007      	b.n	8016f1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016f0e:	4b07      	ldr	r3, [pc, #28]	@ (8016f2c <prvInsertTimerInActiveList+0x80>)
 8016f10:	681a      	ldr	r2, [r3, #0]
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	3304      	adds	r3, #4
 8016f16:	4619      	mov	r1, r3
 8016f18:	4610      	mov	r0, r2
 8016f1a:	f7fe f8c8 	bl	80150ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8016f1e:	697b      	ldr	r3, [r7, #20]
}
 8016f20:	4618      	mov	r0, r3
 8016f22:	3718      	adds	r7, #24
 8016f24:	46bd      	mov	sp, r7
 8016f26:	bd80      	pop	{r7, pc}
 8016f28:	2400260c 	.word	0x2400260c
 8016f2c:	24002608 	.word	0x24002608

08016f30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b08e      	sub	sp, #56	@ 0x38
 8016f34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016f36:	e0ce      	b.n	80170d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	da19      	bge.n	8016f72 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8016f3e:	1d3b      	adds	r3, r7, #4
 8016f40:	3304      	adds	r3, #4
 8016f42:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8016f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d10b      	bne.n	8016f62 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8016f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f4e:	f383 8811 	msr	BASEPRI, r3
 8016f52:	f3bf 8f6f 	isb	sy
 8016f56:	f3bf 8f4f 	dsb	sy
 8016f5a:	61fb      	str	r3, [r7, #28]
}
 8016f5c:	bf00      	nop
 8016f5e:	bf00      	nop
 8016f60:	e7fd      	b.n	8016f5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016f68:	6850      	ldr	r0, [r2, #4]
 8016f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016f6c:	6892      	ldr	r2, [r2, #8]
 8016f6e:	4611      	mov	r1, r2
 8016f70:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	f2c0 80ae 	blt.w	80170d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f80:	695b      	ldr	r3, [r3, #20]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d004      	beq.n	8016f90 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f88:	3304      	adds	r3, #4
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	f7fe f8c8 	bl	8015120 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016f90:	463b      	mov	r3, r7
 8016f92:	4618      	mov	r0, r3
 8016f94:	f7ff ff6a 	bl	8016e6c <prvSampleTimeNow>
 8016f98:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	2b09      	cmp	r3, #9
 8016f9e:	f200 8097 	bhi.w	80170d0 <prvProcessReceivedCommands+0x1a0>
 8016fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8016fa8 <prvProcessReceivedCommands+0x78>)
 8016fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fa8:	08016fd1 	.word	0x08016fd1
 8016fac:	08016fd1 	.word	0x08016fd1
 8016fb0:	08016fd1 	.word	0x08016fd1
 8016fb4:	08017047 	.word	0x08017047
 8016fb8:	0801705b 	.word	0x0801705b
 8016fbc:	080170a7 	.word	0x080170a7
 8016fc0:	08016fd1 	.word	0x08016fd1
 8016fc4:	08016fd1 	.word	0x08016fd1
 8016fc8:	08017047 	.word	0x08017047
 8016fcc:	0801705b 	.word	0x0801705b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016fd6:	f043 0301 	orr.w	r3, r3, #1
 8016fda:	b2da      	uxtb	r2, r3
 8016fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016fe2:	68ba      	ldr	r2, [r7, #8]
 8016fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fe6:	699b      	ldr	r3, [r3, #24]
 8016fe8:	18d1      	adds	r1, r2, r3
 8016fea:	68bb      	ldr	r3, [r7, #8]
 8016fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016fee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016ff0:	f7ff ff5c 	bl	8016eac <prvInsertTimerInActiveList>
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d06c      	beq.n	80170d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ffc:	6a1b      	ldr	r3, [r3, #32]
 8016ffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017000:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017008:	f003 0304 	and.w	r3, r3, #4
 801700c:	2b00      	cmp	r3, #0
 801700e:	d061      	beq.n	80170d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017010:	68ba      	ldr	r2, [r7, #8]
 8017012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017014:	699b      	ldr	r3, [r3, #24]
 8017016:	441a      	add	r2, r3
 8017018:	2300      	movs	r3, #0
 801701a:	9300      	str	r3, [sp, #0]
 801701c:	2300      	movs	r3, #0
 801701e:	2100      	movs	r1, #0
 8017020:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017022:	f7ff fe01 	bl	8016c28 <xTimerGenericCommand>
 8017026:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017028:	6a3b      	ldr	r3, [r7, #32]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d152      	bne.n	80170d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801702e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017032:	f383 8811 	msr	BASEPRI, r3
 8017036:	f3bf 8f6f 	isb	sy
 801703a:	f3bf 8f4f 	dsb	sy
 801703e:	61bb      	str	r3, [r7, #24]
}
 8017040:	bf00      	nop
 8017042:	bf00      	nop
 8017044:	e7fd      	b.n	8017042 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017048:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801704c:	f023 0301 	bic.w	r3, r3, #1
 8017050:	b2da      	uxtb	r2, r3
 8017052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017054:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8017058:	e03d      	b.n	80170d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801705a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801705c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017060:	f043 0301 	orr.w	r3, r3, #1
 8017064:	b2da      	uxtb	r2, r3
 8017066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017068:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801706c:	68ba      	ldr	r2, [r7, #8]
 801706e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017070:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017074:	699b      	ldr	r3, [r3, #24]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d10b      	bne.n	8017092 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801707a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801707e:	f383 8811 	msr	BASEPRI, r3
 8017082:	f3bf 8f6f 	isb	sy
 8017086:	f3bf 8f4f 	dsb	sy
 801708a:	617b      	str	r3, [r7, #20]
}
 801708c:	bf00      	nop
 801708e:	bf00      	nop
 8017090:	e7fd      	b.n	801708e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017094:	699a      	ldr	r2, [r3, #24]
 8017096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017098:	18d1      	adds	r1, r2, r3
 801709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801709c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801709e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80170a0:	f7ff ff04 	bl	8016eac <prvInsertTimerInActiveList>
					break;
 80170a4:	e017      	b.n	80170d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80170a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80170ac:	f003 0302 	and.w	r3, r3, #2
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d103      	bne.n	80170bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80170b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80170b6:	f000 fbe7 	bl	8017888 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80170ba:	e00c      	b.n	80170d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80170bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80170c2:	f023 0301 	bic.w	r3, r3, #1
 80170c6:	b2da      	uxtb	r2, r3
 80170c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80170ce:	e002      	b.n	80170d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80170d0:	bf00      	nop
 80170d2:	e000      	b.n	80170d6 <prvProcessReceivedCommands+0x1a6>
					break;
 80170d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80170d6:	4b08      	ldr	r3, [pc, #32]	@ (80170f8 <prvProcessReceivedCommands+0x1c8>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	1d39      	adds	r1, r7, #4
 80170dc:	2200      	movs	r2, #0
 80170de:	4618      	mov	r0, r3
 80170e0:	f7fe fb2e 	bl	8015740 <xQueueReceive>
 80170e4:	4603      	mov	r3, r0
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	f47f af26 	bne.w	8016f38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80170ec:	bf00      	nop
 80170ee:	bf00      	nop
 80170f0:	3730      	adds	r7, #48	@ 0x30
 80170f2:	46bd      	mov	sp, r7
 80170f4:	bd80      	pop	{r7, pc}
 80170f6:	bf00      	nop
 80170f8:	24002610 	.word	0x24002610

080170fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b088      	sub	sp, #32
 8017100:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017102:	e049      	b.n	8017198 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017104:	4b2e      	ldr	r3, [pc, #184]	@ (80171c0 <prvSwitchTimerLists+0xc4>)
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	68db      	ldr	r3, [r3, #12]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801710e:	4b2c      	ldr	r3, [pc, #176]	@ (80171c0 <prvSwitchTimerLists+0xc4>)
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	68db      	ldr	r3, [r3, #12]
 8017114:	68db      	ldr	r3, [r3, #12]
 8017116:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	3304      	adds	r3, #4
 801711c:	4618      	mov	r0, r3
 801711e:	f7fd ffff 	bl	8015120 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	6a1b      	ldr	r3, [r3, #32]
 8017126:	68f8      	ldr	r0, [r7, #12]
 8017128:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017130:	f003 0304 	and.w	r3, r3, #4
 8017134:	2b00      	cmp	r3, #0
 8017136:	d02f      	beq.n	8017198 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	699b      	ldr	r3, [r3, #24]
 801713c:	693a      	ldr	r2, [r7, #16]
 801713e:	4413      	add	r3, r2
 8017140:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017142:	68ba      	ldr	r2, [r7, #8]
 8017144:	693b      	ldr	r3, [r7, #16]
 8017146:	429a      	cmp	r2, r3
 8017148:	d90e      	bls.n	8017168 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	68ba      	ldr	r2, [r7, #8]
 801714e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	68fa      	ldr	r2, [r7, #12]
 8017154:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017156:	4b1a      	ldr	r3, [pc, #104]	@ (80171c0 <prvSwitchTimerLists+0xc4>)
 8017158:	681a      	ldr	r2, [r3, #0]
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	3304      	adds	r3, #4
 801715e:	4619      	mov	r1, r3
 8017160:	4610      	mov	r0, r2
 8017162:	f7fd ffa4 	bl	80150ae <vListInsert>
 8017166:	e017      	b.n	8017198 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017168:	2300      	movs	r3, #0
 801716a:	9300      	str	r3, [sp, #0]
 801716c:	2300      	movs	r3, #0
 801716e:	693a      	ldr	r2, [r7, #16]
 8017170:	2100      	movs	r1, #0
 8017172:	68f8      	ldr	r0, [r7, #12]
 8017174:	f7ff fd58 	bl	8016c28 <xTimerGenericCommand>
 8017178:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d10b      	bne.n	8017198 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8017180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017184:	f383 8811 	msr	BASEPRI, r3
 8017188:	f3bf 8f6f 	isb	sy
 801718c:	f3bf 8f4f 	dsb	sy
 8017190:	603b      	str	r3, [r7, #0]
}
 8017192:	bf00      	nop
 8017194:	bf00      	nop
 8017196:	e7fd      	b.n	8017194 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017198:	4b09      	ldr	r3, [pc, #36]	@ (80171c0 <prvSwitchTimerLists+0xc4>)
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d1b0      	bne.n	8017104 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80171a2:	4b07      	ldr	r3, [pc, #28]	@ (80171c0 <prvSwitchTimerLists+0xc4>)
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80171a8:	4b06      	ldr	r3, [pc, #24]	@ (80171c4 <prvSwitchTimerLists+0xc8>)
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	4a04      	ldr	r2, [pc, #16]	@ (80171c0 <prvSwitchTimerLists+0xc4>)
 80171ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80171b0:	4a04      	ldr	r2, [pc, #16]	@ (80171c4 <prvSwitchTimerLists+0xc8>)
 80171b2:	697b      	ldr	r3, [r7, #20]
 80171b4:	6013      	str	r3, [r2, #0]
}
 80171b6:	bf00      	nop
 80171b8:	3718      	adds	r7, #24
 80171ba:	46bd      	mov	sp, r7
 80171bc:	bd80      	pop	{r7, pc}
 80171be:	bf00      	nop
 80171c0:	24002608 	.word	0x24002608
 80171c4:	2400260c 	.word	0x2400260c

080171c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b082      	sub	sp, #8
 80171cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80171ce:	f000 f96b 	bl	80174a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80171d2:	4b15      	ldr	r3, [pc, #84]	@ (8017228 <prvCheckForValidListAndQueue+0x60>)
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d120      	bne.n	801721c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80171da:	4814      	ldr	r0, [pc, #80]	@ (801722c <prvCheckForValidListAndQueue+0x64>)
 80171dc:	f7fd ff16 	bl	801500c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80171e0:	4813      	ldr	r0, [pc, #76]	@ (8017230 <prvCheckForValidListAndQueue+0x68>)
 80171e2:	f7fd ff13 	bl	801500c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80171e6:	4b13      	ldr	r3, [pc, #76]	@ (8017234 <prvCheckForValidListAndQueue+0x6c>)
 80171e8:	4a10      	ldr	r2, [pc, #64]	@ (801722c <prvCheckForValidListAndQueue+0x64>)
 80171ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80171ec:	4b12      	ldr	r3, [pc, #72]	@ (8017238 <prvCheckForValidListAndQueue+0x70>)
 80171ee:	4a10      	ldr	r2, [pc, #64]	@ (8017230 <prvCheckForValidListAndQueue+0x68>)
 80171f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80171f2:	2300      	movs	r3, #0
 80171f4:	9300      	str	r3, [sp, #0]
 80171f6:	4b11      	ldr	r3, [pc, #68]	@ (801723c <prvCheckForValidListAndQueue+0x74>)
 80171f8:	4a11      	ldr	r2, [pc, #68]	@ (8017240 <prvCheckForValidListAndQueue+0x78>)
 80171fa:	2110      	movs	r1, #16
 80171fc:	200a      	movs	r0, #10
 80171fe:	f7fe f823 	bl	8015248 <xQueueGenericCreateStatic>
 8017202:	4603      	mov	r3, r0
 8017204:	4a08      	ldr	r2, [pc, #32]	@ (8017228 <prvCheckForValidListAndQueue+0x60>)
 8017206:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017208:	4b07      	ldr	r3, [pc, #28]	@ (8017228 <prvCheckForValidListAndQueue+0x60>)
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d005      	beq.n	801721c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017210:	4b05      	ldr	r3, [pc, #20]	@ (8017228 <prvCheckForValidListAndQueue+0x60>)
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	490b      	ldr	r1, [pc, #44]	@ (8017244 <prvCheckForValidListAndQueue+0x7c>)
 8017216:	4618      	mov	r0, r3
 8017218:	f7fe fd06 	bl	8015c28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801721c:	f000 f976 	bl	801750c <vPortExitCritical>
}
 8017220:	bf00      	nop
 8017222:	46bd      	mov	sp, r7
 8017224:	bd80      	pop	{r7, pc}
 8017226:	bf00      	nop
 8017228:	24002610 	.word	0x24002610
 801722c:	240025e0 	.word	0x240025e0
 8017230:	240025f4 	.word	0x240025f4
 8017234:	24002608 	.word	0x24002608
 8017238:	2400260c 	.word	0x2400260c
 801723c:	240026bc 	.word	0x240026bc
 8017240:	2400261c 	.word	0x2400261c
 8017244:	08019f50 	.word	0x08019f50

08017248 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017248:	b480      	push	{r7}
 801724a:	b085      	sub	sp, #20
 801724c:	af00      	add	r7, sp, #0
 801724e:	60f8      	str	r0, [r7, #12]
 8017250:	60b9      	str	r1, [r7, #8]
 8017252:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	3b04      	subs	r3, #4
 8017258:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8017260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	3b04      	subs	r3, #4
 8017266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017268:	68bb      	ldr	r3, [r7, #8]
 801726a:	f023 0201 	bic.w	r2, r3, #1
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	3b04      	subs	r3, #4
 8017276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017278:	4a0c      	ldr	r2, [pc, #48]	@ (80172ac <pxPortInitialiseStack+0x64>)
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	3b14      	subs	r3, #20
 8017282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017284:	687a      	ldr	r2, [r7, #4]
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	3b04      	subs	r3, #4
 801728e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	f06f 0202 	mvn.w	r2, #2
 8017296:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	3b20      	subs	r3, #32
 801729c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801729e:	68fb      	ldr	r3, [r7, #12]
}
 80172a0:	4618      	mov	r0, r3
 80172a2:	3714      	adds	r7, #20
 80172a4:	46bd      	mov	sp, r7
 80172a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172aa:	4770      	bx	lr
 80172ac:	080172b1 	.word	0x080172b1

080172b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80172b0:	b480      	push	{r7}
 80172b2:	b085      	sub	sp, #20
 80172b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80172b6:	2300      	movs	r3, #0
 80172b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80172ba:	4b13      	ldr	r3, [pc, #76]	@ (8017308 <prvTaskExitError+0x58>)
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172c2:	d00b      	beq.n	80172dc <prvTaskExitError+0x2c>
	__asm volatile
 80172c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172c8:	f383 8811 	msr	BASEPRI, r3
 80172cc:	f3bf 8f6f 	isb	sy
 80172d0:	f3bf 8f4f 	dsb	sy
 80172d4:	60fb      	str	r3, [r7, #12]
}
 80172d6:	bf00      	nop
 80172d8:	bf00      	nop
 80172da:	e7fd      	b.n	80172d8 <prvTaskExitError+0x28>
	__asm volatile
 80172dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172e0:	f383 8811 	msr	BASEPRI, r3
 80172e4:	f3bf 8f6f 	isb	sy
 80172e8:	f3bf 8f4f 	dsb	sy
 80172ec:	60bb      	str	r3, [r7, #8]
}
 80172ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80172f0:	bf00      	nop
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d0fc      	beq.n	80172f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80172f8:	bf00      	nop
 80172fa:	bf00      	nop
 80172fc:	3714      	adds	r7, #20
 80172fe:	46bd      	mov	sp, r7
 8017300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017304:	4770      	bx	lr
 8017306:	bf00      	nop
 8017308:	24000150 	.word	0x24000150
 801730c:	00000000 	.word	0x00000000

08017310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017310:	4b07      	ldr	r3, [pc, #28]	@ (8017330 <pxCurrentTCBConst2>)
 8017312:	6819      	ldr	r1, [r3, #0]
 8017314:	6808      	ldr	r0, [r1, #0]
 8017316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801731a:	f380 8809 	msr	PSP, r0
 801731e:	f3bf 8f6f 	isb	sy
 8017322:	f04f 0000 	mov.w	r0, #0
 8017326:	f380 8811 	msr	BASEPRI, r0
 801732a:	4770      	bx	lr
 801732c:	f3af 8000 	nop.w

08017330 <pxCurrentTCBConst2>:
 8017330:	240020d8 	.word	0x240020d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017334:	bf00      	nop
 8017336:	bf00      	nop

08017338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017338:	4808      	ldr	r0, [pc, #32]	@ (801735c <prvPortStartFirstTask+0x24>)
 801733a:	6800      	ldr	r0, [r0, #0]
 801733c:	6800      	ldr	r0, [r0, #0]
 801733e:	f380 8808 	msr	MSP, r0
 8017342:	f04f 0000 	mov.w	r0, #0
 8017346:	f380 8814 	msr	CONTROL, r0
 801734a:	b662      	cpsie	i
 801734c:	b661      	cpsie	f
 801734e:	f3bf 8f4f 	dsb	sy
 8017352:	f3bf 8f6f 	isb	sy
 8017356:	df00      	svc	0
 8017358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801735a:	bf00      	nop
 801735c:	e000ed08 	.word	0xe000ed08

08017360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017360:	b580      	push	{r7, lr}
 8017362:	b086      	sub	sp, #24
 8017364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017366:	4b47      	ldr	r3, [pc, #284]	@ (8017484 <xPortStartScheduler+0x124>)
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	4a47      	ldr	r2, [pc, #284]	@ (8017488 <xPortStartScheduler+0x128>)
 801736c:	4293      	cmp	r3, r2
 801736e:	d10b      	bne.n	8017388 <xPortStartScheduler+0x28>
	__asm volatile
 8017370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017374:	f383 8811 	msr	BASEPRI, r3
 8017378:	f3bf 8f6f 	isb	sy
 801737c:	f3bf 8f4f 	dsb	sy
 8017380:	613b      	str	r3, [r7, #16]
}
 8017382:	bf00      	nop
 8017384:	bf00      	nop
 8017386:	e7fd      	b.n	8017384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017388:	4b3e      	ldr	r3, [pc, #248]	@ (8017484 <xPortStartScheduler+0x124>)
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	4a3f      	ldr	r2, [pc, #252]	@ (801748c <xPortStartScheduler+0x12c>)
 801738e:	4293      	cmp	r3, r2
 8017390:	d10b      	bne.n	80173aa <xPortStartScheduler+0x4a>
	__asm volatile
 8017392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017396:	f383 8811 	msr	BASEPRI, r3
 801739a:	f3bf 8f6f 	isb	sy
 801739e:	f3bf 8f4f 	dsb	sy
 80173a2:	60fb      	str	r3, [r7, #12]
}
 80173a4:	bf00      	nop
 80173a6:	bf00      	nop
 80173a8:	e7fd      	b.n	80173a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80173aa:	4b39      	ldr	r3, [pc, #228]	@ (8017490 <xPortStartScheduler+0x130>)
 80173ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80173ae:	697b      	ldr	r3, [r7, #20]
 80173b0:	781b      	ldrb	r3, [r3, #0]
 80173b2:	b2db      	uxtb	r3, r3
 80173b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80173b6:	697b      	ldr	r3, [r7, #20]
 80173b8:	22ff      	movs	r2, #255	@ 0xff
 80173ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80173bc:	697b      	ldr	r3, [r7, #20]
 80173be:	781b      	ldrb	r3, [r3, #0]
 80173c0:	b2db      	uxtb	r3, r3
 80173c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80173c4:	78fb      	ldrb	r3, [r7, #3]
 80173c6:	b2db      	uxtb	r3, r3
 80173c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80173cc:	b2da      	uxtb	r2, r3
 80173ce:	4b31      	ldr	r3, [pc, #196]	@ (8017494 <xPortStartScheduler+0x134>)
 80173d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80173d2:	4b31      	ldr	r3, [pc, #196]	@ (8017498 <xPortStartScheduler+0x138>)
 80173d4:	2207      	movs	r2, #7
 80173d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80173d8:	e009      	b.n	80173ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80173da:	4b2f      	ldr	r3, [pc, #188]	@ (8017498 <xPortStartScheduler+0x138>)
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	3b01      	subs	r3, #1
 80173e0:	4a2d      	ldr	r2, [pc, #180]	@ (8017498 <xPortStartScheduler+0x138>)
 80173e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80173e4:	78fb      	ldrb	r3, [r7, #3]
 80173e6:	b2db      	uxtb	r3, r3
 80173e8:	005b      	lsls	r3, r3, #1
 80173ea:	b2db      	uxtb	r3, r3
 80173ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80173ee:	78fb      	ldrb	r3, [r7, #3]
 80173f0:	b2db      	uxtb	r3, r3
 80173f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80173f6:	2b80      	cmp	r3, #128	@ 0x80
 80173f8:	d0ef      	beq.n	80173da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80173fa:	4b27      	ldr	r3, [pc, #156]	@ (8017498 <xPortStartScheduler+0x138>)
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	f1c3 0307 	rsb	r3, r3, #7
 8017402:	2b04      	cmp	r3, #4
 8017404:	d00b      	beq.n	801741e <xPortStartScheduler+0xbe>
	__asm volatile
 8017406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801740a:	f383 8811 	msr	BASEPRI, r3
 801740e:	f3bf 8f6f 	isb	sy
 8017412:	f3bf 8f4f 	dsb	sy
 8017416:	60bb      	str	r3, [r7, #8]
}
 8017418:	bf00      	nop
 801741a:	bf00      	nop
 801741c:	e7fd      	b.n	801741a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801741e:	4b1e      	ldr	r3, [pc, #120]	@ (8017498 <xPortStartScheduler+0x138>)
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	021b      	lsls	r3, r3, #8
 8017424:	4a1c      	ldr	r2, [pc, #112]	@ (8017498 <xPortStartScheduler+0x138>)
 8017426:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017428:	4b1b      	ldr	r3, [pc, #108]	@ (8017498 <xPortStartScheduler+0x138>)
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8017430:	4a19      	ldr	r2, [pc, #100]	@ (8017498 <xPortStartScheduler+0x138>)
 8017432:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	b2da      	uxtb	r2, r3
 8017438:	697b      	ldr	r3, [r7, #20]
 801743a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801743c:	4b17      	ldr	r3, [pc, #92]	@ (801749c <xPortStartScheduler+0x13c>)
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	4a16      	ldr	r2, [pc, #88]	@ (801749c <xPortStartScheduler+0x13c>)
 8017442:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8017446:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017448:	4b14      	ldr	r3, [pc, #80]	@ (801749c <xPortStartScheduler+0x13c>)
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	4a13      	ldr	r2, [pc, #76]	@ (801749c <xPortStartScheduler+0x13c>)
 801744e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8017452:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017454:	f000 f8da 	bl	801760c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017458:	4b11      	ldr	r3, [pc, #68]	@ (80174a0 <xPortStartScheduler+0x140>)
 801745a:	2200      	movs	r2, #0
 801745c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801745e:	f000 f8f9 	bl	8017654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017462:	4b10      	ldr	r3, [pc, #64]	@ (80174a4 <xPortStartScheduler+0x144>)
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	4a0f      	ldr	r2, [pc, #60]	@ (80174a4 <xPortStartScheduler+0x144>)
 8017468:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801746c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801746e:	f7ff ff63 	bl	8017338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017472:	f7ff f815 	bl	80164a0 <vTaskSwitchContext>
	prvTaskExitError();
 8017476:	f7ff ff1b 	bl	80172b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801747a:	2300      	movs	r3, #0
}
 801747c:	4618      	mov	r0, r3
 801747e:	3718      	adds	r7, #24
 8017480:	46bd      	mov	sp, r7
 8017482:	bd80      	pop	{r7, pc}
 8017484:	e000ed00 	.word	0xe000ed00
 8017488:	410fc271 	.word	0x410fc271
 801748c:	410fc270 	.word	0x410fc270
 8017490:	e000e400 	.word	0xe000e400
 8017494:	2400270c 	.word	0x2400270c
 8017498:	24002710 	.word	0x24002710
 801749c:	e000ed20 	.word	0xe000ed20
 80174a0:	24000150 	.word	0x24000150
 80174a4:	e000ef34 	.word	0xe000ef34

080174a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80174a8:	b480      	push	{r7}
 80174aa:	b083      	sub	sp, #12
 80174ac:	af00      	add	r7, sp, #0
	__asm volatile
 80174ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80174b2:	f383 8811 	msr	BASEPRI, r3
 80174b6:	f3bf 8f6f 	isb	sy
 80174ba:	f3bf 8f4f 	dsb	sy
 80174be:	607b      	str	r3, [r7, #4]
}
 80174c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80174c2:	4b10      	ldr	r3, [pc, #64]	@ (8017504 <vPortEnterCritical+0x5c>)
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	3301      	adds	r3, #1
 80174c8:	4a0e      	ldr	r2, [pc, #56]	@ (8017504 <vPortEnterCritical+0x5c>)
 80174ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80174cc:	4b0d      	ldr	r3, [pc, #52]	@ (8017504 <vPortEnterCritical+0x5c>)
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	2b01      	cmp	r3, #1
 80174d2:	d110      	bne.n	80174f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80174d4:	4b0c      	ldr	r3, [pc, #48]	@ (8017508 <vPortEnterCritical+0x60>)
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	b2db      	uxtb	r3, r3
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d00b      	beq.n	80174f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80174de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80174e2:	f383 8811 	msr	BASEPRI, r3
 80174e6:	f3bf 8f6f 	isb	sy
 80174ea:	f3bf 8f4f 	dsb	sy
 80174ee:	603b      	str	r3, [r7, #0]
}
 80174f0:	bf00      	nop
 80174f2:	bf00      	nop
 80174f4:	e7fd      	b.n	80174f2 <vPortEnterCritical+0x4a>
	}
}
 80174f6:	bf00      	nop
 80174f8:	370c      	adds	r7, #12
 80174fa:	46bd      	mov	sp, r7
 80174fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017500:	4770      	bx	lr
 8017502:	bf00      	nop
 8017504:	24000150 	.word	0x24000150
 8017508:	e000ed04 	.word	0xe000ed04

0801750c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801750c:	b480      	push	{r7}
 801750e:	b083      	sub	sp, #12
 8017510:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017512:	4b12      	ldr	r3, [pc, #72]	@ (801755c <vPortExitCritical+0x50>)
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	2b00      	cmp	r3, #0
 8017518:	d10b      	bne.n	8017532 <vPortExitCritical+0x26>
	__asm volatile
 801751a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801751e:	f383 8811 	msr	BASEPRI, r3
 8017522:	f3bf 8f6f 	isb	sy
 8017526:	f3bf 8f4f 	dsb	sy
 801752a:	607b      	str	r3, [r7, #4]
}
 801752c:	bf00      	nop
 801752e:	bf00      	nop
 8017530:	e7fd      	b.n	801752e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017532:	4b0a      	ldr	r3, [pc, #40]	@ (801755c <vPortExitCritical+0x50>)
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	3b01      	subs	r3, #1
 8017538:	4a08      	ldr	r2, [pc, #32]	@ (801755c <vPortExitCritical+0x50>)
 801753a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801753c:	4b07      	ldr	r3, [pc, #28]	@ (801755c <vPortExitCritical+0x50>)
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d105      	bne.n	8017550 <vPortExitCritical+0x44>
 8017544:	2300      	movs	r3, #0
 8017546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017548:	683b      	ldr	r3, [r7, #0]
 801754a:	f383 8811 	msr	BASEPRI, r3
}
 801754e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017550:	bf00      	nop
 8017552:	370c      	adds	r7, #12
 8017554:	46bd      	mov	sp, r7
 8017556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755a:	4770      	bx	lr
 801755c:	24000150 	.word	0x24000150

08017560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017560:	f3ef 8009 	mrs	r0, PSP
 8017564:	f3bf 8f6f 	isb	sy
 8017568:	4b15      	ldr	r3, [pc, #84]	@ (80175c0 <pxCurrentTCBConst>)
 801756a:	681a      	ldr	r2, [r3, #0]
 801756c:	f01e 0f10 	tst.w	lr, #16
 8017570:	bf08      	it	eq
 8017572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801757a:	6010      	str	r0, [r2, #0]
 801757c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017580:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8017584:	f380 8811 	msr	BASEPRI, r0
 8017588:	f3bf 8f4f 	dsb	sy
 801758c:	f3bf 8f6f 	isb	sy
 8017590:	f7fe ff86 	bl	80164a0 <vTaskSwitchContext>
 8017594:	f04f 0000 	mov.w	r0, #0
 8017598:	f380 8811 	msr	BASEPRI, r0
 801759c:	bc09      	pop	{r0, r3}
 801759e:	6819      	ldr	r1, [r3, #0]
 80175a0:	6808      	ldr	r0, [r1, #0]
 80175a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175a6:	f01e 0f10 	tst.w	lr, #16
 80175aa:	bf08      	it	eq
 80175ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80175b0:	f380 8809 	msr	PSP, r0
 80175b4:	f3bf 8f6f 	isb	sy
 80175b8:	4770      	bx	lr
 80175ba:	bf00      	nop
 80175bc:	f3af 8000 	nop.w

080175c0 <pxCurrentTCBConst>:
 80175c0:	240020d8 	.word	0x240020d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80175c4:	bf00      	nop
 80175c6:	bf00      	nop

080175c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80175c8:	b580      	push	{r7, lr}
 80175ca:	b082      	sub	sp, #8
 80175cc:	af00      	add	r7, sp, #0
	__asm volatile
 80175ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175d2:	f383 8811 	msr	BASEPRI, r3
 80175d6:	f3bf 8f6f 	isb	sy
 80175da:	f3bf 8f4f 	dsb	sy
 80175de:	607b      	str	r3, [r7, #4]
}
 80175e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80175e2:	f7fe fea3 	bl	801632c <xTaskIncrementTick>
 80175e6:	4603      	mov	r3, r0
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d003      	beq.n	80175f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80175ec:	4b06      	ldr	r3, [pc, #24]	@ (8017608 <xPortSysTickHandler+0x40>)
 80175ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80175f2:	601a      	str	r2, [r3, #0]
 80175f4:	2300      	movs	r3, #0
 80175f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80175f8:	683b      	ldr	r3, [r7, #0]
 80175fa:	f383 8811 	msr	BASEPRI, r3
}
 80175fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017600:	bf00      	nop
 8017602:	3708      	adds	r7, #8
 8017604:	46bd      	mov	sp, r7
 8017606:	bd80      	pop	{r7, pc}
 8017608:	e000ed04 	.word	0xe000ed04

0801760c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801760c:	b480      	push	{r7}
 801760e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017610:	4b0b      	ldr	r3, [pc, #44]	@ (8017640 <vPortSetupTimerInterrupt+0x34>)
 8017612:	2200      	movs	r2, #0
 8017614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017616:	4b0b      	ldr	r3, [pc, #44]	@ (8017644 <vPortSetupTimerInterrupt+0x38>)
 8017618:	2200      	movs	r2, #0
 801761a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801761c:	4b0a      	ldr	r3, [pc, #40]	@ (8017648 <vPortSetupTimerInterrupt+0x3c>)
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	4a0a      	ldr	r2, [pc, #40]	@ (801764c <vPortSetupTimerInterrupt+0x40>)
 8017622:	fba2 2303 	umull	r2, r3, r2, r3
 8017626:	099b      	lsrs	r3, r3, #6
 8017628:	4a09      	ldr	r2, [pc, #36]	@ (8017650 <vPortSetupTimerInterrupt+0x44>)
 801762a:	3b01      	subs	r3, #1
 801762c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801762e:	4b04      	ldr	r3, [pc, #16]	@ (8017640 <vPortSetupTimerInterrupt+0x34>)
 8017630:	2207      	movs	r2, #7
 8017632:	601a      	str	r2, [r3, #0]
}
 8017634:	bf00      	nop
 8017636:	46bd      	mov	sp, r7
 8017638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801763c:	4770      	bx	lr
 801763e:	bf00      	nop
 8017640:	e000e010 	.word	0xe000e010
 8017644:	e000e018 	.word	0xe000e018
 8017648:	240000b4 	.word	0x240000b4
 801764c:	10624dd3 	.word	0x10624dd3
 8017650:	e000e014 	.word	0xe000e014

08017654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017654:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8017664 <vPortEnableVFP+0x10>
 8017658:	6801      	ldr	r1, [r0, #0]
 801765a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801765e:	6001      	str	r1, [r0, #0]
 8017660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017662:	bf00      	nop
 8017664:	e000ed88 	.word	0xe000ed88

08017668 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017668:	b480      	push	{r7}
 801766a:	b085      	sub	sp, #20
 801766c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801766e:	f3ef 8305 	mrs	r3, IPSR
 8017672:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	2b0f      	cmp	r3, #15
 8017678:	d915      	bls.n	80176a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801767a:	4a18      	ldr	r2, [pc, #96]	@ (80176dc <vPortValidateInterruptPriority+0x74>)
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	4413      	add	r3, r2
 8017680:	781b      	ldrb	r3, [r3, #0]
 8017682:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017684:	4b16      	ldr	r3, [pc, #88]	@ (80176e0 <vPortValidateInterruptPriority+0x78>)
 8017686:	781b      	ldrb	r3, [r3, #0]
 8017688:	7afa      	ldrb	r2, [r7, #11]
 801768a:	429a      	cmp	r2, r3
 801768c:	d20b      	bcs.n	80176a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801768e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017692:	f383 8811 	msr	BASEPRI, r3
 8017696:	f3bf 8f6f 	isb	sy
 801769a:	f3bf 8f4f 	dsb	sy
 801769e:	607b      	str	r3, [r7, #4]
}
 80176a0:	bf00      	nop
 80176a2:	bf00      	nop
 80176a4:	e7fd      	b.n	80176a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80176a6:	4b0f      	ldr	r3, [pc, #60]	@ (80176e4 <vPortValidateInterruptPriority+0x7c>)
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80176ae:	4b0e      	ldr	r3, [pc, #56]	@ (80176e8 <vPortValidateInterruptPriority+0x80>)
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	429a      	cmp	r2, r3
 80176b4:	d90b      	bls.n	80176ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80176b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176ba:	f383 8811 	msr	BASEPRI, r3
 80176be:	f3bf 8f6f 	isb	sy
 80176c2:	f3bf 8f4f 	dsb	sy
 80176c6:	603b      	str	r3, [r7, #0]
}
 80176c8:	bf00      	nop
 80176ca:	bf00      	nop
 80176cc:	e7fd      	b.n	80176ca <vPortValidateInterruptPriority+0x62>
	}
 80176ce:	bf00      	nop
 80176d0:	3714      	adds	r7, #20
 80176d2:	46bd      	mov	sp, r7
 80176d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d8:	4770      	bx	lr
 80176da:	bf00      	nop
 80176dc:	e000e3f0 	.word	0xe000e3f0
 80176e0:	2400270c 	.word	0x2400270c
 80176e4:	e000ed0c 	.word	0xe000ed0c
 80176e8:	24002710 	.word	0x24002710

080176ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	b08a      	sub	sp, #40	@ 0x28
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80176f4:	2300      	movs	r3, #0
 80176f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80176f8:	f7fe fd5c 	bl	80161b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80176fc:	4b5c      	ldr	r3, [pc, #368]	@ (8017870 <pvPortMalloc+0x184>)
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	2b00      	cmp	r3, #0
 8017702:	d101      	bne.n	8017708 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017704:	f000 f924 	bl	8017950 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017708:	4b5a      	ldr	r3, [pc, #360]	@ (8017874 <pvPortMalloc+0x188>)
 801770a:	681a      	ldr	r2, [r3, #0]
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	4013      	ands	r3, r2
 8017710:	2b00      	cmp	r3, #0
 8017712:	f040 8095 	bne.w	8017840 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d01e      	beq.n	801775a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801771c:	2208      	movs	r2, #8
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	4413      	add	r3, r2
 8017722:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	f003 0307 	and.w	r3, r3, #7
 801772a:	2b00      	cmp	r3, #0
 801772c:	d015      	beq.n	801775a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	f023 0307 	bic.w	r3, r3, #7
 8017734:	3308      	adds	r3, #8
 8017736:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	f003 0307 	and.w	r3, r3, #7
 801773e:	2b00      	cmp	r3, #0
 8017740:	d00b      	beq.n	801775a <pvPortMalloc+0x6e>
	__asm volatile
 8017742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017746:	f383 8811 	msr	BASEPRI, r3
 801774a:	f3bf 8f6f 	isb	sy
 801774e:	f3bf 8f4f 	dsb	sy
 8017752:	617b      	str	r3, [r7, #20]
}
 8017754:	bf00      	nop
 8017756:	bf00      	nop
 8017758:	e7fd      	b.n	8017756 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d06f      	beq.n	8017840 <pvPortMalloc+0x154>
 8017760:	4b45      	ldr	r3, [pc, #276]	@ (8017878 <pvPortMalloc+0x18c>)
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	687a      	ldr	r2, [r7, #4]
 8017766:	429a      	cmp	r2, r3
 8017768:	d86a      	bhi.n	8017840 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801776a:	4b44      	ldr	r3, [pc, #272]	@ (801787c <pvPortMalloc+0x190>)
 801776c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801776e:	4b43      	ldr	r3, [pc, #268]	@ (801787c <pvPortMalloc+0x190>)
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017774:	e004      	b.n	8017780 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8017776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017778:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017782:	685b      	ldr	r3, [r3, #4]
 8017784:	687a      	ldr	r2, [r7, #4]
 8017786:	429a      	cmp	r2, r3
 8017788:	d903      	bls.n	8017792 <pvPortMalloc+0xa6>
 801778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d1f1      	bne.n	8017776 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017792:	4b37      	ldr	r3, [pc, #220]	@ (8017870 <pvPortMalloc+0x184>)
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017798:	429a      	cmp	r2, r3
 801779a:	d051      	beq.n	8017840 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801779c:	6a3b      	ldr	r3, [r7, #32]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	2208      	movs	r2, #8
 80177a2:	4413      	add	r3, r2
 80177a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80177a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177a8:	681a      	ldr	r2, [r3, #0]
 80177aa:	6a3b      	ldr	r3, [r7, #32]
 80177ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80177ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177b0:	685a      	ldr	r2, [r3, #4]
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	1ad2      	subs	r2, r2, r3
 80177b6:	2308      	movs	r3, #8
 80177b8:	005b      	lsls	r3, r3, #1
 80177ba:	429a      	cmp	r2, r3
 80177bc:	d920      	bls.n	8017800 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80177be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	4413      	add	r3, r2
 80177c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80177c6:	69bb      	ldr	r3, [r7, #24]
 80177c8:	f003 0307 	and.w	r3, r3, #7
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d00b      	beq.n	80177e8 <pvPortMalloc+0xfc>
	__asm volatile
 80177d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80177d4:	f383 8811 	msr	BASEPRI, r3
 80177d8:	f3bf 8f6f 	isb	sy
 80177dc:	f3bf 8f4f 	dsb	sy
 80177e0:	613b      	str	r3, [r7, #16]
}
 80177e2:	bf00      	nop
 80177e4:	bf00      	nop
 80177e6:	e7fd      	b.n	80177e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80177e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177ea:	685a      	ldr	r2, [r3, #4]
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	1ad2      	subs	r2, r2, r3
 80177f0:	69bb      	ldr	r3, [r7, #24]
 80177f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80177f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177f6:	687a      	ldr	r2, [r7, #4]
 80177f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80177fa:	69b8      	ldr	r0, [r7, #24]
 80177fc:	f000 f90c 	bl	8017a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017800:	4b1d      	ldr	r3, [pc, #116]	@ (8017878 <pvPortMalloc+0x18c>)
 8017802:	681a      	ldr	r2, [r3, #0]
 8017804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017806:	685b      	ldr	r3, [r3, #4]
 8017808:	1ad3      	subs	r3, r2, r3
 801780a:	4a1b      	ldr	r2, [pc, #108]	@ (8017878 <pvPortMalloc+0x18c>)
 801780c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801780e:	4b1a      	ldr	r3, [pc, #104]	@ (8017878 <pvPortMalloc+0x18c>)
 8017810:	681a      	ldr	r2, [r3, #0]
 8017812:	4b1b      	ldr	r3, [pc, #108]	@ (8017880 <pvPortMalloc+0x194>)
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	429a      	cmp	r2, r3
 8017818:	d203      	bcs.n	8017822 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801781a:	4b17      	ldr	r3, [pc, #92]	@ (8017878 <pvPortMalloc+0x18c>)
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	4a18      	ldr	r2, [pc, #96]	@ (8017880 <pvPortMalloc+0x194>)
 8017820:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017824:	685a      	ldr	r2, [r3, #4]
 8017826:	4b13      	ldr	r3, [pc, #76]	@ (8017874 <pvPortMalloc+0x188>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	431a      	orrs	r2, r3
 801782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801782e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017832:	2200      	movs	r2, #0
 8017834:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8017836:	4b13      	ldr	r3, [pc, #76]	@ (8017884 <pvPortMalloc+0x198>)
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	3301      	adds	r3, #1
 801783c:	4a11      	ldr	r2, [pc, #68]	@ (8017884 <pvPortMalloc+0x198>)
 801783e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017840:	f7fe fcc6 	bl	80161d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017844:	69fb      	ldr	r3, [r7, #28]
 8017846:	f003 0307 	and.w	r3, r3, #7
 801784a:	2b00      	cmp	r3, #0
 801784c:	d00b      	beq.n	8017866 <pvPortMalloc+0x17a>
	__asm volatile
 801784e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017852:	f383 8811 	msr	BASEPRI, r3
 8017856:	f3bf 8f6f 	isb	sy
 801785a:	f3bf 8f4f 	dsb	sy
 801785e:	60fb      	str	r3, [r7, #12]
}
 8017860:	bf00      	nop
 8017862:	bf00      	nop
 8017864:	e7fd      	b.n	8017862 <pvPortMalloc+0x176>
	return pvReturn;
 8017866:	69fb      	ldr	r3, [r7, #28]
}
 8017868:	4618      	mov	r0, r3
 801786a:	3728      	adds	r7, #40	@ 0x28
 801786c:	46bd      	mov	sp, r7
 801786e:	bd80      	pop	{r7, pc}
 8017870:	24027274 	.word	0x24027274
 8017874:	24027288 	.word	0x24027288
 8017878:	24027278 	.word	0x24027278
 801787c:	2402726c 	.word	0x2402726c
 8017880:	2402727c 	.word	0x2402727c
 8017884:	24027280 	.word	0x24027280

08017888 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b086      	sub	sp, #24
 801788c:	af00      	add	r7, sp, #0
 801788e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d04f      	beq.n	801793a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801789a:	2308      	movs	r3, #8
 801789c:	425b      	negs	r3, r3
 801789e:	697a      	ldr	r2, [r7, #20]
 80178a0:	4413      	add	r3, r2
 80178a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80178a4:	697b      	ldr	r3, [r7, #20]
 80178a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80178a8:	693b      	ldr	r3, [r7, #16]
 80178aa:	685a      	ldr	r2, [r3, #4]
 80178ac:	4b25      	ldr	r3, [pc, #148]	@ (8017944 <vPortFree+0xbc>)
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	4013      	ands	r3, r2
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d10b      	bne.n	80178ce <vPortFree+0x46>
	__asm volatile
 80178b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178ba:	f383 8811 	msr	BASEPRI, r3
 80178be:	f3bf 8f6f 	isb	sy
 80178c2:	f3bf 8f4f 	dsb	sy
 80178c6:	60fb      	str	r3, [r7, #12]
}
 80178c8:	bf00      	nop
 80178ca:	bf00      	nop
 80178cc:	e7fd      	b.n	80178ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80178ce:	693b      	ldr	r3, [r7, #16]
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d00b      	beq.n	80178ee <vPortFree+0x66>
	__asm volatile
 80178d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178da:	f383 8811 	msr	BASEPRI, r3
 80178de:	f3bf 8f6f 	isb	sy
 80178e2:	f3bf 8f4f 	dsb	sy
 80178e6:	60bb      	str	r3, [r7, #8]
}
 80178e8:	bf00      	nop
 80178ea:	bf00      	nop
 80178ec:	e7fd      	b.n	80178ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80178ee:	693b      	ldr	r3, [r7, #16]
 80178f0:	685a      	ldr	r2, [r3, #4]
 80178f2:	4b14      	ldr	r3, [pc, #80]	@ (8017944 <vPortFree+0xbc>)
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	4013      	ands	r3, r2
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d01e      	beq.n	801793a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80178fc:	693b      	ldr	r3, [r7, #16]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d11a      	bne.n	801793a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017904:	693b      	ldr	r3, [r7, #16]
 8017906:	685a      	ldr	r2, [r3, #4]
 8017908:	4b0e      	ldr	r3, [pc, #56]	@ (8017944 <vPortFree+0xbc>)
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	43db      	mvns	r3, r3
 801790e:	401a      	ands	r2, r3
 8017910:	693b      	ldr	r3, [r7, #16]
 8017912:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017914:	f7fe fc4e 	bl	80161b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017918:	693b      	ldr	r3, [r7, #16]
 801791a:	685a      	ldr	r2, [r3, #4]
 801791c:	4b0a      	ldr	r3, [pc, #40]	@ (8017948 <vPortFree+0xc0>)
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	4413      	add	r3, r2
 8017922:	4a09      	ldr	r2, [pc, #36]	@ (8017948 <vPortFree+0xc0>)
 8017924:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017926:	6938      	ldr	r0, [r7, #16]
 8017928:	f000 f876 	bl	8017a18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801792c:	4b07      	ldr	r3, [pc, #28]	@ (801794c <vPortFree+0xc4>)
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	3301      	adds	r3, #1
 8017932:	4a06      	ldr	r2, [pc, #24]	@ (801794c <vPortFree+0xc4>)
 8017934:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8017936:	f7fe fc4b 	bl	80161d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801793a:	bf00      	nop
 801793c:	3718      	adds	r7, #24
 801793e:	46bd      	mov	sp, r7
 8017940:	bd80      	pop	{r7, pc}
 8017942:	bf00      	nop
 8017944:	24027288 	.word	0x24027288
 8017948:	24027278 	.word	0x24027278
 801794c:	24027284 	.word	0x24027284

08017950 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017950:	b480      	push	{r7}
 8017952:	b085      	sub	sp, #20
 8017954:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017956:	4b29      	ldr	r3, [pc, #164]	@ (80179fc <prvHeapInit+0xac>)
 8017958:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801795a:	4b29      	ldr	r3, [pc, #164]	@ (8017a00 <prvHeapInit+0xb0>)
 801795c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	f003 0307 	and.w	r3, r3, #7
 8017964:	2b00      	cmp	r3, #0
 8017966:	d00c      	beq.n	8017982 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	3307      	adds	r3, #7
 801796c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	f023 0307 	bic.w	r3, r3, #7
 8017974:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017976:	68ba      	ldr	r2, [r7, #8]
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	1ad3      	subs	r3, r2, r3
 801797c:	4a20      	ldr	r2, [pc, #128]	@ (8017a00 <prvHeapInit+0xb0>)
 801797e:	4413      	add	r3, r2
 8017980:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017986:	4a1f      	ldr	r2, [pc, #124]	@ (8017a04 <prvHeapInit+0xb4>)
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801798c:	4b1d      	ldr	r3, [pc, #116]	@ (8017a04 <prvHeapInit+0xb4>)
 801798e:	2200      	movs	r2, #0
 8017990:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	68ba      	ldr	r2, [r7, #8]
 8017996:	4413      	add	r3, r2
 8017998:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801799a:	2208      	movs	r2, #8
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	1a9b      	subs	r3, r3, r2
 80179a0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	f023 0307 	bic.w	r3, r3, #7
 80179a8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	4a16      	ldr	r2, [pc, #88]	@ (8017a08 <prvHeapInit+0xb8>)
 80179ae:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80179b0:	4b15      	ldr	r3, [pc, #84]	@ (8017a08 <prvHeapInit+0xb8>)
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	2200      	movs	r2, #0
 80179b6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80179b8:	4b13      	ldr	r3, [pc, #76]	@ (8017a08 <prvHeapInit+0xb8>)
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	2200      	movs	r2, #0
 80179be:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80179c4:	683b      	ldr	r3, [r7, #0]
 80179c6:	68fa      	ldr	r2, [r7, #12]
 80179c8:	1ad2      	subs	r2, r2, r3
 80179ca:	683b      	ldr	r3, [r7, #0]
 80179cc:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80179ce:	4b0e      	ldr	r3, [pc, #56]	@ (8017a08 <prvHeapInit+0xb8>)
 80179d0:	681a      	ldr	r2, [r3, #0]
 80179d2:	683b      	ldr	r3, [r7, #0]
 80179d4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80179d6:	683b      	ldr	r3, [r7, #0]
 80179d8:	685b      	ldr	r3, [r3, #4]
 80179da:	4a0c      	ldr	r2, [pc, #48]	@ (8017a0c <prvHeapInit+0xbc>)
 80179dc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80179de:	683b      	ldr	r3, [r7, #0]
 80179e0:	685b      	ldr	r3, [r3, #4]
 80179e2:	4a0b      	ldr	r2, [pc, #44]	@ (8017a10 <prvHeapInit+0xc0>)
 80179e4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80179e6:	4b0b      	ldr	r3, [pc, #44]	@ (8017a14 <prvHeapInit+0xc4>)
 80179e8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80179ec:	601a      	str	r2, [r3, #0]
}
 80179ee:	bf00      	nop
 80179f0:	3714      	adds	r7, #20
 80179f2:	46bd      	mov	sp, r7
 80179f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f8:	4770      	bx	lr
 80179fa:	bf00      	nop
 80179fc:	00024b58 	.word	0x00024b58
 8017a00:	24002714 	.word	0x24002714
 8017a04:	2402726c 	.word	0x2402726c
 8017a08:	24027274 	.word	0x24027274
 8017a0c:	2402727c 	.word	0x2402727c
 8017a10:	24027278 	.word	0x24027278
 8017a14:	24027288 	.word	0x24027288

08017a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017a18:	b480      	push	{r7}
 8017a1a:	b085      	sub	sp, #20
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017a20:	4b28      	ldr	r3, [pc, #160]	@ (8017ac4 <prvInsertBlockIntoFreeList+0xac>)
 8017a22:	60fb      	str	r3, [r7, #12]
 8017a24:	e002      	b.n	8017a2c <prvInsertBlockIntoFreeList+0x14>
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	60fb      	str	r3, [r7, #12]
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	687a      	ldr	r2, [r7, #4]
 8017a32:	429a      	cmp	r2, r3
 8017a34:	d8f7      	bhi.n	8017a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	685b      	ldr	r3, [r3, #4]
 8017a3e:	68ba      	ldr	r2, [r7, #8]
 8017a40:	4413      	add	r3, r2
 8017a42:	687a      	ldr	r2, [r7, #4]
 8017a44:	429a      	cmp	r2, r3
 8017a46:	d108      	bne.n	8017a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	685a      	ldr	r2, [r3, #4]
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	685b      	ldr	r3, [r3, #4]
 8017a50:	441a      	add	r2, r3
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	685b      	ldr	r3, [r3, #4]
 8017a62:	68ba      	ldr	r2, [r7, #8]
 8017a64:	441a      	add	r2, r3
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	429a      	cmp	r2, r3
 8017a6c:	d118      	bne.n	8017aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	681a      	ldr	r2, [r3, #0]
 8017a72:	4b15      	ldr	r3, [pc, #84]	@ (8017ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	429a      	cmp	r2, r3
 8017a78:	d00d      	beq.n	8017a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	685a      	ldr	r2, [r3, #4]
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	685b      	ldr	r3, [r3, #4]
 8017a84:	441a      	add	r2, r3
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	681a      	ldr	r2, [r3, #0]
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	601a      	str	r2, [r3, #0]
 8017a94:	e008      	b.n	8017aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017a96:	4b0c      	ldr	r3, [pc, #48]	@ (8017ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8017a98:	681a      	ldr	r2, [r3, #0]
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	601a      	str	r2, [r3, #0]
 8017a9e:	e003      	b.n	8017aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	681a      	ldr	r2, [r3, #0]
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017aa8:	68fa      	ldr	r2, [r7, #12]
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	429a      	cmp	r2, r3
 8017aae:	d002      	beq.n	8017ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	687a      	ldr	r2, [r7, #4]
 8017ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017ab6:	bf00      	nop
 8017ab8:	3714      	adds	r7, #20
 8017aba:	46bd      	mov	sp, r7
 8017abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac0:	4770      	bx	lr
 8017ac2:	bf00      	nop
 8017ac4:	2402726c 	.word	0x2402726c
 8017ac8:	24027274 	.word	0x24027274

08017acc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017acc:	b580      	push	{r7, lr}
 8017ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	4913      	ldr	r1, [pc, #76]	@ (8017b20 <MX_USB_DEVICE_Init+0x54>)
 8017ad4:	4813      	ldr	r0, [pc, #76]	@ (8017b24 <MX_USB_DEVICE_Init+0x58>)
 8017ad6:	f7fb fcb1 	bl	801343c <USBD_Init>
 8017ada:	4603      	mov	r3, r0
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d001      	beq.n	8017ae4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017ae0:	f7eb fdea 	bl	80036b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017ae4:	4910      	ldr	r1, [pc, #64]	@ (8017b28 <MX_USB_DEVICE_Init+0x5c>)
 8017ae6:	480f      	ldr	r0, [pc, #60]	@ (8017b24 <MX_USB_DEVICE_Init+0x58>)
 8017ae8:	f7fb fce6 	bl	80134b8 <USBD_RegisterClass>
 8017aec:	4603      	mov	r3, r0
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d001      	beq.n	8017af6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017af2:	f7eb fde1 	bl	80036b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017af6:	490d      	ldr	r1, [pc, #52]	@ (8017b2c <MX_USB_DEVICE_Init+0x60>)
 8017af8:	480a      	ldr	r0, [pc, #40]	@ (8017b24 <MX_USB_DEVICE_Init+0x58>)
 8017afa:	f7fb fbcf 	bl	801329c <USBD_CDC_RegisterInterface>
 8017afe:	4603      	mov	r3, r0
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d001      	beq.n	8017b08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017b04:	f7eb fdd8 	bl	80036b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017b08:	4806      	ldr	r0, [pc, #24]	@ (8017b24 <MX_USB_DEVICE_Init+0x58>)
 8017b0a:	f7fb fd19 	bl	8013540 <USBD_Start>
 8017b0e:	4603      	mov	r3, r0
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d001      	beq.n	8017b18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017b14:	f7eb fdd0 	bl	80036b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017b18:	f7f2 fa28 	bl	8009f6c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017b1c:	bf00      	nop
 8017b1e:	bd80      	pop	{r7, pc}
 8017b20:	24000170 	.word	0x24000170
 8017b24:	2402728c 	.word	0x2402728c
 8017b28:	240000d0 	.word	0x240000d0
 8017b2c:	2400015c 	.word	0x2400015c

08017b30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017b34:	2200      	movs	r2, #0
 8017b36:	4905      	ldr	r1, [pc, #20]	@ (8017b4c <CDC_Init_FS+0x1c>)
 8017b38:	4805      	ldr	r0, [pc, #20]	@ (8017b50 <CDC_Init_FS+0x20>)
 8017b3a:	f7fb fbc9 	bl	80132d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017b3e:	4905      	ldr	r1, [pc, #20]	@ (8017b54 <CDC_Init_FS+0x24>)
 8017b40:	4803      	ldr	r0, [pc, #12]	@ (8017b50 <CDC_Init_FS+0x20>)
 8017b42:	f7fb fbe7 	bl	8013314 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017b46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017b48:	4618      	mov	r0, r3
 8017b4a:	bd80      	pop	{r7, pc}
 8017b4c:	24027d68 	.word	0x24027d68
 8017b50:	2402728c 	.word	0x2402728c
 8017b54:	24027568 	.word	0x24027568

08017b58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017b58:	b480      	push	{r7}
 8017b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017b5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017b5e:	4618      	mov	r0, r3
 8017b60:	46bd      	mov	sp, r7
 8017b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b66:	4770      	bx	lr

08017b68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017b68:	b480      	push	{r7}
 8017b6a:	b083      	sub	sp, #12
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	4603      	mov	r3, r0
 8017b70:	6039      	str	r1, [r7, #0]
 8017b72:	71fb      	strb	r3, [r7, #7]
 8017b74:	4613      	mov	r3, r2
 8017b76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017b78:	79fb      	ldrb	r3, [r7, #7]
 8017b7a:	2b23      	cmp	r3, #35	@ 0x23
 8017b7c:	f200 8098 	bhi.w	8017cb0 <CDC_Control_FS+0x148>
 8017b80:	a201      	add	r2, pc, #4	@ (adr r2, 8017b88 <CDC_Control_FS+0x20>)
 8017b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b86:	bf00      	nop
 8017b88:	08017cb1 	.word	0x08017cb1
 8017b8c:	08017cb1 	.word	0x08017cb1
 8017b90:	08017cb1 	.word	0x08017cb1
 8017b94:	08017cb1 	.word	0x08017cb1
 8017b98:	08017cb1 	.word	0x08017cb1
 8017b9c:	08017cb1 	.word	0x08017cb1
 8017ba0:	08017cb1 	.word	0x08017cb1
 8017ba4:	08017cb1 	.word	0x08017cb1
 8017ba8:	08017cb1 	.word	0x08017cb1
 8017bac:	08017cb1 	.word	0x08017cb1
 8017bb0:	08017cb1 	.word	0x08017cb1
 8017bb4:	08017cb1 	.word	0x08017cb1
 8017bb8:	08017cb1 	.word	0x08017cb1
 8017bbc:	08017cb1 	.word	0x08017cb1
 8017bc0:	08017cb1 	.word	0x08017cb1
 8017bc4:	08017cb1 	.word	0x08017cb1
 8017bc8:	08017cb1 	.word	0x08017cb1
 8017bcc:	08017cb1 	.word	0x08017cb1
 8017bd0:	08017cb1 	.word	0x08017cb1
 8017bd4:	08017cb1 	.word	0x08017cb1
 8017bd8:	08017cb1 	.word	0x08017cb1
 8017bdc:	08017cb1 	.word	0x08017cb1
 8017be0:	08017cb1 	.word	0x08017cb1
 8017be4:	08017cb1 	.word	0x08017cb1
 8017be8:	08017cb1 	.word	0x08017cb1
 8017bec:	08017cb1 	.word	0x08017cb1
 8017bf0:	08017cb1 	.word	0x08017cb1
 8017bf4:	08017cb1 	.word	0x08017cb1
 8017bf8:	08017cb1 	.word	0x08017cb1
 8017bfc:	08017cb1 	.word	0x08017cb1
 8017c00:	08017cb1 	.word	0x08017cb1
 8017c04:	08017cb1 	.word	0x08017cb1
 8017c08:	08017c19 	.word	0x08017c19
 8017c0c:	08017c5d 	.word	0x08017c5d
 8017c10:	08017cb1 	.word	0x08017cb1
 8017c14:	08017cb1 	.word	0x08017cb1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) |
 8017c18:	683b      	ldr	r3, [r7, #0]
 8017c1a:	781b      	ldrb	r3, [r3, #0]
 8017c1c:	461a      	mov	r2, r3
 8017c1e:	683b      	ldr	r3, [r7, #0]
 8017c20:	3301      	adds	r3, #1
 8017c22:	781b      	ldrb	r3, [r3, #0]
 8017c24:	021b      	lsls	r3, r3, #8
 8017c26:	431a      	orrs	r2, r3
    	                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8017c28:	683b      	ldr	r3, [r7, #0]
 8017c2a:	3302      	adds	r3, #2
 8017c2c:	781b      	ldrb	r3, [r3, #0]
 8017c2e:	041b      	lsls	r3, r3, #16
    	LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) |
 8017c30:	431a      	orrs	r2, r3
    	                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8017c32:	683b      	ldr	r3, [r7, #0]
 8017c34:	3303      	adds	r3, #3
 8017c36:	781b      	ldrb	r3, [r3, #0]
 8017c38:	061b      	lsls	r3, r3, #24
 8017c3a:	4313      	orrs	r3, r2
    	LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) |
 8017c3c:	461a      	mov	r2, r3
 8017c3e:	4b20      	ldr	r3, [pc, #128]	@ (8017cc0 <CDC_Control_FS+0x158>)
 8017c40:	601a      	str	r2, [r3, #0]
    	        LineCoding.format = pbuf[4];
 8017c42:	683b      	ldr	r3, [r7, #0]
 8017c44:	791a      	ldrb	r2, [r3, #4]
 8017c46:	4b1e      	ldr	r3, [pc, #120]	@ (8017cc0 <CDC_Control_FS+0x158>)
 8017c48:	711a      	strb	r2, [r3, #4]
    	        LineCoding.paritytype = pbuf[5];
 8017c4a:	683b      	ldr	r3, [r7, #0]
 8017c4c:	795a      	ldrb	r2, [r3, #5]
 8017c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8017cc0 <CDC_Control_FS+0x158>)
 8017c50:	715a      	strb	r2, [r3, #5]
    	        LineCoding.datatype = pbuf[6];
 8017c52:	683b      	ldr	r3, [r7, #0]
 8017c54:	799a      	ldrb	r2, [r3, #6]
 8017c56:	4b1a      	ldr	r3, [pc, #104]	@ (8017cc0 <CDC_Control_FS+0x158>)
 8017c58:	719a      	strb	r2, [r3, #6]
    break;
 8017c5a:	e02a      	b.n	8017cb2 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
        pbuf[0] = (uint8_t) (LineCoding.bitrate);
 8017c5c:	4b18      	ldr	r3, [pc, #96]	@ (8017cc0 <CDC_Control_FS+0x158>)
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	b2da      	uxtb	r2, r3
 8017c62:	683b      	ldr	r3, [r7, #0]
 8017c64:	701a      	strb	r2, [r3, #0]
        pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 8017c66:	4b16      	ldr	r3, [pc, #88]	@ (8017cc0 <CDC_Control_FS+0x158>)
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	0a1a      	lsrs	r2, r3, #8
 8017c6c:	683b      	ldr	r3, [r7, #0]
 8017c6e:	3301      	adds	r3, #1
 8017c70:	b2d2      	uxtb	r2, r2
 8017c72:	701a      	strb	r2, [r3, #0]
        pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 8017c74:	4b12      	ldr	r3, [pc, #72]	@ (8017cc0 <CDC_Control_FS+0x158>)
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	0c1a      	lsrs	r2, r3, #16
 8017c7a:	683b      	ldr	r3, [r7, #0]
 8017c7c:	3302      	adds	r3, #2
 8017c7e:	b2d2      	uxtb	r2, r2
 8017c80:	701a      	strb	r2, [r3, #0]
        pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 8017c82:	4b0f      	ldr	r3, [pc, #60]	@ (8017cc0 <CDC_Control_FS+0x158>)
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	0e1a      	lsrs	r2, r3, #24
 8017c88:	683b      	ldr	r3, [r7, #0]
 8017c8a:	3303      	adds	r3, #3
 8017c8c:	b2d2      	uxtb	r2, r2
 8017c8e:	701a      	strb	r2, [r3, #0]
        pbuf[4] = LineCoding.format;
 8017c90:	683b      	ldr	r3, [r7, #0]
 8017c92:	3304      	adds	r3, #4
 8017c94:	4a0a      	ldr	r2, [pc, #40]	@ (8017cc0 <CDC_Control_FS+0x158>)
 8017c96:	7912      	ldrb	r2, [r2, #4]
 8017c98:	701a      	strb	r2, [r3, #0]
        pbuf[5] = LineCoding.paritytype;
 8017c9a:	683b      	ldr	r3, [r7, #0]
 8017c9c:	3305      	adds	r3, #5
 8017c9e:	4a08      	ldr	r2, [pc, #32]	@ (8017cc0 <CDC_Control_FS+0x158>)
 8017ca0:	7952      	ldrb	r2, [r2, #5]
 8017ca2:	701a      	strb	r2, [r3, #0]
        pbuf[6] = LineCoding.datatype;
 8017ca4:	683b      	ldr	r3, [r7, #0]
 8017ca6:	3306      	adds	r3, #6
 8017ca8:	4a05      	ldr	r2, [pc, #20]	@ (8017cc0 <CDC_Control_FS+0x158>)
 8017caa:	7992      	ldrb	r2, [r2, #6]
 8017cac:	701a      	strb	r2, [r3, #0]
    break;
 8017cae:	e000      	b.n	8017cb2 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017cb0:	bf00      	nop
  }

  return (USBD_OK);
 8017cb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	370c      	adds	r7, #12
 8017cb8:	46bd      	mov	sp, r7
 8017cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cbe:	4770      	bx	lr
 8017cc0:	24000154 	.word	0x24000154

08017cc4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b082      	sub	sp, #8
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
 8017ccc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USB_RXCallback(Buf, Len);
 8017cce:	6839      	ldr	r1, [r7, #0]
 8017cd0:	6878      	ldr	r0, [r7, #4]
 8017cd2:	f7e9 fd6f 	bl	80017b4 <USB_RXCallback>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017cd6:	6879      	ldr	r1, [r7, #4]
 8017cd8:	4805      	ldr	r0, [pc, #20]	@ (8017cf0 <CDC_Receive_FS+0x2c>)
 8017cda:	f7fb fb1b 	bl	8013314 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017cde:	4804      	ldr	r0, [pc, #16]	@ (8017cf0 <CDC_Receive_FS+0x2c>)
 8017ce0:	f7fb fb76 	bl	80133d0 <USBD_CDC_ReceivePacket>


  return (USBD_OK);
 8017ce4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	3708      	adds	r7, #8
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bd80      	pop	{r7, pc}
 8017cee:	bf00      	nop
 8017cf0:	2402728c 	.word	0x2402728c

08017cf4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b084      	sub	sp, #16
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
 8017cfc:	460b      	mov	r3, r1
 8017cfe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017d00:	2300      	movs	r3, #0
 8017d02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017d04:	4b0d      	ldr	r3, [pc, #52]	@ (8017d3c <CDC_Transmit_FS+0x48>)
 8017d06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8017d0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017d0c:	68bb      	ldr	r3, [r7, #8]
 8017d0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d001      	beq.n	8017d1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8017d16:	2301      	movs	r3, #1
 8017d18:	e00b      	b.n	8017d32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8017d1a:	887b      	ldrh	r3, [r7, #2]
 8017d1c:	461a      	mov	r2, r3
 8017d1e:	6879      	ldr	r1, [r7, #4]
 8017d20:	4806      	ldr	r0, [pc, #24]	@ (8017d3c <CDC_Transmit_FS+0x48>)
 8017d22:	f7fb fad5 	bl	80132d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8017d26:	4805      	ldr	r0, [pc, #20]	@ (8017d3c <CDC_Transmit_FS+0x48>)
 8017d28:	f7fb fb12 	bl	8013350 <USBD_CDC_TransmitPacket>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8017d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d32:	4618      	mov	r0, r3
 8017d34:	3710      	adds	r7, #16
 8017d36:	46bd      	mov	sp, r7
 8017d38:	bd80      	pop	{r7, pc}
 8017d3a:	bf00      	nop
 8017d3c:	2402728c 	.word	0x2402728c

08017d40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017d40:	b480      	push	{r7}
 8017d42:	b087      	sub	sp, #28
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	60f8      	str	r0, [r7, #12]
 8017d48:	60b9      	str	r1, [r7, #8]
 8017d4a:	4613      	mov	r3, r2
 8017d4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017d4e:	2300      	movs	r3, #0
 8017d50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017d52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017d56:	4618      	mov	r0, r3
 8017d58:	371c      	adds	r7, #28
 8017d5a:	46bd      	mov	sp, r7
 8017d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d60:	4770      	bx	lr
	...

08017d64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d64:	b480      	push	{r7}
 8017d66:	b083      	sub	sp, #12
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	4603      	mov	r3, r0
 8017d6c:	6039      	str	r1, [r7, #0]
 8017d6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017d70:	683b      	ldr	r3, [r7, #0]
 8017d72:	2212      	movs	r2, #18
 8017d74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017d76:	4b03      	ldr	r3, [pc, #12]	@ (8017d84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017d78:	4618      	mov	r0, r3
 8017d7a:	370c      	adds	r7, #12
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d82:	4770      	bx	lr
 8017d84:	24000190 	.word	0x24000190

08017d88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d88:	b480      	push	{r7}
 8017d8a:	b083      	sub	sp, #12
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	4603      	mov	r3, r0
 8017d90:	6039      	str	r1, [r7, #0]
 8017d92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017d94:	683b      	ldr	r3, [r7, #0]
 8017d96:	2204      	movs	r2, #4
 8017d98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017d9a:	4b03      	ldr	r3, [pc, #12]	@ (8017da8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017d9c:	4618      	mov	r0, r3
 8017d9e:	370c      	adds	r7, #12
 8017da0:	46bd      	mov	sp, r7
 8017da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da6:	4770      	bx	lr
 8017da8:	240001a4 	.word	0x240001a4

08017dac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b082      	sub	sp, #8
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	4603      	mov	r3, r0
 8017db4:	6039      	str	r1, [r7, #0]
 8017db6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017db8:	79fb      	ldrb	r3, [r7, #7]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d105      	bne.n	8017dca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017dbe:	683a      	ldr	r2, [r7, #0]
 8017dc0:	4907      	ldr	r1, [pc, #28]	@ (8017de0 <USBD_FS_ProductStrDescriptor+0x34>)
 8017dc2:	4808      	ldr	r0, [pc, #32]	@ (8017de4 <USBD_FS_ProductStrDescriptor+0x38>)
 8017dc4:	f7fc fd96 	bl	80148f4 <USBD_GetString>
 8017dc8:	e004      	b.n	8017dd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017dca:	683a      	ldr	r2, [r7, #0]
 8017dcc:	4904      	ldr	r1, [pc, #16]	@ (8017de0 <USBD_FS_ProductStrDescriptor+0x34>)
 8017dce:	4805      	ldr	r0, [pc, #20]	@ (8017de4 <USBD_FS_ProductStrDescriptor+0x38>)
 8017dd0:	f7fc fd90 	bl	80148f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017dd4:	4b02      	ldr	r3, [pc, #8]	@ (8017de0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	3708      	adds	r7, #8
 8017dda:	46bd      	mov	sp, r7
 8017ddc:	bd80      	pop	{r7, pc}
 8017dde:	bf00      	nop
 8017de0:	24028568 	.word	0x24028568
 8017de4:	08019f58 	.word	0x08019f58

08017de8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017de8:	b580      	push	{r7, lr}
 8017dea:	b082      	sub	sp, #8
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	4603      	mov	r3, r0
 8017df0:	6039      	str	r1, [r7, #0]
 8017df2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017df4:	683a      	ldr	r2, [r7, #0]
 8017df6:	4904      	ldr	r1, [pc, #16]	@ (8017e08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017df8:	4804      	ldr	r0, [pc, #16]	@ (8017e0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017dfa:	f7fc fd7b 	bl	80148f4 <USBD_GetString>
  return USBD_StrDesc;
 8017dfe:	4b02      	ldr	r3, [pc, #8]	@ (8017e08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017e00:	4618      	mov	r0, r3
 8017e02:	3708      	adds	r7, #8
 8017e04:	46bd      	mov	sp, r7
 8017e06:	bd80      	pop	{r7, pc}
 8017e08:	24028568 	.word	0x24028568
 8017e0c:	08019f60 	.word	0x08019f60

08017e10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b082      	sub	sp, #8
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	4603      	mov	r3, r0
 8017e18:	6039      	str	r1, [r7, #0]
 8017e1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017e1c:	683b      	ldr	r3, [r7, #0]
 8017e1e:	221a      	movs	r2, #26
 8017e20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017e22:	f000 f843 	bl	8017eac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017e26:	4b02      	ldr	r3, [pc, #8]	@ (8017e30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017e28:	4618      	mov	r0, r3
 8017e2a:	3708      	adds	r7, #8
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	bd80      	pop	{r7, pc}
 8017e30:	240001a8 	.word	0x240001a8

08017e34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017e34:	b580      	push	{r7, lr}
 8017e36:	b082      	sub	sp, #8
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	6039      	str	r1, [r7, #0]
 8017e3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017e40:	79fb      	ldrb	r3, [r7, #7]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d105      	bne.n	8017e52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017e46:	683a      	ldr	r2, [r7, #0]
 8017e48:	4907      	ldr	r1, [pc, #28]	@ (8017e68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017e4a:	4808      	ldr	r0, [pc, #32]	@ (8017e6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8017e4c:	f7fc fd52 	bl	80148f4 <USBD_GetString>
 8017e50:	e004      	b.n	8017e5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017e52:	683a      	ldr	r2, [r7, #0]
 8017e54:	4904      	ldr	r1, [pc, #16]	@ (8017e68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017e56:	4805      	ldr	r0, [pc, #20]	@ (8017e6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8017e58:	f7fc fd4c 	bl	80148f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017e5c:	4b02      	ldr	r3, [pc, #8]	@ (8017e68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017e5e:	4618      	mov	r0, r3
 8017e60:	3708      	adds	r7, #8
 8017e62:	46bd      	mov	sp, r7
 8017e64:	bd80      	pop	{r7, pc}
 8017e66:	bf00      	nop
 8017e68:	24028568 	.word	0x24028568
 8017e6c:	08019f74 	.word	0x08019f74

08017e70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017e70:	b580      	push	{r7, lr}
 8017e72:	b082      	sub	sp, #8
 8017e74:	af00      	add	r7, sp, #0
 8017e76:	4603      	mov	r3, r0
 8017e78:	6039      	str	r1, [r7, #0]
 8017e7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017e7c:	79fb      	ldrb	r3, [r7, #7]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d105      	bne.n	8017e8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017e82:	683a      	ldr	r2, [r7, #0]
 8017e84:	4907      	ldr	r1, [pc, #28]	@ (8017ea4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017e86:	4808      	ldr	r0, [pc, #32]	@ (8017ea8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017e88:	f7fc fd34 	bl	80148f4 <USBD_GetString>
 8017e8c:	e004      	b.n	8017e98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017e8e:	683a      	ldr	r2, [r7, #0]
 8017e90:	4904      	ldr	r1, [pc, #16]	@ (8017ea4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017e92:	4805      	ldr	r0, [pc, #20]	@ (8017ea8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017e94:	f7fc fd2e 	bl	80148f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017e98:	4b02      	ldr	r3, [pc, #8]	@ (8017ea4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	3708      	adds	r7, #8
 8017e9e:	46bd      	mov	sp, r7
 8017ea0:	bd80      	pop	{r7, pc}
 8017ea2:	bf00      	nop
 8017ea4:	24028568 	.word	0x24028568
 8017ea8:	08019f80 	.word	0x08019f80

08017eac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017eac:	b580      	push	{r7, lr}
 8017eae:	b084      	sub	sp, #16
 8017eb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8017ef0 <Get_SerialNum+0x44>)
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8017ef4 <Get_SerialNum+0x48>)
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8017ef8 <Get_SerialNum+0x4c>)
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017ec4:	68fa      	ldr	r2, [r7, #12]
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	4413      	add	r3, r2
 8017eca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d009      	beq.n	8017ee6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017ed2:	2208      	movs	r2, #8
 8017ed4:	4909      	ldr	r1, [pc, #36]	@ (8017efc <Get_SerialNum+0x50>)
 8017ed6:	68f8      	ldr	r0, [r7, #12]
 8017ed8:	f000 f814 	bl	8017f04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017edc:	2204      	movs	r2, #4
 8017ede:	4908      	ldr	r1, [pc, #32]	@ (8017f00 <Get_SerialNum+0x54>)
 8017ee0:	68b8      	ldr	r0, [r7, #8]
 8017ee2:	f000 f80f 	bl	8017f04 <IntToUnicode>
  }
}
 8017ee6:	bf00      	nop
 8017ee8:	3710      	adds	r7, #16
 8017eea:	46bd      	mov	sp, r7
 8017eec:	bd80      	pop	{r7, pc}
 8017eee:	bf00      	nop
 8017ef0:	1ff1e800 	.word	0x1ff1e800
 8017ef4:	1ff1e804 	.word	0x1ff1e804
 8017ef8:	1ff1e808 	.word	0x1ff1e808
 8017efc:	240001aa 	.word	0x240001aa
 8017f00:	240001ba 	.word	0x240001ba

08017f04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017f04:	b480      	push	{r7}
 8017f06:	b087      	sub	sp, #28
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	60f8      	str	r0, [r7, #12]
 8017f0c:	60b9      	str	r1, [r7, #8]
 8017f0e:	4613      	mov	r3, r2
 8017f10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017f12:	2300      	movs	r3, #0
 8017f14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017f16:	2300      	movs	r3, #0
 8017f18:	75fb      	strb	r3, [r7, #23]
 8017f1a:	e027      	b.n	8017f6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	0f1b      	lsrs	r3, r3, #28
 8017f20:	2b09      	cmp	r3, #9
 8017f22:	d80b      	bhi.n	8017f3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	0f1b      	lsrs	r3, r3, #28
 8017f28:	b2da      	uxtb	r2, r3
 8017f2a:	7dfb      	ldrb	r3, [r7, #23]
 8017f2c:	005b      	lsls	r3, r3, #1
 8017f2e:	4619      	mov	r1, r3
 8017f30:	68bb      	ldr	r3, [r7, #8]
 8017f32:	440b      	add	r3, r1
 8017f34:	3230      	adds	r2, #48	@ 0x30
 8017f36:	b2d2      	uxtb	r2, r2
 8017f38:	701a      	strb	r2, [r3, #0]
 8017f3a:	e00a      	b.n	8017f52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	0f1b      	lsrs	r3, r3, #28
 8017f40:	b2da      	uxtb	r2, r3
 8017f42:	7dfb      	ldrb	r3, [r7, #23]
 8017f44:	005b      	lsls	r3, r3, #1
 8017f46:	4619      	mov	r1, r3
 8017f48:	68bb      	ldr	r3, [r7, #8]
 8017f4a:	440b      	add	r3, r1
 8017f4c:	3237      	adds	r2, #55	@ 0x37
 8017f4e:	b2d2      	uxtb	r2, r2
 8017f50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	011b      	lsls	r3, r3, #4
 8017f56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017f58:	7dfb      	ldrb	r3, [r7, #23]
 8017f5a:	005b      	lsls	r3, r3, #1
 8017f5c:	3301      	adds	r3, #1
 8017f5e:	68ba      	ldr	r2, [r7, #8]
 8017f60:	4413      	add	r3, r2
 8017f62:	2200      	movs	r2, #0
 8017f64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017f66:	7dfb      	ldrb	r3, [r7, #23]
 8017f68:	3301      	adds	r3, #1
 8017f6a:	75fb      	strb	r3, [r7, #23]
 8017f6c:	7dfa      	ldrb	r2, [r7, #23]
 8017f6e:	79fb      	ldrb	r3, [r7, #7]
 8017f70:	429a      	cmp	r2, r3
 8017f72:	d3d3      	bcc.n	8017f1c <IntToUnicode+0x18>
  }
}
 8017f74:	bf00      	nop
 8017f76:	bf00      	nop
 8017f78:	371c      	adds	r7, #28
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f80:	4770      	bx	lr
	...

08017f84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b0bc      	sub	sp, #240	@ 0xf0
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017f8c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8017f90:	2200      	movs	r2, #0
 8017f92:	601a      	str	r2, [r3, #0]
 8017f94:	605a      	str	r2, [r3, #4]
 8017f96:	609a      	str	r2, [r3, #8]
 8017f98:	60da      	str	r2, [r3, #12]
 8017f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017f9c:	f107 0318 	add.w	r3, r7, #24
 8017fa0:	22c0      	movs	r2, #192	@ 0xc0
 8017fa2:	2100      	movs	r1, #0
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	f000 fcc8 	bl	801893a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	4a5c      	ldr	r2, [pc, #368]	@ (8018120 <HAL_PCD_MspInit+0x19c>)
 8017fb0:	4293      	cmp	r3, r2
 8017fb2:	d152      	bne.n	801805a <HAL_PCD_MspInit+0xd6>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017fb4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017fb8:	f04f 0300 	mov.w	r3, #0
 8017fbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8017fc0:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8017fc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017fc8:	f107 0318 	add.w	r3, r7, #24
 8017fcc:	4618      	mov	r0, r3
 8017fce:	f7f3 f805 	bl	800afdc <HAL_RCCEx_PeriphCLKConfig>
 8017fd2:	4603      	mov	r3, r0
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d001      	beq.n	8017fdc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8017fd8:	f7eb fb6e 	bl	80036b8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017fdc:	f7f1 ffc6 	bl	8009f6c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017fe0:	4b50      	ldr	r3, [pc, #320]	@ (8018124 <HAL_PCD_MspInit+0x1a0>)
 8017fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017fe6:	4a4f      	ldr	r2, [pc, #316]	@ (8018124 <HAL_PCD_MspInit+0x1a0>)
 8017fe8:	f043 0301 	orr.w	r3, r3, #1
 8017fec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8017ff0:	4b4c      	ldr	r3, [pc, #304]	@ (8018124 <HAL_PCD_MspInit+0x1a0>)
 8017ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017ff6:	f003 0301 	and.w	r3, r3, #1
 8017ffa:	617b      	str	r3, [r7, #20]
 8017ffc:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017ffe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8018002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018006:	2302      	movs	r3, #2
 8018008:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801800c:	2300      	movs	r3, #0
 801800e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018012:	2300      	movs	r3, #0
 8018014:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8018018:	230a      	movs	r3, #10
 801801a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801801e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8018022:	4619      	mov	r1, r3
 8018024:	4840      	ldr	r0, [pc, #256]	@ (8018128 <HAL_PCD_MspInit+0x1a4>)
 8018026:	f7f0 f9c3 	bl	80083b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801802a:	4b3e      	ldr	r3, [pc, #248]	@ (8018124 <HAL_PCD_MspInit+0x1a0>)
 801802c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018030:	4a3c      	ldr	r2, [pc, #240]	@ (8018124 <HAL_PCD_MspInit+0x1a0>)
 8018032:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8018036:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801803a:	4b3a      	ldr	r3, [pc, #232]	@ (8018124 <HAL_PCD_MspInit+0x1a0>)
 801803c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018044:	613b      	str	r3, [r7, #16]
 8018046:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018048:	2200      	movs	r2, #0
 801804a:	2105      	movs	r1, #5
 801804c:	2065      	movs	r0, #101	@ 0x65
 801804e:	f7ed f9bc 	bl	80053ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018052:	2065      	movs	r0, #101	@ 0x65
 8018054:	f7ed f9d3 	bl	80053fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8018058:	e05e      	b.n	8018118 <HAL_PCD_MspInit+0x194>
  else if(pcdHandle->Instance==USB_OTG_HS)
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	4a33      	ldr	r2, [pc, #204]	@ (801812c <HAL_PCD_MspInit+0x1a8>)
 8018060:	4293      	cmp	r3, r2
 8018062:	d159      	bne.n	8018118 <HAL_PCD_MspInit+0x194>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018064:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8018068:	f04f 0300 	mov.w	r3, #0
 801806c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8018070:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8018074:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018078:	f107 0318 	add.w	r3, r7, #24
 801807c:	4618      	mov	r0, r3
 801807e:	f7f2 ffad 	bl	800afdc <HAL_RCCEx_PeriphCLKConfig>
 8018082:	4603      	mov	r3, r0
 8018084:	2b00      	cmp	r3, #0
 8018086:	d001      	beq.n	801808c <HAL_PCD_MspInit+0x108>
      Error_Handler();
 8018088:	f7eb fb16 	bl	80036b8 <Error_Handler>
    HAL_PWREx_EnableUSBVoltageDetector();
 801808c:	f7f1 ff6e 	bl	8009f6c <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018090:	4b24      	ldr	r3, [pc, #144]	@ (8018124 <HAL_PCD_MspInit+0x1a0>)
 8018092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8018096:	4a23      	ldr	r2, [pc, #140]	@ (8018124 <HAL_PCD_MspInit+0x1a0>)
 8018098:	f043 0302 	orr.w	r3, r3, #2
 801809c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80180a0:	4b20      	ldr	r3, [pc, #128]	@ (8018124 <HAL_PCD_MspInit+0x1a0>)
 80180a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80180a6:	f003 0302 	and.w	r3, r3, #2
 80180aa:	60fb      	str	r3, [r7, #12]
 80180ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80180ae:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80180b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80180b6:	2302      	movs	r3, #2
 80180b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80180bc:	2300      	movs	r3, #0
 80180be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80180c2:	2300      	movs	r3, #0
 80180c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 80180c8:	230c      	movs	r3, #12
 80180ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80180ce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80180d2:	4619      	mov	r1, r3
 80180d4:	4816      	ldr	r0, [pc, #88]	@ (8018130 <HAL_PCD_MspInit+0x1ac>)
 80180d6:	f7f0 f96b 	bl	80083b0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80180da:	4b12      	ldr	r3, [pc, #72]	@ (8018124 <HAL_PCD_MspInit+0x1a0>)
 80180dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80180e0:	4a10      	ldr	r2, [pc, #64]	@ (8018124 <HAL_PCD_MspInit+0x1a0>)
 80180e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80180e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80180ea:	4b0e      	ldr	r3, [pc, #56]	@ (8018124 <HAL_PCD_MspInit+0x1a0>)
 80180ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80180f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80180f4:	60bb      	str	r3, [r7, #8]
 80180f6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 5, 0);
 80180f8:	2200      	movs	r2, #0
 80180fa:	2105      	movs	r1, #5
 80180fc:	204a      	movs	r0, #74	@ 0x4a
 80180fe:	f7ed f964 	bl	80053ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 8018102:	204a      	movs	r0, #74	@ 0x4a
 8018104:	f7ed f97b 	bl	80053fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 5, 0);
 8018108:	2200      	movs	r2, #0
 801810a:	2105      	movs	r1, #5
 801810c:	204b      	movs	r0, #75	@ 0x4b
 801810e:	f7ed f95c 	bl	80053ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 8018112:	204b      	movs	r0, #75	@ 0x4b
 8018114:	f7ed f973 	bl	80053fe <HAL_NVIC_EnableIRQ>
}
 8018118:	bf00      	nop
 801811a:	37f0      	adds	r7, #240	@ 0xf0
 801811c:	46bd      	mov	sp, r7
 801811e:	bd80      	pop	{r7, pc}
 8018120:	40080000 	.word	0x40080000
 8018124:	58024400 	.word	0x58024400
 8018128:	58020000 	.word	0x58020000
 801812c:	40040000 	.word	0x40040000
 8018130:	58020400 	.word	0x58020400

08018134 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018134:	b580      	push	{r7, lr}
 8018136:	b082      	sub	sp, #8
 8018138:	af00      	add	r7, sp, #0
 801813a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8018148:	4619      	mov	r1, r3
 801814a:	4610      	mov	r0, r2
 801814c:	f7fb fa45 	bl	80135da <USBD_LL_SetupStage>
}
 8018150:	bf00      	nop
 8018152:	3708      	adds	r7, #8
 8018154:	46bd      	mov	sp, r7
 8018156:	bd80      	pop	{r7, pc}

08018158 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018158:	b580      	push	{r7, lr}
 801815a:	b082      	sub	sp, #8
 801815c:	af00      	add	r7, sp, #0
 801815e:	6078      	str	r0, [r7, #4]
 8018160:	460b      	mov	r3, r1
 8018162:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801816a:	78fa      	ldrb	r2, [r7, #3]
 801816c:	6879      	ldr	r1, [r7, #4]
 801816e:	4613      	mov	r3, r2
 8018170:	00db      	lsls	r3, r3, #3
 8018172:	4413      	add	r3, r2
 8018174:	009b      	lsls	r3, r3, #2
 8018176:	440b      	add	r3, r1
 8018178:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801817c:	681a      	ldr	r2, [r3, #0]
 801817e:	78fb      	ldrb	r3, [r7, #3]
 8018180:	4619      	mov	r1, r3
 8018182:	f7fb fa7f 	bl	8013684 <USBD_LL_DataOutStage>
}
 8018186:	bf00      	nop
 8018188:	3708      	adds	r7, #8
 801818a:	46bd      	mov	sp, r7
 801818c:	bd80      	pop	{r7, pc}

0801818e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801818e:	b580      	push	{r7, lr}
 8018190:	b082      	sub	sp, #8
 8018192:	af00      	add	r7, sp, #0
 8018194:	6078      	str	r0, [r7, #4]
 8018196:	460b      	mov	r3, r1
 8018198:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80181a0:	78fa      	ldrb	r2, [r7, #3]
 80181a2:	6879      	ldr	r1, [r7, #4]
 80181a4:	4613      	mov	r3, r2
 80181a6:	00db      	lsls	r3, r3, #3
 80181a8:	4413      	add	r3, r2
 80181aa:	009b      	lsls	r3, r3, #2
 80181ac:	440b      	add	r3, r1
 80181ae:	3320      	adds	r3, #32
 80181b0:	681a      	ldr	r2, [r3, #0]
 80181b2:	78fb      	ldrb	r3, [r7, #3]
 80181b4:	4619      	mov	r1, r3
 80181b6:	f7fb fb18 	bl	80137ea <USBD_LL_DataInStage>
}
 80181ba:	bf00      	nop
 80181bc:	3708      	adds	r7, #8
 80181be:	46bd      	mov	sp, r7
 80181c0:	bd80      	pop	{r7, pc}

080181c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80181c2:	b580      	push	{r7, lr}
 80181c4:	b082      	sub	sp, #8
 80181c6:	af00      	add	r7, sp, #0
 80181c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80181d0:	4618      	mov	r0, r3
 80181d2:	f7fb fc52 	bl	8013a7a <USBD_LL_SOF>
}
 80181d6:	bf00      	nop
 80181d8:	3708      	adds	r7, #8
 80181da:	46bd      	mov	sp, r7
 80181dc:	bd80      	pop	{r7, pc}

080181de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80181de:	b580      	push	{r7, lr}
 80181e0:	b084      	sub	sp, #16
 80181e2:	af00      	add	r7, sp, #0
 80181e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80181e6:	2301      	movs	r3, #1
 80181e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	79db      	ldrb	r3, [r3, #7]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d102      	bne.n	80181f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80181f2:	2300      	movs	r3, #0
 80181f4:	73fb      	strb	r3, [r7, #15]
 80181f6:	e008      	b.n	801820a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	79db      	ldrb	r3, [r3, #7]
 80181fc:	2b02      	cmp	r3, #2
 80181fe:	d102      	bne.n	8018206 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018200:	2301      	movs	r3, #1
 8018202:	73fb      	strb	r3, [r7, #15]
 8018204:	e001      	b.n	801820a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018206:	f7eb fa57 	bl	80036b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018210:	7bfa      	ldrb	r2, [r7, #15]
 8018212:	4611      	mov	r1, r2
 8018214:	4618      	mov	r0, r3
 8018216:	f7fb fbec 	bl	80139f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018220:	4618      	mov	r0, r3
 8018222:	f7fb fb94 	bl	801394e <USBD_LL_Reset>
}
 8018226:	bf00      	nop
 8018228:	3710      	adds	r7, #16
 801822a:	46bd      	mov	sp, r7
 801822c:	bd80      	pop	{r7, pc}
	...

08018230 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b082      	sub	sp, #8
 8018234:	af00      	add	r7, sp, #0
 8018236:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801823e:	4618      	mov	r0, r3
 8018240:	f7fb fbe7 	bl	8013a12 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	687a      	ldr	r2, [r7, #4]
 8018250:	6812      	ldr	r2, [r2, #0]
 8018252:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8018256:	f043 0301 	orr.w	r3, r3, #1
 801825a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	7adb      	ldrb	r3, [r3, #11]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d005      	beq.n	8018270 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018264:	4b04      	ldr	r3, [pc, #16]	@ (8018278 <HAL_PCD_SuspendCallback+0x48>)
 8018266:	691b      	ldr	r3, [r3, #16]
 8018268:	4a03      	ldr	r2, [pc, #12]	@ (8018278 <HAL_PCD_SuspendCallback+0x48>)
 801826a:	f043 0306 	orr.w	r3, r3, #6
 801826e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018270:	bf00      	nop
 8018272:	3708      	adds	r7, #8
 8018274:	46bd      	mov	sp, r7
 8018276:	bd80      	pop	{r7, pc}
 8018278:	e000ed00 	.word	0xe000ed00

0801827c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801827c:	b580      	push	{r7, lr}
 801827e:	b082      	sub	sp, #8
 8018280:	af00      	add	r7, sp, #0
 8018282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801828a:	4618      	mov	r0, r3
 801828c:	f7fb fbdd 	bl	8013a4a <USBD_LL_Resume>
}
 8018290:	bf00      	nop
 8018292:	3708      	adds	r7, #8
 8018294:	46bd      	mov	sp, r7
 8018296:	bd80      	pop	{r7, pc}

08018298 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018298:	b580      	push	{r7, lr}
 801829a:	b082      	sub	sp, #8
 801829c:	af00      	add	r7, sp, #0
 801829e:	6078      	str	r0, [r7, #4]
 80182a0:	460b      	mov	r3, r1
 80182a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80182aa:	78fa      	ldrb	r2, [r7, #3]
 80182ac:	4611      	mov	r1, r2
 80182ae:	4618      	mov	r0, r3
 80182b0:	f7fb fc35 	bl	8013b1e <USBD_LL_IsoOUTIncomplete>
}
 80182b4:	bf00      	nop
 80182b6:	3708      	adds	r7, #8
 80182b8:	46bd      	mov	sp, r7
 80182ba:	bd80      	pop	{r7, pc}

080182bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182bc:	b580      	push	{r7, lr}
 80182be:	b082      	sub	sp, #8
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	6078      	str	r0, [r7, #4]
 80182c4:	460b      	mov	r3, r1
 80182c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80182ce:	78fa      	ldrb	r2, [r7, #3]
 80182d0:	4611      	mov	r1, r2
 80182d2:	4618      	mov	r0, r3
 80182d4:	f7fb fbf1 	bl	8013aba <USBD_LL_IsoINIncomplete>
}
 80182d8:	bf00      	nop
 80182da:	3708      	adds	r7, #8
 80182dc:	46bd      	mov	sp, r7
 80182de:	bd80      	pop	{r7, pc}

080182e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182e0:	b580      	push	{r7, lr}
 80182e2:	b082      	sub	sp, #8
 80182e4:	af00      	add	r7, sp, #0
 80182e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80182ee:	4618      	mov	r0, r3
 80182f0:	f7fb fc47 	bl	8013b82 <USBD_LL_DevConnected>
}
 80182f4:	bf00      	nop
 80182f6:	3708      	adds	r7, #8
 80182f8:	46bd      	mov	sp, r7
 80182fa:	bd80      	pop	{r7, pc}

080182fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b082      	sub	sp, #8
 8018300:	af00      	add	r7, sp, #0
 8018302:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801830a:	4618      	mov	r0, r3
 801830c:	f7fb fc44 	bl	8013b98 <USBD_LL_DevDisconnected>
}
 8018310:	bf00      	nop
 8018312:	3708      	adds	r7, #8
 8018314:	46bd      	mov	sp, r7
 8018316:	bd80      	pop	{r7, pc}

08018318 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018318:	b580      	push	{r7, lr}
 801831a:	b082      	sub	sp, #8
 801831c:	af00      	add	r7, sp, #0
 801831e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	781b      	ldrb	r3, [r3, #0]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d13e      	bne.n	80183a6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018328:	4a21      	ldr	r2, [pc, #132]	@ (80183b0 <USBD_LL_Init+0x98>)
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	4a1f      	ldr	r2, [pc, #124]	@ (80183b0 <USBD_LL_Init+0x98>)
 8018334:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018338:	4b1d      	ldr	r3, [pc, #116]	@ (80183b0 <USBD_LL_Init+0x98>)
 801833a:	4a1e      	ldr	r2, [pc, #120]	@ (80183b4 <USBD_LL_Init+0x9c>)
 801833c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801833e:	4b1c      	ldr	r3, [pc, #112]	@ (80183b0 <USBD_LL_Init+0x98>)
 8018340:	2209      	movs	r2, #9
 8018342:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018344:	4b1a      	ldr	r3, [pc, #104]	@ (80183b0 <USBD_LL_Init+0x98>)
 8018346:	2202      	movs	r2, #2
 8018348:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801834a:	4b19      	ldr	r3, [pc, #100]	@ (80183b0 <USBD_LL_Init+0x98>)
 801834c:	2200      	movs	r2, #0
 801834e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018350:	4b17      	ldr	r3, [pc, #92]	@ (80183b0 <USBD_LL_Init+0x98>)
 8018352:	2202      	movs	r2, #2
 8018354:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018356:	4b16      	ldr	r3, [pc, #88]	@ (80183b0 <USBD_LL_Init+0x98>)
 8018358:	2200      	movs	r2, #0
 801835a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801835c:	4b14      	ldr	r3, [pc, #80]	@ (80183b0 <USBD_LL_Init+0x98>)
 801835e:	2200      	movs	r2, #0
 8018360:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018362:	4b13      	ldr	r3, [pc, #76]	@ (80183b0 <USBD_LL_Init+0x98>)
 8018364:	2200      	movs	r2, #0
 8018366:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8018368:	4b11      	ldr	r3, [pc, #68]	@ (80183b0 <USBD_LL_Init+0x98>)
 801836a:	2200      	movs	r2, #0
 801836c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801836e:	4b10      	ldr	r3, [pc, #64]	@ (80183b0 <USBD_LL_Init+0x98>)
 8018370:	2200      	movs	r2, #0
 8018372:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018374:	4b0e      	ldr	r3, [pc, #56]	@ (80183b0 <USBD_LL_Init+0x98>)
 8018376:	2200      	movs	r2, #0
 8018378:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801837a:	480d      	ldr	r0, [pc, #52]	@ (80183b0 <USBD_LL_Init+0x98>)
 801837c:	f7f0 fb1d 	bl	80089ba <HAL_PCD_Init>
 8018380:	4603      	mov	r3, r0
 8018382:	2b00      	cmp	r3, #0
 8018384:	d001      	beq.n	801838a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8018386:	f7eb f997 	bl	80036b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801838a:	2180      	movs	r1, #128	@ 0x80
 801838c:	4808      	ldr	r0, [pc, #32]	@ (80183b0 <USBD_LL_Init+0x98>)
 801838e:	f7f1 fd72 	bl	8009e76 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018392:	2240      	movs	r2, #64	@ 0x40
 8018394:	2100      	movs	r1, #0
 8018396:	4806      	ldr	r0, [pc, #24]	@ (80183b0 <USBD_LL_Init+0x98>)
 8018398:	f7f1 fd26 	bl	8009de8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801839c:	2280      	movs	r2, #128	@ 0x80
 801839e:	2101      	movs	r1, #1
 80183a0:	4803      	ldr	r0, [pc, #12]	@ (80183b0 <USBD_LL_Init+0x98>)
 80183a2:	f7f1 fd21 	bl	8009de8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80183a6:	2300      	movs	r3, #0
}
 80183a8:	4618      	mov	r0, r3
 80183aa:	3708      	adds	r7, #8
 80183ac:	46bd      	mov	sp, r7
 80183ae:	bd80      	pop	{r7, pc}
 80183b0:	24028768 	.word	0x24028768
 80183b4:	40080000 	.word	0x40080000

080183b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b084      	sub	sp, #16
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80183c0:	2300      	movs	r3, #0
 80183c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80183c4:	2300      	movs	r3, #0
 80183c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7f0 fbff 	bl	8008bd2 <HAL_PCD_Start>
 80183d4:	4603      	mov	r3, r0
 80183d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80183d8:	7bfb      	ldrb	r3, [r7, #15]
 80183da:	4618      	mov	r0, r3
 80183dc:	f000 f942 	bl	8018664 <USBD_Get_USB_Status>
 80183e0:	4603      	mov	r3, r0
 80183e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80183e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80183e6:	4618      	mov	r0, r3
 80183e8:	3710      	adds	r7, #16
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd80      	pop	{r7, pc}

080183ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80183ee:	b580      	push	{r7, lr}
 80183f0:	b084      	sub	sp, #16
 80183f2:	af00      	add	r7, sp, #0
 80183f4:	6078      	str	r0, [r7, #4]
 80183f6:	4608      	mov	r0, r1
 80183f8:	4611      	mov	r1, r2
 80183fa:	461a      	mov	r2, r3
 80183fc:	4603      	mov	r3, r0
 80183fe:	70fb      	strb	r3, [r7, #3]
 8018400:	460b      	mov	r3, r1
 8018402:	70bb      	strb	r3, [r7, #2]
 8018404:	4613      	mov	r3, r2
 8018406:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018408:	2300      	movs	r3, #0
 801840a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801840c:	2300      	movs	r3, #0
 801840e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018416:	78bb      	ldrb	r3, [r7, #2]
 8018418:	883a      	ldrh	r2, [r7, #0]
 801841a:	78f9      	ldrb	r1, [r7, #3]
 801841c:	f7f1 f900 	bl	8009620 <HAL_PCD_EP_Open>
 8018420:	4603      	mov	r3, r0
 8018422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018424:	7bfb      	ldrb	r3, [r7, #15]
 8018426:	4618      	mov	r0, r3
 8018428:	f000 f91c 	bl	8018664 <USBD_Get_USB_Status>
 801842c:	4603      	mov	r3, r0
 801842e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018430:	7bbb      	ldrb	r3, [r7, #14]
}
 8018432:	4618      	mov	r0, r3
 8018434:	3710      	adds	r7, #16
 8018436:	46bd      	mov	sp, r7
 8018438:	bd80      	pop	{r7, pc}

0801843a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801843a:	b580      	push	{r7, lr}
 801843c:	b084      	sub	sp, #16
 801843e:	af00      	add	r7, sp, #0
 8018440:	6078      	str	r0, [r7, #4]
 8018442:	460b      	mov	r3, r1
 8018444:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018446:	2300      	movs	r3, #0
 8018448:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801844a:	2300      	movs	r3, #0
 801844c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018454:	78fa      	ldrb	r2, [r7, #3]
 8018456:	4611      	mov	r1, r2
 8018458:	4618      	mov	r0, r3
 801845a:	f7f1 f949 	bl	80096f0 <HAL_PCD_EP_Close>
 801845e:	4603      	mov	r3, r0
 8018460:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018462:	7bfb      	ldrb	r3, [r7, #15]
 8018464:	4618      	mov	r0, r3
 8018466:	f000 f8fd 	bl	8018664 <USBD_Get_USB_Status>
 801846a:	4603      	mov	r3, r0
 801846c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801846e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018470:	4618      	mov	r0, r3
 8018472:	3710      	adds	r7, #16
 8018474:	46bd      	mov	sp, r7
 8018476:	bd80      	pop	{r7, pc}

08018478 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018478:	b580      	push	{r7, lr}
 801847a:	b084      	sub	sp, #16
 801847c:	af00      	add	r7, sp, #0
 801847e:	6078      	str	r0, [r7, #4]
 8018480:	460b      	mov	r3, r1
 8018482:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018484:	2300      	movs	r3, #0
 8018486:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018488:	2300      	movs	r3, #0
 801848a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018492:	78fa      	ldrb	r2, [r7, #3]
 8018494:	4611      	mov	r1, r2
 8018496:	4618      	mov	r0, r3
 8018498:	f7f1 fa01 	bl	800989e <HAL_PCD_EP_SetStall>
 801849c:	4603      	mov	r3, r0
 801849e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80184a0:	7bfb      	ldrb	r3, [r7, #15]
 80184a2:	4618      	mov	r0, r3
 80184a4:	f000 f8de 	bl	8018664 <USBD_Get_USB_Status>
 80184a8:	4603      	mov	r3, r0
 80184aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80184ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80184ae:	4618      	mov	r0, r3
 80184b0:	3710      	adds	r7, #16
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bd80      	pop	{r7, pc}

080184b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80184b6:	b580      	push	{r7, lr}
 80184b8:	b084      	sub	sp, #16
 80184ba:	af00      	add	r7, sp, #0
 80184bc:	6078      	str	r0, [r7, #4]
 80184be:	460b      	mov	r3, r1
 80184c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80184c2:	2300      	movs	r3, #0
 80184c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80184c6:	2300      	movs	r3, #0
 80184c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80184d0:	78fa      	ldrb	r2, [r7, #3]
 80184d2:	4611      	mov	r1, r2
 80184d4:	4618      	mov	r0, r3
 80184d6:	f7f1 fa45 	bl	8009964 <HAL_PCD_EP_ClrStall>
 80184da:	4603      	mov	r3, r0
 80184dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80184de:	7bfb      	ldrb	r3, [r7, #15]
 80184e0:	4618      	mov	r0, r3
 80184e2:	f000 f8bf 	bl	8018664 <USBD_Get_USB_Status>
 80184e6:	4603      	mov	r3, r0
 80184e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80184ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80184ec:	4618      	mov	r0, r3
 80184ee:	3710      	adds	r7, #16
 80184f0:	46bd      	mov	sp, r7
 80184f2:	bd80      	pop	{r7, pc}

080184f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80184f4:	b480      	push	{r7}
 80184f6:	b085      	sub	sp, #20
 80184f8:	af00      	add	r7, sp, #0
 80184fa:	6078      	str	r0, [r7, #4]
 80184fc:	460b      	mov	r3, r1
 80184fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018506:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801850c:	2b00      	cmp	r3, #0
 801850e:	da0b      	bge.n	8018528 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018510:	78fb      	ldrb	r3, [r7, #3]
 8018512:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018516:	68f9      	ldr	r1, [r7, #12]
 8018518:	4613      	mov	r3, r2
 801851a:	00db      	lsls	r3, r3, #3
 801851c:	4413      	add	r3, r2
 801851e:	009b      	lsls	r3, r3, #2
 8018520:	440b      	add	r3, r1
 8018522:	3316      	adds	r3, #22
 8018524:	781b      	ldrb	r3, [r3, #0]
 8018526:	e00b      	b.n	8018540 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018528:	78fb      	ldrb	r3, [r7, #3]
 801852a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801852e:	68f9      	ldr	r1, [r7, #12]
 8018530:	4613      	mov	r3, r2
 8018532:	00db      	lsls	r3, r3, #3
 8018534:	4413      	add	r3, r2
 8018536:	009b      	lsls	r3, r3, #2
 8018538:	440b      	add	r3, r1
 801853a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801853e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018540:	4618      	mov	r0, r3
 8018542:	3714      	adds	r7, #20
 8018544:	46bd      	mov	sp, r7
 8018546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801854a:	4770      	bx	lr

0801854c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801854c:	b580      	push	{r7, lr}
 801854e:	b084      	sub	sp, #16
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
 8018554:	460b      	mov	r3, r1
 8018556:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018558:	2300      	movs	r3, #0
 801855a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801855c:	2300      	movs	r3, #0
 801855e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018566:	78fa      	ldrb	r2, [r7, #3]
 8018568:	4611      	mov	r1, r2
 801856a:	4618      	mov	r0, r3
 801856c:	f7f1 f834 	bl	80095d8 <HAL_PCD_SetAddress>
 8018570:	4603      	mov	r3, r0
 8018572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018574:	7bfb      	ldrb	r3, [r7, #15]
 8018576:	4618      	mov	r0, r3
 8018578:	f000 f874 	bl	8018664 <USBD_Get_USB_Status>
 801857c:	4603      	mov	r3, r0
 801857e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018580:	7bbb      	ldrb	r3, [r7, #14]
}
 8018582:	4618      	mov	r0, r3
 8018584:	3710      	adds	r7, #16
 8018586:	46bd      	mov	sp, r7
 8018588:	bd80      	pop	{r7, pc}

0801858a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801858a:	b580      	push	{r7, lr}
 801858c:	b086      	sub	sp, #24
 801858e:	af00      	add	r7, sp, #0
 8018590:	60f8      	str	r0, [r7, #12]
 8018592:	607a      	str	r2, [r7, #4]
 8018594:	603b      	str	r3, [r7, #0]
 8018596:	460b      	mov	r3, r1
 8018598:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801859a:	2300      	movs	r3, #0
 801859c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801859e:	2300      	movs	r3, #0
 80185a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80185a8:	7af9      	ldrb	r1, [r7, #11]
 80185aa:	683b      	ldr	r3, [r7, #0]
 80185ac:	687a      	ldr	r2, [r7, #4]
 80185ae:	f7f1 f93c 	bl	800982a <HAL_PCD_EP_Transmit>
 80185b2:	4603      	mov	r3, r0
 80185b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80185b6:	7dfb      	ldrb	r3, [r7, #23]
 80185b8:	4618      	mov	r0, r3
 80185ba:	f000 f853 	bl	8018664 <USBD_Get_USB_Status>
 80185be:	4603      	mov	r3, r0
 80185c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80185c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80185c4:	4618      	mov	r0, r3
 80185c6:	3718      	adds	r7, #24
 80185c8:	46bd      	mov	sp, r7
 80185ca:	bd80      	pop	{r7, pc}

080185cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b086      	sub	sp, #24
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	60f8      	str	r0, [r7, #12]
 80185d4:	607a      	str	r2, [r7, #4]
 80185d6:	603b      	str	r3, [r7, #0]
 80185d8:	460b      	mov	r3, r1
 80185da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185dc:	2300      	movs	r3, #0
 80185de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185e0:	2300      	movs	r3, #0
 80185e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80185ea:	7af9      	ldrb	r1, [r7, #11]
 80185ec:	683b      	ldr	r3, [r7, #0]
 80185ee:	687a      	ldr	r2, [r7, #4]
 80185f0:	f7f1 f8c8 	bl	8009784 <HAL_PCD_EP_Receive>
 80185f4:	4603      	mov	r3, r0
 80185f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80185f8:	7dfb      	ldrb	r3, [r7, #23]
 80185fa:	4618      	mov	r0, r3
 80185fc:	f000 f832 	bl	8018664 <USBD_Get_USB_Status>
 8018600:	4603      	mov	r3, r0
 8018602:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018604:	7dbb      	ldrb	r3, [r7, #22]
}
 8018606:	4618      	mov	r0, r3
 8018608:	3718      	adds	r7, #24
 801860a:	46bd      	mov	sp, r7
 801860c:	bd80      	pop	{r7, pc}

0801860e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801860e:	b580      	push	{r7, lr}
 8018610:	b082      	sub	sp, #8
 8018612:	af00      	add	r7, sp, #0
 8018614:	6078      	str	r0, [r7, #4]
 8018616:	460b      	mov	r3, r1
 8018618:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018620:	78fa      	ldrb	r2, [r7, #3]
 8018622:	4611      	mov	r1, r2
 8018624:	4618      	mov	r0, r3
 8018626:	f7f1 f8e8 	bl	80097fa <HAL_PCD_EP_GetRxCount>
 801862a:	4603      	mov	r3, r0
}
 801862c:	4618      	mov	r0, r3
 801862e:	3708      	adds	r7, #8
 8018630:	46bd      	mov	sp, r7
 8018632:	bd80      	pop	{r7, pc}

08018634 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018634:	b480      	push	{r7}
 8018636:	b083      	sub	sp, #12
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801863c:	4b03      	ldr	r3, [pc, #12]	@ (801864c <USBD_static_malloc+0x18>)
}
 801863e:	4618      	mov	r0, r3
 8018640:	370c      	adds	r7, #12
 8018642:	46bd      	mov	sp, r7
 8018644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018648:	4770      	bx	lr
 801864a:	bf00      	nop
 801864c:	24028c4c 	.word	0x24028c4c

08018650 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018650:	b480      	push	{r7}
 8018652:	b083      	sub	sp, #12
 8018654:	af00      	add	r7, sp, #0
 8018656:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8018658:	bf00      	nop
 801865a:	370c      	adds	r7, #12
 801865c:	46bd      	mov	sp, r7
 801865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018662:	4770      	bx	lr

08018664 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018664:	b480      	push	{r7}
 8018666:	b085      	sub	sp, #20
 8018668:	af00      	add	r7, sp, #0
 801866a:	4603      	mov	r3, r0
 801866c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801866e:	2300      	movs	r3, #0
 8018670:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018672:	79fb      	ldrb	r3, [r7, #7]
 8018674:	2b03      	cmp	r3, #3
 8018676:	d817      	bhi.n	80186a8 <USBD_Get_USB_Status+0x44>
 8018678:	a201      	add	r2, pc, #4	@ (adr r2, 8018680 <USBD_Get_USB_Status+0x1c>)
 801867a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801867e:	bf00      	nop
 8018680:	08018691 	.word	0x08018691
 8018684:	08018697 	.word	0x08018697
 8018688:	0801869d 	.word	0x0801869d
 801868c:	080186a3 	.word	0x080186a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018690:	2300      	movs	r3, #0
 8018692:	73fb      	strb	r3, [r7, #15]
    break;
 8018694:	e00b      	b.n	80186ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018696:	2303      	movs	r3, #3
 8018698:	73fb      	strb	r3, [r7, #15]
    break;
 801869a:	e008      	b.n	80186ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801869c:	2301      	movs	r3, #1
 801869e:	73fb      	strb	r3, [r7, #15]
    break;
 80186a0:	e005      	b.n	80186ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80186a2:	2303      	movs	r3, #3
 80186a4:	73fb      	strb	r3, [r7, #15]
    break;
 80186a6:	e002      	b.n	80186ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80186a8:	2303      	movs	r3, #3
 80186aa:	73fb      	strb	r3, [r7, #15]
    break;
 80186ac:	bf00      	nop
  }
  return usb_status;
 80186ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80186b0:	4618      	mov	r0, r3
 80186b2:	3714      	adds	r7, #20
 80186b4:	46bd      	mov	sp, r7
 80186b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ba:	4770      	bx	lr

080186bc <std>:
 80186bc:	2300      	movs	r3, #0
 80186be:	b510      	push	{r4, lr}
 80186c0:	4604      	mov	r4, r0
 80186c2:	e9c0 3300 	strd	r3, r3, [r0]
 80186c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80186ca:	6083      	str	r3, [r0, #8]
 80186cc:	8181      	strh	r1, [r0, #12]
 80186ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80186d0:	81c2      	strh	r2, [r0, #14]
 80186d2:	6183      	str	r3, [r0, #24]
 80186d4:	4619      	mov	r1, r3
 80186d6:	2208      	movs	r2, #8
 80186d8:	305c      	adds	r0, #92	@ 0x5c
 80186da:	f000 f92e 	bl	801893a <memset>
 80186de:	4b0d      	ldr	r3, [pc, #52]	@ (8018714 <std+0x58>)
 80186e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80186e2:	4b0d      	ldr	r3, [pc, #52]	@ (8018718 <std+0x5c>)
 80186e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80186e6:	4b0d      	ldr	r3, [pc, #52]	@ (801871c <std+0x60>)
 80186e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80186ea:	4b0d      	ldr	r3, [pc, #52]	@ (8018720 <std+0x64>)
 80186ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80186ee:	4b0d      	ldr	r3, [pc, #52]	@ (8018724 <std+0x68>)
 80186f0:	6224      	str	r4, [r4, #32]
 80186f2:	429c      	cmp	r4, r3
 80186f4:	d006      	beq.n	8018704 <std+0x48>
 80186f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80186fa:	4294      	cmp	r4, r2
 80186fc:	d002      	beq.n	8018704 <std+0x48>
 80186fe:	33d0      	adds	r3, #208	@ 0xd0
 8018700:	429c      	cmp	r4, r3
 8018702:	d105      	bne.n	8018710 <std+0x54>
 8018704:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801870c:	f000 b9e4 	b.w	8018ad8 <__retarget_lock_init_recursive>
 8018710:	bd10      	pop	{r4, pc}
 8018712:	bf00      	nop
 8018714:	080188b5 	.word	0x080188b5
 8018718:	080188d7 	.word	0x080188d7
 801871c:	0801890f 	.word	0x0801890f
 8018720:	08018933 	.word	0x08018933
 8018724:	24028e6c 	.word	0x24028e6c

08018728 <stdio_exit_handler>:
 8018728:	4a02      	ldr	r2, [pc, #8]	@ (8018734 <stdio_exit_handler+0xc>)
 801872a:	4903      	ldr	r1, [pc, #12]	@ (8018738 <stdio_exit_handler+0x10>)
 801872c:	4803      	ldr	r0, [pc, #12]	@ (801873c <stdio_exit_handler+0x14>)
 801872e:	f000 b869 	b.w	8018804 <_fwalk_sglue>
 8018732:	bf00      	nop
 8018734:	240001c4 	.word	0x240001c4
 8018738:	08019645 	.word	0x08019645
 801873c:	240001d4 	.word	0x240001d4

08018740 <cleanup_stdio>:
 8018740:	6841      	ldr	r1, [r0, #4]
 8018742:	4b0c      	ldr	r3, [pc, #48]	@ (8018774 <cleanup_stdio+0x34>)
 8018744:	4299      	cmp	r1, r3
 8018746:	b510      	push	{r4, lr}
 8018748:	4604      	mov	r4, r0
 801874a:	d001      	beq.n	8018750 <cleanup_stdio+0x10>
 801874c:	f000 ff7a 	bl	8019644 <_fflush_r>
 8018750:	68a1      	ldr	r1, [r4, #8]
 8018752:	4b09      	ldr	r3, [pc, #36]	@ (8018778 <cleanup_stdio+0x38>)
 8018754:	4299      	cmp	r1, r3
 8018756:	d002      	beq.n	801875e <cleanup_stdio+0x1e>
 8018758:	4620      	mov	r0, r4
 801875a:	f000 ff73 	bl	8019644 <_fflush_r>
 801875e:	68e1      	ldr	r1, [r4, #12]
 8018760:	4b06      	ldr	r3, [pc, #24]	@ (801877c <cleanup_stdio+0x3c>)
 8018762:	4299      	cmp	r1, r3
 8018764:	d004      	beq.n	8018770 <cleanup_stdio+0x30>
 8018766:	4620      	mov	r0, r4
 8018768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801876c:	f000 bf6a 	b.w	8019644 <_fflush_r>
 8018770:	bd10      	pop	{r4, pc}
 8018772:	bf00      	nop
 8018774:	24028e6c 	.word	0x24028e6c
 8018778:	24028ed4 	.word	0x24028ed4
 801877c:	24028f3c 	.word	0x24028f3c

08018780 <global_stdio_init.part.0>:
 8018780:	b510      	push	{r4, lr}
 8018782:	4b0b      	ldr	r3, [pc, #44]	@ (80187b0 <global_stdio_init.part.0+0x30>)
 8018784:	4c0b      	ldr	r4, [pc, #44]	@ (80187b4 <global_stdio_init.part.0+0x34>)
 8018786:	4a0c      	ldr	r2, [pc, #48]	@ (80187b8 <global_stdio_init.part.0+0x38>)
 8018788:	601a      	str	r2, [r3, #0]
 801878a:	4620      	mov	r0, r4
 801878c:	2200      	movs	r2, #0
 801878e:	2104      	movs	r1, #4
 8018790:	f7ff ff94 	bl	80186bc <std>
 8018794:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018798:	2201      	movs	r2, #1
 801879a:	2109      	movs	r1, #9
 801879c:	f7ff ff8e 	bl	80186bc <std>
 80187a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80187a4:	2202      	movs	r2, #2
 80187a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80187aa:	2112      	movs	r1, #18
 80187ac:	f7ff bf86 	b.w	80186bc <std>
 80187b0:	24028fa4 	.word	0x24028fa4
 80187b4:	24028e6c 	.word	0x24028e6c
 80187b8:	08018729 	.word	0x08018729

080187bc <__sfp_lock_acquire>:
 80187bc:	4801      	ldr	r0, [pc, #4]	@ (80187c4 <__sfp_lock_acquire+0x8>)
 80187be:	f000 b98c 	b.w	8018ada <__retarget_lock_acquire_recursive>
 80187c2:	bf00      	nop
 80187c4:	24028fad 	.word	0x24028fad

080187c8 <__sfp_lock_release>:
 80187c8:	4801      	ldr	r0, [pc, #4]	@ (80187d0 <__sfp_lock_release+0x8>)
 80187ca:	f000 b987 	b.w	8018adc <__retarget_lock_release_recursive>
 80187ce:	bf00      	nop
 80187d0:	24028fad 	.word	0x24028fad

080187d4 <__sinit>:
 80187d4:	b510      	push	{r4, lr}
 80187d6:	4604      	mov	r4, r0
 80187d8:	f7ff fff0 	bl	80187bc <__sfp_lock_acquire>
 80187dc:	6a23      	ldr	r3, [r4, #32]
 80187de:	b11b      	cbz	r3, 80187e8 <__sinit+0x14>
 80187e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80187e4:	f7ff bff0 	b.w	80187c8 <__sfp_lock_release>
 80187e8:	4b04      	ldr	r3, [pc, #16]	@ (80187fc <__sinit+0x28>)
 80187ea:	6223      	str	r3, [r4, #32]
 80187ec:	4b04      	ldr	r3, [pc, #16]	@ (8018800 <__sinit+0x2c>)
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d1f5      	bne.n	80187e0 <__sinit+0xc>
 80187f4:	f7ff ffc4 	bl	8018780 <global_stdio_init.part.0>
 80187f8:	e7f2      	b.n	80187e0 <__sinit+0xc>
 80187fa:	bf00      	nop
 80187fc:	08018741 	.word	0x08018741
 8018800:	24028fa4 	.word	0x24028fa4

08018804 <_fwalk_sglue>:
 8018804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018808:	4607      	mov	r7, r0
 801880a:	4688      	mov	r8, r1
 801880c:	4614      	mov	r4, r2
 801880e:	2600      	movs	r6, #0
 8018810:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018814:	f1b9 0901 	subs.w	r9, r9, #1
 8018818:	d505      	bpl.n	8018826 <_fwalk_sglue+0x22>
 801881a:	6824      	ldr	r4, [r4, #0]
 801881c:	2c00      	cmp	r4, #0
 801881e:	d1f7      	bne.n	8018810 <_fwalk_sglue+0xc>
 8018820:	4630      	mov	r0, r6
 8018822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018826:	89ab      	ldrh	r3, [r5, #12]
 8018828:	2b01      	cmp	r3, #1
 801882a:	d907      	bls.n	801883c <_fwalk_sglue+0x38>
 801882c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018830:	3301      	adds	r3, #1
 8018832:	d003      	beq.n	801883c <_fwalk_sglue+0x38>
 8018834:	4629      	mov	r1, r5
 8018836:	4638      	mov	r0, r7
 8018838:	47c0      	blx	r8
 801883a:	4306      	orrs	r6, r0
 801883c:	3568      	adds	r5, #104	@ 0x68
 801883e:	e7e9      	b.n	8018814 <_fwalk_sglue+0x10>

08018840 <iprintf>:
 8018840:	b40f      	push	{r0, r1, r2, r3}
 8018842:	b507      	push	{r0, r1, r2, lr}
 8018844:	4906      	ldr	r1, [pc, #24]	@ (8018860 <iprintf+0x20>)
 8018846:	ab04      	add	r3, sp, #16
 8018848:	6808      	ldr	r0, [r1, #0]
 801884a:	f853 2b04 	ldr.w	r2, [r3], #4
 801884e:	6881      	ldr	r1, [r0, #8]
 8018850:	9301      	str	r3, [sp, #4]
 8018852:	f000 fbcd 	bl	8018ff0 <_vfiprintf_r>
 8018856:	b003      	add	sp, #12
 8018858:	f85d eb04 	ldr.w	lr, [sp], #4
 801885c:	b004      	add	sp, #16
 801885e:	4770      	bx	lr
 8018860:	240001d0 	.word	0x240001d0

08018864 <putchar>:
 8018864:	4b02      	ldr	r3, [pc, #8]	@ (8018870 <putchar+0xc>)
 8018866:	4601      	mov	r1, r0
 8018868:	6818      	ldr	r0, [r3, #0]
 801886a:	6882      	ldr	r2, [r0, #8]
 801886c:	f000 bf12 	b.w	8019694 <_putc_r>
 8018870:	240001d0 	.word	0x240001d0

08018874 <siprintf>:
 8018874:	b40e      	push	{r1, r2, r3}
 8018876:	b500      	push	{lr}
 8018878:	b09c      	sub	sp, #112	@ 0x70
 801887a:	ab1d      	add	r3, sp, #116	@ 0x74
 801887c:	9002      	str	r0, [sp, #8]
 801887e:	9006      	str	r0, [sp, #24]
 8018880:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018884:	4809      	ldr	r0, [pc, #36]	@ (80188ac <siprintf+0x38>)
 8018886:	9107      	str	r1, [sp, #28]
 8018888:	9104      	str	r1, [sp, #16]
 801888a:	4909      	ldr	r1, [pc, #36]	@ (80188b0 <siprintf+0x3c>)
 801888c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018890:	9105      	str	r1, [sp, #20]
 8018892:	6800      	ldr	r0, [r0, #0]
 8018894:	9301      	str	r3, [sp, #4]
 8018896:	a902      	add	r1, sp, #8
 8018898:	f000 fa84 	bl	8018da4 <_svfiprintf_r>
 801889c:	9b02      	ldr	r3, [sp, #8]
 801889e:	2200      	movs	r2, #0
 80188a0:	701a      	strb	r2, [r3, #0]
 80188a2:	b01c      	add	sp, #112	@ 0x70
 80188a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80188a8:	b003      	add	sp, #12
 80188aa:	4770      	bx	lr
 80188ac:	240001d0 	.word	0x240001d0
 80188b0:	ffff0208 	.word	0xffff0208

080188b4 <__sread>:
 80188b4:	b510      	push	{r4, lr}
 80188b6:	460c      	mov	r4, r1
 80188b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188bc:	f000 f8be 	bl	8018a3c <_read_r>
 80188c0:	2800      	cmp	r0, #0
 80188c2:	bfab      	itete	ge
 80188c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80188c6:	89a3      	ldrhlt	r3, [r4, #12]
 80188c8:	181b      	addge	r3, r3, r0
 80188ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80188ce:	bfac      	ite	ge
 80188d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80188d2:	81a3      	strhlt	r3, [r4, #12]
 80188d4:	bd10      	pop	{r4, pc}

080188d6 <__swrite>:
 80188d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188da:	461f      	mov	r7, r3
 80188dc:	898b      	ldrh	r3, [r1, #12]
 80188de:	05db      	lsls	r3, r3, #23
 80188e0:	4605      	mov	r5, r0
 80188e2:	460c      	mov	r4, r1
 80188e4:	4616      	mov	r6, r2
 80188e6:	d505      	bpl.n	80188f4 <__swrite+0x1e>
 80188e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188ec:	2302      	movs	r3, #2
 80188ee:	2200      	movs	r2, #0
 80188f0:	f000 f892 	bl	8018a18 <_lseek_r>
 80188f4:	89a3      	ldrh	r3, [r4, #12]
 80188f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80188fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80188fe:	81a3      	strh	r3, [r4, #12]
 8018900:	4632      	mov	r2, r6
 8018902:	463b      	mov	r3, r7
 8018904:	4628      	mov	r0, r5
 8018906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801890a:	f000 b8a9 	b.w	8018a60 <_write_r>

0801890e <__sseek>:
 801890e:	b510      	push	{r4, lr}
 8018910:	460c      	mov	r4, r1
 8018912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018916:	f000 f87f 	bl	8018a18 <_lseek_r>
 801891a:	1c43      	adds	r3, r0, #1
 801891c:	89a3      	ldrh	r3, [r4, #12]
 801891e:	bf15      	itete	ne
 8018920:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018922:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018926:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801892a:	81a3      	strheq	r3, [r4, #12]
 801892c:	bf18      	it	ne
 801892e:	81a3      	strhne	r3, [r4, #12]
 8018930:	bd10      	pop	{r4, pc}

08018932 <__sclose>:
 8018932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018936:	f000 b809 	b.w	801894c <_close_r>

0801893a <memset>:
 801893a:	4402      	add	r2, r0
 801893c:	4603      	mov	r3, r0
 801893e:	4293      	cmp	r3, r2
 8018940:	d100      	bne.n	8018944 <memset+0xa>
 8018942:	4770      	bx	lr
 8018944:	f803 1b01 	strb.w	r1, [r3], #1
 8018948:	e7f9      	b.n	801893e <memset+0x4>
	...

0801894c <_close_r>:
 801894c:	b538      	push	{r3, r4, r5, lr}
 801894e:	4d06      	ldr	r5, [pc, #24]	@ (8018968 <_close_r+0x1c>)
 8018950:	2300      	movs	r3, #0
 8018952:	4604      	mov	r4, r0
 8018954:	4608      	mov	r0, r1
 8018956:	602b      	str	r3, [r5, #0]
 8018958:	f7eb fa01 	bl	8003d5e <_close>
 801895c:	1c43      	adds	r3, r0, #1
 801895e:	d102      	bne.n	8018966 <_close_r+0x1a>
 8018960:	682b      	ldr	r3, [r5, #0]
 8018962:	b103      	cbz	r3, 8018966 <_close_r+0x1a>
 8018964:	6023      	str	r3, [r4, #0]
 8018966:	bd38      	pop	{r3, r4, r5, pc}
 8018968:	24028fa8 	.word	0x24028fa8

0801896c <_reclaim_reent>:
 801896c:	4b29      	ldr	r3, [pc, #164]	@ (8018a14 <_reclaim_reent+0xa8>)
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	4283      	cmp	r3, r0
 8018972:	b570      	push	{r4, r5, r6, lr}
 8018974:	4604      	mov	r4, r0
 8018976:	d04b      	beq.n	8018a10 <_reclaim_reent+0xa4>
 8018978:	69c3      	ldr	r3, [r0, #28]
 801897a:	b1ab      	cbz	r3, 80189a8 <_reclaim_reent+0x3c>
 801897c:	68db      	ldr	r3, [r3, #12]
 801897e:	b16b      	cbz	r3, 801899c <_reclaim_reent+0x30>
 8018980:	2500      	movs	r5, #0
 8018982:	69e3      	ldr	r3, [r4, #28]
 8018984:	68db      	ldr	r3, [r3, #12]
 8018986:	5959      	ldr	r1, [r3, r5]
 8018988:	2900      	cmp	r1, #0
 801898a:	d13b      	bne.n	8018a04 <_reclaim_reent+0x98>
 801898c:	3504      	adds	r5, #4
 801898e:	2d80      	cmp	r5, #128	@ 0x80
 8018990:	d1f7      	bne.n	8018982 <_reclaim_reent+0x16>
 8018992:	69e3      	ldr	r3, [r4, #28]
 8018994:	4620      	mov	r0, r4
 8018996:	68d9      	ldr	r1, [r3, #12]
 8018998:	f000 f8b0 	bl	8018afc <_free_r>
 801899c:	69e3      	ldr	r3, [r4, #28]
 801899e:	6819      	ldr	r1, [r3, #0]
 80189a0:	b111      	cbz	r1, 80189a8 <_reclaim_reent+0x3c>
 80189a2:	4620      	mov	r0, r4
 80189a4:	f000 f8aa 	bl	8018afc <_free_r>
 80189a8:	6961      	ldr	r1, [r4, #20]
 80189aa:	b111      	cbz	r1, 80189b2 <_reclaim_reent+0x46>
 80189ac:	4620      	mov	r0, r4
 80189ae:	f000 f8a5 	bl	8018afc <_free_r>
 80189b2:	69e1      	ldr	r1, [r4, #28]
 80189b4:	b111      	cbz	r1, 80189bc <_reclaim_reent+0x50>
 80189b6:	4620      	mov	r0, r4
 80189b8:	f000 f8a0 	bl	8018afc <_free_r>
 80189bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80189be:	b111      	cbz	r1, 80189c6 <_reclaim_reent+0x5a>
 80189c0:	4620      	mov	r0, r4
 80189c2:	f000 f89b 	bl	8018afc <_free_r>
 80189c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80189c8:	b111      	cbz	r1, 80189d0 <_reclaim_reent+0x64>
 80189ca:	4620      	mov	r0, r4
 80189cc:	f000 f896 	bl	8018afc <_free_r>
 80189d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80189d2:	b111      	cbz	r1, 80189da <_reclaim_reent+0x6e>
 80189d4:	4620      	mov	r0, r4
 80189d6:	f000 f891 	bl	8018afc <_free_r>
 80189da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80189dc:	b111      	cbz	r1, 80189e4 <_reclaim_reent+0x78>
 80189de:	4620      	mov	r0, r4
 80189e0:	f000 f88c 	bl	8018afc <_free_r>
 80189e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80189e6:	b111      	cbz	r1, 80189ee <_reclaim_reent+0x82>
 80189e8:	4620      	mov	r0, r4
 80189ea:	f000 f887 	bl	8018afc <_free_r>
 80189ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80189f0:	b111      	cbz	r1, 80189f8 <_reclaim_reent+0x8c>
 80189f2:	4620      	mov	r0, r4
 80189f4:	f000 f882 	bl	8018afc <_free_r>
 80189f8:	6a23      	ldr	r3, [r4, #32]
 80189fa:	b14b      	cbz	r3, 8018a10 <_reclaim_reent+0xa4>
 80189fc:	4620      	mov	r0, r4
 80189fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a02:	4718      	bx	r3
 8018a04:	680e      	ldr	r6, [r1, #0]
 8018a06:	4620      	mov	r0, r4
 8018a08:	f000 f878 	bl	8018afc <_free_r>
 8018a0c:	4631      	mov	r1, r6
 8018a0e:	e7bb      	b.n	8018988 <_reclaim_reent+0x1c>
 8018a10:	bd70      	pop	{r4, r5, r6, pc}
 8018a12:	bf00      	nop
 8018a14:	240001d0 	.word	0x240001d0

08018a18 <_lseek_r>:
 8018a18:	b538      	push	{r3, r4, r5, lr}
 8018a1a:	4d07      	ldr	r5, [pc, #28]	@ (8018a38 <_lseek_r+0x20>)
 8018a1c:	4604      	mov	r4, r0
 8018a1e:	4608      	mov	r0, r1
 8018a20:	4611      	mov	r1, r2
 8018a22:	2200      	movs	r2, #0
 8018a24:	602a      	str	r2, [r5, #0]
 8018a26:	461a      	mov	r2, r3
 8018a28:	f7eb f9c0 	bl	8003dac <_lseek>
 8018a2c:	1c43      	adds	r3, r0, #1
 8018a2e:	d102      	bne.n	8018a36 <_lseek_r+0x1e>
 8018a30:	682b      	ldr	r3, [r5, #0]
 8018a32:	b103      	cbz	r3, 8018a36 <_lseek_r+0x1e>
 8018a34:	6023      	str	r3, [r4, #0]
 8018a36:	bd38      	pop	{r3, r4, r5, pc}
 8018a38:	24028fa8 	.word	0x24028fa8

08018a3c <_read_r>:
 8018a3c:	b538      	push	{r3, r4, r5, lr}
 8018a3e:	4d07      	ldr	r5, [pc, #28]	@ (8018a5c <_read_r+0x20>)
 8018a40:	4604      	mov	r4, r0
 8018a42:	4608      	mov	r0, r1
 8018a44:	4611      	mov	r1, r2
 8018a46:	2200      	movs	r2, #0
 8018a48:	602a      	str	r2, [r5, #0]
 8018a4a:	461a      	mov	r2, r3
 8018a4c:	f7eb f94e 	bl	8003cec <_read>
 8018a50:	1c43      	adds	r3, r0, #1
 8018a52:	d102      	bne.n	8018a5a <_read_r+0x1e>
 8018a54:	682b      	ldr	r3, [r5, #0]
 8018a56:	b103      	cbz	r3, 8018a5a <_read_r+0x1e>
 8018a58:	6023      	str	r3, [r4, #0]
 8018a5a:	bd38      	pop	{r3, r4, r5, pc}
 8018a5c:	24028fa8 	.word	0x24028fa8

08018a60 <_write_r>:
 8018a60:	b538      	push	{r3, r4, r5, lr}
 8018a62:	4d07      	ldr	r5, [pc, #28]	@ (8018a80 <_write_r+0x20>)
 8018a64:	4604      	mov	r4, r0
 8018a66:	4608      	mov	r0, r1
 8018a68:	4611      	mov	r1, r2
 8018a6a:	2200      	movs	r2, #0
 8018a6c:	602a      	str	r2, [r5, #0]
 8018a6e:	461a      	mov	r2, r3
 8018a70:	f7eb f959 	bl	8003d26 <_write>
 8018a74:	1c43      	adds	r3, r0, #1
 8018a76:	d102      	bne.n	8018a7e <_write_r+0x1e>
 8018a78:	682b      	ldr	r3, [r5, #0]
 8018a7a:	b103      	cbz	r3, 8018a7e <_write_r+0x1e>
 8018a7c:	6023      	str	r3, [r4, #0]
 8018a7e:	bd38      	pop	{r3, r4, r5, pc}
 8018a80:	24028fa8 	.word	0x24028fa8

08018a84 <__errno>:
 8018a84:	4b01      	ldr	r3, [pc, #4]	@ (8018a8c <__errno+0x8>)
 8018a86:	6818      	ldr	r0, [r3, #0]
 8018a88:	4770      	bx	lr
 8018a8a:	bf00      	nop
 8018a8c:	240001d0 	.word	0x240001d0

08018a90 <__libc_init_array>:
 8018a90:	b570      	push	{r4, r5, r6, lr}
 8018a92:	4d0d      	ldr	r5, [pc, #52]	@ (8018ac8 <__libc_init_array+0x38>)
 8018a94:	4c0d      	ldr	r4, [pc, #52]	@ (8018acc <__libc_init_array+0x3c>)
 8018a96:	1b64      	subs	r4, r4, r5
 8018a98:	10a4      	asrs	r4, r4, #2
 8018a9a:	2600      	movs	r6, #0
 8018a9c:	42a6      	cmp	r6, r4
 8018a9e:	d109      	bne.n	8018ab4 <__libc_init_array+0x24>
 8018aa0:	4d0b      	ldr	r5, [pc, #44]	@ (8018ad0 <__libc_init_array+0x40>)
 8018aa2:	4c0c      	ldr	r4, [pc, #48]	@ (8018ad4 <__libc_init_array+0x44>)
 8018aa4:	f000 ffa2 	bl	80199ec <_init>
 8018aa8:	1b64      	subs	r4, r4, r5
 8018aaa:	10a4      	asrs	r4, r4, #2
 8018aac:	2600      	movs	r6, #0
 8018aae:	42a6      	cmp	r6, r4
 8018ab0:	d105      	bne.n	8018abe <__libc_init_array+0x2e>
 8018ab2:	bd70      	pop	{r4, r5, r6, pc}
 8018ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ab8:	4798      	blx	r3
 8018aba:	3601      	adds	r6, #1
 8018abc:	e7ee      	b.n	8018a9c <__libc_init_array+0xc>
 8018abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ac2:	4798      	blx	r3
 8018ac4:	3601      	adds	r6, #1
 8018ac6:	e7f2      	b.n	8018aae <__libc_init_array+0x1e>
 8018ac8:	0801a380 	.word	0x0801a380
 8018acc:	0801a380 	.word	0x0801a380
 8018ad0:	0801a380 	.word	0x0801a380
 8018ad4:	0801a384 	.word	0x0801a384

08018ad8 <__retarget_lock_init_recursive>:
 8018ad8:	4770      	bx	lr

08018ada <__retarget_lock_acquire_recursive>:
 8018ada:	4770      	bx	lr

08018adc <__retarget_lock_release_recursive>:
 8018adc:	4770      	bx	lr

08018ade <memcpy>:
 8018ade:	440a      	add	r2, r1
 8018ae0:	4291      	cmp	r1, r2
 8018ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8018ae6:	d100      	bne.n	8018aea <memcpy+0xc>
 8018ae8:	4770      	bx	lr
 8018aea:	b510      	push	{r4, lr}
 8018aec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018af4:	4291      	cmp	r1, r2
 8018af6:	d1f9      	bne.n	8018aec <memcpy+0xe>
 8018af8:	bd10      	pop	{r4, pc}
	...

08018afc <_free_r>:
 8018afc:	b538      	push	{r3, r4, r5, lr}
 8018afe:	4605      	mov	r5, r0
 8018b00:	2900      	cmp	r1, #0
 8018b02:	d041      	beq.n	8018b88 <_free_r+0x8c>
 8018b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b08:	1f0c      	subs	r4, r1, #4
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	bfb8      	it	lt
 8018b0e:	18e4      	addlt	r4, r4, r3
 8018b10:	f000 f8e0 	bl	8018cd4 <__malloc_lock>
 8018b14:	4a1d      	ldr	r2, [pc, #116]	@ (8018b8c <_free_r+0x90>)
 8018b16:	6813      	ldr	r3, [r2, #0]
 8018b18:	b933      	cbnz	r3, 8018b28 <_free_r+0x2c>
 8018b1a:	6063      	str	r3, [r4, #4]
 8018b1c:	6014      	str	r4, [r2, #0]
 8018b1e:	4628      	mov	r0, r5
 8018b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018b24:	f000 b8dc 	b.w	8018ce0 <__malloc_unlock>
 8018b28:	42a3      	cmp	r3, r4
 8018b2a:	d908      	bls.n	8018b3e <_free_r+0x42>
 8018b2c:	6820      	ldr	r0, [r4, #0]
 8018b2e:	1821      	adds	r1, r4, r0
 8018b30:	428b      	cmp	r3, r1
 8018b32:	bf01      	itttt	eq
 8018b34:	6819      	ldreq	r1, [r3, #0]
 8018b36:	685b      	ldreq	r3, [r3, #4]
 8018b38:	1809      	addeq	r1, r1, r0
 8018b3a:	6021      	streq	r1, [r4, #0]
 8018b3c:	e7ed      	b.n	8018b1a <_free_r+0x1e>
 8018b3e:	461a      	mov	r2, r3
 8018b40:	685b      	ldr	r3, [r3, #4]
 8018b42:	b10b      	cbz	r3, 8018b48 <_free_r+0x4c>
 8018b44:	42a3      	cmp	r3, r4
 8018b46:	d9fa      	bls.n	8018b3e <_free_r+0x42>
 8018b48:	6811      	ldr	r1, [r2, #0]
 8018b4a:	1850      	adds	r0, r2, r1
 8018b4c:	42a0      	cmp	r0, r4
 8018b4e:	d10b      	bne.n	8018b68 <_free_r+0x6c>
 8018b50:	6820      	ldr	r0, [r4, #0]
 8018b52:	4401      	add	r1, r0
 8018b54:	1850      	adds	r0, r2, r1
 8018b56:	4283      	cmp	r3, r0
 8018b58:	6011      	str	r1, [r2, #0]
 8018b5a:	d1e0      	bne.n	8018b1e <_free_r+0x22>
 8018b5c:	6818      	ldr	r0, [r3, #0]
 8018b5e:	685b      	ldr	r3, [r3, #4]
 8018b60:	6053      	str	r3, [r2, #4]
 8018b62:	4408      	add	r0, r1
 8018b64:	6010      	str	r0, [r2, #0]
 8018b66:	e7da      	b.n	8018b1e <_free_r+0x22>
 8018b68:	d902      	bls.n	8018b70 <_free_r+0x74>
 8018b6a:	230c      	movs	r3, #12
 8018b6c:	602b      	str	r3, [r5, #0]
 8018b6e:	e7d6      	b.n	8018b1e <_free_r+0x22>
 8018b70:	6820      	ldr	r0, [r4, #0]
 8018b72:	1821      	adds	r1, r4, r0
 8018b74:	428b      	cmp	r3, r1
 8018b76:	bf04      	itt	eq
 8018b78:	6819      	ldreq	r1, [r3, #0]
 8018b7a:	685b      	ldreq	r3, [r3, #4]
 8018b7c:	6063      	str	r3, [r4, #4]
 8018b7e:	bf04      	itt	eq
 8018b80:	1809      	addeq	r1, r1, r0
 8018b82:	6021      	streq	r1, [r4, #0]
 8018b84:	6054      	str	r4, [r2, #4]
 8018b86:	e7ca      	b.n	8018b1e <_free_r+0x22>
 8018b88:	bd38      	pop	{r3, r4, r5, pc}
 8018b8a:	bf00      	nop
 8018b8c:	24028fb4 	.word	0x24028fb4

08018b90 <sbrk_aligned>:
 8018b90:	b570      	push	{r4, r5, r6, lr}
 8018b92:	4e0f      	ldr	r6, [pc, #60]	@ (8018bd0 <sbrk_aligned+0x40>)
 8018b94:	460c      	mov	r4, r1
 8018b96:	6831      	ldr	r1, [r6, #0]
 8018b98:	4605      	mov	r5, r0
 8018b9a:	b911      	cbnz	r1, 8018ba2 <sbrk_aligned+0x12>
 8018b9c:	f000 fe5c 	bl	8019858 <_sbrk_r>
 8018ba0:	6030      	str	r0, [r6, #0]
 8018ba2:	4621      	mov	r1, r4
 8018ba4:	4628      	mov	r0, r5
 8018ba6:	f000 fe57 	bl	8019858 <_sbrk_r>
 8018baa:	1c43      	adds	r3, r0, #1
 8018bac:	d103      	bne.n	8018bb6 <sbrk_aligned+0x26>
 8018bae:	f04f 34ff 	mov.w	r4, #4294967295
 8018bb2:	4620      	mov	r0, r4
 8018bb4:	bd70      	pop	{r4, r5, r6, pc}
 8018bb6:	1cc4      	adds	r4, r0, #3
 8018bb8:	f024 0403 	bic.w	r4, r4, #3
 8018bbc:	42a0      	cmp	r0, r4
 8018bbe:	d0f8      	beq.n	8018bb2 <sbrk_aligned+0x22>
 8018bc0:	1a21      	subs	r1, r4, r0
 8018bc2:	4628      	mov	r0, r5
 8018bc4:	f000 fe48 	bl	8019858 <_sbrk_r>
 8018bc8:	3001      	adds	r0, #1
 8018bca:	d1f2      	bne.n	8018bb2 <sbrk_aligned+0x22>
 8018bcc:	e7ef      	b.n	8018bae <sbrk_aligned+0x1e>
 8018bce:	bf00      	nop
 8018bd0:	24028fb0 	.word	0x24028fb0

08018bd4 <_malloc_r>:
 8018bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bd8:	1ccd      	adds	r5, r1, #3
 8018bda:	f025 0503 	bic.w	r5, r5, #3
 8018bde:	3508      	adds	r5, #8
 8018be0:	2d0c      	cmp	r5, #12
 8018be2:	bf38      	it	cc
 8018be4:	250c      	movcc	r5, #12
 8018be6:	2d00      	cmp	r5, #0
 8018be8:	4606      	mov	r6, r0
 8018bea:	db01      	blt.n	8018bf0 <_malloc_r+0x1c>
 8018bec:	42a9      	cmp	r1, r5
 8018bee:	d904      	bls.n	8018bfa <_malloc_r+0x26>
 8018bf0:	230c      	movs	r3, #12
 8018bf2:	6033      	str	r3, [r6, #0]
 8018bf4:	2000      	movs	r0, #0
 8018bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018cd0 <_malloc_r+0xfc>
 8018bfe:	f000 f869 	bl	8018cd4 <__malloc_lock>
 8018c02:	f8d8 3000 	ldr.w	r3, [r8]
 8018c06:	461c      	mov	r4, r3
 8018c08:	bb44      	cbnz	r4, 8018c5c <_malloc_r+0x88>
 8018c0a:	4629      	mov	r1, r5
 8018c0c:	4630      	mov	r0, r6
 8018c0e:	f7ff ffbf 	bl	8018b90 <sbrk_aligned>
 8018c12:	1c43      	adds	r3, r0, #1
 8018c14:	4604      	mov	r4, r0
 8018c16:	d158      	bne.n	8018cca <_malloc_r+0xf6>
 8018c18:	f8d8 4000 	ldr.w	r4, [r8]
 8018c1c:	4627      	mov	r7, r4
 8018c1e:	2f00      	cmp	r7, #0
 8018c20:	d143      	bne.n	8018caa <_malloc_r+0xd6>
 8018c22:	2c00      	cmp	r4, #0
 8018c24:	d04b      	beq.n	8018cbe <_malloc_r+0xea>
 8018c26:	6823      	ldr	r3, [r4, #0]
 8018c28:	4639      	mov	r1, r7
 8018c2a:	4630      	mov	r0, r6
 8018c2c:	eb04 0903 	add.w	r9, r4, r3
 8018c30:	f000 fe12 	bl	8019858 <_sbrk_r>
 8018c34:	4581      	cmp	r9, r0
 8018c36:	d142      	bne.n	8018cbe <_malloc_r+0xea>
 8018c38:	6821      	ldr	r1, [r4, #0]
 8018c3a:	1a6d      	subs	r5, r5, r1
 8018c3c:	4629      	mov	r1, r5
 8018c3e:	4630      	mov	r0, r6
 8018c40:	f7ff ffa6 	bl	8018b90 <sbrk_aligned>
 8018c44:	3001      	adds	r0, #1
 8018c46:	d03a      	beq.n	8018cbe <_malloc_r+0xea>
 8018c48:	6823      	ldr	r3, [r4, #0]
 8018c4a:	442b      	add	r3, r5
 8018c4c:	6023      	str	r3, [r4, #0]
 8018c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8018c52:	685a      	ldr	r2, [r3, #4]
 8018c54:	bb62      	cbnz	r2, 8018cb0 <_malloc_r+0xdc>
 8018c56:	f8c8 7000 	str.w	r7, [r8]
 8018c5a:	e00f      	b.n	8018c7c <_malloc_r+0xa8>
 8018c5c:	6822      	ldr	r2, [r4, #0]
 8018c5e:	1b52      	subs	r2, r2, r5
 8018c60:	d420      	bmi.n	8018ca4 <_malloc_r+0xd0>
 8018c62:	2a0b      	cmp	r2, #11
 8018c64:	d917      	bls.n	8018c96 <_malloc_r+0xc2>
 8018c66:	1961      	adds	r1, r4, r5
 8018c68:	42a3      	cmp	r3, r4
 8018c6a:	6025      	str	r5, [r4, #0]
 8018c6c:	bf18      	it	ne
 8018c6e:	6059      	strne	r1, [r3, #4]
 8018c70:	6863      	ldr	r3, [r4, #4]
 8018c72:	bf08      	it	eq
 8018c74:	f8c8 1000 	streq.w	r1, [r8]
 8018c78:	5162      	str	r2, [r4, r5]
 8018c7a:	604b      	str	r3, [r1, #4]
 8018c7c:	4630      	mov	r0, r6
 8018c7e:	f000 f82f 	bl	8018ce0 <__malloc_unlock>
 8018c82:	f104 000b 	add.w	r0, r4, #11
 8018c86:	1d23      	adds	r3, r4, #4
 8018c88:	f020 0007 	bic.w	r0, r0, #7
 8018c8c:	1ac2      	subs	r2, r0, r3
 8018c8e:	bf1c      	itt	ne
 8018c90:	1a1b      	subne	r3, r3, r0
 8018c92:	50a3      	strne	r3, [r4, r2]
 8018c94:	e7af      	b.n	8018bf6 <_malloc_r+0x22>
 8018c96:	6862      	ldr	r2, [r4, #4]
 8018c98:	42a3      	cmp	r3, r4
 8018c9a:	bf0c      	ite	eq
 8018c9c:	f8c8 2000 	streq.w	r2, [r8]
 8018ca0:	605a      	strne	r2, [r3, #4]
 8018ca2:	e7eb      	b.n	8018c7c <_malloc_r+0xa8>
 8018ca4:	4623      	mov	r3, r4
 8018ca6:	6864      	ldr	r4, [r4, #4]
 8018ca8:	e7ae      	b.n	8018c08 <_malloc_r+0x34>
 8018caa:	463c      	mov	r4, r7
 8018cac:	687f      	ldr	r7, [r7, #4]
 8018cae:	e7b6      	b.n	8018c1e <_malloc_r+0x4a>
 8018cb0:	461a      	mov	r2, r3
 8018cb2:	685b      	ldr	r3, [r3, #4]
 8018cb4:	42a3      	cmp	r3, r4
 8018cb6:	d1fb      	bne.n	8018cb0 <_malloc_r+0xdc>
 8018cb8:	2300      	movs	r3, #0
 8018cba:	6053      	str	r3, [r2, #4]
 8018cbc:	e7de      	b.n	8018c7c <_malloc_r+0xa8>
 8018cbe:	230c      	movs	r3, #12
 8018cc0:	6033      	str	r3, [r6, #0]
 8018cc2:	4630      	mov	r0, r6
 8018cc4:	f000 f80c 	bl	8018ce0 <__malloc_unlock>
 8018cc8:	e794      	b.n	8018bf4 <_malloc_r+0x20>
 8018cca:	6005      	str	r5, [r0, #0]
 8018ccc:	e7d6      	b.n	8018c7c <_malloc_r+0xa8>
 8018cce:	bf00      	nop
 8018cd0:	24028fb4 	.word	0x24028fb4

08018cd4 <__malloc_lock>:
 8018cd4:	4801      	ldr	r0, [pc, #4]	@ (8018cdc <__malloc_lock+0x8>)
 8018cd6:	f7ff bf00 	b.w	8018ada <__retarget_lock_acquire_recursive>
 8018cda:	bf00      	nop
 8018cdc:	24028fac 	.word	0x24028fac

08018ce0 <__malloc_unlock>:
 8018ce0:	4801      	ldr	r0, [pc, #4]	@ (8018ce8 <__malloc_unlock+0x8>)
 8018ce2:	f7ff befb 	b.w	8018adc <__retarget_lock_release_recursive>
 8018ce6:	bf00      	nop
 8018ce8:	24028fac 	.word	0x24028fac

08018cec <__ssputs_r>:
 8018cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cf0:	688e      	ldr	r6, [r1, #8]
 8018cf2:	461f      	mov	r7, r3
 8018cf4:	42be      	cmp	r6, r7
 8018cf6:	680b      	ldr	r3, [r1, #0]
 8018cf8:	4682      	mov	sl, r0
 8018cfa:	460c      	mov	r4, r1
 8018cfc:	4690      	mov	r8, r2
 8018cfe:	d82d      	bhi.n	8018d5c <__ssputs_r+0x70>
 8018d00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018d04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018d08:	d026      	beq.n	8018d58 <__ssputs_r+0x6c>
 8018d0a:	6965      	ldr	r5, [r4, #20]
 8018d0c:	6909      	ldr	r1, [r1, #16]
 8018d0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018d12:	eba3 0901 	sub.w	r9, r3, r1
 8018d16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018d1a:	1c7b      	adds	r3, r7, #1
 8018d1c:	444b      	add	r3, r9
 8018d1e:	106d      	asrs	r5, r5, #1
 8018d20:	429d      	cmp	r5, r3
 8018d22:	bf38      	it	cc
 8018d24:	461d      	movcc	r5, r3
 8018d26:	0553      	lsls	r3, r2, #21
 8018d28:	d527      	bpl.n	8018d7a <__ssputs_r+0x8e>
 8018d2a:	4629      	mov	r1, r5
 8018d2c:	f7ff ff52 	bl	8018bd4 <_malloc_r>
 8018d30:	4606      	mov	r6, r0
 8018d32:	b360      	cbz	r0, 8018d8e <__ssputs_r+0xa2>
 8018d34:	6921      	ldr	r1, [r4, #16]
 8018d36:	464a      	mov	r2, r9
 8018d38:	f7ff fed1 	bl	8018ade <memcpy>
 8018d3c:	89a3      	ldrh	r3, [r4, #12]
 8018d3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018d46:	81a3      	strh	r3, [r4, #12]
 8018d48:	6126      	str	r6, [r4, #16]
 8018d4a:	6165      	str	r5, [r4, #20]
 8018d4c:	444e      	add	r6, r9
 8018d4e:	eba5 0509 	sub.w	r5, r5, r9
 8018d52:	6026      	str	r6, [r4, #0]
 8018d54:	60a5      	str	r5, [r4, #8]
 8018d56:	463e      	mov	r6, r7
 8018d58:	42be      	cmp	r6, r7
 8018d5a:	d900      	bls.n	8018d5e <__ssputs_r+0x72>
 8018d5c:	463e      	mov	r6, r7
 8018d5e:	6820      	ldr	r0, [r4, #0]
 8018d60:	4632      	mov	r2, r6
 8018d62:	4641      	mov	r1, r8
 8018d64:	f000 fd5e 	bl	8019824 <memmove>
 8018d68:	68a3      	ldr	r3, [r4, #8]
 8018d6a:	1b9b      	subs	r3, r3, r6
 8018d6c:	60a3      	str	r3, [r4, #8]
 8018d6e:	6823      	ldr	r3, [r4, #0]
 8018d70:	4433      	add	r3, r6
 8018d72:	6023      	str	r3, [r4, #0]
 8018d74:	2000      	movs	r0, #0
 8018d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d7a:	462a      	mov	r2, r5
 8018d7c:	f000 fd7c 	bl	8019878 <_realloc_r>
 8018d80:	4606      	mov	r6, r0
 8018d82:	2800      	cmp	r0, #0
 8018d84:	d1e0      	bne.n	8018d48 <__ssputs_r+0x5c>
 8018d86:	6921      	ldr	r1, [r4, #16]
 8018d88:	4650      	mov	r0, sl
 8018d8a:	f7ff feb7 	bl	8018afc <_free_r>
 8018d8e:	230c      	movs	r3, #12
 8018d90:	f8ca 3000 	str.w	r3, [sl]
 8018d94:	89a3      	ldrh	r3, [r4, #12]
 8018d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018d9a:	81a3      	strh	r3, [r4, #12]
 8018d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8018da0:	e7e9      	b.n	8018d76 <__ssputs_r+0x8a>
	...

08018da4 <_svfiprintf_r>:
 8018da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018da8:	4698      	mov	r8, r3
 8018daa:	898b      	ldrh	r3, [r1, #12]
 8018dac:	061b      	lsls	r3, r3, #24
 8018dae:	b09d      	sub	sp, #116	@ 0x74
 8018db0:	4607      	mov	r7, r0
 8018db2:	460d      	mov	r5, r1
 8018db4:	4614      	mov	r4, r2
 8018db6:	d510      	bpl.n	8018dda <_svfiprintf_r+0x36>
 8018db8:	690b      	ldr	r3, [r1, #16]
 8018dba:	b973      	cbnz	r3, 8018dda <_svfiprintf_r+0x36>
 8018dbc:	2140      	movs	r1, #64	@ 0x40
 8018dbe:	f7ff ff09 	bl	8018bd4 <_malloc_r>
 8018dc2:	6028      	str	r0, [r5, #0]
 8018dc4:	6128      	str	r0, [r5, #16]
 8018dc6:	b930      	cbnz	r0, 8018dd6 <_svfiprintf_r+0x32>
 8018dc8:	230c      	movs	r3, #12
 8018dca:	603b      	str	r3, [r7, #0]
 8018dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8018dd0:	b01d      	add	sp, #116	@ 0x74
 8018dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dd6:	2340      	movs	r3, #64	@ 0x40
 8018dd8:	616b      	str	r3, [r5, #20]
 8018dda:	2300      	movs	r3, #0
 8018ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8018dde:	2320      	movs	r3, #32
 8018de0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8018de8:	2330      	movs	r3, #48	@ 0x30
 8018dea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018f88 <_svfiprintf_r+0x1e4>
 8018dee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018df2:	f04f 0901 	mov.w	r9, #1
 8018df6:	4623      	mov	r3, r4
 8018df8:	469a      	mov	sl, r3
 8018dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018dfe:	b10a      	cbz	r2, 8018e04 <_svfiprintf_r+0x60>
 8018e00:	2a25      	cmp	r2, #37	@ 0x25
 8018e02:	d1f9      	bne.n	8018df8 <_svfiprintf_r+0x54>
 8018e04:	ebba 0b04 	subs.w	fp, sl, r4
 8018e08:	d00b      	beq.n	8018e22 <_svfiprintf_r+0x7e>
 8018e0a:	465b      	mov	r3, fp
 8018e0c:	4622      	mov	r2, r4
 8018e0e:	4629      	mov	r1, r5
 8018e10:	4638      	mov	r0, r7
 8018e12:	f7ff ff6b 	bl	8018cec <__ssputs_r>
 8018e16:	3001      	adds	r0, #1
 8018e18:	f000 80a7 	beq.w	8018f6a <_svfiprintf_r+0x1c6>
 8018e1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018e1e:	445a      	add	r2, fp
 8018e20:	9209      	str	r2, [sp, #36]	@ 0x24
 8018e22:	f89a 3000 	ldrb.w	r3, [sl]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	f000 809f 	beq.w	8018f6a <_svfiprintf_r+0x1c6>
 8018e2c:	2300      	movs	r3, #0
 8018e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8018e32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018e36:	f10a 0a01 	add.w	sl, sl, #1
 8018e3a:	9304      	str	r3, [sp, #16]
 8018e3c:	9307      	str	r3, [sp, #28]
 8018e3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018e42:	931a      	str	r3, [sp, #104]	@ 0x68
 8018e44:	4654      	mov	r4, sl
 8018e46:	2205      	movs	r2, #5
 8018e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e4c:	484e      	ldr	r0, [pc, #312]	@ (8018f88 <_svfiprintf_r+0x1e4>)
 8018e4e:	f7e7 fa4f 	bl	80002f0 <memchr>
 8018e52:	9a04      	ldr	r2, [sp, #16]
 8018e54:	b9d8      	cbnz	r0, 8018e8e <_svfiprintf_r+0xea>
 8018e56:	06d0      	lsls	r0, r2, #27
 8018e58:	bf44      	itt	mi
 8018e5a:	2320      	movmi	r3, #32
 8018e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018e60:	0711      	lsls	r1, r2, #28
 8018e62:	bf44      	itt	mi
 8018e64:	232b      	movmi	r3, #43	@ 0x2b
 8018e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8018e6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018e70:	d015      	beq.n	8018e9e <_svfiprintf_r+0xfa>
 8018e72:	9a07      	ldr	r2, [sp, #28]
 8018e74:	4654      	mov	r4, sl
 8018e76:	2000      	movs	r0, #0
 8018e78:	f04f 0c0a 	mov.w	ip, #10
 8018e7c:	4621      	mov	r1, r4
 8018e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018e82:	3b30      	subs	r3, #48	@ 0x30
 8018e84:	2b09      	cmp	r3, #9
 8018e86:	d94b      	bls.n	8018f20 <_svfiprintf_r+0x17c>
 8018e88:	b1b0      	cbz	r0, 8018eb8 <_svfiprintf_r+0x114>
 8018e8a:	9207      	str	r2, [sp, #28]
 8018e8c:	e014      	b.n	8018eb8 <_svfiprintf_r+0x114>
 8018e8e:	eba0 0308 	sub.w	r3, r0, r8
 8018e92:	fa09 f303 	lsl.w	r3, r9, r3
 8018e96:	4313      	orrs	r3, r2
 8018e98:	9304      	str	r3, [sp, #16]
 8018e9a:	46a2      	mov	sl, r4
 8018e9c:	e7d2      	b.n	8018e44 <_svfiprintf_r+0xa0>
 8018e9e:	9b03      	ldr	r3, [sp, #12]
 8018ea0:	1d19      	adds	r1, r3, #4
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	9103      	str	r1, [sp, #12]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	bfbb      	ittet	lt
 8018eaa:	425b      	neglt	r3, r3
 8018eac:	f042 0202 	orrlt.w	r2, r2, #2
 8018eb0:	9307      	strge	r3, [sp, #28]
 8018eb2:	9307      	strlt	r3, [sp, #28]
 8018eb4:	bfb8      	it	lt
 8018eb6:	9204      	strlt	r2, [sp, #16]
 8018eb8:	7823      	ldrb	r3, [r4, #0]
 8018eba:	2b2e      	cmp	r3, #46	@ 0x2e
 8018ebc:	d10a      	bne.n	8018ed4 <_svfiprintf_r+0x130>
 8018ebe:	7863      	ldrb	r3, [r4, #1]
 8018ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8018ec2:	d132      	bne.n	8018f2a <_svfiprintf_r+0x186>
 8018ec4:	9b03      	ldr	r3, [sp, #12]
 8018ec6:	1d1a      	adds	r2, r3, #4
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	9203      	str	r2, [sp, #12]
 8018ecc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018ed0:	3402      	adds	r4, #2
 8018ed2:	9305      	str	r3, [sp, #20]
 8018ed4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018f98 <_svfiprintf_r+0x1f4>
 8018ed8:	7821      	ldrb	r1, [r4, #0]
 8018eda:	2203      	movs	r2, #3
 8018edc:	4650      	mov	r0, sl
 8018ede:	f7e7 fa07 	bl	80002f0 <memchr>
 8018ee2:	b138      	cbz	r0, 8018ef4 <_svfiprintf_r+0x150>
 8018ee4:	9b04      	ldr	r3, [sp, #16]
 8018ee6:	eba0 000a 	sub.w	r0, r0, sl
 8018eea:	2240      	movs	r2, #64	@ 0x40
 8018eec:	4082      	lsls	r2, r0
 8018eee:	4313      	orrs	r3, r2
 8018ef0:	3401      	adds	r4, #1
 8018ef2:	9304      	str	r3, [sp, #16]
 8018ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ef8:	4824      	ldr	r0, [pc, #144]	@ (8018f8c <_svfiprintf_r+0x1e8>)
 8018efa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018efe:	2206      	movs	r2, #6
 8018f00:	f7e7 f9f6 	bl	80002f0 <memchr>
 8018f04:	2800      	cmp	r0, #0
 8018f06:	d036      	beq.n	8018f76 <_svfiprintf_r+0x1d2>
 8018f08:	4b21      	ldr	r3, [pc, #132]	@ (8018f90 <_svfiprintf_r+0x1ec>)
 8018f0a:	bb1b      	cbnz	r3, 8018f54 <_svfiprintf_r+0x1b0>
 8018f0c:	9b03      	ldr	r3, [sp, #12]
 8018f0e:	3307      	adds	r3, #7
 8018f10:	f023 0307 	bic.w	r3, r3, #7
 8018f14:	3308      	adds	r3, #8
 8018f16:	9303      	str	r3, [sp, #12]
 8018f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f1a:	4433      	add	r3, r6
 8018f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8018f1e:	e76a      	b.n	8018df6 <_svfiprintf_r+0x52>
 8018f20:	fb0c 3202 	mla	r2, ip, r2, r3
 8018f24:	460c      	mov	r4, r1
 8018f26:	2001      	movs	r0, #1
 8018f28:	e7a8      	b.n	8018e7c <_svfiprintf_r+0xd8>
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	3401      	adds	r4, #1
 8018f2e:	9305      	str	r3, [sp, #20]
 8018f30:	4619      	mov	r1, r3
 8018f32:	f04f 0c0a 	mov.w	ip, #10
 8018f36:	4620      	mov	r0, r4
 8018f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f3c:	3a30      	subs	r2, #48	@ 0x30
 8018f3e:	2a09      	cmp	r2, #9
 8018f40:	d903      	bls.n	8018f4a <_svfiprintf_r+0x1a6>
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d0c6      	beq.n	8018ed4 <_svfiprintf_r+0x130>
 8018f46:	9105      	str	r1, [sp, #20]
 8018f48:	e7c4      	b.n	8018ed4 <_svfiprintf_r+0x130>
 8018f4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8018f4e:	4604      	mov	r4, r0
 8018f50:	2301      	movs	r3, #1
 8018f52:	e7f0      	b.n	8018f36 <_svfiprintf_r+0x192>
 8018f54:	ab03      	add	r3, sp, #12
 8018f56:	9300      	str	r3, [sp, #0]
 8018f58:	462a      	mov	r2, r5
 8018f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8018f94 <_svfiprintf_r+0x1f0>)
 8018f5c:	a904      	add	r1, sp, #16
 8018f5e:	4638      	mov	r0, r7
 8018f60:	f3af 8000 	nop.w
 8018f64:	1c42      	adds	r2, r0, #1
 8018f66:	4606      	mov	r6, r0
 8018f68:	d1d6      	bne.n	8018f18 <_svfiprintf_r+0x174>
 8018f6a:	89ab      	ldrh	r3, [r5, #12]
 8018f6c:	065b      	lsls	r3, r3, #25
 8018f6e:	f53f af2d 	bmi.w	8018dcc <_svfiprintf_r+0x28>
 8018f72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018f74:	e72c      	b.n	8018dd0 <_svfiprintf_r+0x2c>
 8018f76:	ab03      	add	r3, sp, #12
 8018f78:	9300      	str	r3, [sp, #0]
 8018f7a:	462a      	mov	r2, r5
 8018f7c:	4b05      	ldr	r3, [pc, #20]	@ (8018f94 <_svfiprintf_r+0x1f0>)
 8018f7e:	a904      	add	r1, sp, #16
 8018f80:	4638      	mov	r0, r7
 8018f82:	f000 f9bb 	bl	80192fc <_printf_i>
 8018f86:	e7ed      	b.n	8018f64 <_svfiprintf_r+0x1c0>
 8018f88:	0801a344 	.word	0x0801a344
 8018f8c:	0801a34e 	.word	0x0801a34e
 8018f90:	00000000 	.word	0x00000000
 8018f94:	08018ced 	.word	0x08018ced
 8018f98:	0801a34a 	.word	0x0801a34a

08018f9c <__sfputc_r>:
 8018f9c:	6893      	ldr	r3, [r2, #8]
 8018f9e:	3b01      	subs	r3, #1
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	b410      	push	{r4}
 8018fa4:	6093      	str	r3, [r2, #8]
 8018fa6:	da08      	bge.n	8018fba <__sfputc_r+0x1e>
 8018fa8:	6994      	ldr	r4, [r2, #24]
 8018faa:	42a3      	cmp	r3, r4
 8018fac:	db01      	blt.n	8018fb2 <__sfputc_r+0x16>
 8018fae:	290a      	cmp	r1, #10
 8018fb0:	d103      	bne.n	8018fba <__sfputc_r+0x1e>
 8018fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fb6:	f000 bba1 	b.w	80196fc <__swbuf_r>
 8018fba:	6813      	ldr	r3, [r2, #0]
 8018fbc:	1c58      	adds	r0, r3, #1
 8018fbe:	6010      	str	r0, [r2, #0]
 8018fc0:	7019      	strb	r1, [r3, #0]
 8018fc2:	4608      	mov	r0, r1
 8018fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fc8:	4770      	bx	lr

08018fca <__sfputs_r>:
 8018fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fcc:	4606      	mov	r6, r0
 8018fce:	460f      	mov	r7, r1
 8018fd0:	4614      	mov	r4, r2
 8018fd2:	18d5      	adds	r5, r2, r3
 8018fd4:	42ac      	cmp	r4, r5
 8018fd6:	d101      	bne.n	8018fdc <__sfputs_r+0x12>
 8018fd8:	2000      	movs	r0, #0
 8018fda:	e007      	b.n	8018fec <__sfputs_r+0x22>
 8018fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018fe0:	463a      	mov	r2, r7
 8018fe2:	4630      	mov	r0, r6
 8018fe4:	f7ff ffda 	bl	8018f9c <__sfputc_r>
 8018fe8:	1c43      	adds	r3, r0, #1
 8018fea:	d1f3      	bne.n	8018fd4 <__sfputs_r+0xa>
 8018fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018ff0 <_vfiprintf_r>:
 8018ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ff4:	460d      	mov	r5, r1
 8018ff6:	b09d      	sub	sp, #116	@ 0x74
 8018ff8:	4614      	mov	r4, r2
 8018ffa:	4698      	mov	r8, r3
 8018ffc:	4606      	mov	r6, r0
 8018ffe:	b118      	cbz	r0, 8019008 <_vfiprintf_r+0x18>
 8019000:	6a03      	ldr	r3, [r0, #32]
 8019002:	b90b      	cbnz	r3, 8019008 <_vfiprintf_r+0x18>
 8019004:	f7ff fbe6 	bl	80187d4 <__sinit>
 8019008:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801900a:	07d9      	lsls	r1, r3, #31
 801900c:	d405      	bmi.n	801901a <_vfiprintf_r+0x2a>
 801900e:	89ab      	ldrh	r3, [r5, #12]
 8019010:	059a      	lsls	r2, r3, #22
 8019012:	d402      	bmi.n	801901a <_vfiprintf_r+0x2a>
 8019014:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019016:	f7ff fd60 	bl	8018ada <__retarget_lock_acquire_recursive>
 801901a:	89ab      	ldrh	r3, [r5, #12]
 801901c:	071b      	lsls	r3, r3, #28
 801901e:	d501      	bpl.n	8019024 <_vfiprintf_r+0x34>
 8019020:	692b      	ldr	r3, [r5, #16]
 8019022:	b99b      	cbnz	r3, 801904c <_vfiprintf_r+0x5c>
 8019024:	4629      	mov	r1, r5
 8019026:	4630      	mov	r0, r6
 8019028:	f000 fba6 	bl	8019778 <__swsetup_r>
 801902c:	b170      	cbz	r0, 801904c <_vfiprintf_r+0x5c>
 801902e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019030:	07dc      	lsls	r4, r3, #31
 8019032:	d504      	bpl.n	801903e <_vfiprintf_r+0x4e>
 8019034:	f04f 30ff 	mov.w	r0, #4294967295
 8019038:	b01d      	add	sp, #116	@ 0x74
 801903a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801903e:	89ab      	ldrh	r3, [r5, #12]
 8019040:	0598      	lsls	r0, r3, #22
 8019042:	d4f7      	bmi.n	8019034 <_vfiprintf_r+0x44>
 8019044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019046:	f7ff fd49 	bl	8018adc <__retarget_lock_release_recursive>
 801904a:	e7f3      	b.n	8019034 <_vfiprintf_r+0x44>
 801904c:	2300      	movs	r3, #0
 801904e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019050:	2320      	movs	r3, #32
 8019052:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019056:	f8cd 800c 	str.w	r8, [sp, #12]
 801905a:	2330      	movs	r3, #48	@ 0x30
 801905c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801920c <_vfiprintf_r+0x21c>
 8019060:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019064:	f04f 0901 	mov.w	r9, #1
 8019068:	4623      	mov	r3, r4
 801906a:	469a      	mov	sl, r3
 801906c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019070:	b10a      	cbz	r2, 8019076 <_vfiprintf_r+0x86>
 8019072:	2a25      	cmp	r2, #37	@ 0x25
 8019074:	d1f9      	bne.n	801906a <_vfiprintf_r+0x7a>
 8019076:	ebba 0b04 	subs.w	fp, sl, r4
 801907a:	d00b      	beq.n	8019094 <_vfiprintf_r+0xa4>
 801907c:	465b      	mov	r3, fp
 801907e:	4622      	mov	r2, r4
 8019080:	4629      	mov	r1, r5
 8019082:	4630      	mov	r0, r6
 8019084:	f7ff ffa1 	bl	8018fca <__sfputs_r>
 8019088:	3001      	adds	r0, #1
 801908a:	f000 80a7 	beq.w	80191dc <_vfiprintf_r+0x1ec>
 801908e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019090:	445a      	add	r2, fp
 8019092:	9209      	str	r2, [sp, #36]	@ 0x24
 8019094:	f89a 3000 	ldrb.w	r3, [sl]
 8019098:	2b00      	cmp	r3, #0
 801909a:	f000 809f 	beq.w	80191dc <_vfiprintf_r+0x1ec>
 801909e:	2300      	movs	r3, #0
 80190a0:	f04f 32ff 	mov.w	r2, #4294967295
 80190a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80190a8:	f10a 0a01 	add.w	sl, sl, #1
 80190ac:	9304      	str	r3, [sp, #16]
 80190ae:	9307      	str	r3, [sp, #28]
 80190b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80190b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80190b6:	4654      	mov	r4, sl
 80190b8:	2205      	movs	r2, #5
 80190ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190be:	4853      	ldr	r0, [pc, #332]	@ (801920c <_vfiprintf_r+0x21c>)
 80190c0:	f7e7 f916 	bl	80002f0 <memchr>
 80190c4:	9a04      	ldr	r2, [sp, #16]
 80190c6:	b9d8      	cbnz	r0, 8019100 <_vfiprintf_r+0x110>
 80190c8:	06d1      	lsls	r1, r2, #27
 80190ca:	bf44      	itt	mi
 80190cc:	2320      	movmi	r3, #32
 80190ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80190d2:	0713      	lsls	r3, r2, #28
 80190d4:	bf44      	itt	mi
 80190d6:	232b      	movmi	r3, #43	@ 0x2b
 80190d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80190dc:	f89a 3000 	ldrb.w	r3, [sl]
 80190e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80190e2:	d015      	beq.n	8019110 <_vfiprintf_r+0x120>
 80190e4:	9a07      	ldr	r2, [sp, #28]
 80190e6:	4654      	mov	r4, sl
 80190e8:	2000      	movs	r0, #0
 80190ea:	f04f 0c0a 	mov.w	ip, #10
 80190ee:	4621      	mov	r1, r4
 80190f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80190f4:	3b30      	subs	r3, #48	@ 0x30
 80190f6:	2b09      	cmp	r3, #9
 80190f8:	d94b      	bls.n	8019192 <_vfiprintf_r+0x1a2>
 80190fa:	b1b0      	cbz	r0, 801912a <_vfiprintf_r+0x13a>
 80190fc:	9207      	str	r2, [sp, #28]
 80190fe:	e014      	b.n	801912a <_vfiprintf_r+0x13a>
 8019100:	eba0 0308 	sub.w	r3, r0, r8
 8019104:	fa09 f303 	lsl.w	r3, r9, r3
 8019108:	4313      	orrs	r3, r2
 801910a:	9304      	str	r3, [sp, #16]
 801910c:	46a2      	mov	sl, r4
 801910e:	e7d2      	b.n	80190b6 <_vfiprintf_r+0xc6>
 8019110:	9b03      	ldr	r3, [sp, #12]
 8019112:	1d19      	adds	r1, r3, #4
 8019114:	681b      	ldr	r3, [r3, #0]
 8019116:	9103      	str	r1, [sp, #12]
 8019118:	2b00      	cmp	r3, #0
 801911a:	bfbb      	ittet	lt
 801911c:	425b      	neglt	r3, r3
 801911e:	f042 0202 	orrlt.w	r2, r2, #2
 8019122:	9307      	strge	r3, [sp, #28]
 8019124:	9307      	strlt	r3, [sp, #28]
 8019126:	bfb8      	it	lt
 8019128:	9204      	strlt	r2, [sp, #16]
 801912a:	7823      	ldrb	r3, [r4, #0]
 801912c:	2b2e      	cmp	r3, #46	@ 0x2e
 801912e:	d10a      	bne.n	8019146 <_vfiprintf_r+0x156>
 8019130:	7863      	ldrb	r3, [r4, #1]
 8019132:	2b2a      	cmp	r3, #42	@ 0x2a
 8019134:	d132      	bne.n	801919c <_vfiprintf_r+0x1ac>
 8019136:	9b03      	ldr	r3, [sp, #12]
 8019138:	1d1a      	adds	r2, r3, #4
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	9203      	str	r2, [sp, #12]
 801913e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019142:	3402      	adds	r4, #2
 8019144:	9305      	str	r3, [sp, #20]
 8019146:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801921c <_vfiprintf_r+0x22c>
 801914a:	7821      	ldrb	r1, [r4, #0]
 801914c:	2203      	movs	r2, #3
 801914e:	4650      	mov	r0, sl
 8019150:	f7e7 f8ce 	bl	80002f0 <memchr>
 8019154:	b138      	cbz	r0, 8019166 <_vfiprintf_r+0x176>
 8019156:	9b04      	ldr	r3, [sp, #16]
 8019158:	eba0 000a 	sub.w	r0, r0, sl
 801915c:	2240      	movs	r2, #64	@ 0x40
 801915e:	4082      	lsls	r2, r0
 8019160:	4313      	orrs	r3, r2
 8019162:	3401      	adds	r4, #1
 8019164:	9304      	str	r3, [sp, #16]
 8019166:	f814 1b01 	ldrb.w	r1, [r4], #1
 801916a:	4829      	ldr	r0, [pc, #164]	@ (8019210 <_vfiprintf_r+0x220>)
 801916c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019170:	2206      	movs	r2, #6
 8019172:	f7e7 f8bd 	bl	80002f0 <memchr>
 8019176:	2800      	cmp	r0, #0
 8019178:	d03f      	beq.n	80191fa <_vfiprintf_r+0x20a>
 801917a:	4b26      	ldr	r3, [pc, #152]	@ (8019214 <_vfiprintf_r+0x224>)
 801917c:	bb1b      	cbnz	r3, 80191c6 <_vfiprintf_r+0x1d6>
 801917e:	9b03      	ldr	r3, [sp, #12]
 8019180:	3307      	adds	r3, #7
 8019182:	f023 0307 	bic.w	r3, r3, #7
 8019186:	3308      	adds	r3, #8
 8019188:	9303      	str	r3, [sp, #12]
 801918a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801918c:	443b      	add	r3, r7
 801918e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019190:	e76a      	b.n	8019068 <_vfiprintf_r+0x78>
 8019192:	fb0c 3202 	mla	r2, ip, r2, r3
 8019196:	460c      	mov	r4, r1
 8019198:	2001      	movs	r0, #1
 801919a:	e7a8      	b.n	80190ee <_vfiprintf_r+0xfe>
 801919c:	2300      	movs	r3, #0
 801919e:	3401      	adds	r4, #1
 80191a0:	9305      	str	r3, [sp, #20]
 80191a2:	4619      	mov	r1, r3
 80191a4:	f04f 0c0a 	mov.w	ip, #10
 80191a8:	4620      	mov	r0, r4
 80191aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80191ae:	3a30      	subs	r2, #48	@ 0x30
 80191b0:	2a09      	cmp	r2, #9
 80191b2:	d903      	bls.n	80191bc <_vfiprintf_r+0x1cc>
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d0c6      	beq.n	8019146 <_vfiprintf_r+0x156>
 80191b8:	9105      	str	r1, [sp, #20]
 80191ba:	e7c4      	b.n	8019146 <_vfiprintf_r+0x156>
 80191bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80191c0:	4604      	mov	r4, r0
 80191c2:	2301      	movs	r3, #1
 80191c4:	e7f0      	b.n	80191a8 <_vfiprintf_r+0x1b8>
 80191c6:	ab03      	add	r3, sp, #12
 80191c8:	9300      	str	r3, [sp, #0]
 80191ca:	462a      	mov	r2, r5
 80191cc:	4b12      	ldr	r3, [pc, #72]	@ (8019218 <_vfiprintf_r+0x228>)
 80191ce:	a904      	add	r1, sp, #16
 80191d0:	4630      	mov	r0, r6
 80191d2:	f3af 8000 	nop.w
 80191d6:	4607      	mov	r7, r0
 80191d8:	1c78      	adds	r0, r7, #1
 80191da:	d1d6      	bne.n	801918a <_vfiprintf_r+0x19a>
 80191dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80191de:	07d9      	lsls	r1, r3, #31
 80191e0:	d405      	bmi.n	80191ee <_vfiprintf_r+0x1fe>
 80191e2:	89ab      	ldrh	r3, [r5, #12]
 80191e4:	059a      	lsls	r2, r3, #22
 80191e6:	d402      	bmi.n	80191ee <_vfiprintf_r+0x1fe>
 80191e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80191ea:	f7ff fc77 	bl	8018adc <__retarget_lock_release_recursive>
 80191ee:	89ab      	ldrh	r3, [r5, #12]
 80191f0:	065b      	lsls	r3, r3, #25
 80191f2:	f53f af1f 	bmi.w	8019034 <_vfiprintf_r+0x44>
 80191f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80191f8:	e71e      	b.n	8019038 <_vfiprintf_r+0x48>
 80191fa:	ab03      	add	r3, sp, #12
 80191fc:	9300      	str	r3, [sp, #0]
 80191fe:	462a      	mov	r2, r5
 8019200:	4b05      	ldr	r3, [pc, #20]	@ (8019218 <_vfiprintf_r+0x228>)
 8019202:	a904      	add	r1, sp, #16
 8019204:	4630      	mov	r0, r6
 8019206:	f000 f879 	bl	80192fc <_printf_i>
 801920a:	e7e4      	b.n	80191d6 <_vfiprintf_r+0x1e6>
 801920c:	0801a344 	.word	0x0801a344
 8019210:	0801a34e 	.word	0x0801a34e
 8019214:	00000000 	.word	0x00000000
 8019218:	08018fcb 	.word	0x08018fcb
 801921c:	0801a34a 	.word	0x0801a34a

08019220 <_printf_common>:
 8019220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019224:	4616      	mov	r6, r2
 8019226:	4698      	mov	r8, r3
 8019228:	688a      	ldr	r2, [r1, #8]
 801922a:	690b      	ldr	r3, [r1, #16]
 801922c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019230:	4293      	cmp	r3, r2
 8019232:	bfb8      	it	lt
 8019234:	4613      	movlt	r3, r2
 8019236:	6033      	str	r3, [r6, #0]
 8019238:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801923c:	4607      	mov	r7, r0
 801923e:	460c      	mov	r4, r1
 8019240:	b10a      	cbz	r2, 8019246 <_printf_common+0x26>
 8019242:	3301      	adds	r3, #1
 8019244:	6033      	str	r3, [r6, #0]
 8019246:	6823      	ldr	r3, [r4, #0]
 8019248:	0699      	lsls	r1, r3, #26
 801924a:	bf42      	ittt	mi
 801924c:	6833      	ldrmi	r3, [r6, #0]
 801924e:	3302      	addmi	r3, #2
 8019250:	6033      	strmi	r3, [r6, #0]
 8019252:	6825      	ldr	r5, [r4, #0]
 8019254:	f015 0506 	ands.w	r5, r5, #6
 8019258:	d106      	bne.n	8019268 <_printf_common+0x48>
 801925a:	f104 0a19 	add.w	sl, r4, #25
 801925e:	68e3      	ldr	r3, [r4, #12]
 8019260:	6832      	ldr	r2, [r6, #0]
 8019262:	1a9b      	subs	r3, r3, r2
 8019264:	42ab      	cmp	r3, r5
 8019266:	dc26      	bgt.n	80192b6 <_printf_common+0x96>
 8019268:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801926c:	6822      	ldr	r2, [r4, #0]
 801926e:	3b00      	subs	r3, #0
 8019270:	bf18      	it	ne
 8019272:	2301      	movne	r3, #1
 8019274:	0692      	lsls	r2, r2, #26
 8019276:	d42b      	bmi.n	80192d0 <_printf_common+0xb0>
 8019278:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801927c:	4641      	mov	r1, r8
 801927e:	4638      	mov	r0, r7
 8019280:	47c8      	blx	r9
 8019282:	3001      	adds	r0, #1
 8019284:	d01e      	beq.n	80192c4 <_printf_common+0xa4>
 8019286:	6823      	ldr	r3, [r4, #0]
 8019288:	6922      	ldr	r2, [r4, #16]
 801928a:	f003 0306 	and.w	r3, r3, #6
 801928e:	2b04      	cmp	r3, #4
 8019290:	bf02      	ittt	eq
 8019292:	68e5      	ldreq	r5, [r4, #12]
 8019294:	6833      	ldreq	r3, [r6, #0]
 8019296:	1aed      	subeq	r5, r5, r3
 8019298:	68a3      	ldr	r3, [r4, #8]
 801929a:	bf0c      	ite	eq
 801929c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80192a0:	2500      	movne	r5, #0
 80192a2:	4293      	cmp	r3, r2
 80192a4:	bfc4      	itt	gt
 80192a6:	1a9b      	subgt	r3, r3, r2
 80192a8:	18ed      	addgt	r5, r5, r3
 80192aa:	2600      	movs	r6, #0
 80192ac:	341a      	adds	r4, #26
 80192ae:	42b5      	cmp	r5, r6
 80192b0:	d11a      	bne.n	80192e8 <_printf_common+0xc8>
 80192b2:	2000      	movs	r0, #0
 80192b4:	e008      	b.n	80192c8 <_printf_common+0xa8>
 80192b6:	2301      	movs	r3, #1
 80192b8:	4652      	mov	r2, sl
 80192ba:	4641      	mov	r1, r8
 80192bc:	4638      	mov	r0, r7
 80192be:	47c8      	blx	r9
 80192c0:	3001      	adds	r0, #1
 80192c2:	d103      	bne.n	80192cc <_printf_common+0xac>
 80192c4:	f04f 30ff 	mov.w	r0, #4294967295
 80192c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192cc:	3501      	adds	r5, #1
 80192ce:	e7c6      	b.n	801925e <_printf_common+0x3e>
 80192d0:	18e1      	adds	r1, r4, r3
 80192d2:	1c5a      	adds	r2, r3, #1
 80192d4:	2030      	movs	r0, #48	@ 0x30
 80192d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80192da:	4422      	add	r2, r4
 80192dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80192e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80192e4:	3302      	adds	r3, #2
 80192e6:	e7c7      	b.n	8019278 <_printf_common+0x58>
 80192e8:	2301      	movs	r3, #1
 80192ea:	4622      	mov	r2, r4
 80192ec:	4641      	mov	r1, r8
 80192ee:	4638      	mov	r0, r7
 80192f0:	47c8      	blx	r9
 80192f2:	3001      	adds	r0, #1
 80192f4:	d0e6      	beq.n	80192c4 <_printf_common+0xa4>
 80192f6:	3601      	adds	r6, #1
 80192f8:	e7d9      	b.n	80192ae <_printf_common+0x8e>
	...

080192fc <_printf_i>:
 80192fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019300:	7e0f      	ldrb	r7, [r1, #24]
 8019302:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019304:	2f78      	cmp	r7, #120	@ 0x78
 8019306:	4691      	mov	r9, r2
 8019308:	4680      	mov	r8, r0
 801930a:	460c      	mov	r4, r1
 801930c:	469a      	mov	sl, r3
 801930e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019312:	d807      	bhi.n	8019324 <_printf_i+0x28>
 8019314:	2f62      	cmp	r7, #98	@ 0x62
 8019316:	d80a      	bhi.n	801932e <_printf_i+0x32>
 8019318:	2f00      	cmp	r7, #0
 801931a:	f000 80d2 	beq.w	80194c2 <_printf_i+0x1c6>
 801931e:	2f58      	cmp	r7, #88	@ 0x58
 8019320:	f000 80b9 	beq.w	8019496 <_printf_i+0x19a>
 8019324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019328:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801932c:	e03a      	b.n	80193a4 <_printf_i+0xa8>
 801932e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019332:	2b15      	cmp	r3, #21
 8019334:	d8f6      	bhi.n	8019324 <_printf_i+0x28>
 8019336:	a101      	add	r1, pc, #4	@ (adr r1, 801933c <_printf_i+0x40>)
 8019338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801933c:	08019395 	.word	0x08019395
 8019340:	080193a9 	.word	0x080193a9
 8019344:	08019325 	.word	0x08019325
 8019348:	08019325 	.word	0x08019325
 801934c:	08019325 	.word	0x08019325
 8019350:	08019325 	.word	0x08019325
 8019354:	080193a9 	.word	0x080193a9
 8019358:	08019325 	.word	0x08019325
 801935c:	08019325 	.word	0x08019325
 8019360:	08019325 	.word	0x08019325
 8019364:	08019325 	.word	0x08019325
 8019368:	080194a9 	.word	0x080194a9
 801936c:	080193d3 	.word	0x080193d3
 8019370:	08019463 	.word	0x08019463
 8019374:	08019325 	.word	0x08019325
 8019378:	08019325 	.word	0x08019325
 801937c:	080194cb 	.word	0x080194cb
 8019380:	08019325 	.word	0x08019325
 8019384:	080193d3 	.word	0x080193d3
 8019388:	08019325 	.word	0x08019325
 801938c:	08019325 	.word	0x08019325
 8019390:	0801946b 	.word	0x0801946b
 8019394:	6833      	ldr	r3, [r6, #0]
 8019396:	1d1a      	adds	r2, r3, #4
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	6032      	str	r2, [r6, #0]
 801939c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80193a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80193a4:	2301      	movs	r3, #1
 80193a6:	e09d      	b.n	80194e4 <_printf_i+0x1e8>
 80193a8:	6833      	ldr	r3, [r6, #0]
 80193aa:	6820      	ldr	r0, [r4, #0]
 80193ac:	1d19      	adds	r1, r3, #4
 80193ae:	6031      	str	r1, [r6, #0]
 80193b0:	0606      	lsls	r6, r0, #24
 80193b2:	d501      	bpl.n	80193b8 <_printf_i+0xbc>
 80193b4:	681d      	ldr	r5, [r3, #0]
 80193b6:	e003      	b.n	80193c0 <_printf_i+0xc4>
 80193b8:	0645      	lsls	r5, r0, #25
 80193ba:	d5fb      	bpl.n	80193b4 <_printf_i+0xb8>
 80193bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80193c0:	2d00      	cmp	r5, #0
 80193c2:	da03      	bge.n	80193cc <_printf_i+0xd0>
 80193c4:	232d      	movs	r3, #45	@ 0x2d
 80193c6:	426d      	negs	r5, r5
 80193c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80193cc:	4859      	ldr	r0, [pc, #356]	@ (8019534 <_printf_i+0x238>)
 80193ce:	230a      	movs	r3, #10
 80193d0:	e011      	b.n	80193f6 <_printf_i+0xfa>
 80193d2:	6821      	ldr	r1, [r4, #0]
 80193d4:	6833      	ldr	r3, [r6, #0]
 80193d6:	0608      	lsls	r0, r1, #24
 80193d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80193dc:	d402      	bmi.n	80193e4 <_printf_i+0xe8>
 80193de:	0649      	lsls	r1, r1, #25
 80193e0:	bf48      	it	mi
 80193e2:	b2ad      	uxthmi	r5, r5
 80193e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80193e6:	4853      	ldr	r0, [pc, #332]	@ (8019534 <_printf_i+0x238>)
 80193e8:	6033      	str	r3, [r6, #0]
 80193ea:	bf14      	ite	ne
 80193ec:	230a      	movne	r3, #10
 80193ee:	2308      	moveq	r3, #8
 80193f0:	2100      	movs	r1, #0
 80193f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80193f6:	6866      	ldr	r6, [r4, #4]
 80193f8:	60a6      	str	r6, [r4, #8]
 80193fa:	2e00      	cmp	r6, #0
 80193fc:	bfa2      	ittt	ge
 80193fe:	6821      	ldrge	r1, [r4, #0]
 8019400:	f021 0104 	bicge.w	r1, r1, #4
 8019404:	6021      	strge	r1, [r4, #0]
 8019406:	b90d      	cbnz	r5, 801940c <_printf_i+0x110>
 8019408:	2e00      	cmp	r6, #0
 801940a:	d04b      	beq.n	80194a4 <_printf_i+0x1a8>
 801940c:	4616      	mov	r6, r2
 801940e:	fbb5 f1f3 	udiv	r1, r5, r3
 8019412:	fb03 5711 	mls	r7, r3, r1, r5
 8019416:	5dc7      	ldrb	r7, [r0, r7]
 8019418:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801941c:	462f      	mov	r7, r5
 801941e:	42bb      	cmp	r3, r7
 8019420:	460d      	mov	r5, r1
 8019422:	d9f4      	bls.n	801940e <_printf_i+0x112>
 8019424:	2b08      	cmp	r3, #8
 8019426:	d10b      	bne.n	8019440 <_printf_i+0x144>
 8019428:	6823      	ldr	r3, [r4, #0]
 801942a:	07df      	lsls	r7, r3, #31
 801942c:	d508      	bpl.n	8019440 <_printf_i+0x144>
 801942e:	6923      	ldr	r3, [r4, #16]
 8019430:	6861      	ldr	r1, [r4, #4]
 8019432:	4299      	cmp	r1, r3
 8019434:	bfde      	ittt	le
 8019436:	2330      	movle	r3, #48	@ 0x30
 8019438:	f806 3c01 	strble.w	r3, [r6, #-1]
 801943c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019440:	1b92      	subs	r2, r2, r6
 8019442:	6122      	str	r2, [r4, #16]
 8019444:	f8cd a000 	str.w	sl, [sp]
 8019448:	464b      	mov	r3, r9
 801944a:	aa03      	add	r2, sp, #12
 801944c:	4621      	mov	r1, r4
 801944e:	4640      	mov	r0, r8
 8019450:	f7ff fee6 	bl	8019220 <_printf_common>
 8019454:	3001      	adds	r0, #1
 8019456:	d14a      	bne.n	80194ee <_printf_i+0x1f2>
 8019458:	f04f 30ff 	mov.w	r0, #4294967295
 801945c:	b004      	add	sp, #16
 801945e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019462:	6823      	ldr	r3, [r4, #0]
 8019464:	f043 0320 	orr.w	r3, r3, #32
 8019468:	6023      	str	r3, [r4, #0]
 801946a:	4833      	ldr	r0, [pc, #204]	@ (8019538 <_printf_i+0x23c>)
 801946c:	2778      	movs	r7, #120	@ 0x78
 801946e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019472:	6823      	ldr	r3, [r4, #0]
 8019474:	6831      	ldr	r1, [r6, #0]
 8019476:	061f      	lsls	r7, r3, #24
 8019478:	f851 5b04 	ldr.w	r5, [r1], #4
 801947c:	d402      	bmi.n	8019484 <_printf_i+0x188>
 801947e:	065f      	lsls	r7, r3, #25
 8019480:	bf48      	it	mi
 8019482:	b2ad      	uxthmi	r5, r5
 8019484:	6031      	str	r1, [r6, #0]
 8019486:	07d9      	lsls	r1, r3, #31
 8019488:	bf44      	itt	mi
 801948a:	f043 0320 	orrmi.w	r3, r3, #32
 801948e:	6023      	strmi	r3, [r4, #0]
 8019490:	b11d      	cbz	r5, 801949a <_printf_i+0x19e>
 8019492:	2310      	movs	r3, #16
 8019494:	e7ac      	b.n	80193f0 <_printf_i+0xf4>
 8019496:	4827      	ldr	r0, [pc, #156]	@ (8019534 <_printf_i+0x238>)
 8019498:	e7e9      	b.n	801946e <_printf_i+0x172>
 801949a:	6823      	ldr	r3, [r4, #0]
 801949c:	f023 0320 	bic.w	r3, r3, #32
 80194a0:	6023      	str	r3, [r4, #0]
 80194a2:	e7f6      	b.n	8019492 <_printf_i+0x196>
 80194a4:	4616      	mov	r6, r2
 80194a6:	e7bd      	b.n	8019424 <_printf_i+0x128>
 80194a8:	6833      	ldr	r3, [r6, #0]
 80194aa:	6825      	ldr	r5, [r4, #0]
 80194ac:	6961      	ldr	r1, [r4, #20]
 80194ae:	1d18      	adds	r0, r3, #4
 80194b0:	6030      	str	r0, [r6, #0]
 80194b2:	062e      	lsls	r6, r5, #24
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	d501      	bpl.n	80194bc <_printf_i+0x1c0>
 80194b8:	6019      	str	r1, [r3, #0]
 80194ba:	e002      	b.n	80194c2 <_printf_i+0x1c6>
 80194bc:	0668      	lsls	r0, r5, #25
 80194be:	d5fb      	bpl.n	80194b8 <_printf_i+0x1bc>
 80194c0:	8019      	strh	r1, [r3, #0]
 80194c2:	2300      	movs	r3, #0
 80194c4:	6123      	str	r3, [r4, #16]
 80194c6:	4616      	mov	r6, r2
 80194c8:	e7bc      	b.n	8019444 <_printf_i+0x148>
 80194ca:	6833      	ldr	r3, [r6, #0]
 80194cc:	1d1a      	adds	r2, r3, #4
 80194ce:	6032      	str	r2, [r6, #0]
 80194d0:	681e      	ldr	r6, [r3, #0]
 80194d2:	6862      	ldr	r2, [r4, #4]
 80194d4:	2100      	movs	r1, #0
 80194d6:	4630      	mov	r0, r6
 80194d8:	f7e6 ff0a 	bl	80002f0 <memchr>
 80194dc:	b108      	cbz	r0, 80194e2 <_printf_i+0x1e6>
 80194de:	1b80      	subs	r0, r0, r6
 80194e0:	6060      	str	r0, [r4, #4]
 80194e2:	6863      	ldr	r3, [r4, #4]
 80194e4:	6123      	str	r3, [r4, #16]
 80194e6:	2300      	movs	r3, #0
 80194e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80194ec:	e7aa      	b.n	8019444 <_printf_i+0x148>
 80194ee:	6923      	ldr	r3, [r4, #16]
 80194f0:	4632      	mov	r2, r6
 80194f2:	4649      	mov	r1, r9
 80194f4:	4640      	mov	r0, r8
 80194f6:	47d0      	blx	sl
 80194f8:	3001      	adds	r0, #1
 80194fa:	d0ad      	beq.n	8019458 <_printf_i+0x15c>
 80194fc:	6823      	ldr	r3, [r4, #0]
 80194fe:	079b      	lsls	r3, r3, #30
 8019500:	d413      	bmi.n	801952a <_printf_i+0x22e>
 8019502:	68e0      	ldr	r0, [r4, #12]
 8019504:	9b03      	ldr	r3, [sp, #12]
 8019506:	4298      	cmp	r0, r3
 8019508:	bfb8      	it	lt
 801950a:	4618      	movlt	r0, r3
 801950c:	e7a6      	b.n	801945c <_printf_i+0x160>
 801950e:	2301      	movs	r3, #1
 8019510:	4632      	mov	r2, r6
 8019512:	4649      	mov	r1, r9
 8019514:	4640      	mov	r0, r8
 8019516:	47d0      	blx	sl
 8019518:	3001      	adds	r0, #1
 801951a:	d09d      	beq.n	8019458 <_printf_i+0x15c>
 801951c:	3501      	adds	r5, #1
 801951e:	68e3      	ldr	r3, [r4, #12]
 8019520:	9903      	ldr	r1, [sp, #12]
 8019522:	1a5b      	subs	r3, r3, r1
 8019524:	42ab      	cmp	r3, r5
 8019526:	dcf2      	bgt.n	801950e <_printf_i+0x212>
 8019528:	e7eb      	b.n	8019502 <_printf_i+0x206>
 801952a:	2500      	movs	r5, #0
 801952c:	f104 0619 	add.w	r6, r4, #25
 8019530:	e7f5      	b.n	801951e <_printf_i+0x222>
 8019532:	bf00      	nop
 8019534:	0801a355 	.word	0x0801a355
 8019538:	0801a366 	.word	0x0801a366

0801953c <__sflush_r>:
 801953c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019544:	0716      	lsls	r6, r2, #28
 8019546:	4605      	mov	r5, r0
 8019548:	460c      	mov	r4, r1
 801954a:	d454      	bmi.n	80195f6 <__sflush_r+0xba>
 801954c:	684b      	ldr	r3, [r1, #4]
 801954e:	2b00      	cmp	r3, #0
 8019550:	dc02      	bgt.n	8019558 <__sflush_r+0x1c>
 8019552:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019554:	2b00      	cmp	r3, #0
 8019556:	dd48      	ble.n	80195ea <__sflush_r+0xae>
 8019558:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801955a:	2e00      	cmp	r6, #0
 801955c:	d045      	beq.n	80195ea <__sflush_r+0xae>
 801955e:	2300      	movs	r3, #0
 8019560:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019564:	682f      	ldr	r7, [r5, #0]
 8019566:	6a21      	ldr	r1, [r4, #32]
 8019568:	602b      	str	r3, [r5, #0]
 801956a:	d030      	beq.n	80195ce <__sflush_r+0x92>
 801956c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801956e:	89a3      	ldrh	r3, [r4, #12]
 8019570:	0759      	lsls	r1, r3, #29
 8019572:	d505      	bpl.n	8019580 <__sflush_r+0x44>
 8019574:	6863      	ldr	r3, [r4, #4]
 8019576:	1ad2      	subs	r2, r2, r3
 8019578:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801957a:	b10b      	cbz	r3, 8019580 <__sflush_r+0x44>
 801957c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801957e:	1ad2      	subs	r2, r2, r3
 8019580:	2300      	movs	r3, #0
 8019582:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019584:	6a21      	ldr	r1, [r4, #32]
 8019586:	4628      	mov	r0, r5
 8019588:	47b0      	blx	r6
 801958a:	1c43      	adds	r3, r0, #1
 801958c:	89a3      	ldrh	r3, [r4, #12]
 801958e:	d106      	bne.n	801959e <__sflush_r+0x62>
 8019590:	6829      	ldr	r1, [r5, #0]
 8019592:	291d      	cmp	r1, #29
 8019594:	d82b      	bhi.n	80195ee <__sflush_r+0xb2>
 8019596:	4a2a      	ldr	r2, [pc, #168]	@ (8019640 <__sflush_r+0x104>)
 8019598:	410a      	asrs	r2, r1
 801959a:	07d6      	lsls	r6, r2, #31
 801959c:	d427      	bmi.n	80195ee <__sflush_r+0xb2>
 801959e:	2200      	movs	r2, #0
 80195a0:	6062      	str	r2, [r4, #4]
 80195a2:	04d9      	lsls	r1, r3, #19
 80195a4:	6922      	ldr	r2, [r4, #16]
 80195a6:	6022      	str	r2, [r4, #0]
 80195a8:	d504      	bpl.n	80195b4 <__sflush_r+0x78>
 80195aa:	1c42      	adds	r2, r0, #1
 80195ac:	d101      	bne.n	80195b2 <__sflush_r+0x76>
 80195ae:	682b      	ldr	r3, [r5, #0]
 80195b0:	b903      	cbnz	r3, 80195b4 <__sflush_r+0x78>
 80195b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80195b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80195b6:	602f      	str	r7, [r5, #0]
 80195b8:	b1b9      	cbz	r1, 80195ea <__sflush_r+0xae>
 80195ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80195be:	4299      	cmp	r1, r3
 80195c0:	d002      	beq.n	80195c8 <__sflush_r+0x8c>
 80195c2:	4628      	mov	r0, r5
 80195c4:	f7ff fa9a 	bl	8018afc <_free_r>
 80195c8:	2300      	movs	r3, #0
 80195ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80195cc:	e00d      	b.n	80195ea <__sflush_r+0xae>
 80195ce:	2301      	movs	r3, #1
 80195d0:	4628      	mov	r0, r5
 80195d2:	47b0      	blx	r6
 80195d4:	4602      	mov	r2, r0
 80195d6:	1c50      	adds	r0, r2, #1
 80195d8:	d1c9      	bne.n	801956e <__sflush_r+0x32>
 80195da:	682b      	ldr	r3, [r5, #0]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d0c6      	beq.n	801956e <__sflush_r+0x32>
 80195e0:	2b1d      	cmp	r3, #29
 80195e2:	d001      	beq.n	80195e8 <__sflush_r+0xac>
 80195e4:	2b16      	cmp	r3, #22
 80195e6:	d11e      	bne.n	8019626 <__sflush_r+0xea>
 80195e8:	602f      	str	r7, [r5, #0]
 80195ea:	2000      	movs	r0, #0
 80195ec:	e022      	b.n	8019634 <__sflush_r+0xf8>
 80195ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80195f2:	b21b      	sxth	r3, r3
 80195f4:	e01b      	b.n	801962e <__sflush_r+0xf2>
 80195f6:	690f      	ldr	r7, [r1, #16]
 80195f8:	2f00      	cmp	r7, #0
 80195fa:	d0f6      	beq.n	80195ea <__sflush_r+0xae>
 80195fc:	0793      	lsls	r3, r2, #30
 80195fe:	680e      	ldr	r6, [r1, #0]
 8019600:	bf08      	it	eq
 8019602:	694b      	ldreq	r3, [r1, #20]
 8019604:	600f      	str	r7, [r1, #0]
 8019606:	bf18      	it	ne
 8019608:	2300      	movne	r3, #0
 801960a:	eba6 0807 	sub.w	r8, r6, r7
 801960e:	608b      	str	r3, [r1, #8]
 8019610:	f1b8 0f00 	cmp.w	r8, #0
 8019614:	dde9      	ble.n	80195ea <__sflush_r+0xae>
 8019616:	6a21      	ldr	r1, [r4, #32]
 8019618:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801961a:	4643      	mov	r3, r8
 801961c:	463a      	mov	r2, r7
 801961e:	4628      	mov	r0, r5
 8019620:	47b0      	blx	r6
 8019622:	2800      	cmp	r0, #0
 8019624:	dc08      	bgt.n	8019638 <__sflush_r+0xfc>
 8019626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801962a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801962e:	81a3      	strh	r3, [r4, #12]
 8019630:	f04f 30ff 	mov.w	r0, #4294967295
 8019634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019638:	4407      	add	r7, r0
 801963a:	eba8 0800 	sub.w	r8, r8, r0
 801963e:	e7e7      	b.n	8019610 <__sflush_r+0xd4>
 8019640:	dfbffffe 	.word	0xdfbffffe

08019644 <_fflush_r>:
 8019644:	b538      	push	{r3, r4, r5, lr}
 8019646:	690b      	ldr	r3, [r1, #16]
 8019648:	4605      	mov	r5, r0
 801964a:	460c      	mov	r4, r1
 801964c:	b913      	cbnz	r3, 8019654 <_fflush_r+0x10>
 801964e:	2500      	movs	r5, #0
 8019650:	4628      	mov	r0, r5
 8019652:	bd38      	pop	{r3, r4, r5, pc}
 8019654:	b118      	cbz	r0, 801965e <_fflush_r+0x1a>
 8019656:	6a03      	ldr	r3, [r0, #32]
 8019658:	b90b      	cbnz	r3, 801965e <_fflush_r+0x1a>
 801965a:	f7ff f8bb 	bl	80187d4 <__sinit>
 801965e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019662:	2b00      	cmp	r3, #0
 8019664:	d0f3      	beq.n	801964e <_fflush_r+0xa>
 8019666:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019668:	07d0      	lsls	r0, r2, #31
 801966a:	d404      	bmi.n	8019676 <_fflush_r+0x32>
 801966c:	0599      	lsls	r1, r3, #22
 801966e:	d402      	bmi.n	8019676 <_fflush_r+0x32>
 8019670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019672:	f7ff fa32 	bl	8018ada <__retarget_lock_acquire_recursive>
 8019676:	4628      	mov	r0, r5
 8019678:	4621      	mov	r1, r4
 801967a:	f7ff ff5f 	bl	801953c <__sflush_r>
 801967e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019680:	07da      	lsls	r2, r3, #31
 8019682:	4605      	mov	r5, r0
 8019684:	d4e4      	bmi.n	8019650 <_fflush_r+0xc>
 8019686:	89a3      	ldrh	r3, [r4, #12]
 8019688:	059b      	lsls	r3, r3, #22
 801968a:	d4e1      	bmi.n	8019650 <_fflush_r+0xc>
 801968c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801968e:	f7ff fa25 	bl	8018adc <__retarget_lock_release_recursive>
 8019692:	e7dd      	b.n	8019650 <_fflush_r+0xc>

08019694 <_putc_r>:
 8019694:	b570      	push	{r4, r5, r6, lr}
 8019696:	460d      	mov	r5, r1
 8019698:	4614      	mov	r4, r2
 801969a:	4606      	mov	r6, r0
 801969c:	b118      	cbz	r0, 80196a6 <_putc_r+0x12>
 801969e:	6a03      	ldr	r3, [r0, #32]
 80196a0:	b90b      	cbnz	r3, 80196a6 <_putc_r+0x12>
 80196a2:	f7ff f897 	bl	80187d4 <__sinit>
 80196a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80196a8:	07d8      	lsls	r0, r3, #31
 80196aa:	d405      	bmi.n	80196b8 <_putc_r+0x24>
 80196ac:	89a3      	ldrh	r3, [r4, #12]
 80196ae:	0599      	lsls	r1, r3, #22
 80196b0:	d402      	bmi.n	80196b8 <_putc_r+0x24>
 80196b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80196b4:	f7ff fa11 	bl	8018ada <__retarget_lock_acquire_recursive>
 80196b8:	68a3      	ldr	r3, [r4, #8]
 80196ba:	3b01      	subs	r3, #1
 80196bc:	2b00      	cmp	r3, #0
 80196be:	60a3      	str	r3, [r4, #8]
 80196c0:	da05      	bge.n	80196ce <_putc_r+0x3a>
 80196c2:	69a2      	ldr	r2, [r4, #24]
 80196c4:	4293      	cmp	r3, r2
 80196c6:	db12      	blt.n	80196ee <_putc_r+0x5a>
 80196c8:	b2eb      	uxtb	r3, r5
 80196ca:	2b0a      	cmp	r3, #10
 80196cc:	d00f      	beq.n	80196ee <_putc_r+0x5a>
 80196ce:	6823      	ldr	r3, [r4, #0]
 80196d0:	1c5a      	adds	r2, r3, #1
 80196d2:	6022      	str	r2, [r4, #0]
 80196d4:	701d      	strb	r5, [r3, #0]
 80196d6:	b2ed      	uxtb	r5, r5
 80196d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80196da:	07da      	lsls	r2, r3, #31
 80196dc:	d405      	bmi.n	80196ea <_putc_r+0x56>
 80196de:	89a3      	ldrh	r3, [r4, #12]
 80196e0:	059b      	lsls	r3, r3, #22
 80196e2:	d402      	bmi.n	80196ea <_putc_r+0x56>
 80196e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80196e6:	f7ff f9f9 	bl	8018adc <__retarget_lock_release_recursive>
 80196ea:	4628      	mov	r0, r5
 80196ec:	bd70      	pop	{r4, r5, r6, pc}
 80196ee:	4629      	mov	r1, r5
 80196f0:	4622      	mov	r2, r4
 80196f2:	4630      	mov	r0, r6
 80196f4:	f000 f802 	bl	80196fc <__swbuf_r>
 80196f8:	4605      	mov	r5, r0
 80196fa:	e7ed      	b.n	80196d8 <_putc_r+0x44>

080196fc <__swbuf_r>:
 80196fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196fe:	460e      	mov	r6, r1
 8019700:	4614      	mov	r4, r2
 8019702:	4605      	mov	r5, r0
 8019704:	b118      	cbz	r0, 801970e <__swbuf_r+0x12>
 8019706:	6a03      	ldr	r3, [r0, #32]
 8019708:	b90b      	cbnz	r3, 801970e <__swbuf_r+0x12>
 801970a:	f7ff f863 	bl	80187d4 <__sinit>
 801970e:	69a3      	ldr	r3, [r4, #24]
 8019710:	60a3      	str	r3, [r4, #8]
 8019712:	89a3      	ldrh	r3, [r4, #12]
 8019714:	071a      	lsls	r2, r3, #28
 8019716:	d501      	bpl.n	801971c <__swbuf_r+0x20>
 8019718:	6923      	ldr	r3, [r4, #16]
 801971a:	b943      	cbnz	r3, 801972e <__swbuf_r+0x32>
 801971c:	4621      	mov	r1, r4
 801971e:	4628      	mov	r0, r5
 8019720:	f000 f82a 	bl	8019778 <__swsetup_r>
 8019724:	b118      	cbz	r0, 801972e <__swbuf_r+0x32>
 8019726:	f04f 37ff 	mov.w	r7, #4294967295
 801972a:	4638      	mov	r0, r7
 801972c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801972e:	6823      	ldr	r3, [r4, #0]
 8019730:	6922      	ldr	r2, [r4, #16]
 8019732:	1a98      	subs	r0, r3, r2
 8019734:	6963      	ldr	r3, [r4, #20]
 8019736:	b2f6      	uxtb	r6, r6
 8019738:	4283      	cmp	r3, r0
 801973a:	4637      	mov	r7, r6
 801973c:	dc05      	bgt.n	801974a <__swbuf_r+0x4e>
 801973e:	4621      	mov	r1, r4
 8019740:	4628      	mov	r0, r5
 8019742:	f7ff ff7f 	bl	8019644 <_fflush_r>
 8019746:	2800      	cmp	r0, #0
 8019748:	d1ed      	bne.n	8019726 <__swbuf_r+0x2a>
 801974a:	68a3      	ldr	r3, [r4, #8]
 801974c:	3b01      	subs	r3, #1
 801974e:	60a3      	str	r3, [r4, #8]
 8019750:	6823      	ldr	r3, [r4, #0]
 8019752:	1c5a      	adds	r2, r3, #1
 8019754:	6022      	str	r2, [r4, #0]
 8019756:	701e      	strb	r6, [r3, #0]
 8019758:	6962      	ldr	r2, [r4, #20]
 801975a:	1c43      	adds	r3, r0, #1
 801975c:	429a      	cmp	r2, r3
 801975e:	d004      	beq.n	801976a <__swbuf_r+0x6e>
 8019760:	89a3      	ldrh	r3, [r4, #12]
 8019762:	07db      	lsls	r3, r3, #31
 8019764:	d5e1      	bpl.n	801972a <__swbuf_r+0x2e>
 8019766:	2e0a      	cmp	r6, #10
 8019768:	d1df      	bne.n	801972a <__swbuf_r+0x2e>
 801976a:	4621      	mov	r1, r4
 801976c:	4628      	mov	r0, r5
 801976e:	f7ff ff69 	bl	8019644 <_fflush_r>
 8019772:	2800      	cmp	r0, #0
 8019774:	d0d9      	beq.n	801972a <__swbuf_r+0x2e>
 8019776:	e7d6      	b.n	8019726 <__swbuf_r+0x2a>

08019778 <__swsetup_r>:
 8019778:	b538      	push	{r3, r4, r5, lr}
 801977a:	4b29      	ldr	r3, [pc, #164]	@ (8019820 <__swsetup_r+0xa8>)
 801977c:	4605      	mov	r5, r0
 801977e:	6818      	ldr	r0, [r3, #0]
 8019780:	460c      	mov	r4, r1
 8019782:	b118      	cbz	r0, 801978c <__swsetup_r+0x14>
 8019784:	6a03      	ldr	r3, [r0, #32]
 8019786:	b90b      	cbnz	r3, 801978c <__swsetup_r+0x14>
 8019788:	f7ff f824 	bl	80187d4 <__sinit>
 801978c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019790:	0719      	lsls	r1, r3, #28
 8019792:	d422      	bmi.n	80197da <__swsetup_r+0x62>
 8019794:	06da      	lsls	r2, r3, #27
 8019796:	d407      	bmi.n	80197a8 <__swsetup_r+0x30>
 8019798:	2209      	movs	r2, #9
 801979a:	602a      	str	r2, [r5, #0]
 801979c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80197a0:	81a3      	strh	r3, [r4, #12]
 80197a2:	f04f 30ff 	mov.w	r0, #4294967295
 80197a6:	e033      	b.n	8019810 <__swsetup_r+0x98>
 80197a8:	0758      	lsls	r0, r3, #29
 80197aa:	d512      	bpl.n	80197d2 <__swsetup_r+0x5a>
 80197ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80197ae:	b141      	cbz	r1, 80197c2 <__swsetup_r+0x4a>
 80197b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80197b4:	4299      	cmp	r1, r3
 80197b6:	d002      	beq.n	80197be <__swsetup_r+0x46>
 80197b8:	4628      	mov	r0, r5
 80197ba:	f7ff f99f 	bl	8018afc <_free_r>
 80197be:	2300      	movs	r3, #0
 80197c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80197c2:	89a3      	ldrh	r3, [r4, #12]
 80197c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80197c8:	81a3      	strh	r3, [r4, #12]
 80197ca:	2300      	movs	r3, #0
 80197cc:	6063      	str	r3, [r4, #4]
 80197ce:	6923      	ldr	r3, [r4, #16]
 80197d0:	6023      	str	r3, [r4, #0]
 80197d2:	89a3      	ldrh	r3, [r4, #12]
 80197d4:	f043 0308 	orr.w	r3, r3, #8
 80197d8:	81a3      	strh	r3, [r4, #12]
 80197da:	6923      	ldr	r3, [r4, #16]
 80197dc:	b94b      	cbnz	r3, 80197f2 <__swsetup_r+0x7a>
 80197de:	89a3      	ldrh	r3, [r4, #12]
 80197e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80197e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80197e8:	d003      	beq.n	80197f2 <__swsetup_r+0x7a>
 80197ea:	4621      	mov	r1, r4
 80197ec:	4628      	mov	r0, r5
 80197ee:	f000 f897 	bl	8019920 <__smakebuf_r>
 80197f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80197f6:	f013 0201 	ands.w	r2, r3, #1
 80197fa:	d00a      	beq.n	8019812 <__swsetup_r+0x9a>
 80197fc:	2200      	movs	r2, #0
 80197fe:	60a2      	str	r2, [r4, #8]
 8019800:	6962      	ldr	r2, [r4, #20]
 8019802:	4252      	negs	r2, r2
 8019804:	61a2      	str	r2, [r4, #24]
 8019806:	6922      	ldr	r2, [r4, #16]
 8019808:	b942      	cbnz	r2, 801981c <__swsetup_r+0xa4>
 801980a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801980e:	d1c5      	bne.n	801979c <__swsetup_r+0x24>
 8019810:	bd38      	pop	{r3, r4, r5, pc}
 8019812:	0799      	lsls	r1, r3, #30
 8019814:	bf58      	it	pl
 8019816:	6962      	ldrpl	r2, [r4, #20]
 8019818:	60a2      	str	r2, [r4, #8]
 801981a:	e7f4      	b.n	8019806 <__swsetup_r+0x8e>
 801981c:	2000      	movs	r0, #0
 801981e:	e7f7      	b.n	8019810 <__swsetup_r+0x98>
 8019820:	240001d0 	.word	0x240001d0

08019824 <memmove>:
 8019824:	4288      	cmp	r0, r1
 8019826:	b510      	push	{r4, lr}
 8019828:	eb01 0402 	add.w	r4, r1, r2
 801982c:	d902      	bls.n	8019834 <memmove+0x10>
 801982e:	4284      	cmp	r4, r0
 8019830:	4623      	mov	r3, r4
 8019832:	d807      	bhi.n	8019844 <memmove+0x20>
 8019834:	1e43      	subs	r3, r0, #1
 8019836:	42a1      	cmp	r1, r4
 8019838:	d008      	beq.n	801984c <memmove+0x28>
 801983a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801983e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019842:	e7f8      	b.n	8019836 <memmove+0x12>
 8019844:	4402      	add	r2, r0
 8019846:	4601      	mov	r1, r0
 8019848:	428a      	cmp	r2, r1
 801984a:	d100      	bne.n	801984e <memmove+0x2a>
 801984c:	bd10      	pop	{r4, pc}
 801984e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019856:	e7f7      	b.n	8019848 <memmove+0x24>

08019858 <_sbrk_r>:
 8019858:	b538      	push	{r3, r4, r5, lr}
 801985a:	4d06      	ldr	r5, [pc, #24]	@ (8019874 <_sbrk_r+0x1c>)
 801985c:	2300      	movs	r3, #0
 801985e:	4604      	mov	r4, r0
 8019860:	4608      	mov	r0, r1
 8019862:	602b      	str	r3, [r5, #0]
 8019864:	f7ea fab0 	bl	8003dc8 <_sbrk>
 8019868:	1c43      	adds	r3, r0, #1
 801986a:	d102      	bne.n	8019872 <_sbrk_r+0x1a>
 801986c:	682b      	ldr	r3, [r5, #0]
 801986e:	b103      	cbz	r3, 8019872 <_sbrk_r+0x1a>
 8019870:	6023      	str	r3, [r4, #0]
 8019872:	bd38      	pop	{r3, r4, r5, pc}
 8019874:	24028fa8 	.word	0x24028fa8

08019878 <_realloc_r>:
 8019878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801987c:	4680      	mov	r8, r0
 801987e:	4615      	mov	r5, r2
 8019880:	460c      	mov	r4, r1
 8019882:	b921      	cbnz	r1, 801988e <_realloc_r+0x16>
 8019884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019888:	4611      	mov	r1, r2
 801988a:	f7ff b9a3 	b.w	8018bd4 <_malloc_r>
 801988e:	b92a      	cbnz	r2, 801989c <_realloc_r+0x24>
 8019890:	f7ff f934 	bl	8018afc <_free_r>
 8019894:	2400      	movs	r4, #0
 8019896:	4620      	mov	r0, r4
 8019898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801989c:	f000 f89e 	bl	80199dc <_malloc_usable_size_r>
 80198a0:	4285      	cmp	r5, r0
 80198a2:	4606      	mov	r6, r0
 80198a4:	d802      	bhi.n	80198ac <_realloc_r+0x34>
 80198a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80198aa:	d8f4      	bhi.n	8019896 <_realloc_r+0x1e>
 80198ac:	4629      	mov	r1, r5
 80198ae:	4640      	mov	r0, r8
 80198b0:	f7ff f990 	bl	8018bd4 <_malloc_r>
 80198b4:	4607      	mov	r7, r0
 80198b6:	2800      	cmp	r0, #0
 80198b8:	d0ec      	beq.n	8019894 <_realloc_r+0x1c>
 80198ba:	42b5      	cmp	r5, r6
 80198bc:	462a      	mov	r2, r5
 80198be:	4621      	mov	r1, r4
 80198c0:	bf28      	it	cs
 80198c2:	4632      	movcs	r2, r6
 80198c4:	f7ff f90b 	bl	8018ade <memcpy>
 80198c8:	4621      	mov	r1, r4
 80198ca:	4640      	mov	r0, r8
 80198cc:	f7ff f916 	bl	8018afc <_free_r>
 80198d0:	463c      	mov	r4, r7
 80198d2:	e7e0      	b.n	8019896 <_realloc_r+0x1e>

080198d4 <__swhatbuf_r>:
 80198d4:	b570      	push	{r4, r5, r6, lr}
 80198d6:	460c      	mov	r4, r1
 80198d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198dc:	2900      	cmp	r1, #0
 80198de:	b096      	sub	sp, #88	@ 0x58
 80198e0:	4615      	mov	r5, r2
 80198e2:	461e      	mov	r6, r3
 80198e4:	da0d      	bge.n	8019902 <__swhatbuf_r+0x2e>
 80198e6:	89a3      	ldrh	r3, [r4, #12]
 80198e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80198ec:	f04f 0100 	mov.w	r1, #0
 80198f0:	bf14      	ite	ne
 80198f2:	2340      	movne	r3, #64	@ 0x40
 80198f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80198f8:	2000      	movs	r0, #0
 80198fa:	6031      	str	r1, [r6, #0]
 80198fc:	602b      	str	r3, [r5, #0]
 80198fe:	b016      	add	sp, #88	@ 0x58
 8019900:	bd70      	pop	{r4, r5, r6, pc}
 8019902:	466a      	mov	r2, sp
 8019904:	f000 f848 	bl	8019998 <_fstat_r>
 8019908:	2800      	cmp	r0, #0
 801990a:	dbec      	blt.n	80198e6 <__swhatbuf_r+0x12>
 801990c:	9901      	ldr	r1, [sp, #4]
 801990e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019912:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019916:	4259      	negs	r1, r3
 8019918:	4159      	adcs	r1, r3
 801991a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801991e:	e7eb      	b.n	80198f8 <__swhatbuf_r+0x24>

08019920 <__smakebuf_r>:
 8019920:	898b      	ldrh	r3, [r1, #12]
 8019922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019924:	079d      	lsls	r5, r3, #30
 8019926:	4606      	mov	r6, r0
 8019928:	460c      	mov	r4, r1
 801992a:	d507      	bpl.n	801993c <__smakebuf_r+0x1c>
 801992c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019930:	6023      	str	r3, [r4, #0]
 8019932:	6123      	str	r3, [r4, #16]
 8019934:	2301      	movs	r3, #1
 8019936:	6163      	str	r3, [r4, #20]
 8019938:	b003      	add	sp, #12
 801993a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801993c:	ab01      	add	r3, sp, #4
 801993e:	466a      	mov	r2, sp
 8019940:	f7ff ffc8 	bl	80198d4 <__swhatbuf_r>
 8019944:	9f00      	ldr	r7, [sp, #0]
 8019946:	4605      	mov	r5, r0
 8019948:	4639      	mov	r1, r7
 801994a:	4630      	mov	r0, r6
 801994c:	f7ff f942 	bl	8018bd4 <_malloc_r>
 8019950:	b948      	cbnz	r0, 8019966 <__smakebuf_r+0x46>
 8019952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019956:	059a      	lsls	r2, r3, #22
 8019958:	d4ee      	bmi.n	8019938 <__smakebuf_r+0x18>
 801995a:	f023 0303 	bic.w	r3, r3, #3
 801995e:	f043 0302 	orr.w	r3, r3, #2
 8019962:	81a3      	strh	r3, [r4, #12]
 8019964:	e7e2      	b.n	801992c <__smakebuf_r+0xc>
 8019966:	89a3      	ldrh	r3, [r4, #12]
 8019968:	6020      	str	r0, [r4, #0]
 801996a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801996e:	81a3      	strh	r3, [r4, #12]
 8019970:	9b01      	ldr	r3, [sp, #4]
 8019972:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019976:	b15b      	cbz	r3, 8019990 <__smakebuf_r+0x70>
 8019978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801997c:	4630      	mov	r0, r6
 801997e:	f000 f81d 	bl	80199bc <_isatty_r>
 8019982:	b128      	cbz	r0, 8019990 <__smakebuf_r+0x70>
 8019984:	89a3      	ldrh	r3, [r4, #12]
 8019986:	f023 0303 	bic.w	r3, r3, #3
 801998a:	f043 0301 	orr.w	r3, r3, #1
 801998e:	81a3      	strh	r3, [r4, #12]
 8019990:	89a3      	ldrh	r3, [r4, #12]
 8019992:	431d      	orrs	r5, r3
 8019994:	81a5      	strh	r5, [r4, #12]
 8019996:	e7cf      	b.n	8019938 <__smakebuf_r+0x18>

08019998 <_fstat_r>:
 8019998:	b538      	push	{r3, r4, r5, lr}
 801999a:	4d07      	ldr	r5, [pc, #28]	@ (80199b8 <_fstat_r+0x20>)
 801999c:	2300      	movs	r3, #0
 801999e:	4604      	mov	r4, r0
 80199a0:	4608      	mov	r0, r1
 80199a2:	4611      	mov	r1, r2
 80199a4:	602b      	str	r3, [r5, #0]
 80199a6:	f7ea f9e6 	bl	8003d76 <_fstat>
 80199aa:	1c43      	adds	r3, r0, #1
 80199ac:	d102      	bne.n	80199b4 <_fstat_r+0x1c>
 80199ae:	682b      	ldr	r3, [r5, #0]
 80199b0:	b103      	cbz	r3, 80199b4 <_fstat_r+0x1c>
 80199b2:	6023      	str	r3, [r4, #0]
 80199b4:	bd38      	pop	{r3, r4, r5, pc}
 80199b6:	bf00      	nop
 80199b8:	24028fa8 	.word	0x24028fa8

080199bc <_isatty_r>:
 80199bc:	b538      	push	{r3, r4, r5, lr}
 80199be:	4d06      	ldr	r5, [pc, #24]	@ (80199d8 <_isatty_r+0x1c>)
 80199c0:	2300      	movs	r3, #0
 80199c2:	4604      	mov	r4, r0
 80199c4:	4608      	mov	r0, r1
 80199c6:	602b      	str	r3, [r5, #0]
 80199c8:	f7ea f9e5 	bl	8003d96 <_isatty>
 80199cc:	1c43      	adds	r3, r0, #1
 80199ce:	d102      	bne.n	80199d6 <_isatty_r+0x1a>
 80199d0:	682b      	ldr	r3, [r5, #0]
 80199d2:	b103      	cbz	r3, 80199d6 <_isatty_r+0x1a>
 80199d4:	6023      	str	r3, [r4, #0]
 80199d6:	bd38      	pop	{r3, r4, r5, pc}
 80199d8:	24028fa8 	.word	0x24028fa8

080199dc <_malloc_usable_size_r>:
 80199dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80199e0:	1f18      	subs	r0, r3, #4
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	bfbc      	itt	lt
 80199e6:	580b      	ldrlt	r3, [r1, r0]
 80199e8:	18c0      	addlt	r0, r0, r3
 80199ea:	4770      	bx	lr

080199ec <_init>:
 80199ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199ee:	bf00      	nop
 80199f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199f2:	bc08      	pop	{r3}
 80199f4:	469e      	mov	lr, r3
 80199f6:	4770      	bx	lr

080199f8 <_fini>:
 80199f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199fa:	bf00      	nop
 80199fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199fe:	bc08      	pop	{r3}
 8019a00:	469e      	mov	lr, r3
 8019a02:	4770      	bx	lr
