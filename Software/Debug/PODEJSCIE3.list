
PODEJSCIE3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6b8  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  0800b950  0800b950  0000c950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bc2c  0800bc2c  0000cc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bc34  0800bc34  0000cc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bc38  0800bc38  0000cc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000b8  24000000  0800bc3c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f28  240000b8  0800bcf4  0000d0b8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000fe0  0800bcf4  0000dfe0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a63b  00000000  00000000  0000d0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002eb5  00000000  00000000  00027721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001280  00000000  00000000  0002a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e87  00000000  00000000  0002b858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036a34  00000000  00000000  0002c6df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019e22  00000000  00000000  00063113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ff0f  00000000  00000000  0007cf35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001dce44  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e90  00000000  00000000  001dce88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  001e1d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000b8 	.word	0x240000b8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b938 	.word	0x0800b938

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000bc 	.word	0x240000bc
 80002d4:	0800b938 	.word	0x0800b938

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <_DoInit>:
    if (pRTTCBInit->acID[0] != 'S') {                                     \
      _DoInit();                                                          \
    }                                                                     \
  } while (0)

static void _DoInit(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
                                 // no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT +
 80005ce:	4b26      	ldr	r3, [pc, #152]	@ (8000668 <_DoInit+0xa0>)
 80005d0:	603b      	str	r3, [r7, #0]
                                                           // the cache ever
                                                           // becomes dirty and
                                                           // all changes are
                                                           // visible in HW
                                                           // directly
  memset((SEGGER_RTT_CB*)p, 0,
 80005d2:	22a8      	movs	r2, #168	@ 0xa8
 80005d4:	2100      	movs	r1, #0
 80005d6:	6838      	ldr	r0, [r7, #0]
 80005d8:	f00b f974 	bl	800b8c4 <memset>
         sizeof(_SEGGER_RTT));  // Make sure that the RTT CB is always zero
                                // initialized.
  p->MaxNumUpBuffers = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	2203      	movs	r2, #3
 80005e0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	2203      	movs	r2, #3
 80005e6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName = "Terminal";
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	4a20      	ldr	r2, [pc, #128]	@ (800066c <_DoInit+0xa4>)
 80005ec:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer = _acUpBuffer;
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	4a1f      	ldr	r2, [pc, #124]	@ (8000670 <_DoInit+0xa8>)
 80005f2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer = BUFFER_SIZE_UP;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005fa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff = 0u;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	2200      	movs	r2, #0
 8000600:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff = 0u;
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	2200      	movs	r2, #0
 8000606:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags = SEGGER_RTT_MODE_DEFAULT;
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	2200      	movs	r2, #0
 800060c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName = "Terminal";
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	4a16      	ldr	r2, [pc, #88]	@ (800066c <_DoInit+0xa4>)
 8000612:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer = _acDownBuffer;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	4a17      	ldr	r2, [pc, #92]	@ (8000674 <_DoInit+0xac>)
 8000618:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer = BUFFER_SIZE_DOWN;
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	2210      	movs	r2, #16
 800061e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff = 0u;
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	2200      	movs	r2, #0
 8000624:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff = 0u;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	2200      	movs	r2, #0
 800062a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags = SEGGER_RTT_MODE_DEFAULT;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2200      	movs	r2, #0
 8000630:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in
  // initializer memory (usually flash), as this would cause J-Link to "find"
  // the control block at a wrong address.
  //
  RTT__DMB();  // Force order of memory accesses for cores that may perform
 8000632:	f3bf 8f5f 	dmb	sy
               // out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	e00c      	b.n	8000656 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 -
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f1c3 030f 	rsb	r3, r3, #15
 8000642:	4a0d      	ldr	r2, [pc, #52]	@ (8000678 <_DoInit+0xb0>)
 8000644:	5cd1      	ldrb	r1, [r2, r3]
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	460a      	mov	r2, r1
 800064e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3301      	adds	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b0f      	cmp	r3, #15
 800065a:	d9ef      	bls.n	800063c <_DoInit+0x74>
                           i];  // Skip terminating \0 at the end of the array
  }
  RTT__DMB();  // Force order of memory accesses for cores that may perform
 800065c:	f3bf 8f5f 	dmb	sy
               // out-of-order memory accesses
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	24000000 	.word	0x24000000
 800066c:	0800b950 	.word	0x0800b950
 8000670:	240000d4 	.word	0x240000d4
 8000674:	240004d4 	.word	0x240004d4
 8000678:	0800b9c8 	.word	0x0800b9c8

0800067c <_WriteBlocking>:
 *
 *  Return value
 *    >= 0 - Number of bytes written into buffer.
 */
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer,
                               unsigned NumBytes) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	@ 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	61fb      	str	r3, [r7, #28]
  do {
    RdOff =
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	691b      	ldr	r3, [r3, #16]
 8000696:	61bb      	str	r3, [r7, #24]
        pRing->RdOff;  // May be changed by host (debug probe) in the meantime
    if (RdOff > WrOff) {
 8000698:	69ba      	ldr	r2, [r7, #24]
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	429a      	cmp	r2, r3
 800069e:	d905      	bls.n	80006ac <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80006a0:	69ba      	ldr	r2, [r7, #24]
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	3b01      	subs	r3, #1
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80006aa:	e007      	b.n	80006bc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	69b9      	ldr	r1, [r7, #24]
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	1acb      	subs	r3, r1, r3
 80006b6:	4413      	add	r3, r2
 80006b8:	3b01      	subs	r3, #1
 80006ba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite =
        MIN(NumBytesToWrite,
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	1ad3      	subs	r3, r2, r3
    NumBytesToWrite =
 80006c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006c6:	4293      	cmp	r3, r2
 80006c8:	bf28      	it	cs
 80006ca:	4613      	movcs	r3, r2
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
            (pRing->SizeOfBuffer - WrOff));  // Number of bytes that can be
                                             // written until buffer wrap-around
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80006ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4293      	cmp	r3, r2
 80006d4:	bf28      	it	cs
 80006d6:	4613      	movcs	r3, r2
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	685a      	ldr	r2, [r3, #4]
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	4413      	add	r3, r2
 80006e2:	617b      	str	r3, [r7, #20]
    WrOff += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80006e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006e6:	68b9      	ldr	r1, [r7, #8]
 80006e8:	6978      	ldr	r0, [r7, #20]
 80006ea:	f00b f917 	bl	800b91c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80006ee:	6a3a      	ldr	r2, [r7, #32]
 80006f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f2:	4413      	add	r3, r2
 80006f4:	623b      	str	r3, [r7, #32]
    pBuffer += NumBytesToWrite;
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fa:	4413      	add	r3, r2
 80006fc:	60bb      	str	r3, [r7, #8]
    NumBytes -= NumBytesToWrite;
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	607b      	str	r3, [r7, #4]
    WrOff += NumBytesToWrite;
 8000706:	69fa      	ldr	r2, [r7, #28]
 8000708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070a:	4413      	add	r3, r2
 800070c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	69fa      	ldr	r2, [r7, #28]
 8000714:	429a      	cmp	r2, r3
 8000716:	d101      	bne.n	800071c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
 800071c:	f3bf 8f5f 	dmb	sy
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = WrOff;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	69fa      	ldr	r2, [r7, #28]
 8000724:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1b2      	bne.n	8000692 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800072c:	6a3b      	ldr	r3, [r7, #32]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3728      	adds	r7, #40	@ 0x28
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <_WriteNoCheck>:
 *  Notes
 *    (1) If there might not be enough space in the "Up"-buffer, call
 * _WriteBlocking
 */
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData,
                          unsigned NumBytes) {
 8000736:	b580      	push	{r7, lr}
 8000738:	b088      	sub	sp, #32
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	68db      	ldr	r3, [r3, #12]
 8000746:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	689a      	ldr	r2, [r3, #8]
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8000752:	69ba      	ldr	r2, [r7, #24]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	429a      	cmp	r2, r3
 8000758:	d911      	bls.n	800077e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	685a      	ldr	r2, [r3, #4]
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	4413      	add	r3, r2
 8000762:	613b      	str	r3, [r7, #16]
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	68b9      	ldr	r1, [r7, #8]
 8000768:	6938      	ldr	r0, [r7, #16]
 800076a:	f00b f8d7 	bl	800b91c <memcpy>
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
 800076e:	f3bf 8f5f 	dmb	sy
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = WrOff + NumBytes;
 8000772:	69fa      	ldr	r2, [r7, #28]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	441a      	add	r2, r3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	60da      	str	r2, [r3, #12]
                 // in case CPU is allowed to change the order of memory
                 // accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800077c:	e01f      	b.n	80007be <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	685a      	ldr	r2, [r3, #4]
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	4413      	add	r3, r2
 800078a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	68b9      	ldr	r1, [r7, #8]
 8000790:	6938      	ldr	r0, [r7, #16]
 8000792:	f00b f8c3 	bl	800b91c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	69bb      	ldr	r3, [r7, #24]
 80007a8:	4413      	add	r3, r2
 80007aa:	697a      	ldr	r2, [r7, #20]
 80007ac:	4619      	mov	r1, r3
 80007ae:	6938      	ldr	r0, [r7, #16]
 80007b0:	f00b f8b4 	bl	800b91c <memcpy>
    RTT__DMB();  // Force data write to be complete before writing the <WrOff>,
 80007b4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	697a      	ldr	r2, [r7, #20]
 80007bc:	60da      	str	r2, [r3, #12]
}
 80007be:	bf00      	nop
 80007c0:	3720      	adds	r7, #32
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <_GetAvailWriteSpace>:
 *    pRing        Ring buffer to check.
 *
 *  Return value
 *    Number of bytes that are free in the buffer.
 */
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80007c6:	b480      	push	{r7}
 80007c8:	b087      	sub	sp, #28
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	429a      	cmp	r2, r3
 80007e0:	d808      	bhi.n	80007f4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	689a      	ldr	r2, [r3, #8]
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	1ad2      	subs	r2, r2, r3
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	4413      	add	r3, r2
 80007ee:	3b01      	subs	r3, #1
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	e004      	b.n	80007fe <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	3b01      	subs	r3, #1
 80007fc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80007fe:	697b      	ldr	r3, [r7, #20]
}
 8000800:	4618      	mov	r0, r3
 8000802:	371c      	adds	r7, #28
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <SEGGER_RTT_WriteNoLock>:
 *        and may only be called after RTT has been initialized.
 *        Either by calling SEGGER_RTT_Init() or calling another RTT API
 * function first.
 */
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer,
                                unsigned NumBytes) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  const char* pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char*)pBuffer;
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	61bb      	str	r3, [r7, #24]
  pRing =
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	4613      	mov	r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	4413      	add	r3, r2
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	4a1f      	ldr	r2, [pc, #124]	@ (80008a8 <SEGGER_RTT_WriteNoLock+0x9c>)
 800082a:	4413      	add	r3, r2
 800082c:	617b      	str	r3, [r7, #20]
                                                         // of our changes go
                                                         // into HW directly
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d029      	beq.n	800088a <SEGGER_RTT_WriteNoLock+0x7e>
 8000836:	2b02      	cmp	r3, #2
 8000838:	d82e      	bhi.n	8000898 <SEGGER_RTT_WriteNoLock+0x8c>
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <SEGGER_RTT_WriteNoLock+0x38>
 800083e:	2b01      	cmp	r3, #1
 8000840:	d013      	beq.n	800086a <SEGGER_RTT_WriteNoLock+0x5e>
 8000842:	e029      	b.n	8000898 <SEGGER_RTT_WriteNoLock+0x8c>
    case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
      //
      // If we are in skip mode and there is no space for the whole
      // of this output, don't bother.
      //
      Avail = _GetAvailWriteSpace(pRing);
 8000844:	6978      	ldr	r0, [r7, #20]
 8000846:	f7ff ffbe 	bl	80007c6 <_GetAvailWriteSpace>
 800084a:	6138      	str	r0, [r7, #16]
      if (Avail < NumBytes) {
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	d202      	bcs.n	800085a <SEGGER_RTT_WriteNoLock+0x4e>
        Status = 0u;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
      } else {
        Status = NumBytes;
        _WriteNoCheck(pRing, pData, NumBytes);
      }
      break;
 8000858:	e021      	b.n	800089e <SEGGER_RTT_WriteNoLock+0x92>
        Status = NumBytes;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	61fb      	str	r3, [r7, #28]
        _WriteNoCheck(pRing, pData, NumBytes);
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	69b9      	ldr	r1, [r7, #24]
 8000862:	6978      	ldr	r0, [r7, #20]
 8000864:	f7ff ff67 	bl	8000736 <_WriteNoCheck>
      break;
 8000868:	e019      	b.n	800089e <SEGGER_RTT_WriteNoLock+0x92>
    case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
      //
      // If we are in trim mode, trim to what we can output without blocking.
      //
      Avail = _GetAvailWriteSpace(pRing);
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f7ff ffab 	bl	80007c6 <_GetAvailWriteSpace>
 8000870:	6138      	str	r0, [r7, #16]
      Status = Avail < NumBytes ? Avail : NumBytes;
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	4293      	cmp	r3, r2
 8000878:	bf28      	it	cs
 800087a:	4613      	movcs	r3, r2
 800087c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, Status);
 800087e:	69fa      	ldr	r2, [r7, #28]
 8000880:	69b9      	ldr	r1, [r7, #24]
 8000882:	6978      	ldr	r0, [r7, #20]
 8000884:	f7ff ff57 	bl	8000736 <_WriteNoCheck>
      break;
 8000888:	e009      	b.n	800089e <SEGGER_RTT_WriteNoLock+0x92>
    case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
      //
      // If we are in blocking mode, output everything.
      //
      Status = _WriteBlocking(pRing, pData, NumBytes);
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	69b9      	ldr	r1, [r7, #24]
 800088e:	6978      	ldr	r0, [r7, #20]
 8000890:	f7ff fef4 	bl	800067c <_WriteBlocking>
 8000894:	61f8      	str	r0, [r7, #28]
      break;
 8000896:	e002      	b.n	800089e <SEGGER_RTT_WriteNoLock+0x92>
    default:
      Status = 0u;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
      break;
 800089c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800089e:	69fb      	ldr	r3, [r7, #28]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	24000000 	.word	0x24000000

080008ac <SEGGER_RTT_Write>:
 *
 *  Notes
 *    (1) Data is stored according to buffer flags.
 */
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer,
                          unsigned NumBytes) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80008b8:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <SEGGER_RTT_Write+0x48>)
 80008ba:	61fb      	str	r3, [r7, #28]
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b53      	cmp	r3, #83	@ 0x53
 80008c4:	d001      	beq.n	80008ca <SEGGER_RTT_Write+0x1e>
 80008c6:	f7ff fe7f 	bl	80005c8 <_DoInit>
  SEGGER_RTT_LOCK();
 80008ca:	f3ef 8311 	mrs	r3, BASEPRI
 80008ce:	f04f 0120 	mov.w	r1, #32
 80008d2:	f381 8811 	msr	BASEPRI, r1
 80008d6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	68b9      	ldr	r1, [r7, #8]
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f7ff ff95 	bl	800080c <SEGGER_RTT_WriteNoLock>
 80008e2:	6178      	str	r0, [r7, #20]
      BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
  SEGGER_RTT_UNLOCK();
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80008ea:	697b      	ldr	r3, [r7, #20]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	24000000 	.word	0x24000000

080008f8 <_StoreChar>:
 */
/*********************************************************************
 *
 *       _StoreChar
 */
static void _StoreChar(SEGGER_RTT_PRINTF_DESC* p, char c) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	429a      	cmp	r2, r3
 8000914:	d80e      	bhi.n	8000934 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	78fa      	ldrb	r2, [r7, #3]
 8000920:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	1c5a      	adds	r2, r3, #1
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	689a      	ldr	r2, [r3, #8]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	d115      	bne.n	800096c <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6918      	ldr	r0, [r3, #16]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6819      	ldr	r1, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	461a      	mov	r2, r3
 800094e:	f7ff ffad 	bl	80008ac <SEGGER_RTT_Write>
 8000952:	4602      	mov	r2, r0
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	429a      	cmp	r2, r3
 800095a:	d004      	beq.n	8000966 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f04f 32ff 	mov.w	r2, #4294967295
 8000962:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8000964:	e002      	b.n	800096c <_StoreChar+0x74>
      p->Cnt = 0u;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <_PrintUnsigned>:
 *
 *       _PrintUnsigned
 */
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC* pBufferDesc, unsigned v,
                           unsigned Base, unsigned NumDigits,
                           unsigned FieldWidth, unsigned FormatFlags) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	@ 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8000986:	2301      	movs	r3, #1
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800098a:	2301      	movs	r3, #1
 800098c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800098e:	e007      	b.n	80009a0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8000990:	6a3a      	ldr	r2, [r7, #32]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	fbb2 f3f3 	udiv	r3, r2, r3
 8000998:	623b      	str	r3, [r7, #32]
    Width++;
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3301      	adds	r3, #1
 800099e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80009a0:	6a3a      	ldr	r2, [r7, #32]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d2f3      	bcs.n	8000990 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d901      	bls.n	80009b4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80009b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d125      	bne.n	8000a0a <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 80009be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d022      	beq.n	8000a0a <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) &&
 80009c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d005      	beq.n	80009da <_PrintUnsigned+0x66>
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d102      	bne.n	80009da <_PrintUnsigned+0x66>
          (NumDigits == 0u)) {
        c = '0';
 80009d4:	2330      	movs	r3, #48	@ 0x30
 80009d6:	76fb      	strb	r3, [r7, #27]
 80009d8:	e001      	b.n	80009de <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80009da:	2320      	movs	r3, #32
 80009dc:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80009de:	e00b      	b.n	80009f8 <_PrintUnsigned+0x84>
        FieldWidth--;
 80009e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009e2:	3b01      	subs	r3, #1
 80009e4:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80009e6:	7efb      	ldrb	r3, [r7, #27]
 80009e8:	4619      	mov	r1, r3
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f7ff ff84 	bl	80008f8 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db07      	blt.n	8000a08 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80009f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d005      	beq.n	8000a0a <_PrintUnsigned+0x96>
 80009fe:	69fa      	ldr	r2, [r7, #28]
 8000a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d3ec      	bcc.n	80009e0 <_PrintUnsigned+0x6c>
 8000a06:	e000      	b.n	8000a0a <_PrintUnsigned+0x96>
          break;
 8000a08:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db55      	blt.n	8000abe <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {  // User specified a min number of digits to print?
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d903      	bls.n	8000a20 <_PrintUnsigned+0xac>
                             // => Make sure we loop at least that often, before
                             // checking anything else (> 1 check avoids
                             // problems with NumDigits being signed / unsigned)
        NumDigits--;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	e009      	b.n	8000a34 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a28:	617b      	str	r3, [r7, #20]
        if (Div < Base) {  // Is our divider big enough to extract the highest
 8000a2a:	697a      	ldr	r2, [r7, #20]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d200      	bcs.n	8000a34 <_PrintUnsigned+0xc0>
                           // digit from value? => Done
          break;
 8000a32:	e005      	b.n	8000a40 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8000a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	fb02 f303 	mul.w	r3, r2, r3
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {  // User specified a min number of digits to print?
 8000a3e:	e7e8      	b.n	8000a12 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000a40:	68ba      	ldr	r2, [r7, #8]
 8000a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a48:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a4e:	fb02 f303 	mul.w	r3, r2, r3
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8000a58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ac8 <_PrintUnsigned+0x154>)
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f7ff ff48 	bl	80008f8 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db08      	blt.n	8000a82 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d1df      	bne.n	8000a40 <_PrintUnsigned+0xcc>
 8000a80:	e000      	b.n	8000a84 <_PrintUnsigned+0x110>
        break;
 8000a82:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8000a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d017      	beq.n	8000abe <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8000a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d014      	beq.n	8000abe <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a94:	e00a      	b.n	8000aac <_PrintUnsigned+0x138>
          FieldWidth--;
 8000a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f7ff ff2a 	bl	80008f8 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	db07      	blt.n	8000abc <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d005      	beq.n	8000abe <_PrintUnsigned+0x14a>
 8000ab2:	69fa      	ldr	r2, [r7, #28]
 8000ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d3ed      	bcc.n	8000a96 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000aba:	e000      	b.n	8000abe <_PrintUnsigned+0x14a>
            break;
 8000abc:	bf00      	nop
}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	@ 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	0800b9dc 	.word	0x0800b9dc

08000acc <_PrintInt>:
 *
 *       _PrintInt
 */
static void _PrintInt(SEGGER_RTT_PRINTF_DESC* pBufferDesc, int v, unsigned Base,
                      unsigned NumDigits, unsigned FieldWidth,
                      unsigned FormatFlags) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af02      	add	r7, sp, #8
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	bfb8      	it	lt
 8000ae0:	425b      	neglt	r3, r3
 8000ae2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000ae8:	e007      	b.n	8000afa <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	fb92 f3f3 	sdiv	r3, r2, r3
 8000af2:	613b      	str	r3, [r7, #16]
    Width++;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3301      	adds	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	daf3      	bge.n	8000aea <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000b02:	683a      	ldr	r2, [r7, #0]
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d901      	bls.n	8000b0e <_PrintInt+0x42>
    Width = NumDigits;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) &&
 8000b0e:	6a3b      	ldr	r3, [r7, #32]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d00a      	beq.n	8000b2a <_PrintInt+0x5e>
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db04      	blt.n	8000b24 <_PrintInt+0x58>
      ((v < 0) ||
       ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1c:	f003 0304 	and.w	r3, r3, #4
      ((v < 0) ||
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <_PrintInt+0x5e>
    FieldWidth--;
 8000b24:	6a3b      	ldr	r3, [r7, #32]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) &&
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d002      	beq.n	8000b3a <_PrintInt+0x6e>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d01c      	beq.n	8000b74 <_PrintInt+0xa8>
      ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3c:	f003 0301 	and.w	r3, r3, #1
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) &&
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d117      	bne.n	8000b74 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000b44:	6a3b      	ldr	r3, [r7, #32]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d014      	beq.n	8000b74 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b4a:	e00a      	b.n	8000b62 <_PrintInt+0x96>
        FieldWidth--;
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000b52:	2120      	movs	r1, #32
 8000b54:	68f8      	ldr	r0, [r7, #12]
 8000b56:	f7ff fecf 	bl	80008f8 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	db07      	blt.n	8000b72 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d005      	beq.n	8000b74 <_PrintInt+0xa8>
 8000b68:	697a      	ldr	r2, [r7, #20]
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d3ed      	bcc.n	8000b4c <_PrintInt+0x80>
 8000b70:	e000      	b.n	8000b74 <_PrintInt+0xa8>
          break;
 8000b72:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db4a      	blt.n	8000c12 <_PrintInt+0x146>
    if (v < 0) {
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	da07      	bge.n	8000b92 <_PrintInt+0xc6>
      v = -v;
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	425b      	negs	r3, r3
 8000b86:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000b88:	212d      	movs	r1, #45	@ 0x2d
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff feb4 	bl	80008f8 <_StoreChar>
 8000b90:	e008      	b.n	8000ba4 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) ==
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <_PrintInt+0xd8>
               FORMAT_FLAG_PRINT_SIGN) {
      _StoreChar(pBufferDesc, '+');
 8000b9c:	212b      	movs	r1, #43	@ 0x2b
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f7ff feaa 	bl	80008f8 <_StoreChar>
    } else {
    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db32      	blt.n	8000c12 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) &&
 8000bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d01f      	beq.n	8000bf6 <_PrintInt+0x12a>
          ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) &&
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb8:	f003 0301 	and.w	r3, r3, #1
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) &&
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d11a      	bne.n	8000bf6 <_PrintInt+0x12a>
          ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) &&
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d117      	bne.n	8000bf6 <_PrintInt+0x12a>
          (NumDigits == 0u)) {
        if (FieldWidth != 0u) {
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d014      	beq.n	8000bf6 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000bcc:	e00a      	b.n	8000be4 <_PrintInt+0x118>
            FieldWidth--;
 8000bce:	6a3b      	ldr	r3, [r7, #32]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000bd4:	2130      	movs	r1, #48	@ 0x30
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	f7ff fe8e 	bl	80008f8 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db07      	blt.n	8000bf4 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d005      	beq.n	8000bf6 <_PrintInt+0x12a>
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	6a3b      	ldr	r3, [r7, #32]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d3ed      	bcc.n	8000bce <_PrintInt+0x102>
 8000bf2:	e000      	b.n	8000bf6 <_PrintInt+0x12a>
              break;
 8000bf4:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db09      	blt.n	8000c12 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth,
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	6a3b      	ldr	r3, [r7, #32]
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	68f8      	ldr	r0, [r7, #12]
 8000c0e:	f7ff feb1 	bl	8000974 <_PrintUnsigned>
                       FormatFlags);
      }
    }
  }
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <SEGGER_RTT_vprintf>:
 *  Return values
 *    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
 *     < 0:  Error
 */
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char* sFormat,
                       va_list* pParamList) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0a2      	sub	sp, #136	@ 0x88
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer = acBuffer;
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	653b      	str	r3, [r7, #80]	@ 0x50
  BufferDesc.BufferSize = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000c2e:	2340      	movs	r3, #64	@ 0x40
 8000c30:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.Cnt = 0u;
 8000c32:	2300      	movs	r3, #0
 8000c34:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	663b      	str	r3, [r7, #96]	@ 0x60
  BufferDesc.ReturnValue = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c

  do {
    c = *sFormat;
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    sFormat++;
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8000c4c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f000 81a4 	beq.w	8000f9e <SEGGER_RTT_vprintf+0x382>
      break;
    }
    if (c == '%') {
 8000c56:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000c5a:	2b25      	cmp	r3, #37	@ 0x25
 8000c5c:	f040 8192 	bne.w	8000f84 <SEGGER_RTT_vprintf+0x368>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000c60:	2300      	movs	r3, #0
 8000c62:	673b      	str	r3, [r7, #112]	@ 0x70
      v = 1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	67bb      	str	r3, [r7, #120]	@ 0x78
      do {
        c = *sFormat;
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        switch (c) {
 8000c70:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000c74:	3b23      	subs	r3, #35	@ 0x23
 8000c76:	2b0d      	cmp	r3, #13
 8000c78:	d83e      	bhi.n	8000cf8 <SEGGER_RTT_vprintf+0xdc>
 8000c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c80 <SEGGER_RTT_vprintf+0x64>)
 8000c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c80:	08000ce9 	.word	0x08000ce9
 8000c84:	08000cf9 	.word	0x08000cf9
 8000c88:	08000cf9 	.word	0x08000cf9
 8000c8c:	08000cf9 	.word	0x08000cf9
 8000c90:	08000cf9 	.word	0x08000cf9
 8000c94:	08000cf9 	.word	0x08000cf9
 8000c98:	08000cf9 	.word	0x08000cf9
 8000c9c:	08000cf9 	.word	0x08000cf9
 8000ca0:	08000cd9 	.word	0x08000cd9
 8000ca4:	08000cf9 	.word	0x08000cf9
 8000ca8:	08000cb9 	.word	0x08000cb9
 8000cac:	08000cf9 	.word	0x08000cf9
 8000cb0:	08000cf9 	.word	0x08000cf9
 8000cb4:	08000cc9 	.word	0x08000cc9
          case '-':
            FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY;
 8000cb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	60bb      	str	r3, [r7, #8]
            break;
 8000cc6:	e01a      	b.n	8000cfe <SEGGER_RTT_vprintf+0xe2>
          case '0':
            FormatFlags |= FORMAT_FLAG_PAD_ZERO;
 8000cc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	60bb      	str	r3, [r7, #8]
            break;
 8000cd6:	e012      	b.n	8000cfe <SEGGER_RTT_vprintf+0xe2>
          case '+':
            FormatFlags |= FORMAT_FLAG_PRINT_SIGN;
 8000cd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
            break;
 8000ce6:	e00a      	b.n	8000cfe <SEGGER_RTT_vprintf+0xe2>
          case '#':
            FormatFlags |= FORMAT_FLAG_ALTERNATE;
 8000ce8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000cea:	f043 0308 	orr.w	r3, r3, #8
 8000cee:	673b      	str	r3, [r7, #112]	@ 0x70
            sFormat++;
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
            break;
 8000cf6:	e002      	b.n	8000cfe <SEGGER_RTT_vprintf+0xe2>
          default:
            v = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	67bb      	str	r3, [r7, #120]	@ 0x78
            break;
 8000cfc:	bf00      	nop
        }
      } while (v);
 8000cfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1b1      	bne.n	8000c68 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000d04:	2300      	movs	r3, #0
 8000d06:	66fb      	str	r3, [r7, #108]	@ 0x6c
      do {
        c = *sFormat;
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c < '0') || (c > '9')) {
 8000d10:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d14:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d16:	d912      	bls.n	8000d3e <SEGGER_RTT_vprintf+0x122>
 8000d18:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d1c:	2b39      	cmp	r3, #57	@ 0x39
 8000d1e:	d80e      	bhi.n	8000d3e <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	3301      	adds	r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000d26:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	461a      	mov	r2, r3
 8000d32:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d36:	4413      	add	r3, r2
 8000d38:	3b30      	subs	r3, #48	@ 0x30
 8000d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        c = *sFormat;
 8000d3c:	e7e4      	b.n	8000d08 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	677b      	str	r3, [r7, #116]	@ 0x74
      c = *sFormat;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (c == '.') {
 8000d4a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d50:	d11d      	bne.n	8000d8e <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	3301      	adds	r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          if ((c < '0') || (c > '9')) {
 8000d60:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d64:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d66:	d912      	bls.n	8000d8e <SEGGER_RTT_vprintf+0x172>
 8000d68:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d6c:	2b39      	cmp	r3, #57	@ 0x39
 8000d6e:	d80e      	bhi.n	8000d8e <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	3301      	adds	r3, #1
 8000d74:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8000d76:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	461a      	mov	r2, r3
 8000d82:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d86:	4413      	add	r3, r2
 8000d88:	3b30      	subs	r3, #48	@ 0x30
 8000d8a:	677b      	str	r3, [r7, #116]	@ 0x74
          c = *sFormat;
 8000d8c:	e7e4      	b.n	8000d58 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8000d96:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d9a:	2b6c      	cmp	r3, #108	@ 0x6c
 8000d9c:	d003      	beq.n	8000da6 <SEGGER_RTT_vprintf+0x18a>
 8000d9e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000da2:	2b68      	cmp	r3, #104	@ 0x68
 8000da4:	d107      	bne.n	8000db6 <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	3301      	adds	r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c == 'l') || (c == 'h')) {
 8000db4:	e7ef      	b.n	8000d96 <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000db6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000dba:	2b25      	cmp	r3, #37	@ 0x25
 8000dbc:	f000 80d6 	beq.w	8000f6c <SEGGER_RTT_vprintf+0x350>
 8000dc0:	2b25      	cmp	r3, #37	@ 0x25
 8000dc2:	f2c0 80da 	blt.w	8000f7a <SEGGER_RTT_vprintf+0x35e>
 8000dc6:	2b78      	cmp	r3, #120	@ 0x78
 8000dc8:	f300 80d7 	bgt.w	8000f7a <SEGGER_RTT_vprintf+0x35e>
 8000dcc:	2b58      	cmp	r3, #88	@ 0x58
 8000dce:	f2c0 80d4 	blt.w	8000f7a <SEGGER_RTT_vprintf+0x35e>
 8000dd2:	3b58      	subs	r3, #88	@ 0x58
 8000dd4:	2b20      	cmp	r3, #32
 8000dd6:	f200 80d0 	bhi.w	8000f7a <SEGGER_RTT_vprintf+0x35e>
 8000dda:	a201      	add	r2, pc, #4	@ (adr r2, 8000de0 <SEGGER_RTT_vprintf+0x1c4>)
 8000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de0:	08000ed7 	.word	0x08000ed7
 8000de4:	08000f7b 	.word	0x08000f7b
 8000de8:	08000f7b 	.word	0x08000f7b
 8000dec:	08000f7b 	.word	0x08000f7b
 8000df0:	08000f7b 	.word	0x08000f7b
 8000df4:	08000f7b 	.word	0x08000f7b
 8000df8:	08000f7b 	.word	0x08000f7b
 8000dfc:	08000f7b 	.word	0x08000f7b
 8000e00:	08000f7b 	.word	0x08000f7b
 8000e04:	08000f7b 	.word	0x08000f7b
 8000e08:	08000f7b 	.word	0x08000f7b
 8000e0c:	08000e65 	.word	0x08000e65
 8000e10:	08000e8b 	.word	0x08000e8b
 8000e14:	08000f7b 	.word	0x08000f7b
 8000e18:	08000f7b 	.word	0x08000f7b
 8000e1c:	08000f7b 	.word	0x08000f7b
 8000e20:	08000f7b 	.word	0x08000f7b
 8000e24:	08000f7b 	.word	0x08000f7b
 8000e28:	08000f7b 	.word	0x08000f7b
 8000e2c:	08000f7b 	.word	0x08000f7b
 8000e30:	08000f7b 	.word	0x08000f7b
 8000e34:	08000f7b 	.word	0x08000f7b
 8000e38:	08000f7b 	.word	0x08000f7b
 8000e3c:	08000f7b 	.word	0x08000f7b
 8000e40:	08000f47 	.word	0x08000f47
 8000e44:	08000f7b 	.word	0x08000f7b
 8000e48:	08000f7b 	.word	0x08000f7b
 8000e4c:	08000efd 	.word	0x08000efd
 8000e50:	08000f7b 	.word	0x08000f7b
 8000e54:	08000eb1 	.word	0x08000eb1
 8000e58:	08000f7b 	.word	0x08000f7b
 8000e5c:	08000f7b 	.word	0x08000f7b
 8000e60:	08000ed7 	.word	0x08000ed7
        case 'c': {
          char c0;
          v = va_arg(*pParamList, int);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	1d19      	adds	r1, r3, #4
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6011      	str	r1, [r2, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	67bb      	str	r3, [r7, #120]	@ 0x78
          c0 = (char)v;
 8000e72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          _StoreChar(&BufferDesc, c0);
 8000e78:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000e7c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fd38 	bl	80008f8 <_StoreChar>
          break;
 8000e88:	e078      	b.n	8000f7c <SEGGER_RTT_vprintf+0x360>
        }
        case 'd':
          v = va_arg(*pParamList, int);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1d19      	adds	r1, r3, #4
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6011      	str	r1, [r2, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000e98:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000e9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ea6:	220a      	movs	r2, #10
 8000ea8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000eaa:	f7ff fe0f 	bl	8000acc <_PrintInt>
          break;
 8000eae:	e065      	b.n	8000f7c <SEGGER_RTT_vprintf+0x360>
        case 'u':
          v = va_arg(*pParamList, int);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	1d19      	adds	r1, r3, #4
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	6011      	str	r1, [r2, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth,
 8000ebe:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000ec0:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000ec4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ece:	220a      	movs	r2, #10
 8000ed0:	f7ff fd50 	bl	8000974 <_PrintUnsigned>
                         FormatFlags);
          break;
 8000ed4:	e052      	b.n	8000f7c <SEGGER_RTT_vprintf+0x360>
        case 'x':
        case 'X':
          v = va_arg(*pParamList, int);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	1d19      	adds	r1, r3, #4
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	6011      	str	r1, [r2, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth,
 8000ee4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000ee6:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000eea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ef4:	2210      	movs	r2, #16
 8000ef6:	f7ff fd3d 	bl	8000974 <_PrintUnsigned>
                         FormatFlags);
          break;
 8000efa:	e03f      	b.n	8000f7c <SEGGER_RTT_vprintf+0x360>
        case 's': {
          const char* s = va_arg(*pParamList, const char*);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	1d19      	adds	r1, r3, #4
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	6011      	str	r1, [r2, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	66bb      	str	r3, [r7, #104]	@ 0x68
          if (s == NULL) {
 8000f0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d101      	bne.n	8000f14 <SEGGER_RTT_vprintf+0x2f8>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as
 8000f10:	4b2e      	ldr	r3, [pc, #184]	@ (8000fcc <SEGGER_RTT_vprintf+0x3b0>)
 8000f12:	66bb      	str	r3, [r7, #104]	@ 0x68
                           // it is more informative to the user.
          }
          do {
            c = *s;
 8000f14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            s++;
 8000f1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f1e:	3301      	adds	r3, #1
 8000f20:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (c == '\0') {
 8000f22:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00b      	beq.n	8000f42 <SEGGER_RTT_vprintf+0x326>
              break;
            }
            _StoreChar(&BufferDesc, c);
 8000f2a:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8000f2e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fcdf 	bl	80008f8 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8000f3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	dae9      	bge.n	8000f14 <SEGGER_RTT_vprintf+0x2f8>
        } break;
 8000f40:	e01c      	b.n	8000f7c <SEGGER_RTT_vprintf+0x360>
              break;
 8000f42:	bf00      	nop
        } break;
 8000f44:	e01a      	b.n	8000f7c <SEGGER_RTT_vprintf+0x360>
        case 'p':
          v = va_arg(*pParamList, int);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	1d19      	adds	r1, r3, #4
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6011      	str	r1, [r2, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	67bb      	str	r3, [r7, #120]	@ 0x78
          _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8000f54:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000f56:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	2308      	movs	r3, #8
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2308      	movs	r3, #8
 8000f64:	2210      	movs	r2, #16
 8000f66:	f7ff fd05 	bl	8000974 <_PrintUnsigned>
          break;
 8000f6a:	e007      	b.n	8000f7c <SEGGER_RTT_vprintf+0x360>
        case '%':
          _StoreChar(&BufferDesc, '%');
 8000f6c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f70:	2125      	movs	r1, #37	@ 0x25
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fcc0 	bl	80008f8 <_StoreChar>
          break;
 8000f78:	e000      	b.n	8000f7c <SEGGER_RTT_vprintf+0x360>
        default:
          break;
 8000f7a:	bf00      	nop
      }
      sFormat++;
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	e007      	b.n	8000f94 <SEGGER_RTT_vprintf+0x378>
    } else {
      _StoreChar(&BufferDesc, c);
 8000f84:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8000f88:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fcb2 	bl	80008f8 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8000f94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f6bf ae51 	bge.w	8000c3e <SEGGER_RTT_vprintf+0x22>
 8000f9c:	e000      	b.n	8000fa0 <SEGGER_RTT_vprintf+0x384>
      break;
 8000f9e:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8000fa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	dd0d      	ble.n	8000fc2 <SEGGER_RTT_vprintf+0x3a6>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8000fa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d006      	beq.n	8000fba <SEGGER_RTT_vprintf+0x39e>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8000fac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f7ff fc79 	bl	80008ac <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8000fba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000fbe:	4413      	add	r3, r2
 8000fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }
  return BufferDesc.ReturnValue;
 8000fc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3780      	adds	r7, #128	@ 0x80
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	0800b95c 	.word	0x0800b95c

08000fd0 <SEGGER_RTT_printf>:
 *          x: Print the argument as an hexadecimal integer
 *          s: Print the string pointed to by the argument
 *          p: Print the argument as an 8-digit hexadecimal integer. (Argument
 * shall be a pointer to void.)
 */
int SEGGER_RTT_printf(unsigned BufferIndex, const char* sFormat, ...) {
 8000fd0:	b40e      	push	{r1, r2, r3}
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	69f9      	ldr	r1, [r7, #28]
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff fe17 	bl	8000c1c <SEGGER_RTT_vprintf>
 8000fee:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ffc:	b003      	add	sp, #12
 8000ffe:	4770      	bx	lr

08001000 <bq79600_construct_command>:
#include <main.h>
#define MAX_INSTANCE 1
static bq79600_t instance_list[MAX_INSTANCE] = {0};

void bq79600_construct_command(bq79600_t *instance, REQ_TYPE req_type, uint8_t addr, uint16_t reg_addr,
                               uint8_t data_len, uint8_t *data) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	4608      	mov	r0, r1
 800100a:	4611      	mov	r1, r2
 800100c:	461a      	mov	r2, r3
 800100e:	4603      	mov	r3, r0
 8001010:	70fb      	strb	r3, [r7, #3]
 8001012:	460b      	mov	r3, r1
 8001014:	70bb      	strb	r3, [r7, #2]
 8001016:	4613      	mov	r3, r2
 8001018:	803b      	strh	r3, [r7, #0]
  uint8_t *tx_buf = instance->tx_buf;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	330c      	adds	r3, #12
 800101e:	617b      	str	r3, [r7, #20]
  *tx_buf++ = 0x80 | (req_type << 4) | ((req_type & 1) ? ((data_len - 1) & 0x0F) : 0);
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	011b      	lsls	r3, r3, #4
 8001024:	b25b      	sxtb	r3, r3
 8001026:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800102a:	b25a      	sxtb	r2, r3
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d008      	beq.n	8001048 <bq79600_construct_command+0x48>
 8001036:	f897 3020 	ldrb.w	r3, [r7, #32]
 800103a:	3b01      	subs	r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	b25b      	sxtb	r3, r3
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	b25b      	sxtb	r3, r3
 8001046:	e000      	b.n	800104a <bq79600_construct_command+0x4a>
 8001048:	2300      	movs	r3, #0
 800104a:	4313      	orrs	r3, r2
 800104c:	b259      	sxtb	r1, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	617a      	str	r2, [r7, #20]
 8001054:	b2ca      	uxtb	r2, r1
 8001056:	701a      	strb	r2, [r3, #0]
  if (req_type < 2) *tx_buf++ = addr & 0x3F;
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d807      	bhi.n	800106e <bq79600_construct_command+0x6e>
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	617a      	str	r2, [r7, #20]
 8001064:	78ba      	ldrb	r2, [r7, #2]
 8001066:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]
  *tx_buf++ = (reg_addr >> 8) & 0xFF;
 800106e:	883b      	ldrh	r3, [r7, #0]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	b299      	uxth	r1, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	617a      	str	r2, [r7, #20]
 800107a:	b2ca      	uxtb	r2, r1
 800107c:	701a      	strb	r2, [r3, #0]
  *tx_buf++ = reg_addr & 0xFF;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	617a      	str	r2, [r7, #20]
 8001084:	883a      	ldrh	r2, [r7, #0]
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	701a      	strb	r2, [r3, #0]
  if (data)
 800108a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108c:	2b00      	cmp	r3, #0
 800108e:	d013      	beq.n	80010b8 <bq79600_construct_command+0xb8>
    for (int i = 0; i < data_len; i++) *tx_buf++ = data[i];
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	e00a      	b.n	80010ac <bq79600_construct_command+0xac>
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800109a:	441a      	add	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	1c59      	adds	r1, r3, #1
 80010a0:	6179      	str	r1, [r7, #20]
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	3301      	adds	r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dbef      	blt.n	8001096 <bq79600_construct_command+0x96>
 80010b6:	e007      	b.n	80010c8 <bq79600_construct_command+0xc8>
  else
    *tx_buf++ = data_len - 1;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	617a      	str	r2, [r7, #20]
 80010be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010c2:	3a01      	subs	r2, #1
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	701a      	strb	r2, [r3, #0]
  if (req_type >= 2) data_len = 0;
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d902      	bls.n	80010d4 <bq79600_construct_command+0xd4>
 80010ce:	2300      	movs	r3, #0
 80010d0:	f887 3020 	strb.w	r3, [r7, #32]
  uint16_t crc = bq79600_bsp_crc(instance->tx_buf, 4 + data_len);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f103 020c 	add.w	r2, r3, #12
 80010da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010de:	3304      	adds	r3, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	4610      	mov	r0, r2
 80010e4:	f000 fa80 	bl	80015e8 <bq79600_bsp_crc>
 80010e8:	4603      	mov	r3, r0
 80010ea:	81fb      	strh	r3, [r7, #14]
  *tx_buf++ = crc & 0xFF;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	617a      	str	r2, [r7, #20]
 80010f2:	89fa      	ldrh	r2, [r7, #14]
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	701a      	strb	r2, [r3, #0]
  *tx_buf++ = (crc >> 8) & 0xFF;
 80010f8:	89fb      	ldrh	r3, [r7, #14]
 80010fa:	0a1b      	lsrs	r3, r3, #8
 80010fc:	b299      	uxth	r1, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	1c5a      	adds	r2, r3, #1
 8001102:	617a      	str	r2, [r7, #20]
 8001104:	b2ca      	uxtb	r2, r1
 8001106:	701a      	strb	r2, [r3, #0]
  instance->tx_len = tx_buf - instance->tx_buf;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	330c      	adds	r3, #12
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	b2da      	uxtb	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f883 281a 	strb.w	r2, [r3, #2074]	@ 0x81a
}
 8001118:	bf00      	nop
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <bq79600_tx>:

void bq79600_tx(bq79600_t *instance) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  instance->ready = 0;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 281d 	strb.w	r2, [r3, #2077]	@ 0x81d
  SEGGER_RTT_printf(0, "[BQ79600] TX: ");
 8001130:	4915      	ldr	r1, [pc, #84]	@ (8001188 <bq79600_tx+0x68>)
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff ff4c 	bl	8000fd0 <SEGGER_RTT_printf>
  for (int i = 0; i < instance->tx_len; i++) SEGGER_RTT_printf(0, "%02X ", instance->tx_buf[i]);
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	e00c      	b.n	8001158 <bq79600_tx+0x38>
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	330c      	adds	r3, #12
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4910      	ldr	r1, [pc, #64]	@ (800118c <bq79600_tx+0x6c>)
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff ff3f 	bl	8000fd0 <SEGGER_RTT_printf>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3301      	adds	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4293      	cmp	r3, r2
 8001164:	dbeb      	blt.n	800113e <bq79600_tx+0x1e>
  SEGGER_RTT_printf(0, "\n");
 8001166:	490a      	ldr	r1, [pc, #40]	@ (8001190 <bq79600_tx+0x70>)
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff ff31 	bl	8000fd0 <SEGGER_RTT_printf>
  switch (instance->mode) {
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7a9b      	ldrb	r3, [r3, #10]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d103      	bne.n	800117e <bq79600_tx+0x5e>
    case BQ_UART:
      bq79600_bsp_uart_tx(instance);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 fa1e 	bl	80015b8 <bq79600_bsp_uart_tx>
      break;
 800117c:	e000      	b.n	8001180 <bq79600_tx+0x60>
    default:
      break;
 800117e:	bf00      	nop
  }
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	0800b964 	.word	0x0800b964
 800118c:	0800b974 	.word	0x0800b974
 8001190:	0800b97c 	.word	0x0800b97c

08001194 <bq79600_rx_callback>:

void bq79600_rx_callback(bq79600_t *instance) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b0aa      	sub	sp, #168	@ 0xa8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if (instance->rx_len < 6) return;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 80011a2:	2b05      	cmp	r3, #5
 80011a4:	f240 80d8 	bls.w	8001358 <bq79600_rx_callback+0x1c4>
  SEGGER_RTT_printf(0, "[BQ79600] RX[%d]: ", instance->rx_len);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 80011ae:	461a      	mov	r2, r3
 80011b0:	496b      	ldr	r1, [pc, #428]	@ (8001360 <bq79600_rx_callback+0x1cc>)
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff ff0c 	bl	8000fd0 <SEGGER_RTT_printf>
  for (int i = 0; i < instance->rx_len; i++) SEGGER_RTT_printf(0, "%02X ", instance->rx_buf[i]);
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80011be:	e00f      	b.n	80011e0 <bq79600_rx_callback+0x4c>
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011c6:	4413      	add	r3, r2
 80011c8:	331a      	adds	r3, #26
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4965      	ldr	r1, [pc, #404]	@ (8001364 <bq79600_rx_callback+0x1d0>)
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff fefd 	bl	8000fd0 <SEGGER_RTT_printf>
 80011d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011da:	3301      	adds	r3, #1
 80011dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 80011e6:	461a      	mov	r2, r3
 80011e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011ec:	4293      	cmp	r3, r2
 80011ee:	dbe7      	blt.n	80011c0 <bq79600_rx_callback+0x2c>
  SEGGER_RTT_printf(0, "\n");
 80011f0:	495d      	ldr	r1, [pc, #372]	@ (8001368 <bq79600_rx_callback+0x1d4>)
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff feec 	bl	8000fd0 <SEGGER_RTT_printf>

  size_t idx = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  uint8_t crc_buf[128 + 6];
  while (idx < instance->rx_len) {
 80011fe:	e099      	b.n	8001334 <bq79600_rx_callback+0x1a0>
    for (int i = 0; i < 4; i++) crc_buf[i] = instance->rx_buf[idx++];
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001206:	e013      	b.n	8001230 <bq79600_rx_callback+0x9c>
 8001208:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	7e99      	ldrb	r1, [r3, #26]
 8001218:	f107 020c 	add.w	r2, r7, #12
 800121c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001220:	4413      	add	r3, r2
 8001222:	460a      	mov	r2, r1
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800122a:	3301      	adds	r3, #1
 800122c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001230:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001234:	2b03      	cmp	r3, #3
 8001236:	dde7      	ble.n	8001208 <bq79600_rx_callback+0x74>
    uint8_t len = (crc_buf[0] & 0x7F) + 1;
 8001238:	7b3b      	ldrb	r3, [r7, #12]
 800123a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800123e:	b2db      	uxtb	r3, r3
 8001240:	3301      	adds	r3, #1
 8001242:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    for (int i = 0; i < len; i++) crc_buf[4 + i] = instance->rx_buf[idx++];
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800124c:	e015      	b.n	800127a <bq79600_rx_callback+0xe6>
 800124e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001258:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800125c:	3204      	adds	r2, #4
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	440b      	add	r3, r1
 8001262:	7e99      	ldrb	r1, [r3, #26]
 8001264:	f102 03a8 	add.w	r3, r2, #168	@ 0xa8
 8001268:	443b      	add	r3, r7
 800126a:	460a      	mov	r2, r1
 800126c:	f803 2c9c 	strb.w	r2, [r3, #-156]
 8001270:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001274:	3301      	adds	r3, #1
 8001276:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800127a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800127e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001282:	429a      	cmp	r2, r3
 8001284:	dbe3      	blt.n	800124e <bq79600_rx_callback+0xba>
    crc_buf[4 + len] = instance->rx_buf[idx++];
 8001286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001290:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8001294:	3204      	adds	r2, #4
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	440b      	add	r3, r1
 800129a:	7e99      	ldrb	r1, [r3, #26]
 800129c:	f102 03a8 	add.w	r3, r2, #168	@ 0xa8
 80012a0:	443b      	add	r3, r7
 80012a2:	460a      	mov	r2, r1
 80012a4:	f803 2c9c 	strb.w	r2, [r3, #-156]
    crc_buf[5 + len] = instance->rx_buf[idx++];
 80012a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80012b2:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80012b6:	3205      	adds	r2, #5
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	440b      	add	r3, r1
 80012bc:	7e99      	ldrb	r1, [r3, #26]
 80012be:	f102 03a8 	add.w	r3, r2, #168	@ 0xa8
 80012c2:	443b      	add	r3, r7
 80012c4:	460a      	mov	r2, r1
 80012c6:	f803 2c9c 	strb.w	r2, [r3, #-156]
    uint16_t crc = bq79600_bsp_crc(crc_buf, len + 4);
 80012ca:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80012ce:	3304      	adds	r3, #4
 80012d0:	461a      	mov	r2, r3
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f985 	bl	80015e8 <bq79600_bsp_crc>
 80012de:	4603      	mov	r3, r0
 80012e0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    uint16_t crc_rx = (crc_buf[4 + len] << 8) | crc_buf[5 + len];
 80012e4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80012e8:	3304      	adds	r3, #4
 80012ea:	33a8      	adds	r3, #168	@ 0xa8
 80012ec:	443b      	add	r3, r7
 80012ee:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80012fa:	3305      	adds	r3, #5
 80012fc:	33a8      	adds	r3, #168	@ 0xa8
 80012fe:	443b      	add	r3, r7
 8001300:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 8001304:	b21b      	sxth	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b21b      	sxth	r3, r3
 800130a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    if (!(crc ^ crc_rx)) {
 800130e:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8001312:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8001316:	429a      	cmp	r2, r3
 8001318:	d10c      	bne.n	8001334 <bq79600_rx_callback+0x1a0>
      SEGGER_RTT_printf(0, "[BQ79600] CRC error: %04X %04X\n", crc, crc_rx);
 800131a:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 800131e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8001322:	4912      	ldr	r1, [pc, #72]	@ (800136c <bq79600_rx_callback+0x1d8>)
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff fe53 	bl	8000fd0 <SEGGER_RTT_printf>
      instance->fault = 1;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
      return;
 8001332:	e012      	b.n	800135a <bq79600_rx_callback+0x1c6>
  while (idx < instance->rx_len) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 381b 	ldrb.w	r3, [r3, #2075]	@ 0x81b
 800133a:	461a      	mov	r2, r3
 800133c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001340:	4293      	cmp	r3, r2
 8001342:	f4ff af5d 	bcc.w	8001200 <bq79600_rx_callback+0x6c>
    }
  }
  instance->fault = 0;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
  instance->ready = 1;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 281d 	strb.w	r2, [r3, #2077]	@ 0x81d
 8001356:	e000      	b.n	800135a <bq79600_rx_callback+0x1c6>
  if (instance->rx_len < 6) return;
 8001358:	bf00      	nop
}
 800135a:	37a8      	adds	r7, #168	@ 0xa8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	0800b980 	.word	0x0800b980
 8001364:	0800b974 	.word	0x0800b974
 8001368:	0800b97c 	.word	0x0800b97c
 800136c:	0800b994 	.word	0x0800b994

08001370 <bq79600_write_reg>:
  bq79600_bsp_ready(instance);
  *data = instance->rx_buf[4];
}
extern UART_HandleTypeDef huart4;
void bq79600_write_reg(bq79600_t *instance, uint8_t dev_addr, uint16_t reg_addr, uint8_t *data,
                       uint8_t data_len) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af02      	add	r7, sp, #8
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	72fb      	strb	r3, [r7, #11]
 800137e:	4613      	mov	r3, r2
 8001380:	813b      	strh	r3, [r7, #8]
  bq79600_construct_command(instance, SINGLE_DEVICE_WRITE, dev_addr, reg_addr, data_len, data);
 8001382:	8939      	ldrh	r1, [r7, #8]
 8001384:	7afa      	ldrb	r2, [r7, #11]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	7e3b      	ldrb	r3, [r7, #24]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	460b      	mov	r3, r1
 8001390:	2101      	movs	r1, #1
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f7ff fe34 	bl	8001000 <bq79600_construct_command>
  //bq79600_tx(instance);
  HAL_UART_Transmit(&huart4, instance->tx_buf , instance->tx_len,100);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f103 010c 	add.w	r1, r3, #12
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 80013a4:	461a      	mov	r2, r3
 80013a6:	2364      	movs	r3, #100	@ 0x64
 80013a8:	4803      	ldr	r0, [pc, #12]	@ (80013b8 <bq79600_write_reg+0x48>)
 80013aa:	f007 fc74 	bl	8008c96 <HAL_UART_Transmit>
}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	24000d9c 	.word	0x24000d9c

080013bc <open_bq79600_instance>:

bq79600_t *open_bq79600_instance(uint32_t id) {
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if (id >= MAX_INSTANCE) return NULL;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <open_bq79600_instance+0x12>
 80013ca:	2300      	movs	r3, #0
 80013cc:	e006      	b.n	80013dc <open_bq79600_instance+0x20>
  return &instance_list[id];
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	019b      	lsls	r3, r3, #6
 80013d4:	4413      	add	r3, r2
 80013d6:	015b      	lsls	r3, r3, #5
 80013d8:	4a03      	ldr	r2, [pc, #12]	@ (80013e8 <open_bq79600_instance+0x2c>)
 80013da:	4413      	add	r3, r2
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	240004e4 	.word	0x240004e4

080013ec <bq79600_auto_addressing>:
  }
  instance->state = BQ_ACTIVATE;
  SEGGER_RTT_printf(0, "[BQ79600] wakeup.\n");
}

bq79600_error_t bq79600_auto_addressing(bq79600_t *instance, const size_t n_devices) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint8_t buf = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
  for (int addr = 0x343; addr < 0x34B; addr++) {
 80013fa:	f240 3343 	movw	r3, #835	@ 0x343
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	e012      	b.n	8001428 <bq79600_auto_addressing+0x3c>
    bq79600_construct_command(instance, STACK_WRITE, 0, addr, 1, &buf);
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	b29a      	uxth	r2, r3
 8001406:	f107 030f 	add.w	r3, r7, #15
 800140a:	9301      	str	r3, [sp, #4]
 800140c:	2301      	movs	r3, #1
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	4613      	mov	r3, r2
 8001412:	2200      	movs	r2, #0
 8001414:	2103      	movs	r1, #3
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff fdf2 	bl	8001000 <bq79600_construct_command>
    bq79600_tx(instance);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fe7f 	bl	8001120 <bq79600_tx>
  for (int addr = 0x343; addr < 0x34B; addr++) {
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3301      	adds	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f240 324a 	movw	r2, #842	@ 0x34a
 800142e:	4293      	cmp	r3, r2
 8001430:	dde7      	ble.n	8001402 <bq79600_auto_addressing+0x16>
  }
  instance->fault = 0 ;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
  // Enable auto addressing
  buf = 0x01;
 800143a:	2301      	movs	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
  bq79600_construct_command(instance, BROADCAST_WRITE, 0, CONTROL1, 1, &buf);
 800143e:	f107 030f 	add.w	r3, r7, #15
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	2301      	movs	r3, #1
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	f240 3309 	movw	r3, #777	@ 0x309
 800144c:	2200      	movs	r2, #0
 800144e:	2105      	movs	r1, #5
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fdd5 	bl	8001000 <bq79600_construct_command>
  bq79600_tx(instance);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fe62 	bl	8001120 <bq79600_tx>
  // brdcast write consecutively to 0x306
  for (size_t i = 0; i < n_devices; i++) {
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	e014      	b.n	800148c <bq79600_auto_addressing+0xa0>
    buf = i;
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	73fb      	strb	r3, [r7, #15]
    bq79600_construct_command(instance, BROADCAST_WRITE, 0, DIR0_ADDR, 1, &buf);
 8001468:	f107 030f 	add.w	r3, r7, #15
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	2301      	movs	r3, #1
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	f240 3306 	movw	r3, #774	@ 0x306
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fdc0 	bl	8001000 <bq79600_construct_command>
    bq79600_tx(instance);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff fe4d 	bl	8001120 <bq79600_tx>
  for (size_t i = 0; i < n_devices; i++) {
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	3301      	adds	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	d3e6      	bcc.n	8001462 <bq79600_auto_addressing+0x76>
  }
  // brdcast write 0x02 to address 0x308 (set BQ7961X-Q1 as stack device )
  buf = 0x02;
 8001494:	2302      	movs	r3, #2
 8001496:	73fb      	strb	r3, [r7, #15]
  bq79600_construct_command(instance, BROADCAST_WRITE, 0, COMM_CTRL, 1, &buf);
 8001498:	f107 030f 	add.w	r3, r7, #15
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	2301      	movs	r3, #1
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	f44f 7342 	mov.w	r3, #776	@ 0x308
 80014a6:	2200      	movs	r2, #0
 80014a8:	2105      	movs	r1, #5
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fda8 	bl	8001000 <bq79600_construct_command>
  bq79600_tx(instance);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff fe35 	bl	8001120 <bq79600_tx>

  buf = 0x03;
 80014b6:	2303      	movs	r3, #3
 80014b8:	73fb      	strb	r3, [r7, #15]
  bq79600_construct_command(instance, SINGLE_DEVICE_WRITE, n_devices - 1, COMM_CTRL, 1, &buf);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	3b01      	subs	r3, #1
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	f107 030f 	add.w	r3, r7, #15
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	2301      	movs	r3, #1
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	f44f 7342 	mov.w	r3, #776	@ 0x308
 80014d0:	2101      	movs	r1, #1
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fd94 	bl	8001000 <bq79600_construct_command>
  bq79600_tx(instance);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fe21 	bl	8001120 <bq79600_tx>

  for (int addr = 0x343; addr < 0x34B; addr++) {
 80014de:	f240 3343 	movw	r3, #835	@ 0x343
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	e01a      	b.n	800151c <bq79600_auto_addressing+0x130>
    bq79600_construct_command(instance, STACK_READ, 0, addr, 1, NULL);
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	2200      	movs	r2, #0
 80014ec:	9201      	str	r2, [sp, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	9200      	str	r2, [sp, #0]
 80014f2:	2200      	movs	r2, #0
 80014f4:	2102      	movs	r1, #2
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fd82 	bl	8001000 <bq79600_construct_command>
    bq79600_tx(instance);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff fe0f 	bl	8001120 <bq79600_tx>
    bq79600_bsp_ready(instance);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f837 	bl	8001576 <bq79600_bsp_ready>
   // uint8_t comm_ctrl[6] = {0};
    //if (HAL_UART_Receive(&huart4, instance->rx_buf , instance->rx_len ,100) != HAL_OK)  return BQ_ERROR  ;
   // HAL_UART_Receive(&huart4, comm_ctrl , 6 ,100);
   if (instance->fault)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <bq79600_auto_addressing+0x12a>
	   return BQ_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e02b      	b.n	800156e <bq79600_auto_addressing+0x182>
  for (int addr = 0x343; addr < 0x34B; addr++) {
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f240 324a 	movw	r2, #842	@ 0x34a
 8001522:	4293      	cmp	r3, r2
 8001524:	dddf      	ble.n	80014e6 <bq79600_auto_addressing+0xfa>



  }

  for (size_t i = 0; i < n_devices; i++) {
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	e01b      	b.n	8001564 <bq79600_auto_addressing+0x178>
    bq79600_construct_command(instance, SINGLE_DEVICE_READ, i, DIR0_ADDR, 1, NULL);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	2300      	movs	r3, #0
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	2301      	movs	r3, #1
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	f240 3306 	movw	r3, #774	@ 0x306
 800153c:	2100      	movs	r1, #0
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fd5e 	bl	8001000 <bq79600_construct_command>
    bq79600_tx(instance);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff fdeb 	bl	8001120 <bq79600_tx>
   // if (HAL_UART_Receive(&huart4, instance->rx_buf , instance->rx_len ,100) != HAL_OK)  return BQ_ERROR  ;
     bq79600_bsp_ready(instance);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f813 	bl	8001576 <bq79600_bsp_ready>
    if (instance->fault)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <bq79600_auto_addressing+0x172>
    	return BQ_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e007      	b.n	800156e <bq79600_auto_addressing+0x182>
  for (size_t i = 0; i < n_devices; i++) {
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	3301      	adds	r3, #1
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d3df      	bcc.n	800152c <bq79600_auto_addressing+0x140>
  }
  return BQ_SUCCESS;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3720      	adds	r7, #32
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <bq79600_bsp_ready>:
  HAL_GPIO_Init((GPIO_TypeDef *)instance->rx_port, &GPIO_InitStruct);
  HAL_UART_DeInit(&huart4);
  MX_UART4_Init(1000000);
}

void bq79600_bsp_ready(bq79600_t *instance) {
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  /* Change here to non-blocking mode if using RTOS */
  const uint32_t timeout = 1000;  // 1 second timeout
 800157e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001582:	60fb      	str	r3, [r7, #12]
  uint32_t now = HAL_GetTick();
 8001584:	f000 ff4a 	bl	800241c <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  while (instance->ready == 0) {
 800158a:	e00c      	b.n	80015a6 <bq79600_bsp_ready+0x30>
    if (now - HAL_GetTick() > timeout) {
 800158c:	f000 ff46 	bl	800241c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	429a      	cmp	r2, r3
 800159a:	d204      	bcs.n	80015a6 <bq79600_bsp_ready+0x30>
      instance->fault = 1;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 281c 	strb.w	r2, [r3, #2076]	@ 0x81c
      return;
 80015a4:	e004      	b.n	80015b0 <bq79600_bsp_ready+0x3a>
  while (instance->ready == 0) {
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 381d 	ldrb.w	r3, [r3, #2077]	@ 0x81d
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0ed      	beq.n	800158c <bq79600_bsp_ready+0x16>
    }
  }
}
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <bq79600_bsp_uart_tx>:

extern UART_HandleTypeDef huart4;
void bq79600_bsp_uart_tx(bq79600_t *instance) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4, instance->tx_buf, instance->tx_len , 100);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f103 010c 	add.w	r1, r3, #12
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 80015cc:	461a      	mov	r2, r3
 80015ce:	2364      	movs	r3, #100	@ 0x64
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <bq79600_bsp_uart_tx+0x2c>)
 80015d2:	f007 fb60 	bl	8008c96 <HAL_UART_Transmit>
  HAL_Delay(1);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f000 ff2c 	bl	8002434 <HAL_Delay>
  //uint8_t UART1_rxBuffer[12] = {0};//
  //HAL_UART_Transmit_DMA(&huart4, UART1_rxBuffer, 12);//
 // huart4.gState = HAL_UART_STATE_READY;
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	24000d9c 	.word	0x24000d9c

080015e8 <bq79600_bsp_crc>:

uint32_t bq79600_bsp_crc(uint8_t *buf, size_t len) {
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0xFFFF;
 80015f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015f6:	60fb      	str	r3, [r7, #12]
  for (size_t i = 0; i < len; i++) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	e014      	b.n	8001628 <bq79600_bsp_crc+0x40>
    crc ^= (uint16_t)(*buf++) & 0x00FF;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4053      	eors	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
    crc = crc16_table[crc & 0x00FF] ^ (crc >> 8);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4a0b      	ldr	r2, [pc, #44]	@ (8001640 <bq79600_bsp_crc+0x58>)
 8001614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001618:	461a      	mov	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	4053      	eors	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
  for (size_t i = 0; i < len; i++) {
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	3301      	adds	r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d3e6      	bcc.n	80015fe <bq79600_bsp_crc+0x16>
  }
  return crc;
 8001630:	68fb      	ldr	r3, [r7, #12]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	0800b9ec 	.word	0x0800b9ec

08001644 <raw_to_float>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


float raw_to_float(void *raw) {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  return (float)(int16_t)(((*(uint16_t *)raw & 0xFF) << 8) | ((*(uint16_t *)raw & 0xFF00) >> 8));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	b21a      	sxth	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	b29b      	uxth	r3, r3
 800165c:	b21b      	sxth	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b21b      	sxth	r3, r3
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
  static bq79600_t *instance = NULL;
  instance = open_bq79600_instance(0);
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff fe99 	bl	80013bc <open_bq79600_instance>
 800168a:	4603      	mov	r3, r0
 800168c:	4a14      	ldr	r2, [pc, #80]	@ (80016e0 <HAL_UARTEx_RxEventCallback+0x68>)
 800168e:	6013      	str	r3, [r2, #0]
  if (instance == NULL) instance = open_bq79600_instance(0);
 8001690:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <HAL_UARTEx_RxEventCallback+0x68>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <HAL_UARTEx_RxEventCallback+0x2c>
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff fe8f 	bl	80013bc <open_bq79600_instance>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a0f      	ldr	r2, [pc, #60]	@ (80016e0 <HAL_UARTEx_RxEventCallback+0x68>)
 80016a2:	6013      	str	r3, [r2, #0]
  instance->rx_len = size;
 80016a4:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <HAL_UARTEx_RxEventCallback+0x68>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	887a      	ldrh	r2, [r7, #2]
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	f883 281b 	strb.w	r2, [r3, #2075]	@ 0x81b
  bq79600_rx_callback(instance);
 80016b0:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <HAL_UARTEx_RxEventCallback+0x68>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fd6d 	bl	8001194 <bq79600_rx_callback>
  bms_run();
 80016ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016be:	4809      	ldr	r0, [pc, #36]	@ (80016e4 <HAL_UARTEx_RxEventCallback+0x6c>)
 80016c0:	f003 ff51 	bl	8005566 <HAL_GPIO_TogglePin>
  HAL_UARTEx_ReceiveToIdle_IT(&huart4, instance->rx_buf, sizeof(instance->rx_buf));
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_UARTEx_RxEventCallback+0x68>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	331a      	adds	r3, #26
 80016ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016ce:	4619      	mov	r1, r3
 80016d0:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <HAL_UARTEx_RxEventCallback+0x70>)
 80016d2:	f00a f858 	bl	800b786 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	24000fd8 	.word	0x24000fd8
 80016e4:	58020800 	.word	0x58020800
 80016e8:	24000d9c 	.word	0x24000d9c
 80016ec:	00000000 	.word	0x00000000

080016f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	@ 0x28
 80016f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80016f6:	f000 fb73 	bl	8001de0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fa:	f000 fe09 	bl	8002310 <HAL_Init>
  /* USER CODE BEGIN Init */
  //SEGGER_RTT_Init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fe:	f000 f9b9 	bl	8001a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001702:	f000 fb53 	bl	8001dac <MX_GPIO_Init>
  MX_DMA_Init();
 8001706:	f000 fb29 	bl	8001d5c <MX_DMA_Init>
  MX_UART4_Init(1000000);
 800170a:	48c5      	ldr	r0, [pc, #788]	@ (8001a20 <main+0x330>)
 800170c:	f000 fad2 	bl	8001cb4 <MX_UART4_Init>
  MX_TIM1_Init();
 8001710:	f000 fa2c 	bl	8001b6c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001714:	f000 fa7e 	bl	8001c14 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001718:	48c2      	ldr	r0, [pc, #776]	@ (8001a24 <main+0x334>)
 800171a:	f006 fdc7 	bl	80082ac <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 800171e:	48c2      	ldr	r0, [pc, #776]	@ (8001a28 <main+0x338>)
 8001720:	f006 fdc4 	bl	80082ac <HAL_TIM_Base_Start>
  bms_fault(1);
 8001724:	2200      	movs	r2, #0
 8001726:	2104      	movs	r1, #4
 8001728:	48c0      	ldr	r0, [pc, #768]	@ (8001a2c <main+0x33c>)
 800172a:	f003 ff03 	bl	8005534 <HAL_GPIO_WritePin>
  //uint8_t UART1_rxBuffer[12] = {0};
  //HAL_UART_Transmit_DMA(&huart4, UART1_rxBuffer, 12);
  //}
  //huart4.gState = HAL_UART_STATE_READY;

    bq79600_t *bms_instance = open_bq79600_instance(0);
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff fe44 	bl	80013bc <open_bq79600_instance>
 8001734:	60f8      	str	r0, [r7, #12]
    bms_instance->mode = BQ_UART;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2201      	movs	r2, #1
 800173a:	729a      	strb	r2, [r3, #10]
    bms_instance->state = BQ_SHUTDOWN;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2201      	movs	r2, #1
 8001740:	72da      	strb	r2, [r3, #11]
    bms_instance->rx_port = GPIOA;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4ab9      	ldr	r2, [pc, #740]	@ (8001a2c <main+0x33c>)
 8001746:	601a      	str	r2, [r3, #0]
    bms_instance->tx_port = GPIOA;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4ab8      	ldr	r2, [pc, #736]	@ (8001a2c <main+0x33c>)
 800174c:	605a      	str	r2, [r3, #4]
    bms_instance->rx_pin = 1;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2201      	movs	r2, #1
 8001752:	721a      	strb	r2, [r3, #8]
    bms_instance->tx_pin = 0;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	725a      	strb	r2, [r3, #9]

     // bq79600_wakeup(bms_instance); // nadal nie dziala, cos wysyla ale wake up jest zly teraz i cos z hal_delay
    HAL_UART_DeInit(&huart4);
 800175a:	48b5      	ldr	r0, [pc, #724]	@ (8001a30 <main+0x340>)
 800175c:	f007 fa5c 	bl	8008c18 <HAL_UART_DeInit>
    MX_UART4_Init(3250);
 8001760:	f640 40b2 	movw	r0, #3250	@ 0xcb2
 8001764:	f000 faa6 	bl	8001cb4 <MX_UART4_Init>
    HAL_Delay(10);
 8001768:	200a      	movs	r0, #10
 800176a:	f000 fe63 	bl	8002434 <HAL_Delay>
    uint8_t zero=0x00;
 800176e:	2300      	movs	r3, #0
 8001770:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(&huart4,&zero,1,100);
 8001772:	1cf9      	adds	r1, r7, #3
 8001774:	2364      	movs	r3, #100	@ 0x64
 8001776:	2201      	movs	r2, #1
 8001778:	48ad      	ldr	r0, [pc, #692]	@ (8001a30 <main+0x340>)
 800177a:	f007 fa8c 	bl	8008c96 <HAL_UART_Transmit>
    HAL_Delay(13);
 800177e:	200d      	movs	r0, #13
 8001780:	f000 fe58 	bl	8002434 <HAL_Delay>
   HAL_UART_Transmit(&huart4,&zero,1,100);
 8001784:	1cf9      	adds	r1, r7, #3
 8001786:	2364      	movs	r3, #100	@ 0x64
 8001788:	2201      	movs	r2, #1
 800178a:	48a9      	ldr	r0, [pc, #676]	@ (8001a30 <main+0x340>)
 800178c:	f007 fa83 	bl	8008c96 <HAL_UART_Transmit>
    HAL_Delay(50);
 8001790:	2032      	movs	r0, #50	@ 0x32
 8001792:	f000 fe4f 	bl	8002434 <HAL_Delay>
   HAL_UART_DeInit(&huart4);
 8001796:	48a6      	ldr	r0, [pc, #664]	@ (8001a30 <main+0x340>)
 8001798:	f007 fa3e 	bl	8008c18 <HAL_UART_DeInit>
    MX_UART4_Init(1000000);
 800179c:	48a0      	ldr	r0, [pc, #640]	@ (8001a20 <main+0x330>)
 800179e:	f000 fa89 	bl	8001cb4 <MX_UART4_Init>


     if( HAL_UARTEx_ReceiveToIdle_IT(&huart4, bms_instance->rx_buf, sizeof(bms_instance->rx_buf)) == HAL_ERROR)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	331a      	adds	r3, #26
 80017a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017aa:	4619      	mov	r1, r3
 80017ac:	48a0      	ldr	r0, [pc, #640]	@ (8001a30 <main+0x340>)
 80017ae:	f009 ffea 	bl	800b786 <HAL_UARTEx_ReceiveToIdle_IT>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d101      	bne.n	80017bc <main+0xcc>
     {
    	 while (1);
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <main+0xc8>
     }
      HAL_Delay(10);
 80017bc:	200a      	movs	r0, #10
 80017be:	f000 fe39 	bl	8002434 <HAL_Delay>

       if( HAL_UART_Transmit_IT(&huart4, bms_instance->tx_buf, bms_instance->tx_len) == HAL_BUSY)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f103 010c 	add.w	r1, r3, #12
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f893 381a 	ldrb.w	r3, [r3, #2074]	@ 0x81a
 80017ce:	461a      	mov	r2, r3
 80017d0:	4897      	ldr	r0, [pc, #604]	@ (8001a30 <main+0x340>)
 80017d2:	f007 faef 	bl	8008db4 <HAL_UART_Transmit_IT>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d101      	bne.n	80017e0 <main+0xf0>
       {
    	   while (1);
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <main+0xec>
       }


      uint8_t buf = 0x20;
 80017e0:	2320      	movs	r3, #32
 80017e2:	70bb      	strb	r3, [r7, #2]
      bq79600_write_reg(bms_instance, 0x00, CONTROL1, &buf, 1);
 80017e4:	1cbb      	adds	r3, r7, #2
 80017e6:	2201      	movs	r2, #1
 80017e8:	9200      	str	r2, [sp, #0]
 80017ea:	f240 3209 	movw	r2, #777	@ 0x309
 80017ee:	2100      	movs	r1, #0
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f7ff fdbd 	bl	8001370 <bq79600_write_reg>
      HAL_Delay(12 * n_devices);
 80017f6:	2024      	movs	r0, #36	@ 0x24
 80017f8:	f000 fe1c 	bl	8002434 <HAL_Delay>

      bq79600_error_t err = bq79600_auto_addressing(bms_instance, n_devices);
 80017fc:	2103      	movs	r1, #3
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f7ff fdf4 	bl	80013ec <bq79600_auto_addressing>
 8001804:	4603      	mov	r3, r0
 8001806:	72fb      	strb	r3, [r7, #11]
      if (err) {
 8001808:	7afb      	ldrb	r3, [r7, #11]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <main+0x122>
       // SEGGER_RTT_printf(0, "[BQ79600] Auto addressing failed.\n");
        while (1);
 800180e:	bf00      	nop
 8001810:	e7fd      	b.n	800180e <main+0x11e>
      }

      /* Set long communication timeout */
      buf = 0x0A;  // CTL_ACT=1 | CTL_TIME=010 (2s)
 8001812:	230a      	movs	r3, #10
 8001814:	70bb      	strb	r3, [r7, #2]
      bq79600_construct_command(bms_instance, STACK_WRITE, 0, COMM_TIMEOUT_CONF, 5, &buf);
 8001816:	1cbb      	adds	r3, r7, #2
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	2305      	movs	r3, #5
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2319      	movs	r3, #25
 8001820:	2200      	movs	r2, #0
 8001822:	2103      	movs	r1, #3
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f7ff fbeb 	bl	8001000 <bq79600_construct_command>
      bq79600_tx(bms_instance);
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f7ff fc78 	bl	8001120 <bq79600_tx>
      HAL_Delay(1);
 8001830:	2001      	movs	r0, #1
 8001832:	f000 fdff 	bl	8002434 <HAL_Delay>

      /* Config stack device ADCs */
      buf = n_cells_per_device - 6;
 8001836:	2307      	movs	r3, #7
 8001838:	70bb      	strb	r3, [r7, #2]
      bq79600_construct_command(bms_instance, STACK_WRITE, 0, ACTIVE_CELL, 1, &buf);
 800183a:	1cbb      	adds	r3, r7, #2
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	2301      	movs	r3, #1
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2303      	movs	r3, #3
 8001844:	2200      	movs	r2, #0
 8001846:	2103      	movs	r1, #3
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f7ff fbd9 	bl	8001000 <bq79600_construct_command>
      bq79600_tx(bms_instance);
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f7ff fc66 	bl	8001120 <bq79600_tx>

      buf = 0x06;
 8001854:	2306      	movs	r3, #6
 8001856:	70bb      	strb	r3, [r7, #2]
      bq79600_construct_command(bms_instance, STACK_WRITE, 0, ADC_CTRL1, 1, &buf);
 8001858:	1cbb      	adds	r3, r7, #2
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	2301      	movs	r3, #1
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	f240 330d 	movw	r3, #781	@ 0x30d
 8001864:	2200      	movs	r2, #0
 8001866:	2103      	movs	r1, #3
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f7ff fbc9 	bl	8001000 <bq79600_construct_command>
      bq79600_tx(bms_instance);
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f7ff fc56 	bl	8001120 <bq79600_tx>
      HAL_Delay(1 * n_devices);
 8001874:	2003      	movs	r0, #3
 8001876:	f000 fddd 	bl	8002434 <HAL_Delay>

      /*  Setup OV, UV for balancing  */
      bq79600_construct_command(bms_instance, STACK_WRITE, 0, OV_THRESH, 1, 0x22); // 0x22 = 4175mV
 800187a:	2322      	movs	r3, #34	@ 0x22
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	2301      	movs	r3, #1
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2309      	movs	r3, #9
 8001884:	2200      	movs	r2, #0
 8001886:	2103      	movs	r1, #3
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f7ff fbb9 	bl	8001000 <bq79600_construct_command>
      bq79600_tx(bms_instance);
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7ff fc46 	bl	8001120 <bq79600_tx>
      bq79600_construct_command(bms_instance, STACK_WRITE, 0, UV_THRESH, 1, 0x26); // 0x26 = 3100mV
 8001894:	2326      	movs	r3, #38	@ 0x26
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	2301      	movs	r3, #1
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	230a      	movs	r3, #10
 800189e:	2200      	movs	r2, #0
 80018a0:	2103      	movs	r1, #3
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f7ff fbac 	bl	8001000 <bq79600_construct_command>
      bq79600_tx(bms_instance);
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f7ff fc39 	bl	8001120 <bq79600_tx>
      uint8_t OV_UV_MODE = 0x01; // Set mode to run OV and UV round robin on all cells
 80018ae:	2301      	movs	r3, #1
 80018b0:	72bb      	strb	r3, [r7, #10]
      uint8_t OV_UV_GO = 0x01; // Start OV UV comparators
 80018b2:	2301      	movs	r3, #1
 80018b4:	727b      	strb	r3, [r7, #9]
      uint8_t OV_UV_CONTROL_DATA[] = {OV_UV_MODE,OV_UV_GO};
 80018b6:	7abb      	ldrb	r3, [r7, #10]
 80018b8:	703b      	strb	r3, [r7, #0]
 80018ba:	7a7b      	ldrb	r3, [r7, #9]
 80018bc:	707b      	strb	r3, [r7, #1]
      bq79600_construct_command(bms_instance, STACK_WRITE, 0, OVUV_CTRL, sizeof(OV_UV_CONTROL_DATA), OV_UV_CONTROL_DATA); // 0x26 = 3100mV
 80018be:	463b      	mov	r3, r7
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	2302      	movs	r3, #2
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	f44f 734b 	mov.w	r3, #812	@ 0x32c
 80018ca:	2200      	movs	r2, #0
 80018cc:	2103      	movs	r1, #3
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f7ff fb96 	bl	8001000 <bq79600_construct_command>
      bq79600_tx(bms_instance);
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7ff fc23 	bl	8001120 <bq79600_tx>
      HAL_Delay(1 * n_devices); // wait for stack write
 80018da:	2003      	movs	r0, #3
 80018dc:	f000 fdaa 	bl	8002434 <HAL_Delay>


      // Read status of devices , OVUV - bit 3
	  bq79600_construct_command(bms_instance, STACK_WRITE, 0, DEV_STAT, 0, NULL); // 0x26 = 3100mV
 80018e0:	2300      	movs	r3, #0
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	2300      	movs	r3, #0
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	f240 532c 	movw	r3, #1324	@ 0x52c
 80018ec:	2200      	movs	r2, #0
 80018ee:	2103      	movs	r1, #3
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7ff fb85 	bl	8001000 <bq79600_construct_command>
	  bq79600_tx(bms_instance);
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f7ff fc12 	bl	8001120 <bq79600_tx>
	  HAL_Delay(1 * n_devices); // wait for stack write
 80018fc:	2003      	movs	r0, #3
 80018fe:	f000 fd99 	bl	8002434 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      while (1) {
        bq79600_construct_command(bms_instance, STACK_READ, 0, DIETEMP1_HI, 2, NULL);
 8001902:	2300      	movs	r3, #0
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2302      	movs	r3, #2
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	f240 53ae 	movw	r3, #1454	@ 0x5ae
 800190e:	2200      	movs	r2, #0
 8001910:	2102      	movs	r1, #2
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f7ff fb74 	bl	8001000 <bq79600_construct_command>
        bq79600_tx(bms_instance);
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f7ff fc01 	bl	8001120 <bq79600_tx>
        bq79600_bsp_ready(bms_instance);
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f7ff fe29 	bl	8001576 <bq79600_bsp_ready>

        for (int i = 0; i < n_devices - 1; i++)
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	e01f      	b.n	800196a <main+0x27a>
        {
          modules[i].dietemp = raw_to_float(&bms_instance->rx_buf[4 + i * 8]) * 0.025;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	3304      	adds	r3, #4
 8001930:	3318      	adds	r3, #24
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4413      	add	r3, r2
 8001936:	3302      	adds	r3, #2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fe83 	bl	8001644 <raw_to_float>
 800193e:	eef0 7a40 	vmov.f32	s15, s0
 8001942:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001946:	ed9f 6b32 	vldr	d6, [pc, #200]	@ 8001a10 <main+0x320>
 800194a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800194e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001952:	4a38      	ldr	r2, [pc, #224]	@ (8001a34 <main+0x344>)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	215c      	movs	r1, #92	@ 0x5c
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	4413      	add	r3, r2
 800195e:	3354      	adds	r3, #84	@ 0x54
 8001960:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < n_devices - 1; i++)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	3301      	adds	r3, #1
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	2b01      	cmp	r3, #1
 800196e:	dddc      	ble.n	800192a <main+0x23a>
        }
        uint32_t start_vcells = VCELL1_HI - n_cells_per_device * 2 + 2;
 8001970:	f240 536e 	movw	r3, #1390	@ 0x56e
 8001974:	607b      	str	r3, [r7, #4]
        bq79600_construct_command(bms_instance, STACK_READ, 0, start_vcells, n_cells_per_device * 2, NULL);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	b29b      	uxth	r3, r3
 800197a:	2200      	movs	r2, #0
 800197c:	9201      	str	r2, [sp, #4]
 800197e:	221a      	movs	r2, #26
 8001980:	9200      	str	r2, [sp, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	2102      	movs	r1, #2
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f7ff fb3a 	bl	8001000 <bq79600_construct_command>
        bq79600_tx(bms_instance);
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f7ff fbc7 	bl	8001120 <bq79600_tx>
        bq79600_bsp_ready(bms_instance);
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f7ff fdef 	bl	8001576 <bq79600_bsp_ready>

        for (int i = 0; i < n_devices - 1; i++)
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	e030      	b.n	8001a00 <main+0x310>
          for (int j = 0; j < n_cells_per_device; j++)
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e027      	b.n	80019f4 <main+0x304>
          {
            modules[i].vcells[j] =
                raw_to_float(&bms_instance->rx_buf[4 + i * (n_cells_per_device * 2 + 6) + 2 * j]) * 0.19073;
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	015b      	lsls	r3, r3, #5
 80019a8:	1d1a      	adds	r2, r3, #4
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	3318      	adds	r3, #24
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4413      	add	r3, r2
 80019b6:	3302      	adds	r3, #2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fe43 	bl	8001644 <raw_to_float>
 80019be:	eef0 7a40 	vmov.f32	s15, s0
 80019c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019c6:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8001a18 <main+0x328>
 80019ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
            modules[i].vcells[j] =
 80019d2:	4918      	ldr	r1, [pc, #96]	@ (8001a34 <main+0x344>)
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	1a9b      	subs	r3, r3, r2
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	4413      	add	r3, r2
 80019e4:	3308      	adds	r3, #8
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	edc3 7a00 	vstr	s15, [r3]
          for (int j = 0; j < n_cells_per_device; j++)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	ddd4      	ble.n	80019a4 <main+0x2b4>
        for (int i = 0; i < n_devices - 1; i++)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	3301      	adds	r3, #1
 80019fe:	61bb      	str	r3, [r7, #24]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	ddcb      	ble.n	800199e <main+0x2ae>
          // napiecia[j] = modules[i].vcells[j];



          }
        for (int i = 0; i < n_devices - 2; i++) modules[i].timestamp = HAL_GetTick();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	e023      	b.n	8001a54 <main+0x364>
 8001a0c:	f3af 8000 	nop.w
 8001a10:	9999999a 	.word	0x9999999a
 8001a14:	3f999999 	.word	0x3f999999
 8001a18:	342edbb6 	.word	0x342edbb6
 8001a1c:	3fc869d7 	.word	0x3fc869d7
 8001a20:	000f4240 	.word	0x000f4240
 8001a24:	24000d50 	.word	0x24000d50
 8001a28:	24000d04 	.word	0x24000d04
 8001a2c:	58020000 	.word	0x58020000
 8001a30:	24000d9c 	.word	0x24000d9c
 8001a34:	24000f20 	.word	0x24000f20
 8001a38:	f000 fcf0 	bl	800241c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	490c      	ldr	r1, [pc, #48]	@ (8001a70 <main+0x380>)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	205c      	movs	r0, #92	@ 0x5c
 8001a44:	fb00 f303 	mul.w	r3, r0, r3
 8001a48:	440b      	add	r3, r1
 8001a4a:	3358      	adds	r3, #88	@ 0x58
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	3301      	adds	r3, #1
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	ddee      	ble.n	8001a38 <main+0x348>
        HAL_Delay(50);
 8001a5a:	2032      	movs	r0, #50	@ 0x32
 8001a5c:	f000 fcea 	bl	8002434 <HAL_Delay>
    /* USER CODE END WHILE */
        if (bms_instance->fault)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f43f af4b 	beq.w	8001902 <main+0x212>
                {
               	   while(1);
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <main+0x37c>
 8001a70:	24000f20 	.word	0x24000f20

08001a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b09c      	sub	sp, #112	@ 0x70
 8001a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a7e:	224c      	movs	r2, #76	@ 0x4c
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f009 ff1e 	bl	800b8c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f009 ff18 	bl	800b8c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a94:	2002      	movs	r0, #2
 8001a96:	f003 fd81 	bl	800559c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	4b31      	ldr	r3, [pc, #196]	@ (8001b64 <SystemClock_Config+0xf0>)
 8001aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa2:	4a30      	ldr	r2, [pc, #192]	@ (8001b64 <SystemClock_Config+0xf0>)
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8001b64 <SystemClock_Config+0xf0>)
 8001aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b68 <SystemClock_Config+0xf4>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001abc:	4a2a      	ldr	r2, [pc, #168]	@ (8001b68 <SystemClock_Config+0xf4>)
 8001abe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b28      	ldr	r3, [pc, #160]	@ (8001b68 <SystemClock_Config+0xf4>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ad0:	bf00      	nop
 8001ad2:	4b25      	ldr	r3, [pc, #148]	@ (8001b68 <SystemClock_Config+0xf4>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ada:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ade:	d1f8      	bne.n	8001ad2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ae8:	2340      	movs	r3, #64	@ 0x40
 8001aea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aec:	2302      	movs	r3, #2
 8001aee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001af0:	2300      	movs	r3, #0
 8001af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001af4:	2304      	movs	r3, #4
 8001af6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001af8:	230a      	movs	r3, #10
 8001afa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001afc:	2302      	movs	r3, #2
 8001afe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b00:	2302      	movs	r3, #2
 8001b02:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b04:	2302      	movs	r3, #2
 8001b06:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b08:	230c      	movs	r3, #12
 8001b0a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 fd79 	bl	8005610 <HAL_RCC_OscConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b24:	f000 f988 	bl	8001e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b28:	233f      	movs	r3, #63	@ 0x3f
 8001b2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b3c:	2340      	movs	r3, #64	@ 0x40
 8001b3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f004 f9b9 	bl	8005ec4 <HAL_RCC_ClockConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001b58:	f000 f96e 	bl	8001e38 <Error_Handler>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3770      	adds	r7, #112	@ 0x70
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	58000400 	.word	0x58000400
 8001b68:	58024800 	.word	0x58024800

08001b6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <MX_TIM1_Init+0xa0>)
 8001b8c:	4a20      	ldr	r2, [pc, #128]	@ (8001c10 <MX_TIM1_Init+0xa4>)
 8001b8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b90:	4b1e      	ldr	r3, [pc, #120]	@ (8001c0c <MX_TIM1_Init+0xa0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b96:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <MX_TIM1_Init+0xa0>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <MX_TIM1_Init+0xa0>)
 8001b9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ba2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba4:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <MX_TIM1_Init+0xa0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001baa:	4b18      	ldr	r3, [pc, #96]	@ (8001c0c <MX_TIM1_Init+0xa0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb0:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <MX_TIM1_Init+0xa0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bb6:	4815      	ldr	r0, [pc, #84]	@ (8001c0c <MX_TIM1_Init+0xa0>)
 8001bb8:	f006 fb20 	bl	80081fc <HAL_TIM_Base_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001bc2:	f000 f939 	bl	8001e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480e      	ldr	r0, [pc, #56]	@ (8001c0c <MX_TIM1_Init+0xa0>)
 8001bd4:	f006 fbda 	bl	800838c <HAL_TIM_ConfigClockSource>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001bde:	f000 f92b 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4806      	ldr	r0, [pc, #24]	@ (8001c0c <MX_TIM1_Init+0xa0>)
 8001bf4:	f006 ff32 	bl	8008a5c <HAL_TIMEx_MasterConfigSynchronization>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001bfe:	f000 f91b 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	24000d04 	.word	0x24000d04
 8001c10:	40010000 	.word	0x40010000

08001c14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <MX_TIM2_Init+0x9c>)
 8001c36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb0 <MX_TIM2_Init+0x9c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <MX_TIM2_Init+0x9c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <MX_TIM2_Init+0x9c>)
 8001c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c50:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <MX_TIM2_Init+0x9c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c56:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <MX_TIM2_Init+0x9c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c5c:	4814      	ldr	r0, [pc, #80]	@ (8001cb0 <MX_TIM2_Init+0x9c>)
 8001c5e:	f006 facd 	bl	80081fc <HAL_TIM_Base_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001c68:	f000 f8e6 	bl	8001e38 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001c70:	2330      	movs	r3, #48	@ 0x30
 8001c72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480d      	ldr	r0, [pc, #52]	@ (8001cb0 <MX_TIM2_Init+0x9c>)
 8001c7c:	f006 fc7e 	bl	800857c <HAL_TIM_SlaveConfigSynchro>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001c86:	f000 f8d7 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c92:	463b      	mov	r3, r7
 8001c94:	4619      	mov	r1, r3
 8001c96:	4806      	ldr	r0, [pc, #24]	@ (8001cb0 <MX_TIM2_Init+0x9c>)
 8001c98:	f006 fee0 	bl	8008a5c <HAL_TIMEx_MasterConfigSynchronization>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001ca2:	f000 f8c9 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	3720      	adds	r7, #32
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	24000d50 	.word	0x24000d50

08001cb4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
 void MX_UART4_Init(int boudrate)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cbc:	4b25      	ldr	r3, [pc, #148]	@ (8001d54 <MX_UART4_Init+0xa0>)
 8001cbe:	4a26      	ldr	r2, [pc, #152]	@ (8001d58 <MX_UART4_Init+0xa4>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = boudrate;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a23      	ldr	r2, [pc, #140]	@ (8001d54 <MX_UART4_Init+0xa0>)
 8001cc6:	6053      	str	r3, [r2, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc8:	4b22      	ldr	r3, [pc, #136]	@ (8001d54 <MX_UART4_Init+0xa0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cce:	4b21      	ldr	r3, [pc, #132]	@ (8001d54 <MX_UART4_Init+0xa0>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d54 <MX_UART4_Init+0xa0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cda:	4b1e      	ldr	r3, [pc, #120]	@ (8001d54 <MX_UART4_Init+0xa0>)
 8001cdc:	220c      	movs	r2, #12
 8001cde:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d54 <MX_UART4_Init+0xa0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d54 <MX_UART4_Init+0xa0>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cec:	4b19      	ldr	r3, [pc, #100]	@ (8001d54 <MX_UART4_Init+0xa0>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cf2:	4b18      	ldr	r3, [pc, #96]	@ (8001d54 <MX_UART4_Init+0xa0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001cf8:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <MX_UART4_Init+0xa0>)
 8001cfa:	2208      	movs	r2, #8
 8001cfc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001cfe:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <MX_UART4_Init+0xa0>)
 8001d00:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d04:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d06:	4813      	ldr	r0, [pc, #76]	@ (8001d54 <MX_UART4_Init+0xa0>)
 8001d08:	f006 ff36 	bl	8008b78 <HAL_UART_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_UART4_Init+0x62>
  {
    Error_Handler();
 8001d12:	f000 f891 	bl	8001e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d16:	2100      	movs	r1, #0
 8001d18:	480e      	ldr	r0, [pc, #56]	@ (8001d54 <MX_UART4_Init+0xa0>)
 8001d1a:	f009 fcb8 	bl	800b68e <HAL_UARTEx_SetTxFifoThreshold>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_UART4_Init+0x74>
  {
    Error_Handler();
 8001d24:	f000 f888 	bl	8001e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d28:	2100      	movs	r1, #0
 8001d2a:	480a      	ldr	r0, [pc, #40]	@ (8001d54 <MX_UART4_Init+0xa0>)
 8001d2c:	f009 fced 	bl	800b70a <HAL_UARTEx_SetRxFifoThreshold>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8001d36:	f000 f87f 	bl	8001e38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001d3a:	4806      	ldr	r0, [pc, #24]	@ (8001d54 <MX_UART4_Init+0xa0>)
 8001d3c:	f009 fc6e 	bl	800b61c <HAL_UARTEx_DisableFifoMode>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8001d46:	f000 f877 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	24000d9c 	.word	0x24000d9c
 8001d58:	40004c00 	.word	0x40004c00

08001d5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d62:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <MX_DMA_Init+0x4c>)
 8001d64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d68:	4a0f      	ldr	r2, [pc, #60]	@ (8001da8 <MX_DMA_Init+0x4c>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001d72:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <MX_DMA_Init+0x4c>)
 8001d74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	200f      	movs	r0, #15
 8001d86:	f000 fc84 	bl	8002692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001d8a:	200f      	movs	r0, #15
 8001d8c:	f000 fc9b 	bl	80026c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	2010      	movs	r0, #16
 8001d96:	f000 fc7c 	bl	8002692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d9a:	2010      	movs	r0, #16
 8001d9c:	f000 fc93 	bl	80026c6 <HAL_NVIC_EnableIRQ>

}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	58024400 	.word	0x58024400

08001dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <MX_GPIO_Init+0x30>)
 8001db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db8:	4a08      	ldr	r2, [pc, #32]	@ (8001ddc <MX_GPIO_Init+0x30>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dc2:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <MX_GPIO_Init+0x30>)
 8001dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	58024400 	.word	0x58024400

08001de0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001de6:	463b      	mov	r3, r7
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001df2:	f000 fc91 	bl	8002718 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001df6:	2301      	movs	r3, #1
 8001df8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001e02:	231f      	movs	r3, #31
 8001e04:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001e06:	2387      	movs	r3, #135	@ 0x87
 8001e08:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001e12:	2301      	movs	r3, #1
 8001e14:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001e16:	2301      	movs	r3, #1
 8001e18:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e22:	463b      	mov	r3, r7
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 fcaf 	bl	8002788 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001e2a:	2004      	movs	r0, #4
 8001e2c:	f000 fc8c 	bl	8002748 <HAL_MPU_Enable>

}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3c:	b672      	cpsid	i
}
 8001e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <Error_Handler+0x8>

08001e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <HAL_MspInit+0x30>)
 8001e4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e50:	4a08      	ldr	r2, [pc, #32]	@ (8001e74 <HAL_MspInit+0x30>)
 8001e52:	f043 0302 	orr.w	r3, r3, #2
 8001e56:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e5a:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_MspInit+0x30>)
 8001e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	58024400 	.word	0x58024400

08001e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a16      	ldr	r2, [pc, #88]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x68>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d10f      	bne.n	8001eaa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e90:	4a14      	ldr	r2, [pc, #80]	@ (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ea8:	e013      	b.n	8001ed2 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eb2:	d10e      	bne.n	8001ed2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ec4:	4b07      	ldr	r3, [pc, #28]	@ (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001ec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
}
 8001ed2:	bf00      	nop
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	58024400 	.word	0x58024400

08001ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b0ba      	sub	sp, #232	@ 0xe8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	22c0      	movs	r2, #192	@ 0xc0
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f009 fcdb 	bl	800b8c4 <memset>
  if(huart->Instance==UART4)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a61      	ldr	r2, [pc, #388]	@ (8002098 <HAL_UART_MspInit+0x1b0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	f040 80bb 	bne.w	8002090 <HAL_UART_MspInit+0x1a8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001f1a:	f04f 0202 	mov.w	r2, #2
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 fb53 	bl	80065dc <HAL_RCCEx_PeriphCLKConfig>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001f3c:	f7ff ff7c 	bl	8001e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f40:	4b56      	ldr	r3, [pc, #344]	@ (800209c <HAL_UART_MspInit+0x1b4>)
 8001f42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f46:	4a55      	ldr	r2, [pc, #340]	@ (800209c <HAL_UART_MspInit+0x1b4>)
 8001f48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f50:	4b52      	ldr	r3, [pc, #328]	@ (800209c <HAL_UART_MspInit+0x1b4>)
 8001f52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	4b4f      	ldr	r3, [pc, #316]	@ (800209c <HAL_UART_MspInit+0x1b4>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f64:	4a4d      	ldr	r2, [pc, #308]	@ (800209c <HAL_UART_MspInit+0x1b4>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f6e:	4b4b      	ldr	r3, [pc, #300]	@ (800209c <HAL_UART_MspInit+0x1b4>)
 8001f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f94:	2308      	movs	r3, #8
 8001f96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	483f      	ldr	r0, [pc, #252]	@ (80020a0 <HAL_UART_MspInit+0x1b8>)
 8001fa2:	f003 f80d 	bl	8004fc0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80020a4 <HAL_UART_MspInit+0x1bc>)
 8001fa8:	4a3f      	ldr	r2, [pc, #252]	@ (80020a8 <HAL_UART_MspInit+0x1c0>)
 8001faa:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001fac:	4b3d      	ldr	r3, [pc, #244]	@ (80020a4 <HAL_UART_MspInit+0x1bc>)
 8001fae:	2240      	movs	r2, #64	@ 0x40
 8001fb0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80020a4 <HAL_UART_MspInit+0x1bc>)
 8001fb4:	2240      	movs	r2, #64	@ 0x40
 8001fb6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	@ (80020a4 <HAL_UART_MspInit+0x1bc>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fbe:	4b39      	ldr	r3, [pc, #228]	@ (80020a4 <HAL_UART_MspInit+0x1bc>)
 8001fc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fc4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fc6:	4b37      	ldr	r3, [pc, #220]	@ (80020a4 <HAL_UART_MspInit+0x1bc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fcc:	4b35      	ldr	r3, [pc, #212]	@ (80020a4 <HAL_UART_MspInit+0x1bc>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001fd2:	4b34      	ldr	r3, [pc, #208]	@ (80020a4 <HAL_UART_MspInit+0x1bc>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd8:	4b32      	ldr	r3, [pc, #200]	@ (80020a4 <HAL_UART_MspInit+0x1bc>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001fde:	4b31      	ldr	r3, [pc, #196]	@ (80020a4 <HAL_UART_MspInit+0x1bc>)
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80020a4 <HAL_UART_MspInit+0x1bc>)
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001fea:	4b2e      	ldr	r3, [pc, #184]	@ (80020a4 <HAL_UART_MspInit+0x1bc>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80020a4 <HAL_UART_MspInit+0x1bc>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001ff6:	482b      	ldr	r0, [pc, #172]	@ (80020a4 <HAL_UART_MspInit+0x1bc>)
 8001ff8:	f000 fc06 	bl	8002808 <HAL_DMA_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_UART_MspInit+0x11e>
    {
      Error_Handler();
 8002002:	f7ff ff19 	bl	8001e38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a26      	ldr	r2, [pc, #152]	@ (80020a4 <HAL_UART_MspInit+0x1bc>)
 800200a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800200c:	4a25      	ldr	r2, [pc, #148]	@ (80020a4 <HAL_UART_MspInit+0x1bc>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream5;
 8002012:	4b26      	ldr	r3, [pc, #152]	@ (80020ac <HAL_UART_MspInit+0x1c4>)
 8002014:	4a26      	ldr	r2, [pc, #152]	@ (80020b0 <HAL_UART_MspInit+0x1c8>)
 8002016:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002018:	4b24      	ldr	r3, [pc, #144]	@ (80020ac <HAL_UART_MspInit+0x1c4>)
 800201a:	223f      	movs	r2, #63	@ 0x3f
 800201c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800201e:	4b23      	ldr	r3, [pc, #140]	@ (80020ac <HAL_UART_MspInit+0x1c4>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002024:	4b21      	ldr	r3, [pc, #132]	@ (80020ac <HAL_UART_MspInit+0x1c4>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800202a:	4b20      	ldr	r3, [pc, #128]	@ (80020ac <HAL_UART_MspInit+0x1c4>)
 800202c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002030:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002032:	4b1e      	ldr	r3, [pc, #120]	@ (80020ac <HAL_UART_MspInit+0x1c4>)
 8002034:	2200      	movs	r2, #0
 8002036:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002038:	4b1c      	ldr	r3, [pc, #112]	@ (80020ac <HAL_UART_MspInit+0x1c4>)
 800203a:	2200      	movs	r2, #0
 800203c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800203e:	4b1b      	ldr	r3, [pc, #108]	@ (80020ac <HAL_UART_MspInit+0x1c4>)
 8002040:	2200      	movs	r2, #0
 8002042:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002044:	4b19      	ldr	r3, [pc, #100]	@ (80020ac <HAL_UART_MspInit+0x1c4>)
 8002046:	2200      	movs	r2, #0
 8002048:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800204a:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <HAL_UART_MspInit+0x1c4>)
 800204c:	2204      	movs	r2, #4
 800204e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002050:	4b16      	ldr	r3, [pc, #88]	@ (80020ac <HAL_UART_MspInit+0x1c4>)
 8002052:	2203      	movs	r2, #3
 8002054:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <HAL_UART_MspInit+0x1c4>)
 8002058:	2200      	movs	r2, #0
 800205a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800205c:	4b13      	ldr	r3, [pc, #76]	@ (80020ac <HAL_UART_MspInit+0x1c4>)
 800205e:	2200      	movs	r2, #0
 8002060:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002062:	4812      	ldr	r0, [pc, #72]	@ (80020ac <HAL_UART_MspInit+0x1c4>)
 8002064:	f000 fbd0 	bl	8002808 <HAL_DMA_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_UART_MspInit+0x18a>
    {
      Error_Handler();
 800206e:	f7ff fee3 	bl	8001e38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a0d      	ldr	r2, [pc, #52]	@ (80020ac <HAL_UART_MspInit+0x1c4>)
 8002076:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800207a:	4a0c      	ldr	r2, [pc, #48]	@ (80020ac <HAL_UART_MspInit+0x1c4>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	2100      	movs	r1, #0
 8002084:	2034      	movs	r0, #52	@ 0x34
 8002086:	f000 fb04 	bl	8002692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800208a:	2034      	movs	r0, #52	@ 0x34
 800208c:	f000 fb1b 	bl	80026c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8002090:	bf00      	nop
 8002092:	37e8      	adds	r7, #232	@ 0xe8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40004c00 	.word	0x40004c00
 800209c:	58024400 	.word	0x58024400
 80020a0:	58020000 	.word	0x58020000
 80020a4:	24000e30 	.word	0x24000e30
 80020a8:	40020070 	.word	0x40020070
 80020ac:	24000ea8 	.word	0x24000ea8
 80020b0:	40020088 	.word	0x40020088

080020b4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a10      	ldr	r2, [pc, #64]	@ (8002104 <HAL_UART_MspDeInit+0x50>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d119      	bne.n	80020fa <HAL_UART_MspDeInit+0x46>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80020c6:	4b10      	ldr	r3, [pc, #64]	@ (8002108 <HAL_UART_MspDeInit+0x54>)
 80020c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002108 <HAL_UART_MspDeInit+0x54>)
 80020ce:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80020d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 80020d6:	2103      	movs	r1, #3
 80020d8:	480c      	ldr	r0, [pc, #48]	@ (800210c <HAL_UART_MspDeInit+0x58>)
 80020da:	f003 f921 	bl	8005320 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 feec 	bl	8002ec0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fee6 	bl	8002ec0 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 80020f4:	2034      	movs	r0, #52	@ 0x34
 80020f6:	f000 faf4 	bl	80026e2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }

}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40004c00 	.word	0x40004c00
 8002108:	58024400 	.word	0x58024400
 800210c:	58020000 	.word	0x58020000

08002110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <NMI_Handler+0x4>

08002118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <HardFault_Handler+0x4>

08002120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <MemManage_Handler+0x4>

08002128 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <BusFault_Handler+0x4>

08002130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <UsageFault_Handler+0x4>

08002138 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002166:	f000 f945 	bl	80023f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002174:	4802      	ldr	r0, [pc, #8]	@ (8002180 <DMA1_Stream4_IRQHandler+0x10>)
 8002176:	f001 fdbd 	bl	8003cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	24000e30 	.word	0x24000e30

08002184 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002188:	4802      	ldr	r0, [pc, #8]	@ (8002194 <DMA1_Stream5_IRQHandler+0x10>)
 800218a:	f001 fdb3 	bl	8003cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	24000ea8 	.word	0x24000ea8

08002198 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800219c:	4802      	ldr	r0, [pc, #8]	@ (80021a8 <UART4_IRQHandler+0x10>)
 800219e:	f006 fe9d 	bl	8008edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	24000d9c 	.word	0x24000d9c

080021ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021b0:	4b37      	ldr	r3, [pc, #220]	@ (8002290 <SystemInit+0xe4>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b6:	4a36      	ldr	r2, [pc, #216]	@ (8002290 <SystemInit+0xe4>)
 80021b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021c0:	4b34      	ldr	r3, [pc, #208]	@ (8002294 <SystemInit+0xe8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	2b06      	cmp	r3, #6
 80021ca:	d807      	bhi.n	80021dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021cc:	4b31      	ldr	r3, [pc, #196]	@ (8002294 <SystemInit+0xe8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 030f 	bic.w	r3, r3, #15
 80021d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002294 <SystemInit+0xe8>)
 80021d6:	f043 0307 	orr.w	r3, r3, #7
 80021da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80021dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002298 <SystemInit+0xec>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002298 <SystemInit+0xec>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002298 <SystemInit+0xec>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80021ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002298 <SystemInit+0xec>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4929      	ldr	r1, [pc, #164]	@ (8002298 <SystemInit+0xec>)
 80021f4:	4b29      	ldr	r3, [pc, #164]	@ (800229c <SystemInit+0xf0>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021fa:	4b26      	ldr	r3, [pc, #152]	@ (8002294 <SystemInit+0xe8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002206:	4b23      	ldr	r3, [pc, #140]	@ (8002294 <SystemInit+0xe8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 030f 	bic.w	r3, r3, #15
 800220e:	4a21      	ldr	r2, [pc, #132]	@ (8002294 <SystemInit+0xe8>)
 8002210:	f043 0307 	orr.w	r3, r3, #7
 8002214:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002216:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <SystemInit+0xec>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800221c:	4b1e      	ldr	r3, [pc, #120]	@ (8002298 <SystemInit+0xec>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002222:	4b1d      	ldr	r3, [pc, #116]	@ (8002298 <SystemInit+0xec>)
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002228:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <SystemInit+0xec>)
 800222a:	4a1d      	ldr	r2, [pc, #116]	@ (80022a0 <SystemInit+0xf4>)
 800222c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800222e:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <SystemInit+0xec>)
 8002230:	4a1c      	ldr	r2, [pc, #112]	@ (80022a4 <SystemInit+0xf8>)
 8002232:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002234:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <SystemInit+0xec>)
 8002236:	4a1c      	ldr	r2, [pc, #112]	@ (80022a8 <SystemInit+0xfc>)
 8002238:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800223a:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <SystemInit+0xec>)
 800223c:	2200      	movs	r2, #0
 800223e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002240:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <SystemInit+0xec>)
 8002242:	4a19      	ldr	r2, [pc, #100]	@ (80022a8 <SystemInit+0xfc>)
 8002244:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002246:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <SystemInit+0xec>)
 8002248:	2200      	movs	r2, #0
 800224a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800224c:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <SystemInit+0xec>)
 800224e:	4a16      	ldr	r2, [pc, #88]	@ (80022a8 <SystemInit+0xfc>)
 8002250:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002252:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <SystemInit+0xec>)
 8002254:	2200      	movs	r2, #0
 8002256:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002258:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <SystemInit+0xec>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0e      	ldr	r2, [pc, #56]	@ (8002298 <SystemInit+0xec>)
 800225e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002262:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <SystemInit+0xec>)
 8002266:	2200      	movs	r2, #0
 8002268:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800226a:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <SystemInit+0x100>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <SystemInit+0x104>)
 8002270:	4013      	ands	r3, r2
 8002272:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002276:	d202      	bcs.n	800227e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002278:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <SystemInit+0x108>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800227e:	4b0e      	ldr	r3, [pc, #56]	@ (80022b8 <SystemInit+0x10c>)
 8002280:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002284:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00
 8002294:	52002000 	.word	0x52002000
 8002298:	58024400 	.word	0x58024400
 800229c:	eaf6ed7f 	.word	0xeaf6ed7f
 80022a0:	02020200 	.word	0x02020200
 80022a4:	01ff0000 	.word	0x01ff0000
 80022a8:	01010280 	.word	0x01010280
 80022ac:	5c001000 	.word	0x5c001000
 80022b0:	ffff0000 	.word	0xffff0000
 80022b4:	51008108 	.word	0x51008108
 80022b8:	52004000 	.word	0x52004000

080022bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80022bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022c0:	f7ff ff74 	bl	80021ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c4:	480c      	ldr	r0, [pc, #48]	@ (80022f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022c6:	490d      	ldr	r1, [pc, #52]	@ (80022fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002300 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022cc:	e002      	b.n	80022d4 <LoopCopyDataInit>

080022ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022d2:	3304      	adds	r3, #4

080022d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d8:	d3f9      	bcc.n	80022ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022da:	4a0a      	ldr	r2, [pc, #40]	@ (8002304 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002308 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e0:	e001      	b.n	80022e6 <LoopFillZerobss>

080022e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e4:	3204      	adds	r2, #4

080022e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e8:	d3fb      	bcc.n	80022e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ea:	f009 faf3 	bl	800b8d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ee:	f7ff f9ff 	bl	80016f0 <main>
  bx  lr
 80022f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022f4:	24060000 	.word	0x24060000
  ldr r0, =_sdata
 80022f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80022fc:	240000b8 	.word	0x240000b8
  ldr r2, =_sidata
 8002300:	0800bc3c 	.word	0x0800bc3c
  ldr r2, =_sbss
 8002304:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 8002308:	24000fe0 	.word	0x24000fe0

0800230c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800230c:	e7fe      	b.n	800230c <ADC3_IRQHandler>
	...

08002310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002316:	2003      	movs	r0, #3
 8002318:	f000 f9b0 	bl	800267c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800231c:	f003 ff88 	bl	8006230 <HAL_RCC_GetSysClockFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <HAL_Init+0x68>)
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	0a1b      	lsrs	r3, r3, #8
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	4913      	ldr	r1, [pc, #76]	@ (800237c <HAL_Init+0x6c>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
 8002338:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800233a:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <HAL_Init+0x68>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	4a0e      	ldr	r2, [pc, #56]	@ (800237c <HAL_Init+0x6c>)
 8002344:	5cd3      	ldrb	r3, [r2, r3]
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
 8002350:	4a0b      	ldr	r2, [pc, #44]	@ (8002380 <HAL_Init+0x70>)
 8002352:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002354:	4a0b      	ldr	r2, [pc, #44]	@ (8002384 <HAL_Init+0x74>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800235a:	200f      	movs	r0, #15
 800235c:	f000 f814 	bl	8002388 <HAL_InitTick>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e002      	b.n	8002370 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800236a:	f7ff fd6b 	bl	8001e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	58024400 	.word	0x58024400
 800237c:	0800bbec 	.word	0x0800bbec
 8002380:	240000ac 	.word	0x240000ac
 8002384:	240000a8 	.word	0x240000a8

08002388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002390:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <HAL_InitTick+0x60>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e021      	b.n	80023e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800239c:	4b13      	ldr	r3, [pc, #76]	@ (80023ec <HAL_InitTick+0x64>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <HAL_InitTick+0x60>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f9a3 	bl	80026fe <HAL_SYSTICK_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e00e      	b.n	80023e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b0f      	cmp	r3, #15
 80023c6:	d80a      	bhi.n	80023de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c8:	2200      	movs	r2, #0
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	f000 f95f 	bl	8002692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d4:	4a06      	ldr	r2, [pc, #24]	@ (80023f0 <HAL_InitTick+0x68>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	e000      	b.n	80023e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	240000b4 	.word	0x240000b4
 80023ec:	240000a8 	.word	0x240000a8
 80023f0:	240000b0 	.word	0x240000b0

080023f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023f8:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_IncTick+0x20>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <HAL_IncTick+0x24>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4413      	add	r3, r2
 8002404:	4a04      	ldr	r2, [pc, #16]	@ (8002418 <HAL_IncTick+0x24>)
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	240000b4 	.word	0x240000b4
 8002418:	24000fdc 	.word	0x24000fdc

0800241c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return uwTick;
 8002420:	4b03      	ldr	r3, [pc, #12]	@ (8002430 <HAL_GetTick+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	24000fdc 	.word	0x24000fdc

08002434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800243c:	f7ff ffee 	bl	800241c <HAL_GetTick>
 8002440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d005      	beq.n	800245a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800244e:	4b0a      	ldr	r3, [pc, #40]	@ (8002478 <HAL_Delay+0x44>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4413      	add	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800245a:	bf00      	nop
 800245c:	f7ff ffde 	bl	800241c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	429a      	cmp	r2, r3
 800246a:	d8f7      	bhi.n	800245c <HAL_Delay+0x28>
  {
  }
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	240000b4 	.word	0x240000b4

0800247c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002480:	4b03      	ldr	r3, [pc, #12]	@ (8002490 <HAL_GetREVID+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0c1b      	lsrs	r3, r3, #16
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	5c001000 	.word	0x5c001000

08002494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <__NVIC_SetPriorityGrouping+0x40>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c2:	4a04      	ldr	r2, [pc, #16]	@ (80024d4 <__NVIC_SetPriorityGrouping+0x40>)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	60d3      	str	r3, [r2, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00
 80024d8:	05fa0000 	.word	0x05fa0000

080024dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	@ (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002506:	2b00      	cmp	r3, #0
 8002508:	db0b      	blt.n	8002522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4907      	ldr	r1, [pc, #28]	@ (8002530 <__NVIC_EnableIRQ+0x38>)
 8002512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2001      	movs	r0, #1
 800251a:	fa00 f202 	lsl.w	r2, r0, r2
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100

08002534 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800253e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002542:	2b00      	cmp	r3, #0
 8002544:	db12      	blt.n	800256c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	f003 021f 	and.w	r2, r3, #31
 800254c:	490a      	ldr	r1, [pc, #40]	@ (8002578 <__NVIC_DisableIRQ+0x44>)
 800254e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	2001      	movs	r0, #1
 8002556:	fa00 f202 	lsl.w	r2, r0, r2
 800255a:	3320      	adds	r3, #32
 800255c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002560:	f3bf 8f4f 	dsb	sy
}
 8002564:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002566:	f3bf 8f6f 	isb	sy
}
 800256a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000e100 	.word	0xe000e100

0800257c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800258c:	2b00      	cmp	r3, #0
 800258e:	db0a      	blt.n	80025a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	490c      	ldr	r1, [pc, #48]	@ (80025c8 <__NVIC_SetPriority+0x4c>)
 8002596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	440b      	add	r3, r1
 80025a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a4:	e00a      	b.n	80025bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4908      	ldr	r1, [pc, #32]	@ (80025cc <__NVIC_SetPriority+0x50>)
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	3b04      	subs	r3, #4
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	440b      	add	r3, r1
 80025ba:	761a      	strb	r2, [r3, #24]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000e100 	.word	0xe000e100
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	@ 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f1c3 0307 	rsb	r3, r3, #7
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	bf28      	it	cs
 80025ee:	2304      	movcs	r3, #4
 80025f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3304      	adds	r3, #4
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d902      	bls.n	8002600 <NVIC_EncodePriority+0x30>
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3b03      	subs	r3, #3
 80025fe:	e000      	b.n	8002602 <NVIC_EncodePriority+0x32>
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	f04f 32ff 	mov.w	r2, #4294967295
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	401a      	ands	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002618:	f04f 31ff 	mov.w	r1, #4294967295
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	43d9      	mvns	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	4313      	orrs	r3, r2
         );
}
 800262a:	4618      	mov	r0, r3
 800262c:	3724      	adds	r7, #36	@ 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002648:	d301      	bcc.n	800264e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264a:	2301      	movs	r3, #1
 800264c:	e00f      	b.n	800266e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264e:	4a0a      	ldr	r2, [pc, #40]	@ (8002678 <SysTick_Config+0x40>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002656:	210f      	movs	r1, #15
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	f7ff ff8e 	bl	800257c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002660:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <SysTick_Config+0x40>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002666:	4b04      	ldr	r3, [pc, #16]	@ (8002678 <SysTick_Config+0x40>)
 8002668:	2207      	movs	r2, #7
 800266a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	e000e010 	.word	0xe000e010

0800267c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff05 	bl	8002494 <__NVIC_SetPriorityGrouping>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026a0:	f7ff ff1c 	bl	80024dc <__NVIC_GetPriorityGrouping>
 80026a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	6978      	ldr	r0, [r7, #20]
 80026ac:	f7ff ff90 	bl	80025d0 <NVIC_EncodePriority>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff5f 	bl	800257c <__NVIC_SetPriority>
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff0f 	bl	80024f8 <__NVIC_EnableIRQ>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80026ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff1f 	bl	8002534 <__NVIC_DisableIRQ>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ff96 	bl	8002638 <SysTick_Config>
 800270c:	4603      	mov	r3, r0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800271c:	f3bf 8f5f 	dmb	sy
}
 8002720:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002722:	4b07      	ldr	r3, [pc, #28]	@ (8002740 <HAL_MPU_Disable+0x28>)
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	4a06      	ldr	r2, [pc, #24]	@ (8002740 <HAL_MPU_Disable+0x28>)
 8002728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800272e:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <HAL_MPU_Disable+0x2c>)
 8002730:	2200      	movs	r2, #0
 8002732:	605a      	str	r2, [r3, #4]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000ed00 	.word	0xe000ed00
 8002744:	e000ed90 	.word	0xe000ed90

08002748 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002750:	4a0b      	ldr	r2, [pc, #44]	@ (8002780 <HAL_MPU_Enable+0x38>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800275a:	4b0a      	ldr	r3, [pc, #40]	@ (8002784 <HAL_MPU_Enable+0x3c>)
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	4a09      	ldr	r2, [pc, #36]	@ (8002784 <HAL_MPU_Enable+0x3c>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002764:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002766:	f3bf 8f4f 	dsb	sy
}
 800276a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800276c:	f3bf 8f6f 	isb	sy
}
 8002770:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed90 	.word	0xe000ed90
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	785a      	ldrb	r2, [r3, #1]
 8002794:	4b1b      	ldr	r3, [pc, #108]	@ (8002804 <HAL_MPU_ConfigRegion+0x7c>)
 8002796:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002798:	4b1a      	ldr	r3, [pc, #104]	@ (8002804 <HAL_MPU_ConfigRegion+0x7c>)
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	4a19      	ldr	r2, [pc, #100]	@ (8002804 <HAL_MPU_ConfigRegion+0x7c>)
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80027a4:	4a17      	ldr	r2, [pc, #92]	@ (8002804 <HAL_MPU_ConfigRegion+0x7c>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	7b1b      	ldrb	r3, [r3, #12]
 80027b0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	7adb      	ldrb	r3, [r3, #11]
 80027b6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	7a9b      	ldrb	r3, [r3, #10]
 80027be:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80027c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7b5b      	ldrb	r3, [r3, #13]
 80027c6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80027c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	7b9b      	ldrb	r3, [r3, #14]
 80027ce:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80027d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7bdb      	ldrb	r3, [r3, #15]
 80027d6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80027d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7a5b      	ldrb	r3, [r3, #9]
 80027de:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80027e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	7a1b      	ldrb	r3, [r3, #8]
 80027e6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80027e8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027f0:	4a04      	ldr	r2, [pc, #16]	@ (8002804 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027f2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027f4:	6113      	str	r3, [r2, #16]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000ed90 	.word	0xe000ed90

08002808 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff fe04 	bl	800241c <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e316      	b.n	8002e4e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a66      	ldr	r2, [pc, #408]	@ (80029c0 <HAL_DMA_Init+0x1b8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d04a      	beq.n	80028c0 <HAL_DMA_Init+0xb8>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a65      	ldr	r2, [pc, #404]	@ (80029c4 <HAL_DMA_Init+0x1bc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d045      	beq.n	80028c0 <HAL_DMA_Init+0xb8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a63      	ldr	r2, [pc, #396]	@ (80029c8 <HAL_DMA_Init+0x1c0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d040      	beq.n	80028c0 <HAL_DMA_Init+0xb8>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a62      	ldr	r2, [pc, #392]	@ (80029cc <HAL_DMA_Init+0x1c4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d03b      	beq.n	80028c0 <HAL_DMA_Init+0xb8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a60      	ldr	r2, [pc, #384]	@ (80029d0 <HAL_DMA_Init+0x1c8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d036      	beq.n	80028c0 <HAL_DMA_Init+0xb8>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a5f      	ldr	r2, [pc, #380]	@ (80029d4 <HAL_DMA_Init+0x1cc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d031      	beq.n	80028c0 <HAL_DMA_Init+0xb8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a5d      	ldr	r2, [pc, #372]	@ (80029d8 <HAL_DMA_Init+0x1d0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d02c      	beq.n	80028c0 <HAL_DMA_Init+0xb8>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a5c      	ldr	r2, [pc, #368]	@ (80029dc <HAL_DMA_Init+0x1d4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d027      	beq.n	80028c0 <HAL_DMA_Init+0xb8>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a5a      	ldr	r2, [pc, #360]	@ (80029e0 <HAL_DMA_Init+0x1d8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d022      	beq.n	80028c0 <HAL_DMA_Init+0xb8>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a59      	ldr	r2, [pc, #356]	@ (80029e4 <HAL_DMA_Init+0x1dc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d01d      	beq.n	80028c0 <HAL_DMA_Init+0xb8>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a57      	ldr	r2, [pc, #348]	@ (80029e8 <HAL_DMA_Init+0x1e0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d018      	beq.n	80028c0 <HAL_DMA_Init+0xb8>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a56      	ldr	r2, [pc, #344]	@ (80029ec <HAL_DMA_Init+0x1e4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d013      	beq.n	80028c0 <HAL_DMA_Init+0xb8>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a54      	ldr	r2, [pc, #336]	@ (80029f0 <HAL_DMA_Init+0x1e8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00e      	beq.n	80028c0 <HAL_DMA_Init+0xb8>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a53      	ldr	r2, [pc, #332]	@ (80029f4 <HAL_DMA_Init+0x1ec>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d009      	beq.n	80028c0 <HAL_DMA_Init+0xb8>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a51      	ldr	r2, [pc, #324]	@ (80029f8 <HAL_DMA_Init+0x1f0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d004      	beq.n	80028c0 <HAL_DMA_Init+0xb8>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a50      	ldr	r2, [pc, #320]	@ (80029fc <HAL_DMA_Init+0x1f4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d101      	bne.n	80028c4 <HAL_DMA_Init+0xbc>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_DMA_Init+0xbe>
 80028c4:	2300      	movs	r3, #0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 813b 	beq.w	8002b42 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a37      	ldr	r2, [pc, #220]	@ (80029c0 <HAL_DMA_Init+0x1b8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d04a      	beq.n	800297c <HAL_DMA_Init+0x174>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a36      	ldr	r2, [pc, #216]	@ (80029c4 <HAL_DMA_Init+0x1bc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d045      	beq.n	800297c <HAL_DMA_Init+0x174>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a34      	ldr	r2, [pc, #208]	@ (80029c8 <HAL_DMA_Init+0x1c0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d040      	beq.n	800297c <HAL_DMA_Init+0x174>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a33      	ldr	r2, [pc, #204]	@ (80029cc <HAL_DMA_Init+0x1c4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d03b      	beq.n	800297c <HAL_DMA_Init+0x174>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a31      	ldr	r2, [pc, #196]	@ (80029d0 <HAL_DMA_Init+0x1c8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d036      	beq.n	800297c <HAL_DMA_Init+0x174>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a30      	ldr	r2, [pc, #192]	@ (80029d4 <HAL_DMA_Init+0x1cc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d031      	beq.n	800297c <HAL_DMA_Init+0x174>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a2e      	ldr	r2, [pc, #184]	@ (80029d8 <HAL_DMA_Init+0x1d0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d02c      	beq.n	800297c <HAL_DMA_Init+0x174>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a2d      	ldr	r2, [pc, #180]	@ (80029dc <HAL_DMA_Init+0x1d4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d027      	beq.n	800297c <HAL_DMA_Init+0x174>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a2b      	ldr	r2, [pc, #172]	@ (80029e0 <HAL_DMA_Init+0x1d8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d022      	beq.n	800297c <HAL_DMA_Init+0x174>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a2a      	ldr	r2, [pc, #168]	@ (80029e4 <HAL_DMA_Init+0x1dc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d01d      	beq.n	800297c <HAL_DMA_Init+0x174>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a28      	ldr	r2, [pc, #160]	@ (80029e8 <HAL_DMA_Init+0x1e0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d018      	beq.n	800297c <HAL_DMA_Init+0x174>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a27      	ldr	r2, [pc, #156]	@ (80029ec <HAL_DMA_Init+0x1e4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d013      	beq.n	800297c <HAL_DMA_Init+0x174>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a25      	ldr	r2, [pc, #148]	@ (80029f0 <HAL_DMA_Init+0x1e8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00e      	beq.n	800297c <HAL_DMA_Init+0x174>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a24      	ldr	r2, [pc, #144]	@ (80029f4 <HAL_DMA_Init+0x1ec>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_DMA_Init+0x174>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a22      	ldr	r2, [pc, #136]	@ (80029f8 <HAL_DMA_Init+0x1f0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_DMA_Init+0x174>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a21      	ldr	r2, [pc, #132]	@ (80029fc <HAL_DMA_Init+0x1f4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d108      	bne.n	800298e <HAL_DMA_Init+0x186>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	e007      	b.n	800299e <HAL_DMA_Init+0x196>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0201 	bic.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800299e:	e02f      	b.n	8002a00 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029a0:	f7ff fd3c 	bl	800241c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b05      	cmp	r3, #5
 80029ac:	d928      	bls.n	8002a00 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2220      	movs	r2, #32
 80029b2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2203      	movs	r2, #3
 80029b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e246      	b.n	8002e4e <HAL_DMA_Init+0x646>
 80029c0:	40020010 	.word	0x40020010
 80029c4:	40020028 	.word	0x40020028
 80029c8:	40020040 	.word	0x40020040
 80029cc:	40020058 	.word	0x40020058
 80029d0:	40020070 	.word	0x40020070
 80029d4:	40020088 	.word	0x40020088
 80029d8:	400200a0 	.word	0x400200a0
 80029dc:	400200b8 	.word	0x400200b8
 80029e0:	40020410 	.word	0x40020410
 80029e4:	40020428 	.word	0x40020428
 80029e8:	40020440 	.word	0x40020440
 80029ec:	40020458 	.word	0x40020458
 80029f0:	40020470 	.word	0x40020470
 80029f4:	40020488 	.word	0x40020488
 80029f8:	400204a0 	.word	0x400204a0
 80029fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1c8      	bne.n	80029a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4b83      	ldr	r3, [pc, #524]	@ (8002c28 <HAL_DMA_Init+0x420>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002a26:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a32:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d107      	bne.n	8002a64 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002a64:	4b71      	ldr	r3, [pc, #452]	@ (8002c2c <HAL_DMA_Init+0x424>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b71      	ldr	r3, [pc, #452]	@ (8002c30 <HAL_DMA_Init+0x428>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a70:	d328      	bcc.n	8002ac4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b28      	cmp	r3, #40	@ 0x28
 8002a78:	d903      	bls.n	8002a82 <HAL_DMA_Init+0x27a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a80:	d917      	bls.n	8002ab2 <HAL_DMA_Init+0x2aa>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a88:	d903      	bls.n	8002a92 <HAL_DMA_Init+0x28a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b42      	cmp	r3, #66	@ 0x42
 8002a90:	d90f      	bls.n	8002ab2 <HAL_DMA_Init+0x2aa>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b46      	cmp	r3, #70	@ 0x46
 8002a98:	d903      	bls.n	8002aa2 <HAL_DMA_Init+0x29a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b48      	cmp	r3, #72	@ 0x48
 8002aa0:	d907      	bls.n	8002ab2 <HAL_DMA_Init+0x2aa>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b4e      	cmp	r3, #78	@ 0x4e
 8002aa8:	d905      	bls.n	8002ab6 <HAL_DMA_Init+0x2ae>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b52      	cmp	r3, #82	@ 0x52
 8002ab0:	d801      	bhi.n	8002ab6 <HAL_DMA_Init+0x2ae>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_DMA_Init+0x2b0>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ac2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f023 0307 	bic.w	r3, r3, #7
 8002ada:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d117      	bne.n	8002b1e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00e      	beq.n	8002b1e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f002 f8d3 	bl	8004cac <DMA_CheckFifoParam>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2240      	movs	r2, #64	@ 0x40
 8002b10:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e197      	b.n	8002e4e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f002 f80e 	bl	8004b48 <DMA_CalcBaseAndBitshift>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	223f      	movs	r2, #63	@ 0x3f
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	e0cd      	b.n	8002cde <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a3b      	ldr	r2, [pc, #236]	@ (8002c34 <HAL_DMA_Init+0x42c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d022      	beq.n	8002b92 <HAL_DMA_Init+0x38a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a39      	ldr	r2, [pc, #228]	@ (8002c38 <HAL_DMA_Init+0x430>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d01d      	beq.n	8002b92 <HAL_DMA_Init+0x38a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a38      	ldr	r2, [pc, #224]	@ (8002c3c <HAL_DMA_Init+0x434>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d018      	beq.n	8002b92 <HAL_DMA_Init+0x38a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a36      	ldr	r2, [pc, #216]	@ (8002c40 <HAL_DMA_Init+0x438>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d013      	beq.n	8002b92 <HAL_DMA_Init+0x38a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a35      	ldr	r2, [pc, #212]	@ (8002c44 <HAL_DMA_Init+0x43c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00e      	beq.n	8002b92 <HAL_DMA_Init+0x38a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a33      	ldr	r2, [pc, #204]	@ (8002c48 <HAL_DMA_Init+0x440>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d009      	beq.n	8002b92 <HAL_DMA_Init+0x38a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a32      	ldr	r2, [pc, #200]	@ (8002c4c <HAL_DMA_Init+0x444>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d004      	beq.n	8002b92 <HAL_DMA_Init+0x38a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a30      	ldr	r2, [pc, #192]	@ (8002c50 <HAL_DMA_Init+0x448>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <HAL_DMA_Init+0x38e>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_DMA_Init+0x390>
 8002b96:	2300      	movs	r3, #0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 8097 	beq.w	8002ccc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a24      	ldr	r2, [pc, #144]	@ (8002c34 <HAL_DMA_Init+0x42c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d021      	beq.n	8002bec <HAL_DMA_Init+0x3e4>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a22      	ldr	r2, [pc, #136]	@ (8002c38 <HAL_DMA_Init+0x430>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d01c      	beq.n	8002bec <HAL_DMA_Init+0x3e4>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a21      	ldr	r2, [pc, #132]	@ (8002c3c <HAL_DMA_Init+0x434>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d017      	beq.n	8002bec <HAL_DMA_Init+0x3e4>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c40 <HAL_DMA_Init+0x438>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d012      	beq.n	8002bec <HAL_DMA_Init+0x3e4>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1e      	ldr	r2, [pc, #120]	@ (8002c44 <HAL_DMA_Init+0x43c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d00d      	beq.n	8002bec <HAL_DMA_Init+0x3e4>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c48 <HAL_DMA_Init+0x440>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d008      	beq.n	8002bec <HAL_DMA_Init+0x3e4>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1b      	ldr	r2, [pc, #108]	@ (8002c4c <HAL_DMA_Init+0x444>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d003      	beq.n	8002bec <HAL_DMA_Init+0x3e4>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a19      	ldr	r2, [pc, #100]	@ (8002c50 <HAL_DMA_Init+0x448>)
 8002bea:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4b13      	ldr	r3, [pc, #76]	@ (8002c54 <HAL_DMA_Init+0x44c>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b40      	cmp	r3, #64	@ 0x40
 8002c12:	d021      	beq.n	8002c58 <HAL_DMA_Init+0x450>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b80      	cmp	r3, #128	@ 0x80
 8002c1a:	d102      	bne.n	8002c22 <HAL_DMA_Init+0x41a>
 8002c1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c20:	e01b      	b.n	8002c5a <HAL_DMA_Init+0x452>
 8002c22:	2300      	movs	r3, #0
 8002c24:	e019      	b.n	8002c5a <HAL_DMA_Init+0x452>
 8002c26:	bf00      	nop
 8002c28:	fe10803f 	.word	0xfe10803f
 8002c2c:	5c001000 	.word	0x5c001000
 8002c30:	ffff0000 	.word	0xffff0000
 8002c34:	58025408 	.word	0x58025408
 8002c38:	5802541c 	.word	0x5802541c
 8002c3c:	58025430 	.word	0x58025430
 8002c40:	58025444 	.word	0x58025444
 8002c44:	58025458 	.word	0x58025458
 8002c48:	5802546c 	.word	0x5802546c
 8002c4c:	58025480 	.word	0x58025480
 8002c50:	58025494 	.word	0x58025494
 8002c54:	fffe000f 	.word	0xfffe000f
 8002c58:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68d2      	ldr	r2, [r2, #12]
 8002c5e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002c68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002c70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002c78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c88:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b6e      	ldr	r3, [pc, #440]	@ (8002e58 <HAL_DMA_Init+0x650>)
 8002ca0:	4413      	add	r3, r2
 8002ca2:	4a6e      	ldr	r2, [pc, #440]	@ (8002e5c <HAL_DMA_Init+0x654>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	009a      	lsls	r2, r3, #2
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f001 ff49 	bl	8004b48 <DMA_CalcBaseAndBitshift>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	e008      	b.n	8002cde <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2240      	movs	r2, #64	@ 0x40
 8002cd0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0b7      	b.n	8002e4e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a5f      	ldr	r2, [pc, #380]	@ (8002e60 <HAL_DMA_Init+0x658>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d072      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a5d      	ldr	r2, [pc, #372]	@ (8002e64 <HAL_DMA_Init+0x65c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d06d      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a5c      	ldr	r2, [pc, #368]	@ (8002e68 <HAL_DMA_Init+0x660>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d068      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a5a      	ldr	r2, [pc, #360]	@ (8002e6c <HAL_DMA_Init+0x664>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d063      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a59      	ldr	r2, [pc, #356]	@ (8002e70 <HAL_DMA_Init+0x668>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d05e      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a57      	ldr	r2, [pc, #348]	@ (8002e74 <HAL_DMA_Init+0x66c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d059      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a56      	ldr	r2, [pc, #344]	@ (8002e78 <HAL_DMA_Init+0x670>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d054      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a54      	ldr	r2, [pc, #336]	@ (8002e7c <HAL_DMA_Init+0x674>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d04f      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a53      	ldr	r2, [pc, #332]	@ (8002e80 <HAL_DMA_Init+0x678>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d04a      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a51      	ldr	r2, [pc, #324]	@ (8002e84 <HAL_DMA_Init+0x67c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d045      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a50      	ldr	r2, [pc, #320]	@ (8002e88 <HAL_DMA_Init+0x680>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d040      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a4e      	ldr	r2, [pc, #312]	@ (8002e8c <HAL_DMA_Init+0x684>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d03b      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a4d      	ldr	r2, [pc, #308]	@ (8002e90 <HAL_DMA_Init+0x688>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d036      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a4b      	ldr	r2, [pc, #300]	@ (8002e94 <HAL_DMA_Init+0x68c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d031      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a4a      	ldr	r2, [pc, #296]	@ (8002e98 <HAL_DMA_Init+0x690>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d02c      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a48      	ldr	r2, [pc, #288]	@ (8002e9c <HAL_DMA_Init+0x694>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d027      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a47      	ldr	r2, [pc, #284]	@ (8002ea0 <HAL_DMA_Init+0x698>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d022      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a45      	ldr	r2, [pc, #276]	@ (8002ea4 <HAL_DMA_Init+0x69c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d01d      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a44      	ldr	r2, [pc, #272]	@ (8002ea8 <HAL_DMA_Init+0x6a0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d018      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a42      	ldr	r2, [pc, #264]	@ (8002eac <HAL_DMA_Init+0x6a4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d013      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a41      	ldr	r2, [pc, #260]	@ (8002eb0 <HAL_DMA_Init+0x6a8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00e      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a3f      	ldr	r2, [pc, #252]	@ (8002eb4 <HAL_DMA_Init+0x6ac>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d009      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a3e      	ldr	r2, [pc, #248]	@ (8002eb8 <HAL_DMA_Init+0x6b0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d004      	beq.n	8002dce <HAL_DMA_Init+0x5c6>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a3c      	ldr	r2, [pc, #240]	@ (8002ebc <HAL_DMA_Init+0x6b4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <HAL_DMA_Init+0x5ca>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <HAL_DMA_Init+0x5cc>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d032      	beq.n	8002e3e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f001 ffe3 	bl	8004da4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b80      	cmp	r3, #128	@ 0x80
 8002de4:	d102      	bne.n	8002dec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002e00:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d010      	beq.n	8002e2c <HAL_DMA_Init+0x624>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d80c      	bhi.n	8002e2c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f002 f860 	bl	8004ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	e008      	b.n	8002e3e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	a7fdabf8 	.word	0xa7fdabf8
 8002e5c:	cccccccd 	.word	0xcccccccd
 8002e60:	40020010 	.word	0x40020010
 8002e64:	40020028 	.word	0x40020028
 8002e68:	40020040 	.word	0x40020040
 8002e6c:	40020058 	.word	0x40020058
 8002e70:	40020070 	.word	0x40020070
 8002e74:	40020088 	.word	0x40020088
 8002e78:	400200a0 	.word	0x400200a0
 8002e7c:	400200b8 	.word	0x400200b8
 8002e80:	40020410 	.word	0x40020410
 8002e84:	40020428 	.word	0x40020428
 8002e88:	40020440 	.word	0x40020440
 8002e8c:	40020458 	.word	0x40020458
 8002e90:	40020470 	.word	0x40020470
 8002e94:	40020488 	.word	0x40020488
 8002e98:	400204a0 	.word	0x400204a0
 8002e9c:	400204b8 	.word	0x400204b8
 8002ea0:	58025408 	.word	0x58025408
 8002ea4:	5802541c 	.word	0x5802541c
 8002ea8:	58025430 	.word	0x58025430
 8002eac:	58025444 	.word	0x58025444
 8002eb0:	58025458 	.word	0x58025458
 8002eb4:	5802546c 	.word	0x5802546c
 8002eb8:	58025480 	.word	0x58025480
 8002ebc:	58025494 	.word	0x58025494

08002ec0 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e1a8      	b.n	8003224 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a82      	ldr	r2, [pc, #520]	@ (80030e0 <HAL_DMA_DeInit+0x220>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d04a      	beq.n	8002f72 <HAL_DMA_DeInit+0xb2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a80      	ldr	r2, [pc, #512]	@ (80030e4 <HAL_DMA_DeInit+0x224>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d045      	beq.n	8002f72 <HAL_DMA_DeInit+0xb2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a7f      	ldr	r2, [pc, #508]	@ (80030e8 <HAL_DMA_DeInit+0x228>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d040      	beq.n	8002f72 <HAL_DMA_DeInit+0xb2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a7d      	ldr	r2, [pc, #500]	@ (80030ec <HAL_DMA_DeInit+0x22c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d03b      	beq.n	8002f72 <HAL_DMA_DeInit+0xb2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a7c      	ldr	r2, [pc, #496]	@ (80030f0 <HAL_DMA_DeInit+0x230>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d036      	beq.n	8002f72 <HAL_DMA_DeInit+0xb2>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a7a      	ldr	r2, [pc, #488]	@ (80030f4 <HAL_DMA_DeInit+0x234>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d031      	beq.n	8002f72 <HAL_DMA_DeInit+0xb2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a79      	ldr	r2, [pc, #484]	@ (80030f8 <HAL_DMA_DeInit+0x238>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d02c      	beq.n	8002f72 <HAL_DMA_DeInit+0xb2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a77      	ldr	r2, [pc, #476]	@ (80030fc <HAL_DMA_DeInit+0x23c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d027      	beq.n	8002f72 <HAL_DMA_DeInit+0xb2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a76      	ldr	r2, [pc, #472]	@ (8003100 <HAL_DMA_DeInit+0x240>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d022      	beq.n	8002f72 <HAL_DMA_DeInit+0xb2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a74      	ldr	r2, [pc, #464]	@ (8003104 <HAL_DMA_DeInit+0x244>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01d      	beq.n	8002f72 <HAL_DMA_DeInit+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a73      	ldr	r2, [pc, #460]	@ (8003108 <HAL_DMA_DeInit+0x248>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d018      	beq.n	8002f72 <HAL_DMA_DeInit+0xb2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a71      	ldr	r2, [pc, #452]	@ (800310c <HAL_DMA_DeInit+0x24c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_DMA_DeInit+0xb2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a70      	ldr	r2, [pc, #448]	@ (8003110 <HAL_DMA_DeInit+0x250>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00e      	beq.n	8002f72 <HAL_DMA_DeInit+0xb2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a6e      	ldr	r2, [pc, #440]	@ (8003114 <HAL_DMA_DeInit+0x254>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <HAL_DMA_DeInit+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a6d      	ldr	r2, [pc, #436]	@ (8003118 <HAL_DMA_DeInit+0x258>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <HAL_DMA_DeInit+0xb2>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800311c <HAL_DMA_DeInit+0x25c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d108      	bne.n	8002f84 <HAL_DMA_DeInit+0xc4>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e007      	b.n	8002f94 <HAL_DMA_DeInit+0xd4>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a51      	ldr	r2, [pc, #324]	@ (80030e0 <HAL_DMA_DeInit+0x220>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d04a      	beq.n	8003034 <HAL_DMA_DeInit+0x174>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a50      	ldr	r2, [pc, #320]	@ (80030e4 <HAL_DMA_DeInit+0x224>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d045      	beq.n	8003034 <HAL_DMA_DeInit+0x174>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a4e      	ldr	r2, [pc, #312]	@ (80030e8 <HAL_DMA_DeInit+0x228>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d040      	beq.n	8003034 <HAL_DMA_DeInit+0x174>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a4d      	ldr	r2, [pc, #308]	@ (80030ec <HAL_DMA_DeInit+0x22c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d03b      	beq.n	8003034 <HAL_DMA_DeInit+0x174>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a4b      	ldr	r2, [pc, #300]	@ (80030f0 <HAL_DMA_DeInit+0x230>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d036      	beq.n	8003034 <HAL_DMA_DeInit+0x174>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a4a      	ldr	r2, [pc, #296]	@ (80030f4 <HAL_DMA_DeInit+0x234>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d031      	beq.n	8003034 <HAL_DMA_DeInit+0x174>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a48      	ldr	r2, [pc, #288]	@ (80030f8 <HAL_DMA_DeInit+0x238>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d02c      	beq.n	8003034 <HAL_DMA_DeInit+0x174>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a47      	ldr	r2, [pc, #284]	@ (80030fc <HAL_DMA_DeInit+0x23c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d027      	beq.n	8003034 <HAL_DMA_DeInit+0x174>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a45      	ldr	r2, [pc, #276]	@ (8003100 <HAL_DMA_DeInit+0x240>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d022      	beq.n	8003034 <HAL_DMA_DeInit+0x174>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a44      	ldr	r2, [pc, #272]	@ (8003104 <HAL_DMA_DeInit+0x244>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d01d      	beq.n	8003034 <HAL_DMA_DeInit+0x174>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a42      	ldr	r2, [pc, #264]	@ (8003108 <HAL_DMA_DeInit+0x248>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d018      	beq.n	8003034 <HAL_DMA_DeInit+0x174>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a41      	ldr	r2, [pc, #260]	@ (800310c <HAL_DMA_DeInit+0x24c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d013      	beq.n	8003034 <HAL_DMA_DeInit+0x174>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a3f      	ldr	r2, [pc, #252]	@ (8003110 <HAL_DMA_DeInit+0x250>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00e      	beq.n	8003034 <HAL_DMA_DeInit+0x174>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a3e      	ldr	r2, [pc, #248]	@ (8003114 <HAL_DMA_DeInit+0x254>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d009      	beq.n	8003034 <HAL_DMA_DeInit+0x174>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a3c      	ldr	r2, [pc, #240]	@ (8003118 <HAL_DMA_DeInit+0x258>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d004      	beq.n	8003034 <HAL_DMA_DeInit+0x174>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a3b      	ldr	r2, [pc, #236]	@ (800311c <HAL_DMA_DeInit+0x25c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d101      	bne.n	8003038 <HAL_DMA_DeInit+0x178>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <HAL_DMA_DeInit+0x17a>
 8003038:	2300      	movs	r3, #0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d025      	beq.n	800308a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2200      	movs	r2, #0
 800304c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2200      	movs	r2, #0
 800305c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2200      	movs	r2, #0
 8003064:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2221      	movs	r2, #33	@ 0x21
 800306c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f001 fd6a 	bl	8004b48 <DMA_CalcBaseAndBitshift>
 8003074:	4603      	mov	r3, r0
 8003076:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	223f      	movs	r2, #63	@ 0x3f
 8003082:	409a      	lsls	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	e081      	b.n	800318e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a24      	ldr	r2, [pc, #144]	@ (8003120 <HAL_DMA_DeInit+0x260>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d022      	beq.n	80030da <HAL_DMA_DeInit+0x21a>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a22      	ldr	r2, [pc, #136]	@ (8003124 <HAL_DMA_DeInit+0x264>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01d      	beq.n	80030da <HAL_DMA_DeInit+0x21a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a21      	ldr	r2, [pc, #132]	@ (8003128 <HAL_DMA_DeInit+0x268>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d018      	beq.n	80030da <HAL_DMA_DeInit+0x21a>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1f      	ldr	r2, [pc, #124]	@ (800312c <HAL_DMA_DeInit+0x26c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_DMA_DeInit+0x21a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003130 <HAL_DMA_DeInit+0x270>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00e      	beq.n	80030da <HAL_DMA_DeInit+0x21a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003134 <HAL_DMA_DeInit+0x274>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d009      	beq.n	80030da <HAL_DMA_DeInit+0x21a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003138 <HAL_DMA_DeInit+0x278>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d004      	beq.n	80030da <HAL_DMA_DeInit+0x21a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a19      	ldr	r2, [pc, #100]	@ (800313c <HAL_DMA_DeInit+0x27c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d132      	bne.n	8003140 <HAL_DMA_DeInit+0x280>
 80030da:	2301      	movs	r3, #1
 80030dc:	e031      	b.n	8003142 <HAL_DMA_DeInit+0x282>
 80030de:	bf00      	nop
 80030e0:	40020010 	.word	0x40020010
 80030e4:	40020028 	.word	0x40020028
 80030e8:	40020040 	.word	0x40020040
 80030ec:	40020058 	.word	0x40020058
 80030f0:	40020070 	.word	0x40020070
 80030f4:	40020088 	.word	0x40020088
 80030f8:	400200a0 	.word	0x400200a0
 80030fc:	400200b8 	.word	0x400200b8
 8003100:	40020410 	.word	0x40020410
 8003104:	40020428 	.word	0x40020428
 8003108:	40020440 	.word	0x40020440
 800310c:	40020458 	.word	0x40020458
 8003110:	40020470 	.word	0x40020470
 8003114:	40020488 	.word	0x40020488
 8003118:	400204a0 	.word	0x400204a0
 800311c:	400204b8 	.word	0x400204b8
 8003120:	58025408 	.word	0x58025408
 8003124:	5802541c 	.word	0x5802541c
 8003128:	58025430 	.word	0x58025430
 800312c:	58025444 	.word	0x58025444
 8003130:	58025458 	.word	0x58025458
 8003134:	5802546c 	.word	0x5802546c
 8003138:	58025480 	.word	0x58025480
 800313c:	58025494 	.word	0x58025494
 8003140:	2300      	movs	r3, #0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d021      	beq.n	800318a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2200      	movs	r2, #0
 8003154:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2200      	movs	r2, #0
 8003164:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2200      	movs	r2, #0
 800316c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f001 fcea 	bl	8004b48 <DMA_CalcBaseAndBitshift>
 8003174:	4603      	mov	r3, r0
 8003176:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	2201      	movs	r2, #1
 8003182:	409a      	lsls	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	605a      	str	r2, [r3, #4]
 8003188:	e001      	b.n	800318e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e04a      	b.n	8003224 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f001 fe08 	bl	8004da4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031ac:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00f      	beq.n	80031d6 <HAL_DMA_DeInit+0x316>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d80b      	bhi.n	80031d6 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f001 fe8a 	bl	8004ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031d4:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003234:	f7ff f8f2 	bl	800241c <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e2dc      	b.n	80037fe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d008      	beq.n	8003262 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2280      	movs	r2, #128	@ 0x80
 8003254:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e2cd      	b.n	80037fe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a76      	ldr	r2, [pc, #472]	@ (8003440 <HAL_DMA_Abort+0x214>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d04a      	beq.n	8003302 <HAL_DMA_Abort+0xd6>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a74      	ldr	r2, [pc, #464]	@ (8003444 <HAL_DMA_Abort+0x218>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d045      	beq.n	8003302 <HAL_DMA_Abort+0xd6>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a73      	ldr	r2, [pc, #460]	@ (8003448 <HAL_DMA_Abort+0x21c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d040      	beq.n	8003302 <HAL_DMA_Abort+0xd6>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a71      	ldr	r2, [pc, #452]	@ (800344c <HAL_DMA_Abort+0x220>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d03b      	beq.n	8003302 <HAL_DMA_Abort+0xd6>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a70      	ldr	r2, [pc, #448]	@ (8003450 <HAL_DMA_Abort+0x224>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d036      	beq.n	8003302 <HAL_DMA_Abort+0xd6>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a6e      	ldr	r2, [pc, #440]	@ (8003454 <HAL_DMA_Abort+0x228>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d031      	beq.n	8003302 <HAL_DMA_Abort+0xd6>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a6d      	ldr	r2, [pc, #436]	@ (8003458 <HAL_DMA_Abort+0x22c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d02c      	beq.n	8003302 <HAL_DMA_Abort+0xd6>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a6b      	ldr	r2, [pc, #428]	@ (800345c <HAL_DMA_Abort+0x230>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d027      	beq.n	8003302 <HAL_DMA_Abort+0xd6>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a6a      	ldr	r2, [pc, #424]	@ (8003460 <HAL_DMA_Abort+0x234>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d022      	beq.n	8003302 <HAL_DMA_Abort+0xd6>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a68      	ldr	r2, [pc, #416]	@ (8003464 <HAL_DMA_Abort+0x238>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01d      	beq.n	8003302 <HAL_DMA_Abort+0xd6>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a67      	ldr	r2, [pc, #412]	@ (8003468 <HAL_DMA_Abort+0x23c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d018      	beq.n	8003302 <HAL_DMA_Abort+0xd6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a65      	ldr	r2, [pc, #404]	@ (800346c <HAL_DMA_Abort+0x240>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <HAL_DMA_Abort+0xd6>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a64      	ldr	r2, [pc, #400]	@ (8003470 <HAL_DMA_Abort+0x244>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00e      	beq.n	8003302 <HAL_DMA_Abort+0xd6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a62      	ldr	r2, [pc, #392]	@ (8003474 <HAL_DMA_Abort+0x248>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d009      	beq.n	8003302 <HAL_DMA_Abort+0xd6>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a61      	ldr	r2, [pc, #388]	@ (8003478 <HAL_DMA_Abort+0x24c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d004      	beq.n	8003302 <HAL_DMA_Abort+0xd6>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a5f      	ldr	r2, [pc, #380]	@ (800347c <HAL_DMA_Abort+0x250>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d101      	bne.n	8003306 <HAL_DMA_Abort+0xda>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <HAL_DMA_Abort+0xdc>
 8003306:	2300      	movs	r3, #0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 021e 	bic.w	r2, r2, #30
 800331a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800332a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e00a      	b.n	800334a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 020e 	bic.w	r2, r2, #14
 8003342:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a3c      	ldr	r2, [pc, #240]	@ (8003440 <HAL_DMA_Abort+0x214>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d072      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a3a      	ldr	r2, [pc, #232]	@ (8003444 <HAL_DMA_Abort+0x218>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d06d      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a39      	ldr	r2, [pc, #228]	@ (8003448 <HAL_DMA_Abort+0x21c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d068      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a37      	ldr	r2, [pc, #220]	@ (800344c <HAL_DMA_Abort+0x220>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d063      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a36      	ldr	r2, [pc, #216]	@ (8003450 <HAL_DMA_Abort+0x224>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d05e      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a34      	ldr	r2, [pc, #208]	@ (8003454 <HAL_DMA_Abort+0x228>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d059      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a33      	ldr	r2, [pc, #204]	@ (8003458 <HAL_DMA_Abort+0x22c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d054      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a31      	ldr	r2, [pc, #196]	@ (800345c <HAL_DMA_Abort+0x230>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d04f      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a30      	ldr	r2, [pc, #192]	@ (8003460 <HAL_DMA_Abort+0x234>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d04a      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003464 <HAL_DMA_Abort+0x238>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d045      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a2d      	ldr	r2, [pc, #180]	@ (8003468 <HAL_DMA_Abort+0x23c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d040      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a2b      	ldr	r2, [pc, #172]	@ (800346c <HAL_DMA_Abort+0x240>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d03b      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003470 <HAL_DMA_Abort+0x244>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d036      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a28      	ldr	r2, [pc, #160]	@ (8003474 <HAL_DMA_Abort+0x248>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d031      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a27      	ldr	r2, [pc, #156]	@ (8003478 <HAL_DMA_Abort+0x24c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d02c      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a25      	ldr	r2, [pc, #148]	@ (800347c <HAL_DMA_Abort+0x250>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d027      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a24      	ldr	r2, [pc, #144]	@ (8003480 <HAL_DMA_Abort+0x254>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d022      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a22      	ldr	r2, [pc, #136]	@ (8003484 <HAL_DMA_Abort+0x258>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d01d      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a21      	ldr	r2, [pc, #132]	@ (8003488 <HAL_DMA_Abort+0x25c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d018      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1f      	ldr	r2, [pc, #124]	@ (800348c <HAL_DMA_Abort+0x260>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d013      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1e      	ldr	r2, [pc, #120]	@ (8003490 <HAL_DMA_Abort+0x264>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00e      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1c      	ldr	r2, [pc, #112]	@ (8003494 <HAL_DMA_Abort+0x268>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d009      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1b      	ldr	r2, [pc, #108]	@ (8003498 <HAL_DMA_Abort+0x26c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d004      	beq.n	800343a <HAL_DMA_Abort+0x20e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a19      	ldr	r2, [pc, #100]	@ (800349c <HAL_DMA_Abort+0x270>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d132      	bne.n	80034a0 <HAL_DMA_Abort+0x274>
 800343a:	2301      	movs	r3, #1
 800343c:	e031      	b.n	80034a2 <HAL_DMA_Abort+0x276>
 800343e:	bf00      	nop
 8003440:	40020010 	.word	0x40020010
 8003444:	40020028 	.word	0x40020028
 8003448:	40020040 	.word	0x40020040
 800344c:	40020058 	.word	0x40020058
 8003450:	40020070 	.word	0x40020070
 8003454:	40020088 	.word	0x40020088
 8003458:	400200a0 	.word	0x400200a0
 800345c:	400200b8 	.word	0x400200b8
 8003460:	40020410 	.word	0x40020410
 8003464:	40020428 	.word	0x40020428
 8003468:	40020440 	.word	0x40020440
 800346c:	40020458 	.word	0x40020458
 8003470:	40020470 	.word	0x40020470
 8003474:	40020488 	.word	0x40020488
 8003478:	400204a0 	.word	0x400204a0
 800347c:	400204b8 	.word	0x400204b8
 8003480:	58025408 	.word	0x58025408
 8003484:	5802541c 	.word	0x5802541c
 8003488:	58025430 	.word	0x58025430
 800348c:	58025444 	.word	0x58025444
 8003490:	58025458 	.word	0x58025458
 8003494:	5802546c 	.word	0x5802546c
 8003498:	58025480 	.word	0x58025480
 800349c:	58025494 	.word	0x58025494
 80034a0:	2300      	movs	r3, #0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a6d      	ldr	r2, [pc, #436]	@ (8003670 <HAL_DMA_Abort+0x444>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d04a      	beq.n	8003556 <HAL_DMA_Abort+0x32a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a6b      	ldr	r2, [pc, #428]	@ (8003674 <HAL_DMA_Abort+0x448>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d045      	beq.n	8003556 <HAL_DMA_Abort+0x32a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a6a      	ldr	r2, [pc, #424]	@ (8003678 <HAL_DMA_Abort+0x44c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d040      	beq.n	8003556 <HAL_DMA_Abort+0x32a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a68      	ldr	r2, [pc, #416]	@ (800367c <HAL_DMA_Abort+0x450>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d03b      	beq.n	8003556 <HAL_DMA_Abort+0x32a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a67      	ldr	r2, [pc, #412]	@ (8003680 <HAL_DMA_Abort+0x454>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d036      	beq.n	8003556 <HAL_DMA_Abort+0x32a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a65      	ldr	r2, [pc, #404]	@ (8003684 <HAL_DMA_Abort+0x458>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d031      	beq.n	8003556 <HAL_DMA_Abort+0x32a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a64      	ldr	r2, [pc, #400]	@ (8003688 <HAL_DMA_Abort+0x45c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d02c      	beq.n	8003556 <HAL_DMA_Abort+0x32a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a62      	ldr	r2, [pc, #392]	@ (800368c <HAL_DMA_Abort+0x460>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d027      	beq.n	8003556 <HAL_DMA_Abort+0x32a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a61      	ldr	r2, [pc, #388]	@ (8003690 <HAL_DMA_Abort+0x464>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d022      	beq.n	8003556 <HAL_DMA_Abort+0x32a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a5f      	ldr	r2, [pc, #380]	@ (8003694 <HAL_DMA_Abort+0x468>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d01d      	beq.n	8003556 <HAL_DMA_Abort+0x32a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a5e      	ldr	r2, [pc, #376]	@ (8003698 <HAL_DMA_Abort+0x46c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d018      	beq.n	8003556 <HAL_DMA_Abort+0x32a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a5c      	ldr	r2, [pc, #368]	@ (800369c <HAL_DMA_Abort+0x470>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_DMA_Abort+0x32a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a5b      	ldr	r2, [pc, #364]	@ (80036a0 <HAL_DMA_Abort+0x474>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00e      	beq.n	8003556 <HAL_DMA_Abort+0x32a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a59      	ldr	r2, [pc, #356]	@ (80036a4 <HAL_DMA_Abort+0x478>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d009      	beq.n	8003556 <HAL_DMA_Abort+0x32a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a58      	ldr	r2, [pc, #352]	@ (80036a8 <HAL_DMA_Abort+0x47c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d004      	beq.n	8003556 <HAL_DMA_Abort+0x32a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a56      	ldr	r2, [pc, #344]	@ (80036ac <HAL_DMA_Abort+0x480>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d108      	bne.n	8003568 <HAL_DMA_Abort+0x33c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e007      	b.n	8003578 <HAL_DMA_Abort+0x34c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003578:	e013      	b.n	80035a2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800357a:	f7fe ff4f 	bl	800241c <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b05      	cmp	r3, #5
 8003586:	d90c      	bls.n	80035a2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2203      	movs	r2, #3
 8003592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e12d      	b.n	80037fe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1e5      	bne.n	800357a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2f      	ldr	r2, [pc, #188]	@ (8003670 <HAL_DMA_Abort+0x444>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d04a      	beq.n	800364e <HAL_DMA_Abort+0x422>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003674 <HAL_DMA_Abort+0x448>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d045      	beq.n	800364e <HAL_DMA_Abort+0x422>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003678 <HAL_DMA_Abort+0x44c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d040      	beq.n	800364e <HAL_DMA_Abort+0x422>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a2a      	ldr	r2, [pc, #168]	@ (800367c <HAL_DMA_Abort+0x450>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d03b      	beq.n	800364e <HAL_DMA_Abort+0x422>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a29      	ldr	r2, [pc, #164]	@ (8003680 <HAL_DMA_Abort+0x454>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d036      	beq.n	800364e <HAL_DMA_Abort+0x422>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a27      	ldr	r2, [pc, #156]	@ (8003684 <HAL_DMA_Abort+0x458>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d031      	beq.n	800364e <HAL_DMA_Abort+0x422>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a26      	ldr	r2, [pc, #152]	@ (8003688 <HAL_DMA_Abort+0x45c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d02c      	beq.n	800364e <HAL_DMA_Abort+0x422>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a24      	ldr	r2, [pc, #144]	@ (800368c <HAL_DMA_Abort+0x460>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d027      	beq.n	800364e <HAL_DMA_Abort+0x422>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a23      	ldr	r2, [pc, #140]	@ (8003690 <HAL_DMA_Abort+0x464>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d022      	beq.n	800364e <HAL_DMA_Abort+0x422>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a21      	ldr	r2, [pc, #132]	@ (8003694 <HAL_DMA_Abort+0x468>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d01d      	beq.n	800364e <HAL_DMA_Abort+0x422>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a20      	ldr	r2, [pc, #128]	@ (8003698 <HAL_DMA_Abort+0x46c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d018      	beq.n	800364e <HAL_DMA_Abort+0x422>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1e      	ldr	r2, [pc, #120]	@ (800369c <HAL_DMA_Abort+0x470>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_DMA_Abort+0x422>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1d      	ldr	r2, [pc, #116]	@ (80036a0 <HAL_DMA_Abort+0x474>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00e      	beq.n	800364e <HAL_DMA_Abort+0x422>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1b      	ldr	r2, [pc, #108]	@ (80036a4 <HAL_DMA_Abort+0x478>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_DMA_Abort+0x422>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1a      	ldr	r2, [pc, #104]	@ (80036a8 <HAL_DMA_Abort+0x47c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_DMA_Abort+0x422>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a18      	ldr	r2, [pc, #96]	@ (80036ac <HAL_DMA_Abort+0x480>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <HAL_DMA_Abort+0x426>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <HAL_DMA_Abort+0x428>
 8003652:	2300      	movs	r3, #0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d02b      	beq.n	80036b0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	223f      	movs	r2, #63	@ 0x3f
 8003668:	409a      	lsls	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	609a      	str	r2, [r3, #8]
 800366e:	e02a      	b.n	80036c6 <HAL_DMA_Abort+0x49a>
 8003670:	40020010 	.word	0x40020010
 8003674:	40020028 	.word	0x40020028
 8003678:	40020040 	.word	0x40020040
 800367c:	40020058 	.word	0x40020058
 8003680:	40020070 	.word	0x40020070
 8003684:	40020088 	.word	0x40020088
 8003688:	400200a0 	.word	0x400200a0
 800368c:	400200b8 	.word	0x400200b8
 8003690:	40020410 	.word	0x40020410
 8003694:	40020428 	.word	0x40020428
 8003698:	40020440 	.word	0x40020440
 800369c:	40020458 	.word	0x40020458
 80036a0:	40020470 	.word	0x40020470
 80036a4:	40020488 	.word	0x40020488
 80036a8:	400204a0 	.word	0x400204a0
 80036ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	2201      	movs	r2, #1
 80036c0:	409a      	lsls	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a4f      	ldr	r2, [pc, #316]	@ (8003808 <HAL_DMA_Abort+0x5dc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d072      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a4d      	ldr	r2, [pc, #308]	@ (800380c <HAL_DMA_Abort+0x5e0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d06d      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a4c      	ldr	r2, [pc, #304]	@ (8003810 <HAL_DMA_Abort+0x5e4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d068      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003814 <HAL_DMA_Abort+0x5e8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d063      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a49      	ldr	r2, [pc, #292]	@ (8003818 <HAL_DMA_Abort+0x5ec>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d05e      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a47      	ldr	r2, [pc, #284]	@ (800381c <HAL_DMA_Abort+0x5f0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d059      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a46      	ldr	r2, [pc, #280]	@ (8003820 <HAL_DMA_Abort+0x5f4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d054      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a44      	ldr	r2, [pc, #272]	@ (8003824 <HAL_DMA_Abort+0x5f8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d04f      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a43      	ldr	r2, [pc, #268]	@ (8003828 <HAL_DMA_Abort+0x5fc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d04a      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a41      	ldr	r2, [pc, #260]	@ (800382c <HAL_DMA_Abort+0x600>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d045      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a40      	ldr	r2, [pc, #256]	@ (8003830 <HAL_DMA_Abort+0x604>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d040      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a3e      	ldr	r2, [pc, #248]	@ (8003834 <HAL_DMA_Abort+0x608>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d03b      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a3d      	ldr	r2, [pc, #244]	@ (8003838 <HAL_DMA_Abort+0x60c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d036      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a3b      	ldr	r2, [pc, #236]	@ (800383c <HAL_DMA_Abort+0x610>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d031      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a3a      	ldr	r2, [pc, #232]	@ (8003840 <HAL_DMA_Abort+0x614>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d02c      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a38      	ldr	r2, [pc, #224]	@ (8003844 <HAL_DMA_Abort+0x618>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d027      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a37      	ldr	r2, [pc, #220]	@ (8003848 <HAL_DMA_Abort+0x61c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d022      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a35      	ldr	r2, [pc, #212]	@ (800384c <HAL_DMA_Abort+0x620>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01d      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a34      	ldr	r2, [pc, #208]	@ (8003850 <HAL_DMA_Abort+0x624>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d018      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a32      	ldr	r2, [pc, #200]	@ (8003854 <HAL_DMA_Abort+0x628>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a31      	ldr	r2, [pc, #196]	@ (8003858 <HAL_DMA_Abort+0x62c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00e      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a2f      	ldr	r2, [pc, #188]	@ (800385c <HAL_DMA_Abort+0x630>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d009      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003860 <HAL_DMA_Abort+0x634>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d004      	beq.n	80037b6 <HAL_DMA_Abort+0x58a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003864 <HAL_DMA_Abort+0x638>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d101      	bne.n	80037ba <HAL_DMA_Abort+0x58e>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_DMA_Abort+0x590>
 80037ba:	2300      	movs	r3, #0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d015      	beq.n	80037ec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80037c8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00c      	beq.n	80037ec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037e0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80037ea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40020010 	.word	0x40020010
 800380c:	40020028 	.word	0x40020028
 8003810:	40020040 	.word	0x40020040
 8003814:	40020058 	.word	0x40020058
 8003818:	40020070 	.word	0x40020070
 800381c:	40020088 	.word	0x40020088
 8003820:	400200a0 	.word	0x400200a0
 8003824:	400200b8 	.word	0x400200b8
 8003828:	40020410 	.word	0x40020410
 800382c:	40020428 	.word	0x40020428
 8003830:	40020440 	.word	0x40020440
 8003834:	40020458 	.word	0x40020458
 8003838:	40020470 	.word	0x40020470
 800383c:	40020488 	.word	0x40020488
 8003840:	400204a0 	.word	0x400204a0
 8003844:	400204b8 	.word	0x400204b8
 8003848:	58025408 	.word	0x58025408
 800384c:	5802541c 	.word	0x5802541c
 8003850:	58025430 	.word	0x58025430
 8003854:	58025444 	.word	0x58025444
 8003858:	58025458 	.word	0x58025458
 800385c:	5802546c 	.word	0x5802546c
 8003860:	58025480 	.word	0x58025480
 8003864:	58025494 	.word	0x58025494

08003868 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e237      	b.n	8003cea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d004      	beq.n	8003890 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2280      	movs	r2, #128	@ 0x80
 800388a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e22c      	b.n	8003cea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a5c      	ldr	r2, [pc, #368]	@ (8003a08 <HAL_DMA_Abort_IT+0x1a0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d04a      	beq.n	8003930 <HAL_DMA_Abort_IT+0xc8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a5b      	ldr	r2, [pc, #364]	@ (8003a0c <HAL_DMA_Abort_IT+0x1a4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d045      	beq.n	8003930 <HAL_DMA_Abort_IT+0xc8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a59      	ldr	r2, [pc, #356]	@ (8003a10 <HAL_DMA_Abort_IT+0x1a8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d040      	beq.n	8003930 <HAL_DMA_Abort_IT+0xc8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a58      	ldr	r2, [pc, #352]	@ (8003a14 <HAL_DMA_Abort_IT+0x1ac>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d03b      	beq.n	8003930 <HAL_DMA_Abort_IT+0xc8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a56      	ldr	r2, [pc, #344]	@ (8003a18 <HAL_DMA_Abort_IT+0x1b0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d036      	beq.n	8003930 <HAL_DMA_Abort_IT+0xc8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a55      	ldr	r2, [pc, #340]	@ (8003a1c <HAL_DMA_Abort_IT+0x1b4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d031      	beq.n	8003930 <HAL_DMA_Abort_IT+0xc8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a53      	ldr	r2, [pc, #332]	@ (8003a20 <HAL_DMA_Abort_IT+0x1b8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d02c      	beq.n	8003930 <HAL_DMA_Abort_IT+0xc8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a52      	ldr	r2, [pc, #328]	@ (8003a24 <HAL_DMA_Abort_IT+0x1bc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d027      	beq.n	8003930 <HAL_DMA_Abort_IT+0xc8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a50      	ldr	r2, [pc, #320]	@ (8003a28 <HAL_DMA_Abort_IT+0x1c0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d022      	beq.n	8003930 <HAL_DMA_Abort_IT+0xc8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a4f      	ldr	r2, [pc, #316]	@ (8003a2c <HAL_DMA_Abort_IT+0x1c4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d01d      	beq.n	8003930 <HAL_DMA_Abort_IT+0xc8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003a30 <HAL_DMA_Abort_IT+0x1c8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d018      	beq.n	8003930 <HAL_DMA_Abort_IT+0xc8>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a4c      	ldr	r2, [pc, #304]	@ (8003a34 <HAL_DMA_Abort_IT+0x1cc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d013      	beq.n	8003930 <HAL_DMA_Abort_IT+0xc8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a4a      	ldr	r2, [pc, #296]	@ (8003a38 <HAL_DMA_Abort_IT+0x1d0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00e      	beq.n	8003930 <HAL_DMA_Abort_IT+0xc8>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a49      	ldr	r2, [pc, #292]	@ (8003a3c <HAL_DMA_Abort_IT+0x1d4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d009      	beq.n	8003930 <HAL_DMA_Abort_IT+0xc8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a47      	ldr	r2, [pc, #284]	@ (8003a40 <HAL_DMA_Abort_IT+0x1d8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <HAL_DMA_Abort_IT+0xc8>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a46      	ldr	r2, [pc, #280]	@ (8003a44 <HAL_DMA_Abort_IT+0x1dc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d101      	bne.n	8003934 <HAL_DMA_Abort_IT+0xcc>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <HAL_DMA_Abort_IT+0xce>
 8003934:	2300      	movs	r3, #0
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8086 	beq.w	8003a48 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2204      	movs	r2, #4
 8003940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a2f      	ldr	r2, [pc, #188]	@ (8003a08 <HAL_DMA_Abort_IT+0x1a0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d04a      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x17c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a2e      	ldr	r2, [pc, #184]	@ (8003a0c <HAL_DMA_Abort_IT+0x1a4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d045      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x17c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a2c      	ldr	r2, [pc, #176]	@ (8003a10 <HAL_DMA_Abort_IT+0x1a8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d040      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x17c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a2b      	ldr	r2, [pc, #172]	@ (8003a14 <HAL_DMA_Abort_IT+0x1ac>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d03b      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x17c>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a29      	ldr	r2, [pc, #164]	@ (8003a18 <HAL_DMA_Abort_IT+0x1b0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d036      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x17c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a28      	ldr	r2, [pc, #160]	@ (8003a1c <HAL_DMA_Abort_IT+0x1b4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d031      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x17c>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a26      	ldr	r2, [pc, #152]	@ (8003a20 <HAL_DMA_Abort_IT+0x1b8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d02c      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x17c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a25      	ldr	r2, [pc, #148]	@ (8003a24 <HAL_DMA_Abort_IT+0x1bc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d027      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x17c>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a23      	ldr	r2, [pc, #140]	@ (8003a28 <HAL_DMA_Abort_IT+0x1c0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d022      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x17c>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a22      	ldr	r2, [pc, #136]	@ (8003a2c <HAL_DMA_Abort_IT+0x1c4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d01d      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x17c>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a20      	ldr	r2, [pc, #128]	@ (8003a30 <HAL_DMA_Abort_IT+0x1c8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d018      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x17c>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a34 <HAL_DMA_Abort_IT+0x1cc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x17c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a38 <HAL_DMA_Abort_IT+0x1d0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00e      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x17c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1c      	ldr	r2, [pc, #112]	@ (8003a3c <HAL_DMA_Abort_IT+0x1d4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d009      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x17c>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a1a      	ldr	r2, [pc, #104]	@ (8003a40 <HAL_DMA_Abort_IT+0x1d8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x17c>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a19      	ldr	r2, [pc, #100]	@ (8003a44 <HAL_DMA_Abort_IT+0x1dc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d108      	bne.n	80039f6 <HAL_DMA_Abort_IT+0x18e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	e178      	b.n	8003ce8 <HAL_DMA_Abort_IT+0x480>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e16f      	b.n	8003ce8 <HAL_DMA_Abort_IT+0x480>
 8003a08:	40020010 	.word	0x40020010
 8003a0c:	40020028 	.word	0x40020028
 8003a10:	40020040 	.word	0x40020040
 8003a14:	40020058 	.word	0x40020058
 8003a18:	40020070 	.word	0x40020070
 8003a1c:	40020088 	.word	0x40020088
 8003a20:	400200a0 	.word	0x400200a0
 8003a24:	400200b8 	.word	0x400200b8
 8003a28:	40020410 	.word	0x40020410
 8003a2c:	40020428 	.word	0x40020428
 8003a30:	40020440 	.word	0x40020440
 8003a34:	40020458 	.word	0x40020458
 8003a38:	40020470 	.word	0x40020470
 8003a3c:	40020488 	.word	0x40020488
 8003a40:	400204a0 	.word	0x400204a0
 8003a44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 020e 	bic.w	r2, r2, #14
 8003a56:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a6c      	ldr	r2, [pc, #432]	@ (8003c10 <HAL_DMA_Abort_IT+0x3a8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d04a      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x290>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a6b      	ldr	r2, [pc, #428]	@ (8003c14 <HAL_DMA_Abort_IT+0x3ac>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d045      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x290>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a69      	ldr	r2, [pc, #420]	@ (8003c18 <HAL_DMA_Abort_IT+0x3b0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d040      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x290>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a68      	ldr	r2, [pc, #416]	@ (8003c1c <HAL_DMA_Abort_IT+0x3b4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d03b      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x290>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a66      	ldr	r2, [pc, #408]	@ (8003c20 <HAL_DMA_Abort_IT+0x3b8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d036      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x290>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a65      	ldr	r2, [pc, #404]	@ (8003c24 <HAL_DMA_Abort_IT+0x3bc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d031      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x290>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a63      	ldr	r2, [pc, #396]	@ (8003c28 <HAL_DMA_Abort_IT+0x3c0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d02c      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x290>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a62      	ldr	r2, [pc, #392]	@ (8003c2c <HAL_DMA_Abort_IT+0x3c4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d027      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x290>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a60      	ldr	r2, [pc, #384]	@ (8003c30 <HAL_DMA_Abort_IT+0x3c8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d022      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x290>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a5f      	ldr	r2, [pc, #380]	@ (8003c34 <HAL_DMA_Abort_IT+0x3cc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d01d      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x290>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a5d      	ldr	r2, [pc, #372]	@ (8003c38 <HAL_DMA_Abort_IT+0x3d0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d018      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x290>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a5c      	ldr	r2, [pc, #368]	@ (8003c3c <HAL_DMA_Abort_IT+0x3d4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d013      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x290>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a5a      	ldr	r2, [pc, #360]	@ (8003c40 <HAL_DMA_Abort_IT+0x3d8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x290>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a59      	ldr	r2, [pc, #356]	@ (8003c44 <HAL_DMA_Abort_IT+0x3dc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x290>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a57      	ldr	r2, [pc, #348]	@ (8003c48 <HAL_DMA_Abort_IT+0x3e0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x290>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a56      	ldr	r2, [pc, #344]	@ (8003c4c <HAL_DMA_Abort_IT+0x3e4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d108      	bne.n	8003b0a <HAL_DMA_Abort_IT+0x2a2>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0201 	bic.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	e007      	b.n	8003b1a <HAL_DMA_Abort_IT+0x2b2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a3c      	ldr	r2, [pc, #240]	@ (8003c10 <HAL_DMA_Abort_IT+0x3a8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d072      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a3a      	ldr	r2, [pc, #232]	@ (8003c14 <HAL_DMA_Abort_IT+0x3ac>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d06d      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a39      	ldr	r2, [pc, #228]	@ (8003c18 <HAL_DMA_Abort_IT+0x3b0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d068      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a37      	ldr	r2, [pc, #220]	@ (8003c1c <HAL_DMA_Abort_IT+0x3b4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d063      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a36      	ldr	r2, [pc, #216]	@ (8003c20 <HAL_DMA_Abort_IT+0x3b8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d05e      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a34      	ldr	r2, [pc, #208]	@ (8003c24 <HAL_DMA_Abort_IT+0x3bc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d059      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a33      	ldr	r2, [pc, #204]	@ (8003c28 <HAL_DMA_Abort_IT+0x3c0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d054      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a31      	ldr	r2, [pc, #196]	@ (8003c2c <HAL_DMA_Abort_IT+0x3c4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d04f      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a30      	ldr	r2, [pc, #192]	@ (8003c30 <HAL_DMA_Abort_IT+0x3c8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d04a      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a2e      	ldr	r2, [pc, #184]	@ (8003c34 <HAL_DMA_Abort_IT+0x3cc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d045      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a2d      	ldr	r2, [pc, #180]	@ (8003c38 <HAL_DMA_Abort_IT+0x3d0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d040      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8003c3c <HAL_DMA_Abort_IT+0x3d4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d03b      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a2a      	ldr	r2, [pc, #168]	@ (8003c40 <HAL_DMA_Abort_IT+0x3d8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d036      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a28      	ldr	r2, [pc, #160]	@ (8003c44 <HAL_DMA_Abort_IT+0x3dc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d031      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a27      	ldr	r2, [pc, #156]	@ (8003c48 <HAL_DMA_Abort_IT+0x3e0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d02c      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a25      	ldr	r2, [pc, #148]	@ (8003c4c <HAL_DMA_Abort_IT+0x3e4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d027      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a24      	ldr	r2, [pc, #144]	@ (8003c50 <HAL_DMA_Abort_IT+0x3e8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d022      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a22      	ldr	r2, [pc, #136]	@ (8003c54 <HAL_DMA_Abort_IT+0x3ec>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d01d      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a21      	ldr	r2, [pc, #132]	@ (8003c58 <HAL_DMA_Abort_IT+0x3f0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d018      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8003c5c <HAL_DMA_Abort_IT+0x3f4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d013      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c60 <HAL_DMA_Abort_IT+0x3f8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d00e      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c64 <HAL_DMA_Abort_IT+0x3fc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d009      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8003c68 <HAL_DMA_Abort_IT+0x400>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d004      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x3a2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a19      	ldr	r2, [pc, #100]	@ (8003c6c <HAL_DMA_Abort_IT+0x404>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d132      	bne.n	8003c70 <HAL_DMA_Abort_IT+0x408>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e031      	b.n	8003c72 <HAL_DMA_Abort_IT+0x40a>
 8003c0e:	bf00      	nop
 8003c10:	40020010 	.word	0x40020010
 8003c14:	40020028 	.word	0x40020028
 8003c18:	40020040 	.word	0x40020040
 8003c1c:	40020058 	.word	0x40020058
 8003c20:	40020070 	.word	0x40020070
 8003c24:	40020088 	.word	0x40020088
 8003c28:	400200a0 	.word	0x400200a0
 8003c2c:	400200b8 	.word	0x400200b8
 8003c30:	40020410 	.word	0x40020410
 8003c34:	40020428 	.word	0x40020428
 8003c38:	40020440 	.word	0x40020440
 8003c3c:	40020458 	.word	0x40020458
 8003c40:	40020470 	.word	0x40020470
 8003c44:	40020488 	.word	0x40020488
 8003c48:	400204a0 	.word	0x400204a0
 8003c4c:	400204b8 	.word	0x400204b8
 8003c50:	58025408 	.word	0x58025408
 8003c54:	5802541c 	.word	0x5802541c
 8003c58:	58025430 	.word	0x58025430
 8003c5c:	58025444 	.word	0x58025444
 8003c60:	58025458 	.word	0x58025458
 8003c64:	5802546c 	.word	0x5802546c
 8003c68:	58025480 	.word	0x58025480
 8003c6c:	58025494 	.word	0x58025494
 8003c70:	2300      	movs	r3, #0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d028      	beq.n	8003cc8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c84:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	2201      	movs	r2, #1
 8003c96:	409a      	lsls	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ca4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00c      	beq.n	8003cc8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cbc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003cc6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop

08003cf4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	@ 0x28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d00:	4b67      	ldr	r3, [pc, #412]	@ (8003ea0 <HAL_DMA_IRQHandler+0x1ac>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a67      	ldr	r2, [pc, #412]	@ (8003ea4 <HAL_DMA_IRQHandler+0x1b0>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	0a9b      	lsrs	r3, r3, #10
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d12:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d18:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a5f      	ldr	r2, [pc, #380]	@ (8003ea8 <HAL_DMA_IRQHandler+0x1b4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d04a      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a5d      	ldr	r2, [pc, #372]	@ (8003eac <HAL_DMA_IRQHandler+0x1b8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d045      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8003eb0 <HAL_DMA_IRQHandler+0x1bc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d040      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a5a      	ldr	r2, [pc, #360]	@ (8003eb4 <HAL_DMA_IRQHandler+0x1c0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d03b      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a59      	ldr	r2, [pc, #356]	@ (8003eb8 <HAL_DMA_IRQHandler+0x1c4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d036      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a57      	ldr	r2, [pc, #348]	@ (8003ebc <HAL_DMA_IRQHandler+0x1c8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d031      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a56      	ldr	r2, [pc, #344]	@ (8003ec0 <HAL_DMA_IRQHandler+0x1cc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d02c      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a54      	ldr	r2, [pc, #336]	@ (8003ec4 <HAL_DMA_IRQHandler+0x1d0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d027      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a53      	ldr	r2, [pc, #332]	@ (8003ec8 <HAL_DMA_IRQHandler+0x1d4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d022      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a51      	ldr	r2, [pc, #324]	@ (8003ecc <HAL_DMA_IRQHandler+0x1d8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d01d      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a50      	ldr	r2, [pc, #320]	@ (8003ed0 <HAL_DMA_IRQHandler+0x1dc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d018      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a4e      	ldr	r2, [pc, #312]	@ (8003ed4 <HAL_DMA_IRQHandler+0x1e0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a4d      	ldr	r2, [pc, #308]	@ (8003ed8 <HAL_DMA_IRQHandler+0x1e4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00e      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a4b      	ldr	r2, [pc, #300]	@ (8003edc <HAL_DMA_IRQHandler+0x1e8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d009      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a4a      	ldr	r2, [pc, #296]	@ (8003ee0 <HAL_DMA_IRQHandler+0x1ec>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d004      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a48      	ldr	r2, [pc, #288]	@ (8003ee4 <HAL_DMA_IRQHandler+0x1f0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d101      	bne.n	8003dca <HAL_DMA_IRQHandler+0xd6>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <HAL_DMA_IRQHandler+0xd8>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 842b 	beq.w	8004628 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2208      	movs	r2, #8
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 80a2 	beq.w	8003f2c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a2e      	ldr	r2, [pc, #184]	@ (8003ea8 <HAL_DMA_IRQHandler+0x1b4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d04a      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2d      	ldr	r2, [pc, #180]	@ (8003eac <HAL_DMA_IRQHandler+0x1b8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d045      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2b      	ldr	r2, [pc, #172]	@ (8003eb0 <HAL_DMA_IRQHandler+0x1bc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d040      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2a      	ldr	r2, [pc, #168]	@ (8003eb4 <HAL_DMA_IRQHandler+0x1c0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d03b      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a28      	ldr	r2, [pc, #160]	@ (8003eb8 <HAL_DMA_IRQHandler+0x1c4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d036      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a27      	ldr	r2, [pc, #156]	@ (8003ebc <HAL_DMA_IRQHandler+0x1c8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d031      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a25      	ldr	r2, [pc, #148]	@ (8003ec0 <HAL_DMA_IRQHandler+0x1cc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d02c      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a24      	ldr	r2, [pc, #144]	@ (8003ec4 <HAL_DMA_IRQHandler+0x1d0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d027      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a22      	ldr	r2, [pc, #136]	@ (8003ec8 <HAL_DMA_IRQHandler+0x1d4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d022      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a21      	ldr	r2, [pc, #132]	@ (8003ecc <HAL_DMA_IRQHandler+0x1d8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d01d      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed0 <HAL_DMA_IRQHandler+0x1dc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d018      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed4 <HAL_DMA_IRQHandler+0x1e0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d013      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed8 <HAL_DMA_IRQHandler+0x1e4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00e      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8003edc <HAL_DMA_IRQHandler+0x1e8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d009      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a19      	ldr	r2, [pc, #100]	@ (8003ee0 <HAL_DMA_IRQHandler+0x1ec>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a18      	ldr	r2, [pc, #96]	@ (8003ee4 <HAL_DMA_IRQHandler+0x1f0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d12f      	bne.n	8003ee8 <HAL_DMA_IRQHandler+0x1f4>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf14      	ite	ne
 8003e96:	2301      	movne	r3, #1
 8003e98:	2300      	moveq	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	e02e      	b.n	8003efc <HAL_DMA_IRQHandler+0x208>
 8003e9e:	bf00      	nop
 8003ea0:	240000a8 	.word	0x240000a8
 8003ea4:	1b4e81b5 	.word	0x1b4e81b5
 8003ea8:	40020010 	.word	0x40020010
 8003eac:	40020028 	.word	0x40020028
 8003eb0:	40020040 	.word	0x40020040
 8003eb4:	40020058 	.word	0x40020058
 8003eb8:	40020070 	.word	0x40020070
 8003ebc:	40020088 	.word	0x40020088
 8003ec0:	400200a0 	.word	0x400200a0
 8003ec4:	400200b8 	.word	0x400200b8
 8003ec8:	40020410 	.word	0x40020410
 8003ecc:	40020428 	.word	0x40020428
 8003ed0:	40020440 	.word	0x40020440
 8003ed4:	40020458 	.word	0x40020458
 8003ed8:	40020470 	.word	0x40020470
 8003edc:	40020488 	.word	0x40020488
 8003ee0:	400204a0 	.word	0x400204a0
 8003ee4:	400204b8 	.word	0x400204b8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bf14      	ite	ne
 8003ef6:	2301      	movne	r3, #1
 8003ef8:	2300      	moveq	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d015      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0204 	bic.w	r2, r2, #4
 8003f0e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	2208      	movs	r2, #8
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f24:	f043 0201 	orr.w	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d06e      	beq.n	8004020 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a69      	ldr	r2, [pc, #420]	@ (80040ec <HAL_DMA_IRQHandler+0x3f8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d04a      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a67      	ldr	r2, [pc, #412]	@ (80040f0 <HAL_DMA_IRQHandler+0x3fc>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d045      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a66      	ldr	r2, [pc, #408]	@ (80040f4 <HAL_DMA_IRQHandler+0x400>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d040      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a64      	ldr	r2, [pc, #400]	@ (80040f8 <HAL_DMA_IRQHandler+0x404>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d03b      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a63      	ldr	r2, [pc, #396]	@ (80040fc <HAL_DMA_IRQHandler+0x408>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d036      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a61      	ldr	r2, [pc, #388]	@ (8004100 <HAL_DMA_IRQHandler+0x40c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d031      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a60      	ldr	r2, [pc, #384]	@ (8004104 <HAL_DMA_IRQHandler+0x410>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d02c      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a5e      	ldr	r2, [pc, #376]	@ (8004108 <HAL_DMA_IRQHandler+0x414>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d027      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a5d      	ldr	r2, [pc, #372]	@ (800410c <HAL_DMA_IRQHandler+0x418>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d022      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a5b      	ldr	r2, [pc, #364]	@ (8004110 <HAL_DMA_IRQHandler+0x41c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01d      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a5a      	ldr	r2, [pc, #360]	@ (8004114 <HAL_DMA_IRQHandler+0x420>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d018      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a58      	ldr	r2, [pc, #352]	@ (8004118 <HAL_DMA_IRQHandler+0x424>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a57      	ldr	r2, [pc, #348]	@ (800411c <HAL_DMA_IRQHandler+0x428>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00e      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a55      	ldr	r2, [pc, #340]	@ (8004120 <HAL_DMA_IRQHandler+0x42c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d009      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a54      	ldr	r2, [pc, #336]	@ (8004124 <HAL_DMA_IRQHandler+0x430>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d004      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a52      	ldr	r2, [pc, #328]	@ (8004128 <HAL_DMA_IRQHandler+0x434>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d10a      	bne.n	8003ff8 <HAL_DMA_IRQHandler+0x304>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	bf14      	ite	ne
 8003ff0:	2301      	movne	r3, #1
 8003ff2:	2300      	moveq	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	e003      	b.n	8004000 <HAL_DMA_IRQHandler+0x30c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2300      	movs	r3, #0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00d      	beq.n	8004020 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	2201      	movs	r2, #1
 800400e:	409a      	lsls	r2, r3
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004018:	f043 0202 	orr.w	r2, r3, #2
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	2204      	movs	r2, #4
 800402a:	409a      	lsls	r2, r3
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 808f 	beq.w	8004154 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a2c      	ldr	r2, [pc, #176]	@ (80040ec <HAL_DMA_IRQHandler+0x3f8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d04a      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a2a      	ldr	r2, [pc, #168]	@ (80040f0 <HAL_DMA_IRQHandler+0x3fc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d045      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a29      	ldr	r2, [pc, #164]	@ (80040f4 <HAL_DMA_IRQHandler+0x400>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d040      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a27      	ldr	r2, [pc, #156]	@ (80040f8 <HAL_DMA_IRQHandler+0x404>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d03b      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a26      	ldr	r2, [pc, #152]	@ (80040fc <HAL_DMA_IRQHandler+0x408>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d036      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a24      	ldr	r2, [pc, #144]	@ (8004100 <HAL_DMA_IRQHandler+0x40c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d031      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a23      	ldr	r2, [pc, #140]	@ (8004104 <HAL_DMA_IRQHandler+0x410>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d02c      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a21      	ldr	r2, [pc, #132]	@ (8004108 <HAL_DMA_IRQHandler+0x414>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d027      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a20      	ldr	r2, [pc, #128]	@ (800410c <HAL_DMA_IRQHandler+0x418>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d022      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1e      	ldr	r2, [pc, #120]	@ (8004110 <HAL_DMA_IRQHandler+0x41c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d01d      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1d      	ldr	r2, [pc, #116]	@ (8004114 <HAL_DMA_IRQHandler+0x420>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d018      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004118 <HAL_DMA_IRQHandler+0x424>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d013      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1a      	ldr	r2, [pc, #104]	@ (800411c <HAL_DMA_IRQHandler+0x428>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00e      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a18      	ldr	r2, [pc, #96]	@ (8004120 <HAL_DMA_IRQHandler+0x42c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d009      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a17      	ldr	r2, [pc, #92]	@ (8004124 <HAL_DMA_IRQHandler+0x430>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d004      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a15      	ldr	r2, [pc, #84]	@ (8004128 <HAL_DMA_IRQHandler+0x434>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d12a      	bne.n	800412c <HAL_DMA_IRQHandler+0x438>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bf14      	ite	ne
 80040e4:	2301      	movne	r3, #1
 80040e6:	2300      	moveq	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	e023      	b.n	8004134 <HAL_DMA_IRQHandler+0x440>
 80040ec:	40020010 	.word	0x40020010
 80040f0:	40020028 	.word	0x40020028
 80040f4:	40020040 	.word	0x40020040
 80040f8:	40020058 	.word	0x40020058
 80040fc:	40020070 	.word	0x40020070
 8004100:	40020088 	.word	0x40020088
 8004104:	400200a0 	.word	0x400200a0
 8004108:	400200b8 	.word	0x400200b8
 800410c:	40020410 	.word	0x40020410
 8004110:	40020428 	.word	0x40020428
 8004114:	40020440 	.word	0x40020440
 8004118:	40020458 	.word	0x40020458
 800411c:	40020470 	.word	0x40020470
 8004120:	40020488 	.word	0x40020488
 8004124:	400204a0 	.word	0x400204a0
 8004128:	400204b8 	.word	0x400204b8
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2300      	movs	r3, #0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2204      	movs	r2, #4
 8004142:	409a      	lsls	r2, r3
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414c:	f043 0204 	orr.w	r2, r3, #4
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	2210      	movs	r2, #16
 800415e:	409a      	lsls	r2, r3
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	4013      	ands	r3, r2
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80a6 	beq.w	80042b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a85      	ldr	r2, [pc, #532]	@ (8004384 <HAL_DMA_IRQHandler+0x690>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d04a      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a83      	ldr	r2, [pc, #524]	@ (8004388 <HAL_DMA_IRQHandler+0x694>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d045      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a82      	ldr	r2, [pc, #520]	@ (800438c <HAL_DMA_IRQHandler+0x698>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d040      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a80      	ldr	r2, [pc, #512]	@ (8004390 <HAL_DMA_IRQHandler+0x69c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d03b      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a7f      	ldr	r2, [pc, #508]	@ (8004394 <HAL_DMA_IRQHandler+0x6a0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d036      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a7d      	ldr	r2, [pc, #500]	@ (8004398 <HAL_DMA_IRQHandler+0x6a4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d031      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a7c      	ldr	r2, [pc, #496]	@ (800439c <HAL_DMA_IRQHandler+0x6a8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d02c      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a7a      	ldr	r2, [pc, #488]	@ (80043a0 <HAL_DMA_IRQHandler+0x6ac>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d027      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a79      	ldr	r2, [pc, #484]	@ (80043a4 <HAL_DMA_IRQHandler+0x6b0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d022      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a77      	ldr	r2, [pc, #476]	@ (80043a8 <HAL_DMA_IRQHandler+0x6b4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d01d      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a76      	ldr	r2, [pc, #472]	@ (80043ac <HAL_DMA_IRQHandler+0x6b8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d018      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a74      	ldr	r2, [pc, #464]	@ (80043b0 <HAL_DMA_IRQHandler+0x6bc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a73      	ldr	r2, [pc, #460]	@ (80043b4 <HAL_DMA_IRQHandler+0x6c0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00e      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a71      	ldr	r2, [pc, #452]	@ (80043b8 <HAL_DMA_IRQHandler+0x6c4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d009      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a70      	ldr	r2, [pc, #448]	@ (80043bc <HAL_DMA_IRQHandler+0x6c8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d004      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a6e      	ldr	r2, [pc, #440]	@ (80043c0 <HAL_DMA_IRQHandler+0x6cc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d10a      	bne.n	8004220 <HAL_DMA_IRQHandler+0x52c>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	bf14      	ite	ne
 8004218:	2301      	movne	r3, #1
 800421a:	2300      	moveq	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e009      	b.n	8004234 <HAL_DMA_IRQHandler+0x540>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	bf14      	ite	ne
 800422e:	2301      	movne	r3, #1
 8004230:	2300      	moveq	r3, #0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d03e      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2210      	movs	r2, #16
 8004242:	409a      	lsls	r2, r3
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d018      	beq.n	8004288 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d108      	bne.n	8004276 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	d024      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	4798      	blx	r3
 8004274:	e01f      	b.n	80042b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01b      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	4798      	blx	r3
 8004286:	e016      	b.n	80042b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d107      	bne.n	80042a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0208 	bic.w	r2, r2, #8
 80042a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	2220      	movs	r2, #32
 80042c0:	409a      	lsls	r2, r3
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8110 	beq.w	80044ec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004384 <HAL_DMA_IRQHandler+0x690>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d04a      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a2b      	ldr	r2, [pc, #172]	@ (8004388 <HAL_DMA_IRQHandler+0x694>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d045      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a29      	ldr	r2, [pc, #164]	@ (800438c <HAL_DMA_IRQHandler+0x698>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d040      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a28      	ldr	r2, [pc, #160]	@ (8004390 <HAL_DMA_IRQHandler+0x69c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d03b      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a26      	ldr	r2, [pc, #152]	@ (8004394 <HAL_DMA_IRQHandler+0x6a0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d036      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a25      	ldr	r2, [pc, #148]	@ (8004398 <HAL_DMA_IRQHandler+0x6a4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d031      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a23      	ldr	r2, [pc, #140]	@ (800439c <HAL_DMA_IRQHandler+0x6a8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d02c      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a22      	ldr	r2, [pc, #136]	@ (80043a0 <HAL_DMA_IRQHandler+0x6ac>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d027      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a20      	ldr	r2, [pc, #128]	@ (80043a4 <HAL_DMA_IRQHandler+0x6b0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d022      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1f      	ldr	r2, [pc, #124]	@ (80043a8 <HAL_DMA_IRQHandler+0x6b4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d01d      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1d      	ldr	r2, [pc, #116]	@ (80043ac <HAL_DMA_IRQHandler+0x6b8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d018      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a1c      	ldr	r2, [pc, #112]	@ (80043b0 <HAL_DMA_IRQHandler+0x6bc>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d013      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a1a      	ldr	r2, [pc, #104]	@ (80043b4 <HAL_DMA_IRQHandler+0x6c0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00e      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a19      	ldr	r2, [pc, #100]	@ (80043b8 <HAL_DMA_IRQHandler+0x6c4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d009      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a17      	ldr	r2, [pc, #92]	@ (80043bc <HAL_DMA_IRQHandler+0x6c8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d004      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a16      	ldr	r2, [pc, #88]	@ (80043c0 <HAL_DMA_IRQHandler+0x6cc>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d12b      	bne.n	80043c4 <HAL_DMA_IRQHandler+0x6d0>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf14      	ite	ne
 800437a:	2301      	movne	r3, #1
 800437c:	2300      	moveq	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	e02a      	b.n	80043d8 <HAL_DMA_IRQHandler+0x6e4>
 8004382:	bf00      	nop
 8004384:	40020010 	.word	0x40020010
 8004388:	40020028 	.word	0x40020028
 800438c:	40020040 	.word	0x40020040
 8004390:	40020058 	.word	0x40020058
 8004394:	40020070 	.word	0x40020070
 8004398:	40020088 	.word	0x40020088
 800439c:	400200a0 	.word	0x400200a0
 80043a0:	400200b8 	.word	0x400200b8
 80043a4:	40020410 	.word	0x40020410
 80043a8:	40020428 	.word	0x40020428
 80043ac:	40020440 	.word	0x40020440
 80043b0:	40020458 	.word	0x40020458
 80043b4:	40020470 	.word	0x40020470
 80043b8:	40020488 	.word	0x40020488
 80043bc:	400204a0 	.word	0x400204a0
 80043c0:	400204b8 	.word	0x400204b8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bf14      	ite	ne
 80043d2:	2301      	movne	r3, #1
 80043d4:	2300      	moveq	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8087 	beq.w	80044ec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	2220      	movs	r2, #32
 80043e8:	409a      	lsls	r2, r3
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d139      	bne.n	800446e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0216 	bic.w	r2, r2, #22
 8004408:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695a      	ldr	r2, [r3, #20]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004418:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d103      	bne.n	800442a <HAL_DMA_IRQHandler+0x736>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004426:	2b00      	cmp	r3, #0
 8004428:	d007      	beq.n	800443a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0208 	bic.w	r2, r2, #8
 8004438:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	223f      	movs	r2, #63	@ 0x3f
 8004444:	409a      	lsls	r2, r3
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 834a 	beq.w	8004af8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4798      	blx	r3
          }
          return;
 800446c:	e344      	b.n	8004af8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d018      	beq.n	80044ae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d108      	bne.n	800449c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448e:	2b00      	cmp	r3, #0
 8004490:	d02c      	beq.n	80044ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	4798      	blx	r3
 800449a:	e027      	b.n	80044ec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d023      	beq.n	80044ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
 80044ac:	e01e      	b.n	80044ec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10f      	bne.n	80044dc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0210 	bic.w	r2, r2, #16
 80044ca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8306 	beq.w	8004b02 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 8088 	beq.w	8004614 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2204      	movs	r2, #4
 8004508:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a7a      	ldr	r2, [pc, #488]	@ (80046fc <HAL_DMA_IRQHandler+0xa08>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d04a      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a79      	ldr	r2, [pc, #484]	@ (8004700 <HAL_DMA_IRQHandler+0xa0c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d045      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a77      	ldr	r2, [pc, #476]	@ (8004704 <HAL_DMA_IRQHandler+0xa10>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d040      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a76      	ldr	r2, [pc, #472]	@ (8004708 <HAL_DMA_IRQHandler+0xa14>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d03b      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a74      	ldr	r2, [pc, #464]	@ (800470c <HAL_DMA_IRQHandler+0xa18>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d036      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a73      	ldr	r2, [pc, #460]	@ (8004710 <HAL_DMA_IRQHandler+0xa1c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d031      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a71      	ldr	r2, [pc, #452]	@ (8004714 <HAL_DMA_IRQHandler+0xa20>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d02c      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a70      	ldr	r2, [pc, #448]	@ (8004718 <HAL_DMA_IRQHandler+0xa24>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d027      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a6e      	ldr	r2, [pc, #440]	@ (800471c <HAL_DMA_IRQHandler+0xa28>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d022      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a6d      	ldr	r2, [pc, #436]	@ (8004720 <HAL_DMA_IRQHandler+0xa2c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d01d      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a6b      	ldr	r2, [pc, #428]	@ (8004724 <HAL_DMA_IRQHandler+0xa30>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d018      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a6a      	ldr	r2, [pc, #424]	@ (8004728 <HAL_DMA_IRQHandler+0xa34>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d013      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a68      	ldr	r2, [pc, #416]	@ (800472c <HAL_DMA_IRQHandler+0xa38>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00e      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a67      	ldr	r2, [pc, #412]	@ (8004730 <HAL_DMA_IRQHandler+0xa3c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d009      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a65      	ldr	r2, [pc, #404]	@ (8004734 <HAL_DMA_IRQHandler+0xa40>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d004      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a64      	ldr	r2, [pc, #400]	@ (8004738 <HAL_DMA_IRQHandler+0xa44>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d108      	bne.n	80045be <HAL_DMA_IRQHandler+0x8ca>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0201 	bic.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	e007      	b.n	80045ce <HAL_DMA_IRQHandler+0x8da>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0201 	bic.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3301      	adds	r3, #1
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d307      	bcc.n	80045ea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f2      	bne.n	80045ce <HAL_DMA_IRQHandler+0x8da>
 80045e8:	e000      	b.n	80045ec <HAL_DMA_IRQHandler+0x8f8>
            break;
 80045ea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d004      	beq.n	8004604 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2203      	movs	r2, #3
 80045fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004602:	e003      	b.n	800460c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8272 	beq.w	8004b02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	4798      	blx	r3
 8004626:	e26c      	b.n	8004b02 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a43      	ldr	r2, [pc, #268]	@ (800473c <HAL_DMA_IRQHandler+0xa48>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d022      	beq.n	8004678 <HAL_DMA_IRQHandler+0x984>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a42      	ldr	r2, [pc, #264]	@ (8004740 <HAL_DMA_IRQHandler+0xa4c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d01d      	beq.n	8004678 <HAL_DMA_IRQHandler+0x984>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a40      	ldr	r2, [pc, #256]	@ (8004744 <HAL_DMA_IRQHandler+0xa50>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d018      	beq.n	8004678 <HAL_DMA_IRQHandler+0x984>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a3f      	ldr	r2, [pc, #252]	@ (8004748 <HAL_DMA_IRQHandler+0xa54>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d013      	beq.n	8004678 <HAL_DMA_IRQHandler+0x984>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a3d      	ldr	r2, [pc, #244]	@ (800474c <HAL_DMA_IRQHandler+0xa58>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00e      	beq.n	8004678 <HAL_DMA_IRQHandler+0x984>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a3c      	ldr	r2, [pc, #240]	@ (8004750 <HAL_DMA_IRQHandler+0xa5c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d009      	beq.n	8004678 <HAL_DMA_IRQHandler+0x984>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a3a      	ldr	r2, [pc, #232]	@ (8004754 <HAL_DMA_IRQHandler+0xa60>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d004      	beq.n	8004678 <HAL_DMA_IRQHandler+0x984>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a39      	ldr	r2, [pc, #228]	@ (8004758 <HAL_DMA_IRQHandler+0xa64>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d101      	bne.n	800467c <HAL_DMA_IRQHandler+0x988>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <HAL_DMA_IRQHandler+0x98a>
 800467c:	2300      	movs	r3, #0
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 823f 	beq.w	8004b02 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	2204      	movs	r2, #4
 8004696:	409a      	lsls	r2, r3
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80cd 	beq.w	800483c <HAL_DMA_IRQHandler+0xb48>
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80c7 	beq.w	800483c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	2204      	movs	r2, #4
 80046b8:	409a      	lsls	r2, r3
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d049      	beq.n	800475c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 8210 	beq.w	8004afc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046e4:	e20a      	b.n	8004afc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8206 	beq.w	8004afc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046f8:	e200      	b.n	8004afc <HAL_DMA_IRQHandler+0xe08>
 80046fa:	bf00      	nop
 80046fc:	40020010 	.word	0x40020010
 8004700:	40020028 	.word	0x40020028
 8004704:	40020040 	.word	0x40020040
 8004708:	40020058 	.word	0x40020058
 800470c:	40020070 	.word	0x40020070
 8004710:	40020088 	.word	0x40020088
 8004714:	400200a0 	.word	0x400200a0
 8004718:	400200b8 	.word	0x400200b8
 800471c:	40020410 	.word	0x40020410
 8004720:	40020428 	.word	0x40020428
 8004724:	40020440 	.word	0x40020440
 8004728:	40020458 	.word	0x40020458
 800472c:	40020470 	.word	0x40020470
 8004730:	40020488 	.word	0x40020488
 8004734:	400204a0 	.word	0x400204a0
 8004738:	400204b8 	.word	0x400204b8
 800473c:	58025408 	.word	0x58025408
 8004740:	5802541c 	.word	0x5802541c
 8004744:	58025430 	.word	0x58025430
 8004748:	58025444 	.word	0x58025444
 800474c:	58025458 	.word	0x58025458
 8004750:	5802546c 	.word	0x5802546c
 8004754:	58025480 	.word	0x58025480
 8004758:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d160      	bne.n	8004828 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a7f      	ldr	r2, [pc, #508]	@ (8004968 <HAL_DMA_IRQHandler+0xc74>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d04a      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a7d      	ldr	r2, [pc, #500]	@ (800496c <HAL_DMA_IRQHandler+0xc78>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d045      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a7c      	ldr	r2, [pc, #496]	@ (8004970 <HAL_DMA_IRQHandler+0xc7c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d040      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a7a      	ldr	r2, [pc, #488]	@ (8004974 <HAL_DMA_IRQHandler+0xc80>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d03b      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a79      	ldr	r2, [pc, #484]	@ (8004978 <HAL_DMA_IRQHandler+0xc84>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d036      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a77      	ldr	r2, [pc, #476]	@ (800497c <HAL_DMA_IRQHandler+0xc88>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d031      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a76      	ldr	r2, [pc, #472]	@ (8004980 <HAL_DMA_IRQHandler+0xc8c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d02c      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a74      	ldr	r2, [pc, #464]	@ (8004984 <HAL_DMA_IRQHandler+0xc90>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d027      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a73      	ldr	r2, [pc, #460]	@ (8004988 <HAL_DMA_IRQHandler+0xc94>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d022      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a71      	ldr	r2, [pc, #452]	@ (800498c <HAL_DMA_IRQHandler+0xc98>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01d      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a70      	ldr	r2, [pc, #448]	@ (8004990 <HAL_DMA_IRQHandler+0xc9c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d018      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004994 <HAL_DMA_IRQHandler+0xca0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a6d      	ldr	r2, [pc, #436]	@ (8004998 <HAL_DMA_IRQHandler+0xca4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00e      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a6b      	ldr	r2, [pc, #428]	@ (800499c <HAL_DMA_IRQHandler+0xca8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d009      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a6a      	ldr	r2, [pc, #424]	@ (80049a0 <HAL_DMA_IRQHandler+0xcac>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d004      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a68      	ldr	r2, [pc, #416]	@ (80049a4 <HAL_DMA_IRQHandler+0xcb0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d108      	bne.n	8004818 <HAL_DMA_IRQHandler+0xb24>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0208 	bic.w	r2, r2, #8
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e007      	b.n	8004828 <HAL_DMA_IRQHandler+0xb34>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0204 	bic.w	r2, r2, #4
 8004826:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8165 	beq.w	8004afc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800483a:	e15f      	b.n	8004afc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	2202      	movs	r2, #2
 8004846:	409a      	lsls	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80c5 	beq.w	80049dc <HAL_DMA_IRQHandler+0xce8>
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80bf 	beq.w	80049dc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	2202      	movs	r2, #2
 8004868:	409a      	lsls	r2, r3
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d018      	beq.n	80048aa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 813a 	beq.w	8004b00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004894:	e134      	b.n	8004b00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 8130 	beq.w	8004b00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048a8:	e12a      	b.n	8004b00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 8089 	bne.w	80049c8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a2b      	ldr	r2, [pc, #172]	@ (8004968 <HAL_DMA_IRQHandler+0xc74>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d04a      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a29      	ldr	r2, [pc, #164]	@ (800496c <HAL_DMA_IRQHandler+0xc78>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d045      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a28      	ldr	r2, [pc, #160]	@ (8004970 <HAL_DMA_IRQHandler+0xc7c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d040      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a26      	ldr	r2, [pc, #152]	@ (8004974 <HAL_DMA_IRQHandler+0xc80>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d03b      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a25      	ldr	r2, [pc, #148]	@ (8004978 <HAL_DMA_IRQHandler+0xc84>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d036      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a23      	ldr	r2, [pc, #140]	@ (800497c <HAL_DMA_IRQHandler+0xc88>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d031      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a22      	ldr	r2, [pc, #136]	@ (8004980 <HAL_DMA_IRQHandler+0xc8c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d02c      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a20      	ldr	r2, [pc, #128]	@ (8004984 <HAL_DMA_IRQHandler+0xc90>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d027      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1f      	ldr	r2, [pc, #124]	@ (8004988 <HAL_DMA_IRQHandler+0xc94>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d022      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1d      	ldr	r2, [pc, #116]	@ (800498c <HAL_DMA_IRQHandler+0xc98>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d01d      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1c      	ldr	r2, [pc, #112]	@ (8004990 <HAL_DMA_IRQHandler+0xc9c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d018      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a1a      	ldr	r2, [pc, #104]	@ (8004994 <HAL_DMA_IRQHandler+0xca0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d013      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a19      	ldr	r2, [pc, #100]	@ (8004998 <HAL_DMA_IRQHandler+0xca4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00e      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a17      	ldr	r2, [pc, #92]	@ (800499c <HAL_DMA_IRQHandler+0xca8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d009      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a16      	ldr	r2, [pc, #88]	@ (80049a0 <HAL_DMA_IRQHandler+0xcac>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d004      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a14      	ldr	r2, [pc, #80]	@ (80049a4 <HAL_DMA_IRQHandler+0xcb0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d128      	bne.n	80049a8 <HAL_DMA_IRQHandler+0xcb4>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0214 	bic.w	r2, r2, #20
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	e027      	b.n	80049b8 <HAL_DMA_IRQHandler+0xcc4>
 8004968:	40020010 	.word	0x40020010
 800496c:	40020028 	.word	0x40020028
 8004970:	40020040 	.word	0x40020040
 8004974:	40020058 	.word	0x40020058
 8004978:	40020070 	.word	0x40020070
 800497c:	40020088 	.word	0x40020088
 8004980:	400200a0 	.word	0x400200a0
 8004984:	400200b8 	.word	0x400200b8
 8004988:	40020410 	.word	0x40020410
 800498c:	40020428 	.word	0x40020428
 8004990:	40020440 	.word	0x40020440
 8004994:	40020458 	.word	0x40020458
 8004998:	40020470 	.word	0x40020470
 800499c:	40020488 	.word	0x40020488
 80049a0:	400204a0 	.word	0x400204a0
 80049a4:	400204b8 	.word	0x400204b8
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 020a 	bic.w	r2, r2, #10
 80049b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8097 	beq.w	8004b00 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049da:	e091      	b.n	8004b00 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e0:	f003 031f 	and.w	r3, r3, #31
 80049e4:	2208      	movs	r2, #8
 80049e6:	409a      	lsls	r2, r3
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8088 	beq.w	8004b02 <HAL_DMA_IRQHandler+0xe0e>
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8082 	beq.w	8004b02 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a41      	ldr	r2, [pc, #260]	@ (8004b08 <HAL_DMA_IRQHandler+0xe14>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d04a      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b0c <HAL_DMA_IRQHandler+0xe18>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d045      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a3e      	ldr	r2, [pc, #248]	@ (8004b10 <HAL_DMA_IRQHandler+0xe1c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d040      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a3c      	ldr	r2, [pc, #240]	@ (8004b14 <HAL_DMA_IRQHandler+0xe20>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d03b      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a3b      	ldr	r2, [pc, #236]	@ (8004b18 <HAL_DMA_IRQHandler+0xe24>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d036      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a39      	ldr	r2, [pc, #228]	@ (8004b1c <HAL_DMA_IRQHandler+0xe28>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d031      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a38      	ldr	r2, [pc, #224]	@ (8004b20 <HAL_DMA_IRQHandler+0xe2c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d02c      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a36      	ldr	r2, [pc, #216]	@ (8004b24 <HAL_DMA_IRQHandler+0xe30>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d027      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a35      	ldr	r2, [pc, #212]	@ (8004b28 <HAL_DMA_IRQHandler+0xe34>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d022      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a33      	ldr	r2, [pc, #204]	@ (8004b2c <HAL_DMA_IRQHandler+0xe38>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d01d      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a32      	ldr	r2, [pc, #200]	@ (8004b30 <HAL_DMA_IRQHandler+0xe3c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d018      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a30      	ldr	r2, [pc, #192]	@ (8004b34 <HAL_DMA_IRQHandler+0xe40>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d013      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a2f      	ldr	r2, [pc, #188]	@ (8004b38 <HAL_DMA_IRQHandler+0xe44>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00e      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a2d      	ldr	r2, [pc, #180]	@ (8004b3c <HAL_DMA_IRQHandler+0xe48>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d009      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004b40 <HAL_DMA_IRQHandler+0xe4c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d004      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a2a      	ldr	r2, [pc, #168]	@ (8004b44 <HAL_DMA_IRQHandler+0xe50>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d108      	bne.n	8004ab0 <HAL_DMA_IRQHandler+0xdbc>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 021c 	bic.w	r2, r2, #28
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	e007      	b.n	8004ac0 <HAL_DMA_IRQHandler+0xdcc>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 020e 	bic.w	r2, r2, #14
 8004abe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	2201      	movs	r2, #1
 8004aca:	409a      	lsls	r2, r3
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d009      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4798      	blx	r3
 8004af6:	e004      	b.n	8004b02 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004af8:	bf00      	nop
 8004afa:	e002      	b.n	8004b02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004afc:	bf00      	nop
 8004afe:	e000      	b.n	8004b02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b00:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b02:	3728      	adds	r7, #40	@ 0x28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40020010 	.word	0x40020010
 8004b0c:	40020028 	.word	0x40020028
 8004b10:	40020040 	.word	0x40020040
 8004b14:	40020058 	.word	0x40020058
 8004b18:	40020070 	.word	0x40020070
 8004b1c:	40020088 	.word	0x40020088
 8004b20:	400200a0 	.word	0x400200a0
 8004b24:	400200b8 	.word	0x400200b8
 8004b28:	40020410 	.word	0x40020410
 8004b2c:	40020428 	.word	0x40020428
 8004b30:	40020440 	.word	0x40020440
 8004b34:	40020458 	.word	0x40020458
 8004b38:	40020470 	.word	0x40020470
 8004b3c:	40020488 	.word	0x40020488
 8004b40:	400204a0 	.word	0x400204a0
 8004b44:	400204b8 	.word	0x400204b8

08004b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a42      	ldr	r2, [pc, #264]	@ (8004c60 <DMA_CalcBaseAndBitshift+0x118>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d04a      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a41      	ldr	r2, [pc, #260]	@ (8004c64 <DMA_CalcBaseAndBitshift+0x11c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d045      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a3f      	ldr	r2, [pc, #252]	@ (8004c68 <DMA_CalcBaseAndBitshift+0x120>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d040      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a3e      	ldr	r2, [pc, #248]	@ (8004c6c <DMA_CalcBaseAndBitshift+0x124>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d03b      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a3c      	ldr	r2, [pc, #240]	@ (8004c70 <DMA_CalcBaseAndBitshift+0x128>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d036      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a3b      	ldr	r2, [pc, #236]	@ (8004c74 <DMA_CalcBaseAndBitshift+0x12c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d031      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a39      	ldr	r2, [pc, #228]	@ (8004c78 <DMA_CalcBaseAndBitshift+0x130>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d02c      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a38      	ldr	r2, [pc, #224]	@ (8004c7c <DMA_CalcBaseAndBitshift+0x134>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d027      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a36      	ldr	r2, [pc, #216]	@ (8004c80 <DMA_CalcBaseAndBitshift+0x138>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d022      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a35      	ldr	r2, [pc, #212]	@ (8004c84 <DMA_CalcBaseAndBitshift+0x13c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d01d      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a33      	ldr	r2, [pc, #204]	@ (8004c88 <DMA_CalcBaseAndBitshift+0x140>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d018      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a32      	ldr	r2, [pc, #200]	@ (8004c8c <DMA_CalcBaseAndBitshift+0x144>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d013      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a30      	ldr	r2, [pc, #192]	@ (8004c90 <DMA_CalcBaseAndBitshift+0x148>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00e      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8004c94 <DMA_CalcBaseAndBitshift+0x14c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d009      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a2d      	ldr	r2, [pc, #180]	@ (8004c98 <DMA_CalcBaseAndBitshift+0x150>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d004      	beq.n	8004bf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a2c      	ldr	r2, [pc, #176]	@ (8004c9c <DMA_CalcBaseAndBitshift+0x154>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d101      	bne.n	8004bf4 <DMA_CalcBaseAndBitshift+0xac>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <DMA_CalcBaseAndBitshift+0xae>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d024      	beq.n	8004c44 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	3b10      	subs	r3, #16
 8004c02:	4a27      	ldr	r2, [pc, #156]	@ (8004ca0 <DMA_CalcBaseAndBitshift+0x158>)
 8004c04:	fba2 2303 	umull	r2, r3, r2, r3
 8004c08:	091b      	lsrs	r3, r3, #4
 8004c0a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	4a24      	ldr	r2, [pc, #144]	@ (8004ca4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004c14:	5cd3      	ldrb	r3, [r2, r3]
 8004c16:	461a      	mov	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d908      	bls.n	8004c34 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	4b1f      	ldr	r3, [pc, #124]	@ (8004ca8 <DMA_CalcBaseAndBitshift+0x160>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	1d1a      	adds	r2, r3, #4
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c32:	e00d      	b.n	8004c50 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca8 <DMA_CalcBaseAndBitshift+0x160>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c42:	e005      	b.n	8004c50 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	40020010 	.word	0x40020010
 8004c64:	40020028 	.word	0x40020028
 8004c68:	40020040 	.word	0x40020040
 8004c6c:	40020058 	.word	0x40020058
 8004c70:	40020070 	.word	0x40020070
 8004c74:	40020088 	.word	0x40020088
 8004c78:	400200a0 	.word	0x400200a0
 8004c7c:	400200b8 	.word	0x400200b8
 8004c80:	40020410 	.word	0x40020410
 8004c84:	40020428 	.word	0x40020428
 8004c88:	40020440 	.word	0x40020440
 8004c8c:	40020458 	.word	0x40020458
 8004c90:	40020470 	.word	0x40020470
 8004c94:	40020488 	.word	0x40020488
 8004c98:	400204a0 	.word	0x400204a0
 8004c9c:	400204b8 	.word	0x400204b8
 8004ca0:	aaaaaaab 	.word	0xaaaaaaab
 8004ca4:	0800bbfc 	.word	0x0800bbfc
 8004ca8:	fffffc00 	.word	0xfffffc00

08004cac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d120      	bne.n	8004d02 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d858      	bhi.n	8004d7a <DMA_CheckFifoParam+0xce>
 8004cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cd0 <DMA_CheckFifoParam+0x24>)
 8004cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cce:	bf00      	nop
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004cf3 	.word	0x08004cf3
 8004cd8:	08004ce1 	.word	0x08004ce1
 8004cdc:	08004d7b 	.word	0x08004d7b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d048      	beq.n	8004d7e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cf0:	e045      	b.n	8004d7e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004cfa:	d142      	bne.n	8004d82 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d00:	e03f      	b.n	8004d82 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d0a:	d123      	bne.n	8004d54 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d838      	bhi.n	8004d86 <DMA_CheckFifoParam+0xda>
 8004d14:	a201      	add	r2, pc, #4	@ (adr r2, 8004d1c <DMA_CheckFifoParam+0x70>)
 8004d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1a:	bf00      	nop
 8004d1c:	08004d2d 	.word	0x08004d2d
 8004d20:	08004d33 	.word	0x08004d33
 8004d24:	08004d2d 	.word	0x08004d2d
 8004d28:	08004d45 	.word	0x08004d45
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
        break;
 8004d30:	e030      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d025      	beq.n	8004d8a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d42:	e022      	b.n	8004d8a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d48:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d4c:	d11f      	bne.n	8004d8e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d52:	e01c      	b.n	8004d8e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d902      	bls.n	8004d62 <DMA_CheckFifoParam+0xb6>
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d003      	beq.n	8004d68 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d60:	e018      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	73fb      	strb	r3, [r7, #15]
        break;
 8004d66:	e015      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00e      	beq.n	8004d92 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
    break;
 8004d78:	e00b      	b.n	8004d92 <DMA_CheckFifoParam+0xe6>
        break;
 8004d7a:	bf00      	nop
 8004d7c:	e00a      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>
        break;
 8004d7e:	bf00      	nop
 8004d80:	e008      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>
        break;
 8004d82:	bf00      	nop
 8004d84:	e006      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>
        break;
 8004d86:	bf00      	nop
 8004d88:	e004      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>
        break;
 8004d8a:	bf00      	nop
 8004d8c:	e002      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>
        break;
 8004d8e:	bf00      	nop
 8004d90:	e000      	b.n	8004d94 <DMA_CheckFifoParam+0xe8>
    break;
 8004d92:	bf00      	nop
    }
  }

  return status;
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop

08004da4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a38      	ldr	r2, [pc, #224]	@ (8004e98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d022      	beq.n	8004e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a36      	ldr	r2, [pc, #216]	@ (8004e9c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d01d      	beq.n	8004e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a35      	ldr	r2, [pc, #212]	@ (8004ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d018      	beq.n	8004e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a33      	ldr	r2, [pc, #204]	@ (8004ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a32      	ldr	r2, [pc, #200]	@ (8004ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00e      	beq.n	8004e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a30      	ldr	r2, [pc, #192]	@ (8004eac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d009      	beq.n	8004e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a2f      	ldr	r2, [pc, #188]	@ (8004eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d004      	beq.n	8004e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d101      	bne.n	8004e06 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d01a      	beq.n	8004e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	3b08      	subs	r3, #8
 8004e14:	4a28      	ldr	r2, [pc, #160]	@ (8004eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004e16:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1a:	091b      	lsrs	r3, r3, #4
 8004e1c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4b26      	ldr	r3, [pc, #152]	@ (8004ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	461a      	mov	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a24      	ldr	r2, [pc, #144]	@ (8004ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004e30:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f003 031f 	and.w	r3, r3, #31
 8004e38:	2201      	movs	r2, #1
 8004e3a:	409a      	lsls	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004e40:	e024      	b.n	8004e8c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	3b10      	subs	r3, #16
 8004e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e50:	091b      	lsrs	r3, r3, #4
 8004e52:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d806      	bhi.n	8004e6a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8004ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d902      	bls.n	8004e6a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3308      	adds	r3, #8
 8004e68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4b18      	ldr	r3, [pc, #96]	@ (8004ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	461a      	mov	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a16      	ldr	r2, [pc, #88]	@ (8004ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004e7c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	2201      	movs	r2, #1
 8004e86:	409a      	lsls	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e8c:	bf00      	nop
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	58025408 	.word	0x58025408
 8004e9c:	5802541c 	.word	0x5802541c
 8004ea0:	58025430 	.word	0x58025430
 8004ea4:	58025444 	.word	0x58025444
 8004ea8:	58025458 	.word	0x58025458
 8004eac:	5802546c 	.word	0x5802546c
 8004eb0:	58025480 	.word	0x58025480
 8004eb4:	58025494 	.word	0x58025494
 8004eb8:	cccccccd 	.word	0xcccccccd
 8004ebc:	16009600 	.word	0x16009600
 8004ec0:	58025880 	.word	0x58025880
 8004ec4:	aaaaaaab 	.word	0xaaaaaaab
 8004ec8:	400204b8 	.word	0x400204b8
 8004ecc:	4002040f 	.word	0x4002040f
 8004ed0:	10008200 	.word	0x10008200
 8004ed4:	40020880 	.word	0x40020880

08004ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d04a      	beq.n	8004f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d847      	bhi.n	8004f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a25      	ldr	r2, [pc, #148]	@ (8004f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d022      	beq.n	8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a24      	ldr	r2, [pc, #144]	@ (8004f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d01d      	beq.n	8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a22      	ldr	r2, [pc, #136]	@ (8004f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d018      	beq.n	8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a21      	ldr	r2, [pc, #132]	@ (8004f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d013      	beq.n	8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1f      	ldr	r2, [pc, #124]	@ (8004fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00e      	beq.n	8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d009      	beq.n	8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d004      	beq.n	8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d101      	bne.n	8004f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4b17      	ldr	r3, [pc, #92]	@ (8004fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	461a      	mov	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a15      	ldr	r2, [pc, #84]	@ (8004fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f60:	671a      	str	r2, [r3, #112]	@ 0x70
 8004f62:	e009      	b.n	8004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4b14      	ldr	r3, [pc, #80]	@ (8004fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a11      	ldr	r2, [pc, #68]	@ (8004fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004f76:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	409a      	lsls	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004f84:	bf00      	nop
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	58025408 	.word	0x58025408
 8004f94:	5802541c 	.word	0x5802541c
 8004f98:	58025430 	.word	0x58025430
 8004f9c:	58025444 	.word	0x58025444
 8004fa0:	58025458 	.word	0x58025458
 8004fa4:	5802546c 	.word	0x5802546c
 8004fa8:	58025480 	.word	0x58025480
 8004fac:	58025494 	.word	0x58025494
 8004fb0:	1600963f 	.word	0x1600963f
 8004fb4:	58025940 	.word	0x58025940
 8004fb8:	1000823f 	.word	0x1000823f
 8004fbc:	40020940 	.word	0x40020940

08004fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b089      	sub	sp, #36	@ 0x24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004fce:	4b89      	ldr	r3, [pc, #548]	@ (80051f4 <HAL_GPIO_Init+0x234>)
 8004fd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fd2:	e194      	b.n	80052fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	2101      	movs	r1, #1
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8186 	beq.w	80052f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f003 0303 	and.w	r3, r3, #3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d005      	beq.n	8005004 <HAL_GPIO_Init+0x44>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d130      	bne.n	8005066 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	2203      	movs	r2, #3
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4013      	ands	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	4313      	orrs	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800503a:	2201      	movs	r2, #1
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43db      	mvns	r3, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4013      	ands	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	091b      	lsrs	r3, r3, #4
 8005050:	f003 0201 	and.w	r2, r3, #1
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	4313      	orrs	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	2b03      	cmp	r3, #3
 8005070:	d017      	beq.n	80050a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	2203      	movs	r2, #3
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	43db      	mvns	r3, r3
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	4013      	ands	r3, r2
 8005088:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	4313      	orrs	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d123      	bne.n	80050f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	08da      	lsrs	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3208      	adds	r2, #8
 80050b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	220f      	movs	r2, #15
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	43db      	mvns	r3, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4013      	ands	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	08da      	lsrs	r2, r3, #3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3208      	adds	r2, #8
 80050f0:	69b9      	ldr	r1, [r7, #24]
 80050f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	2203      	movs	r2, #3
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	43db      	mvns	r3, r3
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	4013      	ands	r3, r2
 800510c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f003 0203 	and.w	r2, r3, #3
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	4313      	orrs	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 80e0 	beq.w	80052f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005138:	4b2f      	ldr	r3, [pc, #188]	@ (80051f8 <HAL_GPIO_Init+0x238>)
 800513a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800513e:	4a2e      	ldr	r2, [pc, #184]	@ (80051f8 <HAL_GPIO_Init+0x238>)
 8005140:	f043 0302 	orr.w	r3, r3, #2
 8005144:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005148:	4b2b      	ldr	r3, [pc, #172]	@ (80051f8 <HAL_GPIO_Init+0x238>)
 800514a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005156:	4a29      	ldr	r2, [pc, #164]	@ (80051fc <HAL_GPIO_Init+0x23c>)
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	089b      	lsrs	r3, r3, #2
 800515c:	3302      	adds	r3, #2
 800515e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	220f      	movs	r2, #15
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43db      	mvns	r3, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4013      	ands	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a20      	ldr	r2, [pc, #128]	@ (8005200 <HAL_GPIO_Init+0x240>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d052      	beq.n	8005228 <HAL_GPIO_Init+0x268>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a1f      	ldr	r2, [pc, #124]	@ (8005204 <HAL_GPIO_Init+0x244>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d031      	beq.n	80051ee <HAL_GPIO_Init+0x22e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a1e      	ldr	r2, [pc, #120]	@ (8005208 <HAL_GPIO_Init+0x248>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d02b      	beq.n	80051ea <HAL_GPIO_Init+0x22a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a1d      	ldr	r2, [pc, #116]	@ (800520c <HAL_GPIO_Init+0x24c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d025      	beq.n	80051e6 <HAL_GPIO_Init+0x226>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a1c      	ldr	r2, [pc, #112]	@ (8005210 <HAL_GPIO_Init+0x250>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01f      	beq.n	80051e2 <HAL_GPIO_Init+0x222>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005214 <HAL_GPIO_Init+0x254>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d019      	beq.n	80051de <HAL_GPIO_Init+0x21e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005218 <HAL_GPIO_Init+0x258>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d013      	beq.n	80051da <HAL_GPIO_Init+0x21a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a19      	ldr	r2, [pc, #100]	@ (800521c <HAL_GPIO_Init+0x25c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00d      	beq.n	80051d6 <HAL_GPIO_Init+0x216>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a18      	ldr	r2, [pc, #96]	@ (8005220 <HAL_GPIO_Init+0x260>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d007      	beq.n	80051d2 <HAL_GPIO_Init+0x212>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a17      	ldr	r2, [pc, #92]	@ (8005224 <HAL_GPIO_Init+0x264>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d101      	bne.n	80051ce <HAL_GPIO_Init+0x20e>
 80051ca:	2309      	movs	r3, #9
 80051cc:	e02d      	b.n	800522a <HAL_GPIO_Init+0x26a>
 80051ce:	230a      	movs	r3, #10
 80051d0:	e02b      	b.n	800522a <HAL_GPIO_Init+0x26a>
 80051d2:	2308      	movs	r3, #8
 80051d4:	e029      	b.n	800522a <HAL_GPIO_Init+0x26a>
 80051d6:	2307      	movs	r3, #7
 80051d8:	e027      	b.n	800522a <HAL_GPIO_Init+0x26a>
 80051da:	2306      	movs	r3, #6
 80051dc:	e025      	b.n	800522a <HAL_GPIO_Init+0x26a>
 80051de:	2305      	movs	r3, #5
 80051e0:	e023      	b.n	800522a <HAL_GPIO_Init+0x26a>
 80051e2:	2304      	movs	r3, #4
 80051e4:	e021      	b.n	800522a <HAL_GPIO_Init+0x26a>
 80051e6:	2303      	movs	r3, #3
 80051e8:	e01f      	b.n	800522a <HAL_GPIO_Init+0x26a>
 80051ea:	2302      	movs	r3, #2
 80051ec:	e01d      	b.n	800522a <HAL_GPIO_Init+0x26a>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e01b      	b.n	800522a <HAL_GPIO_Init+0x26a>
 80051f2:	bf00      	nop
 80051f4:	58000080 	.word	0x58000080
 80051f8:	58024400 	.word	0x58024400
 80051fc:	58000400 	.word	0x58000400
 8005200:	58020000 	.word	0x58020000
 8005204:	58020400 	.word	0x58020400
 8005208:	58020800 	.word	0x58020800
 800520c:	58020c00 	.word	0x58020c00
 8005210:	58021000 	.word	0x58021000
 8005214:	58021400 	.word	0x58021400
 8005218:	58021800 	.word	0x58021800
 800521c:	58021c00 	.word	0x58021c00
 8005220:	58022000 	.word	0x58022000
 8005224:	58022400 	.word	0x58022400
 8005228:	2300      	movs	r3, #0
 800522a:	69fa      	ldr	r2, [r7, #28]
 800522c:	f002 0203 	and.w	r2, r2, #3
 8005230:	0092      	lsls	r2, r2, #2
 8005232:	4093      	lsls	r3, r2
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4313      	orrs	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800523a:	4938      	ldr	r1, [pc, #224]	@ (800531c <HAL_GPIO_Init+0x35c>)
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	089b      	lsrs	r3, r3, #2
 8005240:	3302      	adds	r3, #2
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	43db      	mvns	r3, r3
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	4013      	ands	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800526e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	43db      	mvns	r3, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4013      	ands	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800529c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	43db      	mvns	r3, r3
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	4013      	ands	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	43db      	mvns	r3, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4013      	ands	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	3301      	adds	r3, #1
 80052fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	fa22 f303 	lsr.w	r3, r2, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	f47f ae63 	bne.w	8004fd4 <HAL_GPIO_Init+0x14>
  }
}
 800530e:	bf00      	nop
 8005310:	bf00      	nop
 8005312:	3724      	adds	r7, #36	@ 0x24
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	58000400 	.word	0x58000400

08005320 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800532e:	4b75      	ldr	r3, [pc, #468]	@ (8005504 <HAL_GPIO_DeInit+0x1e4>)
 8005330:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8005332:	e0d9      	b.n	80054e8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005334:	2201      	movs	r2, #1
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	4013      	ands	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 80cc 	beq.w	80054e2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800534a:	4a6f      	ldr	r2, [pc, #444]	@ (8005508 <HAL_GPIO_DeInit+0x1e8>)
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	089b      	lsrs	r3, r3, #2
 8005350:	3302      	adds	r3, #2
 8005352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005356:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f003 0303 	and.w	r3, r3, #3
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	220f      	movs	r2, #15
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	4013      	ands	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a67      	ldr	r2, [pc, #412]	@ (800550c <HAL_GPIO_DeInit+0x1ec>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d037      	beq.n	80053e4 <HAL_GPIO_DeInit+0xc4>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a66      	ldr	r2, [pc, #408]	@ (8005510 <HAL_GPIO_DeInit+0x1f0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d031      	beq.n	80053e0 <HAL_GPIO_DeInit+0xc0>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a65      	ldr	r2, [pc, #404]	@ (8005514 <HAL_GPIO_DeInit+0x1f4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d02b      	beq.n	80053dc <HAL_GPIO_DeInit+0xbc>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a64      	ldr	r2, [pc, #400]	@ (8005518 <HAL_GPIO_DeInit+0x1f8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d025      	beq.n	80053d8 <HAL_GPIO_DeInit+0xb8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a63      	ldr	r2, [pc, #396]	@ (800551c <HAL_GPIO_DeInit+0x1fc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d01f      	beq.n	80053d4 <HAL_GPIO_DeInit+0xb4>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a62      	ldr	r2, [pc, #392]	@ (8005520 <HAL_GPIO_DeInit+0x200>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d019      	beq.n	80053d0 <HAL_GPIO_DeInit+0xb0>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a61      	ldr	r2, [pc, #388]	@ (8005524 <HAL_GPIO_DeInit+0x204>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d013      	beq.n	80053cc <HAL_GPIO_DeInit+0xac>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a60      	ldr	r2, [pc, #384]	@ (8005528 <HAL_GPIO_DeInit+0x208>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00d      	beq.n	80053c8 <HAL_GPIO_DeInit+0xa8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a5f      	ldr	r2, [pc, #380]	@ (800552c <HAL_GPIO_DeInit+0x20c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d007      	beq.n	80053c4 <HAL_GPIO_DeInit+0xa4>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a5e      	ldr	r2, [pc, #376]	@ (8005530 <HAL_GPIO_DeInit+0x210>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d101      	bne.n	80053c0 <HAL_GPIO_DeInit+0xa0>
 80053bc:	2309      	movs	r3, #9
 80053be:	e012      	b.n	80053e6 <HAL_GPIO_DeInit+0xc6>
 80053c0:	230a      	movs	r3, #10
 80053c2:	e010      	b.n	80053e6 <HAL_GPIO_DeInit+0xc6>
 80053c4:	2308      	movs	r3, #8
 80053c6:	e00e      	b.n	80053e6 <HAL_GPIO_DeInit+0xc6>
 80053c8:	2307      	movs	r3, #7
 80053ca:	e00c      	b.n	80053e6 <HAL_GPIO_DeInit+0xc6>
 80053cc:	2306      	movs	r3, #6
 80053ce:	e00a      	b.n	80053e6 <HAL_GPIO_DeInit+0xc6>
 80053d0:	2305      	movs	r3, #5
 80053d2:	e008      	b.n	80053e6 <HAL_GPIO_DeInit+0xc6>
 80053d4:	2304      	movs	r3, #4
 80053d6:	e006      	b.n	80053e6 <HAL_GPIO_DeInit+0xc6>
 80053d8:	2303      	movs	r3, #3
 80053da:	e004      	b.n	80053e6 <HAL_GPIO_DeInit+0xc6>
 80053dc:	2302      	movs	r3, #2
 80053de:	e002      	b.n	80053e6 <HAL_GPIO_DeInit+0xc6>
 80053e0:	2301      	movs	r3, #1
 80053e2:	e000      	b.n	80053e6 <HAL_GPIO_DeInit+0xc6>
 80053e4:	2300      	movs	r3, #0
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	f002 0203 	and.w	r2, r2, #3
 80053ec:	0092      	lsls	r2, r2, #2
 80053ee:	4093      	lsls	r3, r2
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d136      	bne.n	8005464 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	43db      	mvns	r3, r3
 80053fe:	401a      	ands	r2, r3
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	43db      	mvns	r3, r3
 800540c:	401a      	ands	r2, r3
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	43db      	mvns	r3, r3
 800541c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005420:	4013      	ands	r3, r2
 8005422:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	43db      	mvns	r3, r3
 800542e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005432:	4013      	ands	r3, r2
 8005434:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	220f      	movs	r2, #15
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005446:	4a30      	ldr	r2, [pc, #192]	@ (8005508 <HAL_GPIO_DeInit+0x1e8>)
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	089b      	lsrs	r3, r3, #2
 800544c:	3302      	adds	r3, #2
 800544e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	43da      	mvns	r2, r3
 8005456:	482c      	ldr	r0, [pc, #176]	@ (8005508 <HAL_GPIO_DeInit+0x1e8>)
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	089b      	lsrs	r3, r3, #2
 800545c:	400a      	ands	r2, r1
 800545e:	3302      	adds	r3, #2
 8005460:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	2103      	movs	r1, #3
 800546e:	fa01 f303 	lsl.w	r3, r1, r3
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	08da      	lsrs	r2, r3, #3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3208      	adds	r2, #8
 8005480:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	220f      	movs	r2, #15
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43db      	mvns	r3, r3
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	08d2      	lsrs	r2, r2, #3
 8005498:	4019      	ands	r1, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3208      	adds	r2, #8
 800549e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	2103      	movs	r1, #3
 80054ac:	fa01 f303 	lsl.w	r3, r1, r3
 80054b0:	43db      	mvns	r3, r3
 80054b2:	401a      	ands	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	2101      	movs	r1, #1
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	fa01 f303 	lsl.w	r3, r1, r3
 80054c4:	43db      	mvns	r3, r3
 80054c6:	401a      	ands	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	2103      	movs	r1, #3
 80054d6:	fa01 f303 	lsl.w	r3, r1, r3
 80054da:	43db      	mvns	r3, r3
 80054dc:	401a      	ands	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	3301      	adds	r3, #1
 80054e6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	fa22 f303 	lsr.w	r3, r2, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f47f af1f 	bne.w	8005334 <HAL_GPIO_DeInit+0x14>
  }
}
 80054f6:	bf00      	nop
 80054f8:	bf00      	nop
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	58000080 	.word	0x58000080
 8005508:	58000400 	.word	0x58000400
 800550c:	58020000 	.word	0x58020000
 8005510:	58020400 	.word	0x58020400
 8005514:	58020800 	.word	0x58020800
 8005518:	58020c00 	.word	0x58020c00
 800551c:	58021000 	.word	0x58021000
 8005520:	58021400 	.word	0x58021400
 8005524:	58021800 	.word	0x58021800
 8005528:	58021c00 	.word	0x58021c00
 800552c:	58022000 	.word	0x58022000
 8005530:	58022400 	.word	0x58022400

08005534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	807b      	strh	r3, [r7, #2]
 8005540:	4613      	mov	r3, r2
 8005542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005544:	787b      	ldrb	r3, [r7, #1]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800554a:	887a      	ldrh	r2, [r7, #2]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005550:	e003      	b.n	800555a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005552:	887b      	ldrh	r3, [r7, #2]
 8005554:	041a      	lsls	r2, r3, #16
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	619a      	str	r2, [r3, #24]
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005578:	887a      	ldrh	r2, [r7, #2]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4013      	ands	r3, r2
 800557e:	041a      	lsls	r2, r3, #16
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	43d9      	mvns	r1, r3
 8005584:	887b      	ldrh	r3, [r7, #2]
 8005586:	400b      	ands	r3, r1
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	619a      	str	r2, [r3, #24]
}
 800558e:	bf00      	nop
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
	...

0800559c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80055a4:	4b19      	ldr	r3, [pc, #100]	@ (800560c <HAL_PWREx_ConfigSupply+0x70>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d00a      	beq.n	80055c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80055b0:	4b16      	ldr	r3, [pc, #88]	@ (800560c <HAL_PWREx_ConfigSupply+0x70>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d001      	beq.n	80055c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e01f      	b.n	8005602 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e01d      	b.n	8005602 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80055c6:	4b11      	ldr	r3, [pc, #68]	@ (800560c <HAL_PWREx_ConfigSupply+0x70>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f023 0207 	bic.w	r2, r3, #7
 80055ce:	490f      	ldr	r1, [pc, #60]	@ (800560c <HAL_PWREx_ConfigSupply+0x70>)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80055d6:	f7fc ff21 	bl	800241c <HAL_GetTick>
 80055da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80055dc:	e009      	b.n	80055f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80055de:	f7fc ff1d 	bl	800241c <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80055ec:	d901      	bls.n	80055f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e007      	b.n	8005602 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80055f2:	4b06      	ldr	r3, [pc, #24]	@ (800560c <HAL_PWREx_ConfigSupply+0x70>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055fe:	d1ee      	bne.n	80055de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	58024800 	.word	0x58024800

08005610 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08c      	sub	sp, #48	@ 0x30
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f000 bc48 	b.w	8005eb4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8088 	beq.w	8005742 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005632:	4b99      	ldr	r3, [pc, #612]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800563a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800563c:	4b96      	ldr	r3, [pc, #600]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 800563e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005640:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005644:	2b10      	cmp	r3, #16
 8005646:	d007      	beq.n	8005658 <HAL_RCC_OscConfig+0x48>
 8005648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800564a:	2b18      	cmp	r3, #24
 800564c:	d111      	bne.n	8005672 <HAL_RCC_OscConfig+0x62>
 800564e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005650:	f003 0303 	and.w	r3, r3, #3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d10c      	bne.n	8005672 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005658:	4b8f      	ldr	r3, [pc, #572]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d06d      	beq.n	8005740 <HAL_RCC_OscConfig+0x130>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d169      	bne.n	8005740 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	f000 bc21 	b.w	8005eb4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800567a:	d106      	bne.n	800568a <HAL_RCC_OscConfig+0x7a>
 800567c:	4b86      	ldr	r3, [pc, #536]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a85      	ldr	r2, [pc, #532]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 8005682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	e02e      	b.n	80056e8 <HAL_RCC_OscConfig+0xd8>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10c      	bne.n	80056ac <HAL_RCC_OscConfig+0x9c>
 8005692:	4b81      	ldr	r3, [pc, #516]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a80      	ldr	r2, [pc, #512]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 8005698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	4b7e      	ldr	r3, [pc, #504]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a7d      	ldr	r2, [pc, #500]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 80056a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	e01d      	b.n	80056e8 <HAL_RCC_OscConfig+0xd8>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056b4:	d10c      	bne.n	80056d0 <HAL_RCC_OscConfig+0xc0>
 80056b6:	4b78      	ldr	r3, [pc, #480]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a77      	ldr	r2, [pc, #476]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 80056bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	4b75      	ldr	r3, [pc, #468]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a74      	ldr	r2, [pc, #464]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 80056c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	e00b      	b.n	80056e8 <HAL_RCC_OscConfig+0xd8>
 80056d0:	4b71      	ldr	r3, [pc, #452]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a70      	ldr	r2, [pc, #448]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 80056d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	4b6e      	ldr	r3, [pc, #440]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a6d      	ldr	r2, [pc, #436]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 80056e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d013      	beq.n	8005718 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f0:	f7fc fe94 	bl	800241c <HAL_GetTick>
 80056f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056f8:	f7fc fe90 	bl	800241c <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b64      	cmp	r3, #100	@ 0x64
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e3d4      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800570a:	4b63      	ldr	r3, [pc, #396]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0f0      	beq.n	80056f8 <HAL_RCC_OscConfig+0xe8>
 8005716:	e014      	b.n	8005742 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005718:	f7fc fe80 	bl	800241c <HAL_GetTick>
 800571c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005720:	f7fc fe7c 	bl	800241c <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b64      	cmp	r3, #100	@ 0x64
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e3c0      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005732:	4b59      	ldr	r3, [pc, #356]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f0      	bne.n	8005720 <HAL_RCC_OscConfig+0x110>
 800573e:	e000      	b.n	8005742 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 80ca 	beq.w	80058e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005750:	4b51      	ldr	r3, [pc, #324]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005758:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800575a:	4b4f      	ldr	r3, [pc, #316]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 800575c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d007      	beq.n	8005776 <HAL_RCC_OscConfig+0x166>
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	2b18      	cmp	r3, #24
 800576a:	d156      	bne.n	800581a <HAL_RCC_OscConfig+0x20a>
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d151      	bne.n	800581a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005776:	4b48      	ldr	r3, [pc, #288]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_RCC_OscConfig+0x17e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e392      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800578e:	4b42      	ldr	r3, [pc, #264]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 0219 	bic.w	r2, r3, #25
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	493f      	ldr	r1, [pc, #252]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 800579c:	4313      	orrs	r3, r2
 800579e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fc fe3c 	bl	800241c <HAL_GetTick>
 80057a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a8:	f7fc fe38 	bl	800241c <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e37c      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057ba:	4b37      	ldr	r3, [pc, #220]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c6:	f7fc fe59 	bl	800247c <HAL_GetREVID>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d817      	bhi.n	8005804 <HAL_RCC_OscConfig+0x1f4>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	2b40      	cmp	r3, #64	@ 0x40
 80057da:	d108      	bne.n	80057ee <HAL_RCC_OscConfig+0x1de>
 80057dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80057e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 80057e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057ec:	e07a      	b.n	80058e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	031b      	lsls	r3, r3, #12
 80057fc:	4926      	ldr	r1, [pc, #152]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005802:	e06f      	b.n	80058e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005804:	4b24      	ldr	r3, [pc, #144]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	061b      	lsls	r3, r3, #24
 8005812:	4921      	ldr	r1, [pc, #132]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 8005814:	4313      	orrs	r3, r2
 8005816:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005818:	e064      	b.n	80058e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d047      	beq.n	80058b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005822:	4b1d      	ldr	r3, [pc, #116]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f023 0219 	bic.w	r2, r3, #25
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	491a      	ldr	r1, [pc, #104]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 8005830:	4313      	orrs	r3, r2
 8005832:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7fc fdf2 	bl	800241c <HAL_GetTick>
 8005838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800583c:	f7fc fdee 	bl	800241c <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e332      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800584e:	4b12      	ldr	r3, [pc, #72]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0304 	and.w	r3, r3, #4
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585a:	f7fc fe0f 	bl	800247c <HAL_GetREVID>
 800585e:	4603      	mov	r3, r0
 8005860:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005864:	4293      	cmp	r3, r2
 8005866:	d819      	bhi.n	800589c <HAL_RCC_OscConfig+0x28c>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2b40      	cmp	r3, #64	@ 0x40
 800586e:	d108      	bne.n	8005882 <HAL_RCC_OscConfig+0x272>
 8005870:	4b09      	ldr	r3, [pc, #36]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005878:	4a07      	ldr	r2, [pc, #28]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 800587a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800587e:	6053      	str	r3, [r2, #4]
 8005880:	e030      	b.n	80058e4 <HAL_RCC_OscConfig+0x2d4>
 8005882:	4b05      	ldr	r3, [pc, #20]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	031b      	lsls	r3, r3, #12
 8005890:	4901      	ldr	r1, [pc, #4]	@ (8005898 <HAL_RCC_OscConfig+0x288>)
 8005892:	4313      	orrs	r3, r2
 8005894:	604b      	str	r3, [r1, #4]
 8005896:	e025      	b.n	80058e4 <HAL_RCC_OscConfig+0x2d4>
 8005898:	58024400 	.word	0x58024400
 800589c:	4b9a      	ldr	r3, [pc, #616]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	061b      	lsls	r3, r3, #24
 80058aa:	4997      	ldr	r1, [pc, #604]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	604b      	str	r3, [r1, #4]
 80058b0:	e018      	b.n	80058e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058b2:	4b95      	ldr	r3, [pc, #596]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a94      	ldr	r2, [pc, #592]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 80058b8:	f023 0301 	bic.w	r3, r3, #1
 80058bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058be:	f7fc fdad 	bl	800241c <HAL_GetTick>
 80058c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058c4:	e008      	b.n	80058d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058c6:	f7fc fda9 	bl	800241c <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e2ed      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058d8:	4b8b      	ldr	r3, [pc, #556]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1f0      	bne.n	80058c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 80a9 	beq.w	8005a44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058f2:	4b85      	ldr	r3, [pc, #532]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058fc:	4b82      	ldr	r3, [pc, #520]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 80058fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005900:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b08      	cmp	r3, #8
 8005906:	d007      	beq.n	8005918 <HAL_RCC_OscConfig+0x308>
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2b18      	cmp	r3, #24
 800590c:	d13a      	bne.n	8005984 <HAL_RCC_OscConfig+0x374>
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	2b01      	cmp	r3, #1
 8005916:	d135      	bne.n	8005984 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005918:	4b7b      	ldr	r3, [pc, #492]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <HAL_RCC_OscConfig+0x320>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	2b80      	cmp	r3, #128	@ 0x80
 800592a:	d001      	beq.n	8005930 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e2c1      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005930:	f7fc fda4 	bl	800247c <HAL_GetREVID>
 8005934:	4603      	mov	r3, r0
 8005936:	f241 0203 	movw	r2, #4099	@ 0x1003
 800593a:	4293      	cmp	r3, r2
 800593c:	d817      	bhi.n	800596e <HAL_RCC_OscConfig+0x35e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	2b20      	cmp	r3, #32
 8005944:	d108      	bne.n	8005958 <HAL_RCC_OscConfig+0x348>
 8005946:	4b70      	ldr	r3, [pc, #448]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800594e:	4a6e      	ldr	r2, [pc, #440]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005950:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005954:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005956:	e075      	b.n	8005a44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005958:	4b6b      	ldr	r3, [pc, #428]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	069b      	lsls	r3, r3, #26
 8005966:	4968      	ldr	r1, [pc, #416]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005968:	4313      	orrs	r3, r2
 800596a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800596c:	e06a      	b.n	8005a44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800596e:	4b66      	ldr	r3, [pc, #408]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	061b      	lsls	r3, r3, #24
 800597c:	4962      	ldr	r1, [pc, #392]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 800597e:	4313      	orrs	r3, r2
 8005980:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005982:	e05f      	b.n	8005a44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d042      	beq.n	8005a12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800598c:	4b5e      	ldr	r3, [pc, #376]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a5d      	ldr	r2, [pc, #372]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005998:	f7fc fd40 	bl	800241c <HAL_GetTick>
 800599c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80059a0:	f7fc fd3c 	bl	800241c <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e280      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059b2:	4b55      	ldr	r3, [pc, #340]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0f0      	beq.n	80059a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059be:	f7fc fd5d 	bl	800247c <HAL_GetREVID>
 80059c2:	4603      	mov	r3, r0
 80059c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d817      	bhi.n	80059fc <HAL_RCC_OscConfig+0x3ec>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	d108      	bne.n	80059e6 <HAL_RCC_OscConfig+0x3d6>
 80059d4:	4b4c      	ldr	r3, [pc, #304]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80059dc:	4a4a      	ldr	r2, [pc, #296]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 80059de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059e2:	6053      	str	r3, [r2, #4]
 80059e4:	e02e      	b.n	8005a44 <HAL_RCC_OscConfig+0x434>
 80059e6:	4b48      	ldr	r3, [pc, #288]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	069b      	lsls	r3, r3, #26
 80059f4:	4944      	ldr	r1, [pc, #272]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	604b      	str	r3, [r1, #4]
 80059fa:	e023      	b.n	8005a44 <HAL_RCC_OscConfig+0x434>
 80059fc:	4b42      	ldr	r3, [pc, #264]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	061b      	lsls	r3, r3, #24
 8005a0a:	493f      	ldr	r1, [pc, #252]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60cb      	str	r3, [r1, #12]
 8005a10:	e018      	b.n	8005a44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005a12:	4b3d      	ldr	r3, [pc, #244]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a3c      	ldr	r2, [pc, #240]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005a18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1e:	f7fc fcfd 	bl	800241c <HAL_GetTick>
 8005a22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005a26:	f7fc fcf9 	bl	800241c <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e23d      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a38:	4b33      	ldr	r3, [pc, #204]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1f0      	bne.n	8005a26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d036      	beq.n	8005abe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d019      	beq.n	8005a8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a58:	4b2b      	ldr	r3, [pc, #172]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005a5e:	f043 0301 	orr.w	r3, r3, #1
 8005a62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a64:	f7fc fcda 	bl	800241c <HAL_GetTick>
 8005a68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a6c:	f7fc fcd6 	bl	800241c <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e21a      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a7e:	4b22      	ldr	r3, [pc, #136]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f0      	beq.n	8005a6c <HAL_RCC_OscConfig+0x45c>
 8005a8a:	e018      	b.n	8005abe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a90:	4a1d      	ldr	r2, [pc, #116]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005a92:	f023 0301 	bic.w	r3, r3, #1
 8005a96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a98:	f7fc fcc0 	bl	800241c <HAL_GetTick>
 8005a9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa0:	f7fc fcbc 	bl	800241c <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e200      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ab2:	4b15      	ldr	r3, [pc, #84]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f0      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0320 	and.w	r3, r3, #32
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d039      	beq.n	8005b3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d01c      	beq.n	8005b0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005ad8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005adc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ade:	f7fc fc9d 	bl	800241c <HAL_GetTick>
 8005ae2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ae6:	f7fc fc99 	bl	800241c <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e1dd      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005af8:	4b03      	ldr	r3, [pc, #12]	@ (8005b08 <HAL_RCC_OscConfig+0x4f8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0f0      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x4d6>
 8005b04:	e01b      	b.n	8005b3e <HAL_RCC_OscConfig+0x52e>
 8005b06:	bf00      	nop
 8005b08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b0c:	4b9b      	ldr	r3, [pc, #620]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a9a      	ldr	r2, [pc, #616]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005b12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b18:	f7fc fc80 	bl	800241c <HAL_GetTick>
 8005b1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b20:	f7fc fc7c 	bl	800241c <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e1c0      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b32:	4b92      	ldr	r3, [pc, #584]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f0      	bne.n	8005b20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 8081 	beq.w	8005c4e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b4c:	4b8c      	ldr	r3, [pc, #560]	@ (8005d80 <HAL_RCC_OscConfig+0x770>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a8b      	ldr	r2, [pc, #556]	@ (8005d80 <HAL_RCC_OscConfig+0x770>)
 8005b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b58:	f7fc fc60 	bl	800241c <HAL_GetTick>
 8005b5c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b60:	f7fc fc5c 	bl	800241c <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b64      	cmp	r3, #100	@ 0x64
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e1a0      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b72:	4b83      	ldr	r3, [pc, #524]	@ (8005d80 <HAL_RCC_OscConfig+0x770>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0f0      	beq.n	8005b60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d106      	bne.n	8005b94 <HAL_RCC_OscConfig+0x584>
 8005b86:	4b7d      	ldr	r3, [pc, #500]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b8a:	4a7c      	ldr	r2, [pc, #496]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005b8c:	f043 0301 	orr.w	r3, r3, #1
 8005b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b92:	e02d      	b.n	8005bf0 <HAL_RCC_OscConfig+0x5e0>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10c      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x5a6>
 8005b9c:	4b77      	ldr	r3, [pc, #476]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba0:	4a76      	ldr	r2, [pc, #472]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005ba2:	f023 0301 	bic.w	r3, r3, #1
 8005ba6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ba8:	4b74      	ldr	r3, [pc, #464]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bac:	4a73      	ldr	r2, [pc, #460]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005bae:	f023 0304 	bic.w	r3, r3, #4
 8005bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bb4:	e01c      	b.n	8005bf0 <HAL_RCC_OscConfig+0x5e0>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	2b05      	cmp	r3, #5
 8005bbc:	d10c      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x5c8>
 8005bbe:	4b6f      	ldr	r3, [pc, #444]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc2:	4a6e      	ldr	r2, [pc, #440]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005bc4:	f043 0304 	orr.w	r3, r3, #4
 8005bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bca:	4b6c      	ldr	r3, [pc, #432]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bce:	4a6b      	ldr	r2, [pc, #428]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bd6:	e00b      	b.n	8005bf0 <HAL_RCC_OscConfig+0x5e0>
 8005bd8:	4b68      	ldr	r3, [pc, #416]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bdc:	4a67      	ldr	r2, [pc, #412]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005bde:	f023 0301 	bic.w	r3, r3, #1
 8005be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005be4:	4b65      	ldr	r3, [pc, #404]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be8:	4a64      	ldr	r2, [pc, #400]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005bea:	f023 0304 	bic.w	r3, r3, #4
 8005bee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d015      	beq.n	8005c24 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf8:	f7fc fc10 	bl	800241c <HAL_GetTick>
 8005bfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bfe:	e00a      	b.n	8005c16 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c00:	f7fc fc0c 	bl	800241c <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e14e      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c16:	4b59      	ldr	r3, [pc, #356]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0ee      	beq.n	8005c00 <HAL_RCC_OscConfig+0x5f0>
 8005c22:	e014      	b.n	8005c4e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c24:	f7fc fbfa 	bl	800241c <HAL_GetTick>
 8005c28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c2a:	e00a      	b.n	8005c42 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c2c:	f7fc fbf6 	bl	800241c <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e138      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c42:	4b4e      	ldr	r3, [pc, #312]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1ee      	bne.n	8005c2c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 812d 	beq.w	8005eb2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c58:	4b48      	ldr	r3, [pc, #288]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c60:	2b18      	cmp	r3, #24
 8005c62:	f000 80bd 	beq.w	8005de0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	f040 809e 	bne.w	8005dac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c70:	4b42      	ldr	r3, [pc, #264]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a41      	ldr	r2, [pc, #260]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005c76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7c:	f7fc fbce 	bl	800241c <HAL_GetTick>
 8005c80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c84:	f7fc fbca 	bl	800241c <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e10e      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c96:	4b39      	ldr	r3, [pc, #228]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f0      	bne.n	8005c84 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ca2:	4b36      	ldr	r3, [pc, #216]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005ca4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ca6:	4b37      	ldr	r3, [pc, #220]	@ (8005d84 <HAL_RCC_OscConfig+0x774>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005cb2:	0112      	lsls	r2, r2, #4
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	4931      	ldr	r1, [pc, #196]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	628b      	str	r3, [r1, #40]	@ 0x28
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	025b      	lsls	r3, r3, #9
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	041b      	lsls	r3, r3, #16
 8005cda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	061b      	lsls	r3, r3, #24
 8005ce8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005cec:	4923      	ldr	r1, [pc, #140]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005cf2:	4b22      	ldr	r3, [pc, #136]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf6:	4a21      	ldr	r2, [pc, #132]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d02:	4b21      	ldr	r3, [pc, #132]	@ (8005d88 <HAL_RCC_OscConfig+0x778>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d0a:	00d2      	lsls	r2, r2, #3
 8005d0c:	491b      	ldr	r1, [pc, #108]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005d12:	4b1a      	ldr	r3, [pc, #104]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d16:	f023 020c 	bic.w	r2, r3, #12
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1e:	4917      	ldr	r1, [pc, #92]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005d24:	4b15      	ldr	r3, [pc, #84]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d28:	f023 0202 	bic.w	r2, r3, #2
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d30:	4912      	ldr	r1, [pc, #72]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d36:	4b11      	ldr	r3, [pc, #68]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3a:	4a10      	ldr	r2, [pc, #64]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d42:	4b0e      	ldr	r3, [pc, #56]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d46:	4a0d      	ldr	r2, [pc, #52]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d52:	4a0a      	ldr	r2, [pc, #40]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005d5a:	4b08      	ldr	r3, [pc, #32]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5e:	4a07      	ldr	r2, [pc, #28]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005d60:	f043 0301 	orr.w	r3, r3, #1
 8005d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d66:	4b05      	ldr	r3, [pc, #20]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a04      	ldr	r2, [pc, #16]	@ (8005d7c <HAL_RCC_OscConfig+0x76c>)
 8005d6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d72:	f7fc fb53 	bl	800241c <HAL_GetTick>
 8005d76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d78:	e011      	b.n	8005d9e <HAL_RCC_OscConfig+0x78e>
 8005d7a:	bf00      	nop
 8005d7c:	58024400 	.word	0x58024400
 8005d80:	58024800 	.word	0x58024800
 8005d84:	fffffc0c 	.word	0xfffffc0c
 8005d88:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d8c:	f7fc fb46 	bl	800241c <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e08a      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d9e:	4b47      	ldr	r3, [pc, #284]	@ (8005ebc <HAL_RCC_OscConfig+0x8ac>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0f0      	beq.n	8005d8c <HAL_RCC_OscConfig+0x77c>
 8005daa:	e082      	b.n	8005eb2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dac:	4b43      	ldr	r3, [pc, #268]	@ (8005ebc <HAL_RCC_OscConfig+0x8ac>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a42      	ldr	r2, [pc, #264]	@ (8005ebc <HAL_RCC_OscConfig+0x8ac>)
 8005db2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db8:	f7fc fb30 	bl	800241c <HAL_GetTick>
 8005dbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc0:	f7fc fb2c 	bl	800241c <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e070      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8005ebc <HAL_RCC_OscConfig+0x8ac>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1f0      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x7b0>
 8005dde:	e068      	b.n	8005eb2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005de0:	4b36      	ldr	r3, [pc, #216]	@ (8005ebc <HAL_RCC_OscConfig+0x8ac>)
 8005de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005de6:	4b35      	ldr	r3, [pc, #212]	@ (8005ebc <HAL_RCC_OscConfig+0x8ac>)
 8005de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d031      	beq.n	8005e58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f003 0203 	and.w	r2, r3, #3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d12a      	bne.n	8005e58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d122      	bne.n	8005e58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d11a      	bne.n	8005e58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	0a5b      	lsrs	r3, r3, #9
 8005e26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d111      	bne.n	8005e58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	0c1b      	lsrs	r3, r3, #16
 8005e38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d108      	bne.n	8005e58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	0e1b      	lsrs	r3, r3, #24
 8005e4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d001      	beq.n	8005e5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e02b      	b.n	8005eb4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005e5c:	4b17      	ldr	r3, [pc, #92]	@ (8005ebc <HAL_RCC_OscConfig+0x8ac>)
 8005e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e60:	08db      	lsrs	r3, r3, #3
 8005e62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d01f      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005e72:	4b12      	ldr	r3, [pc, #72]	@ (8005ebc <HAL_RCC_OscConfig+0x8ac>)
 8005e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e76:	4a11      	ldr	r2, [pc, #68]	@ (8005ebc <HAL_RCC_OscConfig+0x8ac>)
 8005e78:	f023 0301 	bic.w	r3, r3, #1
 8005e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e7e:	f7fc facd 	bl	800241c <HAL_GetTick>
 8005e82:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005e84:	bf00      	nop
 8005e86:	f7fc fac9 	bl	800241c <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d0f9      	beq.n	8005e86 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e92:	4b0a      	ldr	r3, [pc, #40]	@ (8005ebc <HAL_RCC_OscConfig+0x8ac>)
 8005e94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e96:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec0 <HAL_RCC_OscConfig+0x8b0>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005e9e:	00d2      	lsls	r2, r2, #3
 8005ea0:	4906      	ldr	r1, [pc, #24]	@ (8005ebc <HAL_RCC_OscConfig+0x8ac>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005ea6:	4b05      	ldr	r3, [pc, #20]	@ (8005ebc <HAL_RCC_OscConfig+0x8ac>)
 8005ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eaa:	4a04      	ldr	r2, [pc, #16]	@ (8005ebc <HAL_RCC_OscConfig+0x8ac>)
 8005eac:	f043 0301 	orr.w	r3, r3, #1
 8005eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3730      	adds	r7, #48	@ 0x30
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	58024400 	.word	0x58024400
 8005ec0:	ffff0007 	.word	0xffff0007

08005ec4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e19c      	b.n	8006212 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ed8:	4b8a      	ldr	r3, [pc, #552]	@ (8006104 <HAL_RCC_ClockConfig+0x240>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d910      	bls.n	8005f08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ee6:	4b87      	ldr	r3, [pc, #540]	@ (8006104 <HAL_RCC_ClockConfig+0x240>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f023 020f 	bic.w	r2, r3, #15
 8005eee:	4985      	ldr	r1, [pc, #532]	@ (8006104 <HAL_RCC_ClockConfig+0x240>)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ef6:	4b83      	ldr	r3, [pc, #524]	@ (8006104 <HAL_RCC_ClockConfig+0x240>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d001      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e184      	b.n	8006212 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d010      	beq.n	8005f36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691a      	ldr	r2, [r3, #16]
 8005f18:	4b7b      	ldr	r3, [pc, #492]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d908      	bls.n	8005f36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f24:	4b78      	ldr	r3, [pc, #480]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	4975      	ldr	r1, [pc, #468]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d010      	beq.n	8005f64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695a      	ldr	r2, [r3, #20]
 8005f46:	4b70      	ldr	r3, [pc, #448]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d908      	bls.n	8005f64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f52:	4b6d      	ldr	r3, [pc, #436]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	496a      	ldr	r1, [pc, #424]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0310 	and.w	r3, r3, #16
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d010      	beq.n	8005f92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	699a      	ldr	r2, [r3, #24]
 8005f74:	4b64      	ldr	r3, [pc, #400]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d908      	bls.n	8005f92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f80:	4b61      	ldr	r3, [pc, #388]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	495e      	ldr	r1, [pc, #376]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0320 	and.w	r3, r3, #32
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d010      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	69da      	ldr	r2, [r3, #28]
 8005fa2:	4b59      	ldr	r3, [pc, #356]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d908      	bls.n	8005fc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005fae:	4b56      	ldr	r3, [pc, #344]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	4953      	ldr	r1, [pc, #332]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d010      	beq.n	8005fee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f003 030f 	and.w	r3, r3, #15
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d908      	bls.n	8005fee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fdc:	4b4a      	ldr	r3, [pc, #296]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	f023 020f 	bic.w	r2, r3, #15
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	4947      	ldr	r1, [pc, #284]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d055      	beq.n	80060a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ffa:	4b43      	ldr	r3, [pc, #268]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	4940      	ldr	r1, [pc, #256]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8006008:	4313      	orrs	r3, r2
 800600a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d107      	bne.n	8006024 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006014:	4b3c      	ldr	r3, [pc, #240]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d121      	bne.n	8006064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e0f6      	b.n	8006212 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2b03      	cmp	r3, #3
 800602a:	d107      	bne.n	800603c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800602c:	4b36      	ldr	r3, [pc, #216]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d115      	bne.n	8006064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e0ea      	b.n	8006212 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d107      	bne.n	8006054 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006044:	4b30      	ldr	r3, [pc, #192]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800604c:	2b00      	cmp	r3, #0
 800604e:	d109      	bne.n	8006064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e0de      	b.n	8006212 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006054:	4b2c      	ldr	r3, [pc, #176]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e0d6      	b.n	8006212 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006064:	4b28      	ldr	r3, [pc, #160]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	f023 0207 	bic.w	r2, r3, #7
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	4925      	ldr	r1, [pc, #148]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8006072:	4313      	orrs	r3, r2
 8006074:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006076:	f7fc f9d1 	bl	800241c <HAL_GetTick>
 800607a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800607c:	e00a      	b.n	8006094 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800607e:	f7fc f9cd 	bl	800241c <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800608c:	4293      	cmp	r3, r2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e0be      	b.n	8006212 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006094:	4b1c      	ldr	r3, [pc, #112]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d1eb      	bne.n	800607e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d010      	beq.n	80060d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	4b14      	ldr	r3, [pc, #80]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	429a      	cmp	r2, r3
 80060c0:	d208      	bcs.n	80060d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060c2:	4b11      	ldr	r3, [pc, #68]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	f023 020f 	bic.w	r2, r3, #15
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	490e      	ldr	r1, [pc, #56]	@ (8006108 <HAL_RCC_ClockConfig+0x244>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006104 <HAL_RCC_ClockConfig+0x240>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d214      	bcs.n	800610c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e2:	4b08      	ldr	r3, [pc, #32]	@ (8006104 <HAL_RCC_ClockConfig+0x240>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f023 020f 	bic.w	r2, r3, #15
 80060ea:	4906      	ldr	r1, [pc, #24]	@ (8006104 <HAL_RCC_ClockConfig+0x240>)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f2:	4b04      	ldr	r3, [pc, #16]	@ (8006104 <HAL_RCC_ClockConfig+0x240>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d005      	beq.n	800610c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e086      	b.n	8006212 <HAL_RCC_ClockConfig+0x34e>
 8006104:	52002000 	.word	0x52002000
 8006108:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b00      	cmp	r3, #0
 8006116:	d010      	beq.n	800613a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691a      	ldr	r2, [r3, #16]
 800611c:	4b3f      	ldr	r3, [pc, #252]	@ (800621c <HAL_RCC_ClockConfig+0x358>)
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006124:	429a      	cmp	r2, r3
 8006126:	d208      	bcs.n	800613a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006128:	4b3c      	ldr	r3, [pc, #240]	@ (800621c <HAL_RCC_ClockConfig+0x358>)
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	4939      	ldr	r1, [pc, #228]	@ (800621c <HAL_RCC_ClockConfig+0x358>)
 8006136:	4313      	orrs	r3, r2
 8006138:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b00      	cmp	r3, #0
 8006144:	d010      	beq.n	8006168 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695a      	ldr	r2, [r3, #20]
 800614a:	4b34      	ldr	r3, [pc, #208]	@ (800621c <HAL_RCC_ClockConfig+0x358>)
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006152:	429a      	cmp	r2, r3
 8006154:	d208      	bcs.n	8006168 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006156:	4b31      	ldr	r3, [pc, #196]	@ (800621c <HAL_RCC_ClockConfig+0x358>)
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	492e      	ldr	r1, [pc, #184]	@ (800621c <HAL_RCC_ClockConfig+0x358>)
 8006164:	4313      	orrs	r3, r2
 8006166:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b00      	cmp	r3, #0
 8006172:	d010      	beq.n	8006196 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699a      	ldr	r2, [r3, #24]
 8006178:	4b28      	ldr	r3, [pc, #160]	@ (800621c <HAL_RCC_ClockConfig+0x358>)
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006180:	429a      	cmp	r2, r3
 8006182:	d208      	bcs.n	8006196 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006184:	4b25      	ldr	r3, [pc, #148]	@ (800621c <HAL_RCC_ClockConfig+0x358>)
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	4922      	ldr	r1, [pc, #136]	@ (800621c <HAL_RCC_ClockConfig+0x358>)
 8006192:	4313      	orrs	r3, r2
 8006194:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d010      	beq.n	80061c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69da      	ldr	r2, [r3, #28]
 80061a6:	4b1d      	ldr	r3, [pc, #116]	@ (800621c <HAL_RCC_ClockConfig+0x358>)
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d208      	bcs.n	80061c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80061b2:	4b1a      	ldr	r3, [pc, #104]	@ (800621c <HAL_RCC_ClockConfig+0x358>)
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	4917      	ldr	r1, [pc, #92]	@ (800621c <HAL_RCC_ClockConfig+0x358>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061c4:	f000 f834 	bl	8006230 <HAL_RCC_GetSysClockFreq>
 80061c8:	4602      	mov	r2, r0
 80061ca:	4b14      	ldr	r3, [pc, #80]	@ (800621c <HAL_RCC_ClockConfig+0x358>)
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	0a1b      	lsrs	r3, r3, #8
 80061d0:	f003 030f 	and.w	r3, r3, #15
 80061d4:	4912      	ldr	r1, [pc, #72]	@ (8006220 <HAL_RCC_ClockConfig+0x35c>)
 80061d6:	5ccb      	ldrb	r3, [r1, r3]
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	fa22 f303 	lsr.w	r3, r2, r3
 80061e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061e2:	4b0e      	ldr	r3, [pc, #56]	@ (800621c <HAL_RCC_ClockConfig+0x358>)
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	4a0d      	ldr	r2, [pc, #52]	@ (8006220 <HAL_RCC_ClockConfig+0x35c>)
 80061ec:	5cd3      	ldrb	r3, [r2, r3]
 80061ee:	f003 031f 	and.w	r3, r3, #31
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	fa22 f303 	lsr.w	r3, r2, r3
 80061f8:	4a0a      	ldr	r2, [pc, #40]	@ (8006224 <HAL_RCC_ClockConfig+0x360>)
 80061fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80061fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006228 <HAL_RCC_ClockConfig+0x364>)
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006202:	4b0a      	ldr	r3, [pc, #40]	@ (800622c <HAL_RCC_ClockConfig+0x368>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4618      	mov	r0, r3
 8006208:	f7fc f8be 	bl	8002388 <HAL_InitTick>
 800620c:	4603      	mov	r3, r0
 800620e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	58024400 	.word	0x58024400
 8006220:	0800bbec 	.word	0x0800bbec
 8006224:	240000ac 	.word	0x240000ac
 8006228:	240000a8 	.word	0x240000a8
 800622c:	240000b0 	.word	0x240000b0

08006230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006230:	b480      	push	{r7}
 8006232:	b089      	sub	sp, #36	@ 0x24
 8006234:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006236:	4bb3      	ldr	r3, [pc, #716]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800623e:	2b18      	cmp	r3, #24
 8006240:	f200 8155 	bhi.w	80064ee <HAL_RCC_GetSysClockFreq+0x2be>
 8006244:	a201      	add	r2, pc, #4	@ (adr r2, 800624c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624a:	bf00      	nop
 800624c:	080062b1 	.word	0x080062b1
 8006250:	080064ef 	.word	0x080064ef
 8006254:	080064ef 	.word	0x080064ef
 8006258:	080064ef 	.word	0x080064ef
 800625c:	080064ef 	.word	0x080064ef
 8006260:	080064ef 	.word	0x080064ef
 8006264:	080064ef 	.word	0x080064ef
 8006268:	080064ef 	.word	0x080064ef
 800626c:	080062d7 	.word	0x080062d7
 8006270:	080064ef 	.word	0x080064ef
 8006274:	080064ef 	.word	0x080064ef
 8006278:	080064ef 	.word	0x080064ef
 800627c:	080064ef 	.word	0x080064ef
 8006280:	080064ef 	.word	0x080064ef
 8006284:	080064ef 	.word	0x080064ef
 8006288:	080064ef 	.word	0x080064ef
 800628c:	080062dd 	.word	0x080062dd
 8006290:	080064ef 	.word	0x080064ef
 8006294:	080064ef 	.word	0x080064ef
 8006298:	080064ef 	.word	0x080064ef
 800629c:	080064ef 	.word	0x080064ef
 80062a0:	080064ef 	.word	0x080064ef
 80062a4:	080064ef 	.word	0x080064ef
 80062a8:	080064ef 	.word	0x080064ef
 80062ac:	080062e3 	.word	0x080062e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062b0:	4b94      	ldr	r3, [pc, #592]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0320 	and.w	r3, r3, #32
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d009      	beq.n	80062d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062bc:	4b91      	ldr	r3, [pc, #580]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	08db      	lsrs	r3, r3, #3
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	4a90      	ldr	r2, [pc, #576]	@ (8006508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062c8:	fa22 f303 	lsr.w	r3, r2, r3
 80062cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80062ce:	e111      	b.n	80064f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80062d0:	4b8d      	ldr	r3, [pc, #564]	@ (8006508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062d2:	61bb      	str	r3, [r7, #24]
      break;
 80062d4:	e10e      	b.n	80064f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80062d6:	4b8d      	ldr	r3, [pc, #564]	@ (800650c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80062d8:	61bb      	str	r3, [r7, #24]
      break;
 80062da:	e10b      	b.n	80064f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80062dc:	4b8c      	ldr	r3, [pc, #560]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80062de:	61bb      	str	r3, [r7, #24]
      break;
 80062e0:	e108      	b.n	80064f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062e2:	4b88      	ldr	r3, [pc, #544]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80062ec:	4b85      	ldr	r3, [pc, #532]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f0:	091b      	lsrs	r3, r3, #4
 80062f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80062f8:	4b82      	ldr	r3, [pc, #520]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006302:	4b80      	ldr	r3, [pc, #512]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006306:	08db      	lsrs	r3, r3, #3
 8006308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	fb02 f303 	mul.w	r3, r2, r3
 8006312:	ee07 3a90 	vmov	s15, r3
 8006316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800631a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 80e1 	beq.w	80064e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b02      	cmp	r3, #2
 800632a:	f000 8083 	beq.w	8006434 <HAL_RCC_GetSysClockFreq+0x204>
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2b02      	cmp	r3, #2
 8006332:	f200 80a1 	bhi.w	8006478 <HAL_RCC_GetSysClockFreq+0x248>
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <HAL_RCC_GetSysClockFreq+0x114>
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d056      	beq.n	80063f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006342:	e099      	b.n	8006478 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006344:	4b6f      	ldr	r3, [pc, #444]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d02d      	beq.n	80063ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006350:	4b6c      	ldr	r3, [pc, #432]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	08db      	lsrs	r3, r3, #3
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	4a6b      	ldr	r2, [pc, #428]	@ (8006508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800635c:	fa22 f303 	lsr.w	r3, r2, r3
 8006360:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	ee07 3a90 	vmov	s15, r3
 8006368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800637a:	4b62      	ldr	r3, [pc, #392]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800637c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800637e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006382:	ee07 3a90 	vmov	s15, r3
 8006386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800638a:	ed97 6a02 	vldr	s12, [r7, #8]
 800638e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006514 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800639a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800639e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80063aa:	e087      	b.n	80064bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	ee07 3a90 	vmov	s15, r3
 80063b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006518 <HAL_RCC_GetSysClockFreq+0x2e8>
 80063ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063be:	4b51      	ldr	r3, [pc, #324]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c6:	ee07 3a90 	vmov	s15, r3
 80063ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80063d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006514 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063ee:	e065      	b.n	80064bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800651c <HAL_RCC_GetSysClockFreq+0x2ec>
 80063fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006402:	4b40      	ldr	r3, [pc, #256]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006412:	ed97 6a02 	vldr	s12, [r7, #8]
 8006416:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006514 <HAL_RCC_GetSysClockFreq+0x2e4>
 800641a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800641e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800642a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006432:	e043      	b.n	80064bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	ee07 3a90 	vmov	s15, r3
 800643a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006520 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006446:	4b2f      	ldr	r3, [pc, #188]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006456:	ed97 6a02 	vldr	s12, [r7, #8]
 800645a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006514 <HAL_RCC_GetSysClockFreq+0x2e4>
 800645e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800646a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800646e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006472:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006476:	e021      	b.n	80064bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	ee07 3a90 	vmov	s15, r3
 800647e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006482:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800651c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800648a:	4b1e      	ldr	r3, [pc, #120]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800648c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006492:	ee07 3a90 	vmov	s15, r3
 8006496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800649a:	ed97 6a02 	vldr	s12, [r7, #8]
 800649e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006514 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80064bc:	4b11      	ldr	r3, [pc, #68]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c0:	0a5b      	lsrs	r3, r3, #9
 80064c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064c6:	3301      	adds	r3, #1
 80064c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	ee07 3a90 	vmov	s15, r3
 80064d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80064d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064e0:	ee17 3a90 	vmov	r3, s15
 80064e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80064e6:	e005      	b.n	80064f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	61bb      	str	r3, [r7, #24]
      break;
 80064ec:	e002      	b.n	80064f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80064ee:	4b07      	ldr	r3, [pc, #28]	@ (800650c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80064f0:	61bb      	str	r3, [r7, #24]
      break;
 80064f2:	bf00      	nop
  }

  return sysclockfreq;
 80064f4:	69bb      	ldr	r3, [r7, #24]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3724      	adds	r7, #36	@ 0x24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	58024400 	.word	0x58024400
 8006508:	03d09000 	.word	0x03d09000
 800650c:	003d0900 	.word	0x003d0900
 8006510:	017d7840 	.word	0x017d7840
 8006514:	46000000 	.word	0x46000000
 8006518:	4c742400 	.word	0x4c742400
 800651c:	4a742400 	.word	0x4a742400
 8006520:	4bbebc20 	.word	0x4bbebc20

08006524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800652a:	f7ff fe81 	bl	8006230 <HAL_RCC_GetSysClockFreq>
 800652e:	4602      	mov	r2, r0
 8006530:	4b10      	ldr	r3, [pc, #64]	@ (8006574 <HAL_RCC_GetHCLKFreq+0x50>)
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	0a1b      	lsrs	r3, r3, #8
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	490f      	ldr	r1, [pc, #60]	@ (8006578 <HAL_RCC_GetHCLKFreq+0x54>)
 800653c:	5ccb      	ldrb	r3, [r1, r3]
 800653e:	f003 031f 	and.w	r3, r3, #31
 8006542:	fa22 f303 	lsr.w	r3, r2, r3
 8006546:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006548:	4b0a      	ldr	r3, [pc, #40]	@ (8006574 <HAL_RCC_GetHCLKFreq+0x50>)
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	4a09      	ldr	r2, [pc, #36]	@ (8006578 <HAL_RCC_GetHCLKFreq+0x54>)
 8006552:	5cd3      	ldrb	r3, [r2, r3]
 8006554:	f003 031f 	and.w	r3, r3, #31
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	fa22 f303 	lsr.w	r3, r2, r3
 800655e:	4a07      	ldr	r2, [pc, #28]	@ (800657c <HAL_RCC_GetHCLKFreq+0x58>)
 8006560:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006562:	4a07      	ldr	r2, [pc, #28]	@ (8006580 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006568:	4b04      	ldr	r3, [pc, #16]	@ (800657c <HAL_RCC_GetHCLKFreq+0x58>)
 800656a:	681b      	ldr	r3, [r3, #0]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	58024400 	.word	0x58024400
 8006578:	0800bbec 	.word	0x0800bbec
 800657c:	240000ac 	.word	0x240000ac
 8006580:	240000a8 	.word	0x240000a8

08006584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006588:	f7ff ffcc 	bl	8006524 <HAL_RCC_GetHCLKFreq>
 800658c:	4602      	mov	r2, r0
 800658e:	4b06      	ldr	r3, [pc, #24]	@ (80065a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	091b      	lsrs	r3, r3, #4
 8006594:	f003 0307 	and.w	r3, r3, #7
 8006598:	4904      	ldr	r1, [pc, #16]	@ (80065ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800659a:	5ccb      	ldrb	r3, [r1, r3]
 800659c:	f003 031f 	and.w	r3, r3, #31
 80065a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	58024400 	.word	0x58024400
 80065ac:	0800bbec 	.word	0x0800bbec

080065b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80065b4:	f7ff ffb6 	bl	8006524 <HAL_RCC_GetHCLKFreq>
 80065b8:	4602      	mov	r2, r0
 80065ba:	4b06      	ldr	r3, [pc, #24]	@ (80065d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	0a1b      	lsrs	r3, r3, #8
 80065c0:	f003 0307 	and.w	r3, r3, #7
 80065c4:	4904      	ldr	r1, [pc, #16]	@ (80065d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80065c6:	5ccb      	ldrb	r3, [r1, r3]
 80065c8:	f003 031f 	and.w	r3, r3, #31
 80065cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	58024400 	.word	0x58024400
 80065d8:	0800bbec 	.word	0x0800bbec

080065dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065e0:	b0c8      	sub	sp, #288	@ 0x120
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065e8:	2300      	movs	r3, #0
 80065ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065ee:	2300      	movs	r3, #0
 80065f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006600:	2500      	movs	r5, #0
 8006602:	ea54 0305 	orrs.w	r3, r4, r5
 8006606:	d049      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006608:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800660c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800660e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006612:	d02f      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006614:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006618:	d828      	bhi.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800661a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800661e:	d01a      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006620:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006624:	d822      	bhi.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800662a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800662e:	d007      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006630:	e01c      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006632:	4bb8      	ldr	r3, [pc, #736]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006636:	4ab7      	ldr	r2, [pc, #732]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800663c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800663e:	e01a      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006640:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006644:	3308      	adds	r3, #8
 8006646:	2102      	movs	r1, #2
 8006648:	4618      	mov	r0, r3
 800664a:	f001 fc73 	bl	8007f34 <RCCEx_PLL2_Config>
 800664e:	4603      	mov	r3, r0
 8006650:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006654:	e00f      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800665a:	3328      	adds	r3, #40	@ 0x28
 800665c:	2102      	movs	r1, #2
 800665e:	4618      	mov	r0, r3
 8006660:	f001 fd1a 	bl	8008098 <RCCEx_PLL3_Config>
 8006664:	4603      	mov	r3, r0
 8006666:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800666a:	e004      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006672:	e000      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006676:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800667e:	4ba5      	ldr	r3, [pc, #660]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006682:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006686:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800668a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800668c:	4aa1      	ldr	r2, [pc, #644]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800668e:	430b      	orrs	r3, r1
 8006690:	6513      	str	r3, [r2, #80]	@ 0x50
 8006692:	e003      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006694:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006698:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800669c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80066a8:	f04f 0900 	mov.w	r9, #0
 80066ac:	ea58 0309 	orrs.w	r3, r8, r9
 80066b0:	d047      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80066b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b8:	2b04      	cmp	r3, #4
 80066ba:	d82a      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80066bc:	a201      	add	r2, pc, #4	@ (adr r2, 80066c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	080066d9 	.word	0x080066d9
 80066c8:	080066e7 	.word	0x080066e7
 80066cc:	080066fd 	.word	0x080066fd
 80066d0:	0800671b 	.word	0x0800671b
 80066d4:	0800671b 	.word	0x0800671b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d8:	4b8e      	ldr	r3, [pc, #568]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066dc:	4a8d      	ldr	r2, [pc, #564]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066e4:	e01a      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066ea:	3308      	adds	r3, #8
 80066ec:	2100      	movs	r1, #0
 80066ee:	4618      	mov	r0, r3
 80066f0:	f001 fc20 	bl	8007f34 <RCCEx_PLL2_Config>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066fa:	e00f      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006700:	3328      	adds	r3, #40	@ 0x28
 8006702:	2100      	movs	r1, #0
 8006704:	4618      	mov	r0, r3
 8006706:	f001 fcc7 	bl	8008098 <RCCEx_PLL3_Config>
 800670a:	4603      	mov	r3, r0
 800670c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006710:	e004      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006718:	e000      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800671a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800671c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006724:	4b7b      	ldr	r3, [pc, #492]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006728:	f023 0107 	bic.w	r1, r3, #7
 800672c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006732:	4a78      	ldr	r2, [pc, #480]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006734:	430b      	orrs	r3, r1
 8006736:	6513      	str	r3, [r2, #80]	@ 0x50
 8006738:	e003      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800673e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006742:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800674e:	f04f 0b00 	mov.w	fp, #0
 8006752:	ea5a 030b 	orrs.w	r3, sl, fp
 8006756:	d04c      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800675c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800675e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006762:	d030      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006768:	d829      	bhi.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800676a:	2bc0      	cmp	r3, #192	@ 0xc0
 800676c:	d02d      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800676e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006770:	d825      	bhi.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006772:	2b80      	cmp	r3, #128	@ 0x80
 8006774:	d018      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006776:	2b80      	cmp	r3, #128	@ 0x80
 8006778:	d821      	bhi.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800677e:	2b40      	cmp	r3, #64	@ 0x40
 8006780:	d007      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006782:	e01c      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006784:	4b63      	ldr	r3, [pc, #396]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006788:	4a62      	ldr	r2, [pc, #392]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800678a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800678e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006790:	e01c      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006792:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006796:	3308      	adds	r3, #8
 8006798:	2100      	movs	r1, #0
 800679a:	4618      	mov	r0, r3
 800679c:	f001 fbca 	bl	8007f34 <RCCEx_PLL2_Config>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80067a6:	e011      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067ac:	3328      	adds	r3, #40	@ 0x28
 80067ae:	2100      	movs	r1, #0
 80067b0:	4618      	mov	r0, r3
 80067b2:	f001 fc71 	bl	8008098 <RCCEx_PLL3_Config>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80067bc:	e006      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80067c4:	e002      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80067c6:	bf00      	nop
 80067c8:	e000      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80067ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10a      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80067d4:	4b4f      	ldr	r3, [pc, #316]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80067dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067e2:	4a4c      	ldr	r2, [pc, #304]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067e4:	430b      	orrs	r3, r1
 80067e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80067e8:	e003      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80067f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80067fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006802:	2300      	movs	r3, #0
 8006804:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006808:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800680c:	460b      	mov	r3, r1
 800680e:	4313      	orrs	r3, r2
 8006810:	d053      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006812:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006816:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800681a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800681e:	d035      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006820:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006824:	d82e      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006826:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800682a:	d031      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800682c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006830:	d828      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006832:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006836:	d01a      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006838:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800683c:	d822      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006842:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006846:	d007      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006848:	e01c      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800684a:	4b32      	ldr	r3, [pc, #200]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800684c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684e:	4a31      	ldr	r2, [pc, #196]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006854:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006856:	e01c      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006858:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800685c:	3308      	adds	r3, #8
 800685e:	2100      	movs	r1, #0
 8006860:	4618      	mov	r0, r3
 8006862:	f001 fb67 	bl	8007f34 <RCCEx_PLL2_Config>
 8006866:	4603      	mov	r3, r0
 8006868:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800686c:	e011      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800686e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006872:	3328      	adds	r3, #40	@ 0x28
 8006874:	2100      	movs	r1, #0
 8006876:	4618      	mov	r0, r3
 8006878:	f001 fc0e 	bl	8008098 <RCCEx_PLL3_Config>
 800687c:	4603      	mov	r3, r0
 800687e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006882:	e006      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800688a:	e002      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800688c:	bf00      	nop
 800688e:	e000      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006892:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10b      	bne.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800689a:	4b1e      	ldr	r3, [pc, #120]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800689c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800689e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80068a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80068aa:	4a1a      	ldr	r2, [pc, #104]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068ac:	430b      	orrs	r3, r1
 80068ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80068b0:	e003      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80068ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80068c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80068ca:	2300      	movs	r3, #0
 80068cc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80068d0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80068d4:	460b      	mov	r3, r1
 80068d6:	4313      	orrs	r3, r2
 80068d8:	d056      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80068da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80068e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068e6:	d038      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80068e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068ec:	d831      	bhi.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80068ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80068f2:	d034      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80068f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80068f8:	d82b      	bhi.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80068fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068fe:	d01d      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006900:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006904:	d825      	bhi.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006906:	2b00      	cmp	r3, #0
 8006908:	d006      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800690a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800690e:	d00a      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006910:	e01f      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006912:	bf00      	nop
 8006914:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006918:	4ba2      	ldr	r3, [pc, #648]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800691a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691c:	4aa1      	ldr	r2, [pc, #644]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800691e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006924:	e01c      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800692a:	3308      	adds	r3, #8
 800692c:	2100      	movs	r1, #0
 800692e:	4618      	mov	r0, r3
 8006930:	f001 fb00 	bl	8007f34 <RCCEx_PLL2_Config>
 8006934:	4603      	mov	r3, r0
 8006936:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800693a:	e011      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800693c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006940:	3328      	adds	r3, #40	@ 0x28
 8006942:	2100      	movs	r1, #0
 8006944:	4618      	mov	r0, r3
 8006946:	f001 fba7 	bl	8008098 <RCCEx_PLL3_Config>
 800694a:	4603      	mov	r3, r0
 800694c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006950:	e006      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006958:	e002      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800695a:	bf00      	nop
 800695c:	e000      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800695e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006960:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10b      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006968:	4b8e      	ldr	r3, [pc, #568]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800696a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800696c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006974:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006978:	4a8a      	ldr	r2, [pc, #552]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800697a:	430b      	orrs	r3, r1
 800697c:	6593      	str	r3, [r2, #88]	@ 0x58
 800697e:	e003      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006980:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006984:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006994:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006998:	2300      	movs	r3, #0
 800699a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800699e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4313      	orrs	r3, r2
 80069a6:	d03a      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80069a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ae:	2b30      	cmp	r3, #48	@ 0x30
 80069b0:	d01f      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80069b2:	2b30      	cmp	r3, #48	@ 0x30
 80069b4:	d819      	bhi.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	d00c      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80069ba:	2b20      	cmp	r3, #32
 80069bc:	d815      	bhi.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d019      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80069c2:	2b10      	cmp	r3, #16
 80069c4:	d111      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c6:	4b77      	ldr	r3, [pc, #476]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ca:	4a76      	ldr	r2, [pc, #472]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80069d2:	e011      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069d8:	3308      	adds	r3, #8
 80069da:	2102      	movs	r1, #2
 80069dc:	4618      	mov	r0, r3
 80069de:	f001 faa9 	bl	8007f34 <RCCEx_PLL2_Config>
 80069e2:	4603      	mov	r3, r0
 80069e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80069e8:	e006      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80069f0:	e002      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80069f2:	bf00      	nop
 80069f4:	e000      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80069f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10a      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006a00:	4b68      	ldr	r3, [pc, #416]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a04:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a0e:	4a65      	ldr	r2, [pc, #404]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a10:	430b      	orrs	r3, r1
 8006a12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a14:	e003      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a1a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006a2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	d051      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a48:	d035      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006a4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a4e:	d82e      	bhi.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006a50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a54:	d031      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006a56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a5a:	d828      	bhi.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006a5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a60:	d01a      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a66:	d822      	bhi.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006a6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a70:	d007      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006a72:	e01c      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a74:	4b4b      	ldr	r3, [pc, #300]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a78:	4a4a      	ldr	r2, [pc, #296]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a80:	e01c      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a86:	3308      	adds	r3, #8
 8006a88:	2100      	movs	r1, #0
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f001 fa52 	bl	8007f34 <RCCEx_PLL2_Config>
 8006a90:	4603      	mov	r3, r0
 8006a92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a96:	e011      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a9c:	3328      	adds	r3, #40	@ 0x28
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f001 faf9 	bl	8008098 <RCCEx_PLL3_Config>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006aac:	e006      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006ab4:	e002      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006ab6:	bf00      	nop
 8006ab8:	e000      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006abc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006ac4:	4b37      	ldr	r3, [pc, #220]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ad2:	4a34      	ldr	r2, [pc, #208]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ad4:	430b      	orrs	r3, r1
 8006ad6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ad8:	e003      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ada:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ade:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006aee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006af2:	2300      	movs	r3, #0
 8006af4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006af8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006afc:	460b      	mov	r3, r1
 8006afe:	4313      	orrs	r3, r2
 8006b00:	d056      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b0c:	d033      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006b0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b12:	d82c      	bhi.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006b14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b18:	d02f      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006b1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b1e:	d826      	bhi.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006b20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b24:	d02b      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006b26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b2a:	d820      	bhi.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006b2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b30:	d012      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006b32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b36:	d81a      	bhi.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d022      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b40:	d115      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b46:	3308      	adds	r3, #8
 8006b48:	2101      	movs	r1, #1
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f001 f9f2 	bl	8007f34 <RCCEx_PLL2_Config>
 8006b50:	4603      	mov	r3, r0
 8006b52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006b56:	e015      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b5c:	3328      	adds	r3, #40	@ 0x28
 8006b5e:	2101      	movs	r1, #1
 8006b60:	4618      	mov	r0, r3
 8006b62:	f001 fa99 	bl	8008098 <RCCEx_PLL3_Config>
 8006b66:	4603      	mov	r3, r0
 8006b68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006b6c:	e00a      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006b74:	e006      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006b76:	bf00      	nop
 8006b78:	e004      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006b7a:	bf00      	nop
 8006b7c:	e002      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006b7e:	bf00      	nop
 8006b80:	e000      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10d      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006b8c:	4b05      	ldr	r3, [pc, #20]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b90:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b9a:	4a02      	ldr	r2, [pc, #8]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ba0:	e006      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006ba2:	bf00      	nop
 8006ba4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006bac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006bc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	d055      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bdc:	d033      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006be2:	d82c      	bhi.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006be8:	d02f      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bee:	d826      	bhi.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006bf0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bf4:	d02b      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006bf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bfa:	d820      	bhi.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c00:	d012      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c06:	d81a      	bhi.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d022      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006c0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c10:	d115      	bne.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c16:	3308      	adds	r3, #8
 8006c18:	2101      	movs	r1, #1
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 f98a 	bl	8007f34 <RCCEx_PLL2_Config>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006c26:	e015      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c2c:	3328      	adds	r3, #40	@ 0x28
 8006c2e:	2101      	movs	r1, #1
 8006c30:	4618      	mov	r0, r3
 8006c32:	f001 fa31 	bl	8008098 <RCCEx_PLL3_Config>
 8006c36:	4603      	mov	r3, r0
 8006c38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006c3c:	e00a      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006c44:	e006      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006c46:	bf00      	nop
 8006c48:	e004      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006c4a:	bf00      	nop
 8006c4c:	e002      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006c4e:	bf00      	nop
 8006c50:	e000      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10b      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006c5c:	4ba3      	ldr	r3, [pc, #652]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c60:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006c6c:	4a9f      	ldr	r2, [pc, #636]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c6e:	430b      	orrs	r3, r1
 8006c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c72:	e003      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006c88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006c92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	d037      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ca6:	d00e      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006ca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cac:	d816      	bhi.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d018      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006cb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cb6:	d111      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cb8:	4b8c      	ldr	r3, [pc, #560]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbc:	4a8b      	ldr	r2, [pc, #556]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006cc4:	e00f      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cca:	3308      	adds	r3, #8
 8006ccc:	2101      	movs	r1, #1
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f001 f930 	bl	8007f34 <RCCEx_PLL2_Config>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006cda:	e004      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006ce2:	e000      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ce6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10a      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006cee:	4b7f      	ldr	r3, [pc, #508]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cf2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cfc:	4a7b      	ldr	r2, [pc, #492]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cfe:	430b      	orrs	r3, r1
 8006d00:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d02:	e003      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d14:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006d18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006d26:	460b      	mov	r3, r1
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	d039      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d81c      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006d36:	a201      	add	r2, pc, #4	@ (adr r2, 8006d3c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3c:	08006d79 	.word	0x08006d79
 8006d40:	08006d4d 	.word	0x08006d4d
 8006d44:	08006d5b 	.word	0x08006d5b
 8006d48:	08006d79 	.word	0x08006d79
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d4c:	4b67      	ldr	r3, [pc, #412]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d50:	4a66      	ldr	r2, [pc, #408]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006d58:	e00f      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d5e:	3308      	adds	r3, #8
 8006d60:	2102      	movs	r1, #2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f001 f8e6 	bl	8007f34 <RCCEx_PLL2_Config>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006d6e:	e004      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006d76:	e000      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10a      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006d82:	4b5a      	ldr	r3, [pc, #360]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d86:	f023 0103 	bic.w	r1, r3, #3
 8006d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d90:	4a56      	ldr	r2, [pc, #344]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d92:	430b      	orrs	r3, r1
 8006d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d96:	e003      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006dac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006db0:	2300      	movs	r3, #0
 8006db2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006db6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	f000 809f 	beq.w	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dc2:	4b4b      	ldr	r3, [pc, #300]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a4a      	ldr	r2, [pc, #296]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006dce:	f7fb fb25 	bl	800241c <HAL_GetTick>
 8006dd2:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dd6:	e00b      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dd8:	f7fb fb20 	bl	800241c <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b64      	cmp	r3, #100	@ 0x64
 8006de6:	d903      	bls.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006dee:	e005      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006df0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0ed      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006dfc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d179      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006e04:	4b39      	ldr	r3, [pc, #228]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e10:	4053      	eors	r3, r2
 8006e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d015      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e1a:	4b34      	ldr	r3, [pc, #208]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e22:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e26:	4b31      	ldr	r3, [pc, #196]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e2a:	4a30      	ldr	r2, [pc, #192]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e30:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e32:	4b2e      	ldr	r3, [pc, #184]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e36:	4a2d      	ldr	r2, [pc, #180]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e3c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006e3e:	4a2b      	ldr	r2, [pc, #172]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e44:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e52:	d118      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e54:	f7fb fae2 	bl	800241c <HAL_GetTick>
 8006e58:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e5c:	e00d      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e5e:	f7fb fadd 	bl	800241c <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006e68:	1ad2      	subs	r2, r2, r3
 8006e6a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d903      	bls.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8006e78:	e005      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0eb      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006e86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d129      	bne.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e9e:	d10e      	bne.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006ea0:	4b12      	ldr	r3, [pc, #72]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006eb0:	091a      	lsrs	r2, r3, #4
 8006eb2:	4b10      	ldr	r3, [pc, #64]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	4a0d      	ldr	r2, [pc, #52]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	6113      	str	r3, [r2, #16]
 8006ebc:	e005      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ec4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006ec8:	6113      	str	r3, [r2, #16]
 8006eca:	4b08      	ldr	r3, [pc, #32]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ecc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ed2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eda:	4a04      	ldr	r2, [pc, #16]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006edc:	430b      	orrs	r3, r1
 8006ede:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ee0:	e00e      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ee2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ee6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006eea:	e009      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006eec:	58024400 	.word	0x58024400
 8006ef0:	58024800 	.word	0x58024800
 8006ef4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006efc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	f002 0301 	and.w	r3, r2, #1
 8006f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f10:	2300      	movs	r3, #0
 8006f12:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006f16:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	f000 8089 	beq.w	8007034 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f28:	2b28      	cmp	r3, #40	@ 0x28
 8006f2a:	d86b      	bhi.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f32:	bf00      	nop
 8006f34:	0800700d 	.word	0x0800700d
 8006f38:	08007005 	.word	0x08007005
 8006f3c:	08007005 	.word	0x08007005
 8006f40:	08007005 	.word	0x08007005
 8006f44:	08007005 	.word	0x08007005
 8006f48:	08007005 	.word	0x08007005
 8006f4c:	08007005 	.word	0x08007005
 8006f50:	08007005 	.word	0x08007005
 8006f54:	08006fd9 	.word	0x08006fd9
 8006f58:	08007005 	.word	0x08007005
 8006f5c:	08007005 	.word	0x08007005
 8006f60:	08007005 	.word	0x08007005
 8006f64:	08007005 	.word	0x08007005
 8006f68:	08007005 	.word	0x08007005
 8006f6c:	08007005 	.word	0x08007005
 8006f70:	08007005 	.word	0x08007005
 8006f74:	08006fef 	.word	0x08006fef
 8006f78:	08007005 	.word	0x08007005
 8006f7c:	08007005 	.word	0x08007005
 8006f80:	08007005 	.word	0x08007005
 8006f84:	08007005 	.word	0x08007005
 8006f88:	08007005 	.word	0x08007005
 8006f8c:	08007005 	.word	0x08007005
 8006f90:	08007005 	.word	0x08007005
 8006f94:	0800700d 	.word	0x0800700d
 8006f98:	08007005 	.word	0x08007005
 8006f9c:	08007005 	.word	0x08007005
 8006fa0:	08007005 	.word	0x08007005
 8006fa4:	08007005 	.word	0x08007005
 8006fa8:	08007005 	.word	0x08007005
 8006fac:	08007005 	.word	0x08007005
 8006fb0:	08007005 	.word	0x08007005
 8006fb4:	0800700d 	.word	0x0800700d
 8006fb8:	08007005 	.word	0x08007005
 8006fbc:	08007005 	.word	0x08007005
 8006fc0:	08007005 	.word	0x08007005
 8006fc4:	08007005 	.word	0x08007005
 8006fc8:	08007005 	.word	0x08007005
 8006fcc:	08007005 	.word	0x08007005
 8006fd0:	08007005 	.word	0x08007005
 8006fd4:	0800700d 	.word	0x0800700d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fdc:	3308      	adds	r3, #8
 8006fde:	2101      	movs	r1, #1
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 ffa7 	bl	8007f34 <RCCEx_PLL2_Config>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006fec:	e00f      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ff2:	3328      	adds	r3, #40	@ 0x28
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f001 f84e 	bl	8008098 <RCCEx_PLL3_Config>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007002:	e004      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800700a:	e000      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800700c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800700e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10a      	bne.n	800702c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007016:	4bbf      	ldr	r3, [pc, #764]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800701a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800701e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007022:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007024:	4abb      	ldr	r2, [pc, #748]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007026:	430b      	orrs	r3, r1
 8007028:	6553      	str	r3, [r2, #84]	@ 0x54
 800702a:	e003      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800702c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007030:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007034:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	f002 0302 	and.w	r3, r2, #2
 8007040:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007044:	2300      	movs	r3, #0
 8007046:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800704a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800704e:	460b      	mov	r3, r1
 8007050:	4313      	orrs	r3, r2
 8007052:	d041      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007054:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007058:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800705a:	2b05      	cmp	r3, #5
 800705c:	d824      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800705e:	a201      	add	r2, pc, #4	@ (adr r2, 8007064 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	080070b1 	.word	0x080070b1
 8007068:	0800707d 	.word	0x0800707d
 800706c:	08007093 	.word	0x08007093
 8007070:	080070b1 	.word	0x080070b1
 8007074:	080070b1 	.word	0x080070b1
 8007078:	080070b1 	.word	0x080070b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800707c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007080:	3308      	adds	r3, #8
 8007082:	2101      	movs	r1, #1
 8007084:	4618      	mov	r0, r3
 8007086:	f000 ff55 	bl	8007f34 <RCCEx_PLL2_Config>
 800708a:	4603      	mov	r3, r0
 800708c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007090:	e00f      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007096:	3328      	adds	r3, #40	@ 0x28
 8007098:	2101      	movs	r1, #1
 800709a:	4618      	mov	r0, r3
 800709c:	f000 fffc 	bl	8008098 <RCCEx_PLL3_Config>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80070a6:	e004      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80070ae:	e000      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80070b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10a      	bne.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80070ba:	4b96      	ldr	r3, [pc, #600]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070be:	f023 0107 	bic.w	r1, r3, #7
 80070c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070c8:	4a92      	ldr	r2, [pc, #584]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070ca:	430b      	orrs	r3, r1
 80070cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80070ce:	e003      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	f002 0304 	and.w	r3, r2, #4
 80070e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80070e8:	2300      	movs	r3, #0
 80070ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070ee:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80070f2:	460b      	mov	r3, r1
 80070f4:	4313      	orrs	r3, r2
 80070f6:	d044      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80070f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007100:	2b05      	cmp	r3, #5
 8007102:	d825      	bhi.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007104:	a201      	add	r2, pc, #4	@ (adr r2, 800710c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710a:	bf00      	nop
 800710c:	08007159 	.word	0x08007159
 8007110:	08007125 	.word	0x08007125
 8007114:	0800713b 	.word	0x0800713b
 8007118:	08007159 	.word	0x08007159
 800711c:	08007159 	.word	0x08007159
 8007120:	08007159 	.word	0x08007159
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007124:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007128:	3308      	adds	r3, #8
 800712a:	2101      	movs	r1, #1
 800712c:	4618      	mov	r0, r3
 800712e:	f000 ff01 	bl	8007f34 <RCCEx_PLL2_Config>
 8007132:	4603      	mov	r3, r0
 8007134:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007138:	e00f      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800713a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800713e:	3328      	adds	r3, #40	@ 0x28
 8007140:	2101      	movs	r1, #1
 8007142:	4618      	mov	r0, r3
 8007144:	f000 ffa8 	bl	8008098 <RCCEx_PLL3_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800714e:	e004      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007156:	e000      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800715a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10b      	bne.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007162:	4b6c      	ldr	r3, [pc, #432]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007166:	f023 0107 	bic.w	r1, r3, #7
 800716a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800716e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007172:	4a68      	ldr	r2, [pc, #416]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007174:	430b      	orrs	r3, r1
 8007176:	6593      	str	r3, [r2, #88]	@ 0x58
 8007178:	e003      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800717e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007182:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718a:	f002 0320 	and.w	r3, r2, #32
 800718e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007192:	2300      	movs	r3, #0
 8007194:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007198:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800719c:	460b      	mov	r3, r1
 800719e:	4313      	orrs	r3, r2
 80071a0:	d055      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80071a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071ae:	d033      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80071b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071b4:	d82c      	bhi.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80071b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071ba:	d02f      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80071bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071c0:	d826      	bhi.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80071c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80071c6:	d02b      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80071c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80071cc:	d820      	bhi.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80071ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071d2:	d012      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80071d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071d8:	d81a      	bhi.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d022      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80071de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071e2:	d115      	bne.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071e8:	3308      	adds	r3, #8
 80071ea:	2100      	movs	r1, #0
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 fea1 	bl	8007f34 <RCCEx_PLL2_Config>
 80071f2:	4603      	mov	r3, r0
 80071f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80071f8:	e015      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071fe:	3328      	adds	r3, #40	@ 0x28
 8007200:	2102      	movs	r1, #2
 8007202:	4618      	mov	r0, r3
 8007204:	f000 ff48 	bl	8008098 <RCCEx_PLL3_Config>
 8007208:	4603      	mov	r3, r0
 800720a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800720e:	e00a      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007216:	e006      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007218:	bf00      	nop
 800721a:	e004      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800721c:	bf00      	nop
 800721e:	e002      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007220:	bf00      	nop
 8007222:	e000      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007226:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10b      	bne.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800722e:	4b39      	ldr	r3, [pc, #228]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007232:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007236:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800723a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800723e:	4a35      	ldr	r2, [pc, #212]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007240:	430b      	orrs	r3, r1
 8007242:	6553      	str	r3, [r2, #84]	@ 0x54
 8007244:	e003      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007246:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800724a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800724e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007256:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800725a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800725e:	2300      	movs	r3, #0
 8007260:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007264:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007268:	460b      	mov	r3, r1
 800726a:	4313      	orrs	r3, r2
 800726c:	d058      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800726e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007272:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007276:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800727a:	d033      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800727c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007280:	d82c      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007286:	d02f      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007288:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800728c:	d826      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800728e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007292:	d02b      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007294:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007298:	d820      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800729a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800729e:	d012      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80072a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072a4:	d81a      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d022      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80072aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072ae:	d115      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072b4:	3308      	adds	r3, #8
 80072b6:	2100      	movs	r1, #0
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fe3b 	bl	8007f34 <RCCEx_PLL2_Config>
 80072be:	4603      	mov	r3, r0
 80072c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80072c4:	e015      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072ca:	3328      	adds	r3, #40	@ 0x28
 80072cc:	2102      	movs	r1, #2
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 fee2 	bl	8008098 <RCCEx_PLL3_Config>
 80072d4:	4603      	mov	r3, r0
 80072d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80072da:	e00a      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80072e2:	e006      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80072e4:	bf00      	nop
 80072e6:	e004      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80072e8:	bf00      	nop
 80072ea:	e002      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80072ec:	bf00      	nop
 80072ee:	e000      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80072f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10e      	bne.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80072fa:	4b06      	ldr	r3, [pc, #24]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072fe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007302:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007306:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800730a:	4a02      	ldr	r2, [pc, #8]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800730c:	430b      	orrs	r3, r1
 800730e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007310:	e006      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007312:	bf00      	nop
 8007314:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007318:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800731c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800732c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007330:	2300      	movs	r3, #0
 8007332:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007336:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800733a:	460b      	mov	r3, r1
 800733c:	4313      	orrs	r3, r2
 800733e:	d055      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007340:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007344:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007348:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800734c:	d033      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800734e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007352:	d82c      	bhi.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007354:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007358:	d02f      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800735a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800735e:	d826      	bhi.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007360:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007364:	d02b      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007366:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800736a:	d820      	bhi.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800736c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007370:	d012      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007372:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007376:	d81a      	bhi.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d022      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800737c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007380:	d115      	bne.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007386:	3308      	adds	r3, #8
 8007388:	2100      	movs	r1, #0
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fdd2 	bl	8007f34 <RCCEx_PLL2_Config>
 8007390:	4603      	mov	r3, r0
 8007392:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007396:	e015      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800739c:	3328      	adds	r3, #40	@ 0x28
 800739e:	2102      	movs	r1, #2
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 fe79 	bl	8008098 <RCCEx_PLL3_Config>
 80073a6:	4603      	mov	r3, r0
 80073a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80073ac:	e00a      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80073b4:	e006      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80073b6:	bf00      	nop
 80073b8:	e004      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80073ba:	bf00      	nop
 80073bc:	e002      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80073be:	bf00      	nop
 80073c0:	e000      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80073c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10b      	bne.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80073cc:	4bbb      	ldr	r3, [pc, #748]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80073ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073d0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80073d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80073dc:	4ab7      	ldr	r2, [pc, #732]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80073de:	430b      	orrs	r3, r1
 80073e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80073e2:	e003      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80073ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f4:	f002 0308 	and.w	r3, r2, #8
 80073f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80073fc:	2300      	movs	r3, #0
 80073fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007402:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007406:	460b      	mov	r3, r1
 8007408:	4313      	orrs	r3, r2
 800740a:	d01e      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800740c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007410:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007418:	d10c      	bne.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800741a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800741e:	3328      	adds	r3, #40	@ 0x28
 8007420:	2102      	movs	r1, #2
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fe38 	bl	8008098 <RCCEx_PLL3_Config>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007434:	4ba1      	ldr	r3, [pc, #644]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007438:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800743c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007444:	4a9d      	ldr	r2, [pc, #628]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007446:	430b      	orrs	r3, r1
 8007448:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800744a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	f002 0310 	and.w	r3, r2, #16
 8007456:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800745a:	2300      	movs	r3, #0
 800745c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007460:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007464:	460b      	mov	r3, r1
 8007466:	4313      	orrs	r3, r2
 8007468:	d01e      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800746a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800746e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007476:	d10c      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800747c:	3328      	adds	r3, #40	@ 0x28
 800747e:	2102      	movs	r1, #2
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fe09 	bl	8008098 <RCCEx_PLL3_Config>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007492:	4b8a      	ldr	r3, [pc, #552]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007496:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800749a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800749e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074a2:	4a86      	ldr	r2, [pc, #536]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80074a4:	430b      	orrs	r3, r1
 80074a6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80074b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074b6:	2300      	movs	r3, #0
 80074b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074ba:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80074be:	460b      	mov	r3, r1
 80074c0:	4313      	orrs	r3, r2
 80074c2:	d03e      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80074c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80074cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074d0:	d022      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80074d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074d6:	d81b      	bhi.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80074dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074e0:	d00b      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80074e2:	e015      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074e8:	3308      	adds	r3, #8
 80074ea:	2100      	movs	r1, #0
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 fd21 	bl	8007f34 <RCCEx_PLL2_Config>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80074f8:	e00f      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074fe:	3328      	adds	r3, #40	@ 0x28
 8007500:	2102      	movs	r1, #2
 8007502:	4618      	mov	r0, r3
 8007504:	f000 fdc8 	bl	8008098 <RCCEx_PLL3_Config>
 8007508:	4603      	mov	r3, r0
 800750a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800750e:	e004      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007516:	e000      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800751a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10b      	bne.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007522:	4b66      	ldr	r3, [pc, #408]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007526:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800752a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800752e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007532:	4a62      	ldr	r2, [pc, #392]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007534:	430b      	orrs	r3, r1
 8007536:	6593      	str	r3, [r2, #88]	@ 0x58
 8007538:	e003      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800753e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800754e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007550:	2300      	movs	r3, #0
 8007552:	677b      	str	r3, [r7, #116]	@ 0x74
 8007554:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007558:	460b      	mov	r3, r1
 800755a:	4313      	orrs	r3, r2
 800755c:	d03b      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800755e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007566:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800756a:	d01f      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xfd0>
 800756c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007570:	d818      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
 8007572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007576:	d003      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
 8007578:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800757c:	d007      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xfb2>
 800757e:	e011      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007580:	4b4e      	ldr	r3, [pc, #312]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007584:	4a4d      	ldr	r2, [pc, #308]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800758a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800758c:	e00f      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xfd2>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800758e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007592:	3328      	adds	r3, #40	@ 0x28
 8007594:	2101      	movs	r1, #1
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fd7e 	bl	8008098 <RCCEx_PLL3_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80075a2:	e004      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80075aa:	e000      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        break;
 80075ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10b      	bne.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xff2>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075b6:	4b41      	ldr	r3, [pc, #260]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80075b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80075be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c6:	4a3d      	ldr	r2, [pc, #244]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80075c8:	430b      	orrs	r3, r1
 80075ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80075cc:	e003      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xffa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80075d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80075e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075e4:	2300      	movs	r3, #0
 80075e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075e8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80075ec:	460b      	mov	r3, r1
 80075ee:	4313      	orrs	r3, r2
 80075f0:	d031      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x107a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80075f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x1028>
 80075fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007600:	d007      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 8007602:	e011      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x104c>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007604:	4b2d      	ldr	r3, [pc, #180]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007608:	4a2c      	ldr	r2, [pc, #176]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800760a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800760e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007610:	e00e      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007612:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007616:	3308      	adds	r3, #8
 8007618:	2102      	movs	r1, #2
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fc8a 	bl	8007f34 <RCCEx_PLL2_Config>
 8007620:	4603      	mov	r3, r0
 8007622:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007626:	e003      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      default:
        ret = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800762e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007630:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x1072>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007638:	4b20      	ldr	r3, [pc, #128]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800763a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800763c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007640:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007646:	4a1d      	ldr	r2, [pc, #116]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8007648:	430b      	orrs	r3, r1
 800764a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800764c:	e003      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x107a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007652:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007662:	663b      	str	r3, [r7, #96]	@ 0x60
 8007664:	2300      	movs	r3, #0
 8007666:	667b      	str	r3, [r7, #100]	@ 0x64
 8007668:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800766c:	460b      	mov	r3, r1
 800766e:	4313      	orrs	r3, r2
 8007670:	d03b      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800767a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800767e:	d018      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x10d6>
 8007680:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007684:	d811      	bhi.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 8007686:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800768a:	d014      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x10da>
 800768c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007690:	d80b      	bhi.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d014      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x10e4>
 8007696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800769a:	d106      	bne.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x10ce>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800769c:	4b07      	ldr	r3, [pc, #28]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	4a06      	ldr	r2, [pc, #24]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80076a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80076a8:	e00b      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80076b0:	e007      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 80076b2:	bf00      	nop
 80076b4:	e005      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 80076b6:	bf00      	nop
 80076b8:	e003      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
 80076ba:	bf00      	nop
 80076bc:	58024400 	.word	0x58024400
        break;
 80076c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10b      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x1106>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076ca:	4bba      	ldr	r3, [pc, #744]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80076cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80076d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076da:	4ab6      	ldr	r2, [pc, #728]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80076dc:	430b      	orrs	r3, r1
 80076de:	6553      	str	r3, [r2, #84]	@ 0x54
 80076e0:	e003      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80076f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076f8:	2300      	movs	r3, #0
 80076fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076fc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007700:	460b      	mov	r3, r1
 8007702:	4313      	orrs	r3, r2
 8007704:	d009      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007706:	4bab      	ldr	r3, [pc, #684]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800770a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800770e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007714:	4aa7      	ldr	r2, [pc, #668]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007716:	430b      	orrs	r3, r1
 8007718:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800771a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007726:	653b      	str	r3, [r7, #80]	@ 0x50
 8007728:	2300      	movs	r3, #0
 800772a:	657b      	str	r3, [r7, #84]	@ 0x54
 800772c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007730:	460b      	mov	r3, r1
 8007732:	4313      	orrs	r3, r2
 8007734:	d00a      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x1170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007736:	4b9f      	ldr	r3, [pc, #636]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800773e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007742:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007746:	4a9b      	ldr	r2, [pc, #620]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007748:	430b      	orrs	r3, r1
 800774a:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800774c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007754:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800775a:	2300      	movs	r3, #0
 800775c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800775e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007762:	460b      	mov	r3, r1
 8007764:	4313      	orrs	r3, r2
 8007766:	d009      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007768:	4b92      	ldr	r3, [pc, #584]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800776a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800776c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007770:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007776:	4a8f      	ldr	r2, [pc, #572]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007778:	430b      	orrs	r3, r1
 800777a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800777c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007788:	643b      	str	r3, [r7, #64]	@ 0x40
 800778a:	2300      	movs	r3, #0
 800778c:	647b      	str	r3, [r7, #68]	@ 0x44
 800778e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007792:	460b      	mov	r3, r1
 8007794:	4313      	orrs	r3, r2
 8007796:	d00e      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007798:	4b86      	ldr	r3, [pc, #536]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	4a85      	ldr	r2, [pc, #532]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800779e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077a2:	6113      	str	r3, [r2, #16]
 80077a4:	4b83      	ldr	r3, [pc, #524]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80077a6:	6919      	ldr	r1, [r3, #16]
 80077a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80077b0:	4a80      	ldr	r2, [pc, #512]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80077b2:	430b      	orrs	r3, r1
 80077b4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80077b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80077c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077c4:	2300      	movs	r3, #0
 80077c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077c8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80077cc:	460b      	mov	r3, r1
 80077ce:	4313      	orrs	r3, r2
 80077d0:	d009      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x120a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80077d2:	4b78      	ldr	r3, [pc, #480]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80077d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80077da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e0:	4a74      	ldr	r2, [pc, #464]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80077e2:	430b      	orrs	r3, r1
 80077e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80077e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ee:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80077f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80077f4:	2300      	movs	r3, #0
 80077f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80077f8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80077fc:	460b      	mov	r3, r1
 80077fe:	4313      	orrs	r3, r2
 8007800:	d00a      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x123c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007802:	4b6c      	ldr	r3, [pc, #432]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007806:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800780a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800780e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007812:	4a68      	ldr	r2, [pc, #416]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8007814:	430b      	orrs	r3, r1
 8007816:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007818:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	2100      	movs	r1, #0
 8007822:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800782a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800782e:	460b      	mov	r3, r1
 8007830:	4313      	orrs	r3, r2
 8007832:	d011      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x127c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007838:	3308      	adds	r3, #8
 800783a:	2100      	movs	r1, #0
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fb79 	bl	8007f34 <RCCEx_PLL2_Config>
 8007842:	4603      	mov	r3, r0
 8007844:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007848:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x127c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007850:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007854:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007858:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007860:	2100      	movs	r1, #0
 8007862:	6239      	str	r1, [r7, #32]
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	627b      	str	r3, [r7, #36]	@ 0x24
 800786a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800786e:	460b      	mov	r3, r1
 8007870:	4313      	orrs	r3, r2
 8007872:	d011      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007878:	3308      	adds	r3, #8
 800787a:	2101      	movs	r1, #1
 800787c:	4618      	mov	r0, r3
 800787e:	f000 fb59 	bl	8007f34 <RCCEx_PLL2_Config>
 8007882:	4603      	mov	r3, r0
 8007884:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007888:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007890:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007894:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	2100      	movs	r1, #0
 80078a2:	61b9      	str	r1, [r7, #24]
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	61fb      	str	r3, [r7, #28]
 80078aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80078ae:	460b      	mov	r3, r1
 80078b0:	4313      	orrs	r3, r2
 80078b2:	d011      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078b8:	3308      	adds	r3, #8
 80078ba:	2102      	movs	r1, #2
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 fb39 	bl	8007f34 <RCCEx_PLL2_Config>
 80078c2:	4603      	mov	r3, r0
 80078c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80078c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80078d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e0:	2100      	movs	r1, #0
 80078e2:	6139      	str	r1, [r7, #16]
 80078e4:	f003 0308 	and.w	r3, r3, #8
 80078e8:	617b      	str	r3, [r7, #20]
 80078ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80078ee:	460b      	mov	r3, r1
 80078f0:	4313      	orrs	r3, r2
 80078f2:	d011      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x133c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078f8:	3328      	adds	r3, #40	@ 0x28
 80078fa:	2100      	movs	r1, #0
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 fbcb 	bl	8008098 <RCCEx_PLL3_Config>
 8007902:	4603      	mov	r3, r0
 8007904:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8007908:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x133c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007910:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007914:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007918:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800791c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007920:	2100      	movs	r1, #0
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	f003 0310 	and.w	r3, r3, #16
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800792e:	460b      	mov	r3, r1
 8007930:	4313      	orrs	r3, r2
 8007932:	d011      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x137c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007934:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007938:	3328      	adds	r3, #40	@ 0x28
 800793a:	2101      	movs	r1, #1
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fbab 	bl	8008098 <RCCEx_PLL3_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007948:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800794c:	2b00      	cmp	r3, #0
 800794e:	d003      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x137c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007950:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007954:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007958:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	2100      	movs	r1, #0
 8007962:	6039      	str	r1, [r7, #0]
 8007964:	f003 0320 	and.w	r3, r3, #32
 8007968:	607b      	str	r3, [r7, #4]
 800796a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800796e:	460b      	mov	r3, r1
 8007970:	4313      	orrs	r3, r2
 8007972:	d011      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007974:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007978:	3328      	adds	r3, #40	@ 0x28
 800797a:	2102      	movs	r1, #2
 800797c:	4618      	mov	r0, r3
 800797e:	f000 fb8b 	bl	8008098 <RCCEx_PLL3_Config>
 8007982:	4603      	mov	r3, r0
 8007984:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007988:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007990:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007994:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8007998:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x13c8>
  {
    return HAL_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	e000      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x13ca>
  }
  return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80079ac:	46bd      	mov	sp, r7
 80079ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079b2:	bf00      	nop
 80079b4:	58024400 	.word	0x58024400

080079b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80079bc:	f7fe fdb2 	bl	8006524 <HAL_RCC_GetHCLKFreq>
 80079c0:	4602      	mov	r2, r0
 80079c2:	4b06      	ldr	r3, [pc, #24]	@ (80079dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	091b      	lsrs	r3, r3, #4
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	4904      	ldr	r1, [pc, #16]	@ (80079e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80079ce:	5ccb      	ldrb	r3, [r1, r3]
 80079d0:	f003 031f 	and.w	r3, r3, #31
 80079d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80079d8:	4618      	mov	r0, r3
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	58024400 	.word	0x58024400
 80079e0:	0800bbec 	.word	0x0800bbec

080079e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b089      	sub	sp, #36	@ 0x24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079ec:	4ba1      	ldr	r3, [pc, #644]	@ (8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f0:	f003 0303 	and.w	r3, r3, #3
 80079f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80079f6:	4b9f      	ldr	r3, [pc, #636]	@ (8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079fa:	0b1b      	lsrs	r3, r3, #12
 80079fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007a02:	4b9c      	ldr	r3, [pc, #624]	@ (8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a06:	091b      	lsrs	r3, r3, #4
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007a0e:	4b99      	ldr	r3, [pc, #612]	@ (8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a12:	08db      	lsrs	r3, r3, #3
 8007a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	fb02 f303 	mul.w	r3, r2, r3
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 8111 	beq.w	8007c54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	f000 8083 	beq.w	8007b40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	f200 80a1 	bhi.w	8007b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d056      	beq.n	8007afc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007a4e:	e099      	b.n	8007b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a50:	4b88      	ldr	r3, [pc, #544]	@ (8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0320 	and.w	r3, r3, #32
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d02d      	beq.n	8007ab8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a5c:	4b85      	ldr	r3, [pc, #532]	@ (8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	08db      	lsrs	r3, r3, #3
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	4a84      	ldr	r2, [pc, #528]	@ (8007c78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007a68:	fa22 f303 	lsr.w	r3, r2, r3
 8007a6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	ee07 3a90 	vmov	s15, r3
 8007a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a86:	4b7b      	ldr	r3, [pc, #492]	@ (8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a8e:	ee07 3a90 	vmov	s15, r3
 8007a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ab6:	e087      	b.n	8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	ee07 3a90 	vmov	s15, r3
 8007abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007c80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aca:	4b6a      	ldr	r3, [pc, #424]	@ (8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad2:	ee07 3a90 	vmov	s15, r3
 8007ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ade:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007afa:	e065      	b.n	8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	ee07 3a90 	vmov	s15, r3
 8007b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b0e:	4b59      	ldr	r3, [pc, #356]	@ (8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b16:	ee07 3a90 	vmov	s15, r3
 8007b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b3e:	e043      	b.n	8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	ee07 3a90 	vmov	s15, r3
 8007b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007c88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b52:	4b48      	ldr	r3, [pc, #288]	@ (8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b5a:	ee07 3a90 	vmov	s15, r3
 8007b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b82:	e021      	b.n	8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	ee07 3a90 	vmov	s15, r3
 8007b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b96:	4b37      	ldr	r3, [pc, #220]	@ (8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9e:	ee07 3a90 	vmov	s15, r3
 8007ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007baa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bc6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bcc:	0a5b      	lsrs	r3, r3, #9
 8007bce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bd2:	ee07 3a90 	vmov	s15, r3
 8007bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007be2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bee:	ee17 2a90 	vmov	r2, s15
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bfa:	0c1b      	lsrs	r3, r3, #16
 8007bfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c00:	ee07 3a90 	vmov	s15, r3
 8007c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c10:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c1c:	ee17 2a90 	vmov	r2, s15
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007c24:	4b13      	ldr	r3, [pc, #76]	@ (8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c28:	0e1b      	lsrs	r3, r3, #24
 8007c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c4a:	ee17 2a90 	vmov	r2, s15
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c52:	e008      	b.n	8007c66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	609a      	str	r2, [r3, #8]
}
 8007c66:	bf00      	nop
 8007c68:	3724      	adds	r7, #36	@ 0x24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	58024400 	.word	0x58024400
 8007c78:	03d09000 	.word	0x03d09000
 8007c7c:	46000000 	.word	0x46000000
 8007c80:	4c742400 	.word	0x4c742400
 8007c84:	4a742400 	.word	0x4a742400
 8007c88:	4bbebc20 	.word	0x4bbebc20

08007c8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b089      	sub	sp, #36	@ 0x24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c94:	4ba1      	ldr	r3, [pc, #644]	@ (8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c98:	f003 0303 	and.w	r3, r3, #3
 8007c9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007c9e:	4b9f      	ldr	r3, [pc, #636]	@ (8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca2:	0d1b      	lsrs	r3, r3, #20
 8007ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ca8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007caa:	4b9c      	ldr	r3, [pc, #624]	@ (8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cae:	0a1b      	lsrs	r3, r3, #8
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007cb6:	4b99      	ldr	r3, [pc, #612]	@ (8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cba:	08db      	lsrs	r3, r3, #3
 8007cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	fb02 f303 	mul.w	r3, r2, r3
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 8111 	beq.w	8007efc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	f000 8083 	beq.w	8007de8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	f200 80a1 	bhi.w	8007e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d056      	beq.n	8007da4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007cf6:	e099      	b.n	8007e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cf8:	4b88      	ldr	r3, [pc, #544]	@ (8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0320 	and.w	r3, r3, #32
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d02d      	beq.n	8007d60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d04:	4b85      	ldr	r3, [pc, #532]	@ (8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	08db      	lsrs	r3, r3, #3
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	4a84      	ldr	r2, [pc, #528]	@ (8007f20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007d10:	fa22 f303 	lsr.w	r3, r2, r3
 8007d14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	ee07 3a90 	vmov	s15, r3
 8007d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d2e:	4b7b      	ldr	r3, [pc, #492]	@ (8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d36:	ee07 3a90 	vmov	s15, r3
 8007d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d42:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007f24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d5e:	e087      	b.n	8007e70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	ee07 3a90 	vmov	s15, r3
 8007d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007f28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d72:	4b6a      	ldr	r3, [pc, #424]	@ (8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d7a:	ee07 3a90 	vmov	s15, r3
 8007d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d86:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007f24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007da2:	e065      	b.n	8007e70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	ee07 3a90 	vmov	s15, r3
 8007daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db6:	4b59      	ldr	r3, [pc, #356]	@ (8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dbe:	ee07 3a90 	vmov	s15, r3
 8007dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007f24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007de6:	e043      	b.n	8007e70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	ee07 3a90 	vmov	s15, r3
 8007dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007f30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dfa:	4b48      	ldr	r3, [pc, #288]	@ (8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e02:	ee07 3a90 	vmov	s15, r3
 8007e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007f24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e2a:	e021      	b.n	8007e70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	ee07 3a90 	vmov	s15, r3
 8007e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3e:	4b37      	ldr	r3, [pc, #220]	@ (8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e46:	ee07 3a90 	vmov	s15, r3
 8007e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007f24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007e70:	4b2a      	ldr	r3, [pc, #168]	@ (8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e74:	0a5b      	lsrs	r3, r3, #9
 8007e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e7a:	ee07 3a90 	vmov	s15, r3
 8007e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e96:	ee17 2a90 	vmov	r2, s15
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea2:	0c1b      	lsrs	r3, r3, #16
 8007ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ea8:	ee07 3a90 	vmov	s15, r3
 8007eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007eb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ec4:	ee17 2a90 	vmov	r2, s15
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007ecc:	4b13      	ldr	r3, [pc, #76]	@ (8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed0:	0e1b      	lsrs	r3, r3, #24
 8007ed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ed6:	ee07 3a90 	vmov	s15, r3
 8007eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ede:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ee6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ef2:	ee17 2a90 	vmov	r2, s15
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007efa:	e008      	b.n	8007f0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	609a      	str	r2, [r3, #8]
}
 8007f0e:	bf00      	nop
 8007f10:	3724      	adds	r7, #36	@ 0x24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	58024400 	.word	0x58024400
 8007f20:	03d09000 	.word	0x03d09000
 8007f24:	46000000 	.word	0x46000000
 8007f28:	4c742400 	.word	0x4c742400
 8007f2c:	4a742400 	.word	0x4a742400
 8007f30:	4bbebc20 	.word	0x4bbebc20

08007f34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f42:	4b53      	ldr	r3, [pc, #332]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8007f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f46:	f003 0303 	and.w	r3, r3, #3
 8007f4a:	2b03      	cmp	r3, #3
 8007f4c:	d101      	bne.n	8007f52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e099      	b.n	8008086 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f52:	4b4f      	ldr	r3, [pc, #316]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a4e      	ldr	r2, [pc, #312]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8007f58:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f5e:	f7fa fa5d 	bl	800241c <HAL_GetTick>
 8007f62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f64:	e008      	b.n	8007f78 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f66:	f7fa fa59 	bl	800241c <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d901      	bls.n	8007f78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e086      	b.n	8008086 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f78:	4b45      	ldr	r3, [pc, #276]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d1f0      	bne.n	8007f66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f84:	4b42      	ldr	r3, [pc, #264]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8007f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f88:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	031b      	lsls	r3, r3, #12
 8007f92:	493f      	ldr	r1, [pc, #252]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	628b      	str	r3, [r1, #40]	@ 0x28
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	025b      	lsls	r3, r3, #9
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	431a      	orrs	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	041b      	lsls	r3, r3, #16
 8007fb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	061b      	lsls	r3, r3, #24
 8007fc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007fc8:	4931      	ldr	r1, [pc, #196]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007fce:	4b30      	ldr	r3, [pc, #192]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8007fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	492d      	ldr	r1, [pc, #180]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8007fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe4:	f023 0220 	bic.w	r2, r3, #32
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	4928      	ldr	r1, [pc, #160]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007ff2:	4b27      	ldr	r3, [pc, #156]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8007ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff6:	4a26      	ldr	r2, [pc, #152]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8007ff8:	f023 0310 	bic.w	r3, r3, #16
 8007ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ffe:	4b24      	ldr	r3, [pc, #144]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8008000:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008002:	4b24      	ldr	r3, [pc, #144]	@ (8008094 <RCCEx_PLL2_Config+0x160>)
 8008004:	4013      	ands	r3, r2
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	69d2      	ldr	r2, [r2, #28]
 800800a:	00d2      	lsls	r2, r2, #3
 800800c:	4920      	ldr	r1, [pc, #128]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 800800e:	4313      	orrs	r3, r2
 8008010:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008012:	4b1f      	ldr	r3, [pc, #124]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8008014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008016:	4a1e      	ldr	r2, [pc, #120]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8008018:	f043 0310 	orr.w	r3, r3, #16
 800801c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d106      	bne.n	8008032 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008024:	4b1a      	ldr	r3, [pc, #104]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8008026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008028:	4a19      	ldr	r2, [pc, #100]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 800802a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800802e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008030:	e00f      	b.n	8008052 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d106      	bne.n	8008046 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008038:	4b15      	ldr	r3, [pc, #84]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 800803a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803c:	4a14      	ldr	r2, [pc, #80]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 800803e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008042:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008044:	e005      	b.n	8008052 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008046:	4b12      	ldr	r3, [pc, #72]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8008048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804a:	4a11      	ldr	r2, [pc, #68]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 800804c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008050:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008052:	4b0f      	ldr	r3, [pc, #60]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a0e      	ldr	r2, [pc, #56]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 8008058:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800805c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800805e:	f7fa f9dd 	bl	800241c <HAL_GetTick>
 8008062:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008064:	e008      	b.n	8008078 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008066:	f7fa f9d9 	bl	800241c <HAL_GetTick>
 800806a:	4602      	mov	r2, r0
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	2b02      	cmp	r3, #2
 8008072:	d901      	bls.n	8008078 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e006      	b.n	8008086 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008078:	4b05      	ldr	r3, [pc, #20]	@ (8008090 <RCCEx_PLL2_Config+0x15c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0f0      	beq.n	8008066 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008084:	7bfb      	ldrb	r3, [r7, #15]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	58024400 	.word	0x58024400
 8008094:	ffff0007 	.word	0xffff0007

08008098 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080a6:	4b53      	ldr	r3, [pc, #332]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 80080a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d101      	bne.n	80080b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e099      	b.n	80081ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80080b6:	4b4f      	ldr	r3, [pc, #316]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a4e      	ldr	r2, [pc, #312]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 80080bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080c2:	f7fa f9ab 	bl	800241c <HAL_GetTick>
 80080c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080c8:	e008      	b.n	80080dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80080ca:	f7fa f9a7 	bl	800241c <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d901      	bls.n	80080dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e086      	b.n	80081ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080dc:	4b45      	ldr	r3, [pc, #276]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1f0      	bne.n	80080ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80080e8:	4b42      	ldr	r3, [pc, #264]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 80080ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	051b      	lsls	r3, r3, #20
 80080f6:	493f      	ldr	r1, [pc, #252]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	3b01      	subs	r3, #1
 8008102:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	3b01      	subs	r3, #1
 800810c:	025b      	lsls	r3, r3, #9
 800810e:	b29b      	uxth	r3, r3
 8008110:	431a      	orrs	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	3b01      	subs	r3, #1
 8008118:	041b      	lsls	r3, r3, #16
 800811a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800811e:	431a      	orrs	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	3b01      	subs	r3, #1
 8008126:	061b      	lsls	r3, r3, #24
 8008128:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800812c:	4931      	ldr	r1, [pc, #196]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 800812e:	4313      	orrs	r3, r2
 8008130:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008132:	4b30      	ldr	r3, [pc, #192]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 8008134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008136:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	492d      	ldr	r1, [pc, #180]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 8008140:	4313      	orrs	r3, r2
 8008142:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008144:	4b2b      	ldr	r3, [pc, #172]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 8008146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008148:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	4928      	ldr	r1, [pc, #160]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 8008152:	4313      	orrs	r3, r2
 8008154:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008156:	4b27      	ldr	r3, [pc, #156]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 8008158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815a:	4a26      	ldr	r2, [pc, #152]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 800815c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008160:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008162:	4b24      	ldr	r3, [pc, #144]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 8008164:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008166:	4b24      	ldr	r3, [pc, #144]	@ (80081f8 <RCCEx_PLL3_Config+0x160>)
 8008168:	4013      	ands	r3, r2
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	69d2      	ldr	r2, [r2, #28]
 800816e:	00d2      	lsls	r2, r2, #3
 8008170:	4920      	ldr	r1, [pc, #128]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 8008172:	4313      	orrs	r3, r2
 8008174:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008176:	4b1f      	ldr	r3, [pc, #124]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 8008178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817a:	4a1e      	ldr	r2, [pc, #120]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 800817c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008180:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d106      	bne.n	8008196 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008188:	4b1a      	ldr	r3, [pc, #104]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 800818a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818c:	4a19      	ldr	r2, [pc, #100]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 800818e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008192:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008194:	e00f      	b.n	80081b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d106      	bne.n	80081aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800819c:	4b15      	ldr	r3, [pc, #84]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 800819e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a0:	4a14      	ldr	r2, [pc, #80]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 80081a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80081a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081a8:	e005      	b.n	80081b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80081aa:	4b12      	ldr	r3, [pc, #72]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 80081ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ae:	4a11      	ldr	r2, [pc, #68]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 80081b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80081b6:	4b0f      	ldr	r3, [pc, #60]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a0e      	ldr	r2, [pc, #56]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 80081bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081c2:	f7fa f92b 	bl	800241c <HAL_GetTick>
 80081c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081c8:	e008      	b.n	80081dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80081ca:	f7fa f927 	bl	800241c <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d901      	bls.n	80081dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e006      	b.n	80081ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081dc:	4b05      	ldr	r3, [pc, #20]	@ (80081f4 <RCCEx_PLL3_Config+0x15c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d0f0      	beq.n	80081ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	58024400 	.word	0x58024400
 80081f8:	ffff0007 	.word	0xffff0007

080081fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e049      	b.n	80082a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d106      	bne.n	8008228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7f9 fe28 	bl	8001e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	3304      	adds	r3, #4
 8008238:	4619      	mov	r1, r3
 800823a:	4610      	mov	r0, r2
 800823c:	f000 f9e0 	bl	8008600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
	...

080082ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d001      	beq.n	80082c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e04c      	b.n	800835e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a26      	ldr	r2, [pc, #152]	@ (800836c <HAL_TIM_Base_Start+0xc0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d022      	beq.n	800831c <HAL_TIM_Base_Start+0x70>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082de:	d01d      	beq.n	800831c <HAL_TIM_Base_Start+0x70>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a22      	ldr	r2, [pc, #136]	@ (8008370 <HAL_TIM_Base_Start+0xc4>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d018      	beq.n	800831c <HAL_TIM_Base_Start+0x70>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a21      	ldr	r2, [pc, #132]	@ (8008374 <HAL_TIM_Base_Start+0xc8>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d013      	beq.n	800831c <HAL_TIM_Base_Start+0x70>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a1f      	ldr	r2, [pc, #124]	@ (8008378 <HAL_TIM_Base_Start+0xcc>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d00e      	beq.n	800831c <HAL_TIM_Base_Start+0x70>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a1e      	ldr	r2, [pc, #120]	@ (800837c <HAL_TIM_Base_Start+0xd0>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d009      	beq.n	800831c <HAL_TIM_Base_Start+0x70>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a1c      	ldr	r2, [pc, #112]	@ (8008380 <HAL_TIM_Base_Start+0xd4>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d004      	beq.n	800831c <HAL_TIM_Base_Start+0x70>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a1b      	ldr	r2, [pc, #108]	@ (8008384 <HAL_TIM_Base_Start+0xd8>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d115      	bne.n	8008348 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689a      	ldr	r2, [r3, #8]
 8008322:	4b19      	ldr	r3, [pc, #100]	@ (8008388 <HAL_TIM_Base_Start+0xdc>)
 8008324:	4013      	ands	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b06      	cmp	r3, #6
 800832c:	d015      	beq.n	800835a <HAL_TIM_Base_Start+0xae>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008334:	d011      	beq.n	800835a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f042 0201 	orr.w	r2, r2, #1
 8008344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008346:	e008      	b.n	800835a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0201 	orr.w	r2, r2, #1
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	e000      	b.n	800835c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800835a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	40010000 	.word	0x40010000
 8008370:	40000400 	.word	0x40000400
 8008374:	40000800 	.word	0x40000800
 8008378:	40000c00 	.word	0x40000c00
 800837c:	40010400 	.word	0x40010400
 8008380:	40001800 	.word	0x40001800
 8008384:	40014000 	.word	0x40014000
 8008388:	00010007 	.word	0x00010007

0800838c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d101      	bne.n	80083a8 <HAL_TIM_ConfigClockSource+0x1c>
 80083a4:	2302      	movs	r3, #2
 80083a6:	e0dc      	b.n	8008562 <HAL_TIM_ConfigClockSource+0x1d6>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2202      	movs	r2, #2
 80083b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	4b6a      	ldr	r3, [pc, #424]	@ (800856c <HAL_TIM_ConfigClockSource+0x1e0>)
 80083c4:	4013      	ands	r3, r2
 80083c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a64      	ldr	r2, [pc, #400]	@ (8008570 <HAL_TIM_ConfigClockSource+0x1e4>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	f000 80a9 	beq.w	8008536 <HAL_TIM_ConfigClockSource+0x1aa>
 80083e4:	4a62      	ldr	r2, [pc, #392]	@ (8008570 <HAL_TIM_ConfigClockSource+0x1e4>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	f200 80ae 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1bc>
 80083ec:	4a61      	ldr	r2, [pc, #388]	@ (8008574 <HAL_TIM_ConfigClockSource+0x1e8>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	f000 80a1 	beq.w	8008536 <HAL_TIM_ConfigClockSource+0x1aa>
 80083f4:	4a5f      	ldr	r2, [pc, #380]	@ (8008574 <HAL_TIM_ConfigClockSource+0x1e8>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	f200 80a6 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1bc>
 80083fc:	4a5e      	ldr	r2, [pc, #376]	@ (8008578 <HAL_TIM_ConfigClockSource+0x1ec>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	f000 8099 	beq.w	8008536 <HAL_TIM_ConfigClockSource+0x1aa>
 8008404:	4a5c      	ldr	r2, [pc, #368]	@ (8008578 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008406:	4293      	cmp	r3, r2
 8008408:	f200 809e 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1bc>
 800840c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008410:	f000 8091 	beq.w	8008536 <HAL_TIM_ConfigClockSource+0x1aa>
 8008414:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008418:	f200 8096 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1bc>
 800841c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008420:	f000 8089 	beq.w	8008536 <HAL_TIM_ConfigClockSource+0x1aa>
 8008424:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008428:	f200 808e 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1bc>
 800842c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008430:	d03e      	beq.n	80084b0 <HAL_TIM_ConfigClockSource+0x124>
 8008432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008436:	f200 8087 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1bc>
 800843a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800843e:	f000 8086 	beq.w	800854e <HAL_TIM_ConfigClockSource+0x1c2>
 8008442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008446:	d87f      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1bc>
 8008448:	2b70      	cmp	r3, #112	@ 0x70
 800844a:	d01a      	beq.n	8008482 <HAL_TIM_ConfigClockSource+0xf6>
 800844c:	2b70      	cmp	r3, #112	@ 0x70
 800844e:	d87b      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1bc>
 8008450:	2b60      	cmp	r3, #96	@ 0x60
 8008452:	d050      	beq.n	80084f6 <HAL_TIM_ConfigClockSource+0x16a>
 8008454:	2b60      	cmp	r3, #96	@ 0x60
 8008456:	d877      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1bc>
 8008458:	2b50      	cmp	r3, #80	@ 0x50
 800845a:	d03c      	beq.n	80084d6 <HAL_TIM_ConfigClockSource+0x14a>
 800845c:	2b50      	cmp	r3, #80	@ 0x50
 800845e:	d873      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1bc>
 8008460:	2b40      	cmp	r3, #64	@ 0x40
 8008462:	d058      	beq.n	8008516 <HAL_TIM_ConfigClockSource+0x18a>
 8008464:	2b40      	cmp	r3, #64	@ 0x40
 8008466:	d86f      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1bc>
 8008468:	2b30      	cmp	r3, #48	@ 0x30
 800846a:	d064      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x1aa>
 800846c:	2b30      	cmp	r3, #48	@ 0x30
 800846e:	d86b      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1bc>
 8008470:	2b20      	cmp	r3, #32
 8008472:	d060      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x1aa>
 8008474:	2b20      	cmp	r3, #32
 8008476:	d867      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1bc>
 8008478:	2b00      	cmp	r3, #0
 800847a:	d05c      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x1aa>
 800847c:	2b10      	cmp	r3, #16
 800847e:	d05a      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x1aa>
 8008480:	e062      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008492:	f000 fac3 	bl	8008a1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80084a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	609a      	str	r2, [r3, #8]
      break;
 80084ae:	e04f      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084c0:	f000 faac 	bl	8008a1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689a      	ldr	r2, [r3, #8]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084d2:	609a      	str	r2, [r3, #8]
      break;
 80084d4:	e03c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084e2:	461a      	mov	r2, r3
 80084e4:	f000 fa1c 	bl	8008920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2150      	movs	r1, #80	@ 0x50
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fa76 	bl	80089e0 <TIM_ITRx_SetConfig>
      break;
 80084f4:	e02c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008502:	461a      	mov	r2, r3
 8008504:	f000 fa3b 	bl	800897e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2160      	movs	r1, #96	@ 0x60
 800850e:	4618      	mov	r0, r3
 8008510:	f000 fa66 	bl	80089e0 <TIM_ITRx_SetConfig>
      break;
 8008514:	e01c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008522:	461a      	mov	r2, r3
 8008524:	f000 f9fc 	bl	8008920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2140      	movs	r1, #64	@ 0x40
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fa56 	bl	80089e0 <TIM_ITRx_SetConfig>
      break;
 8008534:	e00c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f000 fa4d 	bl	80089e0 <TIM_ITRx_SetConfig>
      break;
 8008546:	e003      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	73fb      	strb	r3, [r7, #15]
      break;
 800854c:	e000      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800854e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	ffceff88 	.word	0xffceff88
 8008570:	00100040 	.word	0x00100040
 8008574:	00100030 	.word	0x00100030
 8008578:	00100020 	.word	0x00100020

0800857c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008590:	2302      	movs	r3, #2
 8008592:	e031      	b.n	80085f8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f8d0 	bl	800874c <TIM_SlaveTimer_SetConfig>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d009      	beq.n	80085c6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e018      	b.n	80085f8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68da      	ldr	r2, [r3, #12]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085d4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68da      	ldr	r2, [r3, #12]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80085e4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a46      	ldr	r2, [pc, #280]	@ (800872c <TIM_Base_SetConfig+0x12c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d013      	beq.n	8008640 <TIM_Base_SetConfig+0x40>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800861e:	d00f      	beq.n	8008640 <TIM_Base_SetConfig+0x40>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a43      	ldr	r2, [pc, #268]	@ (8008730 <TIM_Base_SetConfig+0x130>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00b      	beq.n	8008640 <TIM_Base_SetConfig+0x40>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a42      	ldr	r2, [pc, #264]	@ (8008734 <TIM_Base_SetConfig+0x134>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d007      	beq.n	8008640 <TIM_Base_SetConfig+0x40>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a41      	ldr	r2, [pc, #260]	@ (8008738 <TIM_Base_SetConfig+0x138>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d003      	beq.n	8008640 <TIM_Base_SetConfig+0x40>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a40      	ldr	r2, [pc, #256]	@ (800873c <TIM_Base_SetConfig+0x13c>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d108      	bne.n	8008652 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a35      	ldr	r2, [pc, #212]	@ (800872c <TIM_Base_SetConfig+0x12c>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d01f      	beq.n	800869a <TIM_Base_SetConfig+0x9a>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008660:	d01b      	beq.n	800869a <TIM_Base_SetConfig+0x9a>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a32      	ldr	r2, [pc, #200]	@ (8008730 <TIM_Base_SetConfig+0x130>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d017      	beq.n	800869a <TIM_Base_SetConfig+0x9a>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a31      	ldr	r2, [pc, #196]	@ (8008734 <TIM_Base_SetConfig+0x134>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d013      	beq.n	800869a <TIM_Base_SetConfig+0x9a>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a30      	ldr	r2, [pc, #192]	@ (8008738 <TIM_Base_SetConfig+0x138>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d00f      	beq.n	800869a <TIM_Base_SetConfig+0x9a>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a2f      	ldr	r2, [pc, #188]	@ (800873c <TIM_Base_SetConfig+0x13c>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d00b      	beq.n	800869a <TIM_Base_SetConfig+0x9a>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a2e      	ldr	r2, [pc, #184]	@ (8008740 <TIM_Base_SetConfig+0x140>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d007      	beq.n	800869a <TIM_Base_SetConfig+0x9a>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a2d      	ldr	r2, [pc, #180]	@ (8008744 <TIM_Base_SetConfig+0x144>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d003      	beq.n	800869a <TIM_Base_SetConfig+0x9a>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a2c      	ldr	r2, [pc, #176]	@ (8008748 <TIM_Base_SetConfig+0x148>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d108      	bne.n	80086ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a16      	ldr	r2, [pc, #88]	@ (800872c <TIM_Base_SetConfig+0x12c>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d00f      	beq.n	80086f8 <TIM_Base_SetConfig+0xf8>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a18      	ldr	r2, [pc, #96]	@ (800873c <TIM_Base_SetConfig+0x13c>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d00b      	beq.n	80086f8 <TIM_Base_SetConfig+0xf8>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a17      	ldr	r2, [pc, #92]	@ (8008740 <TIM_Base_SetConfig+0x140>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d007      	beq.n	80086f8 <TIM_Base_SetConfig+0xf8>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a16      	ldr	r2, [pc, #88]	@ (8008744 <TIM_Base_SetConfig+0x144>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d003      	beq.n	80086f8 <TIM_Base_SetConfig+0xf8>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a15      	ldr	r2, [pc, #84]	@ (8008748 <TIM_Base_SetConfig+0x148>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d103      	bne.n	8008700 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	691a      	ldr	r2, [r3, #16]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b01      	cmp	r3, #1
 8008710:	d105      	bne.n	800871e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f023 0201 	bic.w	r2, r3, #1
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	611a      	str	r2, [r3, #16]
  }
}
 800871e:	bf00      	nop
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	40010000 	.word	0x40010000
 8008730:	40000400 	.word	0x40000400
 8008734:	40000800 	.word	0x40000800
 8008738:	40000c00 	.word	0x40000c00
 800873c:	40010400 	.word	0x40010400
 8008740:	40014000 	.word	0x40014000
 8008744:	40014400 	.word	0x40014400
 8008748:	40014800 	.word	0x40014800

0800874c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	4b65      	ldr	r3, [pc, #404]	@ (80088fc <TIM_SlaveTimer_SetConfig+0x1b0>)
 8008766:	4013      	ands	r3, r2
 8008768:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	4b62      	ldr	r3, [pc, #392]	@ (8008900 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008778:	4013      	ands	r3, r2
 800877a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	4313      	orrs	r3, r2
 8008784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	4a5c      	ldr	r2, [pc, #368]	@ (8008904 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008794:	4293      	cmp	r3, r2
 8008796:	f000 80ab 	beq.w	80088f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800879a:	4a5a      	ldr	r2, [pc, #360]	@ (8008904 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800879c:	4293      	cmp	r3, r2
 800879e:	f200 80a4 	bhi.w	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
 80087a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087a6:	f000 80a3 	beq.w	80088f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087ae:	f200 809c 	bhi.w	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
 80087b2:	4a55      	ldr	r2, [pc, #340]	@ (8008908 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	f000 809b 	beq.w	80088f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087ba:	4a53      	ldr	r2, [pc, #332]	@ (8008908 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	f200 8094 	bhi.w	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
 80087c2:	4a52      	ldr	r2, [pc, #328]	@ (800890c <TIM_SlaveTimer_SetConfig+0x1c0>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	f000 8093 	beq.w	80088f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087ca:	4a50      	ldr	r2, [pc, #320]	@ (800890c <TIM_SlaveTimer_SetConfig+0x1c0>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	f200 808c 	bhi.w	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
 80087d2:	4a4f      	ldr	r2, [pc, #316]	@ (8008910 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	f000 808b 	beq.w	80088f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087da:	4a4d      	ldr	r2, [pc, #308]	@ (8008910 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	f200 8084 	bhi.w	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
 80087e2:	4a4c      	ldr	r2, [pc, #304]	@ (8008914 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	f000 8083 	beq.w	80088f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087ea:	4a4a      	ldr	r2, [pc, #296]	@ (8008914 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d87c      	bhi.n	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
 80087f0:	4a49      	ldr	r2, [pc, #292]	@ (8008918 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d07c      	beq.n	80088f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087f6:	4a48      	ldr	r2, [pc, #288]	@ (8008918 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d876      	bhi.n	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
 80087fc:	4a47      	ldr	r2, [pc, #284]	@ (800891c <TIM_SlaveTimer_SetConfig+0x1d0>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d076      	beq.n	80088f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008802:	4a46      	ldr	r2, [pc, #280]	@ (800891c <TIM_SlaveTimer_SetConfig+0x1d0>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d870      	bhi.n	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
 8008808:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800880c:	d070      	beq.n	80088f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800880e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008812:	d86a      	bhi.n	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
 8008814:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008818:	d06a      	beq.n	80088f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800881a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800881e:	d864      	bhi.n	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
 8008820:	2b70      	cmp	r3, #112	@ 0x70
 8008822:	d01a      	beq.n	800885a <TIM_SlaveTimer_SetConfig+0x10e>
 8008824:	2b70      	cmp	r3, #112	@ 0x70
 8008826:	d860      	bhi.n	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
 8008828:	2b60      	cmp	r3, #96	@ 0x60
 800882a:	d054      	beq.n	80088d6 <TIM_SlaveTimer_SetConfig+0x18a>
 800882c:	2b60      	cmp	r3, #96	@ 0x60
 800882e:	d85c      	bhi.n	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
 8008830:	2b50      	cmp	r3, #80	@ 0x50
 8008832:	d046      	beq.n	80088c2 <TIM_SlaveTimer_SetConfig+0x176>
 8008834:	2b50      	cmp	r3, #80	@ 0x50
 8008836:	d858      	bhi.n	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
 8008838:	2b40      	cmp	r3, #64	@ 0x40
 800883a:	d019      	beq.n	8008870 <TIM_SlaveTimer_SetConfig+0x124>
 800883c:	2b40      	cmp	r3, #64	@ 0x40
 800883e:	d854      	bhi.n	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
 8008840:	2b30      	cmp	r3, #48	@ 0x30
 8008842:	d055      	beq.n	80088f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008844:	2b30      	cmp	r3, #48	@ 0x30
 8008846:	d850      	bhi.n	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
 8008848:	2b20      	cmp	r3, #32
 800884a:	d051      	beq.n	80088f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800884c:	2b20      	cmp	r3, #32
 800884e:	d84c      	bhi.n	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
 8008850:	2b00      	cmp	r3, #0
 8008852:	d04d      	beq.n	80088f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008854:	2b10      	cmp	r3, #16
 8008856:	d04b      	beq.n	80088f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008858:	e047      	b.n	80088ea <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800886a:	f000 f8d7 	bl	8008a1c <TIM_ETR_SetConfig>
      break;
 800886e:	e040      	b.n	80088f2 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b05      	cmp	r3, #5
 8008876:	d101      	bne.n	800887c <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e03b      	b.n	80088f4 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6a1a      	ldr	r2, [r3, #32]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f022 0201 	bic.w	r2, r2, #1
 8008892:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088a2:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	011b      	lsls	r3, r3, #4
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	621a      	str	r2, [r3, #32]
      break;
 80088c0:	e017      	b.n	80088f2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088ce:	461a      	mov	r2, r3
 80088d0:	f000 f826 	bl	8008920 <TIM_TI1_ConfigInputStage>
      break;
 80088d4:	e00d      	b.n	80088f2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088e2:	461a      	mov	r2, r3
 80088e4:	f000 f84b 	bl	800897e <TIM_TI2_ConfigInputStage>
      break;
 80088e8:	e003      	b.n	80088f2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	75fb      	strb	r3, [r7, #23]
      break;
 80088ee:	e000      	b.n	80088f2 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 80088f0:	bf00      	nop
  }

  return status;
 80088f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	ffcfff8f 	.word	0xffcfff8f
 8008900:	fffefff8 	.word	0xfffefff8
 8008904:	00200010 	.word	0x00200010
 8008908:	00100070 	.word	0x00100070
 800890c:	00100060 	.word	0x00100060
 8008910:	00100050 	.word	0x00100050
 8008914:	00100040 	.word	0x00100040
 8008918:	00100030 	.word	0x00100030
 800891c:	00100020 	.word	0x00100020

08008920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6a1b      	ldr	r3, [r3, #32]
 8008930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	f023 0201 	bic.w	r2, r3, #1
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800894a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	011b      	lsls	r3, r3, #4
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	4313      	orrs	r3, r2
 8008954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f023 030a 	bic.w	r3, r3, #10
 800895c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	4313      	orrs	r3, r2
 8008964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	621a      	str	r2, [r3, #32]
}
 8008972:	bf00      	nop
 8008974:	371c      	adds	r7, #28
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800897e:	b480      	push	{r7}
 8008980:	b087      	sub	sp, #28
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	f023 0210 	bic.w	r2, r3, #16
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	031b      	lsls	r3, r3, #12
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80089ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	011b      	lsls	r3, r3, #4
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	621a      	str	r2, [r3, #32]
}
 80089d2:	bf00      	nop
 80089d4:	371c      	adds	r7, #28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
	...

080089e0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	4b09      	ldr	r3, [pc, #36]	@ (8008a18 <TIM_ITRx_SetConfig+0x38>)
 80089f4:	4013      	ands	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	f043 0307 	orr.w	r3, r3, #7
 8008a02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	609a      	str	r2, [r3, #8]
}
 8008a0a:	bf00      	nop
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	ffcfff8f 	.word	0xffcfff8f

08008a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b087      	sub	sp, #28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
 8008a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	021a      	lsls	r2, r3, #8
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	431a      	orrs	r2, r3
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	609a      	str	r2, [r3, #8]
}
 8008a50:	bf00      	nop
 8008a52:	371c      	adds	r7, #28
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d101      	bne.n	8008a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a70:	2302      	movs	r3, #2
 8008a72:	e06d      	b.n	8008b50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a30      	ldr	r2, [pc, #192]	@ (8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d004      	beq.n	8008aa8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a2f      	ldr	r2, [pc, #188]	@ (8008b60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d108      	bne.n	8008aba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008aae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ac0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a20      	ldr	r2, [pc, #128]	@ (8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d022      	beq.n	8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ae6:	d01d      	beq.n	8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a1d      	ldr	r2, [pc, #116]	@ (8008b64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d018      	beq.n	8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a1c      	ldr	r2, [pc, #112]	@ (8008b68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d013      	beq.n	8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a1a      	ldr	r2, [pc, #104]	@ (8008b6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d00e      	beq.n	8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a15      	ldr	r2, [pc, #84]	@ (8008b60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d009      	beq.n	8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a16      	ldr	r2, [pc, #88]	@ (8008b70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d004      	beq.n	8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a15      	ldr	r2, [pc, #84]	@ (8008b74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d10c      	bne.n	8008b3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	40010000 	.word	0x40010000
 8008b60:	40010400 	.word	0x40010400
 8008b64:	40000400 	.word	0x40000400
 8008b68:	40000800 	.word	0x40000800
 8008b6c:	40000c00 	.word	0x40000c00
 8008b70:	40001800 	.word	0x40001800
 8008b74:	40014000 	.word	0x40014000

08008b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d101      	bne.n	8008b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e042      	b.n	8008c10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d106      	bne.n	8008ba2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7f9 f9a3 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2224      	movs	r2, #36	@ 0x24
 8008ba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f022 0201 	bic.w	r2, r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d002      	beq.n	8008bc8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f001 faca 	bl	800a15c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fd5f 	bl	800968c <UART_SetConfig>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d101      	bne.n	8008bd8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e01b      	b.n	8008c10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685a      	ldr	r2, [r3, #4]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008be6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689a      	ldr	r2, [r3, #8]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008bf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f042 0201 	orr.w	r2, r2, #1
 8008c06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f001 fb49 	bl	800a2a0 <UART_CheckIdleState>
 8008c0e:	4603      	mov	r3, r0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e031      	b.n	8008c8e <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2224      	movs	r2, #36	@ 0x24
 8008c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f022 0201 	bic.w	r2, r2, #1
 8008c40:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2200      	movs	r2, #0
 8008c48:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2200      	movs	r2, #0
 8008c58:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7f9 fa2a 	bl	80020b4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b08a      	sub	sp, #40	@ 0x28
 8008c9a:	af02      	add	r7, sp, #8
 8008c9c:	60f8      	str	r0, [r7, #12]
 8008c9e:	60b9      	str	r1, [r7, #8]
 8008ca0:	603b      	str	r3, [r7, #0]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cac:	2b20      	cmp	r3, #32
 8008cae:	d17b      	bne.n	8008da8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <HAL_UART_Transmit+0x26>
 8008cb6:	88fb      	ldrh	r3, [r7, #6]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e074      	b.n	8008daa <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2221      	movs	r2, #33	@ 0x21
 8008ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cd0:	f7f9 fba4 	bl	800241c <HAL_GetTick>
 8008cd4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	88fa      	ldrh	r2, [r7, #6]
 8008cda:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	88fa      	ldrh	r2, [r7, #6]
 8008ce2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cee:	d108      	bne.n	8008d02 <HAL_UART_Transmit+0x6c>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d104      	bne.n	8008d02 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	61bb      	str	r3, [r7, #24]
 8008d00:	e003      	b.n	8008d0a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d0a:	e030      	b.n	8008d6e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	2200      	movs	r2, #0
 8008d14:	2180      	movs	r1, #128	@ 0x80
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f001 fb6c 	bl	800a3f4 <UART_WaitOnFlagUntilTimeout>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d005      	beq.n	8008d2e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2220      	movs	r2, #32
 8008d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e03d      	b.n	8008daa <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10b      	bne.n	8008d4c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	881b      	ldrh	r3, [r3, #0]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d42:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	3302      	adds	r3, #2
 8008d48:	61bb      	str	r3, [r7, #24]
 8008d4a:	e007      	b.n	8008d5c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	781a      	ldrb	r2, [r3, #0]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	3b01      	subs	r3, #1
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1c8      	bne.n	8008d0c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	2200      	movs	r2, #0
 8008d82:	2140      	movs	r1, #64	@ 0x40
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f001 fb35 	bl	800a3f4 <UART_WaitOnFlagUntilTimeout>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d005      	beq.n	8008d9c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2220      	movs	r2, #32
 8008d94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e006      	b.n	8008daa <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2220      	movs	r2, #32
 8008da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	e000      	b.n	8008daa <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008da8:	2302      	movs	r3, #2
  }
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3720      	adds	r7, #32
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
	...

08008db4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b091      	sub	sp, #68	@ 0x44
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dc8:	2b20      	cmp	r3, #32
 8008dca:	d178      	bne.n	8008ebe <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <HAL_UART_Transmit_IT+0x24>
 8008dd2:	88fb      	ldrh	r3, [r7, #6]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e071      	b.n	8008ec0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	88fa      	ldrh	r2, [r7, #6]
 8008de6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	88fa      	ldrh	r2, [r7, #6]
 8008dee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2221      	movs	r2, #33	@ 0x21
 8008e04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e10:	d12a      	bne.n	8008e68 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e1a:	d107      	bne.n	8008e2c <HAL_UART_Transmit_IT+0x78>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d103      	bne.n	8008e2c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	4a29      	ldr	r2, [pc, #164]	@ (8008ecc <HAL_UART_Transmit_IT+0x118>)
 8008e28:	679a      	str	r2, [r3, #120]	@ 0x78
 8008e2a:	e002      	b.n	8008e32 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	4a28      	ldr	r2, [pc, #160]	@ (8008ed0 <HAL_UART_Transmit_IT+0x11c>)
 8008e30:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3308      	adds	r3, #8
 8008e38:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3c:	e853 3f00 	ldrex	r3, [r3]
 8008e40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008e48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	3308      	adds	r3, #8
 8008e50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e52:	637a      	str	r2, [r7, #52]	@ 0x34
 8008e54:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e5a:	e841 2300 	strex	r3, r2, [r1]
 8008e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1e5      	bne.n	8008e32 <HAL_UART_Transmit_IT+0x7e>
 8008e66:	e028      	b.n	8008eba <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e70:	d107      	bne.n	8008e82 <HAL_UART_Transmit_IT+0xce>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d103      	bne.n	8008e82 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	4a15      	ldr	r2, [pc, #84]	@ (8008ed4 <HAL_UART_Transmit_IT+0x120>)
 8008e7e:	679a      	str	r2, [r3, #120]	@ 0x78
 8008e80:	e002      	b.n	8008e88 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	4a14      	ldr	r2, [pc, #80]	@ (8008ed8 <HAL_UART_Transmit_IT+0x124>)
 8008e86:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	e853 3f00 	ldrex	r3, [r3]
 8008e94:	613b      	str	r3, [r7, #16]
   return(result);
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ea6:	623b      	str	r3, [r7, #32]
 8008ea8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eaa:	69f9      	ldr	r1, [r7, #28]
 8008eac:	6a3a      	ldr	r2, [r7, #32]
 8008eae:	e841 2300 	strex	r3, r2, [r1]
 8008eb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1e6      	bne.n	8008e88 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e000      	b.n	8008ec0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008ebe:	2302      	movs	r3, #2
  }
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3744      	adds	r7, #68	@ 0x44
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	0800aa67 	.word	0x0800aa67
 8008ed0:	0800a987 	.word	0x0800a987
 8008ed4:	0800a8c5 	.word	0x0800a8c5
 8008ed8:	0800a80d 	.word	0x0800a80d

08008edc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b0ba      	sub	sp, #232	@ 0xe8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008f06:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d11b      	bne.n	8008f50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f1c:	f003 0320 	and.w	r3, r3, #32
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d015      	beq.n	8008f50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f28:	f003 0320 	and.w	r3, r3, #32
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d105      	bne.n	8008f3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d009      	beq.n	8008f50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 8377 	beq.w	8009634 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	4798      	blx	r3
      }
      return;
 8008f4e:	e371      	b.n	8009634 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f000 8123 	beq.w	80091a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008f5e:	4b8d      	ldr	r3, [pc, #564]	@ (8009194 <HAL_UART_IRQHandler+0x2b8>)
 8008f60:	4013      	ands	r3, r2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d106      	bne.n	8008f74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008f6a:	4b8b      	ldr	r3, [pc, #556]	@ (8009198 <HAL_UART_IRQHandler+0x2bc>)
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 8116 	beq.w	80091a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d011      	beq.n	8008fa4 <HAL_UART_IRQHandler+0xc8>
 8008f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2201      	movs	r2, #1
 8008f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f9a:	f043 0201 	orr.w	r2, r3, #1
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fa8:	f003 0302 	and.w	r3, r3, #2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d011      	beq.n	8008fd4 <HAL_UART_IRQHandler+0xf8>
 8008fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00b      	beq.n	8008fd4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fca:	f043 0204 	orr.w	r2, r3, #4
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fd8:	f003 0304 	and.w	r3, r3, #4
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d011      	beq.n	8009004 <HAL_UART_IRQHandler+0x128>
 8008fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fe4:	f003 0301 	and.w	r3, r3, #1
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00b      	beq.n	8009004 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2204      	movs	r2, #4
 8008ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ffa:	f043 0202 	orr.w	r2, r3, #2
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009008:	f003 0308 	and.w	r3, r3, #8
 800900c:	2b00      	cmp	r3, #0
 800900e:	d017      	beq.n	8009040 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009014:	f003 0320 	and.w	r3, r3, #32
 8009018:	2b00      	cmp	r3, #0
 800901a:	d105      	bne.n	8009028 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800901c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009020:	4b5c      	ldr	r3, [pc, #368]	@ (8009194 <HAL_UART_IRQHandler+0x2b8>)
 8009022:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00b      	beq.n	8009040 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2208      	movs	r2, #8
 800902e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009036:	f043 0208 	orr.w	r2, r3, #8
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009048:	2b00      	cmp	r3, #0
 800904a:	d012      	beq.n	8009072 <HAL_UART_IRQHandler+0x196>
 800904c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009050:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00c      	beq.n	8009072 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009060:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009068:	f043 0220 	orr.w	r2, r3, #32
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 82dd 	beq.w	8009638 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800907e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009082:	f003 0320 	and.w	r3, r3, #32
 8009086:	2b00      	cmp	r3, #0
 8009088:	d013      	beq.n	80090b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800908a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800908e:	f003 0320 	and.w	r3, r3, #32
 8009092:	2b00      	cmp	r3, #0
 8009094:	d105      	bne.n	80090a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800909a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d007      	beq.n	80090b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d003      	beq.n	80090b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090c6:	2b40      	cmp	r3, #64	@ 0x40
 80090c8:	d005      	beq.n	80090d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80090ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80090ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d054      	beq.n	8009180 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f001 fb1c 	bl	800a714 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090e6:	2b40      	cmp	r3, #64	@ 0x40
 80090e8:	d146      	bne.n	8009178 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3308      	adds	r3, #8
 80090f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009100:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009108:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3308      	adds	r3, #8
 8009112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009116:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800911a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009126:	e841 2300 	strex	r3, r2, [r1]
 800912a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800912e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1d9      	bne.n	80090ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800913c:	2b00      	cmp	r3, #0
 800913e:	d017      	beq.n	8009170 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009146:	4a15      	ldr	r2, [pc, #84]	@ (800919c <HAL_UART_IRQHandler+0x2c0>)
 8009148:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009150:	4618      	mov	r0, r3
 8009152:	f7fa fb89 	bl	8003868 <HAL_DMA_Abort_IT>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d019      	beq.n	8009190 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800916a:	4610      	mov	r0, r2
 800916c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800916e:	e00f      	b.n	8009190 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fa81 	bl	8009678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009176:	e00b      	b.n	8009190 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fa7d 	bl	8009678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800917e:	e007      	b.n	8009190 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fa79 	bl	8009678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800918e:	e253      	b.n	8009638 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009190:	bf00      	nop
    return;
 8009192:	e251      	b.n	8009638 <HAL_UART_IRQHandler+0x75c>
 8009194:	10000001 	.word	0x10000001
 8009198:	04000120 	.word	0x04000120
 800919c:	0800a7e1 	.word	0x0800a7e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	f040 81e7 	bne.w	8009578 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80091aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ae:	f003 0310 	and.w	r3, r3, #16
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 81e0 	beq.w	8009578 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80091b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091bc:	f003 0310 	and.w	r3, r3, #16
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 81d9 	beq.w	8009578 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2210      	movs	r2, #16
 80091cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091d8:	2b40      	cmp	r3, #64	@ 0x40
 80091da:	f040 8151 	bne.w	8009480 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a96      	ldr	r2, [pc, #600]	@ (8009440 <HAL_UART_IRQHandler+0x564>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d068      	beq.n	80092be <HAL_UART_IRQHandler+0x3e2>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a93      	ldr	r2, [pc, #588]	@ (8009444 <HAL_UART_IRQHandler+0x568>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d061      	beq.n	80092be <HAL_UART_IRQHandler+0x3e2>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a91      	ldr	r2, [pc, #580]	@ (8009448 <HAL_UART_IRQHandler+0x56c>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d05a      	beq.n	80092be <HAL_UART_IRQHandler+0x3e2>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a8e      	ldr	r2, [pc, #568]	@ (800944c <HAL_UART_IRQHandler+0x570>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d053      	beq.n	80092be <HAL_UART_IRQHandler+0x3e2>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a8c      	ldr	r2, [pc, #560]	@ (8009450 <HAL_UART_IRQHandler+0x574>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d04c      	beq.n	80092be <HAL_UART_IRQHandler+0x3e2>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a89      	ldr	r2, [pc, #548]	@ (8009454 <HAL_UART_IRQHandler+0x578>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d045      	beq.n	80092be <HAL_UART_IRQHandler+0x3e2>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a87      	ldr	r2, [pc, #540]	@ (8009458 <HAL_UART_IRQHandler+0x57c>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d03e      	beq.n	80092be <HAL_UART_IRQHandler+0x3e2>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a84      	ldr	r2, [pc, #528]	@ (800945c <HAL_UART_IRQHandler+0x580>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d037      	beq.n	80092be <HAL_UART_IRQHandler+0x3e2>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a82      	ldr	r2, [pc, #520]	@ (8009460 <HAL_UART_IRQHandler+0x584>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d030      	beq.n	80092be <HAL_UART_IRQHandler+0x3e2>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a7f      	ldr	r2, [pc, #508]	@ (8009464 <HAL_UART_IRQHandler+0x588>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d029      	beq.n	80092be <HAL_UART_IRQHandler+0x3e2>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a7d      	ldr	r2, [pc, #500]	@ (8009468 <HAL_UART_IRQHandler+0x58c>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d022      	beq.n	80092be <HAL_UART_IRQHandler+0x3e2>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a7a      	ldr	r2, [pc, #488]	@ (800946c <HAL_UART_IRQHandler+0x590>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d01b      	beq.n	80092be <HAL_UART_IRQHandler+0x3e2>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a78      	ldr	r2, [pc, #480]	@ (8009470 <HAL_UART_IRQHandler+0x594>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d014      	beq.n	80092be <HAL_UART_IRQHandler+0x3e2>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a75      	ldr	r2, [pc, #468]	@ (8009474 <HAL_UART_IRQHandler+0x598>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d00d      	beq.n	80092be <HAL_UART_IRQHandler+0x3e2>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a73      	ldr	r2, [pc, #460]	@ (8009478 <HAL_UART_IRQHandler+0x59c>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d006      	beq.n	80092be <HAL_UART_IRQHandler+0x3e2>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a70      	ldr	r2, [pc, #448]	@ (800947c <HAL_UART_IRQHandler+0x5a0>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d106      	bne.n	80092cc <HAL_UART_IRQHandler+0x3f0>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	e005      	b.n	80092d8 <HAL_UART_IRQHandler+0x3fc>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 81ab 	beq.w	800963c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092f0:	429a      	cmp	r2, r3
 80092f2:	f080 81a3 	bcs.w	800963c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800930c:	f000 8087 	beq.w	800941e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009318:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800931c:	e853 3f00 	ldrex	r3, [r3]
 8009320:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009324:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800932c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	461a      	mov	r2, r3
 8009336:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800933a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800933e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009342:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009346:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800934a:	e841 2300 	strex	r3, r2, [r1]
 800934e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009352:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1da      	bne.n	8009310 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3308      	adds	r3, #8
 8009360:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009362:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009364:	e853 3f00 	ldrex	r3, [r3]
 8009368:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800936a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800936c:	f023 0301 	bic.w	r3, r3, #1
 8009370:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3308      	adds	r3, #8
 800937a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800937e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009382:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009384:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009386:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800938a:	e841 2300 	strex	r3, r2, [r1]
 800938e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009390:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1e1      	bne.n	800935a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3308      	adds	r3, #8
 800939c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093a0:	e853 3f00 	ldrex	r3, [r3]
 80093a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80093a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3308      	adds	r3, #8
 80093b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80093ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80093bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80093c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80093c2:	e841 2300 	strex	r3, r2, [r1]
 80093c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80093c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1e3      	bne.n	8009396 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093e4:	e853 3f00 	ldrex	r3, [r3]
 80093e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80093ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093ec:	f023 0310 	bic.w	r3, r3, #16
 80093f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	461a      	mov	r2, r3
 80093fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009400:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009402:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009404:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009406:	e841 2300 	strex	r3, r2, [r1]
 800940a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800940c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1e4      	bne.n	80093dc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009418:	4618      	mov	r0, r3
 800941a:	f7f9 ff07 	bl	800322c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2202      	movs	r2, #2
 8009422:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009430:	b29b      	uxth	r3, r3
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	b29b      	uxth	r3, r3
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7f8 f91d 	bl	8001678 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800943e:	e0fd      	b.n	800963c <HAL_UART_IRQHandler+0x760>
 8009440:	40020010 	.word	0x40020010
 8009444:	40020028 	.word	0x40020028
 8009448:	40020040 	.word	0x40020040
 800944c:	40020058 	.word	0x40020058
 8009450:	40020070 	.word	0x40020070
 8009454:	40020088 	.word	0x40020088
 8009458:	400200a0 	.word	0x400200a0
 800945c:	400200b8 	.word	0x400200b8
 8009460:	40020410 	.word	0x40020410
 8009464:	40020428 	.word	0x40020428
 8009468:	40020440 	.word	0x40020440
 800946c:	40020458 	.word	0x40020458
 8009470:	40020470 	.word	0x40020470
 8009474:	40020488 	.word	0x40020488
 8009478:	400204a0 	.word	0x400204a0
 800947c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800948c:	b29b      	uxth	r3, r3
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800949a:	b29b      	uxth	r3, r3
 800949c:	2b00      	cmp	r3, #0
 800949e:	f000 80cf 	beq.w	8009640 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80094a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 80ca 	beq.w	8009640 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	461a      	mov	r2, r3
 80094ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80094ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80094d0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094d6:	e841 2300 	strex	r3, r2, [r1]
 80094da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1e4      	bne.n	80094ac <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	3308      	adds	r3, #8
 80094e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ec:	e853 3f00 	ldrex	r3, [r3]
 80094f0:	623b      	str	r3, [r7, #32]
   return(result);
 80094f2:	6a3a      	ldr	r2, [r7, #32]
 80094f4:	4b55      	ldr	r3, [pc, #340]	@ (800964c <HAL_UART_IRQHandler+0x770>)
 80094f6:	4013      	ands	r3, r2
 80094f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3308      	adds	r3, #8
 8009502:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009506:	633a      	str	r2, [r7, #48]	@ 0x30
 8009508:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800950c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800950e:	e841 2300 	strex	r3, r2, [r1]
 8009512:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1e3      	bne.n	80094e2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2220      	movs	r2, #32
 800951e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	60fb      	str	r3, [r7, #12]
   return(result);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f023 0310 	bic.w	r3, r3, #16
 8009542:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	461a      	mov	r2, r3
 800954c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009550:	61fb      	str	r3, [r7, #28]
 8009552:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009554:	69b9      	ldr	r1, [r7, #24]
 8009556:	69fa      	ldr	r2, [r7, #28]
 8009558:	e841 2300 	strex	r3, r2, [r1]
 800955c:	617b      	str	r3, [r7, #20]
   return(result);
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1e4      	bne.n	800952e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2202      	movs	r2, #2
 8009568:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800956a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7f8 f881 	bl	8001678 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009576:	e063      	b.n	8009640 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800957c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00e      	beq.n	80095a2 <HAL_UART_IRQHandler+0x6c6>
 8009584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800958c:	2b00      	cmp	r3, #0
 800958e:	d008      	beq.n	80095a2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009598:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f002 f820 	bl	800b5e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095a0:	e051      	b.n	8009646 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80095a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d014      	beq.n	80095d8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80095ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d105      	bne.n	80095c6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80095ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d008      	beq.n	80095d8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d03a      	beq.n	8009644 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	4798      	blx	r3
    }
    return;
 80095d6:	e035      	b.n	8009644 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80095d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d009      	beq.n	80095f8 <HAL_UART_IRQHandler+0x71c>
 80095e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d003      	beq.n	80095f8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 faad 	bl	800ab50 <UART_EndTransmit_IT>
    return;
 80095f6:	e026      	b.n	8009646 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80095f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d009      	beq.n	8009618 <HAL_UART_IRQHandler+0x73c>
 8009604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009608:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f001 fff9 	bl	800b608 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009616:	e016      	b.n	8009646 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800961c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d010      	beq.n	8009646 <HAL_UART_IRQHandler+0x76a>
 8009624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009628:	2b00      	cmp	r3, #0
 800962a:	da0c      	bge.n	8009646 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f001 ffe1 	bl	800b5f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009632:	e008      	b.n	8009646 <HAL_UART_IRQHandler+0x76a>
      return;
 8009634:	bf00      	nop
 8009636:	e006      	b.n	8009646 <HAL_UART_IRQHandler+0x76a>
    return;
 8009638:	bf00      	nop
 800963a:	e004      	b.n	8009646 <HAL_UART_IRQHandler+0x76a>
      return;
 800963c:	bf00      	nop
 800963e:	e002      	b.n	8009646 <HAL_UART_IRQHandler+0x76a>
      return;
 8009640:	bf00      	nop
 8009642:	e000      	b.n	8009646 <HAL_UART_IRQHandler+0x76a>
    return;
 8009644:	bf00      	nop
  }
}
 8009646:	37e8      	adds	r7, #232	@ 0xe8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	effffffe 	.word	0xeffffffe

08009650 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800968c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009690:	b092      	sub	sp, #72	@ 0x48
 8009692:	af00      	add	r7, sp, #0
 8009694:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	689a      	ldr	r2, [r3, #8]
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	431a      	orrs	r2, r3
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	431a      	orrs	r2, r3
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	69db      	ldr	r3, [r3, #28]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	4bbe      	ldr	r3, [pc, #760]	@ (80099b4 <UART_SetConfig+0x328>)
 80096bc:	4013      	ands	r3, r2
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	6812      	ldr	r2, [r2, #0]
 80096c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80096c4:	430b      	orrs	r3, r1
 80096c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	430a      	orrs	r2, r1
 80096dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	699b      	ldr	r3, [r3, #24]
 80096e2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4ab3      	ldr	r2, [pc, #716]	@ (80099b8 <UART_SetConfig+0x32c>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d004      	beq.n	80096f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096f4:	4313      	orrs	r3, r2
 80096f6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	689a      	ldr	r2, [r3, #8]
 80096fe:	4baf      	ldr	r3, [pc, #700]	@ (80099bc <UART_SetConfig+0x330>)
 8009700:	4013      	ands	r3, r2
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	6812      	ldr	r2, [r2, #0]
 8009706:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009708:	430b      	orrs	r3, r1
 800970a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009712:	f023 010f 	bic.w	r1, r3, #15
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	430a      	orrs	r2, r1
 8009720:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4aa6      	ldr	r2, [pc, #664]	@ (80099c0 <UART_SetConfig+0x334>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d177      	bne.n	800981c <UART_SetConfig+0x190>
 800972c:	4ba5      	ldr	r3, [pc, #660]	@ (80099c4 <UART_SetConfig+0x338>)
 800972e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009730:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009734:	2b28      	cmp	r3, #40	@ 0x28
 8009736:	d86d      	bhi.n	8009814 <UART_SetConfig+0x188>
 8009738:	a201      	add	r2, pc, #4	@ (adr r2, 8009740 <UART_SetConfig+0xb4>)
 800973a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973e:	bf00      	nop
 8009740:	080097e5 	.word	0x080097e5
 8009744:	08009815 	.word	0x08009815
 8009748:	08009815 	.word	0x08009815
 800974c:	08009815 	.word	0x08009815
 8009750:	08009815 	.word	0x08009815
 8009754:	08009815 	.word	0x08009815
 8009758:	08009815 	.word	0x08009815
 800975c:	08009815 	.word	0x08009815
 8009760:	080097ed 	.word	0x080097ed
 8009764:	08009815 	.word	0x08009815
 8009768:	08009815 	.word	0x08009815
 800976c:	08009815 	.word	0x08009815
 8009770:	08009815 	.word	0x08009815
 8009774:	08009815 	.word	0x08009815
 8009778:	08009815 	.word	0x08009815
 800977c:	08009815 	.word	0x08009815
 8009780:	080097f5 	.word	0x080097f5
 8009784:	08009815 	.word	0x08009815
 8009788:	08009815 	.word	0x08009815
 800978c:	08009815 	.word	0x08009815
 8009790:	08009815 	.word	0x08009815
 8009794:	08009815 	.word	0x08009815
 8009798:	08009815 	.word	0x08009815
 800979c:	08009815 	.word	0x08009815
 80097a0:	080097fd 	.word	0x080097fd
 80097a4:	08009815 	.word	0x08009815
 80097a8:	08009815 	.word	0x08009815
 80097ac:	08009815 	.word	0x08009815
 80097b0:	08009815 	.word	0x08009815
 80097b4:	08009815 	.word	0x08009815
 80097b8:	08009815 	.word	0x08009815
 80097bc:	08009815 	.word	0x08009815
 80097c0:	08009805 	.word	0x08009805
 80097c4:	08009815 	.word	0x08009815
 80097c8:	08009815 	.word	0x08009815
 80097cc:	08009815 	.word	0x08009815
 80097d0:	08009815 	.word	0x08009815
 80097d4:	08009815 	.word	0x08009815
 80097d8:	08009815 	.word	0x08009815
 80097dc:	08009815 	.word	0x08009815
 80097e0:	0800980d 	.word	0x0800980d
 80097e4:	2301      	movs	r3, #1
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ea:	e222      	b.n	8009c32 <UART_SetConfig+0x5a6>
 80097ec:	2304      	movs	r3, #4
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f2:	e21e      	b.n	8009c32 <UART_SetConfig+0x5a6>
 80097f4:	2308      	movs	r3, #8
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fa:	e21a      	b.n	8009c32 <UART_SetConfig+0x5a6>
 80097fc:	2310      	movs	r3, #16
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009802:	e216      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009804:	2320      	movs	r3, #32
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980a:	e212      	b.n	8009c32 <UART_SetConfig+0x5a6>
 800980c:	2340      	movs	r3, #64	@ 0x40
 800980e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009812:	e20e      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009814:	2380      	movs	r3, #128	@ 0x80
 8009816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981a:	e20a      	b.n	8009c32 <UART_SetConfig+0x5a6>
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a69      	ldr	r2, [pc, #420]	@ (80099c8 <UART_SetConfig+0x33c>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d130      	bne.n	8009888 <UART_SetConfig+0x1fc>
 8009826:	4b67      	ldr	r3, [pc, #412]	@ (80099c4 <UART_SetConfig+0x338>)
 8009828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800982a:	f003 0307 	and.w	r3, r3, #7
 800982e:	2b05      	cmp	r3, #5
 8009830:	d826      	bhi.n	8009880 <UART_SetConfig+0x1f4>
 8009832:	a201      	add	r2, pc, #4	@ (adr r2, 8009838 <UART_SetConfig+0x1ac>)
 8009834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009838:	08009851 	.word	0x08009851
 800983c:	08009859 	.word	0x08009859
 8009840:	08009861 	.word	0x08009861
 8009844:	08009869 	.word	0x08009869
 8009848:	08009871 	.word	0x08009871
 800984c:	08009879 	.word	0x08009879
 8009850:	2300      	movs	r3, #0
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009856:	e1ec      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009858:	2304      	movs	r3, #4
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985e:	e1e8      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009860:	2308      	movs	r3, #8
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009866:	e1e4      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009868:	2310      	movs	r3, #16
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986e:	e1e0      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009870:	2320      	movs	r3, #32
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009876:	e1dc      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009878:	2340      	movs	r3, #64	@ 0x40
 800987a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987e:	e1d8      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009880:	2380      	movs	r3, #128	@ 0x80
 8009882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009886:	e1d4      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a4f      	ldr	r2, [pc, #316]	@ (80099cc <UART_SetConfig+0x340>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d130      	bne.n	80098f4 <UART_SetConfig+0x268>
 8009892:	4b4c      	ldr	r3, [pc, #304]	@ (80099c4 <UART_SetConfig+0x338>)
 8009894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009896:	f003 0307 	and.w	r3, r3, #7
 800989a:	2b05      	cmp	r3, #5
 800989c:	d826      	bhi.n	80098ec <UART_SetConfig+0x260>
 800989e:	a201      	add	r2, pc, #4	@ (adr r2, 80098a4 <UART_SetConfig+0x218>)
 80098a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a4:	080098bd 	.word	0x080098bd
 80098a8:	080098c5 	.word	0x080098c5
 80098ac:	080098cd 	.word	0x080098cd
 80098b0:	080098d5 	.word	0x080098d5
 80098b4:	080098dd 	.word	0x080098dd
 80098b8:	080098e5 	.word	0x080098e5
 80098bc:	2300      	movs	r3, #0
 80098be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c2:	e1b6      	b.n	8009c32 <UART_SetConfig+0x5a6>
 80098c4:	2304      	movs	r3, #4
 80098c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ca:	e1b2      	b.n	8009c32 <UART_SetConfig+0x5a6>
 80098cc:	2308      	movs	r3, #8
 80098ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d2:	e1ae      	b.n	8009c32 <UART_SetConfig+0x5a6>
 80098d4:	2310      	movs	r3, #16
 80098d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098da:	e1aa      	b.n	8009c32 <UART_SetConfig+0x5a6>
 80098dc:	2320      	movs	r3, #32
 80098de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e2:	e1a6      	b.n	8009c32 <UART_SetConfig+0x5a6>
 80098e4:	2340      	movs	r3, #64	@ 0x40
 80098e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ea:	e1a2      	b.n	8009c32 <UART_SetConfig+0x5a6>
 80098ec:	2380      	movs	r3, #128	@ 0x80
 80098ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098f2:	e19e      	b.n	8009c32 <UART_SetConfig+0x5a6>
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a35      	ldr	r2, [pc, #212]	@ (80099d0 <UART_SetConfig+0x344>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d130      	bne.n	8009960 <UART_SetConfig+0x2d4>
 80098fe:	4b31      	ldr	r3, [pc, #196]	@ (80099c4 <UART_SetConfig+0x338>)
 8009900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009902:	f003 0307 	and.w	r3, r3, #7
 8009906:	2b05      	cmp	r3, #5
 8009908:	d826      	bhi.n	8009958 <UART_SetConfig+0x2cc>
 800990a:	a201      	add	r2, pc, #4	@ (adr r2, 8009910 <UART_SetConfig+0x284>)
 800990c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009910:	08009929 	.word	0x08009929
 8009914:	08009931 	.word	0x08009931
 8009918:	08009939 	.word	0x08009939
 800991c:	08009941 	.word	0x08009941
 8009920:	08009949 	.word	0x08009949
 8009924:	08009951 	.word	0x08009951
 8009928:	2300      	movs	r3, #0
 800992a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992e:	e180      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009930:	2304      	movs	r3, #4
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009936:	e17c      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009938:	2308      	movs	r3, #8
 800993a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993e:	e178      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009940:	2310      	movs	r3, #16
 8009942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009946:	e174      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009948:	2320      	movs	r3, #32
 800994a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994e:	e170      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009950:	2340      	movs	r3, #64	@ 0x40
 8009952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009956:	e16c      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009958:	2380      	movs	r3, #128	@ 0x80
 800995a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995e:	e168      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a1b      	ldr	r2, [pc, #108]	@ (80099d4 <UART_SetConfig+0x348>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d142      	bne.n	80099f0 <UART_SetConfig+0x364>
 800996a:	4b16      	ldr	r3, [pc, #88]	@ (80099c4 <UART_SetConfig+0x338>)
 800996c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800996e:	f003 0307 	and.w	r3, r3, #7
 8009972:	2b05      	cmp	r3, #5
 8009974:	d838      	bhi.n	80099e8 <UART_SetConfig+0x35c>
 8009976:	a201      	add	r2, pc, #4	@ (adr r2, 800997c <UART_SetConfig+0x2f0>)
 8009978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997c:	08009995 	.word	0x08009995
 8009980:	0800999d 	.word	0x0800999d
 8009984:	080099a5 	.word	0x080099a5
 8009988:	080099ad 	.word	0x080099ad
 800998c:	080099d9 	.word	0x080099d9
 8009990:	080099e1 	.word	0x080099e1
 8009994:	2300      	movs	r3, #0
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999a:	e14a      	b.n	8009c32 <UART_SetConfig+0x5a6>
 800999c:	2304      	movs	r3, #4
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a2:	e146      	b.n	8009c32 <UART_SetConfig+0x5a6>
 80099a4:	2308      	movs	r3, #8
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099aa:	e142      	b.n	8009c32 <UART_SetConfig+0x5a6>
 80099ac:	2310      	movs	r3, #16
 80099ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099b2:	e13e      	b.n	8009c32 <UART_SetConfig+0x5a6>
 80099b4:	cfff69f3 	.word	0xcfff69f3
 80099b8:	58000c00 	.word	0x58000c00
 80099bc:	11fff4ff 	.word	0x11fff4ff
 80099c0:	40011000 	.word	0x40011000
 80099c4:	58024400 	.word	0x58024400
 80099c8:	40004400 	.word	0x40004400
 80099cc:	40004800 	.word	0x40004800
 80099d0:	40004c00 	.word	0x40004c00
 80099d4:	40005000 	.word	0x40005000
 80099d8:	2320      	movs	r3, #32
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099de:	e128      	b.n	8009c32 <UART_SetConfig+0x5a6>
 80099e0:	2340      	movs	r3, #64	@ 0x40
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099e6:	e124      	b.n	8009c32 <UART_SetConfig+0x5a6>
 80099e8:	2380      	movs	r3, #128	@ 0x80
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ee:	e120      	b.n	8009c32 <UART_SetConfig+0x5a6>
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4acb      	ldr	r2, [pc, #812]	@ (8009d24 <UART_SetConfig+0x698>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d176      	bne.n	8009ae8 <UART_SetConfig+0x45c>
 80099fa:	4bcb      	ldr	r3, [pc, #812]	@ (8009d28 <UART_SetConfig+0x69c>)
 80099fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a02:	2b28      	cmp	r3, #40	@ 0x28
 8009a04:	d86c      	bhi.n	8009ae0 <UART_SetConfig+0x454>
 8009a06:	a201      	add	r2, pc, #4	@ (adr r2, 8009a0c <UART_SetConfig+0x380>)
 8009a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0c:	08009ab1 	.word	0x08009ab1
 8009a10:	08009ae1 	.word	0x08009ae1
 8009a14:	08009ae1 	.word	0x08009ae1
 8009a18:	08009ae1 	.word	0x08009ae1
 8009a1c:	08009ae1 	.word	0x08009ae1
 8009a20:	08009ae1 	.word	0x08009ae1
 8009a24:	08009ae1 	.word	0x08009ae1
 8009a28:	08009ae1 	.word	0x08009ae1
 8009a2c:	08009ab9 	.word	0x08009ab9
 8009a30:	08009ae1 	.word	0x08009ae1
 8009a34:	08009ae1 	.word	0x08009ae1
 8009a38:	08009ae1 	.word	0x08009ae1
 8009a3c:	08009ae1 	.word	0x08009ae1
 8009a40:	08009ae1 	.word	0x08009ae1
 8009a44:	08009ae1 	.word	0x08009ae1
 8009a48:	08009ae1 	.word	0x08009ae1
 8009a4c:	08009ac1 	.word	0x08009ac1
 8009a50:	08009ae1 	.word	0x08009ae1
 8009a54:	08009ae1 	.word	0x08009ae1
 8009a58:	08009ae1 	.word	0x08009ae1
 8009a5c:	08009ae1 	.word	0x08009ae1
 8009a60:	08009ae1 	.word	0x08009ae1
 8009a64:	08009ae1 	.word	0x08009ae1
 8009a68:	08009ae1 	.word	0x08009ae1
 8009a6c:	08009ac9 	.word	0x08009ac9
 8009a70:	08009ae1 	.word	0x08009ae1
 8009a74:	08009ae1 	.word	0x08009ae1
 8009a78:	08009ae1 	.word	0x08009ae1
 8009a7c:	08009ae1 	.word	0x08009ae1
 8009a80:	08009ae1 	.word	0x08009ae1
 8009a84:	08009ae1 	.word	0x08009ae1
 8009a88:	08009ae1 	.word	0x08009ae1
 8009a8c:	08009ad1 	.word	0x08009ad1
 8009a90:	08009ae1 	.word	0x08009ae1
 8009a94:	08009ae1 	.word	0x08009ae1
 8009a98:	08009ae1 	.word	0x08009ae1
 8009a9c:	08009ae1 	.word	0x08009ae1
 8009aa0:	08009ae1 	.word	0x08009ae1
 8009aa4:	08009ae1 	.word	0x08009ae1
 8009aa8:	08009ae1 	.word	0x08009ae1
 8009aac:	08009ad9 	.word	0x08009ad9
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab6:	e0bc      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009ab8:	2304      	movs	r3, #4
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009abe:	e0b8      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009ac0:	2308      	movs	r3, #8
 8009ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ac6:	e0b4      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009ac8:	2310      	movs	r3, #16
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ace:	e0b0      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009ad0:	2320      	movs	r3, #32
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad6:	e0ac      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009ad8:	2340      	movs	r3, #64	@ 0x40
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ade:	e0a8      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009ae0:	2380      	movs	r3, #128	@ 0x80
 8009ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ae6:	e0a4      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a8f      	ldr	r2, [pc, #572]	@ (8009d2c <UART_SetConfig+0x6a0>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d130      	bne.n	8009b54 <UART_SetConfig+0x4c8>
 8009af2:	4b8d      	ldr	r3, [pc, #564]	@ (8009d28 <UART_SetConfig+0x69c>)
 8009af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009af6:	f003 0307 	and.w	r3, r3, #7
 8009afa:	2b05      	cmp	r3, #5
 8009afc:	d826      	bhi.n	8009b4c <UART_SetConfig+0x4c0>
 8009afe:	a201      	add	r2, pc, #4	@ (adr r2, 8009b04 <UART_SetConfig+0x478>)
 8009b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b04:	08009b1d 	.word	0x08009b1d
 8009b08:	08009b25 	.word	0x08009b25
 8009b0c:	08009b2d 	.word	0x08009b2d
 8009b10:	08009b35 	.word	0x08009b35
 8009b14:	08009b3d 	.word	0x08009b3d
 8009b18:	08009b45 	.word	0x08009b45
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b22:	e086      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009b24:	2304      	movs	r3, #4
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b2a:	e082      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009b2c:	2308      	movs	r3, #8
 8009b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b32:	e07e      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009b34:	2310      	movs	r3, #16
 8009b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b3a:	e07a      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009b3c:	2320      	movs	r3, #32
 8009b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b42:	e076      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009b44:	2340      	movs	r3, #64	@ 0x40
 8009b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b4a:	e072      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009b4c:	2380      	movs	r3, #128	@ 0x80
 8009b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b52:	e06e      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a75      	ldr	r2, [pc, #468]	@ (8009d30 <UART_SetConfig+0x6a4>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d130      	bne.n	8009bc0 <UART_SetConfig+0x534>
 8009b5e:	4b72      	ldr	r3, [pc, #456]	@ (8009d28 <UART_SetConfig+0x69c>)
 8009b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b62:	f003 0307 	and.w	r3, r3, #7
 8009b66:	2b05      	cmp	r3, #5
 8009b68:	d826      	bhi.n	8009bb8 <UART_SetConfig+0x52c>
 8009b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b70 <UART_SetConfig+0x4e4>)
 8009b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b70:	08009b89 	.word	0x08009b89
 8009b74:	08009b91 	.word	0x08009b91
 8009b78:	08009b99 	.word	0x08009b99
 8009b7c:	08009ba1 	.word	0x08009ba1
 8009b80:	08009ba9 	.word	0x08009ba9
 8009b84:	08009bb1 	.word	0x08009bb1
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8e:	e050      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009b90:	2304      	movs	r3, #4
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b96:	e04c      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009b98:	2308      	movs	r3, #8
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9e:	e048      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009ba0:	2310      	movs	r3, #16
 8009ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ba6:	e044      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009ba8:	2320      	movs	r3, #32
 8009baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bae:	e040      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009bb0:	2340      	movs	r3, #64	@ 0x40
 8009bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bb6:	e03c      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009bb8:	2380      	movs	r3, #128	@ 0x80
 8009bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bbe:	e038      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a5b      	ldr	r2, [pc, #364]	@ (8009d34 <UART_SetConfig+0x6a8>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d130      	bne.n	8009c2c <UART_SetConfig+0x5a0>
 8009bca:	4b57      	ldr	r3, [pc, #348]	@ (8009d28 <UART_SetConfig+0x69c>)
 8009bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bce:	f003 0307 	and.w	r3, r3, #7
 8009bd2:	2b05      	cmp	r3, #5
 8009bd4:	d826      	bhi.n	8009c24 <UART_SetConfig+0x598>
 8009bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bdc <UART_SetConfig+0x550>)
 8009bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bdc:	08009bf5 	.word	0x08009bf5
 8009be0:	08009bfd 	.word	0x08009bfd
 8009be4:	08009c05 	.word	0x08009c05
 8009be8:	08009c0d 	.word	0x08009c0d
 8009bec:	08009c15 	.word	0x08009c15
 8009bf0:	08009c1d 	.word	0x08009c1d
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bfa:	e01a      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009bfc:	2304      	movs	r3, #4
 8009bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c02:	e016      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009c04:	2308      	movs	r3, #8
 8009c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c0a:	e012      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009c0c:	2310      	movs	r3, #16
 8009c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c12:	e00e      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009c14:	2320      	movs	r3, #32
 8009c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c1a:	e00a      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009c1c:	2340      	movs	r3, #64	@ 0x40
 8009c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c22:	e006      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009c24:	2380      	movs	r3, #128	@ 0x80
 8009c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c2a:	e002      	b.n	8009c32 <UART_SetConfig+0x5a6>
 8009c2c:	2380      	movs	r3, #128	@ 0x80
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a3f      	ldr	r2, [pc, #252]	@ (8009d34 <UART_SetConfig+0x6a8>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	f040 80f8 	bne.w	8009e2e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c42:	2b20      	cmp	r3, #32
 8009c44:	dc46      	bgt.n	8009cd4 <UART_SetConfig+0x648>
 8009c46:	2b02      	cmp	r3, #2
 8009c48:	f2c0 8082 	blt.w	8009d50 <UART_SetConfig+0x6c4>
 8009c4c:	3b02      	subs	r3, #2
 8009c4e:	2b1e      	cmp	r3, #30
 8009c50:	d87e      	bhi.n	8009d50 <UART_SetConfig+0x6c4>
 8009c52:	a201      	add	r2, pc, #4	@ (adr r2, 8009c58 <UART_SetConfig+0x5cc>)
 8009c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c58:	08009cdb 	.word	0x08009cdb
 8009c5c:	08009d51 	.word	0x08009d51
 8009c60:	08009ce3 	.word	0x08009ce3
 8009c64:	08009d51 	.word	0x08009d51
 8009c68:	08009d51 	.word	0x08009d51
 8009c6c:	08009d51 	.word	0x08009d51
 8009c70:	08009cf3 	.word	0x08009cf3
 8009c74:	08009d51 	.word	0x08009d51
 8009c78:	08009d51 	.word	0x08009d51
 8009c7c:	08009d51 	.word	0x08009d51
 8009c80:	08009d51 	.word	0x08009d51
 8009c84:	08009d51 	.word	0x08009d51
 8009c88:	08009d51 	.word	0x08009d51
 8009c8c:	08009d51 	.word	0x08009d51
 8009c90:	08009d03 	.word	0x08009d03
 8009c94:	08009d51 	.word	0x08009d51
 8009c98:	08009d51 	.word	0x08009d51
 8009c9c:	08009d51 	.word	0x08009d51
 8009ca0:	08009d51 	.word	0x08009d51
 8009ca4:	08009d51 	.word	0x08009d51
 8009ca8:	08009d51 	.word	0x08009d51
 8009cac:	08009d51 	.word	0x08009d51
 8009cb0:	08009d51 	.word	0x08009d51
 8009cb4:	08009d51 	.word	0x08009d51
 8009cb8:	08009d51 	.word	0x08009d51
 8009cbc:	08009d51 	.word	0x08009d51
 8009cc0:	08009d51 	.word	0x08009d51
 8009cc4:	08009d51 	.word	0x08009d51
 8009cc8:	08009d51 	.word	0x08009d51
 8009ccc:	08009d51 	.word	0x08009d51
 8009cd0:	08009d43 	.word	0x08009d43
 8009cd4:	2b40      	cmp	r3, #64	@ 0x40
 8009cd6:	d037      	beq.n	8009d48 <UART_SetConfig+0x6bc>
 8009cd8:	e03a      	b.n	8009d50 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009cda:	f7fd fe6d 	bl	80079b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009cde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ce0:	e03c      	b.n	8009d5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fd fe7c 	bl	80079e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cf0:	e034      	b.n	8009d5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cf2:	f107 0318 	add.w	r3, r7, #24
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fd ffc8 	bl	8007c8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d00:	e02c      	b.n	8009d5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d02:	4b09      	ldr	r3, [pc, #36]	@ (8009d28 <UART_SetConfig+0x69c>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 0320 	and.w	r3, r3, #32
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d016      	beq.n	8009d3c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d0e:	4b06      	ldr	r3, [pc, #24]	@ (8009d28 <UART_SetConfig+0x69c>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	08db      	lsrs	r3, r3, #3
 8009d14:	f003 0303 	and.w	r3, r3, #3
 8009d18:	4a07      	ldr	r2, [pc, #28]	@ (8009d38 <UART_SetConfig+0x6ac>)
 8009d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d20:	e01c      	b.n	8009d5c <UART_SetConfig+0x6d0>
 8009d22:	bf00      	nop
 8009d24:	40011400 	.word	0x40011400
 8009d28:	58024400 	.word	0x58024400
 8009d2c:	40007800 	.word	0x40007800
 8009d30:	40007c00 	.word	0x40007c00
 8009d34:	58000c00 	.word	0x58000c00
 8009d38:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009d3c:	4b9d      	ldr	r3, [pc, #628]	@ (8009fb4 <UART_SetConfig+0x928>)
 8009d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d40:	e00c      	b.n	8009d5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d42:	4b9d      	ldr	r3, [pc, #628]	@ (8009fb8 <UART_SetConfig+0x92c>)
 8009d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d46:	e009      	b.n	8009d5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d4e:	e005      	b.n	8009d5c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009d50:	2300      	movs	r3, #0
 8009d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 81de 	beq.w	800a120 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d68:	4a94      	ldr	r2, [pc, #592]	@ (8009fbc <UART_SetConfig+0x930>)
 8009d6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d76:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	005b      	lsls	r3, r3, #1
 8009d80:	4413      	add	r3, r2
 8009d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d305      	bcc.n	8009d94 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d903      	bls.n	8009d9c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d9a:	e1c1      	b.n	800a120 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d9e:	2200      	movs	r2, #0
 8009da0:	60bb      	str	r3, [r7, #8]
 8009da2:	60fa      	str	r2, [r7, #12]
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da8:	4a84      	ldr	r2, [pc, #528]	@ (8009fbc <UART_SetConfig+0x930>)
 8009daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	2200      	movs	r2, #0
 8009db2:	603b      	str	r3, [r7, #0]
 8009db4:	607a      	str	r2, [r7, #4]
 8009db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009dbe:	f7f6 fa8b 	bl	80002d8 <__aeabi_uldivmod>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	4610      	mov	r0, r2
 8009dc8:	4619      	mov	r1, r3
 8009dca:	f04f 0200 	mov.w	r2, #0
 8009dce:	f04f 0300 	mov.w	r3, #0
 8009dd2:	020b      	lsls	r3, r1, #8
 8009dd4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009dd8:	0202      	lsls	r2, r0, #8
 8009dda:	6979      	ldr	r1, [r7, #20]
 8009ddc:	6849      	ldr	r1, [r1, #4]
 8009dde:	0849      	lsrs	r1, r1, #1
 8009de0:	2000      	movs	r0, #0
 8009de2:	460c      	mov	r4, r1
 8009de4:	4605      	mov	r5, r0
 8009de6:	eb12 0804 	adds.w	r8, r2, r4
 8009dea:	eb43 0905 	adc.w	r9, r3, r5
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	469a      	mov	sl, r3
 8009df6:	4693      	mov	fp, r2
 8009df8:	4652      	mov	r2, sl
 8009dfa:	465b      	mov	r3, fp
 8009dfc:	4640      	mov	r0, r8
 8009dfe:	4649      	mov	r1, r9
 8009e00:	f7f6 fa6a 	bl	80002d8 <__aeabi_uldivmod>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	4613      	mov	r3, r2
 8009e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e12:	d308      	bcc.n	8009e26 <UART_SetConfig+0x79a>
 8009e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e1a:	d204      	bcs.n	8009e26 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e22:	60da      	str	r2, [r3, #12]
 8009e24:	e17c      	b.n	800a120 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009e2c:	e178      	b.n	800a120 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	69db      	ldr	r3, [r3, #28]
 8009e32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e36:	f040 80c5 	bne.w	8009fc4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009e3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	2b20      	cmp	r3, #32
 8009e40:	dc48      	bgt.n	8009ed4 <UART_SetConfig+0x848>
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	db7b      	blt.n	8009f3e <UART_SetConfig+0x8b2>
 8009e46:	2b20      	cmp	r3, #32
 8009e48:	d879      	bhi.n	8009f3e <UART_SetConfig+0x8b2>
 8009e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e50 <UART_SetConfig+0x7c4>)
 8009e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e50:	08009edb 	.word	0x08009edb
 8009e54:	08009ee3 	.word	0x08009ee3
 8009e58:	08009f3f 	.word	0x08009f3f
 8009e5c:	08009f3f 	.word	0x08009f3f
 8009e60:	08009eeb 	.word	0x08009eeb
 8009e64:	08009f3f 	.word	0x08009f3f
 8009e68:	08009f3f 	.word	0x08009f3f
 8009e6c:	08009f3f 	.word	0x08009f3f
 8009e70:	08009efb 	.word	0x08009efb
 8009e74:	08009f3f 	.word	0x08009f3f
 8009e78:	08009f3f 	.word	0x08009f3f
 8009e7c:	08009f3f 	.word	0x08009f3f
 8009e80:	08009f3f 	.word	0x08009f3f
 8009e84:	08009f3f 	.word	0x08009f3f
 8009e88:	08009f3f 	.word	0x08009f3f
 8009e8c:	08009f3f 	.word	0x08009f3f
 8009e90:	08009f0b 	.word	0x08009f0b
 8009e94:	08009f3f 	.word	0x08009f3f
 8009e98:	08009f3f 	.word	0x08009f3f
 8009e9c:	08009f3f 	.word	0x08009f3f
 8009ea0:	08009f3f 	.word	0x08009f3f
 8009ea4:	08009f3f 	.word	0x08009f3f
 8009ea8:	08009f3f 	.word	0x08009f3f
 8009eac:	08009f3f 	.word	0x08009f3f
 8009eb0:	08009f3f 	.word	0x08009f3f
 8009eb4:	08009f3f 	.word	0x08009f3f
 8009eb8:	08009f3f 	.word	0x08009f3f
 8009ebc:	08009f3f 	.word	0x08009f3f
 8009ec0:	08009f3f 	.word	0x08009f3f
 8009ec4:	08009f3f 	.word	0x08009f3f
 8009ec8:	08009f3f 	.word	0x08009f3f
 8009ecc:	08009f3f 	.word	0x08009f3f
 8009ed0:	08009f31 	.word	0x08009f31
 8009ed4:	2b40      	cmp	r3, #64	@ 0x40
 8009ed6:	d02e      	beq.n	8009f36 <UART_SetConfig+0x8aa>
 8009ed8:	e031      	b.n	8009f3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eda:	f7fc fb53 	bl	8006584 <HAL_RCC_GetPCLK1Freq>
 8009ede:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ee0:	e033      	b.n	8009f4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ee2:	f7fc fb65 	bl	80065b0 <HAL_RCC_GetPCLK2Freq>
 8009ee6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ee8:	e02f      	b.n	8009f4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fd fd78 	bl	80079e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ef8:	e027      	b.n	8009f4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009efa:	f107 0318 	add.w	r3, r7, #24
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fd fec4 	bl	8007c8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f08:	e01f      	b.n	8009f4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8009fc0 <UART_SetConfig+0x934>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0320 	and.w	r3, r3, #32
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d009      	beq.n	8009f2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f16:	4b2a      	ldr	r3, [pc, #168]	@ (8009fc0 <UART_SetConfig+0x934>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	08db      	lsrs	r3, r3, #3
 8009f1c:	f003 0303 	and.w	r3, r3, #3
 8009f20:	4a24      	ldr	r2, [pc, #144]	@ (8009fb4 <UART_SetConfig+0x928>)
 8009f22:	fa22 f303 	lsr.w	r3, r2, r3
 8009f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f28:	e00f      	b.n	8009f4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009f2a:	4b22      	ldr	r3, [pc, #136]	@ (8009fb4 <UART_SetConfig+0x928>)
 8009f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f2e:	e00c      	b.n	8009f4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f30:	4b21      	ldr	r3, [pc, #132]	@ (8009fb8 <UART_SetConfig+0x92c>)
 8009f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f34:	e009      	b.n	8009f4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f3c:	e005      	b.n	8009f4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 80e7 	beq.w	800a120 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f56:	4a19      	ldr	r2, [pc, #100]	@ (8009fbc <UART_SetConfig+0x930>)
 8009f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f64:	005a      	lsls	r2, r3, #1
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	085b      	lsrs	r3, r3, #1
 8009f6c:	441a      	add	r2, r3
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f76:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f7a:	2b0f      	cmp	r3, #15
 8009f7c:	d916      	bls.n	8009fac <UART_SetConfig+0x920>
 8009f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f84:	d212      	bcs.n	8009fac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	f023 030f 	bic.w	r3, r3, #15
 8009f8e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f92:	085b      	lsrs	r3, r3, #1
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	f003 0307 	and.w	r3, r3, #7
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009fa8:	60da      	str	r2, [r3, #12]
 8009faa:	e0b9      	b.n	800a120 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009fb2:	e0b5      	b.n	800a120 <UART_SetConfig+0xa94>
 8009fb4:	03d09000 	.word	0x03d09000
 8009fb8:	003d0900 	.word	0x003d0900
 8009fbc:	0800bc04 	.word	0x0800bc04
 8009fc0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fc4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009fc8:	2b20      	cmp	r3, #32
 8009fca:	dc49      	bgt.n	800a060 <UART_SetConfig+0x9d4>
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	db7c      	blt.n	800a0ca <UART_SetConfig+0xa3e>
 8009fd0:	2b20      	cmp	r3, #32
 8009fd2:	d87a      	bhi.n	800a0ca <UART_SetConfig+0xa3e>
 8009fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8009fdc <UART_SetConfig+0x950>)
 8009fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fda:	bf00      	nop
 8009fdc:	0800a067 	.word	0x0800a067
 8009fe0:	0800a06f 	.word	0x0800a06f
 8009fe4:	0800a0cb 	.word	0x0800a0cb
 8009fe8:	0800a0cb 	.word	0x0800a0cb
 8009fec:	0800a077 	.word	0x0800a077
 8009ff0:	0800a0cb 	.word	0x0800a0cb
 8009ff4:	0800a0cb 	.word	0x0800a0cb
 8009ff8:	0800a0cb 	.word	0x0800a0cb
 8009ffc:	0800a087 	.word	0x0800a087
 800a000:	0800a0cb 	.word	0x0800a0cb
 800a004:	0800a0cb 	.word	0x0800a0cb
 800a008:	0800a0cb 	.word	0x0800a0cb
 800a00c:	0800a0cb 	.word	0x0800a0cb
 800a010:	0800a0cb 	.word	0x0800a0cb
 800a014:	0800a0cb 	.word	0x0800a0cb
 800a018:	0800a0cb 	.word	0x0800a0cb
 800a01c:	0800a097 	.word	0x0800a097
 800a020:	0800a0cb 	.word	0x0800a0cb
 800a024:	0800a0cb 	.word	0x0800a0cb
 800a028:	0800a0cb 	.word	0x0800a0cb
 800a02c:	0800a0cb 	.word	0x0800a0cb
 800a030:	0800a0cb 	.word	0x0800a0cb
 800a034:	0800a0cb 	.word	0x0800a0cb
 800a038:	0800a0cb 	.word	0x0800a0cb
 800a03c:	0800a0cb 	.word	0x0800a0cb
 800a040:	0800a0cb 	.word	0x0800a0cb
 800a044:	0800a0cb 	.word	0x0800a0cb
 800a048:	0800a0cb 	.word	0x0800a0cb
 800a04c:	0800a0cb 	.word	0x0800a0cb
 800a050:	0800a0cb 	.word	0x0800a0cb
 800a054:	0800a0cb 	.word	0x0800a0cb
 800a058:	0800a0cb 	.word	0x0800a0cb
 800a05c:	0800a0bd 	.word	0x0800a0bd
 800a060:	2b40      	cmp	r3, #64	@ 0x40
 800a062:	d02e      	beq.n	800a0c2 <UART_SetConfig+0xa36>
 800a064:	e031      	b.n	800a0ca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a066:	f7fc fa8d 	bl	8006584 <HAL_RCC_GetPCLK1Freq>
 800a06a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a06c:	e033      	b.n	800a0d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a06e:	f7fc fa9f 	bl	80065b0 <HAL_RCC_GetPCLK2Freq>
 800a072:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a074:	e02f      	b.n	800a0d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fd fcb2 	bl	80079e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a084:	e027      	b.n	800a0d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a086:	f107 0318 	add.w	r3, r7, #24
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fd fdfe 	bl	8007c8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a094:	e01f      	b.n	800a0d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a096:	4b2d      	ldr	r3, [pc, #180]	@ (800a14c <UART_SetConfig+0xac0>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 0320 	and.w	r3, r3, #32
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d009      	beq.n	800a0b6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0a2:	4b2a      	ldr	r3, [pc, #168]	@ (800a14c <UART_SetConfig+0xac0>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	08db      	lsrs	r3, r3, #3
 800a0a8:	f003 0303 	and.w	r3, r3, #3
 800a0ac:	4a28      	ldr	r2, [pc, #160]	@ (800a150 <UART_SetConfig+0xac4>)
 800a0ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0b4:	e00f      	b.n	800a0d6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a0b6:	4b26      	ldr	r3, [pc, #152]	@ (800a150 <UART_SetConfig+0xac4>)
 800a0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ba:	e00c      	b.n	800a0d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0bc:	4b25      	ldr	r3, [pc, #148]	@ (800a154 <UART_SetConfig+0xac8>)
 800a0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c0:	e009      	b.n	800a0d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c8:	e005      	b.n	800a0d6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a0d4:	bf00      	nop
    }

    if (pclk != 0U)
 800a0d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d021      	beq.n	800a120 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a158 <UART_SetConfig+0xacc>)
 800a0e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	085b      	lsrs	r3, r3, #1
 800a0f4:	441a      	add	r2, r3
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a102:	2b0f      	cmp	r3, #15
 800a104:	d909      	bls.n	800a11a <UART_SetConfig+0xa8e>
 800a106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a10c:	d205      	bcs.n	800a11a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a110:	b29a      	uxth	r2, r3
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	60da      	str	r2, [r3, #12]
 800a118:	e002      	b.n	800a120 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	2201      	movs	r2, #1
 800a124:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	2200      	movs	r2, #0
 800a134:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	2200      	movs	r2, #0
 800a13a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a13c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a140:	4618      	mov	r0, r3
 800a142:	3748      	adds	r7, #72	@ 0x48
 800a144:	46bd      	mov	sp, r7
 800a146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a14a:	bf00      	nop
 800a14c:	58024400 	.word	0x58024400
 800a150:	03d09000 	.word	0x03d09000
 800a154:	003d0900 	.word	0x003d0900
 800a158:	0800bc04 	.word	0x0800bc04

0800a15c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a168:	f003 0308 	and.w	r3, r3, #8
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00a      	beq.n	800a186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	430a      	orrs	r2, r1
 800a184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00a      	beq.n	800a1a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	430a      	orrs	r2, r1
 800a1a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ac:	f003 0302 	and.w	r3, r3, #2
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00a      	beq.n	800a1ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	430a      	orrs	r2, r1
 800a1c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ce:	f003 0304 	and.w	r3, r3, #4
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00a      	beq.n	800a1ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	430a      	orrs	r2, r1
 800a1ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f0:	f003 0310 	and.w	r3, r3, #16
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00a      	beq.n	800a20e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	430a      	orrs	r2, r1
 800a20c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a212:	f003 0320 	and.w	r3, r3, #32
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00a      	beq.n	800a230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	430a      	orrs	r2, r1
 800a22e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d01a      	beq.n	800a272 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	430a      	orrs	r2, r1
 800a250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a256:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a25a:	d10a      	bne.n	800a272 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	430a      	orrs	r2, r1
 800a270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00a      	beq.n	800a294 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	430a      	orrs	r2, r1
 800a292:	605a      	str	r2, [r3, #4]
  }
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b098      	sub	sp, #96	@ 0x60
 800a2a4:	af02      	add	r7, sp, #8
 800a2a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2b0:	f7f8 f8b4 	bl	800241c <HAL_GetTick>
 800a2b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0308 	and.w	r3, r3, #8
 800a2c0:	2b08      	cmp	r3, #8
 800a2c2:	d12f      	bne.n	800a324 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 f88e 	bl	800a3f4 <UART_WaitOnFlagUntilTimeout>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d022      	beq.n	800a324 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e6:	e853 3f00 	ldrex	r3, [r3]
 800a2ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a300:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a302:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a304:	e841 2300 	strex	r3, r2, [r1]
 800a308:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a30a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1e6      	bne.n	800a2de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2220      	movs	r2, #32
 800a314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a320:	2303      	movs	r3, #3
 800a322:	e063      	b.n	800a3ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f003 0304 	and.w	r3, r3, #4
 800a32e:	2b04      	cmp	r3, #4
 800a330:	d149      	bne.n	800a3c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a332:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a33a:	2200      	movs	r2, #0
 800a33c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f857 	bl	800a3f4 <UART_WaitOnFlagUntilTimeout>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d03c      	beq.n	800a3c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a354:	e853 3f00 	ldrex	r3, [r3]
 800a358:	623b      	str	r3, [r7, #32]
   return(result);
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a360:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	461a      	mov	r2, r3
 800a368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a36a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a36c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a372:	e841 2300 	strex	r3, r2, [r1]
 800a376:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1e6      	bne.n	800a34c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3308      	adds	r3, #8
 800a384:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	e853 3f00 	ldrex	r3, [r3]
 800a38c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f023 0301 	bic.w	r3, r3, #1
 800a394:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3308      	adds	r3, #8
 800a39c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a39e:	61fa      	str	r2, [r7, #28]
 800a3a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a2:	69b9      	ldr	r1, [r7, #24]
 800a3a4:	69fa      	ldr	r2, [r7, #28]
 800a3a6:	e841 2300 	strex	r3, r2, [r1]
 800a3aa:	617b      	str	r3, [r7, #20]
   return(result);
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d1e5      	bne.n	800a37e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2220      	movs	r2, #32
 800a3b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e012      	b.n	800a3ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2220      	movs	r2, #32
 800a3d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3758      	adds	r7, #88	@ 0x58
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	603b      	str	r3, [r7, #0]
 800a400:	4613      	mov	r3, r2
 800a402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a404:	e04f      	b.n	800a4a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40c:	d04b      	beq.n	800a4a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a40e:	f7f8 f805 	bl	800241c <HAL_GetTick>
 800a412:	4602      	mov	r2, r0
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	69ba      	ldr	r2, [r7, #24]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d302      	bcc.n	800a424 <UART_WaitOnFlagUntilTimeout+0x30>
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a424:	2303      	movs	r3, #3
 800a426:	e04e      	b.n	800a4c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 0304 	and.w	r3, r3, #4
 800a432:	2b00      	cmp	r3, #0
 800a434:	d037      	beq.n	800a4a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	2b80      	cmp	r3, #128	@ 0x80
 800a43a:	d034      	beq.n	800a4a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	2b40      	cmp	r3, #64	@ 0x40
 800a440:	d031      	beq.n	800a4a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	69db      	ldr	r3, [r3, #28]
 800a448:	f003 0308 	and.w	r3, r3, #8
 800a44c:	2b08      	cmp	r3, #8
 800a44e:	d110      	bne.n	800a472 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2208      	movs	r2, #8
 800a456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f000 f95b 	bl	800a714 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2208      	movs	r2, #8
 800a462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	e029      	b.n	800a4c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	69db      	ldr	r3, [r3, #28]
 800a478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a47c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a480:	d111      	bne.n	800a4a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a48a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f000 f941 	bl	800a714 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2220      	movs	r2, #32
 800a496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	e00f      	b.n	800a4c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	69da      	ldr	r2, [r3, #28]
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	68ba      	ldr	r2, [r7, #8]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	bf0c      	ite	eq
 800a4b6:	2301      	moveq	r3, #1
 800a4b8:	2300      	movne	r3, #0
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	461a      	mov	r2, r3
 800a4be:	79fb      	ldrb	r3, [r7, #7]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d0a0      	beq.n	800a406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
	...

0800a4d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b0a3      	sub	sp, #140	@ 0x8c
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	4613      	mov	r3, r2
 800a4dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	68ba      	ldr	r2, [r7, #8]
 800a4e2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	88fa      	ldrh	r2, [r7, #6]
 800a4e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	88fa      	ldrh	r2, [r7, #6]
 800a4f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a502:	d10e      	bne.n	800a522 <UART_Start_Receive_IT+0x52>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d105      	bne.n	800a518 <UART_Start_Receive_IT+0x48>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a512:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a516:	e02d      	b.n	800a574 <UART_Start_Receive_IT+0xa4>
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	22ff      	movs	r2, #255	@ 0xff
 800a51c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a520:	e028      	b.n	800a574 <UART_Start_Receive_IT+0xa4>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d10d      	bne.n	800a546 <UART_Start_Receive_IT+0x76>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d104      	bne.n	800a53c <UART_Start_Receive_IT+0x6c>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	22ff      	movs	r2, #255	@ 0xff
 800a536:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a53a:	e01b      	b.n	800a574 <UART_Start_Receive_IT+0xa4>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	227f      	movs	r2, #127	@ 0x7f
 800a540:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a544:	e016      	b.n	800a574 <UART_Start_Receive_IT+0xa4>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a54e:	d10d      	bne.n	800a56c <UART_Start_Receive_IT+0x9c>
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d104      	bne.n	800a562 <UART_Start_Receive_IT+0x92>
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	227f      	movs	r2, #127	@ 0x7f
 800a55c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a560:	e008      	b.n	800a574 <UART_Start_Receive_IT+0xa4>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	223f      	movs	r2, #63	@ 0x3f
 800a566:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a56a:	e003      	b.n	800a574 <UART_Start_Receive_IT+0xa4>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2222      	movs	r2, #34	@ 0x22
 800a580:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	3308      	adds	r3, #8
 800a58a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a58e:	e853 3f00 	ldrex	r3, [r3]
 800a592:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a596:	f043 0301 	orr.w	r3, r3, #1
 800a59a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3308      	adds	r3, #8
 800a5a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a5a8:	673a      	str	r2, [r7, #112]	@ 0x70
 800a5aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ac:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a5ae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a5b0:	e841 2300 	strex	r3, r2, [r1]
 800a5b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a5b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1e3      	bne.n	800a584 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5c4:	d14f      	bne.n	800a666 <UART_Start_Receive_IT+0x196>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a5cc:	88fa      	ldrh	r2, [r7, #6]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d349      	bcc.n	800a666 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5da:	d107      	bne.n	800a5ec <UART_Start_Receive_IT+0x11c>
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d103      	bne.n	800a5ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4a47      	ldr	r2, [pc, #284]	@ (800a704 <UART_Start_Receive_IT+0x234>)
 800a5e8:	675a      	str	r2, [r3, #116]	@ 0x74
 800a5ea:	e002      	b.n	800a5f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	4a46      	ldr	r2, [pc, #280]	@ (800a708 <UART_Start_Receive_IT+0x238>)
 800a5f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d01a      	beq.n	800a630 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a602:	e853 3f00 	ldrex	r3, [r3]
 800a606:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a60a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a60e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	461a      	mov	r2, r3
 800a618:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a61c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a61e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a620:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a622:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a624:	e841 2300 	strex	r3, r2, [r1]
 800a628:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a62a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1e4      	bne.n	800a5fa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	3308      	adds	r3, #8
 800a636:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a63a:	e853 3f00 	ldrex	r3, [r3]
 800a63e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a646:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	3308      	adds	r3, #8
 800a64e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a650:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a652:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a654:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a656:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a658:	e841 2300 	strex	r3, r2, [r1]
 800a65c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a65e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a660:	2b00      	cmp	r3, #0
 800a662:	d1e5      	bne.n	800a630 <UART_Start_Receive_IT+0x160>
 800a664:	e046      	b.n	800a6f4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a66e:	d107      	bne.n	800a680 <UART_Start_Receive_IT+0x1b0>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d103      	bne.n	800a680 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	4a24      	ldr	r2, [pc, #144]	@ (800a70c <UART_Start_Receive_IT+0x23c>)
 800a67c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a67e:	e002      	b.n	800a686 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4a23      	ldr	r2, [pc, #140]	@ (800a710 <UART_Start_Receive_IT+0x240>)
 800a684:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d019      	beq.n	800a6c2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a696:	e853 3f00 	ldrex	r3, [r3]
 800a69a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a6a2:	677b      	str	r3, [r7, #116]	@ 0x74
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ae:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a6b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6b4:	e841 2300 	strex	r3, r2, [r1]
 800a6b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a6ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1e6      	bne.n	800a68e <UART_Start_Receive_IT+0x1be>
 800a6c0:	e018      	b.n	800a6f4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	e853 3f00 	ldrex	r3, [r3]
 800a6ce:	613b      	str	r3, [r7, #16]
   return(result);
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	f043 0320 	orr.w	r3, r3, #32
 800a6d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	461a      	mov	r2, r3
 800a6de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6e0:	623b      	str	r3, [r7, #32]
 800a6e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e4:	69f9      	ldr	r1, [r7, #28]
 800a6e6:	6a3a      	ldr	r2, [r7, #32]
 800a6e8:	e841 2300 	strex	r3, r2, [r1]
 800a6ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1e6      	bne.n	800a6c2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	378c      	adds	r7, #140	@ 0x8c
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	0800b279 	.word	0x0800b279
 800a708:	0800af19 	.word	0x0800af19
 800a70c:	0800ad61 	.word	0x0800ad61
 800a710:	0800aba9 	.word	0x0800aba9

0800a714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a714:	b480      	push	{r7}
 800a716:	b095      	sub	sp, #84	@ 0x54
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a724:	e853 3f00 	ldrex	r3, [r3]
 800a728:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	461a      	mov	r2, r3
 800a738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a73a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a73c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a740:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a742:	e841 2300 	strex	r3, r2, [r1]
 800a746:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1e6      	bne.n	800a71c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	3308      	adds	r3, #8
 800a754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a756:	6a3b      	ldr	r3, [r7, #32]
 800a758:	e853 3f00 	ldrex	r3, [r3]
 800a75c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a75e:	69fa      	ldr	r2, [r7, #28]
 800a760:	4b1e      	ldr	r3, [pc, #120]	@ (800a7dc <UART_EndRxTransfer+0xc8>)
 800a762:	4013      	ands	r3, r2
 800a764:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	3308      	adds	r3, #8
 800a76c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a76e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a770:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a772:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a774:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a776:	e841 2300 	strex	r3, r2, [r1]
 800a77a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1e5      	bne.n	800a74e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a786:	2b01      	cmp	r3, #1
 800a788:	d118      	bne.n	800a7bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	e853 3f00 	ldrex	r3, [r3]
 800a796:	60bb      	str	r3, [r7, #8]
   return(result);
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	f023 0310 	bic.w	r3, r3, #16
 800a79e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7a8:	61bb      	str	r3, [r7, #24]
 800a7aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ac:	6979      	ldr	r1, [r7, #20]
 800a7ae:	69ba      	ldr	r2, [r7, #24]
 800a7b0:	e841 2300 	strex	r3, r2, [r1]
 800a7b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1e6      	bne.n	800a78a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2220      	movs	r2, #32
 800a7c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a7d0:	bf00      	nop
 800a7d2:	3754      	adds	r7, #84	@ 0x54
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	effffffe 	.word	0xeffffffe

0800a7e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f7fe ff3a 	bl	8009678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a804:	bf00      	nop
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b08f      	sub	sp, #60	@ 0x3c
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a81a:	2b21      	cmp	r3, #33	@ 0x21
 800a81c:	d14c      	bne.n	800a8b8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a824:	b29b      	uxth	r3, r3
 800a826:	2b00      	cmp	r3, #0
 800a828:	d132      	bne.n	800a890 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a830:	6a3b      	ldr	r3, [r7, #32]
 800a832:	e853 3f00 	ldrex	r3, [r3]
 800a836:	61fb      	str	r3, [r7, #28]
   return(result);
 800a838:	69fb      	ldr	r3, [r7, #28]
 800a83a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a83e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	461a      	mov	r2, r3
 800a846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a84a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a84e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a850:	e841 2300 	strex	r3, r2, [r1]
 800a854:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1e6      	bne.n	800a82a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	e853 3f00 	ldrex	r3, [r3]
 800a868:	60bb      	str	r3, [r7, #8]
   return(result);
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a870:	633b      	str	r3, [r7, #48]	@ 0x30
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	461a      	mov	r2, r3
 800a878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87a:	61bb      	str	r3, [r7, #24]
 800a87c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87e:	6979      	ldr	r1, [r7, #20]
 800a880:	69ba      	ldr	r2, [r7, #24]
 800a882:	e841 2300 	strex	r3, r2, [r1]
 800a886:	613b      	str	r3, [r7, #16]
   return(result);
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d1e6      	bne.n	800a85c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a88e:	e013      	b.n	800a8b8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a894:	781a      	ldrb	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8a0:	1c5a      	adds	r2, r3, #1
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a8b8:	bf00      	nop
 800a8ba:	373c      	adds	r7, #60	@ 0x3c
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b091      	sub	sp, #68	@ 0x44
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8d2:	2b21      	cmp	r3, #33	@ 0x21
 800a8d4:	d151      	bne.n	800a97a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d132      	bne.n	800a948 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ea:	e853 3f00 	ldrex	r3, [r3]
 800a8ee:	623b      	str	r3, [r7, #32]
   return(result);
 800a8f0:	6a3b      	ldr	r3, [r7, #32]
 800a8f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a900:	633b      	str	r3, [r7, #48]	@ 0x30
 800a902:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a904:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a908:	e841 2300 	strex	r3, r2, [r1]
 800a90c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1e6      	bne.n	800a8e2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	e853 3f00 	ldrex	r3, [r3]
 800a920:	60fb      	str	r3, [r7, #12]
   return(result);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a928:	637b      	str	r3, [r7, #52]	@ 0x34
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	461a      	mov	r2, r3
 800a930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a932:	61fb      	str	r3, [r7, #28]
 800a934:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a936:	69b9      	ldr	r1, [r7, #24]
 800a938:	69fa      	ldr	r2, [r7, #28]
 800a93a:	e841 2300 	strex	r3, r2, [r1]
 800a93e:	617b      	str	r3, [r7, #20]
   return(result);
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1e6      	bne.n	800a914 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a946:	e018      	b.n	800a97a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a94e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a950:	881b      	ldrh	r3, [r3, #0]
 800a952:	461a      	mov	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a95c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a962:	1c9a      	adds	r2, r3, #2
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a96e:	b29b      	uxth	r3, r3
 800a970:	3b01      	subs	r3, #1
 800a972:	b29a      	uxth	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a97a:	bf00      	nop
 800a97c:	3744      	adds	r7, #68	@ 0x44
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a986:	b480      	push	{r7}
 800a988:	b091      	sub	sp, #68	@ 0x44
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a994:	2b21      	cmp	r3, #33	@ 0x21
 800a996:	d160      	bne.n	800aa5a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a99e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a9a0:	e057      	b.n	800aa52 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d133      	bne.n	800aa16 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3308      	adds	r3, #8
 800a9b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b8:	e853 3f00 	ldrex	r3, [r3]
 800a9bc:	623b      	str	r3, [r7, #32]
   return(result);
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a9c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	3308      	adds	r3, #8
 800a9cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9d6:	e841 2300 	strex	r3, r2, [r1]
 800a9da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1e5      	bne.n	800a9ae <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	e853 3f00 	ldrex	r3, [r3]
 800a9ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa00:	61fb      	str	r3, [r7, #28]
 800aa02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa04:	69b9      	ldr	r1, [r7, #24]
 800aa06:	69fa      	ldr	r2, [r7, #28]
 800aa08:	e841 2300 	strex	r3, r2, [r1]
 800aa0c:	617b      	str	r3, [r7, #20]
   return(result);
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1e6      	bne.n	800a9e2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800aa14:	e021      	b.n	800aa5a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	69db      	ldr	r3, [r3, #28]
 800aa1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d013      	beq.n	800aa4c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa28:	781a      	ldrb	r2, [r3, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa34:	1c5a      	adds	r2, r3, #1
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	3b01      	subs	r3, #1
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800aa4c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800aa52:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1a4      	bne.n	800a9a2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800aa58:	e7ff      	b.n	800aa5a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800aa5a:	bf00      	nop
 800aa5c:	3744      	adds	r7, #68	@ 0x44
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b091      	sub	sp, #68	@ 0x44
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa74:	2b21      	cmp	r3, #33	@ 0x21
 800aa76:	d165      	bne.n	800ab44 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa7e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800aa80:	e05c      	b.n	800ab3c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d133      	bne.n	800aaf6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	3308      	adds	r3, #8
 800aa94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa96:	6a3b      	ldr	r3, [r7, #32]
 800aa98:	e853 3f00 	ldrex	r3, [r3]
 800aa9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aaa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3308      	adds	r3, #8
 800aaac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aaae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aab0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aab4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aab6:	e841 2300 	strex	r3, r2, [r1]
 800aaba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1e5      	bne.n	800aa8e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	e853 3f00 	ldrex	r3, [r3]
 800aace:	60bb      	str	r3, [r7, #8]
   return(result);
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aad6:	633b      	str	r3, [r7, #48]	@ 0x30
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	461a      	mov	r2, r3
 800aade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae0:	61bb      	str	r3, [r7, #24]
 800aae2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae4:	6979      	ldr	r1, [r7, #20]
 800aae6:	69ba      	ldr	r2, [r7, #24]
 800aae8:	e841 2300 	strex	r3, r2, [r1]
 800aaec:	613b      	str	r3, [r7, #16]
   return(result);
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1e6      	bne.n	800aac2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800aaf4:	e026      	b.n	800ab44 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	69db      	ldr	r3, [r3, #28]
 800aafc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d018      	beq.n	800ab36 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab08:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ab0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab18:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab1e:	1c9a      	adds	r2, r3, #2
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ab36:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ab3c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d19f      	bne.n	800aa82 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ab42:	e7ff      	b.n	800ab44 <UART_TxISR_16BIT_FIFOEN+0xde>
 800ab44:	bf00      	nop
 800ab46:	3744      	adds	r7, #68	@ 0x44
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b088      	sub	sp, #32
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	e853 3f00 	ldrex	r3, [r3]
 800ab64:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab6c:	61fb      	str	r3, [r7, #28]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	461a      	mov	r2, r3
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	61bb      	str	r3, [r7, #24]
 800ab78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7a:	6979      	ldr	r1, [r7, #20]
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	e841 2300 	strex	r3, r2, [r1]
 800ab82:	613b      	str	r3, [r7, #16]
   return(result);
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1e6      	bne.n	800ab58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2220      	movs	r2, #32
 800ab8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f7fe fd59 	bl	8009650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab9e:	bf00      	nop
 800aba0:	3720      	adds	r7, #32
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
	...

0800aba8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b09c      	sub	sp, #112	@ 0x70
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800abb6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abc0:	2b22      	cmp	r3, #34	@ 0x22
 800abc2:	f040 80be 	bne.w	800ad42 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abcc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800abd0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800abd4:	b2d9      	uxtb	r1, r3
 800abd6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800abda:	b2da      	uxtb	r2, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abe0:	400a      	ands	r2, r1
 800abe2:	b2d2      	uxtb	r2, r2
 800abe4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abea:	1c5a      	adds	r2, r3, #1
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	3b01      	subs	r3, #1
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f040 80a1 	bne.w	800ad52 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac18:	e853 3f00 	ldrex	r3, [r3]
 800ac1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ac1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac24:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ac34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac36:	e841 2300 	strex	r3, r2, [r1]
 800ac3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ac3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1e6      	bne.n	800ac10 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3308      	adds	r3, #8
 800ac48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac4c:	e853 3f00 	ldrex	r3, [r3]
 800ac50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac54:	f023 0301 	bic.w	r3, r3, #1
 800ac58:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	3308      	adds	r3, #8
 800ac60:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ac62:	647a      	str	r2, [r7, #68]	@ 0x44
 800ac64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac6a:	e841 2300 	strex	r3, r2, [r1]
 800ac6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d1e5      	bne.n	800ac42 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2220      	movs	r2, #32
 800ac7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a33      	ldr	r2, [pc, #204]	@ (800ad5c <UART_RxISR_8BIT+0x1b4>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d01f      	beq.n	800acd4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d018      	beq.n	800acd4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acaa:	e853 3f00 	ldrex	r3, [r3]
 800acae:	623b      	str	r3, [r7, #32]
   return(result);
 800acb0:	6a3b      	ldr	r3, [r7, #32]
 800acb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800acb6:	663b      	str	r3, [r7, #96]	@ 0x60
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	461a      	mov	r2, r3
 800acbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800acc0:	633b      	str	r3, [r7, #48]	@ 0x30
 800acc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acc8:	e841 2300 	strex	r3, r2, [r1]
 800accc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800acce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1e6      	bne.n	800aca2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d12e      	bne.n	800ad3a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	e853 3f00 	ldrex	r3, [r3]
 800acee:	60fb      	str	r3, [r7, #12]
   return(result);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f023 0310 	bic.w	r3, r3, #16
 800acf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	461a      	mov	r2, r3
 800acfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad00:	61fb      	str	r3, [r7, #28]
 800ad02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad04:	69b9      	ldr	r1, [r7, #24]
 800ad06:	69fa      	ldr	r2, [r7, #28]
 800ad08:	e841 2300 	strex	r3, r2, [r1]
 800ad0c:	617b      	str	r3, [r7, #20]
   return(result);
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1e6      	bne.n	800ace2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	69db      	ldr	r3, [r3, #28]
 800ad1a:	f003 0310 	and.w	r3, r3, #16
 800ad1e:	2b10      	cmp	r3, #16
 800ad20:	d103      	bne.n	800ad2a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2210      	movs	r2, #16
 800ad28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad30:	4619      	mov	r1, r3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7f6 fca0 	bl	8001678 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad38:	e00b      	b.n	800ad52 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7fe fc92 	bl	8009664 <HAL_UART_RxCpltCallback>
}
 800ad40:	e007      	b.n	800ad52 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	699a      	ldr	r2, [r3, #24]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f042 0208 	orr.w	r2, r2, #8
 800ad50:	619a      	str	r2, [r3, #24]
}
 800ad52:	bf00      	nop
 800ad54:	3770      	adds	r7, #112	@ 0x70
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	58000c00 	.word	0x58000c00

0800ad60 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b09c      	sub	sp, #112	@ 0x70
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ad6e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad78:	2b22      	cmp	r3, #34	@ 0x22
 800ad7a:	f040 80be 	bne.w	800aefa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad84:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad8c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ad8e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ad92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ad96:	4013      	ands	r3, r2
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad9c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ada2:	1c9a      	adds	r2, r3, #2
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800adae:	b29b      	uxth	r3, r3
 800adb0:	3b01      	subs	r3, #1
 800adb2:	b29a      	uxth	r2, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f040 80a1 	bne.w	800af0a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800add0:	e853 3f00 	ldrex	r3, [r3]
 800add4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800add6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800add8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800addc:	667b      	str	r3, [r7, #100]	@ 0x64
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ade6:	657b      	str	r3, [r7, #84]	@ 0x54
 800ade8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800adec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800adee:	e841 2300 	strex	r3, r2, [r1]
 800adf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800adf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1e6      	bne.n	800adc8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3308      	adds	r3, #8
 800ae00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae04:	e853 3f00 	ldrex	r3, [r3]
 800ae08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0c:	f023 0301 	bic.w	r3, r3, #1
 800ae10:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	3308      	adds	r3, #8
 800ae18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ae1a:	643a      	str	r2, [r7, #64]	@ 0x40
 800ae1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae22:	e841 2300 	strex	r3, r2, [r1]
 800ae26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1e5      	bne.n	800adfa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2220      	movs	r2, #32
 800ae32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a33      	ldr	r2, [pc, #204]	@ (800af14 <UART_RxISR_16BIT+0x1b4>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d01f      	beq.n	800ae8c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d018      	beq.n	800ae8c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae60:	6a3b      	ldr	r3, [r7, #32]
 800ae62:	e853 3f00 	ldrex	r3, [r3]
 800ae66:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ae6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	461a      	mov	r2, r3
 800ae76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae7a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae80:	e841 2300 	strex	r3, r2, [r1]
 800ae84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e6      	bne.n	800ae5a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d12e      	bne.n	800aef2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	e853 3f00 	ldrex	r3, [r3]
 800aea6:	60bb      	str	r3, [r7, #8]
   return(result);
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	f023 0310 	bic.w	r3, r3, #16
 800aeae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aeb8:	61bb      	str	r3, [r7, #24]
 800aeba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebc:	6979      	ldr	r1, [r7, #20]
 800aebe:	69ba      	ldr	r2, [r7, #24]
 800aec0:	e841 2300 	strex	r3, r2, [r1]
 800aec4:	613b      	str	r3, [r7, #16]
   return(result);
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1e6      	bne.n	800ae9a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	69db      	ldr	r3, [r3, #28]
 800aed2:	f003 0310 	and.w	r3, r3, #16
 800aed6:	2b10      	cmp	r3, #16
 800aed8:	d103      	bne.n	800aee2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2210      	movs	r2, #16
 800aee0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aee8:	4619      	mov	r1, r3
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7f6 fbc4 	bl	8001678 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aef0:	e00b      	b.n	800af0a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7fe fbb6 	bl	8009664 <HAL_UART_RxCpltCallback>
}
 800aef8:	e007      	b.n	800af0a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	699a      	ldr	r2, [r3, #24]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f042 0208 	orr.w	r2, r2, #8
 800af08:	619a      	str	r2, [r3, #24]
}
 800af0a:	bf00      	nop
 800af0c:	3770      	adds	r7, #112	@ 0x70
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	58000c00 	.word	0x58000c00

0800af18 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b0ac      	sub	sp, #176	@ 0xb0
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800af26:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	69db      	ldr	r3, [r3, #28]
 800af30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af4e:	2b22      	cmp	r3, #34	@ 0x22
 800af50:	f040 8180 	bne.w	800b254 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800af5a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af5e:	e123      	b.n	800b1a8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af66:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800af6a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800af6e:	b2d9      	uxtb	r1, r3
 800af70:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800af74:	b2da      	uxtb	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af7a:	400a      	ands	r2, r1
 800af7c:	b2d2      	uxtb	r2, r2
 800af7e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af84:	1c5a      	adds	r2, r3, #1
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af90:	b29b      	uxth	r3, r3
 800af92:	3b01      	subs	r3, #1
 800af94:	b29a      	uxth	r2, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	69db      	ldr	r3, [r3, #28]
 800afa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800afa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800afaa:	f003 0307 	and.w	r3, r3, #7
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d053      	beq.n	800b05a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800afb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800afb6:	f003 0301 	and.w	r3, r3, #1
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d011      	beq.n	800afe2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800afbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800afc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00b      	beq.n	800afe2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2201      	movs	r2, #1
 800afd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afd8:	f043 0201 	orr.w	r2, r3, #1
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800afe6:	f003 0302 	and.w	r3, r3, #2
 800afea:	2b00      	cmp	r3, #0
 800afec:	d011      	beq.n	800b012 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800afee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aff2:	f003 0301 	and.w	r3, r3, #1
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00b      	beq.n	800b012 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2202      	movs	r2, #2
 800b000:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b008:	f043 0204 	orr.w	r2, r3, #4
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b016:	f003 0304 	and.w	r3, r3, #4
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d011      	beq.n	800b042 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b01e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b022:	f003 0301 	and.w	r3, r3, #1
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00b      	beq.n	800b042 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2204      	movs	r2, #4
 800b030:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b038:	f043 0202 	orr.w	r2, r3, #2
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d006      	beq.n	800b05a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7fe fb13 	bl	8009678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b060:	b29b      	uxth	r3, r3
 800b062:	2b00      	cmp	r3, #0
 800b064:	f040 80a0 	bne.w	800b1a8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b070:	e853 3f00 	ldrex	r3, [r3]
 800b074:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b07c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	461a      	mov	r2, r3
 800b086:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b08a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b08c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b090:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b092:	e841 2300 	strex	r3, r2, [r1]
 800b096:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b098:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1e4      	bne.n	800b068 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	3308      	adds	r3, #8
 800b0a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0a8:	e853 3f00 	ldrex	r3, [r3]
 800b0ac:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b0ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0b0:	4b6e      	ldr	r3, [pc, #440]	@ (800b26c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	3308      	adds	r3, #8
 800b0be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b0c2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b0c4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b0c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b0ca:	e841 2300 	strex	r3, r2, [r1]
 800b0ce:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b0d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1e3      	bne.n	800b09e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2220      	movs	r2, #32
 800b0da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a60      	ldr	r2, [pc, #384]	@ (800b270 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d021      	beq.n	800b138 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d01a      	beq.n	800b138 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b108:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b10a:	e853 3f00 	ldrex	r3, [r3]
 800b10e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b112:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b124:	657b      	str	r3, [r7, #84]	@ 0x54
 800b126:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b128:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b12a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b12c:	e841 2300 	strex	r3, r2, [r1]
 800b130:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1e4      	bne.n	800b102 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d130      	bne.n	800b1a2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b14e:	e853 3f00 	ldrex	r3, [r3]
 800b152:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b156:	f023 0310 	bic.w	r3, r3, #16
 800b15a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	461a      	mov	r2, r3
 800b164:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b168:	643b      	str	r3, [r7, #64]	@ 0x40
 800b16a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b16e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b170:	e841 2300 	strex	r3, r2, [r1]
 800b174:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1e4      	bne.n	800b146 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	69db      	ldr	r3, [r3, #28]
 800b182:	f003 0310 	and.w	r3, r3, #16
 800b186:	2b10      	cmp	r3, #16
 800b188:	d103      	bne.n	800b192 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2210      	movs	r2, #16
 800b190:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b198:	4619      	mov	r1, r3
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f7f6 fa6c 	bl	8001678 <HAL_UARTEx_RxEventCallback>
 800b1a0:	e002      	b.n	800b1a8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f7fe fa5e 	bl	8009664 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b1a8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d006      	beq.n	800b1be <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800b1b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1b4:	f003 0320 	and.w	r3, r3, #32
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f47f aed1 	bne.w	800af60 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b1c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d049      	beq.n	800b264 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b1d6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d242      	bcs.n	800b264 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3308      	adds	r3, #8
 800b1e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e6:	6a3b      	ldr	r3, [r7, #32]
 800b1e8:	e853 3f00 	ldrex	r3, [r3]
 800b1ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b1f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	3308      	adds	r3, #8
 800b1fe:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b204:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b206:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b20a:	e841 2300 	strex	r3, r2, [r1]
 800b20e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1e3      	bne.n	800b1de <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a16      	ldr	r2, [pc, #88]	@ (800b274 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b21a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	e853 3f00 	ldrex	r3, [r3]
 800b228:	60bb      	str	r3, [r7, #8]
   return(result);
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	f043 0320 	orr.w	r3, r3, #32
 800b230:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	461a      	mov	r2, r3
 800b23a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b23e:	61bb      	str	r3, [r7, #24]
 800b240:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b242:	6979      	ldr	r1, [r7, #20]
 800b244:	69ba      	ldr	r2, [r7, #24]
 800b246:	e841 2300 	strex	r3, r2, [r1]
 800b24a:	613b      	str	r3, [r7, #16]
   return(result);
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1e4      	bne.n	800b21c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b252:	e007      	b.n	800b264 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	699a      	ldr	r2, [r3, #24]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f042 0208 	orr.w	r2, r2, #8
 800b262:	619a      	str	r2, [r3, #24]
}
 800b264:	bf00      	nop
 800b266:	37b0      	adds	r7, #176	@ 0xb0
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	effffffe 	.word	0xeffffffe
 800b270:	58000c00 	.word	0x58000c00
 800b274:	0800aba9 	.word	0x0800aba9

0800b278 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b0ae      	sub	sp, #184	@ 0xb8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b286:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	69db      	ldr	r3, [r3, #28]
 800b290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b2ae:	2b22      	cmp	r3, #34	@ 0x22
 800b2b0:	f040 8184 	bne.w	800b5bc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b2ba:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b2be:	e127      	b.n	800b510 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2c6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b2d2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b2d6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b2da:	4013      	ands	r3, r2
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b2e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2e8:	1c9a      	adds	r2, r3, #2
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b30a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b30e:	f003 0307 	and.w	r3, r3, #7
 800b312:	2b00      	cmp	r3, #0
 800b314:	d053      	beq.n	800b3be <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b316:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b31a:	f003 0301 	and.w	r3, r3, #1
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d011      	beq.n	800b346 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00b      	beq.n	800b346 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2201      	movs	r2, #1
 800b334:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b33c:	f043 0201 	orr.w	r2, r3, #1
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b346:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b34a:	f003 0302 	and.w	r3, r3, #2
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d011      	beq.n	800b376 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b352:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b356:	f003 0301 	and.w	r3, r3, #1
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00b      	beq.n	800b376 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2202      	movs	r2, #2
 800b364:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b36c:	f043 0204 	orr.w	r2, r3, #4
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b376:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b37a:	f003 0304 	and.w	r3, r3, #4
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d011      	beq.n	800b3a6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b382:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b386:	f003 0301 	and.w	r3, r3, #1
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00b      	beq.n	800b3a6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2204      	movs	r2, #4
 800b394:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b39c:	f043 0202 	orr.w	r2, r3, #2
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d006      	beq.n	800b3be <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7fe f961 	bl	8009678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f040 80a2 	bne.w	800b510 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3d4:	e853 3f00 	ldrex	r3, [r3]
 800b3d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b3da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b3ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b3f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b3f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b3fa:	e841 2300 	strex	r3, r2, [r1]
 800b3fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b400:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1e2      	bne.n	800b3cc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	3308      	adds	r3, #8
 800b40c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b40e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b410:	e853 3f00 	ldrex	r3, [r3]
 800b414:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b416:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b418:	4b6e      	ldr	r3, [pc, #440]	@ (800b5d4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800b41a:	4013      	ands	r3, r2
 800b41c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	3308      	adds	r3, #8
 800b426:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b42a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b42c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b42e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b430:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b432:	e841 2300 	strex	r3, r2, [r1]
 800b436:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b438:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1e3      	bne.n	800b406 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2220      	movs	r2, #32
 800b442:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a60      	ldr	r2, [pc, #384]	@ (800b5d8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d021      	beq.n	800b4a0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b466:	2b00      	cmp	r3, #0
 800b468:	d01a      	beq.n	800b4a0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b472:	e853 3f00 	ldrex	r3, [r3]
 800b476:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b47a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b47e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	461a      	mov	r2, r3
 800b488:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b48c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b48e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b490:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b492:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b494:	e841 2300 	strex	r3, r2, [r1]
 800b498:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b49a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1e4      	bne.n	800b46a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d130      	bne.n	800b50a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b6:	e853 3f00 	ldrex	r3, [r3]
 800b4ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b4bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4be:	f023 0310 	bic.w	r3, r3, #16
 800b4c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b4d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b4d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4d8:	e841 2300 	strex	r3, r2, [r1]
 800b4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b4de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1e4      	bne.n	800b4ae <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	69db      	ldr	r3, [r3, #28]
 800b4ea:	f003 0310 	and.w	r3, r3, #16
 800b4ee:	2b10      	cmp	r3, #16
 800b4f0:	d103      	bne.n	800b4fa <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2210      	movs	r2, #16
 800b4f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b500:	4619      	mov	r1, r3
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f7f6 f8b8 	bl	8001678 <HAL_UARTEx_RxEventCallback>
 800b508:	e002      	b.n	800b510 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f7fe f8aa 	bl	8009664 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b510:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b514:	2b00      	cmp	r3, #0
 800b516:	d006      	beq.n	800b526 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b518:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b51c:	f003 0320 	and.w	r3, r3, #32
 800b520:	2b00      	cmp	r3, #0
 800b522:	f47f aecd 	bne.w	800b2c0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b52c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b530:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b534:	2b00      	cmp	r3, #0
 800b536:	d049      	beq.n	800b5cc <UART_RxISR_16BIT_FIFOEN+0x354>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b53e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b542:	429a      	cmp	r2, r3
 800b544:	d242      	bcs.n	800b5cc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	3308      	adds	r3, #8
 800b54c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b550:	e853 3f00 	ldrex	r3, [r3]
 800b554:	623b      	str	r3, [r7, #32]
   return(result);
 800b556:	6a3b      	ldr	r3, [r7, #32]
 800b558:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b55c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3308      	adds	r3, #8
 800b566:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b56a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b56c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b572:	e841 2300 	strex	r3, r2, [r1]
 800b576:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1e3      	bne.n	800b546 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4a16      	ldr	r2, [pc, #88]	@ (800b5dc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b582:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	e853 3f00 	ldrex	r3, [r3]
 800b590:	60fb      	str	r3, [r7, #12]
   return(result);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f043 0320 	orr.w	r3, r3, #32
 800b598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b5a6:	61fb      	str	r3, [r7, #28]
 800b5a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5aa:	69b9      	ldr	r1, [r7, #24]
 800b5ac:	69fa      	ldr	r2, [r7, #28]
 800b5ae:	e841 2300 	strex	r3, r2, [r1]
 800b5b2:	617b      	str	r3, [r7, #20]
   return(result);
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1e4      	bne.n	800b584 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b5ba:	e007      	b.n	800b5cc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	699a      	ldr	r2, [r3, #24]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f042 0208 	orr.w	r2, r2, #8
 800b5ca:	619a      	str	r2, [r3, #24]
}
 800b5cc:	bf00      	nop
 800b5ce:	37b8      	adds	r7, #184	@ 0xb8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	effffffe 	.word	0xeffffffe
 800b5d8:	58000c00 	.word	0x58000c00
 800b5dc:	0800ad61 	.word	0x0800ad61

0800b5e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b5fc:	bf00      	nop
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d101      	bne.n	800b632 <HAL_UARTEx_DisableFifoMode+0x16>
 800b62e:	2302      	movs	r3, #2
 800b630:	e027      	b.n	800b682 <HAL_UARTEx_DisableFifoMode+0x66>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2201      	movs	r2, #1
 800b636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2224      	movs	r2, #36	@ 0x24
 800b63e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f022 0201 	bic.w	r2, r2, #1
 800b658:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b660:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2220      	movs	r2, #32
 800b674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b084      	sub	sp, #16
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d101      	bne.n	800b6a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b6a2:	2302      	movs	r3, #2
 800b6a4:	e02d      	b.n	800b702 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2224      	movs	r2, #36	@ 0x24
 800b6b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f022 0201 	bic.w	r2, r2, #1
 800b6cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	683a      	ldr	r2, [r7, #0]
 800b6de:	430a      	orrs	r2, r1
 800b6e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 f8a0 	bl	800b828 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2220      	movs	r2, #32
 800b6f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b084      	sub	sp, #16
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d101      	bne.n	800b722 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b71e:	2302      	movs	r3, #2
 800b720:	e02d      	b.n	800b77e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2224      	movs	r2, #36	@ 0x24
 800b72e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f022 0201 	bic.w	r2, r2, #1
 800b748:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	683a      	ldr	r2, [r7, #0]
 800b75a:	430a      	orrs	r2, r1
 800b75c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f862 	bl	800b828 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	68fa      	ldr	r2, [r7, #12]
 800b76a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2220      	movs	r2, #32
 800b770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b77c:	2300      	movs	r3, #0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b08c      	sub	sp, #48	@ 0x30
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	60f8      	str	r0, [r7, #12]
 800b78e:	60b9      	str	r1, [r7, #8]
 800b790:	4613      	mov	r3, r2
 800b792:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b794:	2300      	movs	r3, #0
 800b796:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7a0:	2b20      	cmp	r3, #32
 800b7a2:	d13b      	bne.n	800b81c <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d002      	beq.n	800b7b0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800b7aa:	88fb      	ldrh	r3, [r7, #6]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d101      	bne.n	800b7b4 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e034      	b.n	800b81e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800b7c0:	88fb      	ldrh	r3, [r7, #6]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	68b9      	ldr	r1, [r7, #8]
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f7fe fe82 	bl	800a4d0 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d11d      	bne.n	800b810 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2210      	movs	r2, #16
 800b7da:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	e853 3f00 	ldrex	r3, [r3]
 800b7e8:	617b      	str	r3, [r7, #20]
   return(result);
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	f043 0310 	orr.w	r3, r3, #16
 800b7f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7fc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fe:	6a39      	ldr	r1, [r7, #32]
 800b800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b802:	e841 2300 	strex	r3, r2, [r1]
 800b806:	61fb      	str	r3, [r7, #28]
   return(result);
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1e6      	bne.n	800b7dc <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800b80e:	e002      	b.n	800b816 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800b810:	2301      	movs	r3, #1
 800b812:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800b816:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b81a:	e000      	b.n	800b81e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800b81c:	2302      	movs	r3, #2
  }
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3730      	adds	r7, #48	@ 0x30
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
	...

0800b828 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b834:	2b00      	cmp	r3, #0
 800b836:	d108      	bne.n	800b84a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b848:	e031      	b.n	800b8ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b84a:	2310      	movs	r3, #16
 800b84c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b84e:	2310      	movs	r3, #16
 800b850:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	0e5b      	lsrs	r3, r3, #25
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	f003 0307 	and.w	r3, r3, #7
 800b860:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	0f5b      	lsrs	r3, r3, #29
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	f003 0307 	and.w	r3, r3, #7
 800b870:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b872:	7bbb      	ldrb	r3, [r7, #14]
 800b874:	7b3a      	ldrb	r2, [r7, #12]
 800b876:	4911      	ldr	r1, [pc, #68]	@ (800b8bc <UARTEx_SetNbDataToProcess+0x94>)
 800b878:	5c8a      	ldrb	r2, [r1, r2]
 800b87a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b87e:	7b3a      	ldrb	r2, [r7, #12]
 800b880:	490f      	ldr	r1, [pc, #60]	@ (800b8c0 <UARTEx_SetNbDataToProcess+0x98>)
 800b882:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b884:	fb93 f3f2 	sdiv	r3, r3, r2
 800b888:	b29a      	uxth	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b890:	7bfb      	ldrb	r3, [r7, #15]
 800b892:	7b7a      	ldrb	r2, [r7, #13]
 800b894:	4909      	ldr	r1, [pc, #36]	@ (800b8bc <UARTEx_SetNbDataToProcess+0x94>)
 800b896:	5c8a      	ldrb	r2, [r1, r2]
 800b898:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b89c:	7b7a      	ldrb	r2, [r7, #13]
 800b89e:	4908      	ldr	r1, [pc, #32]	@ (800b8c0 <UARTEx_SetNbDataToProcess+0x98>)
 800b8a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8a6:	b29a      	uxth	r2, r3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b8ae:	bf00      	nop
 800b8b0:	3714      	adds	r7, #20
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	0800bc1c 	.word	0x0800bc1c
 800b8c0:	0800bc24 	.word	0x0800bc24

0800b8c4 <memset>:
 800b8c4:	4402      	add	r2, r0
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d100      	bne.n	800b8ce <memset+0xa>
 800b8cc:	4770      	bx	lr
 800b8ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b8d2:	e7f9      	b.n	800b8c8 <memset+0x4>

0800b8d4 <__libc_init_array>:
 800b8d4:	b570      	push	{r4, r5, r6, lr}
 800b8d6:	4d0d      	ldr	r5, [pc, #52]	@ (800b90c <__libc_init_array+0x38>)
 800b8d8:	4c0d      	ldr	r4, [pc, #52]	@ (800b910 <__libc_init_array+0x3c>)
 800b8da:	1b64      	subs	r4, r4, r5
 800b8dc:	10a4      	asrs	r4, r4, #2
 800b8de:	2600      	movs	r6, #0
 800b8e0:	42a6      	cmp	r6, r4
 800b8e2:	d109      	bne.n	800b8f8 <__libc_init_array+0x24>
 800b8e4:	4d0b      	ldr	r5, [pc, #44]	@ (800b914 <__libc_init_array+0x40>)
 800b8e6:	4c0c      	ldr	r4, [pc, #48]	@ (800b918 <__libc_init_array+0x44>)
 800b8e8:	f000 f826 	bl	800b938 <_init>
 800b8ec:	1b64      	subs	r4, r4, r5
 800b8ee:	10a4      	asrs	r4, r4, #2
 800b8f0:	2600      	movs	r6, #0
 800b8f2:	42a6      	cmp	r6, r4
 800b8f4:	d105      	bne.n	800b902 <__libc_init_array+0x2e>
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}
 800b8f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8fc:	4798      	blx	r3
 800b8fe:	3601      	adds	r6, #1
 800b900:	e7ee      	b.n	800b8e0 <__libc_init_array+0xc>
 800b902:	f855 3b04 	ldr.w	r3, [r5], #4
 800b906:	4798      	blx	r3
 800b908:	3601      	adds	r6, #1
 800b90a:	e7f2      	b.n	800b8f2 <__libc_init_array+0x1e>
 800b90c:	0800bc34 	.word	0x0800bc34
 800b910:	0800bc34 	.word	0x0800bc34
 800b914:	0800bc34 	.word	0x0800bc34
 800b918:	0800bc38 	.word	0x0800bc38

0800b91c <memcpy>:
 800b91c:	440a      	add	r2, r1
 800b91e:	4291      	cmp	r1, r2
 800b920:	f100 33ff 	add.w	r3, r0, #4294967295
 800b924:	d100      	bne.n	800b928 <memcpy+0xc>
 800b926:	4770      	bx	lr
 800b928:	b510      	push	{r4, lr}
 800b92a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b92e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b932:	4291      	cmp	r1, r2
 800b934:	d1f9      	bne.n	800b92a <memcpy+0xe>
 800b936:	bd10      	pop	{r4, pc}

0800b938 <_init>:
 800b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93a:	bf00      	nop
 800b93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b93e:	bc08      	pop	{r3}
 800b940:	469e      	mov	lr, r3
 800b942:	4770      	bx	lr

0800b944 <_fini>:
 800b944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b946:	bf00      	nop
 800b948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b94a:	bc08      	pop	{r3}
 800b94c:	469e      	mov	lr, r3
 800b94e:	4770      	bx	lr
